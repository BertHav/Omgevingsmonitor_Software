
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002588c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003df8  08025950  08025950  00026950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029748  08029748  0002b434  2**0
                  CONTENTS
  4 .ARM          00000008  08029748  08029748  0002a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029750  08029750  0002b434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029750  08029750  0002a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08029754  08029754  0002a754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000434  20000000  08029758  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003168  20000434  08029b8c  0002b434  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000359c  08029b8c  0002b59c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002b434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035737  00000000  00000000  0002b45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009941  00000000  00000000  00060b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c50  00000000  00000000  0006a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020e5  00000000  00000000  0006d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023963  00000000  00000000  0006f20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000441c2  00000000  00000000  00092b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d40  00000000  00000000  000d6d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00178a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b414  00000000  00000000  00178b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00183f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00183fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00186521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000434 	.word	0x20000434
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08025934 	.word	0x08025934

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000438 	.word	0x20000438
 8000104:	08025934 	.word	0x08025934

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080288e0 	.word	0x080288e0
 8000e0c:	08028920 	.word	0x08028920
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802895c 	.word	0x0802895c
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000628 	.word	0x20000628

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00d fcb2 	bl	8010fd4 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000624 	.word	0x20000624

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f003 fbdc 	bl	8006e48 <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f003 fc39 	bl	8006f0c <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	2000057c 	.word	0x2000057c
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000580 	.word	0x20000580

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f005 fd27 	bl	8009130 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000670 	.word	0x20000670
 8003730:	0808000c 	.word	0x0808000c
 8003734:	2000067c 	.word	0x2000067c
 8003738:	20000680 	.word	0x20000680

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f005 fcf1 	bl	8009130 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	20000684 	.word	0x20000684
 800379c:	08080090 	.word	0x08080090
 80037a0:	200006a4 	.word	0x200006a4
 80037a4:	200006a8 	.word	0x200006a8

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000634 	.word	0x20000634

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000634 	.word	0x20000634

08003800 <sethPa>:

void sethPa(float hPa) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <sethPa+0x30>)
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (hPa > MeasVal.hPaValuemax) {
 800380e:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <sethPa+0x30>)
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	1c19      	adds	r1, r3, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fc fe9f 	bl	8000558 <__aeabi_fcmpgt>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d100      	bne.n	8003820 <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 800381e:	e002      	b.n	8003826 <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 8003820:	4b03      	ldr	r3, [pc, #12]	@ (8003830 <sethPa+0x30>)
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	20000634 	.word	0x20000634

08003834 <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <setMic+0x28>)
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <setMic+0x28>)
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <setMic+0x28>)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	20000634 	.word	0x20000634

08003860 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	0002      	movs	r2, r0
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd fead 	bl	80015d0 <__aeabi_i2f>
 8003876:	1c03      	adds	r3, r0, #0
 8003878:	490d      	ldr	r1, [pc, #52]	@ (80038b0 <setPM2p5+0x50>)
 800387a:	1c18      	adds	r0, r3, #0
 800387c:	f7fd f9aa 	bl	8000bd4 <__aeabi_fdiv>
 8003880:	1c03      	adds	r3, r0, #0
 8003882:	1c1a      	adds	r2, r3, #0
 8003884:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <setPM2p5+0x54>)
 8003886:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <setPM2p5+0x54>)
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <setPM2p5+0x54>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	1c19      	adds	r1, r3, #0
 8003892:	1c10      	adds	r0, r2, #0
 8003894:	f7fc fe60 	bl	8000558 <__aeabi_fcmpgt>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d100      	bne.n	800389e <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 800389c:	e003      	b.n	80038a6 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800389e:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <setPM2p5+0x54>)
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <setPM2p5+0x54>)
 80038a4:	60da      	str	r2, [r3, #12]
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	41200000 	.word	0x41200000
 80038b4:	20000634 	.word	0x20000634

080038b8 <setPM10>:

void setPM10(uint16_t PM10) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7fd fe81 	bl	80015d0 <__aeabi_i2f>
 80038ce:	1c03      	adds	r3, r0, #0
 80038d0:	490d      	ldr	r1, [pc, #52]	@ (8003908 <setPM10+0x50>)
 80038d2:	1c18      	adds	r0, r3, #0
 80038d4:	f7fd f97e 	bl	8000bd4 <__aeabi_fdiv>
 80038d8:	1c03      	adds	r3, r0, #0
 80038da:	1c1a      	adds	r2, r3, #0
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <setPM10+0x54>)
 80038de:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <setPM10+0x54>)
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <setPM10+0x54>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	1c19      	adds	r1, r3, #0
 80038ea:	1c10      	adds	r0, r2, #0
 80038ec:	f7fc fe34 	bl	8000558 <__aeabi_fcmpgt>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d100      	bne.n	80038f6 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038f4:	e003      	b.n	80038fe <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038f6:	4b05      	ldr	r3, [pc, #20]	@ (800390c <setPM10+0x54>)
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	4b04      	ldr	r3, [pc, #16]	@ (800390c <setPM10+0x54>)
 80038fc:	615a      	str	r2, [r3, #20]
}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b002      	add	sp, #8
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	41200000 	.word	0x41200000
 800390c:	20000634 	.word	0x20000634

08003910 <setNOx>:

void setNOx(uint16_t nox) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	0002      	movs	r2, r0
 8003918:	1dbb      	adds	r3, r7, #6
 800391a:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 800391c:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <setNOx+0x30>)
 800391e:	1dba      	adds	r2, r7, #6
 8003920:	8812      	ldrh	r2, [r2, #0]
 8003922:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <setNOx+0x30>)
 8003926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003928:	1dba      	adds	r2, r7, #6
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d903      	bls.n	8003938 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setNOx+0x30>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000634 	.word	0x20000634

08003944 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003948:	f007 fc1a 	bl	800b180 <sen5x_Get_sen5x_enable_state>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d008      	beq.n	8003962 <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 8003950:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <resetMaxMeasurementValues+0x2c>)
 8003952:	2200      	movs	r2, #0
 8003954:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003956:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <resetMaxMeasurementValues+0x2c>)
 8003958:	2200      	movs	r2, #0
 800395a:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <resetMaxMeasurementValues+0x2c>)
 800395e:	2200      	movs	r2, #0
 8003960:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.VOCIndexmax = 0;
 8003962:	4b03      	ldr	r3, [pc, #12]	@ (8003970 <resetMaxMeasurementValues+0x2c>)
 8003964:	2200      	movs	r2, #0
 8003966:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	20000634 	.word	0x20000634

08003974 <SetConfigMode>:

void SetConfigMode(){
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <SetConfigMode+0x30>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2201      	movs	r2, #1
 800397e:	4053      	eors	r3, r2
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003986:	4a08      	ldr	r2, [pc, #32]	@ (80039a8 <SetConfigMode+0x34>)
 8003988:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <SetConfigMode+0x38>)
 800398a:	0019      	movs	r1, r3
 800398c:	2003      	movs	r0, #3
 800398e:	f00c fed5 	bl	801073c <CreateLine>
  }
  ReconfigSet = true;
 8003992:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <SetConfigMode+0x30>)
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <SetConfigMode+0x3c>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
}
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	2000055b 	.word	0x2000055b
 80039a8:	08025950 	.word	0x08025950
 80039ac:	08025970 	.word	0x08025970
 80039b0:	20000203 	.word	0x20000203

080039b4 <GetReconfigMode>:

bool GetReconfigMode() {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  return ReconfigSet;
 80039b8:	4b02      	ldr	r3, [pc, #8]	@ (80039c4 <GetReconfigMode+0x10>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	2000055b 	.word	0x2000055b

080039c8 <ESP_GetUID>:

void ESP_GetUID(){
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039cc:	f00d fb4c 	bl	8011068 <HAL_GetUIDw0>
 80039d0:	0002      	movs	r2, r0
 80039d2:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <ESP_GetUID+0x28>)
 80039d4:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039d6:	f00d fb51 	bl	801107c <HAL_GetUIDw1>
 80039da:	0002      	movs	r2, r0
 80039dc:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <ESP_GetUID+0x28>)
 80039de:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039e0:	f00d fb56 	bl	8011090 <HAL_GetUIDw2>
 80039e4:	0002      	movs	r2, r0
 80039e6:	4b02      	ldr	r3, [pc, #8]	@ (80039f0 <ESP_GetUID+0x28>)
 80039e8:	609a      	str	r2, [r3, #8]
}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000564 	.word	0x20000564

080039f4 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039fc:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <ESP_Init+0x2c>)
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <ESP_Init+0x30>)
 8003a04:	2202      	movs	r2, #2
 8003a06:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a08:	f7ff ffde 	bl	80039c8 <ESP_GetUID>
  beurs = checkEEprom();
 8003a0c:	f7ff fe60 	bl	80036d0 <checkEEprom>
 8003a10:	0003      	movs	r3, r0
 8003a12:	001a      	movs	r2, r3
 8003a14:	4b04      	ldr	r3, [pc, #16]	@ (8003a28 <ESP_Init+0x34>)
 8003a16:	701a      	strb	r2, [r3, #0]
}
 8003a18:	46c0      	nop			@ (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000450 	.word	0x20000450
 8003a24:	2000002c 	.word	0x2000002c
 8003a28:	2000055e 	.word	0x2000055e

08003a2c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a2c:	b5b0      	push	{r4, r5, r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	000a      	movs	r2, r1
 8003a36:	1cbb      	adds	r3, r7, #2
 8003a38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a3a:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <ESP_Send+0x54>)
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	250f      	movs	r5, #15
 8003a40:	197c      	adds	r4, r7, r5
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	881a      	ldrh	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0019      	movs	r1, r3
 8003a4a:	f016 f885 	bl	8019b58 <HAL_UART_Transmit_DMA>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a52:	197b      	adds	r3, r7, r5
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <ESP_Send+0x58>)
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <ESP_Send+0x5c>)
 8003a5e:	0019      	movs	r1, r3
 8003a60:	2001      	movs	r0, #1
 8003a62:	f00c fe6b 	bl	801073c <CreateLine>
    return false;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e006      	b.n	8003a78 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <ESP_Send+0x60>)
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f01e fdeb 	bl	802264c <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8003a76:	2301      	movs	r3, #1
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b004      	add	sp, #16
 8003a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a80:	20000450 	.word	0x20000450
 8003a84:	08025974 	.word	0x08025974
 8003a88:	08025994 	.word	0x08025994
 8003a8c:	08025998 	.word	0x08025998

08003a90 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	000a      	movs	r2, r1
 8003a9a:	1cbb      	adds	r3, r7, #2
 8003a9c:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003a9e:	4b52      	ldr	r3, [pc, #328]	@ (8003be8 <ESP_Receive+0x158>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003aa4:	260f      	movs	r6, #15
 8003aa6:	19bb      	adds	r3, r7, r6
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003aac:	4b4f      	ldr	r3, [pc, #316]	@ (8003bec <ESP_Receive+0x15c>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	250e      	movs	r5, #14
 8003ab2:	197c      	adds	r4, r7, r5
 8003ab4:	1cbb      	adds	r3, r7, #2
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	0019      	movs	r1, r3
 8003abc:	f016 f8dc 	bl	8019c78 <HAL_UART_Receive_DMA>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003ac4:	002c      	movs	r4, r5
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d100      	bne.n	8003ad0 <ESP_Receive+0x40>
 8003ace:	e085      	b.n	8003bdc <ESP_Receive+0x14c>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ad0:	4b46      	ldr	r3, [pc, #280]	@ (8003bec <ESP_Receive+0x15c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2284      	movs	r2, #132	@ 0x84
 8003ad6:	589b      	ldr	r3, [r3, r2]
 8003ad8:	4a45      	ldr	r2, [pc, #276]	@ (8003bf0 <ESP_Receive+0x160>)
 8003ada:	4946      	ldr	r1, [pc, #280]	@ (8003bf4 <ESP_Receive+0x164>)
 8003adc:	2001      	movs	r0, #1
 8003ade:	f00c fe2d 	bl	801073c <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d008      	beq.n	8003afe <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003aec:	4a42      	ldr	r2, [pc, #264]	@ (8003bf8 <ESP_Receive+0x168>)
 8003aee:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <ESP_Receive+0x164>)
 8003af0:	0019      	movs	r1, r3
 8003af2:	2001      	movs	r0, #1
 8003af4:	f00c fe22 	bl	801073c <CreateLine>
      reset = true;
 8003af8:	19bb      	adds	r3, r7, r6
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003afe:	230e      	movs	r3, #14
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	d005      	beq.n	8003b16 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003b0a:	4a3c      	ldr	r2, [pc, #240]	@ (8003bfc <ESP_Receive+0x16c>)
 8003b0c:	4b39      	ldr	r3, [pc, #228]	@ (8003bf4 <ESP_Receive+0x164>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	2001      	movs	r0, #1
 8003b12:	f00c fe13 	bl	801073c <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b16:	230e      	movs	r3, #14
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d005      	beq.n	8003b2e <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003b22:	4a37      	ldr	r2, [pc, #220]	@ (8003c00 <ESP_Receive+0x170>)
 8003b24:	4b33      	ldr	r3, [pc, #204]	@ (8003bf4 <ESP_Receive+0x164>)
 8003b26:	0019      	movs	r1, r3
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f00c fe07 	bl	801073c <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b2e:	230e      	movs	r3, #14
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2208      	movs	r2, #8
 8003b36:	4013      	ands	r3, r2
 8003b38:	d005      	beq.n	8003b46 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b3a:	4a32      	ldr	r2, [pc, #200]	@ (8003c04 <ESP_Receive+0x174>)
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf4 <ESP_Receive+0x164>)
 8003b3e:	0019      	movs	r1, r3
 8003b40:	2001      	movs	r0, #1
 8003b42:	f00c fdfb 	bl	801073c <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b46:	230e      	movs	r3, #14
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d005      	beq.n	8003b5e <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b52:	4a2d      	ldr	r2, [pc, #180]	@ (8003c08 <ESP_Receive+0x178>)
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <ESP_Receive+0x164>)
 8003b56:	0019      	movs	r1, r3
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f00c fdef 	bl	801073c <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b5e:	230e      	movs	r3, #14
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	d005      	beq.n	8003b76 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b6a:	4a28      	ldr	r2, [pc, #160]	@ (8003c0c <ESP_Receive+0x17c>)
 8003b6c:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <ESP_Receive+0x164>)
 8003b6e:	0019      	movs	r1, r3
 8003b70:	2001      	movs	r0, #1
 8003b72:	f00c fde3 	bl	801073c <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b76:	230e      	movs	r3, #14
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2240      	movs	r2, #64	@ 0x40
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d005      	beq.n	8003b8e <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b82:	4a23      	ldr	r2, [pc, #140]	@ (8003c10 <ESP_Receive+0x180>)
 8003b84:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <ESP_Receive+0x164>)
 8003b86:	0019      	movs	r1, r3
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f00c fdd7 	bl	801073c <CreateLine>
    }
#endif
    if (reset) {
 8003b8e:	230f      	movs	r3, #15
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01c      	beq.n	8003bd2 <ESP_Receive+0x142>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003b98:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <ESP_Receive+0x184>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f00e fca9 	bl	80124f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f00d fa1f 	bl	8010fe8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8003baa:	2380      	movs	r3, #128	@ 0x80
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	481a      	ldr	r0, [pc, #104]	@ (8003c18 <ESP_Receive+0x188>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	f00e fc9f 	bl	80124f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003bb8:	2001      	movs	r0, #1
 8003bba:	f00d fa15 	bl	8010fe8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8003bbe:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <ESP_Receive+0x184>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f00e fc96 	bl	80124f6 <HAL_GPIO_WritePin>
      SetAllREDLED();
 8003bca:	f00b fd29 	bl	800f620 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003bce:	f00d feca 	bl	8011966 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003bd2:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <ESP_Receive+0x158>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
    return false;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <ESP_Receive+0x14e>
  }
  return true;
 8003bdc:	2301      	movs	r3, #1
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b005      	add	sp, #20
 8003be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	20000454 	.word	0x20000454
 8003bec:	20000450 	.word	0x20000450
 8003bf0:	080259a8 	.word	0x080259a8
 8003bf4:	08025994 	.word	0x08025994
 8003bf8:	080259d8 	.word	0x080259d8
 8003bfc:	080259fc 	.word	0x080259fc
 8003c00:	08025a20 	.word	0x08025a20
 8003c04:	08025a44 	.word	0x08025a44
 8003c08:	08025a68 	.word	0x08025a68
 8003c0c:	08025a94 	.word	0x08025a94
 8003c10:	08025ac4 	.word	0x08025ac4
 8003c14:	50001c00 	.word	0x50001c00
 8003c18:	50000800 	.word	0x50000800

08003c1c <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003c24:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <HAL_UART_ErrorCallback+0xf0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d16b      	bne.n	8003d06 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2284      	movs	r2, #132	@ 0x84
 8003c32:	589b      	ldr	r3, [r3, r2]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d065      	beq.n	8003d04 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2284      	movs	r2, #132	@ 0x84
 8003c3c:	589b      	ldr	r3, [r3, r2]
 8003c3e:	4a34      	ldr	r2, [pc, #208]	@ (8003d10 <HAL_UART_ErrorCallback+0xf4>)
 8003c40:	4934      	ldr	r1, [pc, #208]	@ (8003d14 <HAL_UART_ErrorCallback+0xf8>)
 8003c42:	2003      	movs	r0, #3
 8003c44:	f00c fd7a 	bl	801073c <CreateLine>
    switch (huart->ErrorCode) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2284      	movs	r2, #132	@ 0x84
 8003c4c:	589b      	ldr	r3, [r3, r2]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d851      	bhi.n	8003cf6 <HAL_UART_ErrorCallback+0xda>
 8003c52:	009a      	lsls	r2, r3, #2
 8003c54:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <HAL_UART_ErrorCallback+0xfc>)
 8003c56:	18d3      	adds	r3, r2, r3
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003d1c <HAL_UART_ErrorCallback+0x100>)
 8003c5e:	4b30      	ldr	r3, [pc, #192]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003c60:	0019      	movs	r1, r3
 8003c62:	2001      	movs	r0, #1
 8003c64:	f00c fd6a 	bl	801073c <CreateLine>
        break;
 8003c68:	e04d      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003d24 <HAL_UART_ErrorCallback+0x108>)
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003c6e:	0019      	movs	r1, r3
 8003c70:	2001      	movs	r0, #1
 8003c72:	f00c fd63 	bl	801073c <CreateLine>
        break;
 8003c76:	e046      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c78:	4a2b      	ldr	r2, [pc, #172]	@ (8003d28 <HAL_UART_ErrorCallback+0x10c>)
 8003c7a:	4b29      	ldr	r3, [pc, #164]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f00c fd5c 	bl	801073c <CreateLine>
        break;
 8003c84:	e03f      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c86:	4a29      	ldr	r2, [pc, #164]	@ (8003d2c <HAL_UART_ErrorCallback+0x110>)
 8003c88:	4b25      	ldr	r3, [pc, #148]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f00c fd55 	bl	801073c <CreateLine>
        break;
 8003c92:	e038      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c94:	4a26      	ldr	r2, [pc, #152]	@ (8003d30 <HAL_UART_ErrorCallback+0x114>)
 8003c96:	4b22      	ldr	r3, [pc, #136]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003c98:	0019      	movs	r1, r3
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f00c fd4e 	bl	801073c <CreateLine>
        break;
 8003ca0:	e031      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003ca2:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <HAL_UART_ErrorCallback+0x118>)
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f00c fd47 	bl	801073c <CreateLine>
        break;
 8003cae:	e02a      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003cb0:	4a21      	ldr	r2, [pc, #132]	@ (8003d38 <HAL_UART_ErrorCallback+0x11c>)
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	f00c fd40 	bl	801073c <CreateLine>
        break;
 8003cbc:	e023      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_UART_ErrorCallback+0x120>)
 8003cc0:	4b17      	ldr	r3, [pc, #92]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f00c fd39 	bl	801073c <CreateLine>
        break;
 8003cca:	e01c      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <HAL_UART_ErrorCallback+0x124>)
 8003cce:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f00c fd32 	bl	801073c <CreateLine>
        break;
 8003cd8:	e015      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003cda:	4a1a      	ldr	r2, [pc, #104]	@ (8003d44 <HAL_UART_ErrorCallback+0x128>)
 8003cdc:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003cde:	0019      	movs	r1, r3
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	f00c fd2b 	bl	801073c <CreateLine>
        break;
 8003ce6:	e00e      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003ce8:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <HAL_UART_ErrorCallback+0x12c>)
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003cec:	0019      	movs	r1, r3
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f00c fd24 	bl	801073c <CreateLine>
        break;
 8003cf4:	e007      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003cf6:	4a15      	ldr	r2, [pc, #84]	@ (8003d4c <HAL_UART_ErrorCallback+0x130>)
 8003cf8:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <HAL_UART_ErrorCallback+0x104>)
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f00c fd1d 	bl	801073c <CreateLine>
 8003d02:	e000      	b.n	8003d06 <HAL_UART_ErrorCallback+0xea>
      return;
 8003d04:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000450 	.word	0x20000450
 8003d10:	08025af4 	.word	0x08025af4
 8003d14:	08025970 	.word	0x08025970
 8003d18:	08028a28 	.word	0x08028a28
 8003d1c:	08025b24 	.word	0x08025b24
 8003d20:	08025994 	.word	0x08025994
 8003d24:	08025b58 	.word	0x08025b58
 8003d28:	08025b84 	.word	0x08025b84
 8003d2c:	08025bb8 	.word	0x08025bb8
 8003d30:	08025be4 	.word	0x08025be4
 8003d34:	08025c0c 	.word	0x08025c0c
 8003d38:	08025c3c 	.word	0x08025c3c
 8003d3c:	08025c74 	.word	0x08025c74
 8003d40:	08025cac 	.word	0x08025cac
 8003d44:	08025cd4 	.word	0x08025cd4
 8003d48:	08025cfc 	.word	0x08025cfc
 8003d4c:	08025d28 	.word	0x08025d28

08003d50 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e010      	b.n	8003d82 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	001a      	movs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	1898      	adds	r0, r3, r2
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	001a      	movs	r2, r3
 8003d74:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <uint8ArrayToString+0x44>)
 8003d76:	0019      	movs	r1, r3
 8003d78:	f01e fcd8 	bl	802272c <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b0b      	cmp	r3, #11
 8003d86:	ddeb      	ble.n	8003d60 <uint8ArrayToString+0x10>
  }
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	08025d4c 	.word	0x08025d4c

08003d98 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9a:	b089      	sub	sp, #36	@ 0x24
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	6039      	str	r1, [r7, #0]
 8003da0:	0011      	movs	r1, r2
 8003da2:	1dfb      	adds	r3, r7, #7
 8003da4:	1c02      	adds	r2, r0, #0
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	1dbb      	adds	r3, r7, #6
 8003daa:	1c0a      	adds	r2, r1, #0
 8003dac:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003dae:	4b23      	ldr	r3, [pc, #140]	@ (8003e3c <CreateMessage+0xa4>)
 8003db0:	4823      	ldr	r0, [pc, #140]	@ (8003e40 <CreateMessage+0xa8>)
 8003db2:	220c      	movs	r2, #12
 8003db4:	0019      	movs	r1, r3
 8003db6:	f005 f9bb 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003dba:	4b22      	ldr	r3, [pc, #136]	@ (8003e44 <CreateMessage+0xac>)
 8003dbc:	4822      	ldr	r0, [pc, #136]	@ (8003e48 <CreateMessage+0xb0>)
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	f005 f9b5 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003dc6:	4b21      	ldr	r3, [pc, #132]	@ (8003e4c <CreateMessage+0xb4>)
 8003dc8:	4821      	ldr	r0, [pc, #132]	@ (8003e50 <CreateMessage+0xb8>)
 8003dca:	220c      	movs	r2, #12
 8003dcc:	0019      	movs	r1, r3
 8003dce:	f005 f9af 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003dd2:	4b20      	ldr	r3, [pc, #128]	@ (8003e54 <CreateMessage+0xbc>)
 8003dd4:	4820      	ldr	r0, [pc, #128]	@ (8003e58 <CreateMessage+0xc0>)
 8003dd6:	220c      	movs	r2, #12
 8003dd8:	0019      	movs	r1, r3
 8003dda:	f005 f9a9 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8003dde:	4b1f      	ldr	r3, [pc, #124]	@ (8003e5c <CreateMessage+0xc4>)
 8003de0:	481f      	ldr	r0, [pc, #124]	@ (8003e60 <CreateMessage+0xc8>)
 8003de2:	220c      	movs	r2, #12
 8003de4:	0019      	movs	r1, r3
 8003de6:	f005 f9a3 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003dea:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <CreateMessage+0xcc>)
 8003dec:	481e      	ldr	r0, [pc, #120]	@ (8003e68 <CreateMessage+0xd0>)
 8003dee:	220c      	movs	r2, #12
 8003df0:	0019      	movs	r1, r3
 8003df2:	f005 f99d 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003df6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e6c <CreateMessage+0xd4>)
 8003df8:	481d      	ldr	r0, [pc, #116]	@ (8003e70 <CreateMessage+0xd8>)
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	f005 f997 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003e02:	4b1c      	ldr	r3, [pc, #112]	@ (8003e74 <CreateMessage+0xdc>)
 8003e04:	481c      	ldr	r0, [pc, #112]	@ (8003e78 <CreateMessage+0xe0>)
 8003e06:	220c      	movs	r2, #12
 8003e08:	0019      	movs	r1, r3
 8003e0a:	f005 f991 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <CreateMessage+0xe4>)
 8003e10:	481b      	ldr	r0, [pc, #108]	@ (8003e80 <CreateMessage+0xe8>)
 8003e12:	220c      	movs	r2, #12
 8003e14:	0019      	movs	r1, r3
 8003e16:	f005 f98b 	bl	8009130 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e84 <CreateMessage+0xec>)
 8003e1c:	481a      	ldr	r0, [pc, #104]	@ (8003e88 <CreateMessage+0xf0>)
 8003e1e:	220c      	movs	r2, #12
 8003e20:	0019      	movs	r1, r3
 8003e22:	f005 f985 	bl	8009130 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003e26:	f7ff fc89 	bl	800373c <checkName>
 8003e2a:	1e03      	subs	r3, r0, #0
 8003e2c:	d032      	beq.n	8003e94 <CreateMessage+0xfc>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e2e:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <CreateMessage+0xf4>)
 8003e30:	4817      	ldr	r0, [pc, #92]	@ (8003e90 <CreateMessage+0xf8>)
 8003e32:	2220      	movs	r2, #32
 8003e34:	0019      	movs	r1, r3
 8003e36:	f005 f97b 	bl	8009130 <ReadUint8ArrayEEprom>
 8003e3a:	e031      	b.n	8003ea0 <CreateMessage+0x108>
 8003e3c:	200006ac 	.word	0x200006ac
 8003e40:	0808000c 	.word	0x0808000c
 8003e44:	200006b8 	.word	0x200006b8
 8003e48:	08080018 	.word	0x08080018
 8003e4c:	200006c4 	.word	0x200006c4
 8003e50:	08080048 	.word	0x08080048
 8003e54:	200006d0 	.word	0x200006d0
 8003e58:	08080030 	.word	0x08080030
 8003e5c:	200006dc 	.word	0x200006dc
 8003e60:	0808003c 	.word	0x0808003c
 8003e64:	200006e8 	.word	0x200006e8
 8003e68:	0808006c 	.word	0x0808006c
 8003e6c:	200006f4 	.word	0x200006f4
 8003e70:	08080078 	.word	0x08080078
 8003e74:	20000700 	.word	0x20000700
 8003e78:	08080024 	.word	0x08080024
 8003e7c:	2000070c 	.word	0x2000070c
 8003e80:	08080054 	.word	0x08080054
 8003e84:	20000718 	.word	0x20000718
 8003e88:	08080060 	.word	0x08080060
 8003e8c:	20000724 	.word	0x20000724
 8003e90:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e94:	4bed      	ldr	r3, [pc, #948]	@ (800424c <CreateMessage+0x4b4>)
 8003e96:	4aee      	ldr	r2, [pc, #952]	@ (8004250 <CreateMessage+0x4b8>)
 8003e98:	6811      	ldr	r1, [r2, #0]
 8003e9a:	6019      	str	r1, [r3, #0]
 8003e9c:	7912      	ldrb	r2, [r2, #4]
 8003e9e:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003ea0:	f7ff fbf2 	bl	8003688 <setCharges>
  uint16_t index = 0;
 8003ea4:	260e      	movs	r6, #14
 8003ea6:	19bb      	adds	r3, r7, r6
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003eac:	19bb      	adds	r3, r7, r6
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	4be8      	ldr	r3, [pc, #928]	@ (8004254 <CreateMessage+0x4bc>)
 8003eb2:	18d3      	adds	r3, r2, r3
 8003eb4:	4ae8      	ldr	r2, [pc, #928]	@ (8004258 <CreateMessage+0x4c0>)
 8003eb6:	0011      	movs	r1, r2
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f01e fc37 	bl	802272c <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8003ebe:	4ae7      	ldr	r2, [pc, #924]	@ (800425c <CreateMessage+0x4c4>)
 8003ec0:	4be7      	ldr	r3, [pc, #924]	@ (8004260 <CreateMessage+0x4c8>)
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7ff ff43 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003eca:	4be6      	ldr	r3, [pc, #920]	@ (8004264 <CreateMessage+0x4cc>)
 8003ecc:	689c      	ldr	r4, [r3, #8]
 8003ece:	4be6      	ldr	r3, [pc, #920]	@ (8004268 <CreateMessage+0x4d0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	1c18      	adds	r0, r3, #0
 8003ed4:	f7ff fac6 	bl	8003464 <__aeabi_f2d>
 8003ed8:	0002      	movs	r2, r0
 8003eda:	000b      	movs	r3, r1
 8003edc:	4ddb      	ldr	r5, [pc, #876]	@ (800424c <CreateMessage+0x4b4>)
 8003ede:	49e3      	ldr	r1, [pc, #908]	@ (800426c <CreateMessage+0x4d4>)
 8003ee0:	48e3      	ldr	r0, [pc, #908]	@ (8004270 <CreateMessage+0x4d8>)
 8003ee2:	9202      	str	r2, [sp, #8]
 8003ee4:	9303      	str	r3, [sp, #12]
 8003ee6:	4bde      	ldr	r3, [pc, #888]	@ (8004260 <CreateMessage+0x4c8>)
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	002b      	movs	r3, r5
 8003eec:	0022      	movs	r2, r4
 8003eee:	f01e fc1d 	bl	802272c <siprintf>
#endif
index = strlen(message);
 8003ef2:	4bd8      	ldr	r3, [pc, #864]	@ (8004254 <CreateMessage+0x4bc>)
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7fc f939 	bl	800016c <strlen>
 8003efa:	0002      	movs	r2, r0
 8003efc:	19bb      	adds	r3, r7, r6
 8003efe:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f00:	1dbb      	adds	r3, r7, #6
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d019      	beq.n	8003f3c <CreateMessage+0x1a4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f08:	4bd2      	ldr	r3, [pc, #840]	@ (8004254 <CreateMessage+0x4bc>)
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fc f92e 	bl	800016c <strlen>
 8003f10:	0003      	movs	r3, r0
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	4bcf      	ldr	r3, [pc, #828]	@ (8004254 <CreateMessage+0x4bc>)
 8003f16:	0011      	movs	r1, r2
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7ff fd87 	bl	8003a2c <ESP_Send>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	001a      	movs	r2, r3
 8003f22:	4bd4      	ldr	r3, [pc, #848]	@ (8004274 <CreateMessage+0x4dc>)
 8003f24:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f26:	4bd4      	ldr	r3, [pc, #848]	@ (8004278 <CreateMessage+0x4e0>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	4bd1      	ldr	r3, [pc, #836]	@ (8004274 <CreateMessage+0x4dc>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	4013      	ands	r3, r2
 8003f32:	1e5a      	subs	r2, r3, #1
 8003f34:	4193      	sbcs	r3, r2
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	4bcf      	ldr	r3, [pc, #828]	@ (8004278 <CreateMessage+0x4e0>)
 8003f3a:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003f3c:	4acf      	ldr	r2, [pc, #828]	@ (800427c <CreateMessage+0x4e4>)
 8003f3e:	4bc8      	ldr	r3, [pc, #800]	@ (8004260 <CreateMessage+0x4c8>)
 8003f40:	0011      	movs	r1, r2
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7ff ff04 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003f48:	4bc6      	ldr	r3, [pc, #792]	@ (8004264 <CreateMessage+0x4cc>)
 8003f4a:	689c      	ldr	r4, [r3, #8]
 8003f4c:	4bc6      	ldr	r3, [pc, #792]	@ (8004268 <CreateMessage+0x4d0>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	1c18      	adds	r0, r3, #0
 8003f52:	f7ff fa87 	bl	8003464 <__aeabi_f2d>
 8003f56:	0002      	movs	r2, r0
 8003f58:	000b      	movs	r3, r1
 8003f5a:	4dbc      	ldr	r5, [pc, #752]	@ (800424c <CreateMessage+0x4b4>)
 8003f5c:	49c8      	ldr	r1, [pc, #800]	@ (8004280 <CreateMessage+0x4e8>)
 8003f5e:	48bd      	ldr	r0, [pc, #756]	@ (8004254 <CreateMessage+0x4bc>)
 8003f60:	9202      	str	r2, [sp, #8]
 8003f62:	9303      	str	r3, [sp, #12]
 8003f64:	4bbe      	ldr	r3, [pc, #760]	@ (8004260 <CreateMessage+0x4c8>)
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	002b      	movs	r3, r5
 8003f6a:	0022      	movs	r2, r4
 8003f6c:	f01e fbde 	bl	802272c <siprintf>
#endif
  index += strlen(message);
 8003f70:	4bb8      	ldr	r3, [pc, #736]	@ (8004254 <CreateMessage+0x4bc>)
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7fc f8fa 	bl	800016c <strlen>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	b299      	uxth	r1, r3
 8003f7c:	220e      	movs	r2, #14
 8003f7e:	18bb      	adds	r3, r7, r2
 8003f80:	18ba      	adds	r2, r7, r2
 8003f82:	8812      	ldrh	r2, [r2, #0]
 8003f84:	188a      	adds	r2, r1, r2
 8003f86:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f88:	1dbb      	adds	r3, r7, #6
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d019      	beq.n	8003fc4 <CreateMessage+0x22c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f90:	4bb0      	ldr	r3, [pc, #704]	@ (8004254 <CreateMessage+0x4bc>)
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7fc f8ea 	bl	800016c <strlen>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	4bad      	ldr	r3, [pc, #692]	@ (8004254 <CreateMessage+0x4bc>)
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7ff fd43 	bl	8003a2c <ESP_Send>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	001a      	movs	r2, r3
 8003faa:	4bb2      	ldr	r3, [pc, #712]	@ (8004274 <CreateMessage+0x4dc>)
 8003fac:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fae:	4bb2      	ldr	r3, [pc, #712]	@ (8004278 <CreateMessage+0x4e0>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	001a      	movs	r2, r3
 8003fb4:	4baf      	ldr	r3, [pc, #700]	@ (8004274 <CreateMessage+0x4dc>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	1e5a      	subs	r2, r3, #1
 8003fbc:	4193      	sbcs	r3, r2
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	4bad      	ldr	r3, [pc, #692]	@ (8004278 <CreateMessage+0x4e0>)
 8003fc2:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003fc4:	4aaf      	ldr	r2, [pc, #700]	@ (8004284 <CreateMessage+0x4ec>)
 8003fc6:	4ba6      	ldr	r3, [pc, #664]	@ (8004260 <CreateMessage+0x4c8>)
 8003fc8:	0011      	movs	r1, r2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7ff fec0 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003fd0:	4ba4      	ldr	r3, [pc, #656]	@ (8004264 <CreateMessage+0x4cc>)
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	4ba4      	ldr	r3, [pc, #656]	@ (8004268 <CreateMessage+0x4d0>)
 8003fd6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003fd8:	4c9c      	ldr	r4, [pc, #624]	@ (800424c <CreateMessage+0x4b4>)
 8003fda:	49ab      	ldr	r1, [pc, #684]	@ (8004288 <CreateMessage+0x4f0>)
 8003fdc:	489d      	ldr	r0, [pc, #628]	@ (8004254 <CreateMessage+0x4bc>)
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	4b9f      	ldr	r3, [pc, #636]	@ (8004260 <CreateMessage+0x4c8>)
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	0023      	movs	r3, r4
 8003fe6:	f01e fba1 	bl	802272c <siprintf>
#endif
  index += strlen(message);
 8003fea:	4b9a      	ldr	r3, [pc, #616]	@ (8004254 <CreateMessage+0x4bc>)
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7fc f8bd 	bl	800016c <strlen>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	b299      	uxth	r1, r3
 8003ff6:	220e      	movs	r2, #14
 8003ff8:	18bb      	adds	r3, r7, r2
 8003ffa:	18ba      	adds	r2, r7, r2
 8003ffc:	8812      	ldrh	r2, [r2, #0]
 8003ffe:	188a      	adds	r2, r1, r2
 8004000:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004002:	1dbb      	adds	r3, r7, #6
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <CreateMessage+0x2a6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800400a:	4b92      	ldr	r3, [pc, #584]	@ (8004254 <CreateMessage+0x4bc>)
 800400c:	0018      	movs	r0, r3
 800400e:	f7fc f8ad 	bl	800016c <strlen>
 8004012:	0003      	movs	r3, r0
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b8f      	ldr	r3, [pc, #572]	@ (8004254 <CreateMessage+0x4bc>)
 8004018:	0011      	movs	r1, r2
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff fd06 	bl	8003a2c <ESP_Send>
 8004020:	0003      	movs	r3, r0
 8004022:	001a      	movs	r2, r3
 8004024:	4b93      	ldr	r3, [pc, #588]	@ (8004274 <CreateMessage+0x4dc>)
 8004026:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004028:	4b93      	ldr	r3, [pc, #588]	@ (8004278 <CreateMessage+0x4e0>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	001a      	movs	r2, r3
 800402e:	4b91      	ldr	r3, [pc, #580]	@ (8004274 <CreateMessage+0x4dc>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	4013      	ands	r3, r2
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	4193      	sbcs	r3, r2
 8004038:	b2da      	uxtb	r2, r3
 800403a:	4b8f      	ldr	r3, [pc, #572]	@ (8004278 <CreateMessage+0x4e0>)
 800403c:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 800403e:	f006 f971 	bl	800a324 <IsBMP280SensorPresent>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d043      	beq.n	80040ce <CreateMessage+0x336>
    uint8ArrayToString(Buffer, hPaConfig);
 8004046:	4a91      	ldr	r2, [pc, #580]	@ (800428c <CreateMessage+0x4f4>)
 8004048:	4b85      	ldr	r3, [pc, #532]	@ (8004260 <CreateMessage+0x4c8>)
 800404a:	0011      	movs	r1, r2
 800404c:	0018      	movs	r0, r3
 800404e:	f7ff fe7f 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
    sprintf(&message[0], ",{\"name\":\"hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8004052:	4b84      	ldr	r3, [pc, #528]	@ (8004264 <CreateMessage+0x4cc>)
 8004054:	689c      	ldr	r4, [r3, #8]
 8004056:	4b84      	ldr	r3, [pc, #528]	@ (8004268 <CreateMessage+0x4d0>)
 8004058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405a:	1c18      	adds	r0, r3, #0
 800405c:	f7ff fa02 	bl	8003464 <__aeabi_f2d>
 8004060:	0002      	movs	r2, r0
 8004062:	000b      	movs	r3, r1
 8004064:	4d79      	ldr	r5, [pc, #484]	@ (800424c <CreateMessage+0x4b4>)
 8004066:	498a      	ldr	r1, [pc, #552]	@ (8004290 <CreateMessage+0x4f8>)
 8004068:	487a      	ldr	r0, [pc, #488]	@ (8004254 <CreateMessage+0x4bc>)
 800406a:	9202      	str	r2, [sp, #8]
 800406c:	9303      	str	r3, [sp, #12]
 800406e:	4b7c      	ldr	r3, [pc, #496]	@ (8004260 <CreateMessage+0x4c8>)
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	002b      	movs	r3, r5
 8004074:	0022      	movs	r2, r4
 8004076:	f01e fb59 	bl	802272c <siprintf>
#endif
    index += strlen(message);
 800407a:	4b76      	ldr	r3, [pc, #472]	@ (8004254 <CreateMessage+0x4bc>)
 800407c:	0018      	movs	r0, r3
 800407e:	f7fc f875 	bl	800016c <strlen>
 8004082:	0003      	movs	r3, r0
 8004084:	b299      	uxth	r1, r3
 8004086:	220e      	movs	r2, #14
 8004088:	18bb      	adds	r3, r7, r2
 800408a:	18ba      	adds	r2, r7, r2
 800408c:	8812      	ldrh	r2, [r2, #0]
 800408e:	188a      	adds	r2, r1, r2
 8004090:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004092:	1dbb      	adds	r3, r7, #6
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d019      	beq.n	80040ce <CreateMessage+0x336>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800409a:	4b6e      	ldr	r3, [pc, #440]	@ (8004254 <CreateMessage+0x4bc>)
 800409c:	0018      	movs	r0, r3
 800409e:	f7fc f865 	bl	800016c <strlen>
 80040a2:	0003      	movs	r3, r0
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004254 <CreateMessage+0x4bc>)
 80040a8:	0011      	movs	r1, r2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7ff fcbe 	bl	8003a2c <ESP_Send>
 80040b0:	0003      	movs	r3, r0
 80040b2:	001a      	movs	r2, r3
 80040b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004274 <CreateMessage+0x4dc>)
 80040b6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80040b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004278 <CreateMessage+0x4e0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	001a      	movs	r2, r3
 80040be:	4b6d      	ldr	r3, [pc, #436]	@ (8004274 <CreateMessage+0x4dc>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	4013      	ands	r3, r2
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	4193      	sbcs	r3, r2
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4b6b      	ldr	r3, [pc, #428]	@ (8004278 <CreateMessage+0x4e0>)
 80040cc:	701a      	strb	r2, [r3, #0]
    }
  }

  uint8ArrayToString(Buffer, soundConfig);
 80040ce:	4a71      	ldr	r2, [pc, #452]	@ (8004294 <CreateMessage+0x4fc>)
 80040d0:	4b63      	ldr	r3, [pc, #396]	@ (8004260 <CreateMessage+0x4c8>)
 80040d2:	0011      	movs	r1, r2
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fe3b 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 80040da:	4b62      	ldr	r3, [pc, #392]	@ (8004264 <CreateMessage+0x4cc>)
 80040dc:	689c      	ldr	r4, [r3, #8]
 80040de:	4b62      	ldr	r3, [pc, #392]	@ (8004268 <CreateMessage+0x4d0>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	1c18      	adds	r0, r3, #0
 80040e4:	f7ff f9be 	bl	8003464 <__aeabi_f2d>
 80040e8:	0002      	movs	r2, r0
 80040ea:	000b      	movs	r3, r1
 80040ec:	4d57      	ldr	r5, [pc, #348]	@ (800424c <CreateMessage+0x4b4>)
 80040ee:	496a      	ldr	r1, [pc, #424]	@ (8004298 <CreateMessage+0x500>)
 80040f0:	4858      	ldr	r0, [pc, #352]	@ (8004254 <CreateMessage+0x4bc>)
 80040f2:	9202      	str	r2, [sp, #8]
 80040f4:	9303      	str	r3, [sp, #12]
 80040f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004260 <CreateMessage+0x4c8>)
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	002b      	movs	r3, r5
 80040fc:	0022      	movs	r2, r4
 80040fe:	f01e fb15 	bl	802272c <siprintf>
#endif
  index += strlen(message);
 8004102:	4b54      	ldr	r3, [pc, #336]	@ (8004254 <CreateMessage+0x4bc>)
 8004104:	0018      	movs	r0, r3
 8004106:	f7fc f831 	bl	800016c <strlen>
 800410a:	0003      	movs	r3, r0
 800410c:	b299      	uxth	r1, r3
 800410e:	220e      	movs	r2, #14
 8004110:	18bb      	adds	r3, r7, r2
 8004112:	18ba      	adds	r2, r7, r2
 8004114:	8812      	ldrh	r2, [r2, #0]
 8004116:	188a      	adds	r2, r1, r2
 8004118:	801a      	strh	r2, [r3, #0]
  if (send) {
 800411a:	1dbb      	adds	r3, r7, #6
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d019      	beq.n	8004156 <CreateMessage+0x3be>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004122:	4b4c      	ldr	r3, [pc, #304]	@ (8004254 <CreateMessage+0x4bc>)
 8004124:	0018      	movs	r0, r3
 8004126:	f7fc f821 	bl	800016c <strlen>
 800412a:	0003      	movs	r3, r0
 800412c:	b29a      	uxth	r2, r3
 800412e:	4b49      	ldr	r3, [pc, #292]	@ (8004254 <CreateMessage+0x4bc>)
 8004130:	0011      	movs	r1, r2
 8004132:	0018      	movs	r0, r3
 8004134:	f7ff fc7a 	bl	8003a2c <ESP_Send>
 8004138:	0003      	movs	r3, r0
 800413a:	001a      	movs	r2, r3
 800413c:	4b4d      	ldr	r3, [pc, #308]	@ (8004274 <CreateMessage+0x4dc>)
 800413e:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004140:	4b4d      	ldr	r3, [pc, #308]	@ (8004278 <CreateMessage+0x4e0>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	001a      	movs	r2, r3
 8004146:	4b4b      	ldr	r3, [pc, #300]	@ (8004274 <CreateMessage+0x4dc>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	4013      	ands	r3, r2
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	4193      	sbcs	r3, r2
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4b49      	ldr	r3, [pc, #292]	@ (8004278 <CreateMessage+0x4e0>)
 8004154:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8004156:	1dfb      	adds	r3, r7, #7
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2201      	movs	r2, #1
 800415c:	4053      	eors	r3, r2
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d100      	bne.n	8004166 <CreateMessage+0x3ce>
 8004164:	e14b      	b.n	80043fe <CreateMessage+0x666>
    uint8ArrayToString(Buffer, solarConfig);
 8004166:	4a4d      	ldr	r2, [pc, #308]	@ (800429c <CreateMessage+0x504>)
 8004168:	4b3d      	ldr	r3, [pc, #244]	@ (8004260 <CreateMessage+0x4c8>)
 800416a:	0011      	movs	r1, r2
 800416c:	0018      	movs	r0, r3
 800416e:	f7ff fdef 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8004172:	4b3c      	ldr	r3, [pc, #240]	@ (8004264 <CreateMessage+0x4cc>)
 8004174:	689c      	ldr	r4, [r3, #8]
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <CreateMessage+0x508>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1c18      	adds	r0, r3, #0
 800417c:	f7ff f972 	bl	8003464 <__aeabi_f2d>
 8004180:	0002      	movs	r2, r0
 8004182:	000b      	movs	r3, r1
 8004184:	4d31      	ldr	r5, [pc, #196]	@ (800424c <CreateMessage+0x4b4>)
 8004186:	4947      	ldr	r1, [pc, #284]	@ (80042a4 <CreateMessage+0x50c>)
 8004188:	4832      	ldr	r0, [pc, #200]	@ (8004254 <CreateMessage+0x4bc>)
 800418a:	9202      	str	r2, [sp, #8]
 800418c:	9303      	str	r3, [sp, #12]
 800418e:	4b34      	ldr	r3, [pc, #208]	@ (8004260 <CreateMessage+0x4c8>)
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	002b      	movs	r3, r5
 8004194:	0022      	movs	r2, r4
 8004196:	f01e fac9 	bl	802272c <siprintf>
#endif
    index += strlen(message);
 800419a:	4b2e      	ldr	r3, [pc, #184]	@ (8004254 <CreateMessage+0x4bc>)
 800419c:	0018      	movs	r0, r3
 800419e:	f7fb ffe5 	bl	800016c <strlen>
 80041a2:	0003      	movs	r3, r0
 80041a4:	b299      	uxth	r1, r3
 80041a6:	220e      	movs	r2, #14
 80041a8:	18bb      	adds	r3, r7, r2
 80041aa:	18ba      	adds	r2, r7, r2
 80041ac:	8812      	ldrh	r2, [r2, #0]
 80041ae:	188a      	adds	r2, r1, r2
 80041b0:	801a      	strh	r2, [r3, #0]
    if (send) {
 80041b2:	1dbb      	adds	r3, r7, #6
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d019      	beq.n	80041ee <CreateMessage+0x456>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80041ba:	4b26      	ldr	r3, [pc, #152]	@ (8004254 <CreateMessage+0x4bc>)
 80041bc:	0018      	movs	r0, r3
 80041be:	f7fb ffd5 	bl	800016c <strlen>
 80041c2:	0003      	movs	r3, r0
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	4b23      	ldr	r3, [pc, #140]	@ (8004254 <CreateMessage+0x4bc>)
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7ff fc2e 	bl	8003a2c <ESP_Send>
 80041d0:	0003      	movs	r3, r0
 80041d2:	001a      	movs	r2, r3
 80041d4:	4b27      	ldr	r3, [pc, #156]	@ (8004274 <CreateMessage+0x4dc>)
 80041d6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80041d8:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <CreateMessage+0x4e0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	001a      	movs	r2, r3
 80041de:	4b25      	ldr	r3, [pc, #148]	@ (8004274 <CreateMessage+0x4dc>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	4013      	ands	r3, r2
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	4193      	sbcs	r3, r2
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4b23      	ldr	r3, [pc, #140]	@ (8004278 <CreateMessage+0x4e0>)
 80041ec:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80041ee:	4b2e      	ldr	r3, [pc, #184]	@ (80042a8 <CreateMessage+0x510>)
 80041f0:	791b      	ldrb	r3, [r3, #4]
 80041f2:	2b35      	cmp	r3, #53	@ 0x35
 80041f4:	d000      	beq.n	80041f8 <CreateMessage+0x460>
 80041f6:	e075      	b.n	80042e4 <CreateMessage+0x54c>
 80041f8:	f002 fedc 	bl	8006fb4 <Check_USB_PowerOn>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d071      	beq.n	80042e4 <CreateMessage+0x54c>
      uint8ArrayToString(Buffer, noxConfig);
 8004200:	4a2a      	ldr	r2, [pc, #168]	@ (80042ac <CreateMessage+0x514>)
 8004202:	4b17      	ldr	r3, [pc, #92]	@ (8004260 <CreateMessage+0x4c8>)
 8004204:	0011      	movs	r1, r2
 8004206:	0018      	movs	r0, r3
 8004208:	f7ff fda2 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 800420c:	4b15      	ldr	r3, [pc, #84]	@ (8004264 <CreateMessage+0x4cc>)
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <CreateMessage+0x4d0>)
 8004212:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004214:	4c0d      	ldr	r4, [pc, #52]	@ (800424c <CreateMessage+0x4b4>)
 8004216:	4926      	ldr	r1, [pc, #152]	@ (80042b0 <CreateMessage+0x518>)
 8004218:	480e      	ldr	r0, [pc, #56]	@ (8004254 <CreateMessage+0x4bc>)
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <CreateMessage+0x4c8>)
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	0023      	movs	r3, r4
 8004222:	f01e fa83 	bl	802272c <siprintf>
#endif
      index += strlen(message);
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <CreateMessage+0x4bc>)
 8004228:	0018      	movs	r0, r3
 800422a:	f7fb ff9f 	bl	800016c <strlen>
 800422e:	0003      	movs	r3, r0
 8004230:	b299      	uxth	r1, r3
 8004232:	220e      	movs	r2, #14
 8004234:	18bb      	adds	r3, r7, r2
 8004236:	18ba      	adds	r2, r7, r2
 8004238:	8812      	ldrh	r2, [r2, #0]
 800423a:	188a      	adds	r2, r1, r2
 800423c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800423e:	1dbb      	adds	r3, r7, #6
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04e      	beq.n	80042e4 <CreateMessage+0x54c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8004246:	4b03      	ldr	r3, [pc, #12]	@ (8004254 <CreateMessage+0x4bc>)
 8004248:	0018      	movs	r0, r3
 800424a:	e033      	b.n	80042b4 <CreateMessage+0x51c>
 800424c:	20000724 	.word	0x20000724
 8004250:	080289bc 	.word	0x080289bc
 8004254:	20000584 	.word	0x20000584
 8004258:	08025d54 	.word	0x08025d54
 800425c:	200006ac 	.word	0x200006ac
 8004260:	20000744 	.word	0x20000744
 8004264:	20000564 	.word	0x20000564
 8004268:	20000634 	.word	0x20000634
 800426c:	08025d58 	.word	0x08025d58
 8004270:	20000585 	.word	0x20000585
 8004274:	2000075d 	.word	0x2000075d
 8004278:	2000002d 	.word	0x2000002d
 800427c:	200006b8 	.word	0x200006b8
 8004280:	08025dac 	.word	0x08025dac
 8004284:	200006d0 	.word	0x200006d0
 8004288:	08025e04 	.word	0x08025e04
 800428c:	200006dc 	.word	0x200006dc
 8004290:	08025e58 	.word	0x08025e58
 8004294:	200006c4 	.word	0x200006c4
 8004298:	08025eb0 	.word	0x08025eb0
 800429c:	200006f4 	.word	0x200006f4
 80042a0:	20000580 	.word	0x20000580
 80042a4:	08025f0c 	.word	0x08025f0c
 80042a8:	20000e4c 	.word	0x20000e4c
 80042ac:	20000700 	.word	0x20000700
 80042b0:	08025f6c 	.word	0x08025f6c
 80042b4:	f7fb ff5a 	bl	800016c <strlen>
 80042b8:	0003      	movs	r3, r0
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	4b7d      	ldr	r3, [pc, #500]	@ (80044b4 <CreateMessage+0x71c>)
 80042be:	0011      	movs	r1, r2
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fbb3 	bl	8003a2c <ESP_Send>
 80042c6:	0003      	movs	r3, r0
 80042c8:	001a      	movs	r2, r3
 80042ca:	4b7b      	ldr	r3, [pc, #492]	@ (80044b8 <CreateMessage+0x720>)
 80042cc:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80042ce:	4b7b      	ldr	r3, [pc, #492]	@ (80044bc <CreateMessage+0x724>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	001a      	movs	r2, r3
 80042d4:	4b78      	ldr	r3, [pc, #480]	@ (80044b8 <CreateMessage+0x720>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	4013      	ands	r3, r2
 80042da:	1e5a      	subs	r2, r3, #1
 80042dc:	4193      	sbcs	r3, r2
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <CreateMessage+0x724>)
 80042e2:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 80042e4:	f006 ff4c 	bl	800b180 <sen5x_Get_sen5x_enable_state>
 80042e8:	1e03      	subs	r3, r0, #0
 80042ea:	d100      	bne.n	80042ee <CreateMessage+0x556>
 80042ec:	e087      	b.n	80043fe <CreateMessage+0x666>
      uint8ArrayToString(Buffer, PM2Config);
 80042ee:	4a74      	ldr	r2, [pc, #464]	@ (80044c0 <CreateMessage+0x728>)
 80042f0:	4b74      	ldr	r3, [pc, #464]	@ (80044c4 <CreateMessage+0x72c>)
 80042f2:	0011      	movs	r1, r2
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7ff fd2b 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 80042fa:	4b73      	ldr	r3, [pc, #460]	@ (80044c8 <CreateMessage+0x730>)
 80042fc:	689c      	ldr	r4, [r3, #8]
 80042fe:	4b73      	ldr	r3, [pc, #460]	@ (80044cc <CreateMessage+0x734>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	1c18      	adds	r0, r3, #0
 8004304:	f7ff f8ae 	bl	8003464 <__aeabi_f2d>
 8004308:	0002      	movs	r2, r0
 800430a:	000b      	movs	r3, r1
 800430c:	4d70      	ldr	r5, [pc, #448]	@ (80044d0 <CreateMessage+0x738>)
 800430e:	4971      	ldr	r1, [pc, #452]	@ (80044d4 <CreateMessage+0x73c>)
 8004310:	4868      	ldr	r0, [pc, #416]	@ (80044b4 <CreateMessage+0x71c>)
 8004312:	9202      	str	r2, [sp, #8]
 8004314:	9303      	str	r3, [sp, #12]
 8004316:	4b6b      	ldr	r3, [pc, #428]	@ (80044c4 <CreateMessage+0x72c>)
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	002b      	movs	r3, r5
 800431c:	0022      	movs	r2, r4
 800431e:	f01e fa05 	bl	802272c <siprintf>
#endif
      index += strlen(message);
 8004322:	4b64      	ldr	r3, [pc, #400]	@ (80044b4 <CreateMessage+0x71c>)
 8004324:	0018      	movs	r0, r3
 8004326:	f7fb ff21 	bl	800016c <strlen>
 800432a:	0003      	movs	r3, r0
 800432c:	b299      	uxth	r1, r3
 800432e:	220e      	movs	r2, #14
 8004330:	18bb      	adds	r3, r7, r2
 8004332:	18ba      	adds	r2, r7, r2
 8004334:	8812      	ldrh	r2, [r2, #0]
 8004336:	188a      	adds	r2, r1, r2
 8004338:	801a      	strh	r2, [r3, #0]
      if (send) {
 800433a:	1dbb      	adds	r3, r7, #6
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d019      	beq.n	8004376 <CreateMessage+0x5de>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8004342:	4b5c      	ldr	r3, [pc, #368]	@ (80044b4 <CreateMessage+0x71c>)
 8004344:	0018      	movs	r0, r3
 8004346:	f7fb ff11 	bl	800016c <strlen>
 800434a:	0003      	movs	r3, r0
 800434c:	b29a      	uxth	r2, r3
 800434e:	4b59      	ldr	r3, [pc, #356]	@ (80044b4 <CreateMessage+0x71c>)
 8004350:	0011      	movs	r1, r2
 8004352:	0018      	movs	r0, r3
 8004354:	f7ff fb6a 	bl	8003a2c <ESP_Send>
 8004358:	0003      	movs	r3, r0
 800435a:	001a      	movs	r2, r3
 800435c:	4b56      	ldr	r3, [pc, #344]	@ (80044b8 <CreateMessage+0x720>)
 800435e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8004360:	4b56      	ldr	r3, [pc, #344]	@ (80044bc <CreateMessage+0x724>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	001a      	movs	r2, r3
 8004366:	4b54      	ldr	r3, [pc, #336]	@ (80044b8 <CreateMessage+0x720>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	4013      	ands	r3, r2
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	4193      	sbcs	r3, r2
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b52      	ldr	r3, [pc, #328]	@ (80044bc <CreateMessage+0x724>)
 8004374:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 8004376:	4a58      	ldr	r2, [pc, #352]	@ (80044d8 <CreateMessage+0x740>)
 8004378:	4b52      	ldr	r3, [pc, #328]	@ (80044c4 <CreateMessage+0x72c>)
 800437a:	0011      	movs	r1, r2
 800437c:	0018      	movs	r0, r3
 800437e:	f7ff fce7 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8004382:	4b51      	ldr	r3, [pc, #324]	@ (80044c8 <CreateMessage+0x730>)
 8004384:	689c      	ldr	r4, [r3, #8]
 8004386:	4b51      	ldr	r3, [pc, #324]	@ (80044cc <CreateMessage+0x734>)
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	1c18      	adds	r0, r3, #0
 800438c:	f7ff f86a 	bl	8003464 <__aeabi_f2d>
 8004390:	0002      	movs	r2, r0
 8004392:	000b      	movs	r3, r1
 8004394:	4d4e      	ldr	r5, [pc, #312]	@ (80044d0 <CreateMessage+0x738>)
 8004396:	4951      	ldr	r1, [pc, #324]	@ (80044dc <CreateMessage+0x744>)
 8004398:	4846      	ldr	r0, [pc, #280]	@ (80044b4 <CreateMessage+0x71c>)
 800439a:	9202      	str	r2, [sp, #8]
 800439c:	9303      	str	r3, [sp, #12]
 800439e:	4b49      	ldr	r3, [pc, #292]	@ (80044c4 <CreateMessage+0x72c>)
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	002b      	movs	r3, r5
 80043a4:	0022      	movs	r2, r4
 80043a6:	f01e f9c1 	bl	802272c <siprintf>
#endif
      index += strlen(message);
 80043aa:	4b42      	ldr	r3, [pc, #264]	@ (80044b4 <CreateMessage+0x71c>)
 80043ac:	0018      	movs	r0, r3
 80043ae:	f7fb fedd 	bl	800016c <strlen>
 80043b2:	0003      	movs	r3, r0
 80043b4:	b299      	uxth	r1, r3
 80043b6:	220e      	movs	r2, #14
 80043b8:	18bb      	adds	r3, r7, r2
 80043ba:	18ba      	adds	r2, r7, r2
 80043bc:	8812      	ldrh	r2, [r2, #0]
 80043be:	188a      	adds	r2, r1, r2
 80043c0:	801a      	strh	r2, [r3, #0]
      if (send) {
 80043c2:	1dbb      	adds	r3, r7, #6
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d019      	beq.n	80043fe <CreateMessage+0x666>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80043ca:	4b3a      	ldr	r3, [pc, #232]	@ (80044b4 <CreateMessage+0x71c>)
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fb fecd 	bl	800016c <strlen>
 80043d2:	0003      	movs	r3, r0
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <CreateMessage+0x71c>)
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f7ff fb26 	bl	8003a2c <ESP_Send>
 80043e0:	0003      	movs	r3, r0
 80043e2:	001a      	movs	r2, r3
 80043e4:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <CreateMessage+0x720>)
 80043e6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80043e8:	4b34      	ldr	r3, [pc, #208]	@ (80044bc <CreateMessage+0x724>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	001a      	movs	r2, r3
 80043ee:	4b32      	ldr	r3, [pc, #200]	@ (80044b8 <CreateMessage+0x720>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	4013      	ands	r3, r2
 80043f4:	1e5a      	subs	r2, r3, #1
 80043f6:	4193      	sbcs	r3, r2
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b30      	ldr	r3, [pc, #192]	@ (80044bc <CreateMessage+0x724>)
 80043fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 80043fe:	4a38      	ldr	r2, [pc, #224]	@ (80044e0 <CreateMessage+0x748>)
 8004400:	4b30      	ldr	r3, [pc, #192]	@ (80044c4 <CreateMessage+0x72c>)
 8004402:	0011      	movs	r1, r2
 8004404:	0018      	movs	r0, r3
 8004406:	f7ff fca3 	bl	8003d50 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800440a:	4b2f      	ldr	r3, [pc, #188]	@ (80044c8 <CreateMessage+0x730>)
 800440c:	689c      	ldr	r4, [r3, #8]
 800440e:	4b35      	ldr	r3, [pc, #212]	@ (80044e4 <CreateMessage+0x74c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	1c18      	adds	r0, r3, #0
 8004414:	f7ff f826 	bl	8003464 <__aeabi_f2d>
 8004418:	0002      	movs	r2, r0
 800441a:	000b      	movs	r3, r1
 800441c:	4d2c      	ldr	r5, [pc, #176]	@ (80044d0 <CreateMessage+0x738>)
 800441e:	4932      	ldr	r1, [pc, #200]	@ (80044e8 <CreateMessage+0x750>)
 8004420:	4824      	ldr	r0, [pc, #144]	@ (80044b4 <CreateMessage+0x71c>)
 8004422:	9202      	str	r2, [sp, #8]
 8004424:	9303      	str	r3, [sp, #12]
 8004426:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <CreateMessage+0x72c>)
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	002b      	movs	r3, r5
 800442c:	0022      	movs	r2, r4
 800442e:	f01e f97d 	bl	802272c <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8004432:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <CreateMessage+0x71c>)
 8004434:	0018      	movs	r0, r3
 8004436:	f7fb fe99 	bl	800016c <strlen>
 800443a:	0002      	movs	r2, r0
 800443c:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <CreateMessage+0x71c>)
 800443e:	18d3      	adds	r3, r2, r3
 8004440:	4a2a      	ldr	r2, [pc, #168]	@ (80044ec <CreateMessage+0x754>)
 8004442:	0011      	movs	r1, r2
 8004444:	0018      	movs	r0, r3
 8004446:	f01e f971 	bl	802272c <siprintf>
  index += strlen(message);
 800444a:	4b1a      	ldr	r3, [pc, #104]	@ (80044b4 <CreateMessage+0x71c>)
 800444c:	0018      	movs	r0, r3
 800444e:	f7fb fe8d 	bl	800016c <strlen>
 8004452:	0003      	movs	r3, r0
 8004454:	b299      	uxth	r1, r3
 8004456:	220e      	movs	r2, #14
 8004458:	18bb      	adds	r3, r7, r2
 800445a:	18ba      	adds	r2, r7, r2
 800445c:	8812      	ldrh	r2, [r2, #0]
 800445e:	188a      	adds	r2, r1, r2
 8004460:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d019      	beq.n	800449e <CreateMessage+0x706>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800446a:	4b12      	ldr	r3, [pc, #72]	@ (80044b4 <CreateMessage+0x71c>)
 800446c:	0018      	movs	r0, r3
 800446e:	f7fb fe7d 	bl	800016c <strlen>
 8004472:	0003      	movs	r3, r0
 8004474:	b29a      	uxth	r2, r3
 8004476:	4b0f      	ldr	r3, [pc, #60]	@ (80044b4 <CreateMessage+0x71c>)
 8004478:	0011      	movs	r1, r2
 800447a:	0018      	movs	r0, r3
 800447c:	f7ff fad6 	bl	8003a2c <ESP_Send>
 8004480:	0003      	movs	r3, r0
 8004482:	001a      	movs	r2, r3
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <CreateMessage+0x720>)
 8004486:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <CreateMessage+0x724>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	001a      	movs	r2, r3
 800448e:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <CreateMessage+0x720>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	4013      	ands	r3, r2
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	4193      	sbcs	r3, r2
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <CreateMessage+0x724>)
 800449c:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800449e:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <CreateMessage+0x724>)
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
  return index;
 80044a6:	230e      	movs	r3, #14
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	881b      	ldrh	r3, [r3, #0]
}
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b005      	add	sp, #20
 80044b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b4:	20000584 	.word	0x20000584
 80044b8:	2000075d 	.word	0x2000075d
 80044bc:	2000002d 	.word	0x2000002d
 80044c0:	2000070c 	.word	0x2000070c
 80044c4:	20000744 	.word	0x20000744
 80044c8:	20000564 	.word	0x20000564
 80044cc:	20000634 	.word	0x20000634
 80044d0:	20000724 	.word	0x20000724
 80044d4:	08025fc0 	.word	0x08025fc0
 80044d8:	20000718 	.word	0x20000718
 80044dc:	0802601c 	.word	0x0802601c
 80044e0:	200006e8 	.word	0x200006e8
 80044e4:	2000057c 	.word	0x2000057c
 80044e8:	08026078 	.word	0x08026078
 80044ec:	080260d0 	.word	0x080260d0

080044f0 <StartProg>:

void StartProg(){
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80044f4:	2064      	movs	r0, #100	@ 0x64
 80044f6:	f00c fd77 	bl	8010fe8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80044fa:	4b15      	ldr	r3, [pc, #84]	@ (8004550 <StartProg+0x60>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	2101      	movs	r1, #1
 8004500:	0018      	movs	r0, r3
 8004502:	f00d fff8 	bl	80124f6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004506:	2064      	movs	r0, #100	@ 0x64
 8004508:	f00c fd6e 	bl	8010fe8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800450c:	4b10      	ldr	r3, [pc, #64]	@ (8004550 <StartProg+0x60>)
 800450e:	2200      	movs	r2, #0
 8004510:	2102      	movs	r1, #2
 8004512:	0018      	movs	r0, r3
 8004514:	f00d ffef 	bl	80124f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004518:	23fa      	movs	r3, #250	@ 0xfa
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	0018      	movs	r0, r3
 800451e:	f00c fd63 	bl	8010fe8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004522:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <StartProg+0x60>)
 8004524:	2201      	movs	r2, #1
 8004526:	2101      	movs	r1, #1
 8004528:	0018      	movs	r0, r3
 800452a:	f00d ffe4 	bl	80124f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800452e:	23fa      	movs	r3, #250	@ 0xfa
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	0018      	movs	r0, r3
 8004534:	f00c fd58 	bl	8010fe8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <StartProg+0x60>)
 800453a:	2201      	movs	r2, #1
 800453c:	2102      	movs	r1, #2
 800453e:	0018      	movs	r0, r3
 8004540:	f00d ffd9 	bl	80124f6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004544:	2028      	movs	r0, #40	@ 0x28
 8004546:	f00c fd4f 	bl	8010fe8 <HAL_Delay>
}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	50001c00 	.word	0x50001c00

08004554 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	b0d9      	sub	sp, #356	@ 0x164
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	0008      	movs	r0, r1
 800455e:	0011      	movs	r1, r2
 8004560:	4ba4      	ldr	r3, [pc, #656]	@ (80047f4 <ParseBuffer+0x2a0>)
 8004562:	24b0      	movs	r4, #176	@ 0xb0
 8004564:	0064      	lsls	r4, r4, #1
 8004566:	191b      	adds	r3, r3, r4
 8004568:	19db      	adds	r3, r3, r7
 800456a:	1c02      	adds	r2, r0, #0
 800456c:	801a      	strh	r2, [r3, #0]
 800456e:	4ba2      	ldr	r3, [pc, #648]	@ (80047f8 <ParseBuffer+0x2a4>)
 8004570:	191b      	adds	r3, r3, r4
 8004572:	19db      	adds	r3, r3, r7
 8004574:	1c0a      	adds	r2, r1, #0
 8004576:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	005a      	lsls	r2, r3, #1
 800457c:	2348      	movs	r3, #72	@ 0x48
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2100      	movs	r1, #0
 8004582:	0018      	movs	r0, r3
 8004584:	f01e fa38 	bl	80229f8 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004588:	2360      	movs	r3, #96	@ 0x60
 800458a:	33ff      	adds	r3, #255	@ 0xff
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	2203      	movs	r2, #3
 8004590:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004592:	23ae      	movs	r3, #174	@ 0xae
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	18fb      	adds	r3, r7, r3
 8004598:	2200      	movs	r2, #0
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	e013      	b.n	80045c6 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800459e:	20ae      	movs	r0, #174	@ 0xae
 80045a0:	0040      	lsls	r0, r0, #1
 80045a2:	183b      	adds	r3, r7, r0
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	18d2      	adds	r2, r2, r3
 80045aa:	183b      	adds	r3, r7, r0
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	7811      	ldrb	r1, [r2, #0]
 80045b0:	4a92      	ldr	r2, [pc, #584]	@ (80047fc <ParseBuffer+0x2a8>)
 80045b2:	24b0      	movs	r4, #176	@ 0xb0
 80045b4:	0064      	lsls	r4, r4, #1
 80045b6:	1912      	adds	r2, r2, r4
 80045b8:	19d2      	adds	r2, r2, r7
 80045ba:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80045bc:	183b      	adds	r3, r7, r0
 80045be:	881a      	ldrh	r2, [r3, #0]
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	3201      	adds	r2, #1
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	23ae      	movs	r3, #174	@ 0xae
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	18fa      	adds	r2, r7, r3
 80045cc:	4b89      	ldr	r3, [pc, #548]	@ (80047f4 <ParseBuffer+0x2a0>)
 80045ce:	21b0      	movs	r1, #176	@ 0xb0
 80045d0:	0049      	lsls	r1, r1, #1
 80045d2:	185b      	adds	r3, r3, r1
 80045d4:	19db      	adds	r3, r3, r7
 80045d6:	8812      	ldrh	r2, [r2, #0]
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3df      	bcc.n	800459e <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80045de:	4b85      	ldr	r3, [pc, #532]	@ (80047f4 <ParseBuffer+0x2a0>)
 80045e0:	185b      	adds	r3, r3, r1
 80045e2:	19db      	adds	r3, r3, r7
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	4a85      	ldr	r2, [pc, #532]	@ (80047fc <ParseBuffer+0x2a8>)
 80045e8:	1852      	adds	r2, r2, r1
 80045ea:	19d2      	adds	r2, r2, r7
 80045ec:	2100      	movs	r1, #0
 80045ee:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80045f0:	f00c f91e 	bl	8010830 <GetVerboseLevel>
 80045f4:	0003      	movs	r3, r0
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d106      	bne.n	8004608 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80045fa:	2348      	movs	r3, #72	@ 0x48
 80045fc:	18fa      	adds	r2, r7, r3
 80045fe:	4b80      	ldr	r3, [pc, #512]	@ (8004800 <ParseBuffer+0x2ac>)
 8004600:	0011      	movs	r1, r2
 8004602:	0018      	movs	r0, r3
 8004604:	f01e f822 	bl	802264c <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	26ac      	movs	r6, #172	@ 0xac
 800460c:	0076      	lsls	r6, r6, #1
 800460e:	19ba      	adds	r2, r7, r6
 8004610:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004612:	4b7c      	ldr	r3, [pc, #496]	@ (8004804 <ParseBuffer+0x2b0>)
 8004614:	25b0      	movs	r5, #176	@ 0xb0
 8004616:	006d      	lsls	r5, r5, #1
 8004618:	195b      	adds	r3, r3, r5
 800461a:	19db      	adds	r3, r3, r7
 800461c:	4a7a      	ldr	r2, [pc, #488]	@ (8004808 <ParseBuffer+0x2b4>)
 800461e:	8811      	ldrh	r1, [r2, #0]
 8004620:	8019      	strh	r1, [r3, #0]
 8004622:	7892      	ldrb	r2, [r2, #2]
 8004624:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004626:	4b79      	ldr	r3, [pc, #484]	@ (800480c <ParseBuffer+0x2b8>)
 8004628:	195b      	adds	r3, r3, r5
 800462a:	19db      	adds	r3, r3, r7
 800462c:	4a78      	ldr	r2, [pc, #480]	@ (8004810 <ParseBuffer+0x2bc>)
 800462e:	6811      	ldr	r1, [r2, #0]
 8004630:	6019      	str	r1, [r3, #0]
 8004632:	8892      	ldrh	r2, [r2, #4]
 8004634:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8004636:	4b77      	ldr	r3, [pc, #476]	@ (8004814 <ParseBuffer+0x2c0>)
 8004638:	195b      	adds	r3, r3, r5
 800463a:	19db      	adds	r3, r3, r7
 800463c:	4a76      	ldr	r2, [pc, #472]	@ (8004818 <ParseBuffer+0x2c4>)
 800463e:	6811      	ldr	r1, [r2, #0]
 8004640:	6019      	str	r1, [r3, #0]
 8004642:	7912      	ldrb	r2, [r2, #4]
 8004644:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8004646:	4b75      	ldr	r3, [pc, #468]	@ (800481c <ParseBuffer+0x2c8>)
 8004648:	195b      	adds	r3, r3, r5
 800464a:	19db      	adds	r3, r3, r7
 800464c:	4a74      	ldr	r2, [pc, #464]	@ (8004820 <ParseBuffer+0x2cc>)
 800464e:	6811      	ldr	r1, [r2, #0]
 8004650:	6019      	str	r1, [r3, #0]
 8004652:	8892      	ldrh	r2, [r2, #4]
 8004654:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004656:	4b73      	ldr	r3, [pc, #460]	@ (8004824 <ParseBuffer+0x2d0>)
 8004658:	195b      	adds	r3, r3, r5
 800465a:	19db      	adds	r3, r3, r7
 800465c:	223e      	movs	r2, #62	@ 0x3e
 800465e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004660:	4b71      	ldr	r3, [pc, #452]	@ (8004828 <ParseBuffer+0x2d4>)
 8004662:	195b      	adds	r3, r3, r5
 8004664:	19db      	adds	r3, r3, r7
 8004666:	4a71      	ldr	r2, [pc, #452]	@ (800482c <ParseBuffer+0x2d8>)
 8004668:	ca13      	ldmia	r2!, {r0, r1, r4}
 800466a:	c313      	stmia	r3!, {r0, r1, r4}
 800466c:	8811      	ldrh	r1, [r2, #0]
 800466e:	8019      	strh	r1, [r3, #0]
 8004670:	7892      	ldrb	r2, [r2, #2]
 8004672:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004674:	4b6e      	ldr	r3, [pc, #440]	@ (8004830 <ParseBuffer+0x2dc>)
 8004676:	195b      	adds	r3, r3, r5
 8004678:	19db      	adds	r3, r3, r7
 800467a:	4a6e      	ldr	r2, [pc, #440]	@ (8004834 <ParseBuffer+0x2e0>)
 800467c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800467e:	c313      	stmia	r3!, {r0, r1, r4}
 8004680:	8812      	ldrh	r2, [r2, #0]
 8004682:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004684:	4b5c      	ldr	r3, [pc, #368]	@ (80047f8 <ParseBuffer+0x2a4>)
 8004686:	195b      	adds	r3, r3, r5
 8004688:	19db      	adds	r3, r3, r7
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004690:	2344      	movs	r3, #68	@ 0x44
 8004692:	18fa      	adds	r2, r7, r3
 8004694:	2348      	movs	r3, #72	@ 0x48
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	0011      	movs	r1, r2
 800469a:	0018      	movs	r0, r3
 800469c:	f01e f9e7 	bl	8022a6e <strstr>
 80046a0:	0003      	movs	r3, r0
 80046a2:	19ba      	adds	r2, r7, r6
 80046a4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80046a6:	4b54      	ldr	r3, [pc, #336]	@ (80047f8 <ParseBuffer+0x2a4>)
 80046a8:	22b0      	movs	r2, #176	@ 0xb0
 80046aa:	0052      	lsls	r2, r2, #1
 80046ac:	189b      	adds	r3, r3, r2
 80046ae:	19db      	adds	r3, r3, r7
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d10c      	bne.n	80046d0 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80046b6:	232c      	movs	r3, #44	@ 0x2c
 80046b8:	18fa      	adds	r2, r7, r3
 80046ba:	2348      	movs	r3, #72	@ 0x48
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	0011      	movs	r1, r2
 80046c0:	0018      	movs	r0, r3
 80046c2:	f01e f9d4 	bl	8022a6e <strstr>
 80046c6:	0003      	movs	r3, r0
 80046c8:	22ac      	movs	r2, #172	@ 0xac
 80046ca:	0052      	lsls	r2, r2, #1
 80046cc:	18ba      	adds	r2, r7, r2
 80046ce:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80046d0:	4b49      	ldr	r3, [pc, #292]	@ (80047f8 <ParseBuffer+0x2a4>)
 80046d2:	22b0      	movs	r2, #176	@ 0xb0
 80046d4:	0052      	lsls	r2, r2, #1
 80046d6:	189b      	adds	r3, r3, r2
 80046d8:	19db      	adds	r3, r3, r7
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d10c      	bne.n	80046fa <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80046e0:	2328      	movs	r3, #40	@ 0x28
 80046e2:	18fa      	adds	r2, r7, r3
 80046e4:	2348      	movs	r3, #72	@ 0x48
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f01e f9bf 	bl	8022a6e <strstr>
 80046f0:	0003      	movs	r3, r0
 80046f2:	22ac      	movs	r2, #172	@ 0xac
 80046f4:	0052      	lsls	r2, r2, #1
 80046f6:	18ba      	adds	r2, r7, r2
 80046f8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80046fa:	4b3f      	ldr	r3, [pc, #252]	@ (80047f8 <ParseBuffer+0x2a4>)
 80046fc:	22b0      	movs	r2, #176	@ 0xb0
 80046fe:	0052      	lsls	r2, r2, #1
 8004700:	189b      	adds	r3, r3, r2
 8004702:	19db      	adds	r3, r3, r7
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d10c      	bne.n	8004724 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800470a:	2308      	movs	r3, #8
 800470c:	18fa      	adds	r2, r7, r3
 800470e:	2348      	movs	r3, #72	@ 0x48
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	0011      	movs	r1, r2
 8004714:	0018      	movs	r0, r3
 8004716:	f01e f9aa 	bl	8022a6e <strstr>
 800471a:	0003      	movs	r3, r0
 800471c:	22ac      	movs	r2, #172	@ 0xac
 800471e:	0052      	lsls	r2, r2, #1
 8004720:	18ba      	adds	r2, r7, r2
 8004722:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004724:	233c      	movs	r3, #60	@ 0x3c
 8004726:	18fa      	adds	r2, r7, r3
 8004728:	2448      	movs	r4, #72	@ 0x48
 800472a:	193b      	adds	r3, r7, r4
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f01e f99d 	bl	8022a6e <strstr>
 8004734:	0003      	movs	r3, r0
 8004736:	22aa      	movs	r2, #170	@ 0xaa
 8004738:	0052      	lsls	r2, r2, #1
 800473a:	18ba      	adds	r2, r7, r2
 800473c:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800473e:	2318      	movs	r3, #24
 8004740:	18fa      	adds	r2, r7, r3
 8004742:	193b      	adds	r3, r7, r4
 8004744:	0011      	movs	r1, r2
 8004746:	0018      	movs	r0, r3
 8004748:	f01e f991 	bl	8022a6e <strstr>
 800474c:	0003      	movs	r3, r0
 800474e:	22a8      	movs	r2, #168	@ 0xa8
 8004750:	0052      	lsls	r2, r2, #1
 8004752:	18ba      	adds	r2, r7, r2
 8004754:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004756:	4a38      	ldr	r2, [pc, #224]	@ (8004838 <ParseBuffer+0x2e4>)
 8004758:	193b      	adds	r3, r7, r4
 800475a:	0011      	movs	r1, r2
 800475c:	0018      	movs	r0, r3
 800475e:	f01e f986 	bl	8022a6e <strstr>
 8004762:	0003      	movs	r3, r0
 8004764:	22a6      	movs	r2, #166	@ 0xa6
 8004766:	0052      	lsls	r2, r2, #1
 8004768:	18ba      	adds	r2, r7, r2
 800476a:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800476c:	2334      	movs	r3, #52	@ 0x34
 800476e:	18fa      	adds	r2, r7, r3
 8004770:	193b      	adds	r3, r7, r4
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f01e f97a 	bl	8022a6e <strstr>
 800477a:	0003      	movs	r3, r0
 800477c:	22a4      	movs	r2, #164	@ 0xa4
 800477e:	0052      	lsls	r2, r2, #1
 8004780:	18ba      	adds	r2, r7, r2
 8004782:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004784:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <ParseBuffer+0x2a0>)
 8004786:	21b0      	movs	r1, #176	@ 0xb0
 8004788:	0049      	lsls	r1, r1, #1
 800478a:	185b      	adds	r3, r3, r1
 800478c:	19db      	adds	r3, r3, r7
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d800      	bhi.n	8004796 <ParseBuffer+0x242>
 8004794:	e0bf      	b.n	8004916 <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004796:	22ac      	movs	r2, #172	@ 0xac
 8004798:	0052      	lsls	r2, r2, #1
 800479a:	18bb      	adds	r3, r7, r2
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d052      	beq.n	8004848 <ParseBuffer+0x2f4>
 80047a2:	18bb      	adds	r3, r7, r2
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b4f      	cmp	r3, #79	@ 0x4f
 80047aa:	d14d      	bne.n	8004848 <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80047ac:	2360      	movs	r3, #96	@ 0x60
 80047ae:	33ff      	adds	r3, #255	@ 0xff
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80047b6:	4b21      	ldr	r3, [pc, #132]	@ (800483c <ParseBuffer+0x2e8>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b12      	cmp	r3, #18
 80047bc:	d144      	bne.n	8004848 <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <ParseBuffer+0x2a0>)
 80047c0:	185b      	adds	r3, r3, r1
 80047c2:	19db      	adds	r3, r3, r7
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80047c8:	d10b      	bne.n	80047e2 <ParseBuffer+0x28e>
 80047ca:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <ParseBuffer+0x2a8>)
 80047cc:	185b      	adds	r3, r3, r1
 80047ce:	19db      	adds	r3, r3, r7
 80047d0:	2221      	movs	r2, #33	@ 0x21
 80047d2:	5c9b      	ldrb	r3, [r3, r2]
 80047d4:	2b32      	cmp	r3, #50	@ 0x32
 80047d6:	d104      	bne.n	80047e2 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80047d8:	193b      	adds	r3, r7, r4
 80047da:	0018      	movs	r0, r3
 80047dc:	f002 fd56 	bl	800728c <ParseTime>
 80047e0:	e032      	b.n	8004848 <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 80047e2:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <ParseBuffer+0x2ec>)
 80047e4:	4b17      	ldr	r3, [pc, #92]	@ (8004844 <ParseBuffer+0x2f0>)
 80047e6:	0019      	movs	r1, r3
 80047e8:	2001      	movs	r0, #1
 80047ea:	f00b ffa7 	bl	801073c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80047ee:	2306      	movs	r3, #6
 80047f0:	e095      	b.n	800491e <ParseBuffer+0x3ca>
 80047f2:	46c0      	nop			@ (mov r8, r8)
 80047f4:	fffffea2 	.word	0xfffffea2
 80047f8:	fffffea1 	.word	0xfffffea1
 80047fc:	fffffee8 	.word	0xfffffee8
 8004800:	080260d4 	.word	0x080260d4
 8004804:	fffffee4 	.word	0xfffffee4
 8004808:	08026100 	.word	0x08026100
 800480c:	fffffedc 	.word	0xfffffedc
 8004810:	08026104 	.word	0x08026104
 8004814:	fffffed4 	.word	0xfffffed4
 8004818:	0802610c 	.word	0x0802610c
 800481c:	fffffecc 	.word	0xfffffecc
 8004820:	08026114 	.word	0x08026114
 8004824:	fffffec8 	.word	0xfffffec8
 8004828:	fffffeb8 	.word	0xfffffeb8
 800482c:	0802611c 	.word	0x0802611c
 8004830:	fffffea8 	.word	0xfffffea8
 8004834:	0802612c 	.word	0x0802612c
 8004838:	0802899c 	.word	0x0802899c
 800483c:	2000062e 	.word	0x2000062e
 8004840:	080260ec 	.word	0x080260ec
 8004844:	08025994 	.word	0x08025994
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004848:	22ac      	movs	r2, #172	@ 0xac
 800484a:	0052      	lsls	r2, r2, #1
 800484c:	18bb      	adds	r3, r7, r2
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d009      	beq.n	8004868 <ParseBuffer+0x314>
 8004854:	18bb      	adds	r3, r7, r2
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b72      	cmp	r3, #114	@ 0x72
 800485c:	d104      	bne.n	8004868 <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 800485e:	2360      	movs	r3, #96	@ 0x60
 8004860:	33ff      	adds	r3, #255	@ 0xff
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	2202      	movs	r2, #2
 8004866:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004868:	22ac      	movs	r2, #172	@ 0xac
 800486a:	0052      	lsls	r2, r2, #1
 800486c:	18bb      	adds	r3, r7, r2
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d009      	beq.n	8004888 <ParseBuffer+0x334>
 8004874:	18bb      	adds	r3, r7, r2
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b3e      	cmp	r3, #62	@ 0x3e
 800487c:	d104      	bne.n	8004888 <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 800487e:	2360      	movs	r3, #96	@ 0x60
 8004880:	33ff      	adds	r3, #255	@ 0xff
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2205      	movs	r2, #5
 8004886:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004888:	22ac      	movs	r2, #172	@ 0xac
 800488a:	0052      	lsls	r2, r2, #1
 800488c:	18bb      	adds	r3, r7, r2
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <ParseBuffer+0x354>
 8004894:	18bb      	adds	r3, r7, r2
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b2b      	cmp	r3, #43	@ 0x2b
 800489c:	d104      	bne.n	80048a8 <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 800489e:	2360      	movs	r3, #96	@ 0x60
 80048a0:	33ff      	adds	r3, #255	@ 0xff
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	220b      	movs	r2, #11
 80048a6:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80048a8:	22aa      	movs	r2, #170	@ 0xaa
 80048aa:	0052      	lsls	r2, r2, #1
 80048ac:	18bb      	adds	r3, r7, r2
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <ParseBuffer+0x36a>
 80048b4:	18bb      	adds	r3, r7, r2
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b45      	cmp	r3, #69	@ 0x45
 80048bc:	d00a      	beq.n	80048d4 <ParseBuffer+0x380>
 80048be:	22a4      	movs	r2, #164	@ 0xa4
 80048c0:	0052      	lsls	r2, r2, #1
 80048c2:	18bb      	adds	r3, r7, r2
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <ParseBuffer+0x38a>
 80048ca:	18bb      	adds	r3, r7, r2
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b46      	cmp	r3, #70	@ 0x46
 80048d2:	d104      	bne.n	80048de <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80048d4:	2360      	movs	r3, #96	@ 0x60
 80048d6:	33ff      	adds	r3, #255	@ 0xff
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80048de:	22a8      	movs	r2, #168	@ 0xa8
 80048e0:	0052      	lsls	r2, r2, #1
 80048e2:	18bb      	adds	r3, r7, r2
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <ParseBuffer+0x3a6>
 80048ea:	18bb      	adds	r3, r7, r2
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b57      	cmp	r3, #87	@ 0x57
 80048f2:	d102      	bne.n	80048fa <ParseBuffer+0x3a6>
      ConnectionMade = true;
 80048f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <ParseBuffer+0x3d4>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80048fa:	22a6      	movs	r2, #166	@ 0xa6
 80048fc:	0052      	lsls	r2, r2, #1
 80048fe:	18bb      	adds	r3, r7, r2
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <ParseBuffer+0x3c2>
 8004906:	18bb      	adds	r3, r7, r2
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b32      	cmp	r3, #50	@ 0x32
 800490e:	d102      	bne.n	8004916 <ParseBuffer+0x3c2>
      beurs = true;
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <ParseBuffer+0x3d8>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004916:	2360      	movs	r3, #96	@ 0x60
 8004918:	33ff      	adds	r3, #255	@ 0xff
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	781b      	ldrb	r3, [r3, #0]

}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b059      	add	sp, #356	@ 0x164
 8004924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	2000055c 	.word	0x2000055c
 800492c:	2000055e 	.word	0x2000055e

08004930 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004936:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <PollAwake+0x34>)
 8004938:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f7fb fc15 	bl	800016c <strlen>
 8004942:	0003      	movs	r3, r0
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0011      	movs	r1, r2
 800494a:	0018      	movs	r0, r3
 800494c:	f7ff f86e 	bl	8003a2c <ESP_Send>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d001      	beq.n	8004958 <PollAwake+0x28>
    return true;
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <PollAwake+0x2a>
  }
  else{
    return false;
 8004958:	2300      	movs	r3, #0
  }
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	0802613c 	.word	0x0802613c

08004968 <RFPower>:

bool RFPower(){
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800496e:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <RFPower+0x34>)
 8004970:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f7fb fbf9 	bl	800016c <strlen>
 800497a:	0003      	movs	r3, r0
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0011      	movs	r1, r2
 8004982:	0018      	movs	r0, r3
 8004984:	f7ff f852 	bl	8003a2c <ESP_Send>
 8004988:	1e03      	subs	r3, r0, #0
 800498a:	d001      	beq.n	8004990 <RFPower+0x28>
    return true;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <RFPower+0x2a>
  }
  else{
    return false;
 8004990:	2300      	movs	r3, #0
  }
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	08026144 	.word	0x08026144

080049a0 <CheckRFPower>:

bool CheckRFPower(){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80049a6:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <CheckRFPower+0x34>)
 80049a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fb fbdd 	bl	800016c <strlen>
 80049b2:	0003      	movs	r3, r0
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff f836 	bl	8003a2c <ESP_Send>
 80049c0:	1e03      	subs	r3, r0, #0
 80049c2:	d001      	beq.n	80049c8 <CheckRFPower+0x28>
    return true;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <CheckRFPower+0x2a>
  }
  else{
    return false;
 80049c8:	2300      	movs	r3, #0
  }
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b002      	add	sp, #8
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	08026154 	.word	0x08026154

080049d8 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80049de:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <ATRestore+0x34>)
 80049e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fb fbc1 	bl	800016c <strlen>
 80049ea:	0003      	movs	r3, r0
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7ff f81a 	bl	8003a2c <ESP_Send>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d001      	beq.n	8004a00 <ATRestore+0x28>
    return true;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <ATRestore+0x2a>
  }
  else{
    return false;
 8004a00:	2300      	movs	r3, #0
  }
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b002      	add	sp, #8
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	08026164 	.word	0x08026164

08004a10 <CWINIT>:

bool CWINIT(){
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004a16:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <CWINIT+0x34>)
 8004a18:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fb fba5 	bl	800016c <strlen>
 8004a22:	0003      	movs	r3, r0
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0011      	movs	r1, r2
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f7fe fffe 	bl	8003a2c <ESP_Send>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d001      	beq.n	8004a38 <CWINIT+0x28>
    return true;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <CWINIT+0x2a>
  }
  else{
    return false;
 8004a38:	2300      	movs	r3, #0
  }
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	08026174 	.word	0x08026174

08004a48 <CWMODE1>:

bool CWMODE1(){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <CWMODE1+0x34>)
 8004a50:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f7fb fb89 	bl	800016c <strlen>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0011      	movs	r1, r2
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fe ffe2 	bl	8003a2c <ESP_Send>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d001      	beq.n	8004a70 <CWMODE1+0x28>
    return true;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004a70:	2300      	movs	r3, #0
  }
}
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b002      	add	sp, #8
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	08026184 	.word	0x08026184

08004a80 <CWMODE2>:

bool CWMODE2(){
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004a86:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <CWMODE2+0x34>)
 8004a88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7fb fb6d 	bl	800016c <strlen>
 8004a92:	0003      	movs	r3, r0
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	0011      	movs	r1, r2
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fe ffc6 	bl	8003a2c <ESP_Send>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d001      	beq.n	8004aa8 <CWMODE2+0x28>
    return true;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <CWMODE2+0x2a>
  }
  else{
    return false;
 8004aa8:	2300      	movs	r3, #0
  }
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	08026194 	.word	0x08026194

08004ab8 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004abe:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <CWAUTOCONN+0x34>)
 8004ac0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f7fb fb51 	bl	800016c <strlen>
 8004aca:	0003      	movs	r3, r0
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f7fe ffaa 	bl	8003a2c <ESP_Send>
 8004ad8:	1e03      	subs	r3, r0, #0
 8004ada:	d001      	beq.n	8004ae0 <CWAUTOCONN+0x28>
    return true;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004ae0:	2300      	movs	r3, #0
  }
}
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b002      	add	sp, #8
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	080261a4 	.word	0x080261a4

08004af0 <CWJAP>:

bool CWJAP(){
 8004af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af2:	46c6      	mov	lr, r8
 8004af4:	b500      	push	{lr}
 8004af6:	b0a2      	sub	sp, #136	@ 0x88
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	466b      	mov	r3, sp
 8004afc:	4698      	mov	r8, r3
  beursTest = true;
 8004afe:	4b39      	ldr	r3, [pc, #228]	@ (8004be4 <CWJAP+0xf4>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004b04:	2618      	movs	r6, #24
 8004b06:	19bb      	adds	r3, r7, r6
 8004b08:	2264      	movs	r2, #100	@ 0x64
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f01d ff73 	bl	80229f8 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004b12:	4b35      	ldr	r3, [pc, #212]	@ (8004be8 <CWJAP+0xf8>)
 8004b14:	4a35      	ldr	r2, [pc, #212]	@ (8004bec <CWJAP+0xfc>)
 8004b16:	4936      	ldr	r1, [pc, #216]	@ (8004bf0 <CWJAP+0x100>)
 8004b18:	19b8      	adds	r0, r7, r6
 8004b1a:	f01d fe07 	bl	802272c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004b1e:	19bb      	adds	r3, r7, r6
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fb fb23 	bl	800016c <strlen>
 8004b26:	0002      	movs	r2, r0
 8004b28:	216f      	movs	r1, #111	@ 0x6f
 8004b2a:	0030      	movs	r0, r6
 8004b2c:	180b      	adds	r3, r1, r0
 8004b2e:	19db      	adds	r3, r3, r7
 8004b30:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004b32:	180b      	adds	r3, r1, r0
 8004b34:	19db      	adds	r3, r3, r7
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	1e5a      	subs	r2, r3, #1
 8004b3c:	2180      	movs	r1, #128	@ 0x80
 8004b3e:	1879      	adds	r1, r7, r1
 8004b40:	600a      	str	r2, [r1, #0]
 8004b42:	001a      	movs	r2, r3
 8004b44:	60ba      	str	r2, [r7, #8]
 8004b46:	2200      	movs	r2, #0
 8004b48:	60fa      	str	r2, [r7, #12]
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	0002      	movs	r2, r0
 8004b50:	0f52      	lsrs	r2, r2, #29
 8004b52:	000e      	movs	r6, r1
 8004b54:	00f6      	lsls	r6, r6, #3
 8004b56:	617e      	str	r6, [r7, #20]
 8004b58:	697e      	ldr	r6, [r7, #20]
 8004b5a:	4316      	orrs	r6, r2
 8004b5c:	617e      	str	r6, [r7, #20]
 8004b5e:	0002      	movs	r2, r0
 8004b60:	00d2      	lsls	r2, r2, #3
 8004b62:	613a      	str	r2, [r7, #16]
 8004b64:	001a      	movs	r2, r3
 8004b66:	603a      	str	r2, [r7, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	6838      	ldr	r0, [r7, #0]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	0002      	movs	r2, r0
 8004b72:	0f52      	lsrs	r2, r2, #29
 8004b74:	000e      	movs	r6, r1
 8004b76:	00f5      	lsls	r5, r6, #3
 8004b78:	4315      	orrs	r5, r2
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	00d4      	lsls	r4, r2, #3
 8004b7e:	3307      	adds	r3, #7
 8004b80:	08db      	lsrs	r3, r3, #3
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	466a      	mov	r2, sp
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	469d      	mov	sp, r3
 8004b8a:	466b      	mov	r3, sp
 8004b8c:	3300      	adds	r3, #0
 8004b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004b90:	246f      	movs	r4, #111	@ 0x6f
 8004b92:	2518      	movs	r5, #24
 8004b94:	1963      	adds	r3, r4, r5
 8004b96:	19db      	adds	r3, r3, r7
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f01d ff28 	bl	80229f8 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004ba8:	1963      	adds	r3, r4, r5
 8004baa:	19db      	adds	r3, r3, r7
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	1979      	adds	r1, r7, r5
 8004bb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f01d ff47 	bl	8022a46 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004bb8:	1963      	adds	r3, r4, r5
 8004bba:	19db      	adds	r3, r3, r7
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bc2:	0011      	movs	r1, r2
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7fe ff31 	bl	8003a2c <ESP_Send>
 8004bca:	1e03      	subs	r3, r0, #0
 8004bcc:	d001      	beq.n	8004bd2 <CWJAP+0xe2>
    return true;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <CWJAP+0xe4>
  }
  else{
    return false;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	46c5      	mov	sp, r8
  }
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b022      	add	sp, #136	@ 0x88
 8004bdc:	bc80      	pop	{r7}
 8004bde:	46b8      	mov	r8, r7
 8004be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	2000055d 	.word	0x2000055d
 8004be8:	080289a8 	.word	0x080289a8
 8004bec:	0802899c 	.word	0x0802899c
 8004bf0:	080261b8 	.word	0x080261b8

08004bf4 <CWMODE3>:

bool CWMODE3(){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <CWMODE3+0x34>)
 8004bfc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7fb fab3 	bl	800016c <strlen>
 8004c06:	0003      	movs	r3, r0
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0011      	movs	r1, r2
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fe ff0c 	bl	8003a2c <ESP_Send>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d001      	beq.n	8004c1c <CWMODE3+0x28>
    return true;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <CWMODE3+0x2a>
  }
  else{
    return false;
 8004c1c:	2300      	movs	r3, #0
  }
}
 8004c1e:	0018      	movs	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b002      	add	sp, #8
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	080261d0 	.word	0x080261d0

08004c2c <CWSTATE>:

bool CWSTATE(){
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <CWSTATE+0x34>)
 8004c34:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7fb fa97 	bl	800016c <strlen>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0011      	movs	r1, r2
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7fe fef0 	bl	8003a2c <ESP_Send>
 8004c4c:	1e03      	subs	r3, r0, #0
 8004c4e:	d001      	beq.n	8004c54 <CWSTATE+0x28>
    return true;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004c54:	2300      	movs	r3, #0
  }
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b002      	add	sp, #8
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	080261e0 	.word	0x080261e0

08004c64 <CWSAP>:

bool CWSAP(){
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <CWSAP+0x34>)
 8004c6c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fb fa7b 	bl	800016c <strlen>
 8004c76:	0003      	movs	r3, r0
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0011      	movs	r1, r2
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7fe fed4 	bl	8003a2c <ESP_Send>
 8004c84:	1e03      	subs	r3, r0, #0
 8004c86:	d001      	beq.n	8004c8c <CWSAP+0x28>
    return true;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <CWSAP+0x2a>
  }
  else{
    return false;
 8004c8c:	2300      	movs	r3, #0
  }
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b002      	add	sp, #8
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			@ (mov r8, r8)
 8004c98:	080261f0 	.word	0x080261f0

08004c9c <CIPMUX>:

bool CIPMUX(){
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <CIPMUX+0x34>)
 8004ca4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7fb fa5f 	bl	800016c <strlen>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0011      	movs	r1, r2
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7fe feb8 	bl	8003a2c <ESP_Send>
 8004cbc:	1e03      	subs	r3, r0, #0
 8004cbe:	d001      	beq.n	8004cc4 <CIPMUX+0x28>
    return true;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004cc4:	2300      	movs	r3, #0
  }
}
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b002      	add	sp, #8
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	46c0      	nop			@ (mov r8, r8)
 8004cd0:	08026214 	.word	0x08026214

08004cd4 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004cda:	4b0b      	ldr	r3, [pc, #44]	@ (8004d08 <WEBSERVER+0x34>)
 8004cdc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7fb fa43 	bl	800016c <strlen>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0011      	movs	r1, r2
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7fe fe9c 	bl	8003a2c <ESP_Send>
 8004cf4:	1e03      	subs	r3, r0, #0
 8004cf6:	d001      	beq.n	8004cfc <WEBSERVER+0x28>
    return true;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004cfc:	2300      	movs	r3, #0
  }
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b002      	add	sp, #8
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	08026224 	.word	0x08026224

08004d0c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004d12:	1cfb      	adds	r3, r7, #3
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004d18:	4b26      	ldr	r3, [pc, #152]	@ (8004db4 <HTTPCPOST+0xa8>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	1dbc      	adds	r4, r7, #6
 8004d1e:	1cf9      	adds	r1, r7, #3
 8004d20:	2200      	movs	r2, #0
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7ff f838 	bl	8003d98 <CreateMessage>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004d2c:	4b21      	ldr	r3, [pc, #132]	@ (8004db4 <HTTPCPOST+0xa8>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004d34:	1dbb      	adds	r3, r7, #6
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	4a1f      	ldr	r2, [pc, #124]	@ (8004db8 <HTTPCPOST+0xac>)
 8004d3a:	4920      	ldr	r1, [pc, #128]	@ (8004dbc <HTTPCPOST+0xb0>)
 8004d3c:	4820      	ldr	r0, [pc, #128]	@ (8004dc0 <HTTPCPOST+0xb4>)
 8004d3e:	f01d fcf5 	bl	802272c <siprintf>
 8004d42:	e015      	b.n	8004d70 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004d44:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <HTTPCPOST+0xb8>)
 8004d46:	4820      	ldr	r0, [pc, #128]	@ (8004dc8 <HTTPCPOST+0xbc>)
 8004d48:	220c      	movs	r2, #12
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	f004 f9f0 	bl	8009130 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004d50:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <HTTPCPOST+0xb8>)
 8004d52:	4b1e      	ldr	r3, [pc, #120]	@ (8004dcc <HTTPCPOST+0xc0>)
 8004d54:	0011      	movs	r1, r2
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7fe fffa 	bl	8003d50 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004d5c:	1dbb      	adds	r3, r7, #6
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	4c1a      	ldr	r4, [pc, #104]	@ (8004dcc <HTTPCPOST+0xc0>)
 8004d62:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd0 <HTTPCPOST+0xc4>)
 8004d64:	491b      	ldr	r1, [pc, #108]	@ (8004dd4 <HTTPCPOST+0xc8>)
 8004d66:	4816      	ldr	r0, [pc, #88]	@ (8004dc0 <HTTPCPOST+0xb4>)
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	0023      	movs	r3, r4
 8004d6c:	f01d fcde 	bl	802272c <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004d70:	4b13      	ldr	r3, [pc, #76]	@ (8004dc0 <HTTPCPOST+0xb4>)
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7fb f9fa 	bl	800016c <strlen>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	1d3b      	adds	r3, r7, #4
 8004d7c:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	8818      	ldrh	r0, [r3, #0]
 8004d82:	1cfb      	adds	r3, r7, #3
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	4a14      	ldr	r2, [pc, #80]	@ (8004dd8 <HTTPCPOST+0xcc>)
 8004d88:	4914      	ldr	r1, [pc, #80]	@ (8004ddc <HTTPCPOST+0xd0>)
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	2003      	movs	r0, #3
 8004d90:	f00b fcd4 	bl	801073c <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	881a      	ldrh	r2, [r3, #0]
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <HTTPCPOST+0xb4>)
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fe fe45 	bl	8003a2c <ESP_Send>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d001      	beq.n	8004daa <HTTPCPOST+0x9e>
    return true;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004daa:	2300      	movs	r3, #0
  }
}
 8004dac:	0018      	movs	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b003      	add	sp, #12
 8004db2:	bd90      	pop	{r4, r7, pc}
 8004db4:	2000055e 	.word	0x2000055e
 8004db8:	080289c4 	.word	0x080289c4
 8004dbc:	0802623c 	.word	0x0802623c
 8004dc0:	20000584 	.word	0x20000584
 8004dc4:	20000760 	.word	0x20000760
 8004dc8:	08080000 	.word	0x08080000
 8004dcc:	2000076c 	.word	0x2000076c
 8004dd0:	08028a00 	.word	0x08028a00
 8004dd4:	08026274 	.word	0x08026274
 8004dd8:	080262b4 	.word	0x080262b4
 8004ddc:	08025970 	.word	0x08025970

08004de0 <SENDDATA>:

bool SENDDATA(){
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af02      	add	r7, sp, #8
  bool result = false;
 8004de6:	1dfb      	adds	r3, r7, #7
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004dec:	4b0e      	ldr	r3, [pc, #56]	@ (8004e28 <SENDDATA+0x48>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	1df9      	adds	r1, r7, #7
 8004df2:	2201      	movs	r2, #1
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7fe ffcf 	bl	8003d98 <CreateMessage>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <SENDDATA+0x4c>)
 8004e00:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004e02:	1dfb      	adds	r3, r7, #7
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	0018      	movs	r0, r3
 8004e08:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <SENDDATA+0x4c>)
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	4a08      	ldr	r2, [pc, #32]	@ (8004e30 <SENDDATA+0x50>)
 8004e0e:	4909      	ldr	r1, [pc, #36]	@ (8004e34 <SENDDATA+0x54>)
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	0003      	movs	r3, r0
 8004e14:	2003      	movs	r0, #3
 8004e16:	f00b fc91 	bl	801073c <CreateLine>
  return result;
 8004e1a:	1dfb      	adds	r3, r7, #7
 8004e1c:	781b      	ldrb	r3, [r3, #0]
}
 8004e1e:	0018      	movs	r0, r3
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b002      	add	sp, #8
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	2000055e 	.word	0x2000055e
 8004e2c:	20000578 	.word	0x20000578
 8004e30:	08026310 	.word	0x08026310
 8004e34:	08025970 	.word	0x08025970

08004e38 <SLEEP>:

bool SLEEP(){
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <SLEEP+0x34>)
 8004e40:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fb f991 	bl	800016c <strlen>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0011      	movs	r1, r2
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7fe fdea 	bl	8003a2c <ESP_Send>
 8004e58:	1e03      	subs	r3, r0, #0
 8004e5a:	d001      	beq.n	8004e60 <SLEEP+0x28>
    return true;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <SLEEP+0x2a>
  }
  else{
    return false;
 8004e60:	2300      	movs	r3, #0
  }
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b002      	add	sp, #8
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	0802634c 	.word	0x0802634c

08004e70 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <CIPSNTPCFG+0x3c>)
 8004e78:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7fb f975 	bl	800016c <strlen>
 8004e82:	0003      	movs	r3, r0
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	0011      	movs	r1, r2
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f7fe fdce 	bl	8003a2c <ESP_Send>
 8004e90:	1e03      	subs	r3, r0, #0
 8004e92:	d006      	beq.n	8004ea2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004e94:	23fa      	movs	r3, #250	@ 0xfa
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f00c f8a5 	bl	8010fe8 <HAL_Delay>
    return true;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004ea2:	2300      	movs	r3, #0
  }
}
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b002      	add	sp, #8
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	0802635c 	.word	0x0802635c

08004eb0 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <CIPSNTPTIME+0x34>)
 8004eb8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f7fb f955 	bl	800016c <strlen>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0011      	movs	r1, r2
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7fe fdae 	bl	8003a2c <ESP_Send>
 8004ed0:	1e03      	subs	r3, r0, #0
 8004ed2:	d001      	beq.n	8004ed8 <CIPSNTPTIME+0x28>
    return true;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004ed8:	2300      	movs	r3, #0
  }
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			@ (mov r8, r8)
 8004ee4:	080263ac 	.word	0x080263ac

08004ee8 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004eee:	4b0b      	ldr	r3, [pc, #44]	@ (8004f1c <CIPSNTPINTV+0x34>)
 8004ef0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7fb f939 	bl	800016c <strlen>
 8004efa:	0003      	movs	r3, r0
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0011      	movs	r1, r2
 8004f02:	0018      	movs	r0, r3
 8004f04:	f7fe fd92 	bl	8003a2c <ESP_Send>
 8004f08:	1e03      	subs	r3, r0, #0
 8004f0a:	d001      	beq.n	8004f10 <CIPSNTPINTV+0x28>
    return true;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004f10:	2300      	movs	r3, #0
  }
}
 8004f12:	0018      	movs	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	b002      	add	sp, #8
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	080263c0 	.word	0x080263c0

08004f20 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004f20:	b5b0      	push	{r4, r5, r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	0002      	movs	r2, r0
 8004f28:	1dfb      	adds	r3, r7, #7
 8004f2a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80050e0 <DMA_ProcessBuffer+0x1c0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	200e      	movs	r0, #14
 8004f36:	183b      	adds	r3, r7, r0
 8004f38:	2180      	movs	r1, #128	@ 0x80
 8004f3a:	0049      	lsls	r1, r1, #1
 8004f3c:	1a8a      	subs	r2, r1, r2
 8004f3e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004f40:	230d      	movs	r3, #13
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2203      	movs	r2, #3
 8004f46:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004f48:	183b      	adds	r3, r7, r0
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d903      	bls.n	8004f5c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004f54:	183b      	adds	r3, r7, r0
 8004f56:	2280      	movs	r2, #128	@ 0x80
 8004f58:	0052      	lsls	r2, r2, #1
 8004f5a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004f5c:	4b61      	ldr	r3, [pc, #388]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	001a      	movs	r2, r3
 8004f64:	230e      	movs	r3, #14
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d131      	bne.n	8004fd2 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80050e8 <DMA_ProcessBuffer+0x1c8>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b14      	cmp	r3, #20
 8004f74:	d91b      	bls.n	8004fae <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004f76:	4b5c      	ldr	r3, [pc, #368]	@ (80050e8 <DMA_ProcessBuffer+0x1c8>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80050ec <DMA_ProcessBuffer+0x1cc>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d107      	bne.n	8004f94 <DMA_ProcessBuffer+0x74>
 8004f84:	4b5a      	ldr	r3, [pc, #360]	@ (80050f0 <DMA_ProcessBuffer+0x1d0>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004f8c:	230d      	movs	r3, #13
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	2207      	movs	r2, #7
 8004f92:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004f94:	4b55      	ldr	r3, [pc, #340]	@ (80050ec <DMA_ProcessBuffer+0x1cc>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d103      	bne.n	8004fa4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004f9c:	4b55      	ldr	r3, [pc, #340]	@ (80050f4 <DMA_ProcessBuffer+0x1d4>)
 8004f9e:	220b      	movs	r2, #11
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e016      	b.n	8004fd2 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004fa4:	230d      	movs	r3, #13
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2206      	movs	r2, #6
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e011      	b.n	8004fd2 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004fae:	4b4e      	ldr	r3, [pc, #312]	@ (80050e8 <DMA_ProcessBuffer+0x1c8>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80050e8 <DMA_ProcessBuffer+0x1c8>)
 8004fb8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004fba:	f00c f80b 	bl	8010fd4 <HAL_GetTick>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	33f5      	adds	r3, #245	@ 0xf5
 8004fc2:	33ff      	adds	r3, #255	@ 0xff
 8004fc4:	001a      	movs	r2, r3
 8004fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80050f8 <DMA_ProcessBuffer+0x1d8>)
 8004fc8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004fca:	230d      	movs	r3, #13
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	2204      	movs	r2, #4
 8004fd0:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004fd2:	4b44      	ldr	r3, [pc, #272]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	001a      	movs	r2, r3
 8004fda:	210e      	movs	r1, #14
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d100      	bne.n	8004fe6 <DMA_ProcessBuffer+0xc6>
 8004fe4:	e075      	b.n	80050d2 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004fe6:	4b40      	ldr	r3, [pc, #256]	@ (80050e8 <DMA_ProcessBuffer+0x1c8>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004fec:	4b43      	ldr	r3, [pc, #268]	@ (80050fc <DMA_ProcessBuffer+0x1dc>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d109      	bne.n	8005010 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004ffc:	187b      	adds	r3, r7, r1
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b2da      	uxtb	r2, r3
 8005002:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <DMA_ProcessBuffer+0x1dc>)
 8005004:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8005006:	230d      	movs	r3, #13
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	220a      	movs	r2, #10
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	e060      	b.n	80050d2 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8005010:	4b3a      	ldr	r3, [pc, #232]	@ (80050fc <DMA_ProcessBuffer+0x1dc>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	001a      	movs	r2, r3
 8005018:	210e      	movs	r1, #14
 800501a:	187b      	adds	r3, r7, r1
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	4293      	cmp	r3, r2
 8005020:	d009      	beq.n	8005036 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8005022:	187b      	adds	r3, r7, r1
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <DMA_ProcessBuffer+0x1dc>)
 800502a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 800502c:	230d      	movs	r3, #13
 800502e:	18fb      	adds	r3, r7, r3
 8005030:	220a      	movs	r2, #10
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	e04d      	b.n	80050d2 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8005036:	4b2b      	ldr	r3, [pc, #172]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	001a      	movs	r2, r3
 800503e:	210e      	movs	r1, #14
 8005040:	187b      	adds	r3, r7, r1
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	4293      	cmp	r3, r2
 8005046:	d917      	bls.n	8005078 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8005048:	4b26      	ldr	r3, [pc, #152]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	001a      	movs	r2, r3
 8005050:	4b2b      	ldr	r3, [pc, #172]	@ (8005100 <DMA_ProcessBuffer+0x1e0>)
 8005052:	18d0      	adds	r0, r2, r3
 8005054:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	001a      	movs	r2, r3
 800505c:	187b      	adds	r3, r7, r1
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	b299      	uxth	r1, r3
 8005064:	230d      	movs	r3, #13
 8005066:	18fc      	adds	r4, r7, r3
 8005068:	1dfb      	adds	r3, r7, #7
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	001a      	movs	r2, r3
 800506e:	f7ff fa71 	bl	8004554 <ParseBuffer>
 8005072:	0003      	movs	r3, r0
 8005074:	7023      	strb	r3, [r4, #0]
 8005076:	e026      	b.n	80050c6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8005078:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	001a      	movs	r2, r3
 8005080:	4b1f      	ldr	r3, [pc, #124]	@ (8005100 <DMA_ProcessBuffer+0x1e0>)
 8005082:	18d0      	adds	r0, r2, r3
 8005084:	4b17      	ldr	r3, [pc, #92]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	001a      	movs	r2, r3
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	b299      	uxth	r1, r3
 8005094:	250d      	movs	r5, #13
 8005096:	197c      	adds	r4, r7, r5
 8005098:	1dfb      	adds	r3, r7, #7
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	001a      	movs	r2, r3
 800509e:	f7ff fa59 	bl	8004554 <ParseBuffer>
 80050a2:	0003      	movs	r3, r0
 80050a4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80050a6:	210e      	movs	r1, #14
 80050a8:	187b      	adds	r3, r7, r1
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80050b0:	197c      	adds	r4, r7, r5
 80050b2:	1dfb      	adds	r3, r7, #7
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	8819      	ldrh	r1, [r3, #0]
 80050ba:	4b11      	ldr	r3, [pc, #68]	@ (8005100 <DMA_ProcessBuffer+0x1e0>)
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff fa49 	bl	8004554 <ParseBuffer>
 80050c2:	0003      	movs	r3, r0
 80050c4:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 80050c6:	230e      	movs	r3, #14
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <DMA_ProcessBuffer+0x1c4>)
 80050d0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 80050d2:	230d      	movs	r3, #13
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	781b      	ldrb	r3, [r3, #0]
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b004      	add	sp, #16
 80050de:	bdb0      	pop	{r4, r5, r7, pc}
 80050e0:	200020e0 	.word	0x200020e0
 80050e4:	20000785 	.word	0x20000785
 80050e8:	2000062c 	.word	0x2000062c
 80050ec:	2000062e 	.word	0x2000062e
 80050f0:	20000000 	.word	0x20000000
 80050f4:	2000002c 	.word	0x2000002c
 80050f8:	20000624 	.word	0x20000624
 80050fc:	20000786 	.word	0x20000786
 8005100:	20000458 	.word	0x20000458

08005104 <clearDMABuffer>:

void clearDMABuffer(){
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	005a      	lsls	r2, r3, #1
 800510c:	4b03      	ldr	r3, [pc, #12]	@ (800511c <clearDMABuffer+0x18>)
 800510e:	2100      	movs	r1, #0
 8005110:	0018      	movs	r0, r3
 8005112:	f01d fc71 	bl	80229f8 <memset>
}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000458 	.word	0x20000458

08005120 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	0002      	movs	r2, r0
 8005128:	1dfb      	adds	r3, r7, #7
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	1dbb      	adds	r3, r7, #6
 800512e:	1c0a      	adds	r2, r1, #0
 8005130:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005132:	210f      	movs	r1, #15
 8005134:	187b      	adds	r3, r7, r1
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800513a:	1dbb      	adds	r3, r7, #6
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d105      	bne.n	800514e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005142:	187b      	adds	r3, r7, r1
 8005144:	1dfa      	adds	r2, r7, #7
 8005146:	7812      	ldrb	r2, [r2, #0]
 8005148:	4251      	negs	r1, r2
 800514a:	414a      	adcs	r2, r1
 800514c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800514e:	1dbb      	adds	r3, r7, #6
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d107      	bne.n	8005166 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8005156:	230f      	movs	r3, #15
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	1dfa      	adds	r2, r7, #7
 800515c:	7812      	ldrb	r2, [r2, #0]
 800515e:	3a02      	subs	r2, #2
 8005160:	4251      	negs	r1, r2
 8005162:	414a      	adcs	r2, r1
 8005164:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8005166:	1dbb      	adds	r3, r7, #6
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d107      	bne.n	800517e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800516e:	230f      	movs	r3, #15
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	1dfa      	adds	r2, r7, #7
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	3a05      	subs	r2, #5
 8005178:	4251      	negs	r1, r2
 800517a:	414a      	adcs	r2, r1
 800517c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 800517e:	1dbb      	adds	r3, r7, #6
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b05      	cmp	r3, #5
 8005184:	d107      	bne.n	8005196 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8005186:	230f      	movs	r3, #15
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	1dfa      	adds	r2, r7, #7
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	3a0b      	subs	r2, #11
 8005190:	4251      	negs	r1, r2
 8005192:	414a      	adcs	r2, r1
 8005194:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8005196:	230f      	movs	r3, #15
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	781b      	ldrb	r3, [r3, #0]
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b004      	add	sp, #16
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <AT_Send>:

bool AT_Send(AT_Commands state){
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	0002      	movs	r2, r0
 80051ac:	1dfb      	adds	r3, r7, #7
 80051ae:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80051b0:	230f      	movs	r3, #15
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
  switch (state){
 80051b8:	1dfb      	adds	r3, r7, #7
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b14      	cmp	r3, #20
 80051be:	d900      	bls.n	80051c2 <AT_Send+0x1e>
 80051c0:	e19e      	b.n	8005500 <AT_Send+0x35c>
 80051c2:	009a      	lsls	r2, r3, #2
 80051c4:	4bd2      	ldr	r3, [pc, #840]	@ (8005510 <AT_Send+0x36c>)
 80051c6:	18d3      	adds	r3, r2, r3
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80051cc:	4bd1      	ldr	r3, [pc, #836]	@ (8005514 <AT_Send+0x370>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f00b fa5d 	bl	8010690 <TimestampIsReached>
 80051d6:	1e03      	subs	r3, r0, #0
 80051d8:	d100      	bne.n	80051dc <AT_Send+0x38>
 80051da:	e190      	b.n	80054fe <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80051dc:	4ace      	ldr	r2, [pc, #824]	@ (8005518 <AT_Send+0x374>)
 80051de:	4bcf      	ldr	r3, [pc, #828]	@ (800551c <AT_Send+0x378>)
 80051e0:	0019      	movs	r1, r3
 80051e2:	2003      	movs	r0, #3
 80051e4:	f00b faaa 	bl	801073c <CreateLine>
    ATCommandSend = PollAwake();
 80051e8:	230f      	movs	r3, #15
 80051ea:	18fc      	adds	r4, r7, r3
 80051ec:	f7ff fba0 	bl	8004930 <PollAwake>
 80051f0:	0003      	movs	r3, r0
 80051f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80051f4:	f00b feee 	bl	8010fd4 <HAL_GetTick>
 80051f8:	0003      	movs	r3, r0
 80051fa:	3332      	adds	r3, #50	@ 0x32
 80051fc:	001a      	movs	r2, r3
 80051fe:	4bc5      	ldr	r3, [pc, #788]	@ (8005514 <AT_Send+0x370>)
 8005200:	601a      	str	r2, [r3, #0]
  }
  break;
 8005202:	e17c      	b.n	80054fe <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005204:	4ac6      	ldr	r2, [pc, #792]	@ (8005520 <AT_Send+0x37c>)
 8005206:	4bc5      	ldr	r3, [pc, #788]	@ (800551c <AT_Send+0x378>)
 8005208:	0019      	movs	r1, r3
 800520a:	2003      	movs	r0, #3
 800520c:	f00b fa96 	bl	801073c <CreateLine>
    ATCommandSend = RFPower();
 8005210:	230f      	movs	r3, #15
 8005212:	18fc      	adds	r4, r7, r3
 8005214:	f7ff fba8 	bl	8004968 <RFPower>
 8005218:	0003      	movs	r3, r0
 800521a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800521c:	f00b feda 	bl	8010fd4 <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	330a      	adds	r3, #10
 8005224:	001a      	movs	r2, r3
 8005226:	4bbb      	ldr	r3, [pc, #748]	@ (8005514 <AT_Send+0x370>)
 8005228:	601a      	str	r2, [r3, #0]
    break;
 800522a:	e169      	b.n	8005500 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800522c:	4abd      	ldr	r2, [pc, #756]	@ (8005524 <AT_Send+0x380>)
 800522e:	4bbb      	ldr	r3, [pc, #748]	@ (800551c <AT_Send+0x378>)
 8005230:	0019      	movs	r1, r3
 8005232:	2003      	movs	r0, #3
 8005234:	f00b fa82 	bl	801073c <CreateLine>
    ATCommandSend = CheckRFPower();
 8005238:	230f      	movs	r3, #15
 800523a:	18fc      	adds	r4, r7, r3
 800523c:	f7ff fbb0 	bl	80049a0 <CheckRFPower>
 8005240:	0003      	movs	r3, r0
 8005242:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005244:	f00b fec6 	bl	8010fd4 <HAL_GetTick>
 8005248:	0003      	movs	r3, r0
 800524a:	330a      	adds	r3, #10
 800524c:	001a      	movs	r2, r3
 800524e:	4bb1      	ldr	r3, [pc, #708]	@ (8005514 <AT_Send+0x370>)
 8005250:	601a      	str	r2, [r3, #0]
    break;
 8005252:	e155      	b.n	8005500 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005254:	4ab4      	ldr	r2, [pc, #720]	@ (8005528 <AT_Send+0x384>)
 8005256:	4bb1      	ldr	r3, [pc, #708]	@ (800551c <AT_Send+0x378>)
 8005258:	0019      	movs	r1, r3
 800525a:	2003      	movs	r0, #3
 800525c:	f00b fa6e 	bl	801073c <CreateLine>
    ATCommandSend = ATRestore();
 8005260:	230f      	movs	r3, #15
 8005262:	18fc      	adds	r4, r7, r3
 8005264:	f7ff fbb8 	bl	80049d8 <ATRestore>
 8005268:	0003      	movs	r3, r0
 800526a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800526c:	f00b feb2 	bl	8010fd4 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	3332      	adds	r3, #50	@ 0x32
 8005274:	001a      	movs	r2, r3
 8005276:	4ba7      	ldr	r3, [pc, #668]	@ (8005514 <AT_Send+0x370>)
 8005278:	601a      	str	r2, [r3, #0]
    break;
 800527a:	e141      	b.n	8005500 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800527c:	4aab      	ldr	r2, [pc, #684]	@ (800552c <AT_Send+0x388>)
 800527e:	4ba7      	ldr	r3, [pc, #668]	@ (800551c <AT_Send+0x378>)
 8005280:	0019      	movs	r1, r3
 8005282:	2003      	movs	r0, #3
 8005284:	f00b fa5a 	bl	801073c <CreateLine>
    ATCommandSend = CWINIT();
 8005288:	230f      	movs	r3, #15
 800528a:	18fc      	adds	r4, r7, r3
 800528c:	f7ff fbc0 	bl	8004a10 <CWINIT>
 8005290:	0003      	movs	r3, r0
 8005292:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005294:	f00b fe9e 	bl	8010fd4 <HAL_GetTick>
 8005298:	0003      	movs	r3, r0
 800529a:	33f5      	adds	r3, #245	@ 0xf5
 800529c:	33ff      	adds	r3, #255	@ 0xff
 800529e:	001a      	movs	r2, r3
 80052a0:	4b9c      	ldr	r3, [pc, #624]	@ (8005514 <AT_Send+0x370>)
 80052a2:	601a      	str	r2, [r3, #0]
    break;
 80052a4:	e12c      	b.n	8005500 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 80052a6:	4aa2      	ldr	r2, [pc, #648]	@ (8005530 <AT_Send+0x38c>)
 80052a8:	4b9c      	ldr	r3, [pc, #624]	@ (800551c <AT_Send+0x378>)
 80052aa:	0019      	movs	r1, r3
 80052ac:	2003      	movs	r0, #3
 80052ae:	f00b fa45 	bl	801073c <CreateLine>
    ATCommandSend = CWSTATE();
 80052b2:	230f      	movs	r3, #15
 80052b4:	18fc      	adds	r4, r7, r3
 80052b6:	f7ff fcb9 	bl	8004c2c <CWSTATE>
 80052ba:	0003      	movs	r3, r0
 80052bc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80052be:	f00b fe89 	bl	8010fd4 <HAL_GetTick>
 80052c2:	0003      	movs	r3, r0
 80052c4:	33f5      	adds	r3, #245	@ 0xf5
 80052c6:	33ff      	adds	r3, #255	@ 0xff
 80052c8:	001a      	movs	r2, r3
 80052ca:	4b92      	ldr	r3, [pc, #584]	@ (8005514 <AT_Send+0x370>)
 80052cc:	601a      	str	r2, [r3, #0]
    break;
 80052ce:	e117      	b.n	8005500 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80052d0:	4a98      	ldr	r2, [pc, #608]	@ (8005534 <AT_Send+0x390>)
 80052d2:	4b92      	ldr	r3, [pc, #584]	@ (800551c <AT_Send+0x378>)
 80052d4:	0019      	movs	r1, r3
 80052d6:	2003      	movs	r0, #3
 80052d8:	f00b fa30 	bl	801073c <CreateLine>
    ATCommandSend = CWMODE1();
 80052dc:	230f      	movs	r3, #15
 80052de:	18fc      	adds	r4, r7, r3
 80052e0:	f7ff fbb2 	bl	8004a48 <CWMODE1>
 80052e4:	0003      	movs	r3, r0
 80052e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052e8:	f00b fe74 	bl	8010fd4 <HAL_GetTick>
 80052ec:	0003      	movs	r3, r0
 80052ee:	330a      	adds	r3, #10
 80052f0:	001a      	movs	r2, r3
 80052f2:	4b88      	ldr	r3, [pc, #544]	@ (8005514 <AT_Send+0x370>)
 80052f4:	601a      	str	r2, [r3, #0]
    break;
 80052f6:	e103      	b.n	8005500 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80052f8:	4a8e      	ldr	r2, [pc, #568]	@ (8005534 <AT_Send+0x390>)
 80052fa:	4b88      	ldr	r3, [pc, #544]	@ (800551c <AT_Send+0x378>)
 80052fc:	0019      	movs	r1, r3
 80052fe:	2003      	movs	r0, #3
 8005300:	f00b fa1c 	bl	801073c <CreateLine>
    ATCommandSend = CWMODE2();
 8005304:	230f      	movs	r3, #15
 8005306:	18fc      	adds	r4, r7, r3
 8005308:	f7ff fbba 	bl	8004a80 <CWMODE2>
 800530c:	0003      	movs	r3, r0
 800530e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005310:	f00b fe60 	bl	8010fd4 <HAL_GetTick>
 8005314:	0003      	movs	r3, r0
 8005316:	330a      	adds	r3, #10
 8005318:	001a      	movs	r2, r3
 800531a:	4b7e      	ldr	r3, [pc, #504]	@ (8005514 <AT_Send+0x370>)
 800531c:	601a      	str	r2, [r3, #0]
    break;
 800531e:	e0ef      	b.n	8005500 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005320:	4a85      	ldr	r2, [pc, #532]	@ (8005538 <AT_Send+0x394>)
 8005322:	4b7e      	ldr	r3, [pc, #504]	@ (800551c <AT_Send+0x378>)
 8005324:	0019      	movs	r1, r3
 8005326:	2003      	movs	r0, #3
 8005328:	f00b fa08 	bl	801073c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800532c:	230f      	movs	r3, #15
 800532e:	18fc      	adds	r4, r7, r3
 8005330:	f7ff fbc2 	bl	8004ab8 <CWAUTOCONN>
 8005334:	0003      	movs	r3, r0
 8005336:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005338:	f00b fe4c 	bl	8010fd4 <HAL_GetTick>
 800533c:	0003      	movs	r3, r0
 800533e:	330a      	adds	r3, #10
 8005340:	001a      	movs	r2, r3
 8005342:	4b74      	ldr	r3, [pc, #464]	@ (8005514 <AT_Send+0x370>)
 8005344:	601a      	str	r2, [r3, #0]
    break;
 8005346:	e0db      	b.n	8005500 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005348:	4a7c      	ldr	r2, [pc, #496]	@ (800553c <AT_Send+0x398>)
 800534a:	4b74      	ldr	r3, [pc, #464]	@ (800551c <AT_Send+0x378>)
 800534c:	0019      	movs	r1, r3
 800534e:	2003      	movs	r0, #3
 8005350:	f00b f9f4 	bl	801073c <CreateLine>
    ATCommandSend = CWJAP();
 8005354:	230f      	movs	r3, #15
 8005356:	18fc      	adds	r4, r7, r3
 8005358:	f7ff fbca 	bl	8004af0 <CWJAP>
 800535c:	0003      	movs	r3, r0
 800535e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005360:	f00b fe38 	bl	8010fd4 <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	3332      	adds	r3, #50	@ 0x32
 8005368:	001a      	movs	r2, r3
 800536a:	4b6a      	ldr	r3, [pc, #424]	@ (8005514 <AT_Send+0x370>)
 800536c:	601a      	str	r2, [r3, #0]
    break;
 800536e:	e0c7      	b.n	8005500 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005370:	4a73      	ldr	r2, [pc, #460]	@ (8005540 <AT_Send+0x39c>)
 8005372:	4b6a      	ldr	r3, [pc, #424]	@ (800551c <AT_Send+0x378>)
 8005374:	0019      	movs	r1, r3
 8005376:	2003      	movs	r0, #3
 8005378:	f00b f9e0 	bl	801073c <CreateLine>
    ATCommandSend = CWMODE3();
 800537c:	230f      	movs	r3, #15
 800537e:	18fc      	adds	r4, r7, r3
 8005380:	f7ff fc38 	bl	8004bf4 <CWMODE3>
 8005384:	0003      	movs	r3, r0
 8005386:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005388:	f00b fe24 	bl	8010fd4 <HAL_GetTick>
 800538c:	0003      	movs	r3, r0
 800538e:	330a      	adds	r3, #10
 8005390:	001a      	movs	r2, r3
 8005392:	4b60      	ldr	r3, [pc, #384]	@ (8005514 <AT_Send+0x370>)
 8005394:	601a      	str	r2, [r3, #0]
    break;
 8005396:	e0b3      	b.n	8005500 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8005398:	4a6a      	ldr	r2, [pc, #424]	@ (8005544 <AT_Send+0x3a0>)
 800539a:	4b60      	ldr	r3, [pc, #384]	@ (800551c <AT_Send+0x378>)
 800539c:	0019      	movs	r1, r3
 800539e:	2003      	movs	r0, #3
 80053a0:	f00b f9cc 	bl	801073c <CreateLine>
    ATCommandSend = CWSAP();
 80053a4:	230f      	movs	r3, #15
 80053a6:	18fc      	adds	r4, r7, r3
 80053a8:	f7ff fc5c 	bl	8004c64 <CWSAP>
 80053ac:	0003      	movs	r3, r0
 80053ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053b0:	f00b fe10 	bl	8010fd4 <HAL_GetTick>
 80053b4:	0003      	movs	r3, r0
 80053b6:	330a      	adds	r3, #10
 80053b8:	001a      	movs	r2, r3
 80053ba:	4b56      	ldr	r3, [pc, #344]	@ (8005514 <AT_Send+0x370>)
 80053bc:	601a      	str	r2, [r3, #0]
    break;
 80053be:	e09f      	b.n	8005500 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80053c0:	4a61      	ldr	r2, [pc, #388]	@ (8005548 <AT_Send+0x3a4>)
 80053c2:	4b56      	ldr	r3, [pc, #344]	@ (800551c <AT_Send+0x378>)
 80053c4:	0019      	movs	r1, r3
 80053c6:	2003      	movs	r0, #3
 80053c8:	f00b f9b8 	bl	801073c <CreateLine>
    ATCommandSend = CIPMUX();
 80053cc:	230f      	movs	r3, #15
 80053ce:	18fc      	adds	r4, r7, r3
 80053d0:	f7ff fc64 	bl	8004c9c <CIPMUX>
 80053d4:	0003      	movs	r3, r0
 80053d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053d8:	f00b fdfc 	bl	8010fd4 <HAL_GetTick>
 80053dc:	0003      	movs	r3, r0
 80053de:	330a      	adds	r3, #10
 80053e0:	001a      	movs	r2, r3
 80053e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005514 <AT_Send+0x370>)
 80053e4:	601a      	str	r2, [r3, #0]
    break;
 80053e6:	e08b      	b.n	8005500 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80053e8:	4a58      	ldr	r2, [pc, #352]	@ (800554c <AT_Send+0x3a8>)
 80053ea:	4b4c      	ldr	r3, [pc, #304]	@ (800551c <AT_Send+0x378>)
 80053ec:	0019      	movs	r1, r3
 80053ee:	2003      	movs	r0, #3
 80053f0:	f00b f9a4 	bl	801073c <CreateLine>
    ATCommandSend = WEBSERVER();
 80053f4:	230f      	movs	r3, #15
 80053f6:	18fc      	adds	r4, r7, r3
 80053f8:	f7ff fc6c 	bl	8004cd4 <WEBSERVER>
 80053fc:	0003      	movs	r3, r0
 80053fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005400:	f00b fde8 	bl	8010fd4 <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	330a      	adds	r3, #10
 8005408:	001a      	movs	r2, r3
 800540a:	4b42      	ldr	r3, [pc, #264]	@ (8005514 <AT_Send+0x370>)
 800540c:	601a      	str	r2, [r3, #0]
    break;
 800540e:	e077      	b.n	8005500 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005410:	230f      	movs	r3, #15
 8005412:	18fc      	adds	r4, r7, r3
 8005414:	f7ff fc7a 	bl	8004d0c <HTTPCPOST>
 8005418:	0003      	movs	r3, r0
 800541a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800541c:	f00b fdda 	bl	8010fd4 <HAL_GetTick>
 8005420:	0003      	movs	r3, r0
 8005422:	33f5      	adds	r3, #245	@ 0xf5
 8005424:	33ff      	adds	r3, #255	@ 0xff
 8005426:	001a      	movs	r2, r3
 8005428:	4b3a      	ldr	r3, [pc, #232]	@ (8005514 <AT_Send+0x370>)
 800542a:	601a      	str	r2, [r3, #0]
    break;
 800542c:	e068      	b.n	8005500 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800542e:	4a48      	ldr	r2, [pc, #288]	@ (8005550 <AT_Send+0x3ac>)
 8005430:	4b3a      	ldr	r3, [pc, #232]	@ (800551c <AT_Send+0x378>)
 8005432:	0019      	movs	r1, r3
 8005434:	2003      	movs	r0, #3
 8005436:	f00b f981 	bl	801073c <CreateLine>
    ATCommandSend = SENDDATA();
 800543a:	230f      	movs	r3, #15
 800543c:	18fc      	adds	r4, r7, r3
 800543e:	f7ff fccf 	bl	8004de0 <SENDDATA>
 8005442:	0003      	movs	r3, r0
 8005444:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005446:	f00b fdc5 	bl	8010fd4 <HAL_GetTick>
 800544a:	0003      	movs	r3, r0
 800544c:	33f5      	adds	r3, #245	@ 0xf5
 800544e:	33ff      	adds	r3, #255	@ 0xff
 8005450:	001a      	movs	r2, r3
 8005452:	4b30      	ldr	r3, [pc, #192]	@ (8005514 <AT_Send+0x370>)
 8005454:	601a      	str	r2, [r3, #0]
    break;
 8005456:	e053      	b.n	8005500 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005458:	4a3e      	ldr	r2, [pc, #248]	@ (8005554 <AT_Send+0x3b0>)
 800545a:	4b30      	ldr	r3, [pc, #192]	@ (800551c <AT_Send+0x378>)
 800545c:	0019      	movs	r1, r3
 800545e:	2003      	movs	r0, #3
 8005460:	f00b f96c 	bl	801073c <CreateLine>
    ATCommandSend = SLEEP();
 8005464:	230f      	movs	r3, #15
 8005466:	18fc      	adds	r4, r7, r3
 8005468:	f7ff fce6 	bl	8004e38 <SLEEP>
 800546c:	0003      	movs	r3, r0
 800546e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005470:	f00b fdb0 	bl	8010fd4 <HAL_GetTick>
 8005474:	0003      	movs	r3, r0
 8005476:	330a      	adds	r3, #10
 8005478:	001a      	movs	r2, r3
 800547a:	4b26      	ldr	r3, [pc, #152]	@ (8005514 <AT_Send+0x370>)
 800547c:	601a      	str	r2, [r3, #0]
    break;
 800547e:	e03f      	b.n	8005500 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8005480:	4a35      	ldr	r2, [pc, #212]	@ (8005558 <AT_Send+0x3b4>)
 8005482:	4b26      	ldr	r3, [pc, #152]	@ (800551c <AT_Send+0x378>)
 8005484:	0019      	movs	r1, r3
 8005486:	2003      	movs	r0, #3
 8005488:	f00b f958 	bl	801073c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 800548c:	230f      	movs	r3, #15
 800548e:	18fc      	adds	r4, r7, r3
 8005490:	f7ff fcee 	bl	8004e70 <CIPSNTPCFG>
 8005494:	0003      	movs	r3, r0
 8005496:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005498:	f00b fd9c 	bl	8010fd4 <HAL_GetTick>
 800549c:	0003      	movs	r3, r0
 800549e:	330a      	adds	r3, #10
 80054a0:	001a      	movs	r2, r3
 80054a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005514 <AT_Send+0x370>)
 80054a4:	601a      	str	r2, [r3, #0]
    break;
 80054a6:	e02b      	b.n	8005500 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80054a8:	4a2c      	ldr	r2, [pc, #176]	@ (800555c <AT_Send+0x3b8>)
 80054aa:	4b1c      	ldr	r3, [pc, #112]	@ (800551c <AT_Send+0x378>)
 80054ac:	0019      	movs	r1, r3
 80054ae:	2003      	movs	r0, #3
 80054b0:	f00b f944 	bl	801073c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80054b4:	230f      	movs	r3, #15
 80054b6:	18fc      	adds	r4, r7, r3
 80054b8:	f7ff fcfa 	bl	8004eb0 <CIPSNTPTIME>
 80054bc:	0003      	movs	r3, r0
 80054be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80054c0:	f00b fd88 	bl	8010fd4 <HAL_GetTick>
 80054c4:	0003      	movs	r3, r0
 80054c6:	33f5      	adds	r3, #245	@ 0xf5
 80054c8:	33ff      	adds	r3, #255	@ 0xff
 80054ca:	001a      	movs	r2, r3
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <AT_Send+0x370>)
 80054ce:	601a      	str	r2, [r3, #0]
    break;
 80054d0:	e016      	b.n	8005500 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80054d2:	4a23      	ldr	r2, [pc, #140]	@ (8005560 <AT_Send+0x3bc>)
 80054d4:	4b11      	ldr	r3, [pc, #68]	@ (800551c <AT_Send+0x378>)
 80054d6:	0019      	movs	r1, r3
 80054d8:	2003      	movs	r0, #3
 80054da:	f00b f92f 	bl	801073c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80054de:	230f      	movs	r3, #15
 80054e0:	18fc      	adds	r4, r7, r3
 80054e2:	f7ff fd01 	bl	8004ee8 <CIPSNTPINTV>
 80054e6:	0003      	movs	r3, r0
 80054e8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80054ea:	f00b fd73 	bl	8010fd4 <HAL_GetTick>
 80054ee:	0003      	movs	r3, r0
 80054f0:	330a      	adds	r3, #10
 80054f2:	001a      	movs	r2, r3
 80054f4:	4b07      	ldr	r3, [pc, #28]	@ (8005514 <AT_Send+0x370>)
 80054f6:	601a      	str	r2, [r3, #0]
    break;
 80054f8:	e002      	b.n	8005500 <AT_Send+0x35c>

  case AT_END:
    break;
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	e000      	b.n	8005500 <AT_Send+0x35c>
  break;
 80054fe:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005500:	230f      	movs	r3, #15
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	781b      	ldrb	r3, [r3, #0]
}
 8005506:	0018      	movs	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	b005      	add	sp, #20
 800550c:	bd90      	pop	{r4, r7, pc}
 800550e:	46c0      	nop			@ (mov r8, r8)
 8005510:	08028a5c 	.word	0x08028a5c
 8005514:	20000624 	.word	0x20000624
 8005518:	080263d8 	.word	0x080263d8
 800551c:	08025970 	.word	0x08025970
 8005520:	080263e4 	.word	0x080263e4
 8005524:	080263f8 	.word	0x080263f8
 8005528:	0802640c 	.word	0x0802640c
 800552c:	0802641c 	.word	0x0802641c
 8005530:	08026430 	.word	0x08026430
 8005534:	08026448 	.word	0x08026448
 8005538:	08026460 	.word	0x08026460
 800553c:	08026478 	.word	0x08026478
 8005540:	0802648c 	.word	0x0802648c
 8005544:	080264a8 	.word	0x080264a8
 8005548:	080264c4 	.word	0x080264c4
 800554c:	080264e0 	.word	0x080264e0
 8005550:	080264fc 	.word	0x080264fc
 8005554:	0802650c 	.word	0x0802650c
 8005558:	08026530 	.word	0x08026530
 800555c:	08026544 	.word	0x08026544
 8005560:	0802655c 	.word	0x0802655c

08005564 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800556a:	1dfb      	adds	r3, r7, #7
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005570:	4b7d      	ldr	r3, [pc, #500]	@ (8005768 <ESP_WakeTest+0x204>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b05      	cmp	r3, #5
 8005576:	d900      	bls.n	800557a <ESP_WakeTest+0x16>
 8005578:	e0d9      	b.n	800572e <ESP_WakeTest+0x1ca>
 800557a:	009a      	lsls	r2, r3, #2
 800557c:	4b7b      	ldr	r3, [pc, #492]	@ (800576c <ESP_WakeTest+0x208>)
 800557e:	18d3      	adds	r3, r2, r3
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005584:	4b7a      	ldr	r3, [pc, #488]	@ (8005770 <ESP_WakeTest+0x20c>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	4053      	eors	r3, r2
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d036      	beq.n	8005600 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005592:	2380      	movs	r3, #128	@ 0x80
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	4877      	ldr	r0, [pc, #476]	@ (8005774 <ESP_WakeTest+0x210>)
 8005598:	2200      	movs	r2, #0
 800559a:	0019      	movs	r1, r3
 800559c:	f00c ffab 	bl	80124f6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80055a0:	2032      	movs	r0, #50	@ 0x32
 80055a2:	f00b fd21 	bl	8010fe8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80055a6:	2380      	movs	r3, #128	@ 0x80
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	4872      	ldr	r0, [pc, #456]	@ (8005774 <ESP_WakeTest+0x210>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	0019      	movs	r1, r3
 80055b0:	f00c ffa1 	bl	80124f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055b4:	200a      	movs	r0, #10
 80055b6:	f00b fd17 	bl	8010fe8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80055ba:	4b6f      	ldr	r3, [pc, #444]	@ (8005778 <ESP_WakeTest+0x214>)
 80055bc:	2200      	movs	r2, #0
 80055be:	2101      	movs	r1, #1
 80055c0:	0018      	movs	r0, r3
 80055c2:	f00c ff98 	bl	80124f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055c6:	200a      	movs	r0, #10
 80055c8:	f00b fd0e 	bl	8010fe8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80055cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005778 <ESP_WakeTest+0x214>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	2102      	movs	r1, #2
 80055d2:	0018      	movs	r0, r3
 80055d4:	f00c ff8f 	bl	80124f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055d8:	200a      	movs	r0, #10
 80055da:	f00b fd05 	bl	8010fe8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80055de:	4b66      	ldr	r3, [pc, #408]	@ (8005778 <ESP_WakeTest+0x214>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	2101      	movs	r1, #1
 80055e4:	0018      	movs	r0, r3
 80055e6:	f00c ff86 	bl	80124f6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80055ea:	f00b fcf3 	bl	8010fd4 <HAL_GetTick>
 80055ee:	0003      	movs	r3, r0
 80055f0:	22af      	movs	r2, #175	@ 0xaf
 80055f2:	0092      	lsls	r2, r2, #2
 80055f4:	189a      	adds	r2, r3, r2
 80055f6:	4b61      	ldr	r3, [pc, #388]	@ (800577c <ESP_WakeTest+0x218>)
 80055f8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80055fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005770 <ESP_WakeTest+0x20c>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005600:	2380      	movs	r3, #128	@ 0x80
 8005602:	005a      	lsls	r2, r3, #1
 8005604:	4b5e      	ldr	r3, [pc, #376]	@ (8005780 <ESP_WakeTest+0x21c>)
 8005606:	0011      	movs	r1, r2
 8005608:	0018      	movs	r0, r3
 800560a:	f7fe fa41 	bl	8003a90 <ESP_Receive>
 800560e:	1e03      	subs	r3, r0, #0
 8005610:	d100      	bne.n	8005614 <ESP_WakeTest+0xb0>
 8005612:	e09f      	b.n	8005754 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005614:	4b54      	ldr	r3, [pc, #336]	@ (8005768 <ESP_WakeTest+0x204>)
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
      }
      break;
 800561a:	e09b      	b.n	8005754 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 800561c:	4b57      	ldr	r3, [pc, #348]	@ (800577c <ESP_WakeTest+0x218>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	0018      	movs	r0, r3
 8005622:	f00b f835 	bl	8010690 <TimestampIsReached>
 8005626:	1e03      	subs	r3, r0, #0
 8005628:	d100      	bne.n	800562c <ESP_WakeTest+0xc8>
 800562a:	e095      	b.n	8005758 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800562c:	4b55      	ldr	r3, [pc, #340]	@ (8005784 <ESP_WakeTest+0x220>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	1dfc      	adds	r4, r7, #7
 8005632:	0018      	movs	r0, r3
 8005634:	f7ff fdb6 	bl	80051a4 <AT_Send>
 8005638:	0003      	movs	r3, r0
 800563a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800563c:	1dfb      	adds	r3, r7, #7
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d100      	bne.n	8005646 <ESP_WakeTest+0xe2>
 8005644:	e088      	b.n	8005758 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005646:	4b48      	ldr	r3, [pc, #288]	@ (8005768 <ESP_WakeTest+0x204>)
 8005648:	2202      	movs	r2, #2
 800564a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800564c:	e084      	b.n	8005758 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800564e:	4b4b      	ldr	r3, [pc, #300]	@ (800577c <ESP_WakeTest+0x218>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	0018      	movs	r0, r3
 8005654:	f00b f81c 	bl	8010690 <TimestampIsReached>
 8005658:	1e03      	subs	r3, r0, #0
 800565a:	d100      	bne.n	800565e <ESP_WakeTest+0xfa>
 800565c:	e07e      	b.n	800575c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800565e:	4b4a      	ldr	r3, [pc, #296]	@ (8005788 <ESP_WakeTest+0x224>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff fc5c 	bl	8004f20 <DMA_ProcessBuffer>
 8005668:	0003      	movs	r3, r0
 800566a:	001a      	movs	r2, r3
 800566c:	4b47      	ldr	r3, [pc, #284]	@ (800578c <ESP_WakeTest+0x228>)
 800566e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005670:	4b46      	ldr	r3, [pc, #280]	@ (800578c <ESP_WakeTest+0x228>)
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	4b44      	ldr	r3, [pc, #272]	@ (8005788 <ESP_WakeTest+0x224>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	1dbc      	adds	r4, r7, #6
 800567a:	0019      	movs	r1, r3
 800567c:	0010      	movs	r0, r2
 800567e:	f7ff fd4f 	bl	8005120 <ATCompare>
 8005682:	0003      	movs	r3, r0
 8005684:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005686:	4b41      	ldr	r3, [pc, #260]	@ (800578c <ESP_WakeTest+0x228>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d102      	bne.n	8005694 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800568e:	4b36      	ldr	r3, [pc, #216]	@ (8005768 <ESP_WakeTest+0x204>)
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005694:	4b3d      	ldr	r3, [pc, #244]	@ (800578c <ESP_WakeTest+0x228>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b07      	cmp	r3, #7
 800569a:	d104      	bne.n	80056a6 <ESP_WakeTest+0x142>
          StartProg();
 800569c:	f7fe ff28 	bl	80044f0 <StartProg>
          TestState = ESP_TEST_BOOT;
 80056a0:	4b31      	ldr	r3, [pc, #196]	@ (8005768 <ESP_WakeTest+0x204>)
 80056a2:	2205      	movs	r2, #5
 80056a4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80056a6:	4b39      	ldr	r3, [pc, #228]	@ (800578c <ESP_WakeTest+0x228>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d109      	bne.n	80056c2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80056ae:	f00b fc91 	bl	8010fd4 <HAL_GetTick>
 80056b2:	0003      	movs	r3, r0
 80056b4:	3332      	adds	r3, #50	@ 0x32
 80056b6:	001a      	movs	r2, r3
 80056b8:	4b30      	ldr	r3, [pc, #192]	@ (800577c <ESP_WakeTest+0x218>)
 80056ba:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80056bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005768 <ESP_WakeTest+0x204>)
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80056c2:	1dbb      	adds	r3, r7, #6
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d048      	beq.n	800575c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80056ca:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <ESP_WakeTest+0x204>)
 80056cc:	2203      	movs	r2, #3
 80056ce:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80056d0:	e044      	b.n	800575c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80056d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005790 <ESP_WakeTest+0x22c>)
 80056d4:	22fa      	movs	r2, #250	@ 0xfa
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80056da:	f009 fd7f 	bl	800f1dc <Calculate_LED_ON>
 80056de:	0003      	movs	r3, r0
 80056e0:	001a      	movs	r2, r3
 80056e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005790 <ESP_WakeTest+0x22c>)
 80056e4:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80056e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005790 <ESP_WakeTest+0x22c>)
 80056e8:	22fa      	movs	r2, #250	@ 0xfa
 80056ea:	0112      	lsls	r2, r2, #4
 80056ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80056ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005768 <ESP_WakeTest+0x204>)
 80056f0:	2204      	movs	r2, #4
 80056f2:	701a      	strb	r2, [r3, #0]

      break;
 80056f4:	e033      	b.n	800575e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80056f6:	4b27      	ldr	r3, [pc, #156]	@ (8005794 <ESP_WakeTest+0x230>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80056fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005770 <ESP_WakeTest+0x20c>)
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005702:	4b1d      	ldr	r3, [pc, #116]	@ (8005778 <ESP_WakeTest+0x214>)
 8005704:	2200      	movs	r2, #0
 8005706:	2101      	movs	r1, #1
 8005708:	0018      	movs	r0, r3
 800570a:	f00c fef4 	bl	80124f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	4818      	ldr	r0, [pc, #96]	@ (8005774 <ESP_WakeTest+0x210>)
 8005714:	2200      	movs	r2, #0
 8005716:	0019      	movs	r1, r3
 8005718:	f00c feed 	bl	80124f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800571c:	4b16      	ldr	r3, [pc, #88]	@ (8005778 <ESP_WakeTest+0x214>)
 800571e:	2200      	movs	r2, #0
 8005720:	2102      	movs	r1, #2
 8005722:	0018      	movs	r0, r3
 8005724:	f00c fee7 	bl	80124f6 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005728:	f004 fe6a 	bl	800a400 <SetESPMeasurementDone>
      break;
 800572c:	e017      	b.n	800575e <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800572e:	4b0e      	ldr	r3, [pc, #56]	@ (8005768 <ESP_WakeTest+0x204>)
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
      break;
 8005734:	e013      	b.n	800575e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005736:	4b16      	ldr	r3, [pc, #88]	@ (8005790 <ESP_WakeTest+0x22c>)
 8005738:	22fa      	movs	r2, #250	@ 0xfa
 800573a:	0112      	lsls	r2, r2, #4
 800573c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800573e:	4b14      	ldr	r3, [pc, #80]	@ (8005790 <ESP_WakeTest+0x22c>)
 8005740:	22fa      	movs	r2, #250	@ 0xfa
 8005742:	0112      	lsls	r2, r2, #4
 8005744:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005746:	f009 fd49 	bl	800f1dc <Calculate_LED_ON>
 800574a:	0003      	movs	r3, r0
 800574c:	001a      	movs	r2, r3
 800574e:	4b10      	ldr	r3, [pc, #64]	@ (8005790 <ESP_WakeTest+0x22c>)
 8005750:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005752:	e004      	b.n	800575e <ESP_WakeTest+0x1fa>
      break;
 8005754:	46c0      	nop			@ (mov r8, r8)
 8005756:	e002      	b.n	800575e <ESP_WakeTest+0x1fa>
      break;
 8005758:	46c0      	nop			@ (mov r8, r8)
 800575a:	e000      	b.n	800575e <ESP_WakeTest+0x1fa>
      break;
 800575c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	46bd      	mov	sp, r7
 8005762:	b003      	add	sp, #12
 8005764:	bd90      	pop	{r4, r7, pc}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	20000630 	.word	0x20000630
 800576c:	08028ab0 	.word	0x08028ab0
 8005770:	20000558 	.word	0x20000558
 8005774:	50000800 	.word	0x50000800
 8005778:	50001c00 	.word	0x50001c00
 800577c:	20000624 	.word	0x20000624
 8005780:	20000458 	.word	0x20000458
 8005784:	2000062e 	.word	0x2000062e
 8005788:	2000062d 	.word	0x2000062d
 800578c:	2000002e 	.word	0x2000002e
 8005790:	40000400 	.word	0x40000400
 8005794:	20000000 	.word	0x20000000

08005798 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005798:	b5b0      	push	{r4, r5, r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800579e:	1dfb      	adds	r3, r7, #7
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80057a4:	4be2      	ldr	r3, [pc, #904]	@ (8005b30 <ESP_Upkeep+0x398>)
 80057a6:	781a      	ldrb	r2, [r3, #0]
 80057a8:	4be2      	ldr	r3, [pc, #904]	@ (8005b34 <ESP_Upkeep+0x39c>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d024      	beq.n	80057fa <ESP_Upkeep+0x62>
 80057b0:	f00b f83e 	bl	8010830 <GetVerboseLevel>
 80057b4:	0003      	movs	r3, r0
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d11f      	bne.n	80057fa <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80057ba:	4bdd      	ldr	r3, [pc, #884]	@ (8005b30 <ESP_Upkeep+0x398>)
 80057bc:	781a      	ldrb	r2, [r3, #0]
 80057be:	4bdd      	ldr	r3, [pc, #884]	@ (8005b34 <ESP_Upkeep+0x39c>)
 80057c0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80057c2:	4bdc      	ldr	r3, [pc, #880]	@ (8005b34 <ESP_Upkeep+0x39c>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d103      	bne.n	80057d2 <ESP_Upkeep+0x3a>
 80057ca:	4bdb      	ldr	r3, [pc, #876]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b0e      	cmp	r3, #14
 80057d0:	d013      	beq.n	80057fa <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80057d2:	4bd8      	ldr	r3, [pc, #864]	@ (8005b34 <ESP_Upkeep+0x39c>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	001d      	movs	r5, r3
 80057d8:	4bd7      	ldr	r3, [pc, #860]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	0018      	movs	r0, r3
 80057de:	4bd7      	ldr	r3, [pc, #860]	@ (8005b3c <ESP_Upkeep+0x3a4>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	001c      	movs	r4, r3
 80057e4:	4bd6      	ldr	r3, [pc, #856]	@ (8005b40 <ESP_Upkeep+0x3a8>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	4ad6      	ldr	r2, [pc, #856]	@ (8005b44 <ESP_Upkeep+0x3ac>)
 80057ea:	49d7      	ldr	r1, [pc, #860]	@ (8005b48 <ESP_Upkeep+0x3b0>)
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	9401      	str	r4, [sp, #4]
 80057f0:	9000      	str	r0, [sp, #0]
 80057f2:	002b      	movs	r3, r5
 80057f4:	2003      	movs	r0, #3
 80057f6:	f00a ffa1 	bl	801073c <CreateLine>
    }
  }
  switch (EspState) {
 80057fa:	4bcd      	ldr	r3, [pc, #820]	@ (8005b30 <ESP_Upkeep+0x398>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b0f      	cmp	r3, #15
 8005800:	d901      	bls.n	8005806 <ESP_Upkeep+0x6e>
 8005802:	f000 fc32 	bl	800606a <ESP_Upkeep+0x8d2>
 8005806:	009a      	lsls	r2, r3, #2
 8005808:	4bd0      	ldr	r3, [pc, #832]	@ (8005b4c <ESP_Upkeep+0x3b4>)
 800580a:	18d3      	adds	r3, r2, r3
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005810:	4bc7      	ldr	r3, [pc, #796]	@ (8005b30 <ESP_Upkeep+0x398>)
 8005812:	2201      	movs	r2, #1
 8005814:	701a      	strb	r2, [r3, #0]
      break;
 8005816:	f000 fc41 	bl	800609c <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800581a:	f005 f8d3 	bl	800a9c4 <DisableConnectedDevices>
      SetESPIndicator();
 800581e:	f009 fe6f 	bl	800f500 <SetESPIndicator>
      if(!EspTurnedOn){
 8005822:	4bcb      	ldr	r3, [pc, #812]	@ (8005b50 <ESP_Upkeep+0x3b8>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2201      	movs	r2, #1
 8005828:	4053      	eors	r3, r2
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d036      	beq.n	800589e <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005830:	2380      	movs	r3, #128	@ 0x80
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	48c7      	ldr	r0, [pc, #796]	@ (8005b54 <ESP_Upkeep+0x3bc>)
 8005836:	2200      	movs	r2, #0
 8005838:	0019      	movs	r1, r3
 800583a:	f00c fe5c 	bl	80124f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800583e:	2001      	movs	r0, #1
 8005840:	f00b fbd2 	bl	8010fe8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005844:	2380      	movs	r3, #128	@ 0x80
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	48c2      	ldr	r0, [pc, #776]	@ (8005b54 <ESP_Upkeep+0x3bc>)
 800584a:	2201      	movs	r2, #1
 800584c:	0019      	movs	r1, r3
 800584e:	f00c fe52 	bl	80124f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005852:	2001      	movs	r0, #1
 8005854:	f00b fbc8 	bl	8010fe8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005858:	4bbf      	ldr	r3, [pc, #764]	@ (8005b58 <ESP_Upkeep+0x3c0>)
 800585a:	2200      	movs	r2, #0
 800585c:	2101      	movs	r1, #1
 800585e:	0018      	movs	r0, r3
 8005860:	f00c fe49 	bl	80124f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005864:	2001      	movs	r0, #1
 8005866:	f00b fbbf 	bl	8010fe8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800586a:	4bbb      	ldr	r3, [pc, #748]	@ (8005b58 <ESP_Upkeep+0x3c0>)
 800586c:	2201      	movs	r2, #1
 800586e:	2102      	movs	r1, #2
 8005870:	0018      	movs	r0, r3
 8005872:	f00c fe40 	bl	80124f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005876:	2001      	movs	r0, #1
 8005878:	f00b fbb6 	bl	8010fe8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800587c:	4bb6      	ldr	r3, [pc, #728]	@ (8005b58 <ESP_Upkeep+0x3c0>)
 800587e:	2201      	movs	r2, #1
 8005880:	2101      	movs	r1, #1
 8005882:	0018      	movs	r0, r3
 8005884:	f00c fe37 	bl	80124f6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005888:	f00b fba4 	bl	8010fd4 <HAL_GetTick>
 800588c:	0003      	movs	r3, r0
 800588e:	22af      	movs	r2, #175	@ 0xaf
 8005890:	0092      	lsls	r2, r2, #2
 8005892:	189a      	adds	r2, r3, r2
 8005894:	4bb1      	ldr	r3, [pc, #708]	@ (8005b5c <ESP_Upkeep+0x3c4>)
 8005896:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005898:	4bad      	ldr	r3, [pc, #692]	@ (8005b50 <ESP_Upkeep+0x3b8>)
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800589e:	2380      	movs	r3, #128	@ 0x80
 80058a0:	005a      	lsls	r2, r3, #1
 80058a2:	4baf      	ldr	r3, [pc, #700]	@ (8005b60 <ESP_Upkeep+0x3c8>)
 80058a4:	0011      	movs	r1, r2
 80058a6:	0018      	movs	r0, r3
 80058a8:	f7fe f8f2 	bl	8003a90 <ESP_Receive>
 80058ac:	1e03      	subs	r3, r0, #0
 80058ae:	d101      	bne.n	80058b4 <ESP_Upkeep+0x11c>
 80058b0:	f000 fbe7 	bl	8006082 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80058b4:	4b9e      	ldr	r3, [pc, #632]	@ (8005b30 <ESP_Upkeep+0x398>)
 80058b6:	220f      	movs	r2, #15
 80058b8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80058ba:	f00b fb8b 	bl	8010fd4 <HAL_GetTick>
 80058be:	0003      	movs	r3, r0
 80058c0:	22fa      	movs	r2, #250	@ 0xfa
 80058c2:	00d2      	lsls	r2, r2, #3
 80058c4:	189a      	adds	r2, r3, r2
 80058c6:	4ba7      	ldr	r3, [pc, #668]	@ (8005b64 <ESP_Upkeep+0x3cc>)
 80058c8:	601a      	str	r2, [r3, #0]
      }
      break;
 80058ca:	f000 fbda 	bl	8006082 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80058ce:	2001      	movs	r0, #1
 80058d0:	f7ff fb26 	bl	8004f20 <DMA_ProcessBuffer>
 80058d4:	0003      	movs	r3, r0
 80058d6:	001a      	movs	r2, r3
 80058d8:	4ba3      	ldr	r3, [pc, #652]	@ (8005b68 <ESP_Upkeep+0x3d0>)
 80058da:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80058dc:	4ba2      	ldr	r3, [pc, #648]	@ (8005b68 <ESP_Upkeep+0x3d0>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	1dbc      	adds	r4, r7, #6
 80058e2:	2101      	movs	r1, #1
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7ff fc1b 	bl	8005120 <ATCompare>
 80058ea:	0003      	movs	r3, r0
 80058ec:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80058ee:	1dbb      	adds	r3, r7, #6
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <ESP_Upkeep+0x170>
 80058f6:	4b9b      	ldr	r3, [pc, #620]	@ (8005b64 <ESP_Upkeep+0x3cc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f00a fec8 	bl	8010690 <TimestampIsReached>
 8005900:	1e03      	subs	r3, r0, #0
 8005902:	d101      	bne.n	8005908 <ESP_Upkeep+0x170>
 8005904:	f000 fbbf 	bl	8006086 <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 8005908:	4b89      	ldr	r3, [pc, #548]	@ (8005b30 <ESP_Upkeep+0x398>)
 800590a:	220b      	movs	r2, #11
 800590c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800590e:	f000 fbba 	bl	8006086 <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005912:	4b96      	ldr	r3, [pc, #600]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005914:	2209      	movs	r2, #9
 8005916:	2114      	movs	r1, #20
 8005918:	0018      	movs	r0, r3
 800591a:	f01d f86d 	bl	80229f8 <memset>
      if(!InitIsDone || WifiReset){
 800591e:	4b94      	ldr	r3, [pc, #592]	@ (8005b70 <ESP_Upkeep+0x3d8>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2201      	movs	r2, #1
 8005924:	4053      	eors	r3, r2
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <ESP_Upkeep+0x19c>
 800592c:	4b91      	ldr	r3, [pc, #580]	@ (8005b74 <ESP_Upkeep+0x3dc>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01a      	beq.n	800596a <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005934:	4b8d      	ldr	r3, [pc, #564]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005936:	4a90      	ldr	r2, [pc, #576]	@ (8005b78 <ESP_Upkeep+0x3e0>)
 8005938:	6811      	ldr	r1, [r2, #0]
 800593a:	6019      	str	r1, [r3, #0]
 800593c:	8891      	ldrh	r1, [r2, #4]
 800593e:	8099      	strh	r1, [r3, #4]
 8005940:	7992      	ldrb	r2, [r2, #6]
 8005942:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005944:	4b7a      	ldr	r3, [pc, #488]	@ (8005b30 <ESP_Upkeep+0x398>)
 8005946:	2204      	movs	r2, #4
 8005948:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800594a:	4b8c      	ldr	r3, [pc, #560]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005950:	4b7a      	ldr	r3, [pc, #488]	@ (8005b3c <ESP_Upkeep+0x3a4>)
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005956:	4b89      	ldr	r3, [pc, #548]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	001a      	movs	r2, r3
 800595c:	4b83      	ldr	r3, [pc, #524]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 800595e:	5c9a      	ldrb	r2, [r3, r2]
 8005960:	4b75      	ldr	r3, [pc, #468]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 8005962:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005964:	4b76      	ldr	r3, [pc, #472]	@ (8005b40 <ESP_Upkeep+0x3a8>)
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800596a:	4b81      	ldr	r3, [pc, #516]	@ (8005b70 <ESP_Upkeep+0x3d8>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01f      	beq.n	80059b2 <ESP_Upkeep+0x21a>
 8005972:	4b83      	ldr	r3, [pc, #524]	@ (8005b80 <ESP_Upkeep+0x3e8>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2201      	movs	r2, #1
 8005978:	4053      	eors	r3, r2
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d018      	beq.n	80059b2 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005980:	4b7a      	ldr	r3, [pc, #488]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005982:	4a80      	ldr	r2, [pc, #512]	@ (8005b84 <ESP_Upkeep+0x3ec>)
 8005984:	6811      	ldr	r1, [r2, #0]
 8005986:	6019      	str	r1, [r3, #0]
 8005988:	8892      	ldrh	r2, [r2, #4]
 800598a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800598c:	4b68      	ldr	r3, [pc, #416]	@ (8005b30 <ESP_Upkeep+0x398>)
 800598e:	2204      	movs	r2, #4
 8005990:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005992:	4b7a      	ldr	r3, [pc, #488]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005998:	4b68      	ldr	r3, [pc, #416]	@ (8005b3c <ESP_Upkeep+0x3a4>)
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800599e:	4b77      	ldr	r3, [pc, #476]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	001a      	movs	r2, r3
 80059a4:	4b71      	ldr	r3, [pc, #452]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 80059a6:	5c9a      	ldrb	r2, [r3, r2]
 80059a8:	4b63      	ldr	r3, [pc, #396]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 80059aa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059ac:	4b64      	ldr	r3, [pc, #400]	@ (8005b40 <ESP_Upkeep+0x3a8>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80059b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005b70 <ESP_Upkeep+0x3d8>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d021      	beq.n	80059fe <ESP_Upkeep+0x266>
 80059ba:	4b71      	ldr	r3, [pc, #452]	@ (8005b80 <ESP_Upkeep+0x3e8>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01d      	beq.n	80059fe <ESP_Upkeep+0x266>
 80059c2:	4b71      	ldr	r3, [pc, #452]	@ (8005b88 <ESP_Upkeep+0x3f0>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	4053      	eors	r3, r2
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d016      	beq.n	80059fe <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80059d0:	4b6e      	ldr	r3, [pc, #440]	@ (8005b8c <ESP_Upkeep+0x3f4>)
 80059d2:	881a      	ldrh	r2, [r3, #0]
 80059d4:	4b65      	ldr	r3, [pc, #404]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 80059d6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059d8:	4b55      	ldr	r3, [pc, #340]	@ (8005b30 <ESP_Upkeep+0x398>)
 80059da:	2204      	movs	r2, #4
 80059dc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059de:	4b67      	ldr	r3, [pc, #412]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80059e4:	4b55      	ldr	r3, [pc, #340]	@ (8005b3c <ESP_Upkeep+0x3a4>)
 80059e6:	2204      	movs	r2, #4
 80059e8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059ea:	4b64      	ldr	r3, [pc, #400]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	001a      	movs	r2, r3
 80059f0:	4b5e      	ldr	r3, [pc, #376]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 80059f2:	5c9a      	ldrb	r2, [r3, r2]
 80059f4:	4b50      	ldr	r3, [pc, #320]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 80059f6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059f8:	4b51      	ldr	r3, [pc, #324]	@ (8005b40 <ESP_Upkeep+0x3a8>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80059fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005b70 <ESP_Upkeep+0x3d8>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d02c      	beq.n	8005a60 <ESP_Upkeep+0x2c8>
 8005a06:	4b5e      	ldr	r3, [pc, #376]	@ (8005b80 <ESP_Upkeep+0x3e8>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d028      	beq.n	8005a60 <ESP_Upkeep+0x2c8>
 8005a0e:	4b5e      	ldr	r3, [pc, #376]	@ (8005b88 <ESP_Upkeep+0x3f0>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d024      	beq.n	8005a60 <ESP_Upkeep+0x2c8>
 8005a16:	4b5e      	ldr	r3, [pc, #376]	@ (8005b90 <ESP_Upkeep+0x3f8>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4053      	eors	r3, r2
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01d      	beq.n	8005a60 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005a24:	4b51      	ldr	r3, [pc, #324]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005a26:	4a5b      	ldr	r2, [pc, #364]	@ (8005b94 <ESP_Upkeep+0x3fc>)
 8005a28:	8811      	ldrh	r1, [r2, #0]
 8005a2a:	8019      	strh	r1, [r3, #0]
 8005a2c:	7892      	ldrb	r2, [r2, #2]
 8005a2e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005a30:	4b3f      	ldr	r3, [pc, #252]	@ (8005b30 <ESP_Upkeep+0x398>)
 8005a32:	2204      	movs	r2, #4
 8005a34:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a36:	4b51      	ldr	r3, [pc, #324]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b3c <ESP_Upkeep+0x3a4>)
 8005a3e:	2202      	movs	r2, #2
 8005a40:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005a42:	f00b fac7 	bl	8010fd4 <HAL_GetTick>
 8005a46:	0002      	movs	r2, r0
 8005a48:	4b53      	ldr	r3, [pc, #332]	@ (8005b98 <ESP_Upkeep+0x400>)
 8005a4a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	001a      	movs	r2, r3
 8005a52:	4b46      	ldr	r3, [pc, #280]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005a54:	5c9a      	ldrb	r2, [r3, r2]
 8005a56:	4b38      	ldr	r3, [pc, #224]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 8005a58:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a5a:	4b39      	ldr	r3, [pc, #228]	@ (8005b40 <ESP_Upkeep+0x3a8>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005a60:	4b43      	ldr	r3, [pc, #268]	@ (8005b70 <ESP_Upkeep+0x3d8>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d027      	beq.n	8005ab8 <ESP_Upkeep+0x320>
 8005a68:	4b45      	ldr	r3, [pc, #276]	@ (8005b80 <ESP_Upkeep+0x3e8>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d023      	beq.n	8005ab8 <ESP_Upkeep+0x320>
 8005a70:	4b45      	ldr	r3, [pc, #276]	@ (8005b88 <ESP_Upkeep+0x3f0>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01f      	beq.n	8005ab8 <ESP_Upkeep+0x320>
 8005a78:	4b45      	ldr	r3, [pc, #276]	@ (8005b90 <ESP_Upkeep+0x3f8>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01b      	beq.n	8005ab8 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005a80:	4b46      	ldr	r3, [pc, #280]	@ (8005b9c <ESP_Upkeep+0x404>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4b39      	ldr	r3, [pc, #228]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005a86:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005a88:	4b29      	ldr	r3, [pc, #164]	@ (8005b30 <ESP_Upkeep+0x398>)
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005a94:	4b29      	ldr	r3, [pc, #164]	@ (8005b3c <ESP_Upkeep+0x3a4>)
 8005a96:	2205      	movs	r2, #5
 8005a98:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005a9a:	f00b fa9b 	bl	8010fd4 <HAL_GetTick>
 8005a9e:	0002      	movs	r2, r0
 8005aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8005b98 <ESP_Upkeep+0x400>)
 8005aa2:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005aa4:	4b35      	ldr	r3, [pc, #212]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	001a      	movs	r2, r3
 8005aaa:	4b30      	ldr	r3, [pc, #192]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005aac:	5c9a      	ldrb	r2, [r3, r2]
 8005aae:	4b22      	ldr	r3, [pc, #136]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 8005ab0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005ab2:	4b23      	ldr	r3, [pc, #140]	@ (8005b40 <ESP_Upkeep+0x3a8>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005ab8:	4b39      	ldr	r3, [pc, #228]	@ (8005ba0 <ESP_Upkeep+0x408>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d100      	bne.n	8005ac2 <ESP_Upkeep+0x32a>
 8005ac0:	e2e3      	b.n	800608a <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005ac4:	4a37      	ldr	r2, [pc, #220]	@ (8005ba4 <ESP_Upkeep+0x40c>)
 8005ac6:	6811      	ldr	r1, [r2, #0]
 8005ac8:	6019      	str	r1, [r3, #0]
 8005aca:	7912      	ldrb	r2, [r2, #4]
 8005acc:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 8005ace:	4a36      	ldr	r2, [pc, #216]	@ (8005ba8 <ESP_Upkeep+0x410>)
 8005ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b48 <ESP_Upkeep+0x3b0>)
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	2003      	movs	r0, #3
 8005ad6:	f00a fe31 	bl	801073c <CreateLine>
        DisableConnectedDevices();
 8005ada:	f004 ff73 	bl	800a9c4 <DisableConnectedDevices>
        usblog = false;
 8005ade:	4b33      	ldr	r3, [pc, #204]	@ (8005bac <ESP_Upkeep+0x414>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005ae4:	4b12      	ldr	r3, [pc, #72]	@ (8005b30 <ESP_Upkeep+0x398>)
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005aea:	4b24      	ldr	r3, [pc, #144]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005af0:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <ESP_Upkeep+0x3a4>)
 8005af2:	2203      	movs	r2, #3
 8005af4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005af6:	4b21      	ldr	r3, [pc, #132]	@ (8005b7c <ESP_Upkeep+0x3e4>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	001a      	movs	r2, r3
 8005afc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <ESP_Upkeep+0x3d4>)
 8005afe:	5c9a      	ldrb	r2, [r3, r2]
 8005b00:	4b0d      	ldr	r3, [pc, #52]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 8005b02:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005b04:	4b0e      	ldr	r3, [pc, #56]	@ (8005b40 <ESP_Upkeep+0x3a8>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005b0a:	e2be      	b.n	800608a <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <ESP_Upkeep+0x3a0>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	1dfc      	adds	r4, r7, #7
 8005b12:	0018      	movs	r0, r3
 8005b14:	f7ff fb46 	bl	80051a4 <AT_Send>
 8005b18:	0003      	movs	r3, r0
 8005b1a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005b1c:	1dfb      	adds	r3, r7, #7
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d100      	bne.n	8005b26 <ESP_Upkeep+0x38e>
 8005b24:	e2b3      	b.n	800608e <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005b26:	4b02      	ldr	r3, [pc, #8]	@ (8005b30 <ESP_Upkeep+0x398>)
 8005b28:	2203      	movs	r2, #3
 8005b2a:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005b2c:	e2af      	b.n	800608e <ESP_Upkeep+0x8f6>
 8005b2e:	46c0      	nop			@ (mov r8, r8)
 8005b30:	2000002c 	.word	0x2000002c
 8005b34:	20000002 	.word	0x20000002
 8005b38:	2000062e 	.word	0x2000062e
 8005b3c:	2000062f 	.word	0x2000062f
 8005b40:	2000062d 	.word	0x2000062d
 8005b44:	0802657c 	.word	0x0802657c
 8005b48:	08025970 	.word	0x08025970
 8005b4c:	08028ac8 	.word	0x08028ac8
 8005b50:	20000558 	.word	0x20000558
 8005b54:	50000800 	.word	0x50000800
 8005b58:	50001c00 	.word	0x50001c00
 8005b5c:	20000624 	.word	0x20000624
 8005b60:	20000458 	.word	0x20000458
 8005b64:	20000788 	.word	0x20000788
 8005b68:	2000002f 	.word	0x2000002f
 8005b6c:	20000614 	.word	0x20000614
 8005b70:	20000559 	.word	0x20000559
 8005b74:	2000055a 	.word	0x2000055a
 8005b78:	20000004 	.word	0x20000004
 8005b7c:	2000061e 	.word	0x2000061e
 8005b80:	2000055c 	.word	0x2000055c
 8005b84:	20000014 	.word	0x20000014
 8005b88:	2000055d 	.word	0x2000055d
 8005b8c:	20000010 	.word	0x20000010
 8005b90:	20000001 	.word	0x20000001
 8005b94:	2000000c 	.word	0x2000000c
 8005b98:	20000570 	.word	0x20000570
 8005b9c:	20000024 	.word	0x20000024
 8005ba0:	2000055b 	.word	0x2000055b
 8005ba4:	2000001c 	.word	0x2000001c
 8005ba8:	080265a8 	.word	0x080265a8
 8005bac:	20000203 	.word	0x20000203

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005bb0:	4bc9      	ldr	r3, [pc, #804]	@ (8005ed8 <ESP_Upkeep+0x740>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <ESP_Upkeep+0x430>
 8005bb8:	4bc8      	ldr	r3, [pc, #800]	@ (8005edc <ESP_Upkeep+0x744>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d003      	beq.n	8005bc8 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005bc0:	4bc7      	ldr	r3, [pc, #796]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005bc2:	220b      	movs	r2, #11
 8005bc4:	701a      	strb	r2, [r3, #0]
        break;
 8005bc6:	e269      	b.n	800609c <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005bc8:	4bc6      	ldr	r3, [pc, #792]	@ (8005ee4 <ESP_Upkeep+0x74c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f00a fd5f 	bl	8010690 <TimestampIsReached>
 8005bd2:	1e03      	subs	r3, r0, #0
 8005bd4:	d100      	bne.n	8005bd8 <ESP_Upkeep+0x440>
 8005bd6:	e25c      	b.n	8006092 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005bd8:	4bc3      	ldr	r3, [pc, #780]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f7ff f99f 	bl	8004f20 <DMA_ProcessBuffer>
 8005be2:	0003      	movs	r3, r0
 8005be4:	001a      	movs	r2, r3
 8005be6:	4bc1      	ldr	r3, [pc, #772]	@ (8005eec <ESP_Upkeep+0x754>)
 8005be8:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005bea:	4bc0      	ldr	r3, [pc, #768]	@ (8005eec <ESP_Upkeep+0x754>)
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	4bbe      	ldr	r3, [pc, #760]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	1d7c      	adds	r4, r7, #5
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	0010      	movs	r0, r2
 8005bf8:	f7ff fa92 	bl	8005120 <ATCompare>
 8005bfc:	0003      	movs	r3, r0
 8005bfe:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005c00:	4bba      	ldr	r3, [pc, #744]	@ (8005eec <ESP_Upkeep+0x754>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d138      	bne.n	8005c7a <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005c08:	4bb9      	ldr	r3, [pc, #740]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b0f      	cmp	r3, #15
 8005c0e:	d108      	bne.n	8005c22 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005c10:	4bb7      	ldr	r3, [pc, #732]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005c12:	220e      	movs	r2, #14
 8005c14:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c16:	4bb4      	ldr	r3, [pc, #720]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005c18:	2202      	movs	r2, #2
 8005c1a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005c1c:	4bb5      	ldr	r3, [pc, #724]	@ (8005ef4 <ESP_Upkeep+0x75c>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005c22:	4baf      	ldr	r3, [pc, #700]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005c24:	2204      	movs	r2, #4
 8005c26:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005c28:	4bb3      	ldr	r3, [pc, #716]	@ (8005ef8 <ESP_Upkeep+0x760>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	4bb1      	ldr	r3, [pc, #708]	@ (8005ef8 <ESP_Upkeep+0x760>)
 8005c32:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005c34:	4bb0      	ldr	r3, [pc, #704]	@ (8005ef8 <ESP_Upkeep+0x760>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d91e      	bls.n	8005c7a <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005c3c:	f00b f9ca 	bl	8010fd4 <HAL_GetTick>
 8005c40:	0003      	movs	r3, r0
 8005c42:	4aae      	ldr	r2, [pc, #696]	@ (8005efc <ESP_Upkeep+0x764>)
 8005c44:	189a      	adds	r2, r3, r2
 8005c46:	4ba7      	ldr	r3, [pc, #668]	@ (8005ee4 <ESP_Upkeep+0x74c>)
 8005c48:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005c4a:	4bad      	ldr	r3, [pc, #692]	@ (8005f00 <ESP_Upkeep+0x768>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005c50:	f7ff fa58 	bl	8005104 <clearDMABuffer>
            stop = HAL_GetTick();
 8005c54:	f00b f9be 	bl	8010fd4 <HAL_GetTick>
 8005c58:	0002      	movs	r2, r0
 8005c5a:	4baa      	ldr	r3, [pc, #680]	@ (8005f04 <ESP_Upkeep+0x76c>)
 8005c5c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005c5e:	4ba9      	ldr	r3, [pc, #676]	@ (8005f04 <ESP_Upkeep+0x76c>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4ba9      	ldr	r3, [pc, #676]	@ (8005f08 <ESP_Upkeep+0x770>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	4aa8      	ldr	r2, [pc, #672]	@ (8005f0c <ESP_Upkeep+0x774>)
 8005c6a:	49a9      	ldr	r1, [pc, #676]	@ (8005f10 <ESP_Upkeep+0x778>)
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	f00a fd65 	bl	801073c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005c72:	4b9b      	ldr	r3, [pc, #620]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005c74:	220d      	movs	r2, #13
 8005c76:	701a      	strb	r2, [r3, #0]
            break;
 8005c78:	e210      	b.n	800609c <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8005eec <ESP_Upkeep+0x754>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d106      	bne.n	8005c90 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005c82:	f00b f9a7 	bl	8010fd4 <HAL_GetTick>
 8005c86:	0003      	movs	r3, r0
 8005c88:	330a      	adds	r3, #10
 8005c8a:	001a      	movs	r2, r3
 8005c8c:	4b95      	ldr	r3, [pc, #596]	@ (8005ee4 <ESP_Upkeep+0x74c>)
 8005c8e:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005c90:	4b96      	ldr	r3, [pc, #600]	@ (8005eec <ESP_Upkeep+0x754>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b0a      	cmp	r3, #10
 8005c96:	d106      	bne.n	8005ca6 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005c98:	f00b f99c 	bl	8010fd4 <HAL_GetTick>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	330a      	adds	r3, #10
 8005ca0:	001a      	movs	r2, r3
 8005ca2:	4b90      	ldr	r3, [pc, #576]	@ (8005ee4 <ESP_Upkeep+0x74c>)
 8005ca4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005ca6:	4b91      	ldr	r3, [pc, #580]	@ (8005eec <ESP_Upkeep+0x754>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b06      	cmp	r3, #6
 8005cac:	d14b      	bne.n	8005d46 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005cae:	4b99      	ldr	r3, [pc, #612]	@ (8005f14 <ESP_Upkeep+0x77c>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	4b97      	ldr	r3, [pc, #604]	@ (8005f14 <ESP_Upkeep+0x77c>)
 8005cb8:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005cba:	4a97      	ldr	r2, [pc, #604]	@ (8005f18 <ESP_Upkeep+0x780>)
 8005cbc:	4b94      	ldr	r3, [pc, #592]	@ (8005f10 <ESP_Upkeep+0x778>)
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	f00a fd3b 	bl	801073c <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005cc6:	4b93      	ldr	r3, [pc, #588]	@ (8005f14 <ESP_Upkeep+0x77c>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d924      	bls.n	8005d18 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005cce:	f00b f981 	bl	8010fd4 <HAL_GetTick>
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	4a91      	ldr	r2, [pc, #580]	@ (8005f1c <ESP_Upkeep+0x784>)
 8005cd6:	189a      	adds	r2, r3, r2
 8005cd8:	4b82      	ldr	r3, [pc, #520]	@ (8005ee4 <ESP_Upkeep+0x74c>)
 8005cda:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005cdc:	4b88      	ldr	r3, [pc, #544]	@ (8005f00 <ESP_Upkeep+0x768>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005ce2:	f7ff fa0f 	bl	8005104 <clearDMABuffer>
            stop = HAL_GetTick();
 8005ce6:	f00b f975 	bl	8010fd4 <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	4b85      	ldr	r3, [pc, #532]	@ (8005f04 <ESP_Upkeep+0x76c>)
 8005cee:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005cf0:	4b84      	ldr	r3, [pc, #528]	@ (8005f04 <ESP_Upkeep+0x76c>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4b84      	ldr	r3, [pc, #528]	@ (8005f08 <ESP_Upkeep+0x770>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	4a89      	ldr	r2, [pc, #548]	@ (8005f20 <ESP_Upkeep+0x788>)
 8005cfc:	4984      	ldr	r1, [pc, #528]	@ (8005f10 <ESP_Upkeep+0x778>)
 8005cfe:	2001      	movs	r0, #1
 8005d00:	f00a fd1c 	bl	801073c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d04:	4b76      	ldr	r3, [pc, #472]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005d06:	220d      	movs	r2, #13
 8005d08:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005d0a:	4b79      	ldr	r3, [pc, #484]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005d0c:	2214      	movs	r2, #20
 8005d0e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005d10:	4b75      	ldr	r3, [pc, #468]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
            break;
 8005d16:	e1c1      	b.n	800609c <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005d18:	4b75      	ldr	r3, [pc, #468]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b0f      	cmp	r3, #15
 8005d1e:	d003      	beq.n	8005d28 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005d20:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005d22:	2204      	movs	r2, #4
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e00e      	b.n	8005d46 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005d28:	4b71      	ldr	r3, [pc, #452]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005d2a:	220e      	movs	r2, #14
 8005d2c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005d2e:	4b71      	ldr	r3, [pc, #452]	@ (8005ef4 <ESP_Upkeep+0x75c>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef4 <ESP_Upkeep+0x75c>)
 8005d38:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005d40:	4b67      	ldr	r3, [pc, #412]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005d42:	2204      	movs	r2, #4
 8005d44:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005d46:	1d7b      	adds	r3, r7, #5
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d100      	bne.n	8005d50 <ESP_Upkeep+0x5b8>
 8005d4e:	e1a0      	b.n	8006092 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005d50:	4b63      	ldr	r3, [pc, #396]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005d52:	2205      	movs	r2, #5
 8005d54:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005d56:	e19c      	b.n	8006092 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005d58:	4b66      	ldr	r3, [pc, #408]	@ (8005ef4 <ESP_Upkeep+0x75c>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	4b64      	ldr	r3, [pc, #400]	@ (8005ef4 <ESP_Upkeep+0x75c>)
 8005d62:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005d64:	4b63      	ldr	r3, [pc, #396]	@ (8005ef4 <ESP_Upkeep+0x75c>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	001a      	movs	r2, r3
 8005d6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005f24 <ESP_Upkeep+0x78c>)
 8005d6c:	5c9a      	ldrb	r2, [r3, r2]
 8005d6e:	4b60      	ldr	r3, [pc, #384]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005d70:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005d72:	4b5f      	ldr	r3, [pc, #380]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d102      	bne.n	8005d80 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005d80:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b0e      	cmp	r3, #14
 8005d86:	d102      	bne.n	8005d8e <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005d88:	4b57      	ldr	r3, [pc, #348]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005d8e:	4b58      	ldr	r3, [pc, #352]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b0e      	cmp	r3, #14
 8005d94:	d006      	beq.n	8005da4 <ESP_Upkeep+0x60c>
 8005d96:	4b56      	ldr	r3, [pc, #344]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d002      	beq.n	8005da4 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005d9e:	4b52      	ldr	r3, [pc, #328]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005da4:	4b52      	ldr	r3, [pc, #328]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b11      	cmp	r3, #17
 8005daa:	d102      	bne.n	8005db2 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005dac:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee8 <ESP_Upkeep+0x750>)
 8005dae:	2205      	movs	r2, #5
 8005db0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005db2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005db4:	2204      	movs	r2, #4
 8005db6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005db8:	4b4d      	ldr	r3, [pc, #308]	@ (8005ef0 <ESP_Upkeep+0x758>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b14      	cmp	r3, #20
 8005dbe:	d000      	beq.n	8005dc2 <ESP_Upkeep+0x62a>
 8005dc0:	e169      	b.n	8006096 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005dc2:	4b46      	ldr	r3, [pc, #280]	@ (8005edc <ESP_Upkeep+0x744>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d124      	bne.n	8005e14 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005dca:	f00b f903 	bl	8010fd4 <HAL_GetTick>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8005efc <ESP_Upkeep+0x764>)
 8005dd2:	189a      	adds	r2, r3, r2
 8005dd4:	4b43      	ldr	r3, [pc, #268]	@ (8005ee4 <ESP_Upkeep+0x74c>)
 8005dd6:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005dd8:	f7ff f994 	bl	8005104 <clearDMABuffer>
          stop = HAL_GetTick();
 8005ddc:	f00b f8fa 	bl	8010fd4 <HAL_GetTick>
 8005de0:	0002      	movs	r2, r0
 8005de2:	4b48      	ldr	r3, [pc, #288]	@ (8005f04 <ESP_Upkeep+0x76c>)
 8005de4:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005de6:	4b47      	ldr	r3, [pc, #284]	@ (8005f04 <ESP_Upkeep+0x76c>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b47      	ldr	r3, [pc, #284]	@ (8005f08 <ESP_Upkeep+0x770>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	4a4d      	ldr	r2, [pc, #308]	@ (8005f28 <ESP_Upkeep+0x790>)
 8005df2:	494e      	ldr	r1, [pc, #312]	@ (8005f2c <ESP_Upkeep+0x794>)
 8005df4:	2002      	movs	r0, #2
 8005df6:	f00a fca1 	bl	801073c <CreateLine>
          ResetdBAmax();
 8005dfa:	f004 fe59 	bl	800aab0 <ResetdBAmax>
          resetMaxMeasurementValues();
 8005dfe:	f7fd fda1 	bl	8003944 <resetMaxMeasurementValues>
          showTime();
 8005e02:	f001 f907 	bl	8007014 <showTime>
          ESPTransmitDone = true;
 8005e06:	4b3e      	ldr	r3, [pc, #248]	@ (8005f00 <ESP_Upkeep+0x768>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005e0c:	4b34      	ldr	r3, [pc, #208]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005e0e:	220d      	movs	r2, #13
 8005e10:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005e12:	e140      	b.n	8006096 <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005e14:	4b31      	ldr	r3, [pc, #196]	@ (8005edc <ESP_Upkeep+0x744>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b05      	cmp	r3, #5
 8005e1a:	d12c      	bne.n	8005e76 <ESP_Upkeep+0x6de>
            setTime = false;
 8005e1c:	4b44      	ldr	r3, [pc, #272]	@ (8005f30 <ESP_Upkeep+0x798>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005e22:	f00b f8d7 	bl	8010fd4 <HAL_GetTick>
 8005e26:	0003      	movs	r3, r0
 8005e28:	4a42      	ldr	r2, [pc, #264]	@ (8005f34 <ESP_Upkeep+0x79c>)
 8005e2a:	189a      	adds	r2, r3, r2
 8005e2c:	4b42      	ldr	r3, [pc, #264]	@ (8005f38 <ESP_Upkeep+0x7a0>)
 8005e2e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005e30:	4b41      	ldr	r3, [pc, #260]	@ (8005f38 <ESP_Upkeep+0x7a0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a41      	ldr	r2, [pc, #260]	@ (8005f3c <ESP_Upkeep+0x7a4>)
 8005e36:	493d      	ldr	r1, [pc, #244]	@ (8005f2c <ESP_Upkeep+0x794>)
 8005e38:	2002      	movs	r0, #2
 8005e3a:	f00a fc7f 	bl	801073c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005e3e:	4b40      	ldr	r3, [pc, #256]	@ (8005f40 <ESP_Upkeep+0x7a8>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b28      	ldr	r3, [pc, #160]	@ (8005ee4 <ESP_Upkeep+0x74c>)
 8005e44:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005e46:	f7ff f95d 	bl	8005104 <clearDMABuffer>
            stop = HAL_GetTick();
 8005e4a:	f00b f8c3 	bl	8010fd4 <HAL_GetTick>
 8005e4e:	0002      	movs	r2, r0
 8005e50:	4b2c      	ldr	r3, [pc, #176]	@ (8005f04 <ESP_Upkeep+0x76c>)
 8005e52:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005e54:	4b2b      	ldr	r3, [pc, #172]	@ (8005f04 <ESP_Upkeep+0x76c>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	4b2b      	ldr	r3, [pc, #172]	@ (8005f08 <ESP_Upkeep+0x770>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	4a39      	ldr	r2, [pc, #228]	@ (8005f44 <ESP_Upkeep+0x7ac>)
 8005e60:	4932      	ldr	r1, [pc, #200]	@ (8005f2c <ESP_Upkeep+0x794>)
 8005e62:	2002      	movs	r0, #2
 8005e64:	f00a fc6a 	bl	801073c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005e68:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005e6a:	220d      	movs	r2, #13
 8005e6c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8005edc <ESP_Upkeep+0x744>)
 8005e70:	2202      	movs	r2, #2
 8005e72:	701a      	strb	r2, [r3, #0]
    break;
 8005e74:	e10f      	b.n	8006096 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005e76:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005e78:	2209      	movs	r2, #9
 8005e7a:	701a      	strb	r2, [r3, #0]
    break;
 8005e7c:	e10b      	b.n	8006096 <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005e7e:	4b32      	ldr	r3, [pc, #200]	@ (8005f48 <ESP_Upkeep+0x7b0>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005e84:	4b31      	ldr	r3, [pc, #196]	@ (8005f4c <ESP_Upkeep+0x7b4>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	2101      	movs	r1, #1
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f00c fb33 	bl	80124f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005e90:	2001      	movs	r0, #1
 8005e92:	f00b f8a9 	bl	8010fe8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005e96:	2380      	movs	r3, #128	@ 0x80
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	482d      	ldr	r0, [pc, #180]	@ (8005f50 <ESP_Upkeep+0x7b8>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	f00c fb29 	bl	80124f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	f00b f89f 	bl	8010fe8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005eaa:	4b28      	ldr	r3, [pc, #160]	@ (8005f4c <ESP_Upkeep+0x7b4>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	2102      	movs	r1, #2
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f00c fb20 	bl	80124f6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee0 <ESP_Upkeep+0x748>)
 8005eb8:	2209      	movs	r2, #9
 8005eba:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005ebc:	f004 fd4a 	bl	800a954 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f00b f891 	bl	8010fe8 <HAL_Delay>
      ResetESPIndicator();
 8005ec6:	f009 fb33 	bl	800f530 <ResetESPIndicator>
      errorcntr = 0;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <ESP_Upkeep+0x760>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005ed0:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <ESP_Upkeep+0x77c>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]
      break;
 8005ed6:	e0e1      	b.n	800609c <ESP_Upkeep+0x904>
 8005ed8:	2000055b 	.word	0x2000055b
 8005edc:	2000062f 	.word	0x2000062f
 8005ee0:	2000002c 	.word	0x2000002c
 8005ee4:	20000624 	.word	0x20000624
 8005ee8:	2000062d 	.word	0x2000062d
 8005eec:	2000002f 	.word	0x2000002f
 8005ef0:	2000062e 	.word	0x2000062e
 8005ef4:	2000061e 	.word	0x2000061e
 8005ef8:	2000061f 	.word	0x2000061f
 8005efc:	0003a980 	.word	0x0003a980
 8005f00:	20000560 	.word	0x20000560
 8005f04:	20000574 	.word	0x20000574
 8005f08:	20000570 	.word	0x20000570
 8005f0c:	080265d8 	.word	0x080265d8
 8005f10:	08025994 	.word	0x08025994
 8005f14:	20000620 	.word	0x20000620
 8005f18:	0802660c 	.word	0x0802660c
 8005f1c:	0000c350 	.word	0x0000c350
 8005f20:	08026648 	.word	0x08026648
 8005f24:	20000614 	.word	0x20000614
 8005f28:	08026678 	.word	0x08026678
 8005f2c:	08026690 	.word	0x08026690
 8005f30:	20000001 	.word	0x20000001
 8005f34:	047e7c4f 	.word	0x047e7c4f
 8005f38:	20000628 	.word	0x20000628
 8005f3c:	08026694 	.word	0x08026694
 8005f40:	20000028 	.word	0x20000028
 8005f44:	080266d8 	.word	0x080266d8
 8005f48:	20000558 	.word	0x20000558
 8005f4c:	50001c00 	.word	0x50001c00
 8005f50:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005f54:	4b54      	ldr	r3, [pc, #336]	@ (80060a8 <ESP_Upkeep+0x910>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f00a fb99 	bl	8010690 <TimestampIsReached>
 8005f5e:	1e03      	subs	r3, r0, #0
 8005f60:	d103      	bne.n	8005f6a <ESP_Upkeep+0x7d2>
 8005f62:	4b52      	ldr	r3, [pc, #328]	@ (80060ac <ESP_Upkeep+0x914>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d043      	beq.n	8005ff2 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005f6a:	4b51      	ldr	r3, [pc, #324]	@ (80060b0 <ESP_Upkeep+0x918>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005f70:	4b50      	ldr	r3, [pc, #320]	@ (80060b4 <ESP_Upkeep+0x91c>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d105      	bne.n	8005f84 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005f78:	4b4f      	ldr	r3, [pc, #316]	@ (80060b8 <ESP_Upkeep+0x920>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005f7e:	4b4f      	ldr	r3, [pc, #316]	@ (80060bc <ESP_Upkeep+0x924>)
 8005f80:	220b      	movs	r2, #11
 8005f82:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005f84:	4b4b      	ldr	r3, [pc, #300]	@ (80060b4 <ESP_Upkeep+0x91c>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d108      	bne.n	8005f9e <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80060c0 <ESP_Upkeep+0x928>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005f92:	4b4c      	ldr	r3, [pc, #304]	@ (80060c4 <ESP_Upkeep+0x92c>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005f98:	4b48      	ldr	r3, [pc, #288]	@ (80060bc <ESP_Upkeep+0x924>)
 8005f9a:	220b      	movs	r2, #11
 8005f9c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005f9e:	4b45      	ldr	r3, [pc, #276]	@ (80060b4 <ESP_Upkeep+0x91c>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d102      	bne.n	8005fac <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005fa6:	4b45      	ldr	r3, [pc, #276]	@ (80060bc <ESP_Upkeep+0x924>)
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005fac:	4b41      	ldr	r3, [pc, #260]	@ (80060b4 <ESP_Upkeep+0x91c>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d108      	bne.n	8005fc6 <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005fb4:	4b41      	ldr	r3, [pc, #260]	@ (80060bc <ESP_Upkeep+0x924>)
 8005fb6:	220e      	movs	r2, #14
 8005fb8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005fba:	4a43      	ldr	r2, [pc, #268]	@ (80060c8 <ESP_Upkeep+0x930>)
 8005fbc:	4b43      	ldr	r3, [pc, #268]	@ (80060cc <ESP_Upkeep+0x934>)
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	2002      	movs	r0, #2
 8005fc2:	f00a fbbb 	bl	801073c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80060b4 <ESP_Upkeep+0x91c>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d105      	bne.n	8005fda <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005fce:	4b3b      	ldr	r3, [pc, #236]	@ (80060bc <ESP_Upkeep+0x924>)
 8005fd0:	220b      	movs	r2, #11
 8005fd2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80060d0 <ESP_Upkeep+0x938>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005fda:	4b34      	ldr	r3, [pc, #208]	@ (80060ac <ESP_Upkeep+0x914>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d020      	beq.n	8006024 <ESP_Upkeep+0x88c>
 8005fe2:	4b34      	ldr	r3, [pc, #208]	@ (80060b4 <ESP_Upkeep+0x91c>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d01c      	beq.n	8006024 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005fea:	4b34      	ldr	r3, [pc, #208]	@ (80060bc <ESP_Upkeep+0x924>)
 8005fec:	2202      	movs	r2, #2
 8005fee:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ff0:	e018      	b.n	8006024 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005ff2:	4b38      	ldr	r3, [pc, #224]	@ (80060d4 <ESP_Upkeep+0x93c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f00a fb4a 	bl	8010690 <TimestampIsReached>
 8005ffc:	1e03      	subs	r3, r0, #0
 8005ffe:	d04c      	beq.n	800609a <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8006000:	4b2c      	ldr	r3, [pc, #176]	@ (80060b4 <ESP_Upkeep+0x91c>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d148      	bne.n	800609a <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8006008:	4b2a      	ldr	r3, [pc, #168]	@ (80060b4 <ESP_Upkeep+0x91c>)
 800600a:	2205      	movs	r2, #5
 800600c:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 800600e:	4b2b      	ldr	r3, [pc, #172]	@ (80060bc <ESP_Upkeep+0x924>)
 8006010:	2202      	movs	r2, #2
 8006012:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8006014:	4b24      	ldr	r3, [pc, #144]	@ (80060a8 <ESP_Upkeep+0x910>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b2f      	ldr	r3, [pc, #188]	@ (80060d8 <ESP_Upkeep+0x940>)
 800601a:	601a      	str	r2, [r3, #0]
           setTime = true;
 800601c:	4b2f      	ldr	r3, [pc, #188]	@ (80060dc <ESP_Upkeep+0x944>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006022:	e03a      	b.n	800609a <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006024:	46c0      	nop			@ (mov r8, r8)
      break;
 8006026:	e038      	b.n	800609a <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8006028:	4b2d      	ldr	r3, [pc, #180]	@ (80060e0 <ESP_Upkeep+0x948>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2201      	movs	r2, #1
 800602e:	4053      	eors	r3, r2
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8006036:	4a24      	ldr	r2, [pc, #144]	@ (80060c8 <ESP_Upkeep+0x930>)
 8006038:	4b24      	ldr	r3, [pc, #144]	@ (80060cc <ESP_Upkeep+0x934>)
 800603a:	0019      	movs	r1, r3
 800603c:	2002      	movs	r0, #2
 800603e:	f00a fb7d 	bl	801073c <CreateLine>
        msgdone = true;
 8006042:	4b27      	ldr	r3, [pc, #156]	@ (80060e0 <ESP_Upkeep+0x948>)
 8006044:	2201      	movs	r2, #1
 8006046:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8006048:	f019 fa9c 	bl	801f584 <GetUsbRxPointer>
 800604c:	0003      	movs	r3, r0
 800604e:	0018      	movs	r0, r3
 8006050:	f000 f94a 	bl	80062e8 <Process_PC_Config>
      break;
 8006054:	e022      	b.n	800609c <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8006056:	4a23      	ldr	r2, [pc, #140]	@ (80060e4 <ESP_Upkeep+0x94c>)
 8006058:	4b23      	ldr	r3, [pc, #140]	@ (80060e8 <ESP_Upkeep+0x950>)
 800605a:	0019      	movs	r1, r3
 800605c:	2001      	movs	r0, #1
 800605e:	f00a fb6d 	bl	801073c <CreateLine>
      EspState = ESP_STATE_INIT;
 8006062:	4b16      	ldr	r3, [pc, #88]	@ (80060bc <ESP_Upkeep+0x924>)
 8006064:	2202      	movs	r2, #2
 8006066:	701a      	strb	r2, [r3, #0]
      break;
 8006068:	e018      	b.n	800609c <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 800606a:	4a20      	ldr	r2, [pc, #128]	@ (80060ec <ESP_Upkeep+0x954>)
 800606c:	4b1e      	ldr	r3, [pc, #120]	@ (80060e8 <ESP_Upkeep+0x950>)
 800606e:	0019      	movs	r1, r3
 8006070:	2001      	movs	r0, #1
 8006072:	f00a fb63 	bl	801073c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8006076:	4b11      	ldr	r3, [pc, #68]	@ (80060bc <ESP_Upkeep+0x924>)
 8006078:	2207      	movs	r2, #7
 800607a:	701a      	strb	r2, [r3, #0]
      break;
 800607c:	e00e      	b.n	800609c <ESP_Upkeep+0x904>
      break;
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	e00c      	b.n	800609c <ESP_Upkeep+0x904>
      break;
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	e00a      	b.n	800609c <ESP_Upkeep+0x904>
        break;
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	e008      	b.n	800609c <ESP_Upkeep+0x904>
    break;
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	e006      	b.n	800609c <ESP_Upkeep+0x904>
    break;
 800608e:	46c0      	nop			@ (mov r8, r8)
 8006090:	e004      	b.n	800609c <ESP_Upkeep+0x904>
      break;
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	e002      	b.n	800609c <ESP_Upkeep+0x904>
    break;
 8006096:	46c0      	nop			@ (mov r8, r8)
 8006098:	e000      	b.n	800609c <ESP_Upkeep+0x904>
      break;
 800609a:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 800609c:	4b07      	ldr	r3, [pc, #28]	@ (80060bc <ESP_Upkeep+0x924>)
 800609e:	781b      	ldrb	r3, [r3, #0]
}
 80060a0:	0018      	movs	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b002      	add	sp, #8
 80060a6:	bdb0      	pop	{r4, r5, r7, pc}
 80060a8:	20000624 	.word	0x20000624
 80060ac:	2000055b 	.word	0x2000055b
 80060b0:	20000560 	.word	0x20000560
 80060b4:	2000062f 	.word	0x2000062f
 80060b8:	20000559 	.word	0x20000559
 80060bc:	2000002c 	.word	0x2000002c
 80060c0:	2000055c 	.word	0x2000055c
 80060c4:	2000055e 	.word	0x2000055e
 80060c8:	080266f8 	.word	0x080266f8
 80060cc:	08026690 	.word	0x08026690
 80060d0:	2000055d 	.word	0x2000055d
 80060d4:	20000628 	.word	0x20000628
 80060d8:	20000028 	.word	0x20000028
 80060dc:	20000001 	.word	0x20000001
 80060e0:	2000055f 	.word	0x2000055f
 80060e4:	08026710 	.word	0x08026710
 80060e8:	08025994 	.word	0x08025994
 80060ec:	08026724 	.word	0x08026724

080060f0 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80060f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006138 <I2CSensors_Init+0x48>)
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 80060fe:	4a0f      	ldr	r2, [pc, #60]	@ (800613c <I2CSensors_Init+0x4c>)
 8006100:	4b0f      	ldr	r3, [pc, #60]	@ (8006140 <I2CSensors_Init+0x50>)
 8006102:	0011      	movs	r1, r2
 8006104:	0018      	movs	r0, r3
 8006106:	f00a fc7d 	bl	8010a04 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 800610a:	4a0c      	ldr	r2, [pc, #48]	@ (800613c <I2CSensors_Init+0x4c>)
 800610c:	4b0c      	ldr	r3, [pc, #48]	@ (8006140 <I2CSensors_Init+0x50>)
 800610e:	0011      	movs	r1, r2
 8006110:	0018      	movs	r0, r3
 8006112:	f007 fbe5 	bl	800d8e0 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C);
 8006116:	4a09      	ldr	r2, [pc, #36]	@ (800613c <I2CSensors_Init+0x4c>)
 8006118:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <I2CSensors_Init+0x50>)
 800611a:	0011      	movs	r1, r2
 800611c:	0018      	movs	r0, r3
 800611e:	f001 fed1 	bl	8007ec4 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8006122:	4a08      	ldr	r2, [pc, #32]	@ (8006144 <I2CSensors_Init+0x54>)
 8006124:	4b08      	ldr	r3, [pc, #32]	@ (8006148 <I2CSensors_Init+0x58>)
 8006126:	0011      	movs	r1, r2
 8006128:	0018      	movs	r0, r3
 800612a:	f002 fc1d 	bl	8008968 <BMP_Init>
}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	46bd      	mov	sp, r7
 8006132:	b002      	add	sp, #8
 8006134:	bd80      	pop	{r7, pc}
 8006136:	46c0      	nop			@ (mov r8, r8)
 8006138:	2000078c 	.word	0x2000078c
 800613c:	080061a1 	.word	0x080061a1
 8006140:	0800614d 	.word	0x0800614d
 8006144:	08006271 	.word	0x08006271
 8006148:	080061f5 	.word	0x080061f5

0800614c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800614c:	b5b0      	push	{r4, r5, r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6039      	str	r1, [r7, #0]
 8006154:	0011      	movs	r1, r2
 8006156:	1dfb      	adds	r3, r7, #7
 8006158:	1c02      	adds	r2, r0, #0
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	1dbb      	adds	r3, r7, #6
 800615e:	1c0a      	adds	r2, r1, #0
 8006160:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006162:	4b0e      	ldr	r3, [pc, #56]	@ (800619c <ReadI2C+0x50>)
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	1dfb      	adds	r3, r7, #7
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	18db      	adds	r3, r3, r3
 800616e:	b299      	uxth	r1, r3
 8006170:	1dbb      	adds	r3, r7, #6
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	250f      	movs	r5, #15
 8006178:	197c      	adds	r4, r7, r5
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	f00c fda0 	bl	8012cc0 <HAL_I2C_Master_Receive_DMA>
 8006180:	0003      	movs	r3, r0
 8006182:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006184:	197b      	adds	r3, r7, r5
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <ReadI2C+0x44>
        return false;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <ReadI2C+0x46>
    }
    return true;
 8006190:	2301      	movs	r3, #1
}
 8006192:	0018      	movs	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	b004      	add	sp, #16
 8006198:	bdb0      	pop	{r4, r5, r7, pc}
 800619a:	46c0      	nop			@ (mov r8, r8)
 800619c:	2000078c 	.word	0x2000078c

080061a0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80061a0:	b5b0      	push	{r4, r5, r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6039      	str	r1, [r7, #0]
 80061a8:	0011      	movs	r1, r2
 80061aa:	1dfb      	adds	r3, r7, #7
 80061ac:	1c02      	adds	r2, r0, #0
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	1dbb      	adds	r3, r7, #6
 80061b2:	1c0a      	adds	r2, r1, #0
 80061b4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80061b6:	4b0e      	ldr	r3, [pc, #56]	@ (80061f0 <WriteI2C+0x50>)
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	1dfb      	adds	r3, r7, #7
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	18db      	adds	r3, r3, r3
 80061c2:	b299      	uxth	r1, r3
 80061c4:	1dbb      	adds	r3, r7, #6
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	250f      	movs	r5, #15
 80061cc:	197c      	adds	r4, r7, r5
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	f00c fc70 	bl	8012ab4 <HAL_I2C_Master_Transmit_DMA>
 80061d4:	0003      	movs	r3, r0
 80061d6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80061d8:	197b      	adds	r3, r7, r5
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <WriteI2C+0x44>
        return false;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <WriteI2C+0x46>
    }
    return true;
 80061e4:	2301      	movs	r3, #1
}
 80061e6:	0018      	movs	r0, r3
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b004      	add	sp, #16
 80061ec:	bdb0      	pop	{r4, r5, r7, pc}
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	2000078c 	.word	0x2000078c

080061f4 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80061f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f6:	b08b      	sub	sp, #44	@ 0x2c
 80061f8:	af04      	add	r7, sp, #16
 80061fa:	0004      	movs	r4, r0
 80061fc:	0008      	movs	r0, r1
 80061fe:	0011      	movs	r1, r2
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	250f      	movs	r5, #15
 8006204:	197b      	adds	r3, r7, r5
 8006206:	1c22      	adds	r2, r4, #0
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	260c      	movs	r6, #12
 800620c:	19bb      	adds	r3, r7, r6
 800620e:	1c02      	adds	r2, r0, #0
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	230a      	movs	r3, #10
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	1c0a      	adds	r2, r1, #0
 8006218:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 800621a:	4b14      	ldr	r3, [pc, #80]	@ (800626c <ReadI2CMem+0x78>)
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	197b      	adds	r3, r7, r5
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	18db      	adds	r3, r3, r3
 8006226:	b299      	uxth	r1, r3
 8006228:	2217      	movs	r2, #23
 800622a:	18bc      	adds	r4, r7, r2
 800622c:	230a      	movs	r3, #10
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	881d      	ldrh	r5, [r3, #0]
 8006232:	19bb      	adds	r3, r7, r6
 8006234:	881a      	ldrh	r2, [r3, #0]
 8006236:	2364      	movs	r3, #100	@ 0x64
 8006238:	9302      	str	r3, [sp, #8]
 800623a:	2328      	movs	r3, #40	@ 0x28
 800623c:	2608      	movs	r6, #8
 800623e:	199b      	adds	r3, r3, r6
 8006240:	19db      	adds	r3, r3, r7
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	002b      	movs	r3, r5
 800624c:	f00c fe3e 	bl	8012ecc <HAL_I2C_Mem_Read>
 8006250:	0003      	movs	r3, r0
 8006252:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8006254:	2217      	movs	r2, #23
 8006256:	18bb      	adds	r3, r7, r2
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <ReadI2CMem+0x6e>
     return false;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <ReadI2CMem+0x70>
   }
   return true;
 8006262:	2301      	movs	r3, #1
}
 8006264:	0018      	movs	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	b007      	add	sp, #28
 800626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626c:	2000078c 	.word	0x2000078c

08006270 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8006270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006272:	b089      	sub	sp, #36	@ 0x24
 8006274:	af02      	add	r7, sp, #8
 8006276:	0004      	movs	r4, r0
 8006278:	0008      	movs	r0, r1
 800627a:	0011      	movs	r1, r2
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	250f      	movs	r5, #15
 8006280:	197b      	adds	r3, r7, r5
 8006282:	1c22      	adds	r2, r4, #0
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	260c      	movs	r6, #12
 8006288:	19bb      	adds	r3, r7, r6
 800628a:	1c02      	adds	r2, r0, #0
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	230a      	movs	r3, #10
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	1c0a      	adds	r2, r1, #0
 8006294:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8006296:	4b13      	ldr	r3, [pc, #76]	@ (80062e4 <WriteI2CMem+0x74>)
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	197b      	adds	r3, r7, r5
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	18db      	adds	r3, r3, r3
 80062a2:	b299      	uxth	r1, r3
 80062a4:	2217      	movs	r2, #23
 80062a6:	18bc      	adds	r4, r7, r2
 80062a8:	230a      	movs	r3, #10
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	881d      	ldrh	r5, [r3, #0]
 80062ae:	19bb      	adds	r3, r7, r6
 80062b0:	881a      	ldrh	r2, [r3, #0]
 80062b2:	2328      	movs	r3, #40	@ 0x28
 80062b4:	2608      	movs	r6, #8
 80062b6:	199b      	adds	r3, r3, r6
 80062b8:	19db      	adds	r3, r3, r7
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	002b      	movs	r3, r5
 80062c4:	f00c ff36 	bl	8013134 <HAL_I2C_Mem_Write_DMA>
 80062c8:	0003      	movs	r3, r0
 80062ca:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80062cc:	2217      	movs	r2, #23
 80062ce:	18bb      	adds	r3, r7, r2
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <WriteI2CMem+0x6a>
     return false;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e000      	b.n	80062dc <WriteI2CMem+0x6c>
   }
   return true;
 80062da:	2301      	movs	r3, #1
}
 80062dc:	0018      	movs	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	b007      	add	sp, #28
 80062e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e4:	2000078c 	.word	0x2000078c

080062e8 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b0c3      	sub	sp, #268	@ 0x10c
 80062ec:	af3e      	add	r7, sp, #248	@ 0xf8
 80062ee:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80062f0:	f019 f968 	bl	801f5c4 <GetUsbRxDataSize>
 80062f4:	0003      	movs	r3, r0
 80062f6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d971      	bls.n	80063e2 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2123      	movs	r1, #35	@ 0x23
 8006302:	0018      	movs	r0, r3
 8006304:	f01c fb80 	bl	8022a08 <strchr>
 8006308:	0003      	movs	r3, r0
 800630a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d065      	beq.n	80063de <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	785a      	ldrb	r2, [r3, #1]
 8006316:	4b34      	ldr	r3, [pc, #208]	@ (80063e8 <Process_PC_Config+0x100>)
 8006318:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	789a      	ldrb	r2, [r3, #2]
 800631e:	4b32      	ldr	r3, [pc, #200]	@ (80063e8 <Process_PC_Config+0x100>)
 8006320:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8006322:	4b31      	ldr	r3, [pc, #196]	@ (80063e8 <Process_PC_Config+0x100>)
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	3305      	adds	r3, #5
 8006328:	001a      	movs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4293      	cmp	r3, r2
 800632e:	d351      	bcc.n	80063d4 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	1cd9      	adds	r1, r3, #3
 8006334:	4b2c      	ldr	r3, [pc, #176]	@ (80063e8 <Process_PC_Config+0x100>)
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	001a      	movs	r2, r3
 800633a:	4b2c      	ldr	r3, [pc, #176]	@ (80063ec <Process_PC_Config+0x104>)
 800633c:	0018      	movs	r0, r3
 800633e:	f01c fc37 	bl	8022bb0 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8006342:	4b29      	ldr	r3, [pc, #164]	@ (80063e8 <Process_PC_Config+0x100>)
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	3303      	adds	r3, #3
 8006348:	001a      	movs	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	189b      	adds	r3, r3, r2
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	021b      	lsls	r3, r3, #8
 8006352:	b21a      	sxth	r2, r3
 8006354:	4b24      	ldr	r3, [pc, #144]	@ (80063e8 <Process_PC_Config+0x100>)
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	3304      	adds	r3, #4
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	18cb      	adds	r3, r1, r3
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	b21b      	sxth	r3, r3
 8006362:	4313      	orrs	r3, r2
 8006364:	b21b      	sxth	r3, r3
 8006366:	b299      	uxth	r1, r3
 8006368:	4a1f      	ldr	r2, [pc, #124]	@ (80063e8 <Process_PC_Config+0x100>)
 800636a:	2381      	movs	r3, #129	@ 0x81
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8006370:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <Process_PC_Config+0x100>)
 8006372:	2381      	movs	r3, #129	@ 0x81
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	5ad4      	ldrh	r4, [r2, r3]
 8006378:	4b1b      	ldr	r3, [pc, #108]	@ (80063e8 <Process_PC_Config+0x100>)
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	3303      	adds	r3, #3
 800637e:	b29a      	uxth	r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	0011      	movs	r1, r2
 8006384:	0018      	movs	r0, r3
 8006386:	f000 f975 	bl	8006674 <CRC16_ARC>
 800638a:	0003      	movs	r3, r0
 800638c:	429c      	cmp	r4, r3
 800638e:	d007      	beq.n	80063a0 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8006390:	4b15      	ldr	r3, [pc, #84]	@ (80063e8 <Process_PC_Config+0x100>)
 8006392:	785a      	ldrb	r2, [r3, #1]
 8006394:	4b15      	ldr	r3, [pc, #84]	@ (80063ec <Process_PC_Config+0x104>)
 8006396:	0019      	movs	r1, r3
 8006398:	2001      	movs	r0, #1
 800639a:	f000 f919 	bl	80065d0 <Create_Message>
 800639e:	e016      	b.n	80063ce <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80063a0:	4c11      	ldr	r4, [pc, #68]	@ (80063e8 <Process_PC_Config+0x100>)
 80063a2:	466b      	mov	r3, sp
 80063a4:	0018      	movs	r0, r3
 80063a6:	0023      	movs	r3, r4
 80063a8:	3310      	adds	r3, #16
 80063aa:	22f4      	movs	r2, #244	@ 0xf4
 80063ac:	0019      	movs	r1, r3
 80063ae:	f01c fbff 	bl	8022bb0 <memcpy>
 80063b2:	6820      	ldr	r0, [r4, #0]
 80063b4:	6861      	ldr	r1, [r4, #4]
 80063b6:	68a2      	ldr	r2, [r4, #8]
 80063b8:	68e3      	ldr	r3, [r4, #12]
 80063ba:	f000 f819 	bl	80063f0 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80063be:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <Process_PC_Config+0x100>)
 80063c0:	7818      	ldrb	r0, [r3, #0]
 80063c2:	4b09      	ldr	r3, [pc, #36]	@ (80063e8 <Process_PC_Config+0x100>)
 80063c4:	785a      	ldrb	r2, [r3, #1]
 80063c6:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <Process_PC_Config+0x104>)
 80063c8:	0019      	movs	r1, r3
 80063ca:	f000 f901 	bl	80065d0 <Create_Message>
                }
                ResetUsbRxDataSize();
 80063ce:	f019 f8e1 	bl	801f594 <ResetUsbRxDataSize>
                return;
 80063d2:	e006      	b.n	80063e2 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	0018      	movs	r0, r3
 80063d8:	f019 f8fe 	bl	801f5d8 <GetUsbRxNextChunk>
 80063dc:	e001      	b.n	80063e2 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80063de:	f019 f8d9 	bl	801f594 <ResetUsbRxDataSize>
        }
    }
}
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b005      	add	sp, #20
 80063e6:	bd90      	pop	{r4, r7, pc}
 80063e8:	20000790 	.word	0x20000790
 80063ec:	20000792 	.word	0x20000792

080063f0 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80063f0:	b084      	sub	sp, #16
 80063f2:	b5b0      	push	{r4, r5, r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	2518      	movs	r5, #24
 80063fa:	197c      	adds	r4, r7, r5
 80063fc:	6020      	str	r0, [r4, #0]
 80063fe:	6061      	str	r1, [r4, #4]
 8006400:	60a2      	str	r2, [r4, #8]
 8006402:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006404:	197b      	adds	r3, r7, r5
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2bfe      	cmp	r3, #254	@ 0xfe
 800640a:	d100      	bne.n	800640e <ProcessCmd+0x1e>
 800640c:	e09c      	b.n	8006548 <ProcessCmd+0x158>
 800640e:	dd00      	ble.n	8006412 <ProcessCmd+0x22>
 8006410:	e0bc      	b.n	800658c <ProcessCmd+0x19c>
 8006412:	2b0c      	cmp	r3, #12
 8006414:	dc0a      	bgt.n	800642c <ProcessCmd+0x3c>
 8006416:	2b00      	cmp	r3, #0
 8006418:	da00      	bge.n	800641c <ProcessCmd+0x2c>
 800641a:	e0b7      	b.n	800658c <ProcessCmd+0x19c>
 800641c:	2b0c      	cmp	r3, #12
 800641e:	d900      	bls.n	8006422 <ProcessCmd+0x32>
 8006420:	e0b4      	b.n	800658c <ProcessCmd+0x19c>
 8006422:	009a      	lsls	r2, r3, #2
 8006424:	4b5d      	ldr	r3, [pc, #372]	@ (800659c <ProcessCmd+0x1ac>)
 8006426:	18d3      	adds	r3, r2, r3
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	469f      	mov	pc, r3
 800642c:	2bfd      	cmp	r3, #253	@ 0xfd
 800642e:	d100      	bne.n	8006432 <ProcessCmd+0x42>
 8006430:	e084      	b.n	800653c <ProcessCmd+0x14c>
            }
            break;
        }
    }

}
 8006432:	e0ab      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006434:	2118      	movs	r1, #24
 8006436:	187b      	adds	r3, r7, r1
 8006438:	785b      	ldrb	r3, [r3, #1]
 800643a:	001a      	movs	r2, r3
 800643c:	187b      	adds	r3, r7, r1
 800643e:	1c99      	adds	r1, r3, #2
 8006440:	4857      	ldr	r0, [pc, #348]	@ (80065a0 <ProcessCmd+0x1b0>)
 8006442:	230c      	movs	r3, #12
 8006444:	f002 fe58 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 8006448:	e0a0      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800644a:	2118      	movs	r1, #24
 800644c:	187b      	adds	r3, r7, r1
 800644e:	785b      	ldrb	r3, [r3, #1]
 8006450:	001a      	movs	r2, r3
 8006452:	187b      	adds	r3, r7, r1
 8006454:	1c99      	adds	r1, r3, #2
 8006456:	4853      	ldr	r0, [pc, #332]	@ (80065a4 <ProcessCmd+0x1b4>)
 8006458:	230c      	movs	r3, #12
 800645a:	f002 fe4d 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 800645e:	e095      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006460:	2118      	movs	r1, #24
 8006462:	187b      	adds	r3, r7, r1
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	001a      	movs	r2, r3
 8006468:	187b      	adds	r3, r7, r1
 800646a:	1c99      	adds	r1, r3, #2
 800646c:	484e      	ldr	r0, [pc, #312]	@ (80065a8 <ProcessCmd+0x1b8>)
 800646e:	230c      	movs	r3, #12
 8006470:	f002 fe42 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 8006474:	e08a      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006476:	2118      	movs	r1, #24
 8006478:	187b      	adds	r3, r7, r1
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	001a      	movs	r2, r3
 800647e:	187b      	adds	r3, r7, r1
 8006480:	1c99      	adds	r1, r3, #2
 8006482:	484a      	ldr	r0, [pc, #296]	@ (80065ac <ProcessCmd+0x1bc>)
 8006484:	230c      	movs	r3, #12
 8006486:	f002 fe37 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 800648a:	e07f      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800648c:	2118      	movs	r1, #24
 800648e:	187b      	adds	r3, r7, r1
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	001a      	movs	r2, r3
 8006494:	187b      	adds	r3, r7, r1
 8006496:	1c99      	adds	r1, r3, #2
 8006498:	4845      	ldr	r0, [pc, #276]	@ (80065b0 <ProcessCmd+0x1c0>)
 800649a:	230c      	movs	r3, #12
 800649c:	f002 fe2c 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 80064a0:	e074      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064a2:	2118      	movs	r1, #24
 80064a4:	187b      	adds	r3, r7, r1
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	001a      	movs	r2, r3
 80064aa:	187b      	adds	r3, r7, r1
 80064ac:	1c99      	adds	r1, r3, #2
 80064ae:	4841      	ldr	r0, [pc, #260]	@ (80065b4 <ProcessCmd+0x1c4>)
 80064b0:	230c      	movs	r3, #12
 80064b2:	f002 fe21 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 80064b6:	e069      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064b8:	2118      	movs	r1, #24
 80064ba:	187b      	adds	r3, r7, r1
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	001a      	movs	r2, r3
 80064c0:	187b      	adds	r3, r7, r1
 80064c2:	1c99      	adds	r1, r3, #2
 80064c4:	483c      	ldr	r0, [pc, #240]	@ (80065b8 <ProcessCmd+0x1c8>)
 80064c6:	230c      	movs	r3, #12
 80064c8:	f002 fe16 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 80064cc:	e05e      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80064ce:	2118      	movs	r1, #24
 80064d0:	187b      	adds	r3, r7, r1
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	001a      	movs	r2, r3
 80064d6:	187b      	adds	r3, r7, r1
 80064d8:	1c99      	adds	r1, r3, #2
 80064da:	4838      	ldr	r0, [pc, #224]	@ (80065bc <ProcessCmd+0x1cc>)
 80064dc:	2320      	movs	r3, #32
 80064de:	f002 fe0b 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 80064e2:	e053      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064e4:	2118      	movs	r1, #24
 80064e6:	187b      	adds	r3, r7, r1
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	001a      	movs	r2, r3
 80064ec:	187b      	adds	r3, r7, r1
 80064ee:	1c99      	adds	r1, r3, #2
 80064f0:	4833      	ldr	r0, [pc, #204]	@ (80065c0 <ProcessCmd+0x1d0>)
 80064f2:	230c      	movs	r3, #12
 80064f4:	f002 fe00 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 80064f8:	e048      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064fa:	2118      	movs	r1, #24
 80064fc:	187b      	adds	r3, r7, r1
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	001a      	movs	r2, r3
 8006502:	187b      	adds	r3, r7, r1
 8006504:	1c99      	adds	r1, r3, #2
 8006506:	482f      	ldr	r0, [pc, #188]	@ (80065c4 <ProcessCmd+0x1d4>)
 8006508:	230c      	movs	r3, #12
 800650a:	f002 fdf5 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 800650e:	e03d      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006510:	2118      	movs	r1, #24
 8006512:	187b      	adds	r3, r7, r1
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	001a      	movs	r2, r3
 8006518:	187b      	adds	r3, r7, r1
 800651a:	1c99      	adds	r1, r3, #2
 800651c:	482a      	ldr	r0, [pc, #168]	@ (80065c8 <ProcessCmd+0x1d8>)
 800651e:	230c      	movs	r3, #12
 8006520:	f002 fdea 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 8006524:	e032      	b.n	800658c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006526:	2118      	movs	r1, #24
 8006528:	187b      	adds	r3, r7, r1
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	001a      	movs	r2, r3
 800652e:	187b      	adds	r3, r7, r1
 8006530:	1c99      	adds	r1, r3, #2
 8006532:	4826      	ldr	r0, [pc, #152]	@ (80065cc <ProcessCmd+0x1dc>)
 8006534:	230c      	movs	r3, #12
 8006536:	f002 fddf 	bl	80090f8 <WriteUint8ArrayEepromSafe>
        break;
 800653a:	e027      	b.n	800658c <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800653c:	4b18      	ldr	r3, [pc, #96]	@ (80065a0 <ProcessCmd+0x1b0>)
 800653e:	21f8      	movs	r1, #248	@ 0xf8
 8006540:	0018      	movs	r0, r3
 8006542:	f002 fe1e 	bl	8009182 <ClearEEprom>
        break;
 8006546:	e021      	b.n	800658c <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006548:	2118      	movs	r1, #24
 800654a:	187b      	adds	r3, r7, r1
 800654c:	789b      	ldrb	r3, [r3, #2]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	b21a      	sxth	r2, r3
 8006552:	187b      	adds	r3, r7, r1
 8006554:	78db      	ldrb	r3, [r3, #3]
 8006556:	b21b      	sxth	r3, r3
 8006558:	4313      	orrs	r3, r2
 800655a:	b21a      	sxth	r2, r3
 800655c:	1dbb      	adds	r3, r7, #6
 800655e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006560:	1dbb      	adds	r3, r7, #6
 8006562:	881a      	ldrh	r2, [r3, #0]
 8006564:	23c0      	movs	r3, #192	@ 0xc0
 8006566:	015b      	lsls	r3, r3, #5
 8006568:	429a      	cmp	r2, r3
 800656a:	d207      	bcs.n	800657c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 800656c:	1dbb      	adds	r3, r7, #6
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	4a0b      	ldr	r2, [pc, #44]	@ (80065a0 <ProcessCmd+0x1b0>)
 8006572:	0019      	movs	r1, r3
 8006574:	0010      	movs	r0, r2
 8006576:	f002 fe04 	bl	8009182 <ClearEEprom>
            break;
 800657a:	e006      	b.n	800658a <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 800657c:	23c0      	movs	r3, #192	@ 0xc0
 800657e:	015b      	lsls	r3, r3, #5
 8006580:	4a07      	ldr	r2, [pc, #28]	@ (80065a0 <ProcessCmd+0x1b0>)
 8006582:	0019      	movs	r1, r3
 8006584:	0010      	movs	r0, r2
 8006586:	f002 fdfc 	bl	8009182 <ClearEEprom>
            break;
 800658a:	46c0      	nop			@ (mov r8, r8)
}
 800658c:	46c0      	nop			@ (mov r8, r8)
 800658e:	46bd      	mov	sp, r7
 8006590:	b002      	add	sp, #8
 8006592:	bcb0      	pop	{r4, r5, r7}
 8006594:	bc08      	pop	{r3}
 8006596:	b004      	add	sp, #16
 8006598:	4718      	bx	r3
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	08028b08 	.word	0x08028b08
 80065a0:	08080000 	.word	0x08080000
 80065a4:	0808000c 	.word	0x0808000c
 80065a8:	08080018 	.word	0x08080018
 80065ac:	08080024 	.word	0x08080024
 80065b0:	08080030 	.word	0x08080030
 80065b4:	0808003c 	.word	0x0808003c
 80065b8:	08080048 	.word	0x08080048
 80065bc:	08080090 	.word	0x08080090
 80065c0:	08080078 	.word	0x08080078
 80065c4:	0808006c 	.word	0x0808006c
 80065c8:	08080060 	.word	0x08080060
 80065cc:	08080054 	.word	0x08080054

080065d0 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80065d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6039      	str	r1, [r7, #0]
 80065d8:	0011      	movs	r1, r2
 80065da:	1dfb      	adds	r3, r7, #7
 80065dc:	1c02      	adds	r2, r0, #0
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	1dbb      	adds	r3, r7, #6
 80065e2:	1c0a      	adds	r2, r1, #0
 80065e4:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80065e6:	2223      	movs	r2, #35	@ 0x23
 80065e8:	4b20      	ldr	r3, [pc, #128]	@ (800666c <Create_Message+0x9c>)
 80065ea:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80065ec:	4b1f      	ldr	r3, [pc, #124]	@ (800666c <Create_Message+0x9c>)
 80065ee:	1dfa      	adds	r2, r7, #7
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80065f4:	4b1d      	ldr	r3, [pc, #116]	@ (800666c <Create_Message+0x9c>)
 80065f6:	1dba      	adds	r2, r7, #6
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80065fc:	1dbb      	adds	r3, r7, #6
 80065fe:	781a      	ldrb	r2, [r3, #0]
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	4b1b      	ldr	r3, [pc, #108]	@ (8006670 <Create_Message+0xa0>)
 8006604:	0018      	movs	r0, r3
 8006606:	f01c fad3 	bl	8022bb0 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800660a:	1dbb      	adds	r3, r7, #6
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b29a      	uxth	r2, r3
 8006610:	250e      	movs	r5, #14
 8006612:	197b      	adds	r3, r7, r5
 8006614:	3203      	adds	r2, #3
 8006616:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006618:	260c      	movs	r6, #12
 800661a:	19bc      	adds	r4, r7, r6
 800661c:	197b      	adds	r3, r7, r5
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	4b12      	ldr	r3, [pc, #72]	@ (800666c <Create_Message+0x9c>)
 8006622:	0011      	movs	r1, r2
 8006624:	0018      	movs	r0, r3
 8006626:	f000 f825 	bl	8006674 <CRC16_ARC>
 800662a:	0003      	movs	r3, r0
 800662c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800662e:	0030      	movs	r0, r6
 8006630:	183b      	adds	r3, r7, r0
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	0a1b      	lsrs	r3, r3, #8
 8006636:	b29a      	uxth	r2, r3
 8006638:	197b      	adds	r3, r7, r5
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b2d1      	uxtb	r1, r2
 800663e:	4a0b      	ldr	r2, [pc, #44]	@ (800666c <Create_Message+0x9c>)
 8006640:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006642:	197b      	adds	r3, r7, r5
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	3301      	adds	r3, #1
 8006648:	183a      	adds	r2, r7, r0
 800664a:	8812      	ldrh	r2, [r2, #0]
 800664c:	b2d1      	uxtb	r1, r2
 800664e:	4a07      	ldr	r2, [pc, #28]	@ (800666c <Create_Message+0x9c>)
 8006650:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006652:	197b      	adds	r3, r7, r5
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	3302      	adds	r3, #2
 8006658:	b29a      	uxth	r2, r3
 800665a:	4b04      	ldr	r3, [pc, #16]	@ (800666c <Create_Message+0x9c>)
 800665c:	0011      	movs	r1, r2
 800665e:	0018      	movs	r0, r3
 8006660:	f018 ff56 	bl	801f510 <CDC_Transmit_FS>
}
 8006664:	46c0      	nop			@ (mov r8, r8)
 8006666:	46bd      	mov	sp, r7
 8006668:	b005      	add	sp, #20
 800666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666c:	2000089c 	.word	0x2000089c
 8006670:	2000089f 	.word	0x2000089f

08006674 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	000a      	movs	r2, r1
 800667e:	1cbb      	adds	r3, r7, #2
 8006680:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006682:	2316      	movs	r3, #22
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	2200      	movs	r2, #0
 8006688:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	e02e      	b.n	80066ee <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	18d3      	adds	r3, r2, r3
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	0019      	movs	r1, r3
 800669a:	2216      	movs	r2, #22
 800669c:	18bb      	adds	r3, r7, r2
 800669e:	18ba      	adds	r2, r7, r2
 80066a0:	8812      	ldrh	r2, [r2, #0]
 80066a2:	404a      	eors	r2, r1
 80066a4:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	e01a      	b.n	80066e2 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80066ac:	2116      	movs	r1, #22
 80066ae:	187b      	adds	r3, r7, r1
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	2201      	movs	r2, #1
 80066b4:	4013      	ands	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80066b8:	187b      	adds	r3, r7, r1
 80066ba:	187a      	adds	r2, r7, r1
 80066bc:	8812      	ldrh	r2, [r2, #0]
 80066be:	0852      	lsrs	r2, r2, #1
 80066c0:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80066c2:	187b      	adds	r3, r7, r1
 80066c4:	187a      	adds	r2, r7, r1
 80066c6:	8812      	ldrh	r2, [r2, #0]
 80066c8:	490f      	ldr	r1, [pc, #60]	@ (8006708 <CRC16_ARC+0x94>)
 80066ca:	404a      	eors	r2, r1
 80066cc:	801a      	strh	r2, [r3, #0]
 80066ce:	e005      	b.n	80066dc <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80066d0:	2216      	movs	r2, #22
 80066d2:	18bb      	adds	r3, r7, r2
 80066d4:	18ba      	adds	r2, r7, r2
 80066d6:	8812      	ldrh	r2, [r2, #0]
 80066d8:	0852      	lsrs	r2, r2, #1
 80066da:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b07      	cmp	r3, #7
 80066e6:	dde1      	ble.n	80066ac <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3301      	adds	r3, #1
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	1cbb      	adds	r3, r7, #2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	dbcb      	blt.n	8006690 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80066f8:	2316      	movs	r3, #22
 80066fa:	18fb      	adds	r3, r7, r3
 80066fc:	881b      	ldrh	r3, [r3, #0]
}
 80066fe:	0018      	movs	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	b006      	add	sp, #24
 8006704:	bd80      	pop	{r7, pc}
 8006706:	46c0      	nop			@ (mov r8, r8)
 8006708:	ffffa001 	.word	0xffffa001

0800670c <printf_USB>:

void printf_USB(const char* message, ...)
{
 800670c:	b40f      	push	{r0, r1, r2, r3}
 800670e:	b590      	push	{r4, r7, lr}
 8006710:	b0a9      	sub	sp, #164	@ 0xa4
 8006712:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8006714:	23ac      	movs	r3, #172	@ 0xac
 8006716:	2108      	movs	r1, #8
 8006718:	185b      	adds	r3, r3, r1
 800671a:	19db      	adds	r3, r3, r7
 800671c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	23a8      	movs	r3, #168	@ 0xa8
 8006722:	185b      	adds	r3, r3, r1
 8006724:	19db      	adds	r3, r3, r7
 8006726:	6819      	ldr	r1, [r3, #0]
 8006728:	2408      	movs	r4, #8
 800672a:	193b      	adds	r3, r7, r4
 800672c:	0018      	movs	r0, r3
 800672e:	f01c f8b7 	bl	80228a0 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8006732:	193b      	adds	r3, r7, r4
 8006734:	0018      	movs	r0, r3
 8006736:	f7f9 fd19 	bl	800016c <strlen>
 800673a:	0003      	movs	r3, r0
 800673c:	b29a      	uxth	r2, r3
 800673e:	193b      	adds	r3, r7, r4
 8006740:	0011      	movs	r1, r2
 8006742:	0018      	movs	r0, r3
 8006744:	f018 fee4 	bl	801f510 <CDC_Transmit_FS>
}
 8006748:	46c0      	nop			@ (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b029      	add	sp, #164	@ 0xa4
 800674e:	bc90      	pop	{r4, r7}
 8006750:	bc08      	pop	{r3}
 8006752:	b004      	add	sp, #16
 8006754:	4718      	bx	r3

08006756 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	000a      	movs	r2, r1
 8006760:	1cfb      	adds	r3, r7, #3
 8006762:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8006764:	1cfb      	adds	r3, r7, #3
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <PC_selectout+0x20>
    printf_USB(msg);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	0018      	movs	r0, r3
 8006770:	f7ff ffcc 	bl	800670c <printf_USB>
 8006774:	e003      	b.n	800677e <PC_selectout+0x28>
  }
  else {
    printf(msg);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0018      	movs	r0, r3
 800677a:	f01b ff67 	bl	802264c <iprintf>
  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 800677e:	200a      	movs	r0, #10
 8006780:	f00a fc32 	bl	8010fe8 <HAL_Delay>
}
 8006784:	46c0      	nop			@ (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}

0800678c <PC_show_Keys>:

void PC_show_Keys() {
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  static char msg[64];
  if(Check_USB_PowerOn()){
 8006790:	f000 fc10 	bl	8006fb4 <Check_USB_PowerOn>
 8006794:	1e03      	subs	r3, r0, #0
 8006796:	d003      	beq.n	80067a0 <PC_show_Keys+0x14>
    usb_out = true;
 8006798:	4bbd      	ldr	r3, [pc, #756]	@ (8006a90 <PC_show_Keys+0x304>)
 800679a:	2201      	movs	r2, #1
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	e002      	b.n	80067a6 <PC_show_Keys+0x1a>
  }
  else {
    usb_out = false;
 80067a0:	4bbb      	ldr	r3, [pc, #748]	@ (8006a90 <PC_show_Keys+0x304>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80067a6:	4abb      	ldr	r2, [pc, #748]	@ (8006a94 <PC_show_Keys+0x308>)
 80067a8:	4bbb      	ldr	r3, [pc, #748]	@ (8006a98 <PC_show_Keys+0x30c>)
 80067aa:	0011      	movs	r1, r2
 80067ac:	0018      	movs	r0, r3
 80067ae:	f01b ffbd 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067b2:	4bb7      	ldr	r3, [pc, #732]	@ (8006a90 <PC_show_Keys+0x304>)
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	4bb8      	ldr	r3, [pc, #736]	@ (8006a98 <PC_show_Keys+0x30c>)
 80067b8:	0011      	movs	r1, r2
 80067ba:	0018      	movs	r0, r3
 80067bc:	f7ff ffcb 	bl	8006756 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80067c0:	4bb6      	ldr	r3, [pc, #728]	@ (8006a9c <PC_show_Keys+0x310>)
 80067c2:	48b7      	ldr	r0, [pc, #732]	@ (8006aa0 <PC_show_Keys+0x314>)
 80067c4:	220c      	movs	r2, #12
 80067c6:	0019      	movs	r1, r3
 80067c8:	f002 fcb2 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80067cc:	4ab3      	ldr	r2, [pc, #716]	@ (8006a9c <PC_show_Keys+0x310>)
 80067ce:	4bb5      	ldr	r3, [pc, #724]	@ (8006aa4 <PC_show_Keys+0x318>)
 80067d0:	0011      	movs	r1, r2
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7fd fabc 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "Box id ----------------------: %s\r\n", Buffer);
 80067d8:	4ab2      	ldr	r2, [pc, #712]	@ (8006aa4 <PC_show_Keys+0x318>)
 80067da:	49b3      	ldr	r1, [pc, #716]	@ (8006aa8 <PC_show_Keys+0x31c>)
 80067dc:	4bae      	ldr	r3, [pc, #696]	@ (8006a98 <PC_show_Keys+0x30c>)
 80067de:	0018      	movs	r0, r3
 80067e0:	f01b ffa4 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067e4:	4baa      	ldr	r3, [pc, #680]	@ (8006a90 <PC_show_Keys+0x304>)
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	4bab      	ldr	r3, [pc, #684]	@ (8006a98 <PC_show_Keys+0x30c>)
 80067ea:	0011      	movs	r1, r2
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7ff ffb2 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80067f2:	4bae      	ldr	r3, [pc, #696]	@ (8006aac <PC_show_Keys+0x320>)
 80067f4:	48ae      	ldr	r0, [pc, #696]	@ (8006ab0 <PC_show_Keys+0x324>)
 80067f6:	220c      	movs	r2, #12
 80067f8:	0019      	movs	r1, r3
 80067fa:	f002 fc99 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 80067fe:	4aab      	ldr	r2, [pc, #684]	@ (8006aac <PC_show_Keys+0x320>)
 8006800:	4ba8      	ldr	r3, [pc, #672]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006802:	0011      	movs	r1, r2
 8006804:	0018      	movs	r0, r3
 8006806:	f7fd faa3 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "1 - Temperature sensor id: --: %s\r\n", Buffer);
 800680a:	4aa6      	ldr	r2, [pc, #664]	@ (8006aa4 <PC_show_Keys+0x318>)
 800680c:	49a9      	ldr	r1, [pc, #676]	@ (8006ab4 <PC_show_Keys+0x328>)
 800680e:	4ba2      	ldr	r3, [pc, #648]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006810:	0018      	movs	r0, r3
 8006812:	f01b ff8b 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006816:	4b9e      	ldr	r3, [pc, #632]	@ (8006a90 <PC_show_Keys+0x304>)
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	4b9f      	ldr	r3, [pc, #636]	@ (8006a98 <PC_show_Keys+0x30c>)
 800681c:	0011      	movs	r1, r2
 800681e:	0018      	movs	r0, r3
 8006820:	f7ff ff99 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8006824:	4ba4      	ldr	r3, [pc, #656]	@ (8006ab8 <PC_show_Keys+0x32c>)
 8006826:	48a5      	ldr	r0, [pc, #660]	@ (8006abc <PC_show_Keys+0x330>)
 8006828:	220c      	movs	r2, #12
 800682a:	0019      	movs	r1, r3
 800682c:	f002 fc80 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8006830:	4aa1      	ldr	r2, [pc, #644]	@ (8006ab8 <PC_show_Keys+0x32c>)
 8006832:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006834:	0011      	movs	r1, r2
 8006836:	0018      	movs	r0, r3
 8006838:	f7fd fa8a 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "2 - Humidity sensor id ------: %s\r\n", Buffer);
 800683c:	4a99      	ldr	r2, [pc, #612]	@ (8006aa4 <PC_show_Keys+0x318>)
 800683e:	49a0      	ldr	r1, [pc, #640]	@ (8006ac0 <PC_show_Keys+0x334>)
 8006840:	4b95      	ldr	r3, [pc, #596]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006842:	0018      	movs	r0, r3
 8006844:	f01b ff72 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006848:	4b91      	ldr	r3, [pc, #580]	@ (8006a90 <PC_show_Keys+0x304>)
 800684a:	781a      	ldrb	r2, [r3, #0]
 800684c:	4b92      	ldr	r3, [pc, #584]	@ (8006a98 <PC_show_Keys+0x30c>)
 800684e:	0011      	movs	r1, r2
 8006850:	0018      	movs	r0, r3
 8006852:	f7ff ff80 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8006856:	4b9b      	ldr	r3, [pc, #620]	@ (8006ac4 <PC_show_Keys+0x338>)
 8006858:	489b      	ldr	r0, [pc, #620]	@ (8006ac8 <PC_show_Keys+0x33c>)
 800685a:	220c      	movs	r2, #12
 800685c:	0019      	movs	r1, r3
 800685e:	f002 fc67 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8006862:	4a98      	ldr	r2, [pc, #608]	@ (8006ac4 <PC_show_Keys+0x338>)
 8006864:	4b8f      	ldr	r3, [pc, #572]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006866:	0011      	movs	r1, r2
 8006868:	0018      	movs	r0, r3
 800686a:	f7fd fa71 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "3 - NOx sensor id -----------: %s\r\n", Buffer);
 800686e:	4a8d      	ldr	r2, [pc, #564]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006870:	4996      	ldr	r1, [pc, #600]	@ (8006acc <PC_show_Keys+0x340>)
 8006872:	4b89      	ldr	r3, [pc, #548]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006874:	0018      	movs	r0, r3
 8006876:	f01b ff59 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800687a:	4b85      	ldr	r3, [pc, #532]	@ (8006a90 <PC_show_Keys+0x304>)
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	4b86      	ldr	r3, [pc, #536]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006880:	0011      	movs	r1, r2
 8006882:	0018      	movs	r0, r3
 8006884:	f7ff ff67 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8006888:	4b91      	ldr	r3, [pc, #580]	@ (8006ad0 <PC_show_Keys+0x344>)
 800688a:	4892      	ldr	r0, [pc, #584]	@ (8006ad4 <PC_show_Keys+0x348>)
 800688c:	220c      	movs	r2, #12
 800688e:	0019      	movs	r1, r3
 8006890:	f002 fc4e 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8006894:	4a8e      	ldr	r2, [pc, #568]	@ (8006ad0 <PC_show_Keys+0x344>)
 8006896:	4b83      	ldr	r3, [pc, #524]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006898:	0011      	movs	r1, r2
 800689a:	0018      	movs	r0, r3
 800689c:	f7fd fa58 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "4 - VOC sensor id -----------: %s\r\n", Buffer);
 80068a0:	4a80      	ldr	r2, [pc, #512]	@ (8006aa4 <PC_show_Keys+0x318>)
 80068a2:	498d      	ldr	r1, [pc, #564]	@ (8006ad8 <PC_show_Keys+0x34c>)
 80068a4:	4b7c      	ldr	r3, [pc, #496]	@ (8006a98 <PC_show_Keys+0x30c>)
 80068a6:	0018      	movs	r0, r3
 80068a8:	f01b ff40 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068ac:	4b78      	ldr	r3, [pc, #480]	@ (8006a90 <PC_show_Keys+0x304>)
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	4b79      	ldr	r3, [pc, #484]	@ (8006a98 <PC_show_Keys+0x30c>)
 80068b2:	0011      	movs	r1, r2
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7ff ff4e 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, soundConfig, IdSize);
 80068ba:	4b88      	ldr	r3, [pc, #544]	@ (8006adc <PC_show_Keys+0x350>)
 80068bc:	4888      	ldr	r0, [pc, #544]	@ (8006ae0 <PC_show_Keys+0x354>)
 80068be:	220c      	movs	r2, #12
 80068c0:	0019      	movs	r1, r3
 80068c2:	f002 fc35 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80068c6:	4a85      	ldr	r2, [pc, #532]	@ (8006adc <PC_show_Keys+0x350>)
 80068c8:	4b76      	ldr	r3, [pc, #472]	@ (8006aa4 <PC_show_Keys+0x318>)
 80068ca:	0011      	movs	r1, r2
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7fd fa3f 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "5 is former dBa unused\r\n");
 80068d2:	4a84      	ldr	r2, [pc, #528]	@ (8006ae4 <PC_show_Keys+0x358>)
 80068d4:	4b70      	ldr	r3, [pc, #448]	@ (8006a98 <PC_show_Keys+0x30c>)
 80068d6:	0011      	movs	r1, r2
 80068d8:	0018      	movs	r0, r3
 80068da:	f01b ff27 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068de:	4b6c      	ldr	r3, [pc, #432]	@ (8006a90 <PC_show_Keys+0x304>)
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006a98 <PC_show_Keys+0x30c>)
 80068e4:	0011      	movs	r1, r2
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7ff ff35 	bl	8006756 <PC_selectout>
  sprintf(msg, "5 - Air pressure sensor id --: %s\r\n", Buffer);
 80068ec:	4a6d      	ldr	r2, [pc, #436]	@ (8006aa4 <PC_show_Keys+0x318>)
 80068ee:	497e      	ldr	r1, [pc, #504]	@ (8006ae8 <PC_show_Keys+0x35c>)
 80068f0:	4b69      	ldr	r3, [pc, #420]	@ (8006a98 <PC_show_Keys+0x30c>)
 80068f2:	0018      	movs	r0, r3
 80068f4:	f01b ff1a 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068f8:	4b65      	ldr	r3, [pc, #404]	@ (8006a90 <PC_show_Keys+0x304>)
 80068fa:	781a      	ldrb	r2, [r3, #0]
 80068fc:	4b66      	ldr	r3, [pc, #408]	@ (8006a98 <PC_show_Keys+0x30c>)
 80068fe:	0011      	movs	r1, r2
 8006900:	0018      	movs	r0, r3
 8006902:	f7ff ff28 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8006906:	4b75      	ldr	r3, [pc, #468]	@ (8006adc <PC_show_Keys+0x350>)
 8006908:	4878      	ldr	r0, [pc, #480]	@ (8006aec <PC_show_Keys+0x360>)
 800690a:	220c      	movs	r2, #12
 800690c:	0019      	movs	r1, r3
 800690e:	f002 fc0f 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8006912:	4a72      	ldr	r2, [pc, #456]	@ (8006adc <PC_show_Keys+0x350>)
 8006914:	4b63      	ldr	r3, [pc, #396]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006916:	0011      	movs	r1, r2
 8006918:	0018      	movs	r0, r3
 800691a:	f7fd fa19 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "6 is former dBc\r\n");
 800691e:	4a74      	ldr	r2, [pc, #464]	@ (8006af0 <PC_show_Keys+0x364>)
 8006920:	4b5d      	ldr	r3, [pc, #372]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006922:	0011      	movs	r1, r2
 8006924:	0018      	movs	r0, r3
 8006926:	f01b ff01 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800692a:	4b59      	ldr	r3, [pc, #356]	@ (8006a90 <PC_show_Keys+0x304>)
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	4b5a      	ldr	r3, [pc, #360]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006930:	0011      	movs	r1, r2
 8006932:	0018      	movs	r0, r3
 8006934:	f7ff ff0f 	bl	8006756 <PC_selectout>
  sprintf(msg, "6 - Sound dBA sensor id -----: %s\r\n", Buffer);
 8006938:	4a5a      	ldr	r2, [pc, #360]	@ (8006aa4 <PC_show_Keys+0x318>)
 800693a:	496e      	ldr	r1, [pc, #440]	@ (8006af4 <PC_show_Keys+0x368>)
 800693c:	4b56      	ldr	r3, [pc, #344]	@ (8006a98 <PC_show_Keys+0x30c>)
 800693e:	0018      	movs	r0, r3
 8006940:	f01b fef4 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006944:	4b52      	ldr	r3, [pc, #328]	@ (8006a90 <PC_show_Keys+0x304>)
 8006946:	781a      	ldrb	r2, [r3, #0]
 8006948:	4b53      	ldr	r3, [pc, #332]	@ (8006a98 <PC_show_Keys+0x30c>)
 800694a:	0011      	movs	r1, r2
 800694c:	0018      	movs	r0, r3
 800694e:	f7ff ff02 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8006952:	4b69      	ldr	r3, [pc, #420]	@ (8006af8 <PC_show_Keys+0x36c>)
 8006954:	4869      	ldr	r0, [pc, #420]	@ (8006afc <PC_show_Keys+0x370>)
 8006956:	2220      	movs	r2, #32
 8006958:	0019      	movs	r1, r3
 800695a:	f002 fbe9 	bl	8009130 <ReadUint8ArrayEEprom>
  sprintf(msg, "7 - Stored name -------------: ");
 800695e:	4a68      	ldr	r2, [pc, #416]	@ (8006b00 <PC_show_Keys+0x374>)
 8006960:	4b4d      	ldr	r3, [pc, #308]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006962:	0011      	movs	r1, r2
 8006964:	0018      	movs	r0, r3
 8006966:	f01b fee1 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800696a:	4b49      	ldr	r3, [pc, #292]	@ (8006a90 <PC_show_Keys+0x304>)
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006970:	0011      	movs	r1, r2
 8006972:	0018      	movs	r0, r3
 8006974:	f7ff feef 	bl	8006756 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);
 8006978:	4a5f      	ldr	r2, [pc, #380]	@ (8006af8 <PC_show_Keys+0x36c>)
 800697a:	4962      	ldr	r1, [pc, #392]	@ (8006b04 <PC_show_Keys+0x378>)
 800697c:	4b46      	ldr	r3, [pc, #280]	@ (8006a98 <PC_show_Keys+0x30c>)
 800697e:	0018      	movs	r0, r3
 8006980:	f01b fed4 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006984:	4b42      	ldr	r3, [pc, #264]	@ (8006a90 <PC_show_Keys+0x304>)
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	4b43      	ldr	r3, [pc, #268]	@ (8006a98 <PC_show_Keys+0x30c>)
 800698a:	0011      	movs	r1, r2
 800698c:	0018      	movs	r0, r3
 800698e:	f7ff fee2 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8006992:	4b5d      	ldr	r3, [pc, #372]	@ (8006b08 <PC_show_Keys+0x37c>)
 8006994:	485d      	ldr	r0, [pc, #372]	@ (8006b0c <PC_show_Keys+0x380>)
 8006996:	220c      	movs	r2, #12
 8006998:	0019      	movs	r1, r3
 800699a:	f002 fbc9 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 800699e:	4a5a      	ldr	r2, [pc, #360]	@ (8006b08 <PC_show_Keys+0x37c>)
 80069a0:	4b40      	ldr	r3, [pc, #256]	@ (8006aa4 <PC_show_Keys+0x318>)
 80069a2:	0011      	movs	r1, r2
 80069a4:	0018      	movs	r0, r3
 80069a6:	f7fd f9d3 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "8 - Solar voltage sensor id -: %s\r\n", Buffer);
 80069aa:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa4 <PC_show_Keys+0x318>)
 80069ac:	4958      	ldr	r1, [pc, #352]	@ (8006b10 <PC_show_Keys+0x384>)
 80069ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006a98 <PC_show_Keys+0x30c>)
 80069b0:	0018      	movs	r0, r3
 80069b2:	f01b febb 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80069b6:	4b36      	ldr	r3, [pc, #216]	@ (8006a90 <PC_show_Keys+0x304>)
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	4b37      	ldr	r3, [pc, #220]	@ (8006a98 <PC_show_Keys+0x30c>)
 80069bc:	0011      	movs	r1, r2
 80069be:	0018      	movs	r0, r3
 80069c0:	f7ff fec9 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80069c4:	4b53      	ldr	r3, [pc, #332]	@ (8006b14 <PC_show_Keys+0x388>)
 80069c6:	4854      	ldr	r0, [pc, #336]	@ (8006b18 <PC_show_Keys+0x38c>)
 80069c8:	220c      	movs	r2, #12
 80069ca:	0019      	movs	r1, r3
 80069cc:	f002 fbb0 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80069d0:	4a50      	ldr	r2, [pc, #320]	@ (8006b14 <PC_show_Keys+0x388>)
 80069d2:	4b34      	ldr	r3, [pc, #208]	@ (8006aa4 <PC_show_Keys+0x318>)
 80069d4:	0011      	movs	r1, r2
 80069d6:	0018      	movs	r0, r3
 80069d8:	f7fd f9ba 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "9 - Battery voltage sensor id: %s\r\n", Buffer);
 80069dc:	4a31      	ldr	r2, [pc, #196]	@ (8006aa4 <PC_show_Keys+0x318>)
 80069de:	494f      	ldr	r1, [pc, #316]	@ (8006b1c <PC_show_Keys+0x390>)
 80069e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006a98 <PC_show_Keys+0x30c>)
 80069e2:	0018      	movs	r0, r3
 80069e4:	f01b fea2 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80069e8:	4b29      	ldr	r3, [pc, #164]	@ (8006a90 <PC_show_Keys+0x304>)
 80069ea:	781a      	ldrb	r2, [r3, #0]
 80069ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006a98 <PC_show_Keys+0x30c>)
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff feb0 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 80069f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006b20 <PC_show_Keys+0x394>)
 80069f8:	484a      	ldr	r0, [pc, #296]	@ (8006b24 <PC_show_Keys+0x398>)
 80069fa:	220c      	movs	r2, #12
 80069fc:	0019      	movs	r1, r3
 80069fe:	f002 fb97 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8006a02:	4a47      	ldr	r2, [pc, #284]	@ (8006b20 <PC_show_Keys+0x394>)
 8006a04:	4b27      	ldr	r3, [pc, #156]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006a06:	0011      	movs	r1, r2
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7fd f9a1 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, ": - PM10 sensor id ----------: %s\r\n", Buffer);
 8006a0e:	4a25      	ldr	r2, [pc, #148]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006a10:	4945      	ldr	r1, [pc, #276]	@ (8006b28 <PC_show_Keys+0x39c>)
 8006a12:	4b21      	ldr	r3, [pc, #132]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006a14:	0018      	movs	r0, r3
 8006a16:	f01b fe89 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006a90 <PC_show_Keys+0x304>)
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7ff fe97 	bl	8006756 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8006a28:	4b40      	ldr	r3, [pc, #256]	@ (8006b2c <PC_show_Keys+0x3a0>)
 8006a2a:	4841      	ldr	r0, [pc, #260]	@ (8006b30 <PC_show_Keys+0x3a4>)
 8006a2c:	220c      	movs	r2, #12
 8006a2e:	0019      	movs	r1, r3
 8006a30:	f002 fb7e 	bl	8009130 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8006a34:	4a3d      	ldr	r2, [pc, #244]	@ (8006b2c <PC_show_Keys+0x3a0>)
 8006a36:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f7fd f988 	bl	8003d50 <uint8ArrayToString>
  sprintf(msg, "; - PM2p5 sensor id ---------: %s\r\n", Buffer);
 8006a40:	4a18      	ldr	r2, [pc, #96]	@ (8006aa4 <PC_show_Keys+0x318>)
 8006a42:	493c      	ldr	r1, [pc, #240]	@ (8006b34 <PC_show_Keys+0x3a8>)
 8006a44:	4b14      	ldr	r3, [pc, #80]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006a46:	0018      	movs	r0, r3
 8006a48:	f01b fe70 	bl	802272c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006a4c:	4b10      	ldr	r3, [pc, #64]	@ (8006a90 <PC_show_Keys+0x304>)
 8006a4e:	781a      	ldrb	r2, [r3, #0]
 8006a50:	4b11      	ldr	r3, [pc, #68]	@ (8006a98 <PC_show_Keys+0x30c>)
 8006a52:	0011      	movs	r1, r2
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7ff fe7e 	bl	8006756 <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 8006a5a:	4b37      	ldr	r3, [pc, #220]	@ (8006b38 <PC_show_Keys+0x3ac>)
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f7ff fe55 	bl	800670c <printf_USB>

  printf_USB("Command example for air pressure => #5,6a\r\n");
 8006a62:	4b36      	ldr	r3, [pc, #216]	@ (8006b3c <PC_show_Keys+0x3b0>)
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7ff fe51 	bl	800670c <printf_USB>
  printf_USB("Command example for a full key for air pressure => $5,67af09374cdef30007b35055\r\n");
 8006a6a:	4b35      	ldr	r3, [pc, #212]	@ (8006b40 <PC_show_Keys+0x3b4>)
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f7ff fe4d 	bl	800670c <printf_USB>


  if (!usb_out) {
 8006a72:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <PC_show_Keys+0x304>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2201      	movs	r2, #1
 8006a78:	4053      	eors	r3, r2
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <PC_show_Keys+0x2fc>
    printf("A key can only be changed via USB input.\r\n");
 8006a80:	4b30      	ldr	r3, [pc, #192]	@ (8006b44 <PC_show_Keys+0x3b8>)
 8006a82:	0018      	movs	r0, r3
 8006a84:	f01b fe48 	bl	8022718 <puts>
  }
}
 8006a88:	46c0      	nop			@ (mov r8, r8)
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	200009a1 	.word	0x200009a1
 8006a94:	08026754 	.word	0x08026754
 8006a98:	200009a4 	.word	0x200009a4
 8006a9c:	200009e4 	.word	0x200009e4
 8006aa0:	08080000 	.word	0x08080000
 8006aa4:	200009f0 	.word	0x200009f0
 8006aa8:	08026770 	.word	0x08026770
 8006aac:	20000a0c 	.word	0x20000a0c
 8006ab0:	0808000c 	.word	0x0808000c
 8006ab4:	08026794 	.word	0x08026794
 8006ab8:	20000a18 	.word	0x20000a18
 8006abc:	08080018 	.word	0x08080018
 8006ac0:	080267b8 	.word	0x080267b8
 8006ac4:	20000a24 	.word	0x20000a24
 8006ac8:	08080024 	.word	0x08080024
 8006acc:	080267dc 	.word	0x080267dc
 8006ad0:	20000a30 	.word	0x20000a30
 8006ad4:	08080030 	.word	0x08080030
 8006ad8:	08026800 	.word	0x08026800
 8006adc:	20000a3c 	.word	0x20000a3c
 8006ae0:	0808003c 	.word	0x0808003c
 8006ae4:	08026824 	.word	0x08026824
 8006ae8:	08026840 	.word	0x08026840
 8006aec:	08080048 	.word	0x08080048
 8006af0:	08026864 	.word	0x08026864
 8006af4:	08026878 	.word	0x08026878
 8006af8:	20000a48 	.word	0x20000a48
 8006afc:	08080090 	.word	0x08080090
 8006b00:	0802689c 	.word	0x0802689c
 8006b04:	080268bc 	.word	0x080268bc
 8006b08:	20000a68 	.word	0x20000a68
 8006b0c:	08080078 	.word	0x08080078
 8006b10:	080268c4 	.word	0x080268c4
 8006b14:	20000a74 	.word	0x20000a74
 8006b18:	0808006c 	.word	0x0808006c
 8006b1c:	080268e8 	.word	0x080268e8
 8006b20:	20000a80 	.word	0x20000a80
 8006b24:	08080060 	.word	0x08080060
 8006b28:	0802690c 	.word	0x0802690c
 8006b2c:	20000a8c 	.word	0x20000a8c
 8006b30:	08080054 	.word	0x08080054
 8006b34:	08026930 	.word	0x08026930
 8006b38:	08026954 	.word	0x08026954
 8006b3c:	08026984 	.word	0x08026984
 8006b40:	080269b0 	.word	0x080269b0
 8006b44:	08026a04 	.word	0x08026a04

08006b48 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8006b48:	b590      	push	{r4, r7, lr}
 8006b4a:	b0c5      	sub	sp, #276	@ 0x114
 8006b4c:	af3e      	add	r7, sp, #248	@ 0xf8
 8006b4e:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  static uint8_t len;
  uint32_t length = GetUsbRxDataSize();
 8006b50:	f018 fd38 	bl	801f5c4 <GetUsbRxDataSize>
 8006b54:	0003      	movs	r3, r0
 8006b56:	60fb      	str	r3, [r7, #12]
  static uint8_t r = 0;
  static char Buffer[32];
  if (length > 5) {  //#2,34
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d800      	bhi.n	8006b60 <Process_USB_input+0x18>
 8006b5e:	e13e      	b.n	8006dde <Process_USB_input+0x296>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	4baa      	ldr	r3, [pc, #680]	@ (8006e0c <Process_USB_input+0x2c4>)
 8006b64:	0011      	movs	r1, r2
 8006b66:	0018      	movs	r0, r3
 8006b68:	f7ff fdd0 	bl	800670c <printf_USB>
    uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);  // zoek op #
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2123      	movs	r1, #35	@ 0x23
 8006b70:	0018      	movs	r0, r3
 8006b72:	f01b ff49 	bl	8022a08 <strchr>
 8006b76:	0003      	movs	r3, r0
 8006b78:	617b      	str	r3, [r7, #20]
    if (message == NULL) {
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <Process_USB_input+0x46>
      message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2124      	movs	r1, #36	@ 0x24
 8006b84:	0018      	movs	r0, r3
 8006b86:	f01b ff3f 	bl	8022a08 <strchr>
 8006b8a:	0003      	movs	r3, r0
 8006b8c:	617b      	str	r3, [r7, #20]
    }
    if(message != NULL) {
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d100      	bne.n	8006b96 <Process_USB_input+0x4e>
 8006b94:	e109      	b.n	8006daa <Process_USB_input+0x262>
      received.Command = (message[1] & 0x0F);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	220f      	movs	r2, #15
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8006e10 <Process_USB_input+0x2c8>)
 8006ba4:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	3302      	adds	r3, #2
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b2c      	cmp	r3, #44	@ 0x2c
 8006bae:	d000      	beq.n	8006bb2 <Process_USB_input+0x6a>
 8006bb0:	e0f4      	b.n	8006d9c <Process_USB_input+0x254>
        if (message[0] == '#') {
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b23      	cmp	r3, #35	@ 0x23
 8006bb8:	d103      	bne.n	8006bc2 <Process_USB_input+0x7a>
          len = 5;
 8006bba:	4b96      	ldr	r3, [pc, #600]	@ (8006e14 <Process_USB_input+0x2cc>)
 8006bbc:	2205      	movs	r2, #5
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	e002      	b.n	8006bc8 <Process_USB_input+0x80>
        }
        else {
          len = 27;
 8006bc2:	4b94      	ldr	r3, [pc, #592]	@ (8006e14 <Process_USB_input+0x2cc>)
 8006bc4:	221b      	movs	r2, #27
 8006bc6:	701a      	strb	r2, [r3, #0]
        }
        for (uint8_t i=3; i < len; i++) {
 8006bc8:	2313      	movs	r3, #19
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	2203      	movs	r2, #3
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	e08b      	b.n	8006cea <Process_USB_input+0x1a2>
          printf_USB("handling character %c as nr: %d for pos: %d\r\n", message[i], i, r);
 8006bd2:	2013      	movs	r0, #19
 8006bd4:	183b      	adds	r3, r7, r0
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	18d3      	adds	r3, r2, r3
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	0019      	movs	r1, r3
 8006be0:	0004      	movs	r4, r0
 8006be2:	183b      	adds	r3, r7, r0
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	4b8c      	ldr	r3, [pc, #560]	@ (8006e18 <Process_USB_input+0x2d0>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	488c      	ldr	r0, [pc, #560]	@ (8006e1c <Process_USB_input+0x2d4>)
 8006bec:	f7ff fd8e 	bl	800670c <printf_USB>
          if (isxdigit(message[i])) {
 8006bf0:	0021      	movs	r1, r4
 8006bf2:	187b      	adds	r3, r7, r1
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	18d3      	adds	r3, r2, r3
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	4b88      	ldr	r3, [pc, #544]	@ (8006e20 <Process_USB_input+0x2d8>)
 8006c00:	18d3      	adds	r3, r2, r3
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	001a      	movs	r2, r3
 8006c06:	2344      	movs	r3, #68	@ 0x44
 8006c08:	4013      	ands	r3, r2
 8006c0a:	d059      	beq.n	8006cc0 <Process_USB_input+0x178>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 8006c0c:	4b85      	ldr	r3, [pc, #532]	@ (8006e24 <Process_USB_input+0x2dc>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	b25a      	sxtb	r2, r3
 8006c14:	0008      	movs	r0, r1
 8006c16:	187b      	adds	r3, r7, r1
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	6979      	ldr	r1, [r7, #20]
 8006c1c:	18cb      	adds	r3, r1, r3
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	1c59      	adds	r1, r3, #1
 8006c22:	4b7f      	ldr	r3, [pc, #508]	@ (8006e20 <Process_USB_input+0x2d8>)
 8006c24:	18cb      	adds	r3, r1, r3
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	0019      	movs	r1, r3
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	400b      	ands	r3, r1
 8006c2e:	d008      	beq.n	8006c42 <Process_USB_input+0xfa>
 8006c30:	183b      	adds	r3, r7, r0
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	6979      	ldr	r1, [r7, #20]
 8006c36:	18cb      	adds	r3, r1, r3
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	3b30      	subs	r3, #48	@ 0x30
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	e01e      	b.n	8006c80 <Process_USB_input+0x138>
 8006c42:	2313      	movs	r3, #19
 8006c44:	18fb      	adds	r3, r7, r3
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	6979      	ldr	r1, [r7, #20]
 8006c4a:	18c9      	adds	r1, r1, r3
 8006c4c:	200b      	movs	r0, #11
 8006c4e:	183b      	adds	r3, r7, r0
 8006c50:	7809      	ldrb	r1, [r1, #0]
 8006c52:	7019      	strb	r1, [r3, #0]
 8006c54:	183b      	adds	r3, r7, r0
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	4b71      	ldr	r3, [pc, #452]	@ (8006e20 <Process_USB_input+0x2d8>)
 8006c5c:	18cb      	adds	r3, r1, r3
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	0019      	movs	r1, r3
 8006c62:	2303      	movs	r3, #3
 8006c64:	400b      	ands	r3, r1
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d103      	bne.n	8006c72 <Process_USB_input+0x12a>
 8006c6a:	183b      	adds	r3, r7, r0
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	3b20      	subs	r3, #32
 8006c70:	e002      	b.n	8006c78 <Process_USB_input+0x130>
 8006c72:	230b      	movs	r3, #11
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	3b37      	subs	r3, #55	@ 0x37
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	b25b      	sxtb	r3, r3
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b25b      	sxtb	r3, r3
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	4b67      	ldr	r3, [pc, #412]	@ (8006e24 <Process_USB_input+0x2dc>)
 8006c88:	701a      	strb	r2, [r3, #0]
            if (len == 27) {
 8006c8a:	4b62      	ldr	r3, [pc, #392]	@ (8006e14 <Process_USB_input+0x2cc>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b1b      	cmp	r3, #27
 8006c90:	d125      	bne.n	8006cde <Process_USB_input+0x196>

              if ((i % 2) == 0) {
 8006c92:	2313      	movs	r3, #19
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d11d      	bne.n	8006cde <Process_USB_input+0x196>
                message[r] = result;
 8006ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8006e18 <Process_USB_input+0x2d0>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	4a5d      	ldr	r2, [pc, #372]	@ (8006e24 <Process_USB_input+0x2dc>)
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	701a      	strb	r2, [r3, #0]
                r++;
 8006cb2:	4b59      	ldr	r3, [pc, #356]	@ (8006e18 <Process_USB_input+0x2d0>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4b57      	ldr	r3, [pc, #348]	@ (8006e18 <Process_USB_input+0x2d0>)
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e00e      	b.n	8006cde <Process_USB_input+0x196>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", message[i], i);
 8006cc0:	2013      	movs	r0, #19
 8006cc2:	183b      	adds	r3, r7, r0
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	18d3      	adds	r3, r2, r3
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	0019      	movs	r1, r3
 8006cce:	183b      	adds	r3, r7, r0
 8006cd0:	781a      	ldrb	r2, [r3, #0]
 8006cd2:	4b55      	ldr	r3, [pc, #340]	@ (8006e28 <Process_USB_input+0x2e0>)
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f7ff fd19 	bl	800670c <printf_USB>
            return false; // Of een andere foutwaarde
 8006cda:	2300      	movs	r3, #0
 8006cdc:	e092      	b.n	8006e04 <Process_USB_input+0x2bc>
        for (uint8_t i=3; i < len; i++) {
 8006cde:	2113      	movs	r1, #19
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	187b      	adds	r3, r7, r1
 8006ce6:	3201      	adds	r2, #1
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	4b4a      	ldr	r3, [pc, #296]	@ (8006e14 <Process_USB_input+0x2cc>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2213      	movs	r2, #19
 8006cf0:	18ba      	adds	r2, r7, r2
 8006cf2:	7812      	ldrb	r2, [r2, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d200      	bcs.n	8006cfa <Process_USB_input+0x1b2>
 8006cf8:	e76b      	b.n	8006bd2 <Process_USB_input+0x8a>
          }
        }
        if (len == 5) {
 8006cfa:	4b46      	ldr	r3, [pc, #280]	@ (8006e14 <Process_USB_input+0x2cc>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d112      	bne.n	8006d28 <Process_USB_input+0x1e0>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006d02:	4b4a      	ldr	r3, [pc, #296]	@ (8006e2c <Process_USB_input+0x2e4>)
 8006d04:	484a      	ldr	r0, [pc, #296]	@ (8006e30 <Process_USB_input+0x2e8>)
 8006d06:	220c      	movs	r2, #12
 8006d08:	0019      	movs	r1, r3
 8006d0a:	f002 fa11 	bl	8009130 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte
 8006d0e:	4b45      	ldr	r3, [pc, #276]	@ (8006e24 <Process_USB_input+0x2dc>)
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	4b46      	ldr	r3, [pc, #280]	@ (8006e2c <Process_USB_input+0x2e4>)
 8006d14:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8006d16:	4b3e      	ldr	r3, [pc, #248]	@ (8006e10 <Process_USB_input+0x2c8>)
 8006d18:	2202      	movs	r2, #2
 8006d1a:	4944      	ldr	r1, [pc, #272]	@ (8006e2c <Process_USB_input+0x2e4>)
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	220c      	movs	r2, #12
 8006d20:	0018      	movs	r0, r3
 8006d22:	f01b ff45 	bl	8022bb0 <memcpy>
 8006d26:	e005      	b.n	8006d34 <Process_USB_input+0x1ec>
        }
        else {
          memcpy(received.Payload, message, IdSize);
 8006d28:	6979      	ldr	r1, [r7, #20]
 8006d2a:	4b42      	ldr	r3, [pc, #264]	@ (8006e34 <Process_USB_input+0x2ec>)
 8006d2c:	220c      	movs	r2, #12
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f01b ff3e 	bl	8022bb0 <memcpy>
        }
        received.PayloadLength = IdSize;
 8006d34:	4b36      	ldr	r3, [pc, #216]	@ (8006e10 <Process_USB_input+0x2c8>)
 8006d36:	220c      	movs	r2, #12
 8006d38:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8006d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8006e34 <Process_USB_input+0x2ec>)
 8006d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8006e38 <Process_USB_input+0x2f0>)
 8006d3e:	0011      	movs	r1, r2
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7fd f805 	bl	8003d50 <uint8ArrayToString>
        ProcessCmd(received);
 8006d46:	4c32      	ldr	r4, [pc, #200]	@ (8006e10 <Process_USB_input+0x2c8>)
 8006d48:	466b      	mov	r3, sp
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	0023      	movs	r3, r4
 8006d4e:	3310      	adds	r3, #16
 8006d50:	22f4      	movs	r2, #244	@ 0xf4
 8006d52:	0019      	movs	r1, r3
 8006d54:	f01b ff2c 	bl	8022bb0 <memcpy>
 8006d58:	6820      	ldr	r0, [r4, #0]
 8006d5a:	6861      	ldr	r1, [r4, #4]
 8006d5c:	68a2      	ldr	r2, [r4, #8]
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	f7ff fb46 	bl	80063f0 <ProcessCmd>
        ResetUsbRxDataSize();
 8006d64:	f018 fc16 	bl	801f594 <ResetUsbRxDataSize>
        PC_show_Keys();
 8006d68:	f7ff fd10 	bl	800678c <PC_show_Keys>
        for (uint8_t i=0; i < 8; i++) {
 8006d6c:	2312      	movs	r3, #18
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	e00b      	b.n	8006d8e <Process_USB_input+0x246>
          data[i] = '\0';
 8006d76:	2112      	movs	r1, #18
 8006d78:	187b      	adds	r3, r7, r1
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	18d3      	adds	r3, r2, r3
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 8; i++) {
 8006d84:	187b      	adds	r3, r7, r1
 8006d86:	781a      	ldrb	r2, [r3, #0]
 8006d88:	187b      	adds	r3, r7, r1
 8006d8a:	3201      	adds	r2, #1
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	2312      	movs	r3, #18
 8006d90:	18fb      	adds	r3, r7, r3
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b07      	cmp	r3, #7
 8006d96:	d9ee      	bls.n	8006d76 <Process_USB_input+0x22e>
        }
        return true;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e033      	b.n	8006e04 <Process_USB_input+0x2bc>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8006d9c:	4b27      	ldr	r3, [pc, #156]	@ (8006e3c <Process_USB_input+0x2f4>)
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f7ff fcb4 	bl	800670c <printf_USB>
        ResetUsbRxDataSize();
 8006da4:	f018 fbf6 	bl	801f594 <ResetUsbRxDataSize>
 8006da8:	e003      	b.n	8006db2 <Process_USB_input+0x26a>
      }
    }
    else {
      PC_show_Keys();
 8006daa:	f7ff fcef 	bl	800678c <PC_show_Keys>
      ResetUsbRxDataSize();
 8006dae:	f018 fbf1 	bl	801f594 <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 8; i++) {
 8006db2:	2311      	movs	r3, #17
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	e00b      	b.n	8006dd4 <Process_USB_input+0x28c>
      data[i] = '\0';
 8006dbc:	2111      	movs	r1, #17
 8006dbe:	187b      	adds	r3, r7, r1
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	18d3      	adds	r3, r2, r3
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 8; i++) {
 8006dca:	187b      	adds	r3, r7, r1
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	187b      	adds	r3, r7, r1
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	2311      	movs	r3, #17
 8006dd6:	18fb      	adds	r3, r7, r3
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b07      	cmp	r3, #7
 8006ddc:	d9ee      	bls.n	8006dbc <Process_USB_input+0x274>
    }

  }
  if (formerlength != length) {
 8006dde:	4b18      	ldr	r3, [pc, #96]	@ (8006e40 <Process_USB_input+0x2f8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d008      	beq.n	8006dfa <Process_USB_input+0x2b2>
    printf_USB("USB input: %s\r", (const char*)data);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	4b16      	ldr	r3, [pc, #88]	@ (8006e44 <Process_USB_input+0x2fc>)
 8006dec:	0011      	movs	r1, r2
 8006dee:	0018      	movs	r0, r3
 8006df0:	f7ff fc8c 	bl	800670c <printf_USB>
    formerlength = length;
 8006df4:	4b12      	ldr	r3, [pc, #72]	@ (8006e40 <Process_USB_input+0x2f8>)
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f018 fbeb 	bl	801f5d8 <GetUsbRxNextChunk>

  return false;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	0018      	movs	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	b007      	add	sp, #28
 8006e0a:	bd90      	pop	{r4, r7, pc}
 8006e0c:	08026a30 	.word	0x08026a30
 8006e10:	20000790 	.word	0x20000790
 8006e14:	20000a98 	.word	0x20000a98
 8006e18:	20000a99 	.word	0x20000a99
 8006e1c:	08026a40 	.word	0x08026a40
 8006e20:	08029360 	.word	0x08029360
 8006e24:	20000894 	.word	0x20000894
 8006e28:	08026a70 	.word	0x08026a70
 8006e2c:	20000a9c 	.word	0x20000a9c
 8006e30:	08080000 	.word	0x08080000
 8006e34:	20000792 	.word	0x20000792
 8006e38:	20000aa8 	.word	0x20000aa8
 8006e3c:	08026aa8 	.word	0x08026aa8
 8006e40:	20000898 	.word	0x20000898
 8006e44:	08026ad4 	.word	0x08026ad4

08006e48 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006e4c:	4b26      	ldr	r3, [pc, #152]	@ (8006ee8 <ReadBatteryVoltage+0xa0>)
 8006e4e:	4a27      	ldr	r2, [pc, #156]	@ (8006eec <ReadBatteryVoltage+0xa4>)
 8006e50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006e52:	4b25      	ldr	r3, [pc, #148]	@ (8006ee8 <ReadBatteryVoltage+0xa0>)
 8006e54:	2280      	movs	r2, #128	@ 0x80
 8006e56:	0152      	lsls	r2, r2, #5
 8006e58:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006e5a:	4a23      	ldr	r2, [pc, #140]	@ (8006ee8 <ReadBatteryVoltage+0xa0>)
 8006e5c:	4b24      	ldr	r3, [pc, #144]	@ (8006ef0 <ReadBatteryVoltage+0xa8>)
 8006e5e:	0011      	movs	r1, r2
 8006e60:	0018      	movs	r0, r3
 8006e62:	f00a fb8f 	bl	8011584 <HAL_ADC_ConfigChannel>
 8006e66:	1e03      	subs	r3, r0, #0
 8006e68:	d001      	beq.n	8006e6e <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006e6a:	f003 fa01 	bl	800a270 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006e6e:	4b20      	ldr	r3, [pc, #128]	@ (8006ef0 <ReadBatteryVoltage+0xa8>)
 8006e70:	0018      	movs	r0, r3
 8006e72:	f00a fa8b 	bl	801138c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006e76:	4b1e      	ldr	r3, [pc, #120]	@ (8006ef0 <ReadBatteryVoltage+0xa8>)
 8006e78:	2101      	movs	r1, #1
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	f00a fada 	bl	8011434 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006e80:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <ReadBatteryVoltage+0xa8>)
 8006e82:	0018      	movs	r0, r3
 8006e84:	f00a fb72 	bl	801156c <HAL_ADC_GetValue>
 8006e88:	0002      	movs	r2, r0
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef4 <ReadBatteryVoltage+0xac>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4353      	muls	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4919      	ldr	r1, [pc, #100]	@ (8006ef8 <ReadBatteryVoltage+0xb0>)
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7f9 f985 	bl	80001a4 <__udivsi3>
 8006e9a:	0003      	movs	r3, r0
 8006e9c:	001a      	movs	r2, r3
 8006e9e:	4b17      	ldr	r3, [pc, #92]	@ (8006efc <ReadBatteryVoltage+0xb4>)
 8006ea0:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006ea2:	4b16      	ldr	r3, [pc, #88]	@ (8006efc <ReadBatteryVoltage+0xb4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7fa fbde 	bl	8001668 <__aeabi_ui2f>
 8006eac:	1c03      	adds	r3, r0, #0
 8006eae:	4914      	ldr	r1, [pc, #80]	@ (8006f00 <ReadBatteryVoltage+0xb8>)
 8006eb0:	1c18      	adds	r0, r3, #0
 8006eb2:	f7f9 fe8f 	bl	8000bd4 <__aeabi_fdiv>
 8006eb6:	1c03      	adds	r3, r0, #0
 8006eb8:	1c1a      	adds	r2, r3, #0
 8006eba:	4b12      	ldr	r3, [pc, #72]	@ (8006f04 <ReadBatteryVoltage+0xbc>)
 8006ebc:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <ReadBatteryVoltage+0xa0>)
 8006ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <ReadBatteryVoltage+0xa4>)
 8006ec2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006ec4:	4b08      	ldr	r3, [pc, #32]	@ (8006ee8 <ReadBatteryVoltage+0xa0>)
 8006ec6:	4a10      	ldr	r2, [pc, #64]	@ (8006f08 <ReadBatteryVoltage+0xc0>)
 8006ec8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006eca:	4a07      	ldr	r2, [pc, #28]	@ (8006ee8 <ReadBatteryVoltage+0xa0>)
 8006ecc:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <ReadBatteryVoltage+0xa8>)
 8006ece:	0011      	movs	r1, r2
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f00a fb57 	bl	8011584 <HAL_ADC_ConfigChannel>
 8006ed6:	1e03      	subs	r3, r0, #0
 8006ed8:	d001      	beq.n	8006ede <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006eda:	f003 f9c9 	bl	800a270 <Error_Handler>
  }
  return trueValue;
 8006ede:	4b09      	ldr	r3, [pc, #36]	@ (8006f04 <ReadBatteryVoltage+0xbc>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 }
 8006ee2:	1c18      	adds	r0, r3, #0
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000ac8 	.word	0x20000ac8
 8006eec:	38004000 	.word	0x38004000
 8006ef0:	20000b04 	.word	0x20000b04
 8006ef4:	20000030 	.word	0x20000030
 8006ef8:	00000fff 	.word	0x00000fff
 8006efc:	20000ad0 	.word	0x20000ad0
 8006f00:	447a0000 	.word	0x447a0000
 8006f04:	20000ad4 	.word	0x20000ad4
 8006f08:	00001001 	.word	0x00001001

08006f0c <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006f10:	4b21      	ldr	r3, [pc, #132]	@ (8006f98 <ReadSolarVoltage+0x8c>)
 8006f12:	4a22      	ldr	r2, [pc, #136]	@ (8006f9c <ReadSolarVoltage+0x90>)
 8006f14:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006f16:	4b20      	ldr	r3, [pc, #128]	@ (8006f98 <ReadSolarVoltage+0x8c>)
 8006f18:	2280      	movs	r2, #128	@ 0x80
 8006f1a:	0152      	lsls	r2, r2, #5
 8006f1c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f98 <ReadSolarVoltage+0x8c>)
 8006f20:	4b1f      	ldr	r3, [pc, #124]	@ (8006fa0 <ReadSolarVoltage+0x94>)
 8006f22:	0011      	movs	r1, r2
 8006f24:	0018      	movs	r0, r3
 8006f26:	f00a fb2d 	bl	8011584 <HAL_ADC_ConfigChannel>
 8006f2a:	1e03      	subs	r3, r0, #0
 8006f2c:	d001      	beq.n	8006f32 <ReadSolarVoltage+0x26>
    Error_Handler();
 8006f2e:	f003 f99f 	bl	800a270 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006f32:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa0 <ReadSolarVoltage+0x94>)
 8006f34:	0018      	movs	r0, r3
 8006f36:	f00a fa29 	bl	801138c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006f3a:	4b19      	ldr	r3, [pc, #100]	@ (8006fa0 <ReadSolarVoltage+0x94>)
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	0018      	movs	r0, r3
 8006f40:	f00a fa78 	bl	8011434 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006f44:	4b16      	ldr	r3, [pc, #88]	@ (8006fa0 <ReadSolarVoltage+0x94>)
 8006f46:	0018      	movs	r0, r3
 8006f48:	f00a fb10 	bl	801156c <HAL_ADC_GetValue>
 8006f4c:	0002      	movs	r2, r0
 8006f4e:	4b15      	ldr	r3, [pc, #84]	@ (8006fa4 <ReadSolarVoltage+0x98>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	435a      	muls	r2, r3
 8006f54:	0013      	movs	r3, r2
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	189b      	adds	r3, r3, r2
 8006f5a:	4913      	ldr	r1, [pc, #76]	@ (8006fa8 <ReadSolarVoltage+0x9c>)
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7f9 f921 	bl	80001a4 <__udivsi3>
 8006f62:	0003      	movs	r3, r0
 8006f64:	001a      	movs	r2, r3
 8006f66:	4b11      	ldr	r3, [pc, #68]	@ (8006fac <ReadSolarVoltage+0xa0>)
 8006f68:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f98 <ReadSolarVoltage+0x8c>)
 8006f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f9c <ReadSolarVoltage+0x90>)
 8006f6e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006f70:	4b09      	ldr	r3, [pc, #36]	@ (8006f98 <ReadSolarVoltage+0x8c>)
 8006f72:	4a0f      	ldr	r2, [pc, #60]	@ (8006fb0 <ReadSolarVoltage+0xa4>)
 8006f74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006f76:	4a08      	ldr	r2, [pc, #32]	@ (8006f98 <ReadSolarVoltage+0x8c>)
 8006f78:	4b09      	ldr	r3, [pc, #36]	@ (8006fa0 <ReadSolarVoltage+0x94>)
 8006f7a:	0011      	movs	r1, r2
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f00a fb01 	bl	8011584 <HAL_ADC_ConfigChannel>
 8006f82:	1e03      	subs	r3, r0, #0
 8006f84:	d001      	beq.n	8006f8a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006f86:	f003 f973 	bl	800a270 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006f8a:	4b08      	ldr	r3, [pc, #32]	@ (8006fac <ReadSolarVoltage+0xa0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 }
 8006f90:	0018      	movs	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			@ (mov r8, r8)
 8006f98:	20000ac8 	.word	0x20000ac8
 8006f9c:	3c008000 	.word	0x3c008000
 8006fa0:	20000b04 	.word	0x20000b04
 8006fa4:	20000030 	.word	0x20000030
 8006fa8:	00000fff 	.word	0x00000fff
 8006fac:	20000ad8 	.word	0x20000ad8
 8006fb0:	00001001 	.word	0x00001001

08006fb4 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006fb8:	23a0      	movs	r3, #160	@ 0xa0
 8006fba:	05db      	lsls	r3, r3, #23
 8006fbc:	2180      	movs	r1, #128	@ 0x80
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f00b fa7c 	bl	80124bc <HAL_GPIO_ReadPin>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	1e5a      	subs	r2, r3, #1
 8006fc8:	4193      	sbcs	r3, r2
 8006fca:	b2db      	uxtb	r3, r3
}
 8006fcc:	0018      	movs	r0, r3
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006fd6:	2380      	movs	r3, #128	@ 0x80
 8006fd8:	021a      	lsls	r2, r3, #8
 8006fda:	23a0      	movs	r3, #160	@ 0xa0
 8006fdc:	05db      	lsls	r3, r3, #23
 8006fde:	0011      	movs	r1, r2
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f00b fa6b 	bl	80124bc <HAL_GPIO_ReadPin>
 8006fe6:	0003      	movs	r3, r0
 8006fe8:	1e5a      	subs	r2, r3, #1
 8006fea:	4193      	sbcs	r3, r2
 8006fec:	b2db      	uxtb	r3, r3
}
 8006fee:	0018      	movs	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006ff8:	4b05      	ldr	r3, [pc, #20]	@ (8007010 <UserButton_Pressed+0x1c>)
 8006ffa:	2104      	movs	r1, #4
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f00b fa5d 	bl	80124bc <HAL_GPIO_ReadPin>
 8007002:	0003      	movs	r3, r0
 8007004:	425a      	negs	r2, r3
 8007006:	4153      	adcs	r3, r2
 8007008:	b2db      	uxtb	r3, r3
}
 800700a:	0018      	movs	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	50000c00 	.word	0x50000c00

08007014 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	46d6      	mov	lr, sl
 8007018:	464f      	mov	r7, r9
 800701a:	4646      	mov	r6, r8
 800701c:	b5c0      	push	{r6, r7, lr}
 800701e:	b08e      	sub	sp, #56	@ 0x38
 8007020:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8007022:	4b21      	ldr	r3, [pc, #132]	@ (80070a8 <showTime+0x94>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d036      	beq.n	8007098 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800702a:	003a      	movs	r2, r7
 800702c:	1d3b      	adds	r3, r7, #4
 800702e:	0011      	movs	r1, r2
 8007030:	0018      	movs	r0, r3
 8007032:	f000 fa2b 	bl	800748c <RTC_GetTime>
  UpdateSystemUptime();
 8007036:	f000 f83f 	bl	80070b8 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800703a:	003b      	movs	r3, r7
 800703c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800703e:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007040:	003b      	movs	r3, r7
 8007042:	785b      	ldrb	r3, [r3, #1]
 8007044:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007046:	4b19      	ldr	r3, [pc, #100]	@ (80070ac <showTime+0x98>)
 8007048:	0092      	lsls	r2, r2, #2
 800704a:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800704c:	003b      	movs	r3, r7
 800704e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007050:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007056:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007058:	1d3b      	adds	r3, r7, #4
 800705a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800705c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800705e:	1d3b      	adds	r3, r7, #4
 8007060:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007062:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007064:	4b12      	ldr	r3, [pc, #72]	@ (80070b0 <showTime+0x9c>)
 8007066:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007068:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800706a:	4b11      	ldr	r3, [pc, #68]	@ (80070b0 <showTime+0x9c>)
 800706c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800706e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007070:	4b0f      	ldr	r3, [pc, #60]	@ (80070b0 <showTime+0x9c>)
 8007072:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007074:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007076:	4b0e      	ldr	r3, [pc, #56]	@ (80070b0 <showTime+0x9c>)
 8007078:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800707a:	480e      	ldr	r0, [pc, #56]	@ (80070b4 <showTime+0xa0>)
 800707c:	9306      	str	r3, [sp, #24]
 800707e:	4643      	mov	r3, r8
 8007080:	9305      	str	r3, [sp, #20]
 8007082:	4663      	mov	r3, ip
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	9603      	str	r6, [sp, #12]
 8007088:	9502      	str	r5, [sp, #8]
 800708a:	9401      	str	r4, [sp, #4]
 800708c:	9100      	str	r1, [sp, #0]
 800708e:	4653      	mov	r3, sl
 8007090:	4649      	mov	r1, r9
 8007092:	f01b fadb 	bl	802264c <iprintf>
 8007096:	e000      	b.n	800709a <showTime+0x86>
    return;
 8007098:	46c0      	nop			@ (mov r8, r8)
}
 800709a:	46bd      	mov	sp, r7
 800709c:	b006      	add	sp, #24
 800709e:	bce0      	pop	{r5, r6, r7}
 80070a0:	46ba      	mov	sl, r7
 80070a2:	46b1      	mov	r9, r6
 80070a4:	46a8      	mov	r8, r5
 80070a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a8:	20000ae8 	.word	0x20000ae8
 80070ac:	20000050 	.word	0x20000050
 80070b0:	20000adc 	.word	0x20000adc
 80070b4:	08026b30 	.word	0x08026b30

080070b8 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80070be:	003a      	movs	r2, r7
 80070c0:	1d3b      	adds	r3, r7, #4
 80070c2:	0011      	movs	r1, r2
 80070c4:	0018      	movs	r0, r3
 80070c6:	f000 f9e1 	bl	800748c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 80070ca:	1d3a      	adds	r2, r7, #4
 80070cc:	003b      	movs	r3, r7
 80070ce:	0011      	movs	r1, r2
 80070d0:	0018      	movs	r0, r3
 80070d2:	f000 fbad 	bl	8007830 <makeTime>
 80070d6:	0002      	movs	r2, r0
 80070d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007154 <UpdateSystemUptime+0x9c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	213c      	movs	r1, #60	@ 0x3c
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7f9 f8e1 	bl	80002b0 <__aeabi_uidivmod>
 80070ee:	000b      	movs	r3, r1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	4b19      	ldr	r3, [pc, #100]	@ (8007158 <UpdateSystemUptime+0xa0>)
 80070f4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	213c      	movs	r1, #60	@ 0x3c
 80070fa:	0018      	movs	r0, r3
 80070fc:	f7f9 f852 	bl	80001a4 <__udivsi3>
 8007100:	0003      	movs	r3, r0
 8007102:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	213c      	movs	r1, #60	@ 0x3c
 8007108:	0018      	movs	r0, r3
 800710a:	f7f9 f8d1 	bl	80002b0 <__aeabi_uidivmod>
 800710e:	000b      	movs	r3, r1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	4b11      	ldr	r3, [pc, #68]	@ (8007158 <UpdateSystemUptime+0xa0>)
 8007114:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	213c      	movs	r1, #60	@ 0x3c
 800711a:	0018      	movs	r0, r3
 800711c:	f7f9 f842 	bl	80001a4 <__udivsi3>
 8007120:	0003      	movs	r3, r0
 8007122:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2118      	movs	r1, #24
 8007128:	0018      	movs	r0, r3
 800712a:	f7f9 f8c1 	bl	80002b0 <__aeabi_uidivmod>
 800712e:	000b      	movs	r3, r1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <UpdateSystemUptime+0xa0>)
 8007134:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2118      	movs	r1, #24
 800713a:	0018      	movs	r0, r3
 800713c:	f7f9 f832 	bl	80001a4 <__udivsi3>
 8007140:	0003      	movs	r3, r0
 8007142:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	b29a      	uxth	r2, r3
 8007148:	4b03      	ldr	r3, [pc, #12]	@ (8007158 <UpdateSystemUptime+0xa0>)
 800714a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800714c:	46c0      	nop			@ (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b008      	add	sp, #32
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000ae8 	.word	0x20000ae8
 8007158:	20000adc 	.word	0x20000adc

0800715c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	0008      	movs	r0, r1
 8007166:	0011      	movs	r1, r2
 8007168:	1cfb      	adds	r3, r7, #3
 800716a:	1c02      	adds	r2, r0, #0
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	1cbb      	adds	r3, r7, #2
 8007170:	1c0a      	adds	r2, r1, #0
 8007172:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8007174:	230e      	movs	r3, #14
 8007176:	18fb      	adds	r3, r7, r3
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800717c:	230f      	movs	r3, #15
 800717e:	18fb      	adds	r3, r7, r3
 8007180:	1cfa      	adds	r2, r7, #3
 8007182:	7812      	ldrb	r2, [r2, #0]
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e015      	b.n	80071b4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8007188:	200f      	movs	r0, #15
 800718a:	183b      	adds	r3, r7, r0
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	18d2      	adds	r2, r2, r3
 8007192:	240e      	movs	r4, #14
 8007194:	193b      	adds	r3, r7, r4
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	7811      	ldrb	r1, [r2, #0]
 800719a:	2208      	movs	r2, #8
 800719c:	18ba      	adds	r2, r7, r2
 800719e:	54d1      	strb	r1, [r2, r3]
    pos++;
 80071a0:	193b      	adds	r3, r7, r4
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	193b      	adds	r3, r7, r4
 80071a6:	3201      	adds	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80071aa:	183b      	adds	r3, r7, r0
 80071ac:	781a      	ldrb	r2, [r3, #0]
 80071ae:	183b      	adds	r3, r7, r0
 80071b0:	3201      	adds	r2, #1
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	200f      	movs	r0, #15
 80071b6:	183a      	adds	r2, r7, r0
 80071b8:	1cbb      	adds	r3, r7, #2
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d9e2      	bls.n	8007188 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80071c2:	230e      	movs	r3, #14
 80071c4:	18fb      	adds	r3, r7, r3
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2208      	movs	r2, #8
 80071ca:	18ba      	adds	r2, r7, r2
 80071cc:	2100      	movs	r1, #0
 80071ce:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80071d0:	1cfb      	adds	r3, r7, #3
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b13      	cmp	r3, #19
 80071d6:	d849      	bhi.n	800726c <aBuff2int+0x110>
    if (start == 17) { //month
 80071d8:	1cfb      	adds	r3, r7, #3
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b11      	cmp	r3, #17
 80071de:	d122      	bne.n	8007226 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80071e0:	183b      	adds	r3, r7, r0
 80071e2:	2200      	movs	r2, #0
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	e018      	b.n	800721a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80071e8:	240f      	movs	r4, #15
 80071ea:	193b      	adds	r3, r7, r4
 80071ec:	781a      	ldrb	r2, [r3, #0]
 80071ee:	4b25      	ldr	r3, [pc, #148]	@ (8007284 <aBuff2int+0x128>)
 80071f0:	0092      	lsls	r2, r2, #2
 80071f2:	58d2      	ldr	r2, [r2, r3]
 80071f4:	2308      	movs	r3, #8
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	0011      	movs	r1, r2
 80071fa:	0018      	movs	r0, r3
 80071fc:	f7f8 ffac 	bl	8000158 <strcmp>
 8007200:	1e03      	subs	r3, r0, #0
 8007202:	d104      	bne.n	800720e <aBuff2int+0xb2>
          return i+1;
 8007204:	193b      	adds	r3, r7, r4
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	3301      	adds	r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	e035      	b.n	800727a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800720e:	210f      	movs	r1, #15
 8007210:	187b      	adds	r3, r7, r1
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	187b      	adds	r3, r7, r1
 8007216:	3201      	adds	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	230f      	movs	r3, #15
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b0b      	cmp	r3, #11
 8007222:	d9e1      	bls.n	80071e8 <aBuff2int+0x8c>
 8007224:	e022      	b.n	800726c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8007226:	230f      	movs	r3, #15
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
 800722e:	e018      	b.n	8007262 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8007230:	240f      	movs	r4, #15
 8007232:	193b      	adds	r3, r7, r4
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	4b14      	ldr	r3, [pc, #80]	@ (8007288 <aBuff2int+0x12c>)
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	58d2      	ldr	r2, [r2, r3]
 800723c:	2308      	movs	r3, #8
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	0011      	movs	r1, r2
 8007242:	0018      	movs	r0, r3
 8007244:	f7f8 ff88 	bl	8000158 <strcmp>
 8007248:	1e03      	subs	r3, r0, #0
 800724a:	d104      	bne.n	8007256 <aBuff2int+0xfa>
          return i+1;
 800724c:	193b      	adds	r3, r7, r4
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	3301      	adds	r3, #1
 8007252:	b2db      	uxtb	r3, r3
 8007254:	e011      	b.n	800727a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8007256:	210f      	movs	r1, #15
 8007258:	187b      	adds	r3, r7, r1
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	187b      	adds	r3, r7, r1
 800725e:	3201      	adds	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	230f      	movs	r3, #15
 8007264:	18fb      	adds	r3, r7, r3
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b06      	cmp	r3, #6
 800726a:	d9e1      	bls.n	8007230 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800726c:	2308      	movs	r3, #8
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	0018      	movs	r0, r3
 8007272:	f019 fe10 	bl	8020e96 <atoi>
 8007276:	0003      	movs	r3, r0
 8007278:	b2db      	uxtb	r3, r3
}
 800727a:	0018      	movs	r0, r3
 800727c:	46bd      	mov	sp, r7
 800727e:	b005      	add	sp, #20
 8007280:	bd90      	pop	{r4, r7, pc}
 8007282:	46c0      	nop			@ (mov r8, r8)
 8007284:	20000050 	.word	0x20000050
 8007288:	20000034 	.word	0x20000034

0800728c <ParseTime>:

void ParseTime(char* buffer) {
 800728c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800728e:	b08b      	sub	sp, #44	@ 0x2c
 8007290:	af02      	add	r7, sp, #8
 8007292:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007294:	2408      	movs	r4, #8
 8007296:	193a      	adds	r2, r7, r4
 8007298:	260c      	movs	r6, #12
 800729a:	19bb      	adds	r3, r7, r6
 800729c:	0011      	movs	r1, r2
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 f8f4 	bl	800748c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2219      	movs	r2, #25
 80072a8:	2118      	movs	r1, #24
 80072aa:	0018      	movs	r0, r3
 80072ac:	f7ff ff56 	bl	800715c <aBuff2int>
 80072b0:	0003      	movs	r3, r0
 80072b2:	001a      	movs	r2, r3
 80072b4:	19bb      	adds	r3, r7, r6
 80072b6:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	221c      	movs	r2, #28
 80072bc:	211b      	movs	r1, #27
 80072be:	0018      	movs	r0, r3
 80072c0:	f7ff ff4c 	bl	800715c <aBuff2int>
 80072c4:	0003      	movs	r3, r0
 80072c6:	001a      	movs	r2, r3
 80072c8:	19bb      	adds	r3, r7, r6
 80072ca:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	221f      	movs	r2, #31
 80072d0:	211e      	movs	r1, #30
 80072d2:	0018      	movs	r0, r3
 80072d4:	f7ff ff42 	bl	800715c <aBuff2int>
 80072d8:	0003      	movs	r3, r0
 80072da:	001a      	movs	r2, r3
 80072dc:	19bb      	adds	r3, r7, r6
 80072de:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2224      	movs	r2, #36	@ 0x24
 80072e4:	2123      	movs	r1, #35	@ 0x23
 80072e6:	0018      	movs	r0, r3
 80072e8:	f7ff ff38 	bl	800715c <aBuff2int>
 80072ec:	0003      	movs	r3, r0
 80072ee:	001a      	movs	r2, r3
 80072f0:	0025      	movs	r5, r4
 80072f2:	197b      	adds	r3, r7, r5
 80072f4:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2213      	movs	r2, #19
 80072fa:	2111      	movs	r1, #17
 80072fc:	0018      	movs	r0, r3
 80072fe:	f7ff ff2d 	bl	800715c <aBuff2int>
 8007302:	0003      	movs	r3, r0
 8007304:	001a      	movs	r2, r3
 8007306:	197b      	adds	r3, r7, r5
 8007308:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2216      	movs	r2, #22
 800730e:	2115      	movs	r1, #21
 8007310:	0018      	movs	r0, r3
 8007312:	f7ff ff23 	bl	800715c <aBuff2int>
 8007316:	0003      	movs	r3, r0
 8007318:	001a      	movs	r2, r3
 800731a:	197b      	adds	r3, r7, r5
 800731c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	220f      	movs	r2, #15
 8007322:	210d      	movs	r1, #13
 8007324:	0018      	movs	r0, r3
 8007326:	f7ff ff19 	bl	800715c <aBuff2int>
 800732a:	0003      	movs	r3, r0
 800732c:	001a      	movs	r2, r3
 800732e:	197b      	adds	r3, r7, r5
 8007330:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8007332:	19bb      	adds	r3, r7, r6
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	001c      	movs	r4, r3
 8007338:	19bb      	adds	r3, r7, r6
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	0018      	movs	r0, r3
 800733e:	19bb      	adds	r3, r7, r6
 8007340:	789b      	ldrb	r3, [r3, #2]
 8007342:	4a1c      	ldr	r2, [pc, #112]	@ (80073b4 <ParseTime+0x128>)
 8007344:	491c      	ldr	r1, [pc, #112]	@ (80073b8 <ParseTime+0x12c>)
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	9000      	str	r0, [sp, #0]
 800734a:	0023      	movs	r3, r4
 800734c:	2003      	movs	r0, #3
 800734e:	f009 f9f5 	bl	801073c <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8007352:	197b      	adds	r3, r7, r5
 8007354:	789b      	ldrb	r3, [r3, #2]
 8007356:	001c      	movs	r4, r3
 8007358:	197b      	adds	r3, r7, r5
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	0018      	movs	r0, r3
 800735e:	197b      	adds	r3, r7, r5
 8007360:	78db      	ldrb	r3, [r3, #3]
 8007362:	4a16      	ldr	r2, [pc, #88]	@ (80073bc <ParseTime+0x130>)
 8007364:	4914      	ldr	r1, [pc, #80]	@ (80073b8 <ParseTime+0x12c>)
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	9000      	str	r0, [sp, #0]
 800736a:	0023      	movs	r3, r4
 800736c:	2003      	movs	r0, #3
 800736e:	f009 f9e5 	bl	801073c <CreateLine>
  RTC_SetTime(&currentTime);
 8007372:	19bb      	adds	r3, r7, r6
 8007374:	0018      	movs	r0, r3
 8007376:	f000 f825 	bl	80073c4 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800737a:	197b      	adds	r3, r7, r5
 800737c:	0018      	movs	r0, r3
 800737e:	f000 f847 	bl	8007410 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8007382:	197b      	adds	r3, r7, r5
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d101      	bne.n	800738e <ParseTime+0x102>
    reset_fanCleaningDone();
 800738a:	f003 ffed 	bl	800b368 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 800738e:	4b0c      	ldr	r3, [pc, #48]	@ (80073c0 <ParseTime+0x134>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8007396:	230c      	movs	r3, #12
 8007398:	18fa      	adds	r2, r7, r3
 800739a:	2308      	movs	r3, #8
 800739c:	18fb      	adds	r3, r7, r3
 800739e:	0011      	movs	r1, r2
 80073a0:	0018      	movs	r0, r3
 80073a2:	f000 fa45 	bl	8007830 <makeTime>
 80073a6:	0002      	movs	r2, r0
 80073a8:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <ParseTime+0x134>)
 80073aa:	601a      	str	r2, [r3, #0]
  }
}
 80073ac:	46c0      	nop			@ (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b009      	add	sp, #36	@ 0x24
 80073b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b4:	08026b88 	.word	0x08026b88
 80073b8:	08026bc0 	.word	0x08026bc0
 80073bc:	08026bc4 	.word	0x08026bc4
 80073c0:	20000ae8 	.word	0x20000ae8

080073c4 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80073de:	4b09      	ldr	r3, [pc, #36]	@ (8007404 <RTC_SetTime+0x40>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	0018      	movs	r0, r3
 80073e8:	f011 f9ac 	bl	8018744 <HAL_RTC_SetTime>
 80073ec:	1e03      	subs	r3, r0, #0
 80073ee:	d005      	beq.n	80073fc <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80073f0:	4a05      	ldr	r2, [pc, #20]	@ (8007408 <RTC_SetTime+0x44>)
 80073f2:	4b06      	ldr	r3, [pc, #24]	@ (800740c <RTC_SetTime+0x48>)
 80073f4:	0019      	movs	r1, r3
 80073f6:	2001      	movs	r0, #1
 80073f8:	f009 f9a0 	bl	801073c <CreateLine>
    }
}
 80073fc:	46c0      	nop			@ (mov r8, r8)
 80073fe:	46bd      	mov	sp, r7
 8007400:	b002      	add	sp, #8
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000ae4 	.word	0x20000ae4
 8007408:	08026bf8 	.word	0x08026bf8
 800740c:	08026c14 	.word	0x08026c14

08007410 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007418:	4b16      	ldr	r3, [pc, #88]	@ (8007474 <RTC_SetDate+0x64>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	0018      	movs	r0, r3
 8007422:	f011 fa97 	bl	8018954 <HAL_RTC_SetDate>
 8007426:	1e03      	subs	r3, r0, #0
 8007428:	d005      	beq.n	8007436 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800742a:	4a13      	ldr	r2, [pc, #76]	@ (8007478 <RTC_SetDate+0x68>)
 800742c:	4b13      	ldr	r3, [pc, #76]	@ (800747c <RTC_SetDate+0x6c>)
 800742e:	0019      	movs	r1, r3
 8007430:	2001      	movs	r0, #1
 8007432:	f009 f983 	bl	801073c <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8007436:	4b0f      	ldr	r3, [pc, #60]	@ (8007474 <RTC_SetDate+0x64>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2101      	movs	r1, #1
 800743c:	0018      	movs	r0, r3
 800743e:	f011 fdcf 	bl	8018fe0 <HAL_RTCEx_BKUPRead>
 8007442:	0003      	movs	r3, r0
 8007444:	4a0e      	ldr	r2, [pc, #56]	@ (8007480 <RTC_SetDate+0x70>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d010      	beq.n	800746c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800744a:	4a0e      	ldr	r2, [pc, #56]	@ (8007484 <RTC_SetDate+0x74>)
 800744c:	4b0e      	ldr	r3, [pc, #56]	@ (8007488 <RTC_SetDate+0x78>)
 800744e:	0019      	movs	r1, r3
 8007450:	2003      	movs	r0, #3
 8007452:	f009 f973 	bl	801073c <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8007456:	f010 f8f5 	bl	8017644 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800745a:	4b06      	ldr	r3, [pc, #24]	@ (8007474 <RTC_SetDate+0x64>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a08      	ldr	r2, [pc, #32]	@ (8007480 <RTC_SetDate+0x70>)
 8007460:	2101      	movs	r1, #1
 8007462:	0018      	movs	r0, r3
 8007464:	f011 fda4 	bl	8018fb0 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8007468:	f010 f8fa 	bl	8017660 <HAL_PWR_DisableBkUpAccess>
    }
}
 800746c:	46c0      	nop			@ (mov r8, r8)
 800746e:	46bd      	mov	sp, r7
 8007470:	b002      	add	sp, #8
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000ae4 	.word	0x20000ae4
 8007478:	08026c18 	.word	0x08026c18
 800747c:	08026c14 	.word	0x08026c14
 8007480:	0000bebe 	.word	0x0000bebe
 8007484:	08026c34 	.word	0x08026c34
 8007488:	08026bc0 	.word	0x08026bc0

0800748c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800748c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8007496:	250f      	movs	r5, #15
 8007498:	197b      	adds	r3, r7, r5
 800749a:	2201      	movs	r2, #1
 800749c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800749e:	230e      	movs	r3, #14
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 80074a6:	260c      	movs	r6, #12
 80074a8:	19bc      	adds	r4, r7, r6
 80074aa:	f008 f9d9 	bl	800f860 <powerCheck>
 80074ae:	0003      	movs	r3, r0
 80074b0:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 80074b2:	19bb      	adds	r3, r7, r6
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d104      	bne.n	80074c4 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 80074ba:	197b      	adds	r3, r7, r5
 80074bc:	781a      	ldrb	r2, [r3, #0]
 80074be:	197b      	adds	r3, r7, r5
 80074c0:	3201      	adds	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 80074c4:	230d      	movs	r3, #13
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	2200      	movs	r2, #0
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	e039      	b.n	8007542 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80074ce:	4b23      	ldr	r3, [pc, #140]	@ (800755c <RTC_GetTime+0xd0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	0018      	movs	r0, r3
 80074d8:	f011 f9de 	bl	8018898 <HAL_RTC_GetTime>
 80074dc:	1e03      	subs	r3, r0, #0
 80074de:	d005      	beq.n	80074ec <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80074e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007560 <RTC_GetTime+0xd4>)
 80074e2:	4b20      	ldr	r3, [pc, #128]	@ (8007564 <RTC_GetTime+0xd8>)
 80074e4:	0019      	movs	r1, r3
 80074e6:	2001      	movs	r0, #1
 80074e8:	f009 f928 	bl	801073c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80074ec:	4b1b      	ldr	r3, [pc, #108]	@ (800755c <RTC_GetTime+0xd0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	2200      	movs	r2, #0
 80074f4:	0018      	movs	r0, r3
 80074f6:	f011 fac1 	bl	8018a7c <HAL_RTC_GetDate>
 80074fa:	1e03      	subs	r3, r0, #0
 80074fc:	d005      	beq.n	800750a <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80074fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007568 <RTC_GetTime+0xdc>)
 8007500:	4b18      	ldr	r3, [pc, #96]	@ (8007564 <RTC_GetTime+0xd8>)
 8007502:	0019      	movs	r1, r3
 8007504:	2001      	movs	r0, #1
 8007506:	f009 f919 	bl	801073c <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800750a:	230c      	movs	r3, #12
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d110      	bne.n	8007536 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	210e      	movs	r1, #14
 800751a:	187a      	adds	r2, r7, r1
 800751c:	7812      	ldrb	r2, [r2, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d018      	beq.n	8007554 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8007522:	187b      	adds	r3, r7, r1
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7812      	ldrb	r2, [r2, #0]
 8007528:	701a      	strb	r2, [r3, #0]
        t++;
 800752a:	210f      	movs	r1, #15
 800752c:	187b      	adds	r3, r7, r1
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	187b      	adds	r3, r7, r1
 8007532:	3201      	adds	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8007536:	210d      	movs	r1, #13
 8007538:	187b      	adds	r3, r7, r1
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	187b      	adds	r3, r7, r1
 800753e:	3201      	adds	r2, #1
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	230d      	movs	r3, #13
 8007544:	18fa      	adds	r2, r7, r3
 8007546:	230f      	movs	r3, #15
 8007548:	18fb      	adds	r3, r7, r3
 800754a:	7812      	ldrb	r2, [r2, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d3bd      	bcc.n	80074ce <RTC_GetTime+0x42>
 8007552:	e000      	b.n	8007556 <RTC_GetTime+0xca>
      }
      else {
        return;
 8007554:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8007556:	46bd      	mov	sp, r7
 8007558:	b005      	add	sp, #20
 800755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755c:	20000ae4 	.word	0x20000ae4
 8007560:	08026c4c 	.word	0x08026c4c
 8007564:	08026c14 	.word	0x08026c14
 8007568:	08026c68 	.word	0x08026c68

0800756c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007572:	003a      	movs	r2, r7
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	0011      	movs	r1, r2
 8007578:	0018      	movs	r0, r3
 800757a:	f7ff ff87 	bl	800748c <RTC_GetTime>
  return currentDate.WeekDay;
 800757e:	003b      	movs	r3, r7
 8007580:	781b      	ldrb	r3, [r3, #0]
}
 8007582:	0018      	movs	r0, r3
 8007584:	46bd      	mov	sp, r7
 8007586:	b006      	add	sp, #24
 8007588:	bd80      	pop	{r7, pc}

0800758a <getPosixTime>:

uint32_t getPosixTime(void) {
 800758a:	b580      	push	{r7, lr}
 800758c:	b086      	sub	sp, #24
 800758e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007590:	003a      	movs	r2, r7
 8007592:	1d3b      	adds	r3, r7, #4
 8007594:	0011      	movs	r1, r2
 8007596:	0018      	movs	r0, r3
 8007598:	f7ff ff78 	bl	800748c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800759c:	1d3a      	adds	r2, r7, #4
 800759e:	003b      	movs	r3, r7
 80075a0:	0011      	movs	r1, r2
 80075a2:	0018      	movs	r0, r3
 80075a4:	f000 f944 	bl	8007830 <makeTime>
 80075a8:	0003      	movs	r3, r0
}
 80075aa:	0018      	movs	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	b006      	add	sp, #24
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 80075b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b6:	b08d      	sub	sp, #52	@ 0x34
 80075b8:	af04      	add	r7, sp, #16
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 80075be:	240c      	movs	r4, #12
 80075c0:	193a      	adds	r2, r7, r4
 80075c2:	2508      	movs	r5, #8
 80075c4:	1979      	adds	r1, r7, r5
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	0018      	movs	r0, r3
 80075ca:	f000 f9fb 	bl	80079c4 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80075ce:	002a      	movs	r2, r5
 80075d0:	18bb      	adds	r3, r7, r2
 80075d2:	789b      	ldrb	r3, [r3, #2]
 80075d4:	001e      	movs	r6, r3
 80075d6:	18bb      	adds	r3, r7, r2
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	469c      	mov	ip, r3
 80075dc:	18bb      	adds	r3, r7, r2
 80075de:	78db      	ldrb	r3, [r3, #3]
 80075e0:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80075e2:	0021      	movs	r1, r4
 80075e4:	187b      	adds	r3, r7, r1
 80075e6:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80075e8:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80075ea:	187b      	adds	r3, r7, r1
 80075ec:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80075ee:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80075f0:	187b      	adds	r3, r7, r1
 80075f2:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80075f4:	4906      	ldr	r1, [pc, #24]	@ (8007610 <getUTCfromPosixTime+0x5c>)
 80075f6:	6838      	ldr	r0, [r7, #0]
 80075f8:	9303      	str	r3, [sp, #12]
 80075fa:	9502      	str	r5, [sp, #8]
 80075fc:	9401      	str	r4, [sp, #4]
 80075fe:	9200      	str	r2, [sp, #0]
 8007600:	4663      	mov	r3, ip
 8007602:	0032      	movs	r2, r6
 8007604:	f01b f892 	bl	802272c <siprintf>
}
 8007608:	46c0      	nop			@ (mov r8, r8)
 800760a:	46bd      	mov	sp, r7
 800760c:	b009      	add	sp, #36	@ 0x24
 800760e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007610:	08026c84 	.word	0x08026c84

08007614 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800761c:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <RTC_SetWakeUpTimer+0x4c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	0018      	movs	r0, r3
 8007622:	f011 fc29 	bl	8018e78 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8007626:	4b0e      	ldr	r3, [pc, #56]	@ (8007660 <RTC_SetWakeUpTimer+0x4c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	22ff      	movs	r2, #255	@ 0xff
 8007630:	401a      	ands	r2, r3
 8007632:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <RTC_SetWakeUpTimer+0x4c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	490a      	ldr	r1, [pc, #40]	@ (8007664 <RTC_SetWakeUpTimer+0x50>)
 800763a:	430a      	orrs	r2, r1
 800763c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800763e:	4b0a      	ldr	r3, [pc, #40]	@ (8007668 <RTC_SetWakeUpTimer+0x54>)
 8007640:	2280      	movs	r2, #128	@ 0x80
 8007642:	0352      	lsls	r2, r2, #13
 8007644:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8007646:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <RTC_SetWakeUpTimer+0x4c>)
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3b01      	subs	r3, #1
 800764e:	2204      	movs	r2, #4
 8007650:	0019      	movs	r1, r3
 8007652:	f011 fb39 	bl	8018cc8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8007656:	46c0      	nop			@ (mov r8, r8)
 8007658:	46bd      	mov	sp, r7
 800765a:	b002      	add	sp, #8
 800765c:	bd80      	pop	{r7, pc}
 800765e:	46c0      	nop			@ (mov r8, r8)
 8007660:	20000ae4 	.word	0x20000ae4
 8007664:	fffffb7f 	.word	0xfffffb7f
 8007668:	40010400 	.word	0x40010400

0800766c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8007670:	4a0b      	ldr	r2, [pc, #44]	@ (80076a0 <Enter_Standby_Mode+0x34>)
 8007672:	4b0c      	ldr	r3, [pc, #48]	@ (80076a4 <Enter_Standby_Mode+0x38>)
 8007674:	0019      	movs	r1, r3
 8007676:	2003      	movs	r0, #3
 8007678:	f009 f860 	bl	801073c <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 800767c:	2064      	movs	r0, #100	@ 0x64
 800767e:	f009 fcb3 	bl	8010fe8 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8007682:	4b09      	ldr	r3, [pc, #36]	@ (80076a8 <Enter_Standby_Mode+0x3c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	0018      	movs	r0, r3
 8007688:	f011 fbf6 	bl	8018e78 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 800768c:	f002 f82a 	bl	80096e4 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8007690:	f009 fcce 	bl	8011030 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8007694:	f010 f850 	bl	8017738 <HAL_PWR_EnterSTANDBYMode>
}
 8007698:	46c0      	nop			@ (mov r8, r8)
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	08026cd8 	.word	0x08026cd8
 80076a4:	08026bc0 	.word	0x08026bc0
 80076a8:	20000ae4 	.word	0x20000ae4

080076ac <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	0002      	movs	r2, r0
 80076b4:	1dbb      	adds	r3, r7, #6
 80076b6:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 80076b8:	4b4a      	ldr	r3, [pc, #296]	@ (80077e4 <Enter_Stop_Mode+0x138>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 80076c0:	f003 fe26 	bl	800b310 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 80076c4:	f7ff fbc0 	bl	8006e48 <ReadBatteryVoltage>
 80076c8:	1c03      	adds	r3, r0, #0
 80076ca:	1c18      	adds	r0, r3, #0
 80076cc:	f7fb feca 	bl	8003464 <__aeabi_f2d>
 80076d0:	0002      	movs	r2, r0
 80076d2:	000b      	movs	r3, r1
 80076d4:	4844      	ldr	r0, [pc, #272]	@ (80077e8 <Enter_Stop_Mode+0x13c>)
 80076d6:	4945      	ldr	r1, [pc, #276]	@ (80077ec <Enter_Stop_Mode+0x140>)
 80076d8:	9200      	str	r2, [sp, #0]
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	0002      	movs	r2, r0
 80076de:	2002      	movs	r0, #2
 80076e0:	f009 f82c 	bl	801073c <CreateLine>
  powerDisplay(powerCheck());
 80076e4:	f008 f8bc 	bl	800f860 <powerCheck>
 80076e8:	0003      	movs	r3, r0
 80076ea:	0018      	movs	r0, r3
 80076ec:	f008 f8d4 	bl	800f898 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 80076f0:	1dbb      	adds	r3, r7, #6
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	4a3e      	ldr	r2, [pc, #248]	@ (80077f0 <Enter_Stop_Mode+0x144>)
 80076f6:	493f      	ldr	r1, [pc, #252]	@ (80077f4 <Enter_Stop_Mode+0x148>)
 80076f8:	2003      	movs	r0, #3
 80076fa:	f009 f81f 	bl	801073c <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 80076fe:	f7ff ff44 	bl	800758a <getPosixTime>
 8007702:	0002      	movs	r2, r0
 8007704:	1dbb      	adds	r3, r7, #6
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	18d3      	adds	r3, r2, r3
 800770a:	4a3b      	ldr	r2, [pc, #236]	@ (80077f8 <Enter_Stop_Mode+0x14c>)
 800770c:	0011      	movs	r1, r2
 800770e:	0018      	movs	r0, r3
 8007710:	f7ff ff50 	bl	80075b4 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8007714:	4b38      	ldr	r3, [pc, #224]	@ (80077f8 <Enter_Stop_Mode+0x14c>)
 8007716:	4a39      	ldr	r2, [pc, #228]	@ (80077fc <Enter_Stop_Mode+0x150>)
 8007718:	4934      	ldr	r1, [pc, #208]	@ (80077ec <Enter_Stop_Mode+0x140>)
 800771a:	2002      	movs	r0, #2
 800771c:	f009 f80e 	bl	801073c <CreateLine>
  HAL_Delay(100);
 8007720:	2064      	movs	r0, #100	@ 0x64
 8007722:	f009 fc61 	bl	8010fe8 <HAL_Delay>
  HAL_SuspendTick();
 8007726:	f009 fc83 	bl	8011030 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800772a:	1dbb      	adds	r3, r7, #6
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	0018      	movs	r0, r3
 8007730:	f7ff ff70 	bl	8007614 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8007734:	2101      	movs	r1, #1
 8007736:	2001      	movs	r0, #1
 8007738:	f00f ffa2 	bl	8017680 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800773c:	f002 fc48 	bl	8009fd0 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8007740:	f009 fc84 	bl	801104c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8007744:	1dbb      	adds	r3, r7, #6
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	0018      	movs	r0, r3
 800774a:	f003 fd55 	bl	800b1f8 <sen5x_enable>
 800774e:	1e03      	subs	r3, r0, #0
 8007750:	d01e      	beq.n	8007790 <Enter_Stop_Mode+0xe4>
    showTime();
 8007752:	f7ff fc5f 	bl	8007014 <showTime>
    set_light_on_state();
 8007756:	f004 fa5d 	bl	800bc14 <set_light_on_state>
    if (!userToggle) {
 800775a:	4b29      	ldr	r3, [pc, #164]	@ (8007800 <Enter_Stop_Mode+0x154>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2201      	movs	r2, #1
 8007760:	4053      	eors	r3, r2
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d013      	beq.n	8007790 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8007768:	201c      	movs	r0, #28
 800776a:	f7ff ff53 	bl	8007614 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800776e:	4a20      	ldr	r2, [pc, #128]	@ (80077f0 <Enter_Stop_Mode+0x144>)
 8007770:	4920      	ldr	r1, [pc, #128]	@ (80077f4 <Enter_Stop_Mode+0x148>)
 8007772:	231c      	movs	r3, #28
 8007774:	2003      	movs	r0, #3
 8007776:	f008 ffe1 	bl	801073c <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800777a:	2101      	movs	r1, #1
 800777c:	2001      	movs	r0, #1
 800777e:	f00f ff7f 	bl	8017680 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8007782:	f002 fc25 	bl	8009fd0 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8007786:	f009 fc61 	bl	801104c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800778a:	2000      	movs	r0, #0
 800778c:	f003 fd12 	bl	800b1b4 <setsen5xReadTimer>
    }
  }
  showTime();
 8007790:	f7ff fc40 	bl	8007014 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8007794:	f003 f9a8 	bl	800aae8 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8007798:	f006 f898 	bl	800d8cc <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 800779c:	2000      	movs	r0, #0
 800779e:	f003 fd1b 	bl	800b1d8 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 80077a2:	4b18      	ldr	r3, [pc, #96]	@ (8007804 <Enter_Stop_Mode+0x158>)
 80077a4:	0018      	movs	r0, r3
 80077a6:	f7fb ff5d 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 80077aa:	201e      	movs	r0, #30
 80077ac:	f006 f87c 	bl	800d8a8 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 80077b0:	2000      	movs	r0, #0
 80077b2:	f009 f987 	bl	8010ac4 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 80077b6:	203c      	movs	r0, #60	@ 0x3c
 80077b8:	f000 fb72 	bl	8007ea0 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 80077bc:	205a      	movs	r0, #90	@ 0x5a
 80077be:	f000 fea9 	bl	8008514 <setBMP280TimeStamp>
  setMICTimeStamp(0);
 80077c2:	2000      	movs	r0, #0
 80077c4:	f003 f97e 	bl	800aac4 <setMICTimeStamp>
  ESPTransmitDone = false;
 80077c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007808 <Enter_Stop_Mode+0x15c>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 80077ce:	f009 fc01 	bl	8010fd4 <HAL_GetTick>
 80077d2:	0003      	movs	r3, r0
 80077d4:	4a0d      	ldr	r2, [pc, #52]	@ (800780c <Enter_Stop_Mode+0x160>)
 80077d6:	189a      	adds	r2, r3, r2
 80077d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007810 <Enter_Stop_Mode+0x164>)
 80077da:	601a      	str	r2, [r3, #0]
}
 80077dc:	46c0      	nop			@ (mov r8, r8)
 80077de:	46bd      	mov	sp, r7
 80077e0:	b002      	add	sp, #8
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000e49 	.word	0x20000e49
 80077e8:	08026cfc 	.word	0x08026cfc
 80077ec:	08026d14 	.word	0x08026d14
 80077f0:	08026d18 	.word	0x08026d18
 80077f4:	08026bc0 	.word	0x08026bc0
 80077f8:	20000aec 	.word	0x20000aec
 80077fc:	08026d3c 	.word	0x08026d3c
 8007800:	20001dda 	.word	0x20001dda
 8007804:	00001194 	.word	0x00001194
 8007808:	20000560 	.word	0x20000560
 800780c:	00000bb8 	.word	0x00000bb8
 8007810:	20000da0 	.word	0x20000da0

08007814 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800781c:	4b03      	ldr	r3, [pc, #12]	@ (800782c <InitClock+0x18>)
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
}
 8007822:	46c0      	nop			@ (mov r8, r8)
 8007824:	46bd      	mov	sp, r7
 8007826:	b002      	add	sp, #8
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			@ (mov r8, r8)
 800782c:	20000ae4 	.word	0x20000ae4

08007830 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	78db      	ldrb	r3, [r3, #3]
 800783e:	001a      	movs	r2, r3
 8007840:	0013      	movs	r3, r2
 8007842:	025b      	lsls	r3, r3, #9
 8007844:	189b      	adds	r3, r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	189b      	adds	r3, r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	189b      	adds	r3, r3, r2
 800784e:	011a      	lsls	r2, r3, #4
 8007850:	1ad2      	subs	r2, r2, r3
 8007852:	01d3      	lsls	r3, r2, #7
 8007854:	001a      	movs	r2, r3
 8007856:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e028      	b.n	80078b0 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4a53      	ldr	r2, [pc, #332]	@ (80079b0 <makeTime+0x180>)
 8007862:	4293      	cmp	r3, r2
 8007864:	db21      	blt.n	80078aa <makeTime+0x7a>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a52      	ldr	r2, [pc, #328]	@ (80079b4 <makeTime+0x184>)
 800786a:	4694      	mov	ip, r2
 800786c:	4463      	add	r3, ip
 800786e:	001a      	movs	r2, r3
 8007870:	2303      	movs	r3, #3
 8007872:	4013      	ands	r3, r2
 8007874:	d119      	bne.n	80078aa <makeTime+0x7a>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4a4e      	ldr	r2, [pc, #312]	@ (80079b4 <makeTime+0x184>)
 800787a:	4694      	mov	ip, r2
 800787c:	4463      	add	r3, ip
 800787e:	2164      	movs	r1, #100	@ 0x64
 8007880:	0018      	movs	r0, r3
 8007882:	f7f8 fdff 	bl	8000484 <__aeabi_idivmod>
 8007886:	1e0b      	subs	r3, r1, #0
 8007888:	d10a      	bne.n	80078a0 <makeTime+0x70>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4a49      	ldr	r2, [pc, #292]	@ (80079b4 <makeTime+0x184>)
 800788e:	4694      	mov	ip, r2
 8007890:	4463      	add	r3, ip
 8007892:	22c8      	movs	r2, #200	@ 0xc8
 8007894:	0051      	lsls	r1, r2, #1
 8007896:	0018      	movs	r0, r3
 8007898:	f7f8 fdf4 	bl	8000484 <__aeabi_idivmod>
 800789c:	1e0b      	subs	r3, r1, #0
 800789e:	d104      	bne.n	80078aa <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4a45      	ldr	r2, [pc, #276]	@ (80079b8 <makeTime+0x188>)
 80078a4:	4694      	mov	ip, r2
 80078a6:	4463      	add	r3, ip
 80078a8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3301      	adds	r3, #1
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	78db      	ldrb	r3, [r3, #3]
 80078b4:	001a      	movs	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4293      	cmp	r3, r2
 80078ba:	dbd0      	blt.n	800785e <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 80078bc:	2301      	movs	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e03c      	b.n	800793c <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d125      	bne.n	8007914 <makeTime+0xe4>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	78db      	ldrb	r3, [r3, #3]
 80078cc:	4a39      	ldr	r2, [pc, #228]	@ (80079b4 <makeTime+0x184>)
 80078ce:	4694      	mov	ip, r2
 80078d0:	4463      	add	r3, ip
 80078d2:	001a      	movs	r2, r3
 80078d4:	2303      	movs	r3, #3
 80078d6:	4013      	ands	r3, r2
 80078d8:	d11c      	bne.n	8007914 <makeTime+0xe4>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	78db      	ldrb	r3, [r3, #3]
 80078de:	4a35      	ldr	r2, [pc, #212]	@ (80079b4 <makeTime+0x184>)
 80078e0:	4694      	mov	ip, r2
 80078e2:	4463      	add	r3, ip
 80078e4:	2164      	movs	r1, #100	@ 0x64
 80078e6:	0018      	movs	r0, r3
 80078e8:	f7f8 fdcc 	bl	8000484 <__aeabi_idivmod>
 80078ec:	1e0b      	subs	r3, r1, #0
 80078ee:	d10b      	bne.n	8007908 <makeTime+0xd8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	78db      	ldrb	r3, [r3, #3]
 80078f4:	4a2f      	ldr	r2, [pc, #188]	@ (80079b4 <makeTime+0x184>)
 80078f6:	4694      	mov	ip, r2
 80078f8:	4463      	add	r3, ip
 80078fa:	22c8      	movs	r2, #200	@ 0xc8
 80078fc:	0051      	lsls	r1, r2, #1
 80078fe:	0018      	movs	r0, r3
 8007900:	f7f8 fdc0 	bl	8000484 <__aeabi_idivmod>
 8007904:	1e0b      	subs	r3, r1, #0
 8007906:	d105      	bne.n	8007914 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4a2c      	ldr	r2, [pc, #176]	@ (80079bc <makeTime+0x18c>)
 800790c:	4694      	mov	ip, r2
 800790e:	4463      	add	r3, ip
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	e010      	b.n	8007936 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3b01      	subs	r3, #1
 8007918:	4a29      	ldr	r2, [pc, #164]	@ (80079c0 <makeTime+0x190>)
 800791a:	5cd3      	ldrb	r3, [r2, r3]
 800791c:	001a      	movs	r2, r3
 800791e:	0013      	movs	r3, r2
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	189b      	adds	r3, r3, r2
 8007924:	011a      	lsls	r2, r3, #4
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	0113      	lsls	r3, r2, #4
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	01db      	lsls	r3, r3, #7
 800792e:	001a      	movs	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	189b      	adds	r3, r3, r2
 8007934:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	001a      	movs	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4293      	cmp	r3, r2
 8007946:	dbbc      	blt.n	80078c2 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	789b      	ldrb	r3, [r3, #2]
 800794c:	3b01      	subs	r3, #1
 800794e:	001a      	movs	r2, r3
 8007950:	0013      	movs	r3, r2
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	189b      	adds	r3, r3, r2
 8007956:	011a      	lsls	r2, r3, #4
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	0113      	lsls	r3, r2, #4
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	01db      	lsls	r3, r3, #7
 8007960:	001a      	movs	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	189b      	adds	r3, r3, r2
 8007966:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	001a      	movs	r2, r3
 800796e:	0013      	movs	r3, r2
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	1a9b      	subs	r3, r3, r2
 8007974:	011a      	lsls	r2, r3, #4
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	0113      	lsls	r3, r2, #4
 800797a:	001a      	movs	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	189b      	adds	r3, r3, r2
 8007980:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	001a      	movs	r2, r3
 8007988:	0013      	movs	r3, r2
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	001a      	movs	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	189b      	adds	r3, r3, r2
 8007996:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	789b      	ldrb	r3, [r3, #2]
 800799c:	001a      	movs	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	189b      	adds	r3, r3, r2
 80079a2:	60bb      	str	r3, [r7, #8]
  return seconds;
 80079a4:	68bb      	ldr	r3, [r7, #8]
}
 80079a6:	0018      	movs	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b004      	add	sp, #16
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			@ (mov r8, r8)
 80079b0:	fffff84f 	.word	0xfffff84f
 80079b4:	000007b2 	.word	0x000007b2
 80079b8:	00015180 	.word	0x00015180
 80079bc:	00263b80 	.word	0x00263b80
 80079c0:	08028b3c 	.word	0x08028b3c

080079c4 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 80079c4:	b590      	push	{r4, r7, lr}
 80079c6:	b089      	sub	sp, #36	@ 0x24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	213c      	movs	r1, #60	@ 0x3c
 80079d8:	0018      	movs	r0, r3
 80079da:	f7f8 fc69 	bl	80002b0 <__aeabi_uidivmod>
 80079de:	000b      	movs	r3, r1
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	213c      	movs	r1, #60	@ 0x3c
 80079ea:	0018      	movs	r0, r3
 80079ec:	f7f8 fbda 	bl	80001a4 <__udivsi3>
 80079f0:	0003      	movs	r3, r0
 80079f2:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	213c      	movs	r1, #60	@ 0x3c
 80079f8:	0018      	movs	r0, r3
 80079fa:	f7f8 fc59 	bl	80002b0 <__aeabi_uidivmod>
 80079fe:	000b      	movs	r3, r1
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	213c      	movs	r1, #60	@ 0x3c
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7f8 fbca 	bl	80001a4 <__udivsi3>
 8007a10:	0003      	movs	r3, r0
 8007a12:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2118      	movs	r1, #24
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f7f8 fc49 	bl	80002b0 <__aeabi_uidivmod>
 8007a1e:	000b      	movs	r3, r1
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2118      	movs	r1, #24
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7f8 fbba 	bl	80001a4 <__udivsi3>
 8007a30:	0003      	movs	r3, r0
 8007a32:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	2107      	movs	r1, #7
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f7f8 fc38 	bl	80002b0 <__aeabi_uidivmod>
 8007a40:	000b      	movs	r3, r1
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	3301      	adds	r3, #1
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	701a      	strb	r2, [r3, #0]
  year = 0;
 8007a4c:	231f      	movs	r3, #31
 8007a4e:	18fb      	adds	r3, r7, r3
 8007a50:	2200      	movs	r2, #0
 8007a52:	701a      	strb	r2, [r3, #0]
  days = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8007a58:	e005      	b.n	8007a66 <breakPosixTime+0xa2>
    year++;
 8007a5a:	211f      	movs	r1, #31
 8007a5c:	187b      	adds	r3, r7, r1
 8007a5e:	781a      	ldrb	r2, [r3, #0]
 8007a60:	187b      	adds	r3, r7, r1
 8007a62:	3201      	adds	r2, #1
 8007a64:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8007a66:	241f      	movs	r4, #31
 8007a68:	193b      	adds	r3, r7, r4
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	4a64      	ldr	r2, [pc, #400]	@ (8007c00 <breakPosixTime+0x23c>)
 8007a6e:	4694      	mov	ip, r2
 8007a70:	4463      	add	r3, ip
 8007a72:	001a      	movs	r2, r3
 8007a74:	2303      	movs	r3, #3
 8007a76:	4013      	ands	r3, r2
 8007a78:	d119      	bne.n	8007aae <breakPosixTime+0xea>
 8007a7a:	193b      	adds	r3, r7, r4
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	4a60      	ldr	r2, [pc, #384]	@ (8007c00 <breakPosixTime+0x23c>)
 8007a80:	4694      	mov	ip, r2
 8007a82:	4463      	add	r3, ip
 8007a84:	2164      	movs	r1, #100	@ 0x64
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7f8 fcfc 	bl	8000484 <__aeabi_idivmod>
 8007a8c:	1e0b      	subs	r3, r1, #0
 8007a8e:	d10b      	bne.n	8007aa8 <breakPosixTime+0xe4>
 8007a90:	193b      	adds	r3, r7, r4
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	4a5a      	ldr	r2, [pc, #360]	@ (8007c00 <breakPosixTime+0x23c>)
 8007a96:	4694      	mov	ip, r2
 8007a98:	4463      	add	r3, ip
 8007a9a:	22c8      	movs	r2, #200	@ 0xc8
 8007a9c:	0051      	lsls	r1, r2, #1
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f7f8 fcf0 	bl	8000484 <__aeabi_idivmod>
 8007aa4:	1e0b      	subs	r3, r1, #0
 8007aa6:	d102      	bne.n	8007aae <breakPosixTime+0xea>
 8007aa8:	23b7      	movs	r3, #183	@ 0xb7
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	e001      	b.n	8007ab2 <breakPosixTime+0xee>
 8007aae:	236e      	movs	r3, #110	@ 0x6e
 8007ab0:	33ff      	adds	r3, #255	@ 0xff
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	18d3      	adds	r3, r2, r3
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d9cc      	bls.n	8007a5a <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	241f      	movs	r4, #31
 8007ac4:	193a      	adds	r2, r7, r4
 8007ac6:	7812      	ldrb	r2, [r2, #0]
 8007ac8:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8007aca:	193b      	adds	r3, r7, r4
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	4a4c      	ldr	r2, [pc, #304]	@ (8007c00 <breakPosixTime+0x23c>)
 8007ad0:	4694      	mov	ip, r2
 8007ad2:	4463      	add	r3, ip
 8007ad4:	001a      	movs	r2, r3
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	4013      	ands	r3, r2
 8007ada:	d119      	bne.n	8007b10 <breakPosixTime+0x14c>
 8007adc:	193b      	adds	r3, r7, r4
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	4a47      	ldr	r2, [pc, #284]	@ (8007c00 <breakPosixTime+0x23c>)
 8007ae2:	4694      	mov	ip, r2
 8007ae4:	4463      	add	r3, ip
 8007ae6:	2164      	movs	r1, #100	@ 0x64
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f7f8 fccb 	bl	8000484 <__aeabi_idivmod>
 8007aee:	1e0b      	subs	r3, r1, #0
 8007af0:	d10b      	bne.n	8007b0a <breakPosixTime+0x146>
 8007af2:	193b      	adds	r3, r7, r4
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	4a42      	ldr	r2, [pc, #264]	@ (8007c00 <breakPosixTime+0x23c>)
 8007af8:	4694      	mov	ip, r2
 8007afa:	4463      	add	r3, ip
 8007afc:	22c8      	movs	r2, #200	@ 0xc8
 8007afe:	0051      	lsls	r1, r2, #1
 8007b00:	0018      	movs	r0, r3
 8007b02:	f7f8 fcbf 	bl	8000484 <__aeabi_idivmod>
 8007b06:	1e0b      	subs	r3, r1, #0
 8007b08:	d102      	bne.n	8007b10 <breakPosixTime+0x14c>
 8007b0a:	23b7      	movs	r3, #183	@ 0xb7
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	e001      	b.n	8007b14 <breakPosixTime+0x150>
 8007b10:	236e      	movs	r3, #110	@ 0x6e
 8007b12:	33ff      	adds	r3, #255	@ 0xff
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	61bb      	str	r3, [r7, #24]

  days=0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
  month=0;
 8007b26:	211e      	movs	r1, #30
 8007b28:	187b      	adds	r3, r7, r1
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8007b2e:	231d      	movs	r3, #29
 8007b30:	18fb      	adds	r3, r7, r3
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8007b36:	187b      	adds	r3, r7, r1
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	e048      	b.n	8007bd0 <breakPosixTime+0x20c>
    if (month==1) { // february
 8007b3e:	231e      	movs	r3, #30
 8007b40:	18fb      	adds	r3, r7, r3
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d12a      	bne.n	8007b9e <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8007b48:	241f      	movs	r4, #31
 8007b4a:	193b      	adds	r3, r7, r4
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007c00 <breakPosixTime+0x23c>)
 8007b50:	4694      	mov	ip, r2
 8007b52:	4463      	add	r3, ip
 8007b54:	001a      	movs	r2, r3
 8007b56:	2303      	movs	r3, #3
 8007b58:	4013      	ands	r3, r2
 8007b5a:	d11b      	bne.n	8007b94 <breakPosixTime+0x1d0>
 8007b5c:	193b      	adds	r3, r7, r4
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	4a27      	ldr	r2, [pc, #156]	@ (8007c00 <breakPosixTime+0x23c>)
 8007b62:	4694      	mov	ip, r2
 8007b64:	4463      	add	r3, ip
 8007b66:	2164      	movs	r1, #100	@ 0x64
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f7f8 fc8b 	bl	8000484 <__aeabi_idivmod>
 8007b6e:	1e0b      	subs	r3, r1, #0
 8007b70:	d10b      	bne.n	8007b8a <breakPosixTime+0x1c6>
 8007b72:	193b      	adds	r3, r7, r4
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	4a22      	ldr	r2, [pc, #136]	@ (8007c00 <breakPosixTime+0x23c>)
 8007b78:	4694      	mov	ip, r2
 8007b7a:	4463      	add	r3, ip
 8007b7c:	22c8      	movs	r2, #200	@ 0xc8
 8007b7e:	0051      	lsls	r1, r2, #1
 8007b80:	0018      	movs	r0, r3
 8007b82:	f7f8 fc7f 	bl	8000484 <__aeabi_idivmod>
 8007b86:	1e0b      	subs	r3, r1, #0
 8007b88:	d104      	bne.n	8007b94 <breakPosixTime+0x1d0>
        monthLength=29;
 8007b8a:	231d      	movs	r3, #29
 8007b8c:	18fb      	adds	r3, r7, r3
 8007b8e:	221d      	movs	r2, #29
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e00c      	b.n	8007bae <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007b94:	231d      	movs	r3, #29
 8007b96:	18fb      	adds	r3, r7, r3
 8007b98:	221c      	movs	r2, #28
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e007      	b.n	8007bae <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007b9e:	231e      	movs	r3, #30
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	231d      	movs	r3, #29
 8007ba6:	18fb      	adds	r3, r7, r3
 8007ba8:	4916      	ldr	r1, [pc, #88]	@ (8007c04 <breakPosixTime+0x240>)
 8007baa:	5c8a      	ldrb	r2, [r1, r2]
 8007bac:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007bae:	211d      	movs	r1, #29
 8007bb0:	187b      	adds	r3, r7, r1
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d310      	bcc.n	8007bdc <breakPosixTime+0x218>
      time -= monthLength;
 8007bba:	187b      	adds	r3, r7, r1
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007bc4:	211e      	movs	r1, #30
 8007bc6:	187b      	adds	r3, r7, r1
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	187b      	adds	r3, r7, r1
 8007bcc:	3201      	adds	r2, #1
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	231e      	movs	r3, #30
 8007bd2:	18fb      	adds	r3, r7, r3
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b0b      	cmp	r3, #11
 8007bd8:	d9b1      	bls.n	8007b3e <breakPosixTime+0x17a>
 8007bda:	e000      	b.n	8007bde <breakPosixTime+0x21a>
    } else {
        break;
 8007bdc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007bde:	231e      	movs	r3, #30
 8007be0:	18fb      	adds	r3, r7, r3
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	3301      	adds	r3, #1
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	709a      	strb	r2, [r3, #2]
}
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b009      	add	sp, #36	@ 0x24
 8007bfe:	bd90      	pop	{r4, r7, pc}
 8007c00:	000007b2 	.word	0x000007b2
 8007c04:	08028b3c 	.word	0x08028b3c

08007c08 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007c0e:	003b      	movs	r3, r7
 8007c10:	0018      	movs	r0, r3
 8007c12:	2308      	movs	r3, #8
 8007c14:	001a      	movs	r2, r3
 8007c16:	2100      	movs	r1, #0
 8007c18:	f01a feee 	bl	80229f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8007c1c:	4b30      	ldr	r3, [pc, #192]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c1e:	4a31      	ldr	r2, [pc, #196]	@ (8007ce4 <MX_ADC_Init+0xdc>)
 8007c20:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8007c22:	4b2f      	ldr	r3, [pc, #188]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007c28:	4b2d      	ldr	r3, [pc, #180]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c2a:	22c0      	movs	r2, #192	@ 0xc0
 8007c2c:	0612      	lsls	r2, r2, #24
 8007c2e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007c30:	4b2b      	ldr	r3, [pc, #172]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007c36:	4b2a      	ldr	r3, [pc, #168]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007c3c:	4b28      	ldr	r3, [pc, #160]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c3e:	2201      	movs	r2, #1
 8007c40:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007c42:	4b27      	ldr	r3, [pc, #156]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8007c48:	4b25      	ldr	r3, [pc, #148]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007c50:	4b23      	ldr	r3, [pc, #140]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c52:	2221      	movs	r2, #33	@ 0x21
 8007c54:	2101      	movs	r1, #1
 8007c56:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007c58:	4b21      	ldr	r3, [pc, #132]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007c5e:	4b20      	ldr	r3, [pc, #128]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c60:	22c2      	movs	r2, #194	@ 0xc2
 8007c62:	32ff      	adds	r2, #255	@ 0xff
 8007c64:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8007c66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c68:	222c      	movs	r2, #44	@ 0x2c
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c70:	2204      	movs	r2, #4
 8007c72:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007c74:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007c7a:	4b19      	ldr	r3, [pc, #100]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007c80:	4b17      	ldr	r3, [pc, #92]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007c86:	4b16      	ldr	r3, [pc, #88]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007c8c:	4b14      	ldr	r3, [pc, #80]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f009 fa08 	bl	80110a4 <HAL_ADC_Init>
 8007c94:	1e03      	subs	r3, r0, #0
 8007c96:	d001      	beq.n	8007c9c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007c98:	f002 faea 	bl	800a270 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007c9c:	003b      	movs	r3, r7
 8007c9e:	4a12      	ldr	r2, [pc, #72]	@ (8007ce8 <MX_ADC_Init+0xe0>)
 8007ca0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007ca2:	003b      	movs	r3, r7
 8007ca4:	2280      	movs	r2, #128	@ 0x80
 8007ca6:	0152      	lsls	r2, r2, #5
 8007ca8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007caa:	003a      	movs	r2, r7
 8007cac:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007cae:	0011      	movs	r1, r2
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f009 fc67 	bl	8011584 <HAL_ADC_ConfigChannel>
 8007cb6:	1e03      	subs	r3, r0, #0
 8007cb8:	d001      	beq.n	8007cbe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007cba:	f002 fad9 	bl	800a270 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007cbe:	003b      	movs	r3, r7
 8007cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8007cec <MX_ADC_Init+0xe4>)
 8007cc2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007cc4:	003a      	movs	r2, r7
 8007cc6:	4b06      	ldr	r3, [pc, #24]	@ (8007ce0 <MX_ADC_Init+0xd8>)
 8007cc8:	0011      	movs	r1, r2
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f009 fc5a 	bl	8011584 <HAL_ADC_ConfigChannel>
 8007cd0:	1e03      	subs	r3, r0, #0
 8007cd2:	d001      	beq.n	8007cd8 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007cd4:	f002 facc 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007cd8:	46c0      	nop			@ (mov r8, r8)
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	b002      	add	sp, #8
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000b04 	.word	0x20000b04
 8007ce4:	40012400 	.word	0x40012400
 8007ce8:	38004000 	.word	0x38004000
 8007cec:	3c008000 	.word	0x3c008000

08007cf0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b089      	sub	sp, #36	@ 0x24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cf8:	240c      	movs	r4, #12
 8007cfa:	193b      	adds	r3, r7, r4
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	2314      	movs	r3, #20
 8007d00:	001a      	movs	r2, r3
 8007d02:	2100      	movs	r1, #0
 8007d04:	f01a fe78 	bl	80229f8 <memset>
  if(adcHandle->Instance==ADC1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a14      	ldr	r2, [pc, #80]	@ (8007d60 <HAL_ADC_MspInit+0x70>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d121      	bne.n	8007d56 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d12:	4b14      	ldr	r3, [pc, #80]	@ (8007d64 <HAL_ADC_MspInit+0x74>)
 8007d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d16:	4b13      	ldr	r3, [pc, #76]	@ (8007d64 <HAL_ADC_MspInit+0x74>)
 8007d18:	2180      	movs	r1, #128	@ 0x80
 8007d1a:	0089      	lsls	r1, r1, #2
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d20:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <HAL_ADC_MspInit+0x74>)
 8007d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d24:	4b0f      	ldr	r3, [pc, #60]	@ (8007d64 <HAL_ADC_MspInit+0x74>)
 8007d26:	2104      	movs	r1, #4
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d64 <HAL_ADC_MspInit+0x74>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	2204      	movs	r2, #4
 8007d32:	4013      	ands	r3, r2
 8007d34:	60bb      	str	r3, [r7, #8]
 8007d36:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007d38:	193b      	adds	r3, r7, r4
 8007d3a:	2230      	movs	r2, #48	@ 0x30
 8007d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d3e:	193b      	adds	r3, r7, r4
 8007d40:	2203      	movs	r2, #3
 8007d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d44:	193b      	adds	r3, r7, r4
 8007d46:	2200      	movs	r2, #0
 8007d48:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d4a:	193b      	adds	r3, r7, r4
 8007d4c:	4a06      	ldr	r2, [pc, #24]	@ (8007d68 <HAL_ADC_MspInit+0x78>)
 8007d4e:	0019      	movs	r1, r3
 8007d50:	0010      	movs	r0, r2
 8007d52:	f00a fa35 	bl	80121c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007d56:	46c0      	nop			@ (mov r8, r8)
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	b009      	add	sp, #36	@ 0x24
 8007d5c:	bd90      	pop	{r4, r7, pc}
 8007d5e:	46c0      	nop			@ (mov r8, r8)
 8007d60:	40012400 	.word	0x40012400
 8007d64:	40021000 	.word	0x40021000
 8007d68:	50000800 	.word	0x50000800

08007d6c <ReadRegister>:
static uint8_t airtemphumraw[7];
AHT20State AHTState = AHT_STATE_INIT;

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007d6c:	b590      	push	{r4, r7, lr}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6039      	str	r1, [r7, #0]
 8007d74:	0011      	movs	r1, r2
 8007d76:	1dfb      	adds	r3, r7, #7
 8007d78:	1c02      	adds	r2, r0, #0
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	1dbb      	adds	r3, r7, #6
 8007d7e:	1c0a      	adds	r2, r1, #0
 8007d80:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8007d82:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <ReadRegister+0x40>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8007d8a:	4b08      	ldr	r3, [pc, #32]	@ (8007dac <ReadRegister+0x40>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	1dba      	adds	r2, r7, #6
 8007d90:	7814      	ldrb	r4, [r2, #0]
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	1dfa      	adds	r2, r7, #7
 8007d96:	7810      	ldrb	r0, [r2, #0]
 8007d98:	0022      	movs	r2, r4
 8007d9a:	4798      	blx	r3
 8007d9c:	0003      	movs	r3, r0
 8007d9e:	e000      	b.n	8007da2 <ReadRegister+0x36>
  }
  return false;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	0018      	movs	r0, r3
 8007da4:	46bd      	mov	sp, r7
 8007da6:	b003      	add	sp, #12
 8007da8:	bd90      	pop	{r4, r7, pc}
 8007daa:	46c0      	nop			@ (mov r8, r8)
 8007dac:	20000b68 	.word	0x20000b68

08007db0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6039      	str	r1, [r7, #0]
 8007db8:	0011      	movs	r1, r2
 8007dba:	1dfb      	adds	r3, r7, #7
 8007dbc:	1c02      	adds	r2, r0, #0
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	1dbb      	adds	r3, r7, #6
 8007dc2:	1c0a      	adds	r2, r1, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8007df0 <WriteRegister+0x40>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8007dce:	4b08      	ldr	r3, [pc, #32]	@ (8007df0 <WriteRegister+0x40>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	1dba      	adds	r2, r7, #6
 8007dd4:	7814      	ldrb	r4, [r2, #0]
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	1dfa      	adds	r2, r7, #7
 8007dda:	7810      	ldrb	r0, [r2, #0]
 8007ddc:	0022      	movs	r2, r4
 8007dde:	4798      	blx	r3
 8007de0:	0003      	movs	r3, r0
 8007de2:	e000      	b.n	8007de6 <WriteRegister+0x36>
  }
  return false;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	0018      	movs	r0, r3
 8007de8:	46bd      	mov	sp, r7
 8007dea:	b003      	add	sp, #12
 8007dec:	bd90      	pop	{r4, r7, pc}
 8007dee:	46c0      	nop			@ (mov r8, r8)
 8007df0:	20000b6c 	.word	0x20000b6c

08007df4 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	000a      	movs	r2, r1
 8007dfe:	1cfb      	adds	r3, r7, #3
 8007e00:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8007e02:	230f      	movs	r3, #15
 8007e04:	18fb      	adds	r3, r7, r3
 8007e06:	22ff      	movs	r2, #255	@ 0xff
 8007e08:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007e0a:	230e      	movs	r3, #14
 8007e0c:	18fb      	adds	r3, r7, r3
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	e037      	b.n	8007e84 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007e14:	230e      	movs	r3, #14
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	18d3      	adds	r3, r2, r3
 8007e1e:	7819      	ldrb	r1, [r3, #0]
 8007e20:	220f      	movs	r2, #15
 8007e22:	18bb      	adds	r3, r7, r2
 8007e24:	18ba      	adds	r2, r7, r2
 8007e26:	7812      	ldrb	r2, [r2, #0]
 8007e28:	404a      	eors	r2, r1
 8007e2a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007e2c:	230d      	movs	r3, #13
 8007e2e:	18fb      	adds	r3, r7, r3
 8007e30:	2200      	movs	r2, #0
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	e01b      	b.n	8007e6e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8007e36:	210f      	movs	r1, #15
 8007e38:	187b      	adds	r3, r7, r1
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b25b      	sxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	da09      	bge.n	8007e56 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8007e42:	187b      	adds	r3, r7, r1
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	b25b      	sxtb	r3, r3
 8007e4a:	2231      	movs	r2, #49	@ 0x31
 8007e4c:	4053      	eors	r3, r2
 8007e4e:	b25a      	sxtb	r2, r3
 8007e50:	187b      	adds	r3, r7, r1
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e005      	b.n	8007e62 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8007e56:	230f      	movs	r3, #15
 8007e58:	18fa      	adds	r2, r7, r3
 8007e5a:	18fb      	adds	r3, r7, r3
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	18db      	adds	r3, r3, r3
 8007e60:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007e62:	210d      	movs	r1, #13
 8007e64:	187b      	adds	r3, r7, r1
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	187b      	adds	r3, r7, r1
 8007e6a:	3201      	adds	r2, #1
 8007e6c:	701a      	strb	r2, [r3, #0]
 8007e6e:	230d      	movs	r3, #13
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b07      	cmp	r3, #7
 8007e76:	d9de      	bls.n	8007e36 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007e78:	210e      	movs	r1, #14
 8007e7a:	187b      	adds	r3, r7, r1
 8007e7c:	781a      	ldrb	r2, [r3, #0]
 8007e7e:	187b      	adds	r3, r7, r1
 8007e80:	3201      	adds	r2, #1
 8007e82:	701a      	strb	r2, [r3, #0]
 8007e84:	230e      	movs	r3, #14
 8007e86:	18fa      	adds	r2, r7, r3
 8007e88:	1cfb      	adds	r3, r7, #3
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d3c0      	bcc.n	8007e14 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8007e92:	230f      	movs	r3, #15
 8007e94:	18fb      	adds	r3, r7, r3
 8007e96:	781b      	ldrb	r3, [r3, #0]
}
 8007e98:	0018      	movs	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b004      	add	sp, #16
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8007ea8:	f009 f894 	bl	8010fd4 <HAL_GetTick>
 8007eac:	0002      	movs	r2, r0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	18d2      	adds	r2, r2, r3
 8007eb2:	4b03      	ldr	r3, [pc, #12]	@ (8007ec0 <setAHT20TimeStamp+0x20>)
 8007eb4:	601a      	str	r2, [r3, #0]
}
 8007eb6:	46c0      	nop			@ (mov r8, r8)
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b002      	add	sp, #8
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	46c0      	nop			@ (mov r8, r8)
 8007ec0:	20000b60 	.word	0x20000b60

08007ec4 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8007ece:	4b05      	ldr	r3, [pc, #20]	@ (8007ee4 <AHT_Init+0x20>)
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <AHT_Init+0x24>)
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	46c0      	nop			@ (mov r8, r8)
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b002      	add	sp, #8
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	46c0      	nop			@ (mov r8, r8)
 8007ee4:	20000b68 	.word	0x20000b68
 8007ee8:	20000b6c 	.word	0x20000b6c

08007eec <AHT20_DeviceConnected>:

bool AHT20_DeviceConnected() {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  return WriteRegister(03, AHT20_start, 3);
 8007ef0:	4b04      	ldr	r3, [pc, #16]	@ (8007f04 <AHT20_DeviceConnected+0x18>)
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	0019      	movs	r1, r3
 8007ef6:	2003      	movs	r0, #3
 8007ef8:	f7ff ff5a 	bl	8007db0 <WriteRegister>
 8007efc:	0003      	movs	r3, r0
}
 8007efe:	0018      	movs	r0, r3
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	20000080 	.word	0x20000080

08007f08 <AHT20_init>:
bool AHT20_init(void) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  Debug("Init AHT20");
 8007f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8007f3c <AHT20_init+0x34>)
 8007f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f40 <AHT20_init+0x38>)
 8007f10:	0019      	movs	r1, r3
 8007f12:	2003      	movs	r0, #3
 8007f14:	f008 fc12 	bl	801073c <CreateLine>
  AHT20TimeStamp = HAL_GetTick() + 50;
 8007f18:	f009 f85c 	bl	8010fd4 <HAL_GetTick>
 8007f1c:	0003      	movs	r3, r0
 8007f1e:	3332      	adds	r3, #50	@ 0x32
 8007f20:	001a      	movs	r2, r3
 8007f22:	4b08      	ldr	r3, [pc, #32]	@ (8007f44 <AHT20_init+0x3c>)
 8007f24:	601a      	str	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8007f26:	4b08      	ldr	r3, [pc, #32]	@ (8007f48 <AHT20_init+0x40>)
 8007f28:	2203      	movs	r2, #3
 8007f2a:	0019      	movs	r1, r3
 8007f2c:	2038      	movs	r0, #56	@ 0x38
 8007f2e:	f7ff ff3f 	bl	8007db0 <WriteRegister>
 8007f32:	0003      	movs	r3, r0
}
 8007f34:	0018      	movs	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	46c0      	nop			@ (mov r8, r8)
 8007f3c:	08026d5c 	.word	0x08026d5c
 8007f40:	08026d68 	.word	0x08026d68
 8007f44:	20000b60 	.word	0x20000b60
 8007f48:	20000080 	.word	0x20000080

08007f4c <AHT20_calibration_start>:

bool AHT20_calibration_start() {
 8007f4c:	b590      	push	{r4, r7, lr}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_calibrated, 1);
 8007f52:	1dfc      	adds	r4, r7, #7
 8007f54:	4b10      	ldr	r3, [pc, #64]	@ (8007f98 <AHT20_calibration_start+0x4c>)
 8007f56:	2201      	movs	r2, #1
 8007f58:	0019      	movs	r1, r3
 8007f5a:	2038      	movs	r0, #56	@ 0x38
 8007f5c:	f7ff ff28 	bl	8007db0 <WriteRegister>
 8007f60:	0003      	movs	r3, r0
 8007f62:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8007f64:	1dfb      	adds	r3, r7, #7
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	4053      	eors	r3, r2
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <AHT20_calibration_start+0x32>
    Error("AHT20 Write error during calibaration");
 8007f72:	4a0a      	ldr	r2, [pc, #40]	@ (8007f9c <AHT20_calibration_start+0x50>)
 8007f74:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa0 <AHT20_calibration_start+0x54>)
 8007f76:	0019      	movs	r1, r3
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f008 fbdf 	bl	801073c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 40;
 8007f7e:	f009 f829 	bl	8010fd4 <HAL_GetTick>
 8007f82:	0003      	movs	r3, r0
 8007f84:	3328      	adds	r3, #40	@ 0x28
 8007f86:	001a      	movs	r2, r3
 8007f88:	4b06      	ldr	r3, [pc, #24]	@ (8007fa4 <AHT20_calibration_start+0x58>)
 8007f8a:	601a      	str	r2, [r3, #0]
  return response;
 8007f8c:	1dfb      	adds	r3, r7, #7
 8007f8e:	781b      	ldrb	r3, [r3, #0]
}
 8007f90:	0018      	movs	r0, r3
 8007f92:	46bd      	mov	sp, r7
 8007f94:	b003      	add	sp, #12
 8007f96:	bd90      	pop	{r4, r7, pc}
 8007f98:	2000008c 	.word	0x2000008c
 8007f9c:	08026d6c 	.word	0x08026d6c
 8007fa0:	08026d94 	.word	0x08026d94
 8007fa4:	20000b60 	.word	0x20000b60

08007fa8 <AHT20_calibration_complete>:

bool AHT20_calibration_complete(void) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  if (!ReadRegister(AHT20_ADDRESS, airtemphumraw, 2)) {
 8007fac:	4b12      	ldr	r3, [pc, #72]	@ (8007ff8 <AHT20_calibration_complete+0x50>)
 8007fae:	2202      	movs	r2, #2
 8007fb0:	0019      	movs	r1, r3
 8007fb2:	2038      	movs	r0, #56	@ 0x38
 8007fb4:	f7ff feda 	bl	8007d6c <ReadRegister>
 8007fb8:	0003      	movs	r3, r0
 8007fba:	001a      	movs	r2, r3
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4053      	eors	r3, r2
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d005      	beq.n	8007fd2 <AHT20_calibration_complete+0x2a>
    Error("AHT20 Read error during calibaration");;
 8007fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8007ffc <AHT20_calibration_complete+0x54>)
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <AHT20_calibration_complete+0x58>)
 8007fca:	0019      	movs	r1, r3
 8007fcc:	2001      	movs	r0, #1
 8007fce:	f008 fbb5 	bl	801073c <CreateLine>
  }
//  Debug("status of AHT20 [0]= 0x%02x [1]=0x%02x", airtemphumraw[0], airtemphumraw[1]);
  AHT20TimeStamp = HAL_GetTick() + 200;
 8007fd2:	f008 ffff 	bl	8010fd4 <HAL_GetTick>
 8007fd6:	0003      	movs	r3, r0
 8007fd8:	33c8      	adds	r3, #200	@ 0xc8
 8007fda:	001a      	movs	r2, r3
 8007fdc:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <AHT20_calibration_complete+0x5c>)
 8007fde:	601a      	str	r2, [r3, #0]
  return (airtemphumraw[1] & 0x08);
 8007fe0:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <AHT20_calibration_complete+0x50>)
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	001a      	movs	r2, r3
 8007fe6:	2308      	movs	r3, #8
 8007fe8:	4013      	ands	r3, r2
 8007fea:	1e5a      	subs	r2, r3, #1
 8007fec:	4193      	sbcs	r3, r2
 8007fee:	b2db      	uxtb	r3, r3
}
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	46c0      	nop			@ (mov r8, r8)
 8007ff8:	20000b70 	.word	0x20000b70
 8007ffc:	08026d98 	.word	0x08026d98
 8008000:	08026d94 	.word	0x08026d94
 8008004:	20000b60 	.word	0x20000b60

08008008 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 8008008:	b590      	push	{r4, r7, lr}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800800e:	1dfc      	adds	r4, r7, #7
 8008010:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <AHT20_StartMeasurement+0x4c>)
 8008012:	2203      	movs	r2, #3
 8008014:	0019      	movs	r1, r3
 8008016:	2038      	movs	r0, #56	@ 0x38
 8008018:	f7ff feca 	bl	8007db0 <WriteRegister>
 800801c:	0003      	movs	r3, r0
 800801e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 8008020:	1dfb      	adds	r3, r7, #7
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2201      	movs	r2, #1
 8008026:	4053      	eors	r3, r2
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800802e:	4a0a      	ldr	r2, [pc, #40]	@ (8008058 <AHT20_StartMeasurement+0x50>)
 8008030:	4b0a      	ldr	r3, [pc, #40]	@ (800805c <AHT20_StartMeasurement+0x54>)
 8008032:	0019      	movs	r1, r3
 8008034:	2001      	movs	r0, #1
 8008036:	f008 fb81 	bl	801073c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 100;
 800803a:	f008 ffcb 	bl	8010fd4 <HAL_GetTick>
 800803e:	0003      	movs	r3, r0
 8008040:	3364      	adds	r3, #100	@ 0x64
 8008042:	001a      	movs	r2, r3
 8008044:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <AHT20_StartMeasurement+0x58>)
 8008046:	601a      	str	r2, [r3, #0]
  return response;
 8008048:	1dfb      	adds	r3, r7, #7
 800804a:	781b      	ldrb	r3, [r3, #0]
}
 800804c:	0018      	movs	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	b003      	add	sp, #12
 8008052:	bd90      	pop	{r4, r7, pc}
 8008054:	20000088 	.word	0x20000088
 8008058:	08026dc0 	.word	0x08026dc0
 800805c:	08026d94 	.word	0x08026d94
 8008060:	20000b60 	.word	0x20000b60

08008064 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 8008064:	b590      	push	{r4, r7, lr}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
  bool response = ReadRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800806a:	1dfc      	adds	r4, r7, #7
 800806c:	4b0a      	ldr	r3, [pc, #40]	@ (8008098 <AHT20_GetMeasurementValues+0x34>)
 800806e:	2207      	movs	r2, #7
 8008070:	0019      	movs	r1, r3
 8008072:	2038      	movs	r0, #56	@ 0x38
 8008074:	f7ff fe7a 	bl	8007d6c <ReadRegister>
 8008078:	0003      	movs	r3, r0
 800807a:	7023      	strb	r3, [r4, #0]
  AHT20TimeStamp = HAL_GetTick() + 100;
 800807c:	f008 ffaa 	bl	8010fd4 <HAL_GetTick>
 8008080:	0003      	movs	r3, r0
 8008082:	3364      	adds	r3, #100	@ 0x64
 8008084:	001a      	movs	r2, r3
 8008086:	4b05      	ldr	r3, [pc, #20]	@ (800809c <AHT20_GetMeasurementValues+0x38>)
 8008088:	601a      	str	r2, [r3, #0]
  return response;
 800808a:	1dfb      	adds	r3, r7, #7
 800808c:	781b      	ldrb	r3, [r3, #0]
}
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	b003      	add	sp, #12
 8008094:	bd90      	pop	{r4, r7, pc}
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	20000b70 	.word	0x20000b70
 800809c:	20000b60 	.word	0x20000b60

080080a0 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 80080a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080a2:	46c6      	mov	lr, r8
 80080a4:	b500      	push	{lr}
 80080a6:	b08a      	sub	sp, #40	@ 0x28
 80080a8:	af06      	add	r7, sp, #24
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if (airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) {
 80080ae:	4b53      	ldr	r3, [pc, #332]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080b0:	799c      	ldrb	r4, [r3, #6]
 80080b2:	4b52      	ldr	r3, [pc, #328]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080b4:	2106      	movs	r1, #6
 80080b6:	0018      	movs	r0, r3
 80080b8:	f7ff fe9c 	bl	8007df4 <CalculateCRC>
 80080bc:	0003      	movs	r3, r0
 80080be:	429c      	cmp	r4, r3
 80080c0:	d038      	beq.n	8008134 <AHT20_Calculate+0x94>
    Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 80080c2:	4b4e      	ldr	r3, [pc, #312]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	4698      	mov	r8, r3
 80080c8:	4b4c      	ldr	r3, [pc, #304]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	0018      	movs	r0, r3
 80080ce:	4b4b      	ldr	r3, [pc, #300]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080d0:	789b      	ldrb	r3, [r3, #2]
 80080d2:	001c      	movs	r4, r3
 80080d4:	4b49      	ldr	r3, [pc, #292]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080d6:	78db      	ldrb	r3, [r3, #3]
 80080d8:	001d      	movs	r5, r3
 80080da:	4b48      	ldr	r3, [pc, #288]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	001e      	movs	r6, r3
 80080e0:	4b46      	ldr	r3, [pc, #280]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080e2:	795b      	ldrb	r3, [r3, #5]
 80080e4:	469c      	mov	ip, r3
 80080e6:	4b45      	ldr	r3, [pc, #276]	@ (80081fc <AHT20_Calculate+0x15c>)
 80080e8:	799b      	ldrb	r3, [r3, #6]
 80080ea:	4a45      	ldr	r2, [pc, #276]	@ (8008200 <AHT20_Calculate+0x160>)
 80080ec:	4945      	ldr	r1, [pc, #276]	@ (8008204 <AHT20_Calculate+0x164>)
 80080ee:	9305      	str	r3, [sp, #20]
 80080f0:	4663      	mov	r3, ip
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	9603      	str	r6, [sp, #12]
 80080f6:	9502      	str	r5, [sp, #8]
 80080f8:	9401      	str	r4, [sp, #4]
 80080fa:	9000      	str	r0, [sp, #0]
 80080fc:	4643      	mov	r3, r8
 80080fe:	2003      	movs	r0, #3
 8008100:	f008 fb1c 	bl	801073c <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 8008104:	4b3d      	ldr	r3, [pc, #244]	@ (80081fc <AHT20_Calculate+0x15c>)
 8008106:	799b      	ldrb	r3, [r3, #6]
 8008108:	001c      	movs	r4, r3
 800810a:	4b3c      	ldr	r3, [pc, #240]	@ (80081fc <AHT20_Calculate+0x15c>)
 800810c:	2106      	movs	r1, #6
 800810e:	0018      	movs	r0, r3
 8008110:	f7ff fe70 	bl	8007df4 <CalculateCRC>
 8008114:	0003      	movs	r3, r0
 8008116:	4a3c      	ldr	r2, [pc, #240]	@ (8008208 <AHT20_Calculate+0x168>)
 8008118:	493c      	ldr	r1, [pc, #240]	@ (800820c <AHT20_Calculate+0x16c>)
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	0023      	movs	r3, r4
 800811e:	2001      	movs	r0, #1
 8008120:	f008 fb0c 	bl	801073c <CreateLine>
    *airtemp = 0.0;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]
    return false;
 8008130:	2300      	movs	r3, #0
 8008132:	e05c      	b.n	80081ee <AHT20_Calculate+0x14e>
  }
  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 8008134:	4b31      	ldr	r3, [pc, #196]	@ (80081fc <AHT20_Calculate+0x15c>)
 8008136:	78db      	ldrb	r3, [r3, #3]
 8008138:	041a      	lsls	r2, r3, #16
 800813a:	23f0      	movs	r3, #240	@ 0xf0
 800813c:	031b      	lsls	r3, r3, #12
 800813e:	401a      	ands	r2, r3
 8008140:	4b2e      	ldr	r3, [pc, #184]	@ (80081fc <AHT20_Calculate+0x15c>)
 8008142:	791b      	ldrb	r3, [r3, #4]
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	18d3      	adds	r3, r2, r3
 8008148:	4a2c      	ldr	r2, [pc, #176]	@ (80081fc <AHT20_Calculate+0x15c>)
 800814a:	7952      	ldrb	r2, [r2, #5]
 800814c:	189b      	adds	r3, r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7f9 fa89 	bl	8001668 <__aeabi_ui2f>
 8008156:	1c03      	adds	r3, r0, #0
 8008158:	2193      	movs	r1, #147	@ 0x93
 800815a:	05c9      	lsls	r1, r1, #23
 800815c:	1c18      	adds	r0, r3, #0
 800815e:	f7f8 fd39 	bl	8000bd4 <__aeabi_fdiv>
 8008162:	1c03      	adds	r3, r0, #0
 8008164:	492a      	ldr	r1, [pc, #168]	@ (8008210 <AHT20_Calculate+0x170>)
 8008166:	1c18      	adds	r0, r3, #0
 8008168:	f7f8 ff1a 	bl	8000fa0 <__aeabi_fmul>
 800816c:	1c03      	adds	r3, r0, #0
 800816e:	4929      	ldr	r1, [pc, #164]	@ (8008214 <AHT20_Calculate+0x174>)
 8008170:	1c18      	adds	r0, r3, #0
 8008172:	f7f9 f853 	bl	800121c <__aeabi_fsub>
 8008176:	1c03      	adds	r3, r0, #0
 8008178:	1c1a      	adds	r2, r3, #0
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800817e:	4b1f      	ldr	r3, [pc, #124]	@ (80081fc <AHT20_Calculate+0x15c>)
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	031a      	lsls	r2, r3, #12
 8008184:	4b1d      	ldr	r3, [pc, #116]	@ (80081fc <AHT20_Calculate+0x15c>)
 8008186:	789b      	ldrb	r3, [r3, #2]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	18d3      	adds	r3, r2, r3
 800818c:	4a1b      	ldr	r2, [pc, #108]	@ (80081fc <AHT20_Calculate+0x15c>)
 800818e:	78d2      	ldrb	r2, [r2, #3]
 8008190:	0912      	lsrs	r2, r2, #4
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	189b      	adds	r3, r3, r2
 8008196:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 8008198:	68b8      	ldr	r0, [r7, #8]
 800819a:	f7f9 fa65 	bl	8001668 <__aeabi_ui2f>
 800819e:	1c03      	adds	r3, r0, #0
 80081a0:	2193      	movs	r1, #147	@ 0x93
 80081a2:	05c9      	lsls	r1, r1, #23
 80081a4:	1c18      	adds	r0, r3, #0
 80081a6:	f7f8 fd15 	bl	8000bd4 <__aeabi_fdiv>
 80081aa:	1c03      	adds	r3, r0, #0
 80081ac:	491a      	ldr	r1, [pc, #104]	@ (8008218 <AHT20_Calculate+0x178>)
 80081ae:	1c18      	adds	r0, r3, #0
 80081b0:	f7f8 fef6 	bl	8000fa0 <__aeabi_fmul>
 80081b4:	1c03      	adds	r3, r0, #0
 80081b6:	1c1a      	adds	r2, r3, #0
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %f, temperature = %f", *airhum, *airtemp);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	1c18      	adds	r0, r3, #0
 80081c2:	f7fb f94f 	bl	8003464 <__aeabi_f2d>
 80081c6:	0004      	movs	r4, r0
 80081c8:	000d      	movs	r5, r1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	1c18      	adds	r0, r3, #0
 80081d0:	f7fb f948 	bl	8003464 <__aeabi_f2d>
 80081d4:	0002      	movs	r2, r0
 80081d6:	000b      	movs	r3, r1
 80081d8:	4810      	ldr	r0, [pc, #64]	@ (800821c <AHT20_Calculate+0x17c>)
 80081da:	490a      	ldr	r1, [pc, #40]	@ (8008204 <AHT20_Calculate+0x164>)
 80081dc:	9202      	str	r2, [sp, #8]
 80081de:	9303      	str	r3, [sp, #12]
 80081e0:	9400      	str	r4, [sp, #0]
 80081e2:	9501      	str	r5, [sp, #4]
 80081e4:	0002      	movs	r2, r0
 80081e6:	2003      	movs	r0, #3
 80081e8:	f008 faa8 	bl	801073c <CreateLine>
  return true;
 80081ec:	2301      	movs	r3, #1
}
 80081ee:	0018      	movs	r0, r3
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b004      	add	sp, #16
 80081f4:	bc80      	pop	{r7}
 80081f6:	46b8      	mov	r8, r7
 80081f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	20000b70 	.word	0x20000b70
 8008200:	08026dec 	.word	0x08026dec
 8008204:	08026d68 	.word	0x08026d68
 8008208:	08026e58 	.word	0x08026e58
 800820c:	08026d94 	.word	0x08026d94
 8008210:	43480000 	.word	0x43480000
 8008214:	42480000 	.word	0x42480000
 8008218:	42c80000 	.word	0x42c80000
 800821c:	08026e80 	.word	0x08026e80

08008220 <AHT20_reset>:

bool AHT20_reset(void) {
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 8008224:	f008 fed6 	bl	8010fd4 <HAL_GetTick>
 8008228:	0003      	movs	r3, r0
 800822a:	3332      	adds	r3, #50	@ 0x32
 800822c:	001a      	movs	r2, r3
 800822e:	4b07      	ldr	r3, [pc, #28]	@ (800824c <AHT20_reset+0x2c>)
 8008230:	601a      	str	r2, [r3, #0]
  calibrated = false;
 8008232:	4b07      	ldr	r3, [pc, #28]	@ (8008250 <AHT20_reset+0x30>)
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 8008238:	4b06      	ldr	r3, [pc, #24]	@ (8008254 <AHT20_reset+0x34>)
 800823a:	2201      	movs	r2, #1
 800823c:	0019      	movs	r1, r3
 800823e:	2038      	movs	r0, #56	@ 0x38
 8008240:	f7ff fdb6 	bl	8007db0 <WriteRegister>
 8008244:	0003      	movs	r3, r0
}
 8008246:	0018      	movs	r0, r3
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20000b60 	.word	0x20000b60
 8008250:	20000b64 	.word	0x20000b64
 8008254:	20000084 	.word	0x20000084

08008258 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800825e:	4b73      	ldr	r3, [pc, #460]	@ (800842c <AHT_Upkeep+0x1d4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	0018      	movs	r0, r3
 8008264:	f008 fa14 	bl	8010690 <TimestampIsReached>
 8008268:	0003      	movs	r3, r0
 800826a:	001a      	movs	r2, r3
 800826c:	2301      	movs	r3, #1
 800826e:	4053      	eors	r3, r2
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <AHT_Upkeep+0x24>
    return AHTState;
 8008276:	4b6e      	ldr	r3, [pc, #440]	@ (8008430 <AHT_Upkeep+0x1d8>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	e0d2      	b.n	8008422 <AHT_Upkeep+0x1ca>
  }
  switch(AHTState) {
 800827c:	4b6c      	ldr	r3, [pc, #432]	@ (8008430 <AHT_Upkeep+0x1d8>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b08      	cmp	r3, #8
 8008282:	d900      	bls.n	8008286 <AHT_Upkeep+0x2e>
 8008284:	e0b4      	b.n	80083f0 <AHT_Upkeep+0x198>
 8008286:	009a      	lsls	r2, r3, #2
 8008288:	4b6a      	ldr	r3, [pc, #424]	@ (8008434 <AHT_Upkeep+0x1dc>)
 800828a:	18d3      	adds	r3, r2, r3
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 8008290:	4a69      	ldr	r2, [pc, #420]	@ (8008438 <AHT_Upkeep+0x1e0>)
 8008292:	4b6a      	ldr	r3, [pc, #424]	@ (800843c <AHT_Upkeep+0x1e4>)
 8008294:	0019      	movs	r1, r3
 8008296:	2003      	movs	r0, #3
 8008298:	f008 fa50 	bl	801073c <CreateLine>
    break;
 800829c:	e0bf      	b.n	800841e <AHT_Upkeep+0x1c6>

  case AHT_STATE_INIT:
    if (getSensorLock() != FREE) {
 800829e:	f002 fbc5 	bl	800aa2c <getSensorLock>
 80082a2:	1e03      	subs	r3, r0, #0
 80082a4:	d000      	beq.n	80082a8 <AHT_Upkeep+0x50>
 80082a6:	e0b1      	b.n	800840c <AHT_Upkeep+0x1b4>
      break;
    }
    if (!AHT20_init()) {
 80082a8:	f7ff fe2e 	bl	8007f08 <AHT20_init>
 80082ac:	0003      	movs	r3, r0
 80082ae:	001a      	movs	r2, r3
 80082b0:	2301      	movs	r3, #1
 80082b2:	4053      	eors	r3, r2
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <AHT_Upkeep+0x74>
      Debug("AHT20 Error during initialization");
 80082ba:	4a61      	ldr	r2, [pc, #388]	@ (8008440 <AHT_Upkeep+0x1e8>)
 80082bc:	4b5f      	ldr	r3, [pc, #380]	@ (800843c <AHT_Upkeep+0x1e4>)
 80082be:	0019      	movs	r1, r3
 80082c0:	2003      	movs	r0, #3
 80082c2:	f008 fa3b 	bl	801073c <CreateLine>
      AHTState = AHT20_ERROR;
 80082c6:	4b5a      	ldr	r3, [pc, #360]	@ (8008430 <AHT_Upkeep+0x1d8>)
 80082c8:	22ff      	movs	r2, #255	@ 0xff
 80082ca:	701a      	strb	r2, [r3, #0]
    }
    if(!calibrated) {
 80082cc:	4b5d      	ldr	r3, [pc, #372]	@ (8008444 <AHT_Upkeep+0x1ec>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2201      	movs	r2, #1
 80082d2:	4053      	eors	r3, r2
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <AHT_Upkeep+0x8a>
      AHTState = AHT_START_CALIBRATION;
 80082da:	4b55      	ldr	r3, [pc, #340]	@ (8008430 <AHT_Upkeep+0x1d8>)
 80082dc:	2201      	movs	r2, #1
 80082de:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_START_MEASUREMENTS;
    }
    break;
 80082e0:	e09d      	b.n	800841e <AHT_Upkeep+0x1c6>
      AHTState = AHT_STATE_START_MEASUREMENTS;
 80082e2:	4b53      	ldr	r3, [pc, #332]	@ (8008430 <AHT_Upkeep+0x1d8>)
 80082e4:	2203      	movs	r2, #3
 80082e6:	701a      	strb	r2, [r3, #0]
    break;
 80082e8:	e099      	b.n	800841e <AHT_Upkeep+0x1c6>

  case AHT_START_CALIBRATION:
  calibrated = false;
 80082ea:	4b56      	ldr	r3, [pc, #344]	@ (8008444 <AHT_Upkeep+0x1ec>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
  if (getSensorLock() != FREE) {
 80082f0:	f002 fb9c 	bl	800aa2c <getSensorLock>
 80082f4:	1e03      	subs	r3, r0, #0
 80082f6:	d000      	beq.n	80082fa <AHT_Upkeep+0xa2>
 80082f8:	e08a      	b.n	8008410 <AHT_Upkeep+0x1b8>
    break;
  }
  setSensorLock(AHT20);
 80082fa:	2003      	movs	r0, #3
 80082fc:	f002 fb86 	bl	800aa0c <setSensorLock>
  if (AHT20_calibration_start()) {
 8008300:	f7ff fe24 	bl	8007f4c <AHT20_calibration_start>
 8008304:	1e03      	subs	r3, r0, #0
 8008306:	d100      	bne.n	800830a <AHT_Upkeep+0xb2>
 8008308:	e084      	b.n	8008414 <AHT_Upkeep+0x1bc>
    AHTState = AHT_CALIBRATED;
 800830a:	4b49      	ldr	r3, [pc, #292]	@ (8008430 <AHT_Upkeep+0x1d8>)
 800830c:	2202      	movs	r2, #2
 800830e:	701a      	strb	r2, [r3, #0]
  }
  break;
 8008310:	e080      	b.n	8008414 <AHT_Upkeep+0x1bc>

  case AHT_CALIBRATED:
    if (AHT20_calibration_complete()) {
 8008312:	f7ff fe49 	bl	8007fa8 <AHT20_calibration_complete>
 8008316:	1e03      	subs	r3, r0, #0
 8008318:	d00f      	beq.n	800833a <AHT_Upkeep+0xe2>
      calibrated = true;
 800831a:	4b4a      	ldr	r3, [pc, #296]	@ (8008444 <AHT_Upkeep+0x1ec>)
 800831c:	2201      	movs	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 8008320:	2000      	movs	r0, #0
 8008322:	f002 fb73 	bl	800aa0c <setSensorLock>
      AHTState = AHT_STATE_START_MEASUREMENTS;
 8008326:	4b42      	ldr	r3, [pc, #264]	@ (8008430 <AHT_Upkeep+0x1d8>)
 8008328:	2203      	movs	r2, #3
 800832a:	701a      	strb	r2, [r3, #0]
      Info("AHT20 Calibration success");
 800832c:	4a46      	ldr	r2, [pc, #280]	@ (8008448 <AHT_Upkeep+0x1f0>)
 800832e:	4b47      	ldr	r3, [pc, #284]	@ (800844c <AHT_Upkeep+0x1f4>)
 8008330:	0019      	movs	r1, r3
 8008332:	2002      	movs	r0, #2
 8008334:	f008 fa02 	bl	801073c <CreateLine>
 8008338:	e009      	b.n	800834e <AHT_Upkeep+0xf6>
    }
    else {
      AHTState = AHT_START_CALIBRATION;
 800833a:	4b3d      	ldr	r3, [pc, #244]	@ (8008430 <AHT_Upkeep+0x1d8>)
 800833c:	2201      	movs	r2, #1
 800833e:	701a      	strb	r2, [r3, #0]
      AHT20TimeStamp = HAL_GetTick() + 20;
 8008340:	f008 fe48 	bl	8010fd4 <HAL_GetTick>
 8008344:	0003      	movs	r3, r0
 8008346:	3314      	adds	r3, #20
 8008348:	001a      	movs	r2, r3
 800834a:	4b38      	ldr	r3, [pc, #224]	@ (800842c <AHT_Upkeep+0x1d4>)
 800834c:	601a      	str	r2, [r3, #0]
    }
    setSensorLock(FREE);
 800834e:	2000      	movs	r0, #0
 8008350:	f002 fb5c 	bl	800aa0c <setSensorLock>
    break;
 8008354:	e063      	b.n	800841e <AHT_Upkeep+0x1c6>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8008356:	f002 fb69 	bl	800aa2c <getSensorLock>
 800835a:	1e03      	subs	r3, r0, #0
 800835c:	d15c      	bne.n	8008418 <AHT_Upkeep+0x1c0>
      break;
    }
    setSensorLock(AHT20);
 800835e:	2003      	movs	r0, #3
 8008360:	f002 fb54 	bl	800aa0c <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 8008364:	f7ff fe50 	bl	8008008 <AHT20_StartMeasurement>
 8008368:	0003      	movs	r3, r0
 800836a:	001a      	movs	r2, r3
 800836c:	2301      	movs	r3, #1
 800836e:	4053      	eors	r3, r2
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <AHT_Upkeep+0x126>
      AHTState = AHT20_ERROR;
 8008376:	4b2e      	ldr	r3, [pc, #184]	@ (8008430 <AHT_Upkeep+0x1d8>)
 8008378:	22ff      	movs	r2, #255	@ 0xff
 800837a:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 800837c:	e04f      	b.n	800841e <AHT_Upkeep+0x1c6>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800837e:	4b2c      	ldr	r3, [pc, #176]	@ (8008430 <AHT_Upkeep+0x1d8>)
 8008380:	2204      	movs	r2, #4
 8008382:	701a      	strb	r2, [r3, #0]
    break;
 8008384:	e04b      	b.n	800841e <AHT_Upkeep+0x1c6>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 8008386:	f7ff fe6d 	bl	8008064 <AHT20_GetMeasurementValues>
 800838a:	1e03      	subs	r3, r0, #0
 800838c:	d006      	beq.n	800839c <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 800838e:	2000      	movs	r0, #0
 8008390:	f002 fb3c 	bl	800aa0c <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 8008394:	4b26      	ldr	r3, [pc, #152]	@ (8008430 <AHT_Upkeep+0x1d8>)
 8008396:	2205      	movs	r2, #5
 8008398:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHT20TimeStamp = HAL_GetTick() + 40;
    }
    break;
 800839a:	e040      	b.n	800841e <AHT_Upkeep+0x1c6>
      AHT20TimeStamp = HAL_GetTick() + 40;
 800839c:	f008 fe1a 	bl	8010fd4 <HAL_GetTick>
 80083a0:	0003      	movs	r3, r0
 80083a2:	3328      	adds	r3, #40	@ 0x28
 80083a4:	001a      	movs	r2, r3
 80083a6:	4b21      	ldr	r3, [pc, #132]	@ (800842c <AHT_Upkeep+0x1d4>)
 80083a8:	601a      	str	r2, [r3, #0]
    break;
 80083aa:	e038      	b.n	800841e <AHT_Upkeep+0x1c6>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 80083ac:	003a      	movs	r2, r7
 80083ae:	1d3b      	adds	r3, r7, #4
 80083b0:	0011      	movs	r1, r2
 80083b2:	0018      	movs	r0, r3
 80083b4:	f7ff fe74 	bl	80080a0 <AHT20_Calculate>
 80083b8:	0003      	movs	r3, r0
 80083ba:	001a      	movs	r2, r3
 80083bc:	2301      	movs	r3, #1
 80083be:	4053      	eors	r3, r2
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <AHT_Upkeep+0x17a>
      AHTState = AHT20_ERROR;
 80083c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008430 <AHT_Upkeep+0x1d8>)
 80083c8:	22ff      	movs	r2, #255	@ 0xff
 80083ca:	701a      	strb	r2, [r3, #0]
      return AHTState;
 80083cc:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <AHT_Upkeep+0x1d8>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	e027      	b.n	8008422 <AHT_Upkeep+0x1ca>
    }
//    BMP280_setAirTemPHum(airtemp, airhum);
    AHTState = AHT_WAIT_STATE_MODE;
 80083d2:	4b17      	ldr	r3, [pc, #92]	@ (8008430 <AHT_Upkeep+0x1d8>)
 80083d4:	2208      	movs	r2, #8
 80083d6:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 80083d8:	f008 fdfc 	bl	8010fd4 <HAL_GetTick>
 80083dc:	0003      	movs	r3, r0
 80083de:	4a1c      	ldr	r2, [pc, #112]	@ (8008450 <AHT_Upkeep+0x1f8>)
 80083e0:	189a      	adds	r2, r3, r2
 80083e2:	4b12      	ldr	r3, [pc, #72]	@ (800842c <AHT_Upkeep+0x1d4>)
 80083e4:	601a      	str	r2, [r3, #0]
    break;
 80083e6:	e01a      	b.n	800841e <AHT_Upkeep+0x1c6>

  case AHT_WAIT_STATE_MODE:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 80083e8:	4b11      	ldr	r3, [pc, #68]	@ (8008430 <AHT_Upkeep+0x1d8>)
 80083ea:	2203      	movs	r2, #3
 80083ec:	701a      	strb	r2, [r3, #0]
  break;
 80083ee:	e016      	b.n	800841e <AHT_Upkeep+0x1c6>

  default:
    // Handle unexpected state
    AHT20_reset();
 80083f0:	f7ff ff16 	bl	8008220 <AHT20_reset>
    AHTState = AHT_STATE_INIT;
 80083f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008430 <AHT_Upkeep+0x1d8>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 80083fa:	f002 fb17 	bl	800aa2c <getSensorLock>
 80083fe:	0003      	movs	r3, r0
 8008400:	2b03      	cmp	r3, #3
 8008402:	d10b      	bne.n	800841c <AHT_Upkeep+0x1c4>
      setSensorLock(FREE);
 8008404:	2000      	movs	r0, #0
 8008406:	f002 fb01 	bl	800aa0c <setSensorLock>
    }
    break;
 800840a:	e007      	b.n	800841c <AHT_Upkeep+0x1c4>
      break;
 800840c:	46c0      	nop			@ (mov r8, r8)
 800840e:	e006      	b.n	800841e <AHT_Upkeep+0x1c6>
    break;
 8008410:	46c0      	nop			@ (mov r8, r8)
 8008412:	e004      	b.n	800841e <AHT_Upkeep+0x1c6>
  break;
 8008414:	46c0      	nop			@ (mov r8, r8)
 8008416:	e002      	b.n	800841e <AHT_Upkeep+0x1c6>
      break;
 8008418:	46c0      	nop			@ (mov r8, r8)
 800841a:	e000      	b.n	800841e <AHT_Upkeep+0x1c6>
    break;
 800841c:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800841e:	4b04      	ldr	r3, [pc, #16]	@ (8008430 <AHT_Upkeep+0x1d8>)
 8008420:	781b      	ldrb	r3, [r3, #0]
}
 8008422:	0018      	movs	r0, r3
 8008424:	46bd      	mov	sp, r7
 8008426:	b002      	add	sp, #8
 8008428:	bd80      	pop	{r7, pc}
 800842a:	46c0      	nop			@ (mov r8, r8)
 800842c:	20000b60 	.word	0x20000b60
 8008430:	20000b77 	.word	0x20000b77
 8008434:	08028b48 	.word	0x08028b48
 8008438:	08026eac 	.word	0x08026eac
 800843c:	08026d68 	.word	0x08026d68
 8008440:	08026ed4 	.word	0x08026ed4
 8008444:	20000b64 	.word	0x20000b64
 8008448:	08026ef8 	.word	0x08026ef8
 800844c:	08026f14 	.word	0x08026f14
 8008450:	0000ea60 	.word	0x0000ea60

08008454 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008456:	b087      	sub	sp, #28
 8008458:	af02      	add	r7, sp, #8
 800845a:	0004      	movs	r4, r0
 800845c:	0008      	movs	r0, r1
 800845e:	60ba      	str	r2, [r7, #8]
 8008460:	0019      	movs	r1, r3
 8008462:	260e      	movs	r6, #14
 8008464:	19bb      	adds	r3, r7, r6
 8008466:	1c22      	adds	r2, r4, #0
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	230c      	movs	r3, #12
 800846c:	18fb      	adds	r3, r7, r3
 800846e:	1c02      	adds	r2, r0, #0
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	1dbb      	adds	r3, r7, #6
 8008474:	1c0a      	adds	r2, r1, #0
 8008476:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8008478:	4b0c      	ldr	r3, [pc, #48]	@ (80084ac <WriteMemRegister+0x58>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d010      	beq.n	80084a2 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 8008480:	4b0a      	ldr	r3, [pc, #40]	@ (80084ac <WriteMemRegister+0x58>)
 8008482:	681c      	ldr	r4, [r3, #0]
 8008484:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <WriteMemRegister+0x5c>)
 8008486:	7818      	ldrb	r0, [r3, #0]
 8008488:	68bd      	ldr	r5, [r7, #8]
 800848a:	230c      	movs	r3, #12
 800848c:	18fb      	adds	r3, r7, r3
 800848e:	881a      	ldrh	r2, [r3, #0]
 8008490:	19bb      	adds	r3, r7, r6
 8008492:	8819      	ldrh	r1, [r3, #0]
 8008494:	1dbb      	adds	r3, r7, #6
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	002b      	movs	r3, r5
 800849c:	47a0      	blx	r4
 800849e:	0003      	movs	r3, r0
 80084a0:	e000      	b.n	80084a4 <WriteMemRegister+0x50>
  }
  return false;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	0018      	movs	r0, r3
 80084a6:	46bd      	mov	sp, r7
 80084a8:	b005      	add	sp, #20
 80084aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ac:	20000b78 	.word	0x20000b78
 80084b0:	2000008d 	.word	0x2000008d

080084b4 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80084b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	0004      	movs	r4, r0
 80084bc:	0008      	movs	r0, r1
 80084be:	60ba      	str	r2, [r7, #8]
 80084c0:	0019      	movs	r1, r3
 80084c2:	260e      	movs	r6, #14
 80084c4:	19bb      	adds	r3, r7, r6
 80084c6:	1c22      	adds	r2, r4, #0
 80084c8:	801a      	strh	r2, [r3, #0]
 80084ca:	230c      	movs	r3, #12
 80084cc:	18fb      	adds	r3, r7, r3
 80084ce:	1c02      	adds	r2, r0, #0
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	1dbb      	adds	r3, r7, #6
 80084d4:	1c0a      	adds	r2, r1, #0
 80084d6:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80084d8:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <ReadMemRegister+0x58>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d010      	beq.n	8008502 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 80084e0:	4b0a      	ldr	r3, [pc, #40]	@ (800850c <ReadMemRegister+0x58>)
 80084e2:	681c      	ldr	r4, [r3, #0]
 80084e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008510 <ReadMemRegister+0x5c>)
 80084e6:	7818      	ldrb	r0, [r3, #0]
 80084e8:	68bd      	ldr	r5, [r7, #8]
 80084ea:	230c      	movs	r3, #12
 80084ec:	18fb      	adds	r3, r7, r3
 80084ee:	881a      	ldrh	r2, [r3, #0]
 80084f0:	19bb      	adds	r3, r7, r6
 80084f2:	8819      	ldrh	r1, [r3, #0]
 80084f4:	1dbb      	adds	r3, r7, #6
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	002b      	movs	r3, r5
 80084fc:	47a0      	blx	r4
 80084fe:	0003      	movs	r3, r0
 8008500:	e000      	b.n	8008504 <ReadMemRegister+0x50>
  }
  return false;
 8008502:	2300      	movs	r3, #0
}
 8008504:	0018      	movs	r0, r3
 8008506:	46bd      	mov	sp, r7
 8008508:	b005      	add	sp, #20
 800850a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800850c:	20000b7c 	.word	0x20000b7c
 8008510:	2000008d 	.word	0x2000008d

08008514 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800851c:	f008 fd5a 	bl	8010fd4 <HAL_GetTick>
 8008520:	0002      	movs	r2, r0
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	18d2      	adds	r2, r2, r3
 8008526:	4b03      	ldr	r3, [pc, #12]	@ (8008534 <setBMP280TimeStamp+0x20>)
 8008528:	601a      	str	r2, [r3, #0]
}
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	46bd      	mov	sp, r7
 800852e:	b002      	add	sp, #8
 8008530:	bd80      	pop	{r7, pc}
 8008532:	46c0      	nop			@ (mov r8, r8)
 8008534:	20000ba4 	.word	0x20000ba4

08008538 <BMP280_reset>:

static void BMP280_reset() {
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800853e:	1dfb      	adds	r3, r7, #7
 8008540:	22b6      	movs	r2, #182	@ 0xb6
 8008542:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 8008544:	1dfa      	adds	r2, r7, #7
 8008546:	2301      	movs	r3, #1
 8008548:	2101      	movs	r1, #1
 800854a:	20e0      	movs	r0, #224	@ 0xe0
 800854c:	f7ff ff82 	bl	8008454 <WriteMemRegister>
  Info("BMP280 has been reset");
 8008550:	4a06      	ldr	r2, [pc, #24]	@ (800856c <BMP280_reset+0x34>)
 8008552:	4b07      	ldr	r3, [pc, #28]	@ (8008570 <BMP280_reset+0x38>)
 8008554:	0019      	movs	r1, r3
 8008556:	2002      	movs	r0, #2
 8008558:	f008 f8f0 	bl	801073c <CreateLine>
  HAL_Delay(100);
 800855c:	2064      	movs	r0, #100	@ 0x64
 800855e:	f008 fd43 	bl	8010fe8 <HAL_Delay>
}
 8008562:	46c0      	nop			@ (mov r8, r8)
 8008564:	46bd      	mov	sp, r7
 8008566:	b002      	add	sp, #8
 8008568:	bd80      	pop	{r7, pc}
 800856a:	46c0      	nop			@ (mov r8, r8)
 800856c:	08026f18 	.word	0x08026f18
 8008570:	08026f30 	.word	0x08026f30

08008574 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 8008574:	b590      	push	{r4, r7, lr}
 8008576:	b083      	sub	sp, #12
 8008578:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800857a:	4aab      	ldr	r2, [pc, #684]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800857c:	231a      	movs	r3, #26
 800857e:	2101      	movs	r1, #1
 8008580:	2088      	movs	r0, #136	@ 0x88
 8008582:	f7ff ff97 	bl	80084b4 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 8008586:	4ba8      	ldr	r3, [pc, #672]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	021b      	lsls	r3, r3, #8
 800858c:	b29b      	uxth	r3, r3
 800858e:	4aa6      	ldr	r2, [pc, #664]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	189b      	adds	r3, r3, r2
 8008594:	b29a      	uxth	r2, r3
 8008596:	4ba5      	ldr	r3, [pc, #660]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008598:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800859a:	4ba3      	ldr	r3, [pc, #652]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800859c:	78db      	ldrb	r3, [r3, #3]
 800859e:	021b      	lsls	r3, r3, #8
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	4aa1      	ldr	r2, [pc, #644]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085a4:	7892      	ldrb	r2, [r2, #2]
 80085a6:	189b      	adds	r3, r3, r2
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	b21a      	sxth	r2, r3
 80085ac:	4b9f      	ldr	r3, [pc, #636]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80085ae:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 80085b0:	4b9d      	ldr	r3, [pc, #628]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085b2:	795b      	ldrb	r3, [r3, #5]
 80085b4:	021b      	lsls	r3, r3, #8
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	4a9b      	ldr	r2, [pc, #620]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085ba:	7912      	ldrb	r2, [r2, #4]
 80085bc:	189b      	adds	r3, r3, r2
 80085be:	b29b      	uxth	r3, r3
 80085c0:	b21a      	sxth	r2, r3
 80085c2:	4b9a      	ldr	r3, [pc, #616]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80085c4:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 80085c6:	4b98      	ldr	r3, [pc, #608]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085c8:	79db      	ldrb	r3, [r3, #7]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	4a96      	ldr	r2, [pc, #600]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085d0:	7992      	ldrb	r2, [r2, #6]
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	4b95      	ldr	r3, [pc, #596]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80085d8:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 80085da:	4b93      	ldr	r3, [pc, #588]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085dc:	7a5b      	ldrb	r3, [r3, #9]
 80085de:	021b      	lsls	r3, r3, #8
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	4a91      	ldr	r2, [pc, #580]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085e4:	7a12      	ldrb	r2, [r2, #8]
 80085e6:	189b      	adds	r3, r3, r2
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	b21a      	sxth	r2, r3
 80085ec:	4b8f      	ldr	r3, [pc, #572]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80085ee:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 80085f0:	4b8d      	ldr	r3, [pc, #564]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085f2:	7adb      	ldrb	r3, [r3, #11]
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	4a8b      	ldr	r2, [pc, #556]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80085fa:	7a92      	ldrb	r2, [r2, #10]
 80085fc:	189b      	adds	r3, r3, r2
 80085fe:	b29b      	uxth	r3, r3
 8008600:	b21a      	sxth	r2, r3
 8008602:	4b8a      	ldr	r3, [pc, #552]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008604:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 8008606:	4b88      	ldr	r3, [pc, #544]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008608:	7b5b      	ldrb	r3, [r3, #13]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	b29b      	uxth	r3, r3
 800860e:	4a86      	ldr	r2, [pc, #536]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008610:	7b12      	ldrb	r2, [r2, #12]
 8008612:	189b      	adds	r3, r3, r2
 8008614:	b29b      	uxth	r3, r3
 8008616:	b21a      	sxth	r2, r3
 8008618:	4b84      	ldr	r3, [pc, #528]	@ (800882c <BMP280_get_calibration+0x2b8>)
 800861a:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800861c:	4b82      	ldr	r3, [pc, #520]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800861e:	7bdb      	ldrb	r3, [r3, #15]
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	b29b      	uxth	r3, r3
 8008624:	4a80      	ldr	r2, [pc, #512]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008626:	7b92      	ldrb	r2, [r2, #14]
 8008628:	189b      	adds	r3, r3, r2
 800862a:	b29b      	uxth	r3, r3
 800862c:	b21a      	sxth	r2, r3
 800862e:	4b7f      	ldr	r3, [pc, #508]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008630:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 8008632:	4b7d      	ldr	r3, [pc, #500]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008634:	7c5b      	ldrb	r3, [r3, #17]
 8008636:	021b      	lsls	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	4a7b      	ldr	r2, [pc, #492]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800863c:	7c12      	ldrb	r2, [r2, #16]
 800863e:	189b      	adds	r3, r3, r2
 8008640:	b29b      	uxth	r3, r3
 8008642:	b21a      	sxth	r2, r3
 8008644:	4b79      	ldr	r3, [pc, #484]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008646:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 8008648:	4b77      	ldr	r3, [pc, #476]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800864a:	7cdb      	ldrb	r3, [r3, #19]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	b29b      	uxth	r3, r3
 8008650:	4a75      	ldr	r2, [pc, #468]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008652:	7c92      	ldrb	r2, [r2, #18]
 8008654:	189b      	adds	r3, r3, r2
 8008656:	b29b      	uxth	r3, r3
 8008658:	b21a      	sxth	r2, r3
 800865a:	4b74      	ldr	r3, [pc, #464]	@ (800882c <BMP280_get_calibration+0x2b8>)
 800865c:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800865e:	4b72      	ldr	r3, [pc, #456]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008660:	7d5b      	ldrb	r3, [r3, #21]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	b29b      	uxth	r3, r3
 8008666:	4a70      	ldr	r2, [pc, #448]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008668:	7d12      	ldrb	r2, [r2, #20]
 800866a:	189b      	adds	r3, r3, r2
 800866c:	b29b      	uxth	r3, r3
 800866e:	b21a      	sxth	r2, r3
 8008670:	4b6e      	ldr	r3, [pc, #440]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008672:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 8008674:	4b6c      	ldr	r3, [pc, #432]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008676:	7ddb      	ldrb	r3, [r3, #23]
 8008678:	021b      	lsls	r3, r3, #8
 800867a:	b29b      	uxth	r3, r3
 800867c:	4a6a      	ldr	r2, [pc, #424]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800867e:	7d92      	ldrb	r2, [r2, #22]
 8008680:	189b      	adds	r3, r3, r2
 8008682:	b29b      	uxth	r3, r3
 8008684:	b21a      	sxth	r2, r3
 8008686:	4b69      	ldr	r3, [pc, #420]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008688:	82da      	strh	r2, [r3, #22]
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800868a:	4b67      	ldr	r3, [pc, #412]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	001c      	movs	r4, r3
 8008690:	4b65      	ldr	r3, [pc, #404]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	0018      	movs	r0, r3
 8008696:	4b65      	ldr	r3, [pc, #404]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	4a65      	ldr	r2, [pc, #404]	@ (8008830 <BMP280_get_calibration+0x2bc>)
 800869c:	4965      	ldr	r1, [pc, #404]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	9000      	str	r0, [sp, #0]
 80086a2:	0023      	movs	r3, r4
 80086a4:	2003      	movs	r0, #3
 80086a6:	f008 f849 	bl	801073c <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 80086aa:	4b5f      	ldr	r3, [pc, #380]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80086ac:	78db      	ldrb	r3, [r3, #3]
 80086ae:	001c      	movs	r4, r3
 80086b0:	4b5d      	ldr	r3, [pc, #372]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80086b2:	789b      	ldrb	r3, [r3, #2]
 80086b4:	0018      	movs	r0, r3
 80086b6:	4b5d      	ldr	r3, [pc, #372]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80086b8:	2202      	movs	r2, #2
 80086ba:	5e9b      	ldrsh	r3, [r3, r2]
 80086bc:	4a5e      	ldr	r2, [pc, #376]	@ (8008838 <BMP280_get_calibration+0x2c4>)
 80086be:	495d      	ldr	r1, [pc, #372]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	9000      	str	r0, [sp, #0]
 80086c4:	0023      	movs	r3, r4
 80086c6:	2003      	movs	r0, #3
 80086c8:	f008 f838 	bl	801073c <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 80086cc:	4b56      	ldr	r3, [pc, #344]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80086ce:	795b      	ldrb	r3, [r3, #5]
 80086d0:	001c      	movs	r4, r3
 80086d2:	4b55      	ldr	r3, [pc, #340]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80086d4:	791b      	ldrb	r3, [r3, #4]
 80086d6:	0018      	movs	r0, r3
 80086d8:	4b54      	ldr	r3, [pc, #336]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80086da:	2204      	movs	r2, #4
 80086dc:	5e9b      	ldrsh	r3, [r3, r2]
 80086de:	4a57      	ldr	r2, [pc, #348]	@ (800883c <BMP280_get_calibration+0x2c8>)
 80086e0:	4954      	ldr	r1, [pc, #336]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	9000      	str	r0, [sp, #0]
 80086e6:	0023      	movs	r3, r4
 80086e8:	2003      	movs	r0, #3
 80086ea:	f008 f827 	bl	801073c <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 80086ee:	4b4e      	ldr	r3, [pc, #312]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80086f0:	79db      	ldrb	r3, [r3, #7]
 80086f2:	001c      	movs	r4, r3
 80086f4:	4b4c      	ldr	r3, [pc, #304]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80086f6:	799b      	ldrb	r3, [r3, #6]
 80086f8:	0018      	movs	r0, r3
 80086fa:	4b4c      	ldr	r3, [pc, #304]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80086fc:	88db      	ldrh	r3, [r3, #6]
 80086fe:	4a50      	ldr	r2, [pc, #320]	@ (8008840 <BMP280_get_calibration+0x2cc>)
 8008700:	494c      	ldr	r1, [pc, #304]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	9000      	str	r0, [sp, #0]
 8008706:	0023      	movs	r3, r4
 8008708:	2003      	movs	r0, #3
 800870a:	f008 f817 	bl	801073c <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800870e:	4b46      	ldr	r3, [pc, #280]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008710:	7a5b      	ldrb	r3, [r3, #9]
 8008712:	001c      	movs	r4, r3
 8008714:	4b44      	ldr	r3, [pc, #272]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008716:	7a1b      	ldrb	r3, [r3, #8]
 8008718:	0018      	movs	r0, r3
 800871a:	4b44      	ldr	r3, [pc, #272]	@ (800882c <BMP280_get_calibration+0x2b8>)
 800871c:	2208      	movs	r2, #8
 800871e:	5e9b      	ldrsh	r3, [r3, r2]
 8008720:	4a48      	ldr	r2, [pc, #288]	@ (8008844 <BMP280_get_calibration+0x2d0>)
 8008722:	4944      	ldr	r1, [pc, #272]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	9000      	str	r0, [sp, #0]
 8008728:	0023      	movs	r3, r4
 800872a:	2003      	movs	r0, #3
 800872c:	f008 f806 	bl	801073c <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 8008730:	4b3d      	ldr	r3, [pc, #244]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008732:	7adb      	ldrb	r3, [r3, #11]
 8008734:	001c      	movs	r4, r3
 8008736:	4b3c      	ldr	r3, [pc, #240]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008738:	7a9b      	ldrb	r3, [r3, #10]
 800873a:	0018      	movs	r0, r3
 800873c:	4b3b      	ldr	r3, [pc, #236]	@ (800882c <BMP280_get_calibration+0x2b8>)
 800873e:	220a      	movs	r2, #10
 8008740:	5e9b      	ldrsh	r3, [r3, r2]
 8008742:	4a41      	ldr	r2, [pc, #260]	@ (8008848 <BMP280_get_calibration+0x2d4>)
 8008744:	493b      	ldr	r1, [pc, #236]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	9000      	str	r0, [sp, #0]
 800874a:	0023      	movs	r3, r4
 800874c:	2003      	movs	r0, #3
 800874e:	f007 fff5 	bl	801073c <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 8008752:	4b35      	ldr	r3, [pc, #212]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008754:	7b5b      	ldrb	r3, [r3, #13]
 8008756:	001c      	movs	r4, r3
 8008758:	4b33      	ldr	r3, [pc, #204]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800875a:	7b1b      	ldrb	r3, [r3, #12]
 800875c:	0018      	movs	r0, r3
 800875e:	4b33      	ldr	r3, [pc, #204]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008760:	220c      	movs	r2, #12
 8008762:	5e9b      	ldrsh	r3, [r3, r2]
 8008764:	4a39      	ldr	r2, [pc, #228]	@ (800884c <BMP280_get_calibration+0x2d8>)
 8008766:	4933      	ldr	r1, [pc, #204]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	9000      	str	r0, [sp, #0]
 800876c:	0023      	movs	r3, r4
 800876e:	2003      	movs	r0, #3
 8008770:	f007 ffe4 	bl	801073c <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 8008774:	4b2c      	ldr	r3, [pc, #176]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008776:	7bdb      	ldrb	r3, [r3, #15]
 8008778:	001c      	movs	r4, r3
 800877a:	4b2b      	ldr	r3, [pc, #172]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800877c:	7b9b      	ldrb	r3, [r3, #14]
 800877e:	0018      	movs	r0, r3
 8008780:	4b2a      	ldr	r3, [pc, #168]	@ (800882c <BMP280_get_calibration+0x2b8>)
 8008782:	220e      	movs	r2, #14
 8008784:	5e9b      	ldrsh	r3, [r3, r2]
 8008786:	4a32      	ldr	r2, [pc, #200]	@ (8008850 <BMP280_get_calibration+0x2dc>)
 8008788:	492a      	ldr	r1, [pc, #168]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	9000      	str	r0, [sp, #0]
 800878e:	0023      	movs	r3, r4
 8008790:	2003      	movs	r0, #3
 8008792:	f007 ffd3 	bl	801073c <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 8008796:	4b24      	ldr	r3, [pc, #144]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008798:	7c5b      	ldrb	r3, [r3, #17]
 800879a:	001c      	movs	r4, r3
 800879c:	4b22      	ldr	r3, [pc, #136]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 800879e:	7c1b      	ldrb	r3, [r3, #16]
 80087a0:	0018      	movs	r0, r3
 80087a2:	4b22      	ldr	r3, [pc, #136]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80087a4:	2210      	movs	r2, #16
 80087a6:	5e9b      	ldrsh	r3, [r3, r2]
 80087a8:	4a2a      	ldr	r2, [pc, #168]	@ (8008854 <BMP280_get_calibration+0x2e0>)
 80087aa:	4922      	ldr	r1, [pc, #136]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	9000      	str	r0, [sp, #0]
 80087b0:	0023      	movs	r3, r4
 80087b2:	2003      	movs	r0, #3
 80087b4:	f007 ffc2 	bl	801073c <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 80087b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80087ba:	7cdb      	ldrb	r3, [r3, #19]
 80087bc:	001c      	movs	r4, r3
 80087be:	4b1a      	ldr	r3, [pc, #104]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80087c0:	7c9b      	ldrb	r3, [r3, #18]
 80087c2:	0018      	movs	r0, r3
 80087c4:	4b19      	ldr	r3, [pc, #100]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80087c6:	2212      	movs	r2, #18
 80087c8:	5e9b      	ldrsh	r3, [r3, r2]
 80087ca:	4a23      	ldr	r2, [pc, #140]	@ (8008858 <BMP280_get_calibration+0x2e4>)
 80087cc:	4919      	ldr	r1, [pc, #100]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	9000      	str	r0, [sp, #0]
 80087d2:	0023      	movs	r3, r4
 80087d4:	2003      	movs	r0, #3
 80087d6:	f007 ffb1 	bl	801073c <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 80087da:	4b13      	ldr	r3, [pc, #76]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80087dc:	7d5b      	ldrb	r3, [r3, #21]
 80087de:	001c      	movs	r4, r3
 80087e0:	4b11      	ldr	r3, [pc, #68]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80087e2:	7d1b      	ldrb	r3, [r3, #20]
 80087e4:	0018      	movs	r0, r3
 80087e6:	4b11      	ldr	r3, [pc, #68]	@ (800882c <BMP280_get_calibration+0x2b8>)
 80087e8:	2214      	movs	r2, #20
 80087ea:	5e9b      	ldrsh	r3, [r3, r2]
 80087ec:	4a1b      	ldr	r2, [pc, #108]	@ (800885c <BMP280_get_calibration+0x2e8>)
 80087ee:	4911      	ldr	r1, [pc, #68]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	9000      	str	r0, [sp, #0]
 80087f4:	0023      	movs	r3, r4
 80087f6:	2003      	movs	r0, #3
 80087f8:	f007 ffa0 	bl	801073c <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 80087fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 80087fe:	7ddb      	ldrb	r3, [r3, #23]
 8008800:	001c      	movs	r4, r3
 8008802:	4b09      	ldr	r3, [pc, #36]	@ (8008828 <BMP280_get_calibration+0x2b4>)
 8008804:	7d9b      	ldrb	r3, [r3, #22]
 8008806:	0018      	movs	r0, r3
 8008808:	4b08      	ldr	r3, [pc, #32]	@ (800882c <BMP280_get_calibration+0x2b8>)
 800880a:	2216      	movs	r2, #22
 800880c:	5e9b      	ldrsh	r3, [r3, r2]
 800880e:	4a14      	ldr	r2, [pc, #80]	@ (8008860 <BMP280_get_calibration+0x2ec>)
 8008810:	4908      	ldr	r1, [pc, #32]	@ (8008834 <BMP280_get_calibration+0x2c0>)
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	9000      	str	r0, [sp, #0]
 8008816:	0023      	movs	r3, r4
 8008818:	2003      	movs	r0, #3
 800881a:	f007 ff8f 	bl	801073c <CreateLine>
}
 800881e:	46c0      	nop			@ (mov r8, r8)
 8008820:	46bd      	mov	sp, r7
 8008822:	b001      	add	sp, #4
 8008824:	bd90      	pop	{r4, r7, pc}
 8008826:	46c0      	nop			@ (mov r8, r8)
 8008828:	20000ba8 	.word	0x20000ba8
 800882c:	20000b80 	.word	0x20000b80
 8008830:	08026f34 	.word	0x08026f34
 8008834:	08026f68 	.word	0x08026f68
 8008838:	08026f6c 	.word	0x08026f6c
 800883c:	08026fa0 	.word	0x08026fa0
 8008840:	08026fd4 	.word	0x08026fd4
 8008844:	08027008 	.word	0x08027008
 8008848:	0802703c 	.word	0x0802703c
 800884c:	08027070 	.word	0x08027070
 8008850:	080270a4 	.word	0x080270a4
 8008854:	080270d8 	.word	0x080270d8
 8008858:	0802710c 	.word	0x0802710c
 800885c:	08027140 	.word	0x08027140
 8008860:	08027174 	.word	0x08027174

08008864 <BMP280_probe>:

static bool BMP280_probe() {
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800886a:	4b34      	ldr	r3, [pc, #208]	@ (800893c <BMP280_probe+0xd8>)
 800886c:	2276      	movs	r2, #118	@ 0x76
 800886e:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 8008870:	1dba      	adds	r2, r7, #6
 8008872:	2301      	movs	r3, #1
 8008874:	2101      	movs	r1, #1
 8008876:	20d0      	movs	r0, #208	@ 0xd0
 8008878:	f7ff fe1c 	bl	80084b4 <ReadMemRegister>
 800887c:	0003      	movs	r3, r0
 800887e:	001a      	movs	r2, r3
 8008880:	1dfb      	adds	r3, r7, #7
 8008882:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 8008884:	1dfb      	adds	r3, r7, #7
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	b25b      	sxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <BMP280_probe+0x40>
 800888e:	1dbb      	adds	r3, r7, #6
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d006      	beq.n	80088a4 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 8008896:	1dbb      	adds	r3, r7, #6
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	4a29      	ldr	r2, [pc, #164]	@ (8008940 <BMP280_probe+0xdc>)
 800889c:	4929      	ldr	r1, [pc, #164]	@ (8008944 <BMP280_probe+0xe0>)
 800889e:	2003      	movs	r0, #3
 80088a0:	f007 ff4c 	bl	801073c <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 80088a4:	1dbb      	adds	r3, r7, #6
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b58      	cmp	r3, #88	@ 0x58
 80088aa:	d01f      	beq.n	80088ec <BMP280_probe+0x88>
      bmp280I2Caddr++;
 80088ac:	4b23      	ldr	r3, [pc, #140]	@ (800893c <BMP280_probe+0xd8>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	4b21      	ldr	r3, [pc, #132]	@ (800893c <BMP280_probe+0xd8>)
 80088b6:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 80088b8:	1dba      	adds	r2, r7, #6
 80088ba:	2301      	movs	r3, #1
 80088bc:	2101      	movs	r1, #1
 80088be:	20d0      	movs	r0, #208	@ 0xd0
 80088c0:	f7ff fdf8 	bl	80084b4 <ReadMemRegister>
 80088c4:	0003      	movs	r3, r0
 80088c6:	001a      	movs	r2, r3
 80088c8:	1dfb      	adds	r3, r7, #7
 80088ca:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 80088cc:	1dfb      	adds	r3, r7, #7
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <BMP280_probe+0x88>
 80088d6:	1dbb      	adds	r3, r7, #6
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d006      	beq.n	80088ec <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 80088de:	1dbb      	adds	r3, r7, #6
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	4a17      	ldr	r2, [pc, #92]	@ (8008940 <BMP280_probe+0xdc>)
 80088e4:	4917      	ldr	r1, [pc, #92]	@ (8008944 <BMP280_probe+0xe0>)
 80088e6:	2003      	movs	r0, #3
 80088e8:	f007 ff28 	bl	801073c <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 80088ec:	1dbb      	adds	r3, r7, #6
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b58      	cmp	r3, #88	@ 0x58
 80088f2:	d110      	bne.n	8008916 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 80088f4:	1dbb      	adds	r3, r7, #6
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	0018      	movs	r0, r3
 80088fa:	4b10      	ldr	r3, [pc, #64]	@ (800893c <BMP280_probe+0xd8>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	4a12      	ldr	r2, [pc, #72]	@ (8008948 <BMP280_probe+0xe4>)
 8008900:	4912      	ldr	r1, [pc, #72]	@ (800894c <BMP280_probe+0xe8>)
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	0003      	movs	r3, r0
 8008906:	2002      	movs	r0, #2
 8008908:	f007 ff18 	bl	801073c <CreateLine>
      BMP280_reset(); // get an initial state
 800890c:	f7ff fe14 	bl	8008538 <BMP280_reset>
      BMP280_get_calibration();
 8008910:	f7ff fe30 	bl	8008574 <BMP280_get_calibration>
 8008914:	e008      	b.n	8008928 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 8008916:	4b09      	ldr	r3, [pc, #36]	@ (800893c <BMP280_probe+0xd8>)
 8008918:	2200      	movs	r2, #0
 800891a:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800891c:	4a0c      	ldr	r2, [pc, #48]	@ (8008950 <BMP280_probe+0xec>)
 800891e:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <BMP280_probe+0xf0>)
 8008920:	0019      	movs	r1, r3
 8008922:	2001      	movs	r0, #1
 8008924:	f007 ff0a 	bl	801073c <CreateLine>
    }
    return bmp280I2Caddr;
 8008928:	4b04      	ldr	r3, [pc, #16]	@ (800893c <BMP280_probe+0xd8>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	1e5a      	subs	r2, r3, #1
 800892e:	4193      	sbcs	r3, r2
 8008930:	b2db      	uxtb	r3, r3
}
 8008932:	0018      	movs	r0, r3
 8008934:	46bd      	mov	sp, r7
 8008936:	b002      	add	sp, #8
 8008938:	bd80      	pop	{r7, pc}
 800893a:	46c0      	nop			@ (mov r8, r8)
 800893c:	2000008d 	.word	0x2000008d
 8008940:	080271a8 	.word	0x080271a8
 8008944:	08026f68 	.word	0x08026f68
 8008948:	080271d8 	.word	0x080271d8
 800894c:	08026f30 	.word	0x08026f30
 8008950:	08027210 	.word	0x08027210
 8008954:	08027224 	.word	0x08027224

08008958 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800895c:	f7ff ff82 	bl	8008864 <BMP280_probe>
 8008960:	0003      	movs	r3, r0
}
 8008962:	0018      	movs	r0, r3
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 8008972:	4b05      	ldr	r3, [pc, #20]	@ (8008988 <BMP_Init+0x20>)
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 8008978:	4b04      	ldr	r3, [pc, #16]	@ (800898c <BMP_Init+0x24>)
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	601a      	str	r2, [r3, #0]
  if (BMP280_probe() == 0) {
 800897e:	f7ff ff71 	bl	8008864 <BMP280_probe>
    return;
  }
// register hier de sensor om mee te doen in de meetcyclus
}
 8008982:	46bd      	mov	sp, r7
 8008984:	b002      	add	sp, #8
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000b7c 	.word	0x20000b7c
 800898c:	20000b78 	.word	0x20000b78

08008990 <BMP280_set_config>:


static bool BMP280_set_config() {
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 8008996:	1dbb      	adds	r3, r7, #6
 8008998:	228c      	movs	r2, #140	@ 0x8c
 800899a:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800899c:	1dba      	adds	r2, r7, #6
 800899e:	2301      	movs	r3, #1
 80089a0:	2101      	movs	r1, #1
 80089a2:	20f5      	movs	r0, #245	@ 0xf5
 80089a4:	f7ff fd56 	bl	8008454 <WriteMemRegister>
 80089a8:	0003      	movs	r3, r0
 80089aa:	001a      	movs	r2, r3
 80089ac:	1dfb      	adds	r3, r7, #7
 80089ae:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 80089b0:	f008 fb10 	bl	8010fd4 <HAL_GetTick>
 80089b4:	0003      	movs	r3, r0
 80089b6:	330a      	adds	r3, #10
 80089b8:	001a      	movs	r2, r3
 80089ba:	4b06      	ldr	r3, [pc, #24]	@ (80089d4 <BMP280_set_config+0x44>)
 80089bc:	601a      	str	r2, [r3, #0]
  return rslt;
 80089be:	1dfb      	adds	r3, r7, #7
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	b25b      	sxtb	r3, r3
 80089c4:	1e5a      	subs	r2, r3, #1
 80089c6:	4193      	sbcs	r3, r2
 80089c8:	b2db      	uxtb	r3, r3
}
 80089ca:	0018      	movs	r0, r3
 80089cc:	46bd      	mov	sp, r7
 80089ce:	b002      	add	sp, #8
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	46c0      	nop			@ (mov r8, r8)
 80089d4:	20000ba4 	.word	0x20000ba4

080089d8 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 80089de:	1dbb      	adds	r3, r7, #6
 80089e0:	2208      	movs	r2, #8
 80089e2:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 80089e4:	4b22      	ldr	r3, [pc, #136]	@ (8008a70 <BMP280_set_mode+0x98>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	224c      	movs	r2, #76	@ 0x4c
 80089ea:	4313      	orrs	r3, r2
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	1d7b      	adds	r3, r7, #5
 80089f0:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 80089f2:	1d7a      	adds	r2, r7, #5
 80089f4:	2301      	movs	r3, #1
 80089f6:	2101      	movs	r1, #1
 80089f8:	20f4      	movs	r0, #244	@ 0xf4
 80089fa:	f7ff fd2b 	bl	8008454 <WriteMemRegister>
 80089fe:	0003      	movs	r3, r0
 8008a00:	001a      	movs	r2, r3
 8008a02:	1dfb      	adds	r3, r7, #7
 8008a04:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 8008a06:	f008 fae5 	bl	8010fd4 <HAL_GetTick>
 8008a0a:	0003      	movs	r3, r0
 8008a0c:	22fa      	movs	r2, #250	@ 0xfa
 8008a0e:	0092      	lsls	r2, r2, #2
 8008a10:	189a      	adds	r2, r3, r2
 8008a12:	4b18      	ldr	r3, [pc, #96]	@ (8008a74 <BMP280_set_mode+0x9c>)
 8008a14:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 8008a16:	e016      	b.n	8008a46 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 8008a18:	1dba      	adds	r2, r7, #6
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	20f3      	movs	r0, #243	@ 0xf3
 8008a20:	f7ff fd48 	bl	80084b4 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 8008a24:	4b13      	ldr	r3, [pc, #76]	@ (8008a74 <BMP280_set_mode+0x9c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f007 fe31 	bl	8010690 <TimestampIsReached>
 8008a2e:	1e03      	subs	r3, r0, #0
 8008a30:	d006      	beq.n	8008a40 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 8008a32:	4a11      	ldr	r2, [pc, #68]	@ (8008a78 <BMP280_set_mode+0xa0>)
 8008a34:	4b11      	ldr	r3, [pc, #68]	@ (8008a7c <BMP280_set_mode+0xa4>)
 8008a36:	0019      	movs	r1, r3
 8008a38:	2001      	movs	r0, #1
 8008a3a:	f007 fe7f 	bl	801073c <CreateLine>
      break;
 8008a3e:	e008      	b.n	8008a52 <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 8008a40:	2001      	movs	r0, #1
 8008a42:	f008 fad1 	bl	8010fe8 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 8008a46:	1dbb      	adds	r3, r7, #6
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	001a      	movs	r2, r3
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	4013      	ands	r3, r2
 8008a50:	d1e2      	bne.n	8008a18 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 8008a52:	f008 fabf 	bl	8010fd4 <HAL_GetTick>
 8008a56:	0002      	movs	r2, r0
 8008a58:	4b06      	ldr	r3, [pc, #24]	@ (8008a74 <BMP280_set_mode+0x9c>)
 8008a5a:	601a      	str	r2, [r3, #0]
  return rslt;
 8008a5c:	1dfb      	adds	r3, r7, #7
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	b25b      	sxtb	r3, r3
 8008a62:	1e5a      	subs	r2, r3, #1
 8008a64:	4193      	sbcs	r3, r2
 8008a66:	b2db      	uxtb	r3, r3
}
 8008a68:	0018      	movs	r0, r3
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	b002      	add	sp, #8
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	2000008e 	.word	0x2000008e
 8008a74:	20000ba4 	.word	0x20000ba4
 8008a78:	08027228 	.word	0x08027228
 8008a7c:	08027224 	.word	0x08027224

08008a80 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 8008a86:	1dba      	adds	r2, r7, #6
 8008a88:	2301      	movs	r3, #1
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	20f4      	movs	r0, #244	@ 0xf4
 8008a8e:	f7ff fd11 	bl	80084b4 <ReadMemRegister>
 8008a92:	0003      	movs	r3, r0
 8008a94:	001a      	movs	r2, r3
 8008a96:	1dfb      	adds	r3, r7, #7
 8008a98:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 8008a9a:	1dbb      	adds	r3, r7, #6
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	1dbb      	adds	r3, r7, #6
 8008aa6:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 8008aa8:	f008 fa94 	bl	8010fd4 <HAL_GetTick>
 8008aac:	0003      	movs	r3, r0
 8008aae:	330a      	adds	r3, #10
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	4b08      	ldr	r3, [pc, #32]	@ (8008ad4 <BMP280_get_mode+0x54>)
 8008ab4:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 8008ab6:	1dfb      	adds	r3, r7, #7
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	b25b      	sxtb	r3, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <BMP280_get_mode+0x46>
    bmpData = 255;
 8008ac0:	1dbb      	adds	r3, r7, #6
 8008ac2:	22ff      	movs	r2, #255	@ 0xff
 8008ac4:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 8008ac6:	1dbb      	adds	r3, r7, #6
 8008ac8:	781b      	ldrb	r3, [r3, #0]
}
 8008aca:	0018      	movs	r0, r3
 8008acc:	46bd      	mov	sp, r7
 8008ace:	b002      	add	sp, #8
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	46c0      	nop			@ (mov r8, r8)
 8008ad4:	20000ba4 	.word	0x20000ba4

08008ad8 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 8008ad8:	b5b0      	push	{r4, r5, r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 8008ade:	1d3a      	adds	r2, r7, #4
 8008ae0:	2306      	movs	r3, #6
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	20f7      	movs	r0, #247	@ 0xf7
 8008ae6:	f7ff fce5 	bl	80084b4 <ReadMemRegister>
 8008aea:	0003      	movs	r3, r0
 8008aec:	001a      	movs	r2, r3
 8008aee:	230f      	movs	r3, #15
 8008af0:	18fb      	adds	r3, r7, r3
 8008af2:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 8008af4:	1d3b      	adds	r3, r7, #4
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b80      	cmp	r3, #128	@ 0x80
 8008afa:	d00f      	beq.n	8008b1c <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 8008afc:	1d3b      	adds	r3, r7, #4
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	031a      	lsls	r2, r3, #12
 8008b02:	1d3b      	adds	r3, r7, #4
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	18d3      	adds	r3, r2, r3
 8008b0a:	1d3a      	adds	r2, r7, #4
 8008b0c:	7892      	ldrb	r2, [r2, #2]
 8008b0e:	0912      	lsrs	r2, r2, #4
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	189b      	adds	r3, r3, r2
 8008b14:	001a      	movs	r2, r3
 8008b16:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc4 <BMP280_get_measurement_values+0xec>)
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	e019      	b.n	8008b50 <BMP280_get_measurement_values+0x78>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 8008b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8008bc8 <BMP280_get_measurement_values+0xf0>)
 8008b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8008bcc <BMP280_get_measurement_values+0xf4>)
 8008b20:	0019      	movs	r1, r3
 8008b22:	2001      	movs	r0, #1
 8008b24:	f007 fe0a 	bl	801073c <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 8008b28:	1d3b      	adds	r3, r7, #4
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	001d      	movs	r5, r3
 8008b2e:	1d3b      	adds	r3, r7, #4
 8008b30:	785b      	ldrb	r3, [r3, #1]
 8008b32:	0018      	movs	r0, r3
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	789b      	ldrb	r3, [r3, #2]
 8008b38:	001c      	movs	r4, r3
 8008b3a:	4b22      	ldr	r3, [pc, #136]	@ (8008bc4 <BMP280_get_measurement_values+0xec>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a24      	ldr	r2, [pc, #144]	@ (8008bd0 <BMP280_get_measurement_values+0xf8>)
 8008b40:	4924      	ldr	r1, [pc, #144]	@ (8008bd4 <BMP280_get_measurement_values+0xfc>)
 8008b42:	9302      	str	r3, [sp, #8]
 8008b44:	9401      	str	r4, [sp, #4]
 8008b46:	9000      	str	r0, [sp, #0]
 8008b48:	002b      	movs	r3, r5
 8008b4a:	2003      	movs	r0, #3
 8008b4c:	f007 fdf6 	bl	801073c <CreateLine>
  }
  if (bmpData[3] != 0x80) {
 8008b50:	1d3b      	adds	r3, r7, #4
 8008b52:	78db      	ldrb	r3, [r3, #3]
 8008b54:	2b80      	cmp	r3, #128	@ 0x80
 8008b56:	d00f      	beq.n	8008b78 <BMP280_get_measurement_values+0xa0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 8008b58:	1d3b      	adds	r3, r7, #4
 8008b5a:	78db      	ldrb	r3, [r3, #3]
 8008b5c:	031a      	lsls	r2, r3, #12
 8008b5e:	1d3b      	adds	r3, r7, #4
 8008b60:	791b      	ldrb	r3, [r3, #4]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	18d3      	adds	r3, r2, r3
 8008b66:	1d3a      	adds	r2, r7, #4
 8008b68:	7952      	ldrb	r2, [r2, #5]
 8008b6a:	0912      	lsrs	r2, r2, #4
 8008b6c:	b2d2      	uxtb	r2, r2
 8008b6e:	189b      	adds	r3, r3, r2
 8008b70:	001a      	movs	r2, r3
 8008b72:	4b19      	ldr	r3, [pc, #100]	@ (8008bd8 <BMP280_get_measurement_values+0x100>)
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	e019      	b.n	8008bac <BMP280_get_measurement_values+0xd4>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 8008b78:	4a18      	ldr	r2, [pc, #96]	@ (8008bdc <BMP280_get_measurement_values+0x104>)
 8008b7a:	4b14      	ldr	r3, [pc, #80]	@ (8008bcc <BMP280_get_measurement_values+0xf4>)
 8008b7c:	0019      	movs	r1, r3
 8008b7e:	2001      	movs	r0, #1
 8008b80:	f007 fddc 	bl	801073c <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 8008b84:	1d3b      	adds	r3, r7, #4
 8008b86:	78db      	ldrb	r3, [r3, #3]
 8008b88:	001d      	movs	r5, r3
 8008b8a:	1d3b      	adds	r3, r7, #4
 8008b8c:	791b      	ldrb	r3, [r3, #4]
 8008b8e:	0018      	movs	r0, r3
 8008b90:	1d3b      	adds	r3, r7, #4
 8008b92:	795b      	ldrb	r3, [r3, #5]
 8008b94:	001c      	movs	r4, r3
 8008b96:	4b10      	ldr	r3, [pc, #64]	@ (8008bd8 <BMP280_get_measurement_values+0x100>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a11      	ldr	r2, [pc, #68]	@ (8008be0 <BMP280_get_measurement_values+0x108>)
 8008b9c:	490d      	ldr	r1, [pc, #52]	@ (8008bd4 <BMP280_get_measurement_values+0xfc>)
 8008b9e:	9302      	str	r3, [sp, #8]
 8008ba0:	9401      	str	r4, [sp, #4]
 8008ba2:	9000      	str	r0, [sp, #0]
 8008ba4:	002b      	movs	r3, r5
 8008ba6:	2003      	movs	r0, #3
 8008ba8:	f007 fdc8 	bl	801073c <CreateLine>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 8008bac:	230f      	movs	r3, #15
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	b25b      	sxtb	r3, r3
 8008bb4:	1e5a      	subs	r2, r3, #1
 8008bb6:	4193      	sbcs	r3, r2
 8008bb8:	b2db      	uxtb	r3, r3
}
 8008bba:	0018      	movs	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b004      	add	sp, #16
 8008bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bc2:	46c0      	nop			@ (mov r8, r8)
 8008bc4:	20000ba0 	.word	0x20000ba0
 8008bc8:	08027254 	.word	0x08027254
 8008bcc:	08027224 	.word	0x08027224
 8008bd0:	08027298 	.word	0x08027298
 8008bd4:	08026f68 	.word	0x08026f68
 8008bd8:	20000b9c 	.word	0x20000b9c
 8008bdc:	080272e0 	.word	0x080272e0
 8008be0:	0802731c 	.word	0x0802731c

08008be4 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 8008bea:	4b1e      	ldr	r3, [pc, #120]	@ (8008c64 <BMP280_calc_temperature+0x80>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	10da      	asrs	r2, r3, #3
 8008bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c68 <BMP280_calc_temperature+0x84>)
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8008c68 <BMP280_calc_temperature+0x84>)
 8008bfe:	2102      	movs	r1, #2
 8008c00:	5e52      	ldrsh	r2, [r2, r1]
 8008c02:	4353      	muls	r3, r2
 8008c04:	12db      	asrs	r3, r3, #11
 8008c06:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	111b      	asrs	r3, r3, #4
 8008c0c:	4a16      	ldr	r2, [pc, #88]	@ (8008c68 <BMP280_calc_temperature+0x84>)
 8008c0e:	8812      	ldrh	r2, [r2, #0]
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	1112      	asrs	r2, r2, #4
 8008c16:	4914      	ldr	r1, [pc, #80]	@ (8008c68 <BMP280_calc_temperature+0x84>)
 8008c18:	8809      	ldrh	r1, [r1, #0]
 8008c1a:	1a52      	subs	r2, r2, r1
 8008c1c:	4353      	muls	r3, r2
 8008c1e:	131b      	asrs	r3, r3, #12
 8008c20:	4a11      	ldr	r2, [pc, #68]	@ (8008c68 <BMP280_calc_temperature+0x84>)
 8008c22:	2104      	movs	r1, #4
 8008c24:	5e52      	ldrsh	r2, [r2, r1]
 8008c26:	4353      	muls	r3, r2
 8008c28:	139b      	asrs	r3, r3, #14
 8008c2a:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	18d2      	adds	r2, r2, r3
 8008c32:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <BMP280_calc_temperature+0x88>)
 8008c34:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 8008c36:	4b0d      	ldr	r3, [pc, #52]	@ (8008c6c <BMP280_calc_temperature+0x88>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	0013      	movs	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	189b      	adds	r3, r3, r2
 8008c40:	3380      	adds	r3, #128	@ 0x80
 8008c42:	121b      	asrs	r3, r3, #8
 8008c44:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 8008c46:	68b8      	ldr	r0, [r7, #8]
 8008c48:	f7f8 fcc2 	bl	80015d0 <__aeabi_i2f>
 8008c4c:	1c03      	adds	r3, r0, #0
 8008c4e:	4908      	ldr	r1, [pc, #32]	@ (8008c70 <BMP280_calc_temperature+0x8c>)
 8008c50:	1c18      	adds	r0, r3, #0
 8008c52:	f7f7 ffbf 	bl	8000bd4 <__aeabi_fdiv>
 8008c56:	1c03      	adds	r3, r0, #0
 8008c58:	607b      	str	r3, [r7, #4]
  return airTemp;
 8008c5a:	687b      	ldr	r3, [r7, #4]
}
 8008c5c:	1c18      	adds	r0, r3, #0
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	b006      	add	sp, #24
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000b9c 	.word	0x20000b9c
 8008c68:	20000b80 	.word	0x20000b80
 8008c6c:	20000b98 	.word	0x20000b98
 8008c70:	42c80000 	.word	0x42c80000

08008c74 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 8008c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8008db4 <BMP280_calc_pressure+0x140>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 8008c80:	4b4d      	ldr	r3, [pc, #308]	@ (8008db8 <BMP280_calc_pressure+0x144>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	105b      	asrs	r3, r3, #1
 8008c86:	4a4d      	ldr	r2, [pc, #308]	@ (8008dbc <BMP280_calc_pressure+0x148>)
 8008c88:	4694      	mov	ip, r2
 8008c8a:	4463      	add	r3, ip
 8008c8c:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	109b      	asrs	r3, r3, #2
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	1092      	asrs	r2, r2, #2
 8008c96:	4353      	muls	r3, r2
 8008c98:	12db      	asrs	r3, r3, #11
 8008c9a:	4a49      	ldr	r2, [pc, #292]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008c9c:	2110      	movs	r1, #16
 8008c9e:	5e52      	ldrsh	r2, [r2, r1]
 8008ca0:	4353      	muls	r3, r2
 8008ca2:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 8008ca4:	4b46      	ldr	r3, [pc, #280]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008ca6:	220e      	movs	r2, #14
 8008ca8:	5e9b      	ldrsh	r3, [r3, r2]
 8008caa:	001a      	movs	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4353      	muls	r3, r2
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	18d3      	adds	r3, r2, r3
 8008cb6:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	109a      	asrs	r2, r3, #2
 8008cbc:	4b40      	ldr	r3, [pc, #256]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008cbe:	210c      	movs	r1, #12
 8008cc0:	5e5b      	ldrsh	r3, [r3, r1]
 8008cc2:	041b      	lsls	r3, r3, #16
 8008cc4:	18d3      	adds	r3, r2, r3
 8008cc6:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 8008cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008cca:	220a      	movs	r2, #10
 8008ccc:	5e9b      	ldrsh	r3, [r3, r2]
 8008cce:	0019      	movs	r1, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	109b      	asrs	r3, r3, #2
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	1092      	asrs	r2, r2, #2
 8008cd8:	4353      	muls	r3, r2
 8008cda:	135b      	asrs	r3, r3, #13
 8008cdc:	434b      	muls	r3, r1
 8008cde:	10da      	asrs	r2, r3, #3
 8008ce0:	4b37      	ldr	r3, [pc, #220]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008ce2:	2108      	movs	r1, #8
 8008ce4:	5e5b      	ldrsh	r3, [r3, r1]
 8008ce6:	0019      	movs	r1, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	434b      	muls	r3, r1
 8008cec:	105b      	asrs	r3, r3, #1
 8008cee:	18d3      	adds	r3, r2, r3
 8008cf0:	149b      	asrs	r3, r3, #18
 8008cf2:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2280      	movs	r2, #128	@ 0x80
 8008cf8:	0212      	lsls	r2, r2, #8
 8008cfa:	4694      	mov	ip, r2
 8008cfc:	4463      	add	r3, ip
 8008cfe:	4a30      	ldr	r2, [pc, #192]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008d00:	88d2      	ldrh	r2, [r2, #6]
 8008d02:	4353      	muls	r3, r2
 8008d04:	13db      	asrs	r3, r3, #15
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <BMP280_calc_pressure+0x9e>
    return 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e04b      	b.n	8008daa <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2280      	movs	r2, #128	@ 0x80
 8008d16:	0352      	lsls	r2, r2, #13
 8008d18:	1ad2      	subs	r2, r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	131b      	asrs	r3, r3, #12
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	001a      	movs	r2, r3
 8008d22:	4b28      	ldr	r3, [pc, #160]	@ (8008dc4 <BMP280_calc_pressure+0x150>)
 8008d24:	4353      	muls	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	db09      	blt.n	8008d42 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	0011      	movs	r1, r2
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7f7 fa34 	bl	80001a4 <__udivsi3>
 8008d3c:	0003      	movs	r3, r0
 8008d3e:	617b      	str	r3, [r7, #20]
 8008d40:	e007      	b.n	8008d52 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	0019      	movs	r1, r3
 8008d46:	6978      	ldr	r0, [r7, #20]
 8008d48:	f7f7 fa2c 	bl	80001a4 <__udivsi3>
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 8008d52:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008d54:	2216      	movs	r2, #22
 8008d56:	5e9b      	ldrsh	r3, [r3, r2]
 8008d58:	0019      	movs	r1, r3
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	08db      	lsrs	r3, r3, #3
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	08d2      	lsrs	r2, r2, #3
 8008d62:	4353      	muls	r3, r2
 8008d64:	0b5b      	lsrs	r3, r3, #13
 8008d66:	434b      	muls	r3, r1
 8008d68:	131b      	asrs	r3, r3, #12
 8008d6a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	089b      	lsrs	r3, r3, #2
 8008d70:	001a      	movs	r2, r3
 8008d72:	4b13      	ldr	r3, [pc, #76]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008d74:	2114      	movs	r1, #20
 8008d76:	5e5b      	ldrsh	r3, [r3, r1]
 8008d78:	4353      	muls	r3, r2
 8008d7a:	135b      	asrs	r3, r3, #13
 8008d7c:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	18d3      	adds	r3, r2, r3
 8008d84:	4a0e      	ldr	r2, [pc, #56]	@ (8008dc0 <BMP280_calc_pressure+0x14c>)
 8008d86:	2112      	movs	r1, #18
 8008d88:	5e52      	ldrsh	r2, [r2, r1]
 8008d8a:	189b      	adds	r3, r3, r2
 8008d8c:	111a      	asrs	r2, r3, #4
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	18d3      	adds	r3, r2, r3
 8008d92:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 8008d94:	6978      	ldr	r0, [r7, #20]
 8008d96:	f7f8 fc67 	bl	8001668 <__aeabi_ui2f>
 8008d9a:	1c03      	adds	r3, r0, #0
 8008d9c:	490a      	ldr	r1, [pc, #40]	@ (8008dc8 <BMP280_calc_pressure+0x154>)
 8008d9e:	1c18      	adds	r0, r3, #0
 8008da0:	f7f7 ff18 	bl	8000bd4 <__aeabi_fdiv>
 8008da4:	1c03      	adds	r3, r0, #0
 8008da6:	607b      	str	r3, [r7, #4]
  return airhPa;
 8008da8:	687b      	ldr	r3, [r7, #4]
}
 8008daa:	1c18      	adds	r0, r3, #0
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b006      	add	sp, #24
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	20000ba0 	.word	0x20000ba0
 8008db8:	20000b98 	.word	0x20000b98
 8008dbc:	ffff0600 	.word	0xffff0600
 8008dc0:	20000b80 	.word	0x20000b80
 8008dc4:	00000c35 	.word	0x00000c35
 8008dc8:	42c80000 	.word	0x42c80000

08008dcc <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 8008dcc:	b5b0      	push	{r4, r5, r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 8008dd2:	4b86      	ldr	r3, [pc, #536]	@ (8008fec <BMP_Upkeep+0x220>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f007 fc5a 	bl	8010690 <TimestampIsReached>
 8008ddc:	0003      	movs	r3, r0
 8008dde:	001a      	movs	r2, r3
 8008de0:	2301      	movs	r3, #1
 8008de2:	4053      	eors	r3, r2
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <BMP_Upkeep+0x24>
    return BMPState;
 8008dea:	4b81      	ldr	r3, [pc, #516]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	e0f9      	b.n	8008fe4 <BMP_Upkeep+0x218>
  }
  switch(BMPState) {
 8008df0:	4b7f      	ldr	r3, [pc, #508]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b09      	cmp	r3, #9
 8008df6:	d900      	bls.n	8008dfa <BMP_Upkeep+0x2e>
 8008df8:	e0df      	b.n	8008fba <BMP_Upkeep+0x1ee>
 8008dfa:	009a      	lsls	r2, r3, #2
 8008dfc:	4b7d      	ldr	r3, [pc, #500]	@ (8008ff4 <BMP_Upkeep+0x228>)
 8008dfe:	18d3      	adds	r3, r2, r3
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 8008e04:	4a7c      	ldr	r2, [pc, #496]	@ (8008ff8 <BMP_Upkeep+0x22c>)
 8008e06:	4b7d      	ldr	r3, [pc, #500]	@ (8008ffc <BMP_Upkeep+0x230>)
 8008e08:	0019      	movs	r1, r3
 8008e0a:	2003      	movs	r0, #3
 8008e0c:	f007 fc96 	bl	801073c <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8008e10:	f008 f8e0 	bl	8010fd4 <HAL_GetTick>
 8008e14:	0003      	movs	r3, r0
 8008e16:	4a7a      	ldr	r2, [pc, #488]	@ (8009000 <BMP_Upkeep+0x234>)
 8008e18:	189a      	adds	r2, r3, r2
 8008e1a:	4b74      	ldr	r3, [pc, #464]	@ (8008fec <BMP_Upkeep+0x220>)
 8008e1c:	601a      	str	r2, [r3, #0]
    break;
 8008e1e:	e0df      	b.n	8008fe0 <BMP_Upkeep+0x214>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 8008e20:	f001 fe04 	bl	800aa2c <getSensorLock>
 8008e24:	1e03      	subs	r3, r0, #0
 8008e26:	d000      	beq.n	8008e2a <BMP_Upkeep+0x5e>
 8008e28:	e0d3      	b.n	8008fd2 <BMP_Upkeep+0x206>
      break;
    }
    BMP280_reset();
 8008e2a:	f7ff fb85 	bl	8008538 <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 8008e2e:	4b70      	ldr	r3, [pc, #448]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	701a      	strb	r2, [r3, #0]
    break;
 8008e34:	e0d4      	b.n	8008fe0 <BMP_Upkeep+0x214>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 8008e36:	f001 fdf9 	bl	800aa2c <getSensorLock>
 8008e3a:	1e03      	subs	r3, r0, #0
 8008e3c:	d000      	beq.n	8008e40 <BMP_Upkeep+0x74>
 8008e3e:	e0ca      	b.n	8008fd6 <BMP_Upkeep+0x20a>
      break;
    }
    setSensorLock(BMP280);
 8008e40:	2004      	movs	r0, #4
 8008e42:	f001 fde3 	bl	800aa0c <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 8008e46:	200a      	movs	r0, #10
 8008e48:	f008 f8ce 	bl	8010fe8 <HAL_Delay>
    if (BMP280_set_config()) {
 8008e4c:	f7ff fda0 	bl	8008990 <BMP280_set_config>
 8008e50:	1e03      	subs	r3, r0, #0
 8008e52:	d003      	beq.n	8008e5c <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8008e54:	4b66      	ldr	r3, [pc, #408]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008e56:	2202      	movs	r2, #2
 8008e58:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 8008e5a:	e0c1      	b.n	8008fe0 <BMP_Upkeep+0x214>
      BMPState = BMP_STATE_INIT;
 8008e5c:	4b64      	ldr	r3, [pc, #400]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	701a      	strb	r2, [r3, #0]
  break;
 8008e62:	e0bd      	b.n	8008fe0 <BMP_Upkeep+0x214>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 8008e64:	f001 fde2 	bl	800aa2c <getSensorLock>
 8008e68:	1e03      	subs	r3, r0, #0
 8008e6a:	d02e      	beq.n	8008eca <BMP_Upkeep+0xfe>
 8008e6c:	f001 fdde 	bl	800aa2c <getSensorLock>
 8008e70:	0003      	movs	r3, r0
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d029      	beq.n	8008eca <BMP_Upkeep+0xfe>
      uint8_t locktype = getSensorLock();
 8008e76:	1dfc      	adds	r4, r7, #7
 8008e78:	f001 fdd8 	bl	800aa2c <getSensorLock>
 8008e7c:	0003      	movs	r3, r0
 8008e7e:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 8008e80:	1dfb      	adds	r3, r7, #7
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d019      	beq.n	8008ebc <BMP_Upkeep+0xf0>
 8008e88:	1dfb      	adds	r3, r7, #7
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d013      	beq.n	8008eb8 <BMP_Upkeep+0xec>
 8008e90:	1dfb      	adds	r3, r7, #7
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d00d      	beq.n	8008eb4 <BMP_Upkeep+0xe8>
 8008e98:	1dfb      	adds	r3, r7, #7
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d007      	beq.n	8008eb0 <BMP_Upkeep+0xe4>
 8008ea0:	1dfb      	adds	r3, r7, #7
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d101      	bne.n	8008eac <BMP_Upkeep+0xe0>
 8008ea8:	4b56      	ldr	r3, [pc, #344]	@ (8009004 <BMP_Upkeep+0x238>)
 8008eaa:	e008      	b.n	8008ebe <BMP_Upkeep+0xf2>
 8008eac:	4b56      	ldr	r3, [pc, #344]	@ (8009008 <BMP_Upkeep+0x23c>)
 8008eae:	e006      	b.n	8008ebe <BMP_Upkeep+0xf2>
 8008eb0:	4b56      	ldr	r3, [pc, #344]	@ (800900c <BMP_Upkeep+0x240>)
 8008eb2:	e004      	b.n	8008ebe <BMP_Upkeep+0xf2>
 8008eb4:	4b56      	ldr	r3, [pc, #344]	@ (8009010 <BMP_Upkeep+0x244>)
 8008eb6:	e002      	b.n	8008ebe <BMP_Upkeep+0xf2>
 8008eb8:	4b56      	ldr	r3, [pc, #344]	@ (8009014 <BMP_Upkeep+0x248>)
 8008eba:	e000      	b.n	8008ebe <BMP_Upkeep+0xf2>
 8008ebc:	4b56      	ldr	r3, [pc, #344]	@ (8009018 <BMP_Upkeep+0x24c>)
 8008ebe:	4a57      	ldr	r2, [pc, #348]	@ (800901c <BMP_Upkeep+0x250>)
 8008ec0:	494e      	ldr	r1, [pc, #312]	@ (8008ffc <BMP_Upkeep+0x230>)
 8008ec2:	2003      	movs	r0, #3
 8008ec4:	f007 fc3a 	bl	801073c <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      break;
 8008ec8:	e08a      	b.n	8008fe0 <BMP_Upkeep+0x214>
    }
    if (getSensorLock() == FREE) {
 8008eca:	f001 fdaf 	bl	800aa2c <getSensorLock>
 8008ece:	1e03      	subs	r3, r0, #0
 8008ed0:	d105      	bne.n	8008ede <BMP_Upkeep+0x112>
      HAL_Delay(10);
 8008ed2:	200a      	movs	r0, #10
 8008ed4:	f008 f888 	bl	8010fe8 <HAL_Delay>
      setSensorLock(BMP280);
 8008ed8:	2004      	movs	r0, #4
 8008eda:	f001 fd97 	bl	800aa0c <setSensorLock>
    }
    if (BMP280_set_mode()) {
 8008ede:	f7ff fd7b 	bl	80089d8 <BMP280_set_mode>
 8008ee2:	1e03      	subs	r3, r0, #0
 8008ee4:	d003      	beq.n	8008eee <BMP_Upkeep+0x122>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8008ee6:	4b42      	ldr	r3, [pc, #264]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008ee8:	2205      	movs	r2, #5
 8008eea:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 8008eec:	e078      	b.n	8008fe0 <BMP_Upkeep+0x214>
      Error("Error while setting BMP280 to forced mode");
 8008eee:	4a4c      	ldr	r2, [pc, #304]	@ (8009020 <BMP_Upkeep+0x254>)
 8008ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8009024 <BMP_Upkeep+0x258>)
 8008ef2:	0019      	movs	r1, r3
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	f007 fc21 	bl	801073c <CreateLine>
      BMPState = BMP_STATE_INIT ;
 8008efa:	4b3d      	ldr	r3, [pc, #244]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	701a      	strb	r2, [r3, #0]
    break;
 8008f00:	e06e      	b.n	8008fe0 <BMP_Upkeep+0x214>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 8008f02:	f7ff fde9 	bl	8008ad8 <BMP280_get_measurement_values>
 8008f06:	1e03      	subs	r3, r0, #0
 8008f08:	d006      	beq.n	8008f18 <BMP_Upkeep+0x14c>
      setSensorLock(FREE);
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	f001 fd7e 	bl	800aa0c <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 8008f10:	4b37      	ldr	r3, [pc, #220]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008f12:	2203      	movs	r2, #3
 8008f14:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 8008f16:	e063      	b.n	8008fe0 <BMP_Upkeep+0x214>
      BMPState = BMP_STATE_INIT;
 8008f18:	4b35      	ldr	r3, [pc, #212]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 8008f1e:	4a42      	ldr	r2, [pc, #264]	@ (8009028 <BMP_Upkeep+0x25c>)
 8008f20:	4b40      	ldr	r3, [pc, #256]	@ (8009024 <BMP_Upkeep+0x258>)
 8008f22:	0019      	movs	r1, r3
 8008f24:	2001      	movs	r0, #1
 8008f26:	f007 fc09 	bl	801073c <CreateLine>
  break;
 8008f2a:	e059      	b.n	8008fe0 <BMP_Upkeep+0x214>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 8008f2c:	f7ff fe5a 	bl	8008be4 <BMP280_calc_temperature>
 8008f30:	1c03      	adds	r3, r0, #0
 8008f32:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 8008f34:	f7ff fe9e 	bl	8008c74 <BMP280_calc_pressure>
 8008f38:	1c03      	adds	r3, r0, #0
 8008f3a:	60bb      	str	r3, [r7, #8]
    sethPa(airhpa);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	1c18      	adds	r0, r3, #0
 8008f40:	f7fa fc5e 	bl	8003800 <sethPa>
    Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7fa fa8d 	bl	8003464 <__aeabi_f2d>
 8008f4a:	0004      	movs	r4, r0
 8008f4c:	000d      	movs	r5, r1
 8008f4e:	68b8      	ldr	r0, [r7, #8]
 8008f50:	f7fa fa88 	bl	8003464 <__aeabi_f2d>
 8008f54:	0002      	movs	r2, r0
 8008f56:	000b      	movs	r3, r1
 8008f58:	4834      	ldr	r0, [pc, #208]	@ (800902c <BMP_Upkeep+0x260>)
 8008f5a:	4935      	ldr	r1, [pc, #212]	@ (8009030 <BMP_Upkeep+0x264>)
 8008f5c:	9202      	str	r2, [sp, #8]
 8008f5e:	9303      	str	r3, [sp, #12]
 8008f60:	9400      	str	r4, [sp, #0]
 8008f62:	9501      	str	r5, [sp, #4]
 8008f64:	0002      	movs	r2, r0
 8008f66:	2002      	movs	r0, #2
 8008f68:	f007 fbe8 	bl	801073c <CreateLine>
    BMPState = BMP_STATE_WAIT;
 8008f6c:	4b20      	ldr	r3, [pc, #128]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008f6e:	2208      	movs	r2, #8
 8008f70:	701a      	strb	r2, [r3, #0]
    BMP280TimeStamp = HAL_GetTick() + 3000;
 8008f72:	f008 f82f 	bl	8010fd4 <HAL_GetTick>
 8008f76:	0003      	movs	r3, r0
 8008f78:	4a2e      	ldr	r2, [pc, #184]	@ (8009034 <BMP_Upkeep+0x268>)
 8008f7a:	189a      	adds	r2, r3, r2
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fec <BMP_Upkeep+0x220>)
 8008f7e:	601a      	str	r2, [r3, #0]
    break;
 8008f80:	e02e      	b.n	8008fe0 <BMP_Upkeep+0x214>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 8008f82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008f84:	2209      	movs	r2, #9
 8008f86:	701a      	strb	r2, [r3, #0]
    break;
 8008f88:	e02a      	b.n	8008fe0 <BMP_Upkeep+0x214>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 8008f8a:	f001 fd4f 	bl	800aa2c <getSensorLock>
 8008f8e:	1e03      	subs	r3, r0, #0
 8008f90:	d123      	bne.n	8008fda <BMP_Upkeep+0x20e>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 8008f92:	f7ff fd75 	bl	8008a80 <BMP280_get_mode>
 8008f96:	0003      	movs	r3, r0
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d103      	bne.n	8008fa4 <BMP_Upkeep+0x1d8>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8008f9c:	4b14      	ldr	r3, [pc, #80]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008f9e:	2205      	movs	r2, #5
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e002      	b.n	8008faa <BMP_Upkeep+0x1de>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8008fa4:	4b12      	ldr	r3, [pc, #72]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 60000;
 8008faa:	f008 f813 	bl	8010fd4 <HAL_GetTick>
 8008fae:	0003      	movs	r3, r0
 8008fb0:	4a21      	ldr	r2, [pc, #132]	@ (8009038 <BMP_Upkeep+0x26c>)
 8008fb2:	189a      	adds	r2, r3, r2
 8008fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8008fec <BMP_Upkeep+0x220>)
 8008fb6:	601a      	str	r2, [r3, #0]
    break;
 8008fb8:	e012      	b.n	8008fe0 <BMP_Upkeep+0x214>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 8008fba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 8008fc0:	f001 fd34 	bl	800aa2c <getSensorLock>
 8008fc4:	0003      	movs	r3, r0
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	d009      	beq.n	8008fde <BMP_Upkeep+0x212>
      setSensorLock(FREE);
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f001 fd1e 	bl	800aa0c <setSensorLock>
    }
    break;
 8008fd0:	e005      	b.n	8008fde <BMP_Upkeep+0x212>
      break;
 8008fd2:	46c0      	nop			@ (mov r8, r8)
 8008fd4:	e004      	b.n	8008fe0 <BMP_Upkeep+0x214>
      break;
 8008fd6:	46c0      	nop			@ (mov r8, r8)
 8008fd8:	e002      	b.n	8008fe0 <BMP_Upkeep+0x214>
      break;
 8008fda:	46c0      	nop			@ (mov r8, r8)
 8008fdc:	e000      	b.n	8008fe0 <BMP_Upkeep+0x214>
    break;
 8008fde:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 8008fe0:	4b03      	ldr	r3, [pc, #12]	@ (8008ff0 <BMP_Upkeep+0x224>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
}
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	b004      	add	sp, #16
 8008fea:	bdb0      	pop	{r4, r5, r7, pc}
 8008fec:	20000ba4 	.word	0x20000ba4
 8008ff0:	2000008f 	.word	0x2000008f
 8008ff4:	08028b6c 	.word	0x08028b6c
 8008ff8:	08027364 	.word	0x08027364
 8008ffc:	08026f68 	.word	0x08026f68
 8009000:	002f9b80 	.word	0x002f9b80
 8009004:	080273a0 	.word	0x080273a0
 8009008:	080273a8 	.word	0x080273a8
 800900c:	080273b0 	.word	0x080273b0
 8009010:	080273b8 	.word	0x080273b8
 8009014:	080273c0 	.word	0x080273c0
 8009018:	080273c8 	.word	0x080273c8
 800901c:	080273d0 	.word	0x080273d0
 8009020:	080273f8 	.word	0x080273f8
 8009024:	08027224 	.word	0x08027224
 8009028:	08027424 	.word	0x08027424
 800902c:	0802745c 	.word	0x0802745c
 8009030:	08026f30 	.word	0x08026f30
 8009034:	00000bb8 	.word	0x00000bb8
 8009038:	0000ea60 	.word	0x0000ea60

0800903c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009042:	4b10      	ldr	r3, [pc, #64]	@ (8009084 <MX_DMA_Init+0x48>)
 8009044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009046:	4b0f      	ldr	r3, [pc, #60]	@ (8009084 <MX_DMA_Init+0x48>)
 8009048:	2101      	movs	r1, #1
 800904a:	430a      	orrs	r2, r1
 800904c:	631a      	str	r2, [r3, #48]	@ 0x30
 800904e:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <MX_DMA_Init+0x48>)
 8009050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009052:	2201      	movs	r2, #1
 8009054:	4013      	ands	r3, r2
 8009056:	607b      	str	r3, [r7, #4]
 8009058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	200a      	movs	r0, #10
 8009060:	f008 fc5c 	bl	801191c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8009064:	200a      	movs	r0, #10
 8009066:	f008 fc6e 	bl	8011946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800906a:	2200      	movs	r2, #0
 800906c:	2103      	movs	r1, #3
 800906e:	200b      	movs	r0, #11
 8009070:	f008 fc54 	bl	801191c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8009074:	200b      	movs	r0, #11
 8009076:	f008 fc66 	bl	8011946 <HAL_NVIC_EnableIRQ>

}
 800907a:	46c0      	nop			@ (mov r8, r8)
 800907c:	46bd      	mov	sp, r7
 800907e:	b002      	add	sp, #8
 8009080:	bd80      	pop	{r7, pc}
 8009082:	46c0      	nop			@ (mov r8, r8)
 8009084:	40021000 	.word	0x40021000

08009088 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8009088:	b590      	push	{r4, r7, lr}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	1dbb      	adds	r3, r7, #6
 8009094:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 8009096:	4b17      	ldr	r3, [pc, #92]	@ (80090f4 <WriteUint8ArrayEeprom+0x6c>)
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800909c:	f008 ffd0 	bl	8012040 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 80090a0:	2316      	movs	r3, #22
 80090a2:	18fb      	adds	r3, r7, r3
 80090a4:	2200      	movs	r2, #0
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	e015      	b.n	80090d6 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 80090aa:	4b12      	ldr	r3, [pc, #72]	@ (80090f4 <WriteUint8ArrayEeprom+0x6c>)
 80090ac:	6819      	ldr	r1, [r3, #0]
 80090ae:	2416      	movs	r4, #22
 80090b0:	193b      	adds	r3, r7, r4
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	18d3      	adds	r3, r2, r3
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	001a      	movs	r2, r3
 80090bc:	2000      	movs	r0, #0
 80090be:	f009 f827 	bl	8012110 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 80090c2:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <WriteUint8ArrayEeprom+0x6c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	4b0a      	ldr	r3, [pc, #40]	@ (80090f4 <WriteUint8ArrayEeprom+0x6c>)
 80090ca:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 80090cc:	193b      	adds	r3, r7, r4
 80090ce:	881a      	ldrh	r2, [r3, #0]
 80090d0:	193b      	adds	r3, r7, r4
 80090d2:	3201      	adds	r2, #1
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	2316      	movs	r3, #22
 80090d8:	18fa      	adds	r2, r7, r3
 80090da:	1dbb      	adds	r3, r7, #6
 80090dc:	8812      	ldrh	r2, [r2, #0]
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d3e2      	bcc.n	80090aa <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80090e4:	f008 ffda 	bl	801209c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80090e8:	4b02      	ldr	r3, [pc, #8]	@ (80090f4 <WriteUint8ArrayEeprom+0x6c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
}
 80090ec:	0018      	movs	r0, r3
 80090ee:	46bd      	mov	sp, r7
 80090f0:	b007      	add	sp, #28
 80090f2:	bd90      	pop	{r4, r7, pc}
 80090f4:	20000bc8 	.word	0x20000bc8

080090f8 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	0019      	movs	r1, r3
 8009104:	1dbb      	adds	r3, r7, #6
 8009106:	801a      	strh	r2, [r3, #0]
 8009108:	1d3b      	adds	r3, r7, #4
 800910a:	1c0a      	adds	r2, r1, #0
 800910c:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800910e:	1dba      	adds	r2, r7, #6
 8009110:	1d3b      	adds	r3, r7, #4
 8009112:	8812      	ldrh	r2, [r2, #0]
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d806      	bhi.n	8009128 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800911a:	1dbb      	adds	r3, r7, #6
 800911c:	881a      	ldrh	r2, [r3, #0]
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	0018      	movs	r0, r3
 8009124:	f7ff ffb0 	bl	8009088 <WriteUint8ArrayEeprom>
    }
}
 8009128:	46c0      	nop			@ (mov r8, r8)
 800912a:	46bd      	mov	sp, r7
 800912c:	b004      	add	sp, #16
 800912e:	bd80      	pop	{r7, pc}

08009130 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	1dbb      	adds	r3, r7, #6
 800913c:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800913e:	2316      	movs	r3, #22
 8009140:	18fb      	adds	r3, r7, r3
 8009142:	2200      	movs	r2, #0
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e010      	b.n	800916a <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8009148:	2016      	movs	r0, #22
 800914a:	183b      	adds	r3, r7, r0
 800914c:	881a      	ldrh	r2, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	18d3      	adds	r3, r2, r3
 8009152:	0019      	movs	r1, r3
 8009154:	183b      	adds	r3, r7, r0
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	18d3      	adds	r3, r2, r3
 800915c:	780a      	ldrb	r2, [r1, #0]
 800915e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8009160:	183b      	adds	r3, r7, r0
 8009162:	881a      	ldrh	r2, [r3, #0]
 8009164:	183b      	adds	r3, r7, r0
 8009166:	3201      	adds	r2, #1
 8009168:	801a      	strh	r2, [r3, #0]
 800916a:	2316      	movs	r3, #22
 800916c:	18fa      	adds	r2, r7, r3
 800916e:	1dbb      	adds	r3, r7, #6
 8009170:	8812      	ldrh	r2, [r2, #0]
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	429a      	cmp	r2, r3
 8009176:	d3e7      	bcc.n	8009148 <ReadUint8ArrayEEprom+0x18>
    }
}
 8009178:	46c0      	nop			@ (mov r8, r8)
 800917a:	46c0      	nop			@ (mov r8, r8)
 800917c:	46bd      	mov	sp, r7
 800917e:	b006      	add	sp, #24
 8009180:	bd80      	pop	{r7, pc}

08009182 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8009182:	b590      	push	{r4, r7, lr}
 8009184:	b085      	sub	sp, #20
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	000a      	movs	r2, r1
 800918c:	1cbb      	adds	r3, r7, #2
 800918e:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8009190:	f008 ff56 	bl	8012040 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8009194:	230e      	movs	r3, #14
 8009196:	18fb      	adds	r3, r7, r3
 8009198:	2200      	movs	r2, #0
 800919a:	801a      	strh	r2, [r3, #0]
 800919c:	e00c      	b.n	80091b8 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800919e:	240e      	movs	r4, #14
 80091a0:	193b      	adds	r3, r7, r4
 80091a2:	881a      	ldrh	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	18d3      	adds	r3, r2, r3
 80091a8:	0018      	movs	r0, r3
 80091aa:	f008 ff85 	bl	80120b8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 80091ae:	193b      	adds	r3, r7, r4
 80091b0:	193a      	adds	r2, r7, r4
 80091b2:	8812      	ldrh	r2, [r2, #0]
 80091b4:	3204      	adds	r2, #4
 80091b6:	801a      	strh	r2, [r3, #0]
 80091b8:	230e      	movs	r3, #14
 80091ba:	18fa      	adds	r2, r7, r3
 80091bc:	1cbb      	adds	r3, r7, #2
 80091be:	8812      	ldrh	r2, [r2, #0]
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d3eb      	bcc.n	800919e <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80091c6:	f008 ff69 	bl	801209c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 80091ca:	46c0      	nop			@ (mov r8, r8)
 80091cc:	46bd      	mov	sp, r7
 80091ce:	b005      	add	sp, #20
 80091d0:	bd90      	pop	{r4, r7, pc}
	...

080091d4 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80091e4:	d901      	bls.n	80091ea <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80091e6:	237f      	movs	r3, #127	@ 0x7f
 80091e8:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80091ea:	2017      	movs	r0, #23
 80091ec:	183b      	adds	r3, r7, r0
 80091ee:	490d      	ldr	r1, [pc, #52]	@ (8009224 <accessLUT10log10+0x50>)
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	188a      	adds	r2, r1, r2
 80091f4:	7812      	ldrb	r2, [r2, #0]
 80091f6:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80091f8:	0001      	movs	r1, r0
 80091fa:	187b      	adds	r3, r7, r1
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2206      	movs	r2, #6
 8009200:	4113      	asrs	r3, r2
 8009202:	001a      	movs	r2, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8009208:	187b      	adds	r3, r7, r1
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2106      	movs	r1, #6
 8009212:	408b      	lsls	r3, r1
 8009214:	1ad2      	subs	r2, r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
}
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	46bd      	mov	sp, r7
 800921e:	b006      	add	sp, #24
 8009220:	bd80      	pop	{r7, pc}
 8009222:	46c0      	nop			@ (mov r8, r8)
 8009224:	08028b94 	.word	0x08028b94

08009228 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8009228:	b5b0      	push	{r4, r5, r7, lr}
 800922a:	b090      	sub	sp, #64	@ 0x40
 800922c:	af00      	add	r7, sp, #0
 800922e:	6138      	str	r0, [r7, #16]
 8009230:	6179      	str	r1, [r7, #20]
 8009232:	60fa      	str	r2, [r7, #12]
 8009234:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8009236:	2308      	movs	r3, #8
 8009238:	001a      	movs	r2, r3
 800923a:	3a20      	subs	r2, #32
 800923c:	2a00      	cmp	r2, #0
 800923e:	db03      	blt.n	8009248 <efficient10log10+0x20>
 8009240:	2101      	movs	r1, #1
 8009242:	4091      	lsls	r1, r2
 8009244:	000d      	movs	r5, r1
 8009246:	e008      	b.n	800925a <efficient10log10+0x32>
 8009248:	2220      	movs	r2, #32
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	2101      	movs	r1, #1
 800924e:	40d1      	lsrs	r1, r2
 8009250:	000a      	movs	r2, r1
 8009252:	2100      	movs	r1, #0
 8009254:	4099      	lsls	r1, r3
 8009256:	000d      	movs	r5, r1
 8009258:	4315      	orrs	r5, r2
 800925a:	2201      	movs	r2, #1
 800925c:	409a      	lsls	r2, r3
 800925e:	0014      	movs	r4, r2
 8009260:	2201      	movs	r2, #1
 8009262:	4252      	negs	r2, r2
 8009264:	17d3      	asrs	r3, r2, #31
 8009266:	1912      	adds	r2, r2, r4
 8009268:	416b      	adcs	r3, r5
 800926a:	633a      	str	r2, [r7, #48]	@ 0x30
 800926c:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800926e:	2336      	movs	r3, #54	@ 0x36
 8009270:	2208      	movs	r2, #8
 8009272:	189b      	adds	r3, r3, r2
 8009274:	19db      	adds	r3, r3, r7
 8009276:	2200      	movs	r2, #0
 8009278:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800927a:	e017      	b.n	80092ac <efficient10log10+0x84>
    {
        P = P >> 1;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	07db      	lsls	r3, r3, #31
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	0852      	lsrs	r2, r2, #1
 8009284:	603a      	str	r2, [r7, #0]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	431a      	orrs	r2, r3
 800928a:	603a      	str	r2, [r7, #0]
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	085b      	lsrs	r3, r3, #1
 8009290:	607b      	str	r3, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	687c      	ldr	r4, [r7, #4]
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	617c      	str	r4, [r7, #20]
        bShift++;
 800929a:	2136      	movs	r1, #54	@ 0x36
 800929c:	2008      	movs	r0, #8
 800929e:	180b      	adds	r3, r1, r0
 80092a0:	19db      	adds	r3, r3, r7
 80092a2:	881a      	ldrh	r2, [r3, #0]
 80092a4:	180b      	adds	r3, r1, r0
 80092a6:	19db      	adds	r3, r3, r7
 80092a8:	3201      	adds	r2, #1
 80092aa:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d8e3      	bhi.n	800927c <efficient10log10+0x54>
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d103      	bne.n	80092c4 <efficient10log10+0x9c>
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d8db      	bhi.n	800927c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	2308      	movs	r3, #8
 80092c8:	3b01      	subs	r3, #1
 80092ca:	2101      	movs	r1, #1
 80092cc:	4099      	lsls	r1, r3
 80092ce:	000b      	movs	r3, r1
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80092dc:	231c      	movs	r3, #28
 80092de:	2408      	movs	r4, #8
 80092e0:	191b      	adds	r3, r3, r4
 80092e2:	19da      	adds	r2, r3, r7
 80092e4:	2320      	movs	r3, #32
 80092e6:	191b      	adds	r3, r3, r4
 80092e8:	19d9      	adds	r1, r3, r7
 80092ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7ff ff71 	bl	80091d4 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80092f2:	2215      	movs	r2, #21
 80092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f6:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80092f8:	2036      	movs	r0, #54	@ 0x36
 80092fa:	1902      	adds	r2, r0, r4
 80092fc:	19d2      	adds	r2, r2, r7
 80092fe:	8812      	ldrh	r2, [r2, #0]
 8009300:	2103      	movs	r1, #3
 8009302:	434a      	muls	r2, r1
 8009304:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8009306:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8009308:	0021      	movs	r1, r4
 800930a:	1843      	adds	r3, r0, r1
 800930c:	19db      	adds	r3, r3, r7
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	2201      	movs	r2, #1
 8009312:	4353      	muls	r3, r2
 8009314:	2203      	movs	r2, #3
 8009316:	4113      	asrs	r3, r2
 8009318:	001a      	movs	r2, r3
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800931e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8009320:	2314      	movs	r3, #20
 8009322:	185b      	adds	r3, r3, r1
 8009324:	19da      	adds	r2, r3, r7
 8009326:	2318      	movs	r3, #24
 8009328:	185b      	adds	r3, r3, r1
 800932a:	19db      	adds	r3, r3, r7
 800932c:	0011      	movs	r1, r2
 800932e:	0018      	movs	r0, r3
 8009330:	f000 f80a 	bl	8009348 <correctIntFracNumber>
    integerPart[0] = intPart;
 8009334:	6a3a      	ldr	r2, [r7, #32]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800933a:	69fa      	ldr	r2, [r7, #28]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	601a      	str	r2, [r3, #0]
}
 8009340:	46c0      	nop			@ (mov r8, r8)
 8009342:	46bd      	mov	sp, r7
 8009344:	b010      	add	sp, #64	@ 0x40
 8009346:	bdb0      	pop	{r4, r5, r7, pc}

08009348 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8009352:	e00a      	b.n	800936a <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3b0a      	subs	r3, #10
 8009364:	001a      	movs	r2, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b09      	cmp	r3, #9
 8009370:	dcf0      	bgt.n	8009354 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8009372:	e00a      	b.n	800938a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	1e5a      	subs	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	330a      	adds	r3, #10
 8009384:	001a      	movs	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3309      	adds	r3, #9
 8009390:	dbf0      	blt.n	8009374 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	da0f      	bge.n	80093ba <correctIntFracNumber+0x72>
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	dd0b      	ble.n	80093ba <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3b0a      	subs	r3, #10
 80093b2:	001a      	movs	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80093b8:	e012      	b.n	80093e0 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dd0e      	ble.n	80093e0 <correctIntFracNumber+0x98>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	da0a      	bge.n	80093e0 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	1e5a      	subs	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	330a      	adds	r3, #10
 80093da:	001a      	movs	r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	601a      	str	r2, [r3, #0]
}
 80093e0:	46c0      	nop			@ (mov r8, r8)
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b002      	add	sp, #8
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b08b      	sub	sp, #44	@ 0x2c
 80093ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093ee:	2414      	movs	r4, #20
 80093f0:	193b      	adds	r3, r7, r4
 80093f2:	0018      	movs	r0, r3
 80093f4:	2314      	movs	r3, #20
 80093f6:	001a      	movs	r2, r3
 80093f8:	2100      	movs	r1, #0
 80093fa:	f019 fafd 	bl	80229f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80093fe:	4b8a      	ldr	r3, [pc, #552]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009402:	4b89      	ldr	r3, [pc, #548]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009404:	2104      	movs	r1, #4
 8009406:	430a      	orrs	r2, r1
 8009408:	62da      	str	r2, [r3, #44]	@ 0x2c
 800940a:	4b87      	ldr	r3, [pc, #540]	@ (8009628 <MX_GPIO_Init+0x240>)
 800940c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940e:	2204      	movs	r2, #4
 8009410:	4013      	ands	r3, r2
 8009412:	613b      	str	r3, [r7, #16]
 8009414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009416:	4b84      	ldr	r3, [pc, #528]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941a:	4b83      	ldr	r3, [pc, #524]	@ (8009628 <MX_GPIO_Init+0x240>)
 800941c:	2180      	movs	r1, #128	@ 0x80
 800941e:	430a      	orrs	r2, r1
 8009420:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009422:	4b81      	ldr	r3, [pc, #516]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009426:	2280      	movs	r2, #128	@ 0x80
 8009428:	4013      	ands	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800942e:	4b7e      	ldr	r3, [pc, #504]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009432:	4b7d      	ldr	r3, [pc, #500]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009434:	2101      	movs	r1, #1
 8009436:	430a      	orrs	r2, r1
 8009438:	62da      	str	r2, [r3, #44]	@ 0x2c
 800943a:	4b7b      	ldr	r3, [pc, #492]	@ (8009628 <MX_GPIO_Init+0x240>)
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	2201      	movs	r2, #1
 8009440:	4013      	ands	r3, r2
 8009442:	60bb      	str	r3, [r7, #8]
 8009444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009446:	4b78      	ldr	r3, [pc, #480]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944a:	4b77      	ldr	r3, [pc, #476]	@ (8009628 <MX_GPIO_Init+0x240>)
 800944c:	2102      	movs	r1, #2
 800944e:	430a      	orrs	r2, r1
 8009450:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009452:	4b75      	ldr	r3, [pc, #468]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009456:	2202      	movs	r2, #2
 8009458:	4013      	ands	r3, r2
 800945a:	607b      	str	r3, [r7, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800945e:	4b72      	ldr	r3, [pc, #456]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009462:	4b71      	ldr	r3, [pc, #452]	@ (8009628 <MX_GPIO_Init+0x240>)
 8009464:	2108      	movs	r1, #8
 8009466:	430a      	orrs	r2, r1
 8009468:	62da      	str	r2, [r3, #44]	@ 0x2c
 800946a:	4b6f      	ldr	r3, [pc, #444]	@ (8009628 <MX_GPIO_Init+0x240>)
 800946c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946e:	2208      	movs	r2, #8
 8009470:	4013      	ands	r3, r2
 8009472:	603b      	str	r3, [r7, #0]
 8009474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8009476:	4b6d      	ldr	r3, [pc, #436]	@ (800962c <MX_GPIO_Init+0x244>)
 8009478:	2201      	movs	r2, #1
 800947a:	2101      	movs	r1, #1
 800947c:	0018      	movs	r0, r3
 800947e:	f009 f83a 	bl	80124f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8009482:	4b6a      	ldr	r3, [pc, #424]	@ (800962c <MX_GPIO_Init+0x244>)
 8009484:	2200      	movs	r2, #0
 8009486:	2102      	movs	r1, #2
 8009488:	0018      	movs	r0, r3
 800948a:	f009 f834 	bl	80124f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800948e:	4968      	ldr	r1, [pc, #416]	@ (8009630 <MX_GPIO_Init+0x248>)
 8009490:	4b68      	ldr	r3, [pc, #416]	@ (8009634 <MX_GPIO_Init+0x24c>)
 8009492:	2201      	movs	r2, #1
 8009494:	0018      	movs	r0, r3
 8009496:	f009 f82e 	bl	80124f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800949a:	2380      	movs	r3, #128	@ 0x80
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	4866      	ldr	r0, [pc, #408]	@ (8009638 <MX_GPIO_Init+0x250>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	0019      	movs	r1, r3
 80094a4:	f009 f827 	bl	80124f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80094a8:	2380      	movs	r3, #128	@ 0x80
 80094aa:	015b      	lsls	r3, r3, #5
 80094ac:	4862      	ldr	r0, [pc, #392]	@ (8009638 <MX_GPIO_Init+0x250>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	0019      	movs	r1, r3
 80094b2:	f009 f820 	bl	80124f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80094b6:	193b      	adds	r3, r7, r4
 80094b8:	4a60      	ldr	r2, [pc, #384]	@ (800963c <MX_GPIO_Init+0x254>)
 80094ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80094bc:	193b      	adds	r3, r7, r4
 80094be:	2203      	movs	r2, #3
 80094c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c2:	193b      	adds	r3, r7, r4
 80094c4:	2200      	movs	r2, #0
 80094c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094c8:	193b      	adds	r3, r7, r4
 80094ca:	4a5b      	ldr	r2, [pc, #364]	@ (8009638 <MX_GPIO_Init+0x250>)
 80094cc:	0019      	movs	r1, r3
 80094ce:	0010      	movs	r0, r2
 80094d0:	f008 fe76 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80094d4:	193b      	adds	r3, r7, r4
 80094d6:	2203      	movs	r2, #3
 80094d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094da:	193b      	adds	r3, r7, r4
 80094dc:	2201      	movs	r2, #1
 80094de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e0:	193b      	adds	r3, r7, r4
 80094e2:	2200      	movs	r2, #0
 80094e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094e6:	193b      	adds	r3, r7, r4
 80094e8:	2200      	movs	r2, #0
 80094ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80094ec:	193b      	adds	r3, r7, r4
 80094ee:	4a4f      	ldr	r2, [pc, #316]	@ (800962c <MX_GPIO_Init+0x244>)
 80094f0:	0019      	movs	r1, r3
 80094f2:	0010      	movs	r0, r2
 80094f4:	f008 fe64 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80094f8:	193b      	adds	r3, r7, r4
 80094fa:	2270      	movs	r2, #112	@ 0x70
 80094fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80094fe:	193b      	adds	r3, r7, r4
 8009500:	2203      	movs	r2, #3
 8009502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009504:	193b      	adds	r3, r7, r4
 8009506:	2200      	movs	r2, #0
 8009508:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800950a:	193a      	adds	r2, r7, r4
 800950c:	23a0      	movs	r3, #160	@ 0xa0
 800950e:	05db      	lsls	r3, r3, #23
 8009510:	0011      	movs	r1, r2
 8009512:	0018      	movs	r0, r3
 8009514:	f008 fe54 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8009518:	193b      	adds	r3, r7, r4
 800951a:	22c0      	movs	r2, #192	@ 0xc0
 800951c:	0052      	lsls	r2, r2, #1
 800951e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009520:	193b      	adds	r3, r7, r4
 8009522:	2200      	movs	r2, #0
 8009524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009526:	193b      	adds	r3, r7, r4
 8009528:	2200      	movs	r2, #0
 800952a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800952c:	193a      	adds	r2, r7, r4
 800952e:	23a0      	movs	r3, #160	@ 0xa0
 8009530:	05db      	lsls	r3, r3, #23
 8009532:	0011      	movs	r1, r2
 8009534:	0018      	movs	r0, r3
 8009536:	f008 fe43 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800953a:	193b      	adds	r3, r7, r4
 800953c:	4a3c      	ldr	r2, [pc, #240]	@ (8009630 <MX_GPIO_Init+0x248>)
 800953e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009540:	193b      	adds	r3, r7, r4
 8009542:	2201      	movs	r2, #1
 8009544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009546:	193b      	adds	r3, r7, r4
 8009548:	2200      	movs	r2, #0
 800954a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800954c:	193b      	adds	r3, r7, r4
 800954e:	2200      	movs	r2, #0
 8009550:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009552:	193b      	adds	r3, r7, r4
 8009554:	4a37      	ldr	r2, [pc, #220]	@ (8009634 <MX_GPIO_Init+0x24c>)
 8009556:	0019      	movs	r1, r3
 8009558:	0010      	movs	r0, r2
 800955a:	f008 fe31 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800955e:	193b      	adds	r3, r7, r4
 8009560:	4a37      	ldr	r2, [pc, #220]	@ (8009640 <MX_GPIO_Init+0x258>)
 8009562:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009564:	193b      	adds	r3, r7, r4
 8009566:	2203      	movs	r2, #3
 8009568:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956a:	193b      	adds	r3, r7, r4
 800956c:	2200      	movs	r2, #0
 800956e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009570:	193b      	adds	r3, r7, r4
 8009572:	4a30      	ldr	r2, [pc, #192]	@ (8009634 <MX_GPIO_Init+0x24c>)
 8009574:	0019      	movs	r1, r3
 8009576:	0010      	movs	r0, r2
 8009578:	f008 fe22 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800957c:	0021      	movs	r1, r4
 800957e:	187b      	adds	r3, r7, r1
 8009580:	2280      	movs	r2, #128	@ 0x80
 8009582:	0092      	lsls	r2, r2, #2
 8009584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009586:	000c      	movs	r4, r1
 8009588:	193b      	adds	r3, r7, r4
 800958a:	2200      	movs	r2, #0
 800958c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800958e:	193b      	adds	r3, r7, r4
 8009590:	2200      	movs	r2, #0
 8009592:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009594:	193b      	adds	r3, r7, r4
 8009596:	4a28      	ldr	r2, [pc, #160]	@ (8009638 <MX_GPIO_Init+0x250>)
 8009598:	0019      	movs	r1, r3
 800959a:	0010      	movs	r0, r2
 800959c:	f008 fe10 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80095a0:	193b      	adds	r3, r7, r4
 80095a2:	2280      	movs	r2, #128	@ 0x80
 80095a4:	0212      	lsls	r2, r2, #8
 80095a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80095a8:	193b      	adds	r3, r7, r4
 80095aa:	2288      	movs	r2, #136	@ 0x88
 80095ac:	0352      	lsls	r2, r2, #13
 80095ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b0:	193b      	adds	r3, r7, r4
 80095b2:	2200      	movs	r2, #0
 80095b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80095b6:	193a      	adds	r2, r7, r4
 80095b8:	23a0      	movs	r3, #160	@ 0xa0
 80095ba:	05db      	lsls	r3, r3, #23
 80095bc:	0011      	movs	r1, r2
 80095be:	0018      	movs	r0, r3
 80095c0:	f008 fdfe 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 80095c4:	0021      	movs	r1, r4
 80095c6:	187b      	adds	r3, r7, r1
 80095c8:	22c0      	movs	r2, #192	@ 0xc0
 80095ca:	0152      	lsls	r2, r2, #5
 80095cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80095ce:	000c      	movs	r4, r1
 80095d0:	193b      	adds	r3, r7, r4
 80095d2:	2201      	movs	r2, #1
 80095d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095d6:	193b      	adds	r3, r7, r4
 80095d8:	2200      	movs	r2, #0
 80095da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095dc:	193b      	adds	r3, r7, r4
 80095de:	2200      	movs	r2, #0
 80095e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80095e2:	193b      	adds	r3, r7, r4
 80095e4:	4a14      	ldr	r2, [pc, #80]	@ (8009638 <MX_GPIO_Init+0x250>)
 80095e6:	0019      	movs	r1, r3
 80095e8:	0010      	movs	r0, r2
 80095ea:	f008 fde9 	bl	80121c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80095ee:	0021      	movs	r1, r4
 80095f0:	187b      	adds	r3, r7, r1
 80095f2:	2204      	movs	r2, #4
 80095f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095f6:	187b      	adds	r3, r7, r1
 80095f8:	2200      	movs	r2, #0
 80095fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80095fc:	187b      	adds	r3, r7, r1
 80095fe:	2201      	movs	r2, #1
 8009600:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8009602:	187b      	adds	r3, r7, r1
 8009604:	4a0f      	ldr	r2, [pc, #60]	@ (8009644 <MX_GPIO_Init+0x25c>)
 8009606:	0019      	movs	r1, r3
 8009608:	0010      	movs	r0, r2
 800960a:	f008 fdd9 	bl	80121c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800960e:	2200      	movs	r2, #0
 8009610:	2100      	movs	r1, #0
 8009612:	2007      	movs	r0, #7
 8009614:	f008 f982 	bl	801191c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009618:	2007      	movs	r0, #7
 800961a:	f008 f994 	bl	8011946 <HAL_NVIC_EnableIRQ>

}
 800961e:	46c0      	nop			@ (mov r8, r8)
 8009620:	46bd      	mov	sp, r7
 8009622:	b00b      	add	sp, #44	@ 0x2c
 8009624:	bd90      	pop	{r4, r7, pc}
 8009626:	46c0      	nop			@ (mov r8, r8)
 8009628:	40021000 	.word	0x40021000
 800962c:	50001c00 	.word	0x50001c00
 8009630:	00000301 	.word	0x00000301
 8009634:	50000400 	.word	0x50000400
 8009638:	50000800 	.word	0x50000800
 800963c:	0000200c 	.word	0x0000200c
 8009640:	0000403e 	.word	0x0000403e
 8009644:	50000c00 	.word	0x50000c00

08009648 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2100      	movs	r1, #0
 8009656:	0018      	movs	r0, r3
 8009658:	f00f fdc0 	bl	80191dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2108      	movs	r1, #8
 8009660:	0018      	movs	r0, r3
 8009662:	f00f fdbb 	bl	80191dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	210c      	movs	r1, #12
 800966a:	0018      	movs	r0, r3
 800966c:	f00f fdb6 	bl	80191dc <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8009670:	2380      	movs	r3, #128	@ 0x80
 8009672:	05db      	lsls	r3, r3, #23
 8009674:	22fa      	movs	r2, #250	@ 0xfa
 8009676:	0112      	lsls	r2, r2, #4
 8009678:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800967a:	2380      	movs	r3, #128	@ 0x80
 800967c:	05db      	lsls	r3, r3, #23
 800967e:	22fa      	movs	r2, #250	@ 0xfa
 8009680:	0112      	lsls	r2, r2, #4
 8009682:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8009684:	2380      	movs	r3, #128	@ 0x80
 8009686:	05db      	lsls	r3, r3, #23
 8009688:	22fa      	movs	r2, #250	@ 0xfa
 800968a:	0112      	lsls	r2, r2, #4
 800968c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800968e:	2380      	movs	r3, #128	@ 0x80
 8009690:	05db      	lsls	r3, r3, #23
 8009692:	22fa      	movs	r2, #250	@ 0xfa
 8009694:	0112      	lsls	r2, r2, #4
 8009696:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2100      	movs	r1, #0
 800969c:	0018      	movs	r0, r3
 800969e:	f00f fd9d 	bl	80191dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2104      	movs	r1, #4
 80096a6:	0018      	movs	r0, r3
 80096a8:	f00f fd98 	bl	80191dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2108      	movs	r1, #8
 80096b0:	0018      	movs	r0, r3
 80096b2:	f00f fd93 	bl	80191dc <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80096b6:	4b0a      	ldr	r3, [pc, #40]	@ (80096e0 <GPIO_InitPWMLEDs+0x98>)
 80096b8:	22fa      	movs	r2, #250	@ 0xfa
 80096ba:	0112      	lsls	r2, r2, #4
 80096bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 80096be:	4b08      	ldr	r3, [pc, #32]	@ (80096e0 <GPIO_InitPWMLEDs+0x98>)
 80096c0:	22fa      	movs	r2, #250	@ 0xfa
 80096c2:	0112      	lsls	r2, r2, #4
 80096c4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80096c6:	4b06      	ldr	r3, [pc, #24]	@ (80096e0 <GPIO_InitPWMLEDs+0x98>)
 80096c8:	22fa      	movs	r2, #250	@ 0xfa
 80096ca:	0112      	lsls	r2, r2, #4
 80096cc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80096ce:	4b04      	ldr	r3, [pc, #16]	@ (80096e0 <GPIO_InitPWMLEDs+0x98>)
 80096d0:	22fa      	movs	r2, #250	@ 0xfa
 80096d2:	0112      	lsls	r2, r2, #4
 80096d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80096d6:	46c0      	nop			@ (mov r8, r8)
 80096d8:	46bd      	mov	sp, r7
 80096da:	b002      	add	sp, #8
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	46c0      	nop			@ (mov r8, r8)
 80096e0:	40000400 	.word	0x40000400

080096e4 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	0018      	movs	r0, r3
 80096ee:	2314      	movs	r3, #20
 80096f0:	001a      	movs	r2, r3
 80096f2:	2100      	movs	r1, #0
 80096f4:	f019 f980 	bl	80229f8 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80096f8:	1d3b      	adds	r3, r7, #4
 80096fa:	2205      	movs	r2, #5
 80096fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80096fe:	1d3b      	adds	r3, r7, #4
 8009700:	2203      	movs	r2, #3
 8009702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009704:	1d3b      	adds	r3, r7, #4
 8009706:	2200      	movs	r2, #0
 8009708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800970a:	1d3a      	adds	r2, r7, #4
 800970c:	23a0      	movs	r3, #160	@ 0xa0
 800970e:	05db      	lsls	r3, r3, #23
 8009710:	0011      	movs	r1, r2
 8009712:	0018      	movs	r0, r3
 8009714:	f008 fd54 	bl	80121c0 <HAL_GPIO_Init>
}
 8009718:	46c0      	nop			@ (mov r8, r8)
 800971a:	46bd      	mov	sp, r7
 800971c:	b006      	add	sp, #24
 800971e:	bd80      	pop	{r7, pc}

08009720 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009724:	4b1b      	ldr	r3, [pc, #108]	@ (8009794 <MX_I2C1_Init+0x74>)
 8009726:	4a1c      	ldr	r2, [pc, #112]	@ (8009798 <MX_I2C1_Init+0x78>)
 8009728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800972a:	4b1a      	ldr	r3, [pc, #104]	@ (8009794 <MX_I2C1_Init+0x74>)
 800972c:	4a1b      	ldr	r2, [pc, #108]	@ (800979c <MX_I2C1_Init+0x7c>)
 800972e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009730:	4b18      	ldr	r3, [pc, #96]	@ (8009794 <MX_I2C1_Init+0x74>)
 8009732:	2200      	movs	r2, #0
 8009734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009736:	4b17      	ldr	r3, [pc, #92]	@ (8009794 <MX_I2C1_Init+0x74>)
 8009738:	2201      	movs	r2, #1
 800973a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800973c:	4b15      	ldr	r3, [pc, #84]	@ (8009794 <MX_I2C1_Init+0x74>)
 800973e:	2200      	movs	r2, #0
 8009740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009742:	4b14      	ldr	r3, [pc, #80]	@ (8009794 <MX_I2C1_Init+0x74>)
 8009744:	2200      	movs	r2, #0
 8009746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009748:	4b12      	ldr	r3, [pc, #72]	@ (8009794 <MX_I2C1_Init+0x74>)
 800974a:	2200      	movs	r2, #0
 800974c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800974e:	4b11      	ldr	r3, [pc, #68]	@ (8009794 <MX_I2C1_Init+0x74>)
 8009750:	2200      	movs	r2, #0
 8009752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009754:	4b0f      	ldr	r3, [pc, #60]	@ (8009794 <MX_I2C1_Init+0x74>)
 8009756:	2200      	movs	r2, #0
 8009758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800975a:	4b0e      	ldr	r3, [pc, #56]	@ (8009794 <MX_I2C1_Init+0x74>)
 800975c:	0018      	movs	r0, r3
 800975e:	f008 ff03 	bl	8012568 <HAL_I2C_Init>
 8009762:	1e03      	subs	r3, r0, #0
 8009764:	d001      	beq.n	800976a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009766:	f000 fd83 	bl	800a270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800976a:	4b0a      	ldr	r3, [pc, #40]	@ (8009794 <MX_I2C1_Init+0x74>)
 800976c:	2100      	movs	r1, #0
 800976e:	0018      	movs	r0, r3
 8009770:	f00b fd6c 	bl	801524c <HAL_I2CEx_ConfigAnalogFilter>
 8009774:	1e03      	subs	r3, r0, #0
 8009776:	d001      	beq.n	800977c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009778:	f000 fd7a 	bl	800a270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800977c:	4b05      	ldr	r3, [pc, #20]	@ (8009794 <MX_I2C1_Init+0x74>)
 800977e:	2100      	movs	r1, #0
 8009780:	0018      	movs	r0, r3
 8009782:	f00b fdaf 	bl	80152e4 <HAL_I2CEx_ConfigDigitalFilter>
 8009786:	1e03      	subs	r3, r0, #0
 8009788:	d001      	beq.n	800978e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800978a:	f000 fd71 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800978e:	46c0      	nop			@ (mov r8, r8)
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000bcc 	.word	0x20000bcc
 8009798:	40005400 	.word	0x40005400
 800979c:	00503d58 	.word	0x00503d58

080097a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80097a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009818 <MX_I2C2_Init+0x78>)
 80097a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80097aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097ac:	4a1b      	ldr	r2, [pc, #108]	@ (800981c <MX_I2C2_Init+0x7c>)
 80097ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80097b0:	4b18      	ldr	r3, [pc, #96]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80097b6:	4b17      	ldr	r3, [pc, #92]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097b8:	2201      	movs	r2, #1
 80097ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80097bc:	4b15      	ldr	r3, [pc, #84]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097be:	2200      	movs	r2, #0
 80097c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80097c2:	4b14      	ldr	r3, [pc, #80]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80097c8:	4b12      	ldr	r3, [pc, #72]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80097ce:	4b11      	ldr	r3, [pc, #68]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80097d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80097da:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097dc:	0018      	movs	r0, r3
 80097de:	f008 fec3 	bl	8012568 <HAL_I2C_Init>
 80097e2:	1e03      	subs	r3, r0, #0
 80097e4:	d001      	beq.n	80097ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80097e6:	f000 fd43 	bl	800a270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80097ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097ec:	2100      	movs	r1, #0
 80097ee:	0018      	movs	r0, r3
 80097f0:	f00b fd2c 	bl	801524c <HAL_I2CEx_ConfigAnalogFilter>
 80097f4:	1e03      	subs	r3, r0, #0
 80097f6:	d001      	beq.n	80097fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80097f8:	f000 fd3a 	bl	800a270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80097fc:	4b05      	ldr	r3, [pc, #20]	@ (8009814 <MX_I2C2_Init+0x74>)
 80097fe:	2100      	movs	r1, #0
 8009800:	0018      	movs	r0, r3
 8009802:	f00b fd6f 	bl	80152e4 <HAL_I2CEx_ConfigDigitalFilter>
 8009806:	1e03      	subs	r3, r0, #0
 8009808:	d001      	beq.n	800980e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800980a:	f000 fd31 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800980e:	46c0      	nop			@ (mov r8, r8)
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000c20 	.word	0x20000c20
 8009818:	40005800 	.word	0x40005800
 800981c:	00503d58 	.word	0x00503d58

08009820 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b08b      	sub	sp, #44	@ 0x2c
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009828:	2414      	movs	r4, #20
 800982a:	193b      	adds	r3, r7, r4
 800982c:	0018      	movs	r0, r3
 800982e:	2314      	movs	r3, #20
 8009830:	001a      	movs	r2, r3
 8009832:	2100      	movs	r1, #0
 8009834:	f019 f8e0 	bl	80229f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a5d      	ldr	r2, [pc, #372]	@ (80099b4 <HAL_I2C_MspInit+0x194>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d000      	beq.n	8009844 <HAL_I2C_MspInit+0x24>
 8009842:	e083      	b.n	800994c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009844:	4b5c      	ldr	r3, [pc, #368]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 8009846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009848:	4b5b      	ldr	r3, [pc, #364]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 800984a:	2102      	movs	r1, #2
 800984c:	430a      	orrs	r2, r1
 800984e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009850:	4b59      	ldr	r3, [pc, #356]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 8009852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009854:	2202      	movs	r2, #2
 8009856:	4013      	ands	r3, r2
 8009858:	613b      	str	r3, [r7, #16]
 800985a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800985c:	0021      	movs	r1, r4
 800985e:	187b      	adds	r3, r7, r1
 8009860:	22c0      	movs	r2, #192	@ 0xc0
 8009862:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009864:	187b      	adds	r3, r7, r1
 8009866:	2212      	movs	r2, #18
 8009868:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800986a:	187b      	adds	r3, r7, r1
 800986c:	2200      	movs	r2, #0
 800986e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009870:	187b      	adds	r3, r7, r1
 8009872:	2203      	movs	r2, #3
 8009874:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8009876:	187b      	adds	r3, r7, r1
 8009878:	2201      	movs	r2, #1
 800987a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800987c:	187b      	adds	r3, r7, r1
 800987e:	4a4f      	ldr	r2, [pc, #316]	@ (80099bc <HAL_I2C_MspInit+0x19c>)
 8009880:	0019      	movs	r1, r3
 8009882:	0010      	movs	r0, r2
 8009884:	f008 fc9c 	bl	80121c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009888:	4b4b      	ldr	r3, [pc, #300]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 800988a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800988c:	4b4a      	ldr	r3, [pc, #296]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 800988e:	2180      	movs	r1, #128	@ 0x80
 8009890:	0389      	lsls	r1, r1, #14
 8009892:	430a      	orrs	r2, r1
 8009894:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8009896:	4b4a      	ldr	r3, [pc, #296]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 8009898:	4a4a      	ldr	r2, [pc, #296]	@ (80099c4 <HAL_I2C_MspInit+0x1a4>)
 800989a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800989c:	4b48      	ldr	r3, [pc, #288]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 800989e:	2206      	movs	r2, #6
 80098a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80098a2:	4b47      	ldr	r3, [pc, #284]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098a8:	4b45      	ldr	r3, [pc, #276]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80098ae:	4b44      	ldr	r3, [pc, #272]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098b0:	2280      	movs	r2, #128	@ 0x80
 80098b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80098b4:	4b42      	ldr	r3, [pc, #264]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80098ba:	4b41      	ldr	r3, [pc, #260]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098bc:	2200      	movs	r2, #0
 80098be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80098c0:	4b3f      	ldr	r3, [pc, #252]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80098c6:	4b3e      	ldr	r3, [pc, #248]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80098cc:	4b3c      	ldr	r3, [pc, #240]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098ce:	0018      	movs	r0, r3
 80098d0:	f008 f85a 	bl	8011988 <HAL_DMA_Init>
 80098d4:	1e03      	subs	r3, r0, #0
 80098d6:	d001      	beq.n	80098dc <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80098d8:	f000 fcca 	bl	800a270 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a38      	ldr	r2, [pc, #224]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80098e2:	4b37      	ldr	r3, [pc, #220]	@ (80099c0 <HAL_I2C_MspInit+0x1a0>)
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80098e8:	4b37      	ldr	r3, [pc, #220]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 80098ea:	4a38      	ldr	r2, [pc, #224]	@ (80099cc <HAL_I2C_MspInit+0x1ac>)
 80098ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80098ee:	4b36      	ldr	r3, [pc, #216]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 80098f0:	2206      	movs	r2, #6
 80098f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80098f4:	4b34      	ldr	r3, [pc, #208]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 80098f6:	2210      	movs	r2, #16
 80098f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098fa:	4b33      	ldr	r3, [pc, #204]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009900:	4b31      	ldr	r3, [pc, #196]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 8009902:	2280      	movs	r2, #128	@ 0x80
 8009904:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009906:	4b30      	ldr	r3, [pc, #192]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 8009908:	2200      	movs	r2, #0
 800990a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800990c:	4b2e      	ldr	r3, [pc, #184]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 800990e:	2200      	movs	r2, #0
 8009910:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8009912:	4b2d      	ldr	r3, [pc, #180]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 8009914:	2200      	movs	r2, #0
 8009916:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009918:	4b2b      	ldr	r3, [pc, #172]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 800991a:	2200      	movs	r2, #0
 800991c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800991e:	4b2a      	ldr	r3, [pc, #168]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 8009920:	0018      	movs	r0, r3
 8009922:	f008 f831 	bl	8011988 <HAL_DMA_Init>
 8009926:	1e03      	subs	r3, r0, #0
 8009928:	d001      	beq.n	800992e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800992a:	f000 fca1 	bl	800a270 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a25      	ldr	r2, [pc, #148]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 8009932:	639a      	str	r2, [r3, #56]	@ 0x38
 8009934:	4b24      	ldr	r3, [pc, #144]	@ (80099c8 <HAL_I2C_MspInit+0x1a8>)
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800993a:	2200      	movs	r2, #0
 800993c:	2100      	movs	r1, #0
 800993e:	2017      	movs	r0, #23
 8009940:	f007 ffec 	bl	801191c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8009944:	2017      	movs	r0, #23
 8009946:	f007 fffe 	bl	8011946 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800994a:	e02e      	b.n	80099aa <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a1f      	ldr	r2, [pc, #124]	@ (80099d0 <HAL_I2C_MspInit+0x1b0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d129      	bne.n	80099aa <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009956:	4b18      	ldr	r3, [pc, #96]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 8009958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800995a:	4b17      	ldr	r3, [pc, #92]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 800995c:	2102      	movs	r1, #2
 800995e:	430a      	orrs	r2, r1
 8009960:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009962:	4b15      	ldr	r3, [pc, #84]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 8009964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009966:	2202      	movs	r2, #2
 8009968:	4013      	ands	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800996e:	2114      	movs	r1, #20
 8009970:	187b      	adds	r3, r7, r1
 8009972:	22c0      	movs	r2, #192	@ 0xc0
 8009974:	0112      	lsls	r2, r2, #4
 8009976:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009978:	187b      	adds	r3, r7, r1
 800997a:	2212      	movs	r2, #18
 800997c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800997e:	187b      	adds	r3, r7, r1
 8009980:	2200      	movs	r2, #0
 8009982:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009984:	187b      	adds	r3, r7, r1
 8009986:	2203      	movs	r2, #3
 8009988:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800998a:	187b      	adds	r3, r7, r1
 800998c:	2206      	movs	r2, #6
 800998e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009990:	187b      	adds	r3, r7, r1
 8009992:	4a0a      	ldr	r2, [pc, #40]	@ (80099bc <HAL_I2C_MspInit+0x19c>)
 8009994:	0019      	movs	r1, r3
 8009996:	0010      	movs	r0, r2
 8009998:	f008 fc12 	bl	80121c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800999c:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 800999e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099a0:	4b05      	ldr	r3, [pc, #20]	@ (80099b8 <HAL_I2C_MspInit+0x198>)
 80099a2:	2180      	movs	r1, #128	@ 0x80
 80099a4:	03c9      	lsls	r1, r1, #15
 80099a6:	430a      	orrs	r2, r1
 80099a8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80099aa:	46c0      	nop			@ (mov r8, r8)
 80099ac:	46bd      	mov	sp, r7
 80099ae:	b00b      	add	sp, #44	@ 0x2c
 80099b0:	bd90      	pop	{r4, r7, pc}
 80099b2:	46c0      	nop			@ (mov r8, r8)
 80099b4:	40005400 	.word	0x40005400
 80099b8:	40021000 	.word	0x40021000
 80099bc:	50000400 	.word	0x50000400
 80099c0:	20000c74 	.word	0x20000c74
 80099c4:	40020030 	.word	0x40020030
 80099c8:	20000cbc 	.word	0x20000cbc
 80099cc:	4002001c 	.word	0x4002001c
 80099d0:	40005800 	.word	0x40005800

080099d4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80099d8:	4b10      	ldr	r3, [pc, #64]	@ (8009a1c <MX_I2S2_Init+0x48>)
 80099da:	4a11      	ldr	r2, [pc, #68]	@ (8009a20 <MX_I2S2_Init+0x4c>)
 80099dc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80099de:	4b0f      	ldr	r3, [pc, #60]	@ (8009a1c <MX_I2S2_Init+0x48>)
 80099e0:	22c0      	movs	r2, #192	@ 0xc0
 80099e2:	0092      	lsls	r2, r2, #2
 80099e4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80099e6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a1c <MX_I2S2_Init+0x48>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80099ec:	4b0b      	ldr	r3, [pc, #44]	@ (8009a1c <MX_I2S2_Init+0x48>)
 80099ee:	2203      	movs	r2, #3
 80099f0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80099f2:	4b0a      	ldr	r3, [pc, #40]	@ (8009a1c <MX_I2S2_Init+0x48>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80099f8:	4b08      	ldr	r3, [pc, #32]	@ (8009a1c <MX_I2S2_Init+0x48>)
 80099fa:	22fa      	movs	r2, #250	@ 0xfa
 80099fc:	0192      	lsls	r2, r2, #6
 80099fe:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8009a00:	4b06      	ldr	r3, [pc, #24]	@ (8009a1c <MX_I2S2_Init+0x48>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8009a06:	4b05      	ldr	r3, [pc, #20]	@ (8009a1c <MX_I2S2_Init+0x48>)
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f00b fcb7 	bl	801537c <HAL_I2S_Init>
 8009a0e:	1e03      	subs	r3, r0, #0
 8009a10:	d001      	beq.n	8009a16 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8009a12:	f000 fc2d 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8009a16:	46c0      	nop			@ (mov r8, r8)
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20000d04 	.word	0x20000d04
 8009a20:	40003800 	.word	0x40003800

08009a24 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8009a24:	b590      	push	{r4, r7, lr}
 8009a26:	b089      	sub	sp, #36	@ 0x24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a2c:	240c      	movs	r4, #12
 8009a2e:	193b      	adds	r3, r7, r4
 8009a30:	0018      	movs	r0, r3
 8009a32:	2314      	movs	r3, #20
 8009a34:	001a      	movs	r2, r3
 8009a36:	2100      	movs	r1, #0
 8009a38:	f018 ffde 	bl	80229f8 <memset>
  if(i2sHandle->Instance==SPI2)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a2d      	ldr	r2, [pc, #180]	@ (8009af8 <HAL_I2S_MspInit+0xd4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d154      	bne.n	8009af0 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009a46:	4b2d      	ldr	r3, [pc, #180]	@ (8009afc <HAL_I2S_MspInit+0xd8>)
 8009a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8009afc <HAL_I2S_MspInit+0xd8>)
 8009a4c:	2180      	movs	r1, #128	@ 0x80
 8009a4e:	01c9      	lsls	r1, r1, #7
 8009a50:	430a      	orrs	r2, r1
 8009a52:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a54:	4b29      	ldr	r3, [pc, #164]	@ (8009afc <HAL_I2S_MspInit+0xd8>)
 8009a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a58:	4b28      	ldr	r3, [pc, #160]	@ (8009afc <HAL_I2S_MspInit+0xd8>)
 8009a5a:	2102      	movs	r1, #2
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a60:	4b26      	ldr	r3, [pc, #152]	@ (8009afc <HAL_I2S_MspInit+0xd8>)
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	2202      	movs	r2, #2
 8009a66:	4013      	ands	r3, r2
 8009a68:	60bb      	str	r3, [r7, #8]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8009a6c:	193b      	adds	r3, r7, r4
 8009a6e:	22b0      	movs	r2, #176	@ 0xb0
 8009a70:	0212      	lsls	r2, r2, #8
 8009a72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a74:	0021      	movs	r1, r4
 8009a76:	187b      	adds	r3, r7, r1
 8009a78:	2202      	movs	r2, #2
 8009a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7c:	187b      	adds	r3, r7, r1
 8009a7e:	2200      	movs	r2, #0
 8009a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a82:	187b      	adds	r3, r7, r1
 8009a84:	2200      	movs	r2, #0
 8009a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8009a88:	187b      	adds	r3, r7, r1
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a8e:	187b      	adds	r3, r7, r1
 8009a90:	4a1b      	ldr	r2, [pc, #108]	@ (8009b00 <HAL_I2S_MspInit+0xdc>)
 8009a92:	0019      	movs	r1, r3
 8009a94:	0010      	movs	r0, r2
 8009a96:	f008 fb93 	bl	80121c0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8009a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8009b08 <HAL_I2S_MspInit+0xe4>)
 8009a9e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8009aa0:	4b18      	ldr	r3, [pc, #96]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009aa6:	4b17      	ldr	r3, [pc, #92]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009aac:	4b15      	ldr	r3, [pc, #84]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009ab2:	4b14      	ldr	r3, [pc, #80]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009ab4:	2280      	movs	r2, #128	@ 0x80
 8009ab6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009ab8:	4b12      	ldr	r3, [pc, #72]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009aba:	2280      	movs	r2, #128	@ 0x80
 8009abc:	0052      	lsls	r2, r2, #1
 8009abe:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009ac0:	4b10      	ldr	r3, [pc, #64]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009ac2:	2280      	movs	r2, #128	@ 0x80
 8009ac4:	00d2      	lsls	r2, r2, #3
 8009ac6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009aca:	2220      	movs	r2, #32
 8009acc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009ace:	4b0d      	ldr	r3, [pc, #52]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f007 ff56 	bl	8011988 <HAL_DMA_Init>
 8009adc:	1e03      	subs	r3, r0, #0
 8009ade:	d001      	beq.n	8009ae4 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8009ae0:	f000 fbc6 	bl	800a270 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a07      	ldr	r2, [pc, #28]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009ae8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009aea:	4b06      	ldr	r3, [pc, #24]	@ (8009b04 <HAL_I2S_MspInit+0xe0>)
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009af0:	46c0      	nop			@ (mov r8, r8)
 8009af2:	46bd      	mov	sp, r7
 8009af4:	b009      	add	sp, #36	@ 0x24
 8009af6:	bd90      	pop	{r4, r7, pc}
 8009af8:	40003800 	.word	0x40003800
 8009afc:	40021000 	.word	0x40021000
 8009b00:	50000400 	.word	0x50000400
 8009b04:	20000d40 	.word	0x20000d40
 8009b08:	40020044 	.word	0x40020044

08009b0c <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	af00      	add	r7, sp, #0
  testDone = true;
 8009b10:	4b14      	ldr	r3, [pc, #80]	@ (8009b64 <SetTestDone+0x58>)
 8009b12:	2201      	movs	r2, #1
 8009b14:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8009b16:	23fa      	movs	r3, #250	@ 0xfa
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	f007 fa64 	bl	8010fe8 <HAL_Delay>
  SetDBLED(false, false, true);
 8009b20:	2201      	movs	r2, #1
 8009b22:	2100      	movs	r1, #0
 8009b24:	2000      	movs	r0, #0
 8009b26:	f005 fbd5 	bl	800f2d4 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 8009b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b68 <SetTestDone+0x5c>)
 8009b2c:	23fa      	movs	r3, #250	@ 0xfa
 8009b2e:	0119      	lsls	r1, r3, #4
 8009b30:	23fa      	movs	r3, #250	@ 0xfa
 8009b32:	011b      	lsls	r3, r3, #4
 8009b34:	0018      	movs	r0, r3
 8009b36:	f005 fb99 	bl	800f26c <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 8009b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8009b68 <SetTestDone+0x5c>)
 8009b3c:	23fa      	movs	r3, #250	@ 0xfa
 8009b3e:	0119      	lsls	r1, r3, #4
 8009b40:	23fa      	movs	r3, #250	@ 0xfa
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	0018      	movs	r0, r3
 8009b46:	f005 fc0f 	bl	800f368 <SetVocLED>
  HAL_Delay(500);
 8009b4a:	23fa      	movs	r3, #250	@ 0xfa
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	0018      	movs	r0, r3
 8009b50:	f007 fa4a 	bl	8010fe8 <HAL_Delay>
  SetLEDsOff();
 8009b54:	f005 fd48 	bl	800f5e8 <SetLEDsOff>
  InitDone();
 8009b58:	f005 fadc 	bl	800f114 <InitDone>
}
 8009b5c:	46c0      	nop			@ (mov r8, r8)
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	46c0      	nop			@ (mov r8, r8)
 8009b64:	20000d88 	.word	0x20000d88
 8009b68:	00000bb8 	.word	0x00000bb8

08009b6c <FlashLEDs>:

void FlashLEDs(){
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8009b72:	1dfb      	adds	r3, r7, #7
 8009b74:	2200      	movs	r2, #0
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	e021      	b.n	8009bbe <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	2001      	movs	r0, #1
 8009b80:	f005 fba8 	bl	800f2d4 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 8009b84:	4a12      	ldr	r2, [pc, #72]	@ (8009bd0 <FlashLEDs+0x64>)
 8009b86:	23fa      	movs	r3, #250	@ 0xfa
 8009b88:	0119      	lsls	r1, r3, #4
 8009b8a:	23fa      	movs	r3, #250	@ 0xfa
 8009b8c:	011b      	lsls	r3, r3, #4
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f005 fb6c 	bl	800f26c <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 8009b94:	4a0e      	ldr	r2, [pc, #56]	@ (8009bd0 <FlashLEDs+0x64>)
 8009b96:	23fa      	movs	r3, #250	@ 0xfa
 8009b98:	0119      	lsls	r1, r3, #4
 8009b9a:	23fa      	movs	r3, #250	@ 0xfa
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f005 fbe2 	bl	800f368 <SetVocLED>
    HAL_Delay(250);
 8009ba4:	20fa      	movs	r0, #250	@ 0xfa
 8009ba6:	f007 fa1f 	bl	8010fe8 <HAL_Delay>
    SetLEDsOff();
 8009baa:	f005 fd1d 	bl	800f5e8 <SetLEDsOff>
    HAL_Delay(250);
 8009bae:	20fa      	movs	r0, #250	@ 0xfa
 8009bb0:	f007 fa1a 	bl	8010fe8 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8009bb4:	1dfb      	adds	r3, r7, #7
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	1dfb      	adds	r3, r7, #7
 8009bba:	3201      	adds	r2, #1
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	1dfb      	adds	r3, r7, #7
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	d9d9      	bls.n	8009b7a <FlashLEDs+0xe>
  }
}
 8009bc6:	46c0      	nop			@ (mov r8, r8)
 8009bc8:	46c0      	nop			@ (mov r8, r8)
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	00000bb8 	.word	0x00000bb8

08009bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009bda:	f007 f995 	bl	8010f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009bde:	f000 f9f7 	bl	8009fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009be2:	f7ff fc01 	bl	80093e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8009be6:	f7ff fa29 	bl	800903c <MX_DMA_Init>
  MX_I2C1_Init();
 8009bea:	f7ff fd99 	bl	8009720 <MX_I2C1_Init>
  MX_I2S2_Init();
 8009bee:	f7ff fef1 	bl	80099d4 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8009bf2:	f006 fbb5 	bl	8010360 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8009bf6:	f7ff fdd3 	bl	80097a0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8009bfa:	f006 f9a9 	bl	800ff50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009bfe:	f006 fa1b 	bl	8010038 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8009c02:	f006 fbdd 	bl	80103c0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8009c06:	f7fd ffff 	bl	8007c08 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8009c0a:	f015 fbe1 	bl	801f3d0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8009c0e:	f001 fa29 	bl	800b064 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8009c12:	f006 fb6f 	bl	80102f4 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8009c16:	f006 fa8d 	bl	8010134 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8009c1a:	4ac7      	ldr	r2, [pc, #796]	@ (8009f38 <main+0x364>)
 8009c1c:	4bc7      	ldr	r3, [pc, #796]	@ (8009f3c <main+0x368>)
 8009c1e:	0011      	movs	r1, r2
 8009c20:	0018      	movs	r0, r3
 8009c22:	f7ff fd11 	bl	8009648 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8009c26:	f006 fe0d 	bl	8010844 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8009c2a:	f006 f819 	bl	800fc60 <Battery_Upkeep>
 8009c2e:	0003      	movs	r3, r0
 8009c30:	001a      	movs	r2, r3
 8009c32:	4bc3      	ldr	r3, [pc, #780]	@ (8009f40 <main+0x36c>)
 8009c34:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8009c36:	4bc2      	ldr	r3, [pc, #776]	@ (8009f40 <main+0x36c>)
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d113      	bne.n	8009c66 <main+0x92>
    SetAllREDLED();
 8009c3e:	f005 fcef 	bl	800f620 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 8009c42:	f7fd f901 	bl	8006e48 <ReadBatteryVoltage>
 8009c46:	1c03      	adds	r3, r0, #0
 8009c48:	1c18      	adds	r0, r3, #0
 8009c4a:	f7f9 fc0b 	bl	8003464 <__aeabi_f2d>
 8009c4e:	0002      	movs	r2, r0
 8009c50:	000b      	movs	r3, r1
 8009c52:	48bc      	ldr	r0, [pc, #752]	@ (8009f44 <main+0x370>)
 8009c54:	49bc      	ldr	r1, [pc, #752]	@ (8009f48 <main+0x374>)
 8009c56:	9200      	str	r2, [sp, #0]
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	0002      	movs	r2, r0
 8009c5c:	2002      	movs	r0, #2
 8009c5e:	f006 fd6d 	bl	801073c <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8009c62:	f7fd fd03 	bl	800766c <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8009c66:	f7fd f9c5 	bl	8006ff4 <UserButton_Pressed>
 8009c6a:	1e03      	subs	r3, r0, #0
 8009c6c:	d004      	beq.n	8009c78 <main+0xa4>
    EnableESPProg();
 8009c6e:	f015 fc7f 	bl	801f570 <EnableESPProg>
    ESP_Programming = true;
 8009c72:	4bb6      	ldr	r3, [pc, #728]	@ (8009f4c <main+0x378>)
 8009c74:	2201      	movs	r2, #1
 8009c76:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8009c78:	2003      	movs	r0, #3
 8009c7a:	f006 fdc9 	bl	8010810 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8009c7e:	49b4      	ldr	r1, [pc, #720]	@ (8009f50 <main+0x37c>)
 8009c80:	4bb4      	ldr	r3, [pc, #720]	@ (8009f54 <main+0x380>)
 8009c82:	2201      	movs	r2, #1
 8009c84:	0018      	movs	r0, r3
 8009c86:	f00f ff09 	bl	8019a9c <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8009c8a:	4bb3      	ldr	r3, [pc, #716]	@ (8009f58 <main+0x384>)
 8009c8c:	0018      	movs	r0, r3
 8009c8e:	f7fd fdc1 	bl	8007814 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8009c92:	4ab2      	ldr	r2, [pc, #712]	@ (8009f5c <main+0x388>)
 8009c94:	49b2      	ldr	r1, [pc, #712]	@ (8009f60 <main+0x38c>)
 8009c96:	48b3      	ldr	r0, [pc, #716]	@ (8009f64 <main+0x390>)
 8009c98:	230b      	movs	r3, #11
 8009c9a:	f004 fbb1 	bl	800e400 <soundInit>
 8009c9e:	0003      	movs	r3, r0
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4053      	eors	r3, r2
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8009cac:	4aae      	ldr	r2, [pc, #696]	@ (8009f68 <main+0x394>)
 8009cae:	4baf      	ldr	r3, [pc, #700]	@ (8009f6c <main+0x398>)
 8009cb0:	21f9      	movs	r1, #249	@ 0xf9
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f006 fdfa 	bl	80108ac <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8009cb8:	4bad      	ldr	r3, [pc, #692]	@ (8009f70 <main+0x39c>)
 8009cba:	4aae      	ldr	r2, [pc, #696]	@ (8009f74 <main+0x3a0>)
 8009cbc:	49a8      	ldr	r1, [pc, #672]	@ (8009f60 <main+0x38c>)
 8009cbe:	48ae      	ldr	r0, [pc, #696]	@ (8009f78 <main+0x3a4>)
 8009cc0:	f000 fba8 	bl	800a414 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 8009cc4:	f007 f986 	bl	8010fd4 <HAL_GetTick>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	4aac      	ldr	r2, [pc, #688]	@ (8009f7c <main+0x3a8>)
 8009ccc:	189a      	adds	r2, r3, r2
 8009cce:	4bac      	ldr	r3, [pc, #688]	@ (8009f80 <main+0x3ac>)
 8009cd0:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8009cd2:	f7fd f96f 	bl	8006fb4 <Check_USB_PowerOn>
 8009cd6:	0003      	movs	r3, r0
 8009cd8:	1e5a      	subs	r2, r3, #1
 8009cda:	4193      	sbcs	r3, r2
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2201      	movs	r2, #1
 8009ce0:	4053      	eors	r3, r2
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	1c1a      	adds	r2, r3, #0
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	4013      	ands	r3, r2
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	4ba5      	ldr	r3, [pc, #660]	@ (8009f84 <main+0x3b0>)
 8009cee:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 8009cf0:	f7fd f960 	bl	8006fb4 <Check_USB_PowerOn>
 8009cf4:	1e03      	subs	r3, r0, #0
 8009cf6:	d003      	beq.n	8009d00 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 8009cf8:	4ba3      	ldr	r3, [pc, #652]	@ (8009f88 <main+0x3b4>)
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	f7fc fd06 	bl	800670c <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8009d00:	4ba2      	ldr	r3, [pc, #648]	@ (8009f8c <main+0x3b8>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	0018      	movs	r0, r3
 8009d06:	f006 fcc3 	bl	8010690 <TimestampIsReached>
 8009d0a:	1e03      	subs	r3, r0, #0
 8009d0c:	d00e      	beq.n	8009d2c <main+0x158>
      charge = Battery_Upkeep();
 8009d0e:	f005 ffa7 	bl	800fc60 <Battery_Upkeep>
 8009d12:	0003      	movs	r3, r0
 8009d14:	001a      	movs	r2, r3
 8009d16:	4b8a      	ldr	r3, [pc, #552]	@ (8009f40 <main+0x36c>)
 8009d18:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 8009d1a:	f007 f95b 	bl	8010fd4 <HAL_GetTick>
 8009d1e:	0003      	movs	r3, r0
 8009d20:	4a9b      	ldr	r2, [pc, #620]	@ (8009f90 <main+0x3bc>)
 8009d22:	189a      	adds	r2, r3, r2
 8009d24:	4b99      	ldr	r3, [pc, #612]	@ (8009f8c <main+0x3b8>)
 8009d26:	601a      	str	r2, [r3, #0]
      showTime();
 8009d28:	f7fd f974 	bl	8007014 <showTime>

    }
    configCheck();
 8009d2c:	f005 fdfc 	bl	800f928 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8009d30:	4b98      	ldr	r3, [pc, #608]	@ (8009f94 <main+0x3c0>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8009d36:	4b82      	ldr	r3, [pc, #520]	@ (8009f40 <main+0x36c>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d003      	beq.n	8009d46 <main+0x172>
 8009d3e:	4b80      	ldr	r3, [pc, #512]	@ (8009f40 <main+0x36c>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d104      	bne.n	8009d50 <main+0x17c>
          FlashLEDs();
 8009d46:	f7ff ff11 	bl	8009b6c <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8009d4a:	4b93      	ldr	r3, [pc, #588]	@ (8009f98 <main+0x3c4>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8009d50:	4b7b      	ldr	r3, [pc, #492]	@ (8009f40 <main+0x36c>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d109      	bne.n	8009d6c <main+0x198>
 8009d58:	4b90      	ldr	r3, [pc, #576]	@ (8009f9c <main+0x3c8>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b09      	cmp	r3, #9
 8009d5e:	d105      	bne.n	8009d6c <main+0x198>
          batteryEmpty = true;
 8009d60:	4b8f      	ldr	r3, [pc, #572]	@ (8009fa0 <main+0x3cc>)
 8009d62:	2201      	movs	r2, #1
 8009d64:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8009d66:	f7fd fc81 	bl	800766c <Enter_Standby_Mode>
 8009d6a:	e002      	b.n	8009d72 <main+0x19e>
        }
        else{
          batteryEmpty = false;
 8009d6c:	4b8c      	ldr	r3, [pc, #560]	@ (8009fa0 <main+0x3cc>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8009d72:	4b8c      	ldr	r3, [pc, #560]	@ (8009fa4 <main+0x3d0>)
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d100      	bne.n	8009d7c <main+0x1a8>
 8009d7a:	e088      	b.n	8009e8e <main+0x2ba>
 8009d7c:	4b73      	ldr	r3, [pc, #460]	@ (8009f4c <main+0x378>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2201      	movs	r2, #1
 8009d82:	4053      	eors	r3, r2
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d100      	bne.n	8009d8c <main+0x1b8>
 8009d8a:	e080      	b.n	8009e8e <main+0x2ba>
 8009d8c:	4b84      	ldr	r3, [pc, #528]	@ (8009fa0 <main+0x3cc>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2201      	movs	r2, #1
 8009d92:	4053      	eors	r3, r2
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d100      	bne.n	8009d9c <main+0x1c8>
 8009d9a:	e078      	b.n	8009e8e <main+0x2ba>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8009d9c:	4b79      	ldr	r3, [pc, #484]	@ (8009f84 <main+0x3b0>)
 8009d9e:	781a      	ldrb	r2, [r3, #0]
 8009da0:	4b81      	ldr	r3, [pc, #516]	@ (8009fa8 <main+0x3d4>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d020      	beq.n	8009dea <main+0x216>
        if (IsSGPPresent() && !usbPluggedIn) {
 8009da8:	f000 fac6 	bl	800a338 <IsSGPPresent>
 8009dac:	1e03      	subs	r3, r0, #0
 8009dae:	d009      	beq.n	8009dc4 <main+0x1f0>
 8009db0:	4b7d      	ldr	r3, [pc, #500]	@ (8009fa8 <main+0x3d4>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	2201      	movs	r2, #1
 8009db6:	4053      	eors	r3, r2
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	f000 fac4 	bl	800a34c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8009dc4:	4b79      	ldr	r3, [pc, #484]	@ (8009fac <main+0x3d8>)
 8009dc6:	791b      	ldrb	r3, [r3, #4]
 8009dc8:	2b34      	cmp	r3, #52	@ 0x34
 8009dca:	d003      	beq.n	8009dd4 <main+0x200>
 8009dcc:	4b77      	ldr	r3, [pc, #476]	@ (8009fac <main+0x3d8>)
 8009dce:	791b      	ldrb	r3, [r3, #4]
 8009dd0:	2b35      	cmp	r3, #53	@ 0x35
 8009dd2:	d106      	bne.n	8009de2 <main+0x20e>
 8009dd4:	4b74      	ldr	r3, [pc, #464]	@ (8009fa8 <main+0x3d4>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 8009ddc:	2000      	movs	r0, #0
 8009dde:	f000 fab5 	bl	800a34c <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8009de2:	4b71      	ldr	r3, [pc, #452]	@ (8009fa8 <main+0x3d4>)
 8009de4:	781a      	ldrb	r2, [r3, #0]
 8009de6:	4b67      	ldr	r3, [pc, #412]	@ (8009f84 <main+0x3b0>)
 8009de8:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 8009dea:	f000 fe29 	bl	800aa40 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 8009dee:	4b6a      	ldr	r3, [pc, #424]	@ (8009f98 <main+0x3c4>)
 8009df0:	78db      	ldrb	r3, [r3, #3]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <main+0x22e>
        MICstate = Mic_Upkeep();
 8009df6:	f001 f821 	bl	800ae3c <Mic_Upkeep>
 8009dfa:	0003      	movs	r3, r0
 8009dfc:	001a      	movs	r2, r3
 8009dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8009fb0 <main+0x3dc>)
 8009e00:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8009e02:	4b4f      	ldr	r3, [pc, #316]	@ (8009f40 <main+0x36c>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d803      	bhi.n	8009e12 <main+0x23e>
 8009e0a:	4b62      	ldr	r3, [pc, #392]	@ (8009f94 <main+0x3c0>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d016      	beq.n	8009e40 <main+0x26c>
 8009e12:	4b61      	ldr	r3, [pc, #388]	@ (8009f98 <main+0x3c4>)
 8009e14:	789b      	ldrb	r3, [r3, #2]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d012      	beq.n	8009e40 <main+0x26c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8009e1a:	f001 f9b1 	bl	800b180 <sen5x_Get_sen5x_enable_state>
 8009e1e:	0003      	movs	r3, r0
 8009e20:	001a      	movs	r2, r3
 8009e22:	2301      	movs	r3, #1
 8009e24:	4053      	eors	r3, r2
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d006      	beq.n	8009e3a <main+0x266>
 8009e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8009fa8 <main+0x3d4>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <main+0x266>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 8009e34:	2000      	movs	r0, #0
 8009e36:	f001 f9df 	bl	800b1f8 <sen5x_enable>
        }
        sen5x_statemachine();
 8009e3a:	f001 ff29 	bl	800bc90 <sen5x_statemachine>
 8009e3e:	e020      	b.n	8009e82 <main+0x2ae>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8009e40:	4b3f      	ldr	r3, [pc, #252]	@ (8009f40 <main+0x36c>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d81c      	bhi.n	8009e82 <main+0x2ae>
 8009e48:	4b52      	ldr	r3, [pc, #328]	@ (8009f94 <main+0x3c0>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	4053      	eors	r3, r2
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d015      	beq.n	8009e82 <main+0x2ae>
 8009e56:	4b50      	ldr	r3, [pc, #320]	@ (8009f98 <main+0x3c4>)
 8009e58:	789b      	ldrb	r3, [r3, #2]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d011      	beq.n	8009e82 <main+0x2ae>
        Info("Battery level insufficient for sen5x operation");
 8009e5e:	4a55      	ldr	r2, [pc, #340]	@ (8009fb4 <main+0x3e0>)
 8009e60:	4b39      	ldr	r3, [pc, #228]	@ (8009f48 <main+0x374>)
 8009e62:	0019      	movs	r1, r3
 8009e64:	2002      	movs	r0, #2
 8009e66:	f006 fc69 	bl	801073c <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8009e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8009f98 <main+0x3c4>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8009e70:	4b51      	ldr	r3, [pc, #324]	@ (8009fb8 <main+0x3e4>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8009e76:	4b51      	ldr	r3, [pc, #324]	@ (8009fbc <main+0x3e8>)
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <main+0x2ae>
          sen5x_Power_Off();
 8009e7e:	f001 fa47 	bl	800b310 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8009e82:	f7fb fc89 	bl	8005798 <ESP_Upkeep>
 8009e86:	0003      	movs	r3, r0
 8009e88:	001a      	movs	r2, r3
 8009e8a:	4b44      	ldr	r3, [pc, #272]	@ (8009f9c <main+0x3c8>)
 8009e8c:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8009e8e:	4b45      	ldr	r3, [pc, #276]	@ (8009fa4 <main+0x3d0>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2201      	movs	r2, #1
 8009e94:	4053      	eors	r3, r2
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00f      	beq.n	8009ebc <main+0x2e8>
 8009e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8009f4c <main+0x378>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	4053      	eors	r3, r2
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d008      	beq.n	8009ebc <main+0x2e8>
 8009eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8009fa0 <main+0x3cc>)
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	4053      	eors	r3, r2
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <main+0x2e8>
      Device_Test();  // for device with startup time
 8009eb8:	f000 fc54 	bl	800a764 <Device_Test>
    }
    if (!usbPluggedIn) {
 8009ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8009fa8 <main+0x3d4>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	4053      	eors	r3, r2
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01c      	beq.n	8009f04 <main+0x330>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8009eca:	4b3d      	ldr	r3, [pc, #244]	@ (8009fc0 <main+0x3ec>)
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4053      	eors	r3, r2
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d015      	beq.n	8009f04 <main+0x330>
 8009ed8:	f000 fcc2 	bl	800a860 <AllDevicesReady>
 8009edc:	1e03      	subs	r3, r0, #0
 8009ede:	d011      	beq.n	8009f04 <main+0x330>
 8009ee0:	4b38      	ldr	r3, [pc, #224]	@ (8009fc4 <main+0x3f0>)
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00d      	beq.n	8009f04 <main+0x330>
        EnabledConnectedDevices();
 8009ee8:	f000 fd34 	bl	800a954 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8009eec:	4b36      	ldr	r3, [pc, #216]	@ (8009fc8 <main+0x3f4>)
 8009eee:	791b      	ldrb	r3, [r3, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <main+0x326>
 8009ef4:	23d7      	movs	r3, #215	@ 0xd7
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	e001      	b.n	8009efe <main+0x32a>
 8009efa:	23dc      	movs	r3, #220	@ 0xdc
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	0018      	movs	r0, r3
 8009f00:	f7fd fbd4 	bl	80076ac <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 8009f04:	4b12      	ldr	r3, [pc, #72]	@ (8009f50 <main+0x37c>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <main+0x33c>
      check_cli_command();
 8009f0c:	f000 f8ea 	bl	800a0e4 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 8009f10:	f7fd f850 	bl	8006fb4 <Check_USB_PowerOn>
 8009f14:	1e03      	subs	r3, r0, #0
 8009f16:	d100      	bne.n	8009f1a <main+0x346>
 8009f18:	e6f2      	b.n	8009d00 <main+0x12c>
 8009f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009fcc <main+0x3f8>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	4053      	eors	r3, r2
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d100      	bne.n	8009f2a <main+0x356>
 8009f28:	e6ea      	b.n	8009d00 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 8009f2a:	f015 fb2b 	bl	801f584 <GetUsbRxPointer>
 8009f2e:	0003      	movs	r3, r0
 8009f30:	0018      	movs	r0, r3
 8009f32:	f7fc fe09 	bl	8006b48 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 8009f36:	e6e3      	b.n	8009d00 <main+0x12c>
 8009f38:	20001e38 	.word	0x20001e38
 8009f3c:	20001df8 	.word	0x20001df8
 8009f40:	20000da4 	.word	0x20000da4
 8009f44:	08027494 	.word	0x08027494
 8009f48:	080274b8 	.word	0x080274b8
 8009f4c:	20000d89 	.word	0x20000d89
 8009f50:	20000d90 	.word	0x20000d90
 8009f54:	20001f70 	.word	0x20001f70
 8009f58:	20000e24 	.word	0x20000e24
 8009f5c:	20001e78 	.word	0x20001e78
 8009f60:	20000d04 	.word	0x20000d04
 8009f64:	20000d40 	.word	0x20000d40
 8009f68:	080274bc 	.word	0x080274bc
 8009f6c:	08028c64 	.word	0x08028c64
 8009f70:	20002028 	.word	0x20002028
 8009f74:	20000b04 	.word	0x20000b04
 8009f78:	20000bcc 	.word	0x20000bcc
 8009f7c:	000061a8 	.word	0x000061a8
 8009f80:	20000da0 	.word	0x20000da0
 8009f84:	20000d8b 	.word	0x20000d8b
 8009f88:	080274d0 	.word	0x080274d0
 8009f8c:	20000094 	.word	0x20000094
 8009f90:	0000c350 	.word	0x0000c350
 8009f94:	20000090 	.word	0x20000090
 8009f98:	20000da8 	.word	0x20000da8
 8009f9c:	20000d8d 	.word	0x20000d8d
 8009fa0:	20000d8a 	.word	0x20000d8a
 8009fa4:	20000d88 	.word	0x20000d88
 8009fa8:	20001dd9 	.word	0x20001dd9
 8009fac:	20000e4c 	.word	0x20000e4c
 8009fb0:	20000d8c 	.word	0x20000d8c
 8009fb4:	08027504 	.word	0x08027504
 8009fb8:	20000e4a 	.word	0x20000e4a
 8009fbc:	20000e49 	.word	0x20000e49
 8009fc0:	20001dda 	.word	0x20001dda
 8009fc4:	20000560 	.word	0x20000560
 8009fc8:	20000db0 	.word	0x20000db0
 8009fcc:	2000055b 	.word	0x2000055b

08009fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b09d      	sub	sp, #116	@ 0x74
 8009fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009fd6:	2438      	movs	r4, #56	@ 0x38
 8009fd8:	193b      	adds	r3, r7, r4
 8009fda:	0018      	movs	r0, r3
 8009fdc:	2338      	movs	r3, #56	@ 0x38
 8009fde:	001a      	movs	r2, r3
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	f018 fd09 	bl	80229f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009fe6:	2324      	movs	r3, #36	@ 0x24
 8009fe8:	18fb      	adds	r3, r7, r3
 8009fea:	0018      	movs	r0, r3
 8009fec:	2314      	movs	r3, #20
 8009fee:	001a      	movs	r2, r3
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	f018 fd01 	bl	80229f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009ff6:	003b      	movs	r3, r7
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	2324      	movs	r3, #36	@ 0x24
 8009ffc:	001a      	movs	r2, r3
 8009ffe:	2100      	movs	r1, #0
 800a000:	f018 fcfa 	bl	80229f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a004:	4b34      	ldr	r3, [pc, #208]	@ (800a0d8 <SystemClock_Config+0x108>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a34      	ldr	r2, [pc, #208]	@ (800a0dc <SystemClock_Config+0x10c>)
 800a00a:	401a      	ands	r2, r3
 800a00c:	4b32      	ldr	r3, [pc, #200]	@ (800a0d8 <SystemClock_Config+0x108>)
 800a00e:	2180      	movs	r1, #128	@ 0x80
 800a010:	0109      	lsls	r1, r1, #4
 800a012:	430a      	orrs	r2, r1
 800a014:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a016:	f00d fb15 	bl	8017644 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800a01a:	4b31      	ldr	r3, [pc, #196]	@ (800a0e0 <SystemClock_Config+0x110>)
 800a01c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a01e:	4a2f      	ldr	r2, [pc, #188]	@ (800a0dc <SystemClock_Config+0x10c>)
 800a020:	401a      	ands	r2, r3
 800a022:	4b2f      	ldr	r3, [pc, #188]	@ (800a0e0 <SystemClock_Config+0x110>)
 800a024:	2180      	movs	r1, #128	@ 0x80
 800a026:	0149      	lsls	r1, r1, #5
 800a028:	430a      	orrs	r2, r1
 800a02a:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800a02c:	193b      	adds	r3, r7, r4
 800a02e:	2226      	movs	r2, #38	@ 0x26
 800a030:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a032:	193b      	adds	r3, r7, r4
 800a034:	2280      	movs	r2, #128	@ 0x80
 800a036:	0052      	lsls	r2, r2, #1
 800a038:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a03a:	0021      	movs	r1, r4
 800a03c:	187b      	adds	r3, r7, r1
 800a03e:	2201      	movs	r2, #1
 800a040:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a042:	187b      	adds	r3, r7, r1
 800a044:	2210      	movs	r2, #16
 800a046:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a048:	187b      	adds	r3, r7, r1
 800a04a:	2201      	movs	r2, #1
 800a04c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a04e:	187b      	adds	r3, r7, r1
 800a050:	2200      	movs	r2, #0
 800a052:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a054:	187b      	adds	r3, r7, r1
 800a056:	0018      	movs	r0, r3
 800a058:	f00d fb84 	bl	8017764 <HAL_RCC_OscConfig>
 800a05c:	1e03      	subs	r3, r0, #0
 800a05e:	d001      	beq.n	800a064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a060:	f000 f906 	bl	800a270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a064:	2124      	movs	r1, #36	@ 0x24
 800a066:	187b      	adds	r3, r7, r1
 800a068:	220f      	movs	r2, #15
 800a06a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800a06c:	187b      	adds	r3, r7, r1
 800a06e:	2201      	movs	r2, #1
 800a070:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a072:	187b      	adds	r3, r7, r1
 800a074:	2200      	movs	r2, #0
 800a076:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a078:	187b      	adds	r3, r7, r1
 800a07a:	2200      	movs	r2, #0
 800a07c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a07e:	187b      	adds	r3, r7, r1
 800a080:	2200      	movs	r2, #0
 800a082:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a084:	187b      	adds	r3, r7, r1
 800a086:	2100      	movs	r1, #0
 800a088:	0018      	movs	r0, r3
 800a08a:	f00d ff3f 	bl	8017f0c <HAL_RCC_ClockConfig>
 800a08e:	1e03      	subs	r3, r0, #0
 800a090:	d001      	beq.n	800a096 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800a092:	f000 f8ed 	bl	800a270 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800a096:	003b      	movs	r3, r7
 800a098:	226d      	movs	r2, #109	@ 0x6d
 800a09a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a09c:	003b      	movs	r3, r7
 800a09e:	2200      	movs	r2, #0
 800a0a0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a0a2:	003b      	movs	r3, r7
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a0a8:	003b      	movs	r3, r7
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a0ae:	003b      	movs	r3, r7
 800a0b0:	2280      	movs	r2, #128	@ 0x80
 800a0b2:	0252      	lsls	r2, r2, #9
 800a0b4:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a0b6:	003b      	movs	r3, r7
 800a0b8:	2280      	movs	r2, #128	@ 0x80
 800a0ba:	04d2      	lsls	r2, r2, #19
 800a0bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a0be:	003b      	movs	r3, r7
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f00e f947 	bl	8018354 <HAL_RCCEx_PeriphCLKConfig>
 800a0c6:	1e03      	subs	r3, r0, #0
 800a0c8:	d001      	beq.n	800a0ce <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800a0ca:	f000 f8d1 	bl	800a270 <Error_Handler>
  }
}
 800a0ce:	46c0      	nop			@ (mov r8, r8)
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	b01d      	add	sp, #116	@ 0x74
 800a0d4:	bd90      	pop	{r4, r7, pc}
 800a0d6:	46c0      	nop			@ (mov r8, r8)
 800a0d8:	40007000 	.word	0x40007000
 800a0dc:	ffffe7ff 	.word	0xffffe7ff
 800a0e0:	40021000 	.word	0x40021000

0800a0e4 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800a0e8:	4b34      	ldr	r3, [pc, #208]	@ (800a1bc <check_cli_command+0xd8>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	3b61      	subs	r3, #97	@ 0x61
 800a0ee:	2b13      	cmp	r3, #19
 800a0f0:	d833      	bhi.n	800a15a <check_cli_command+0x76>
 800a0f2:	009a      	lsls	r2, r3, #2
 800a0f4:	4b32      	ldr	r3, [pc, #200]	@ (800a1c0 <check_cli_command+0xdc>)
 800a0f6:	18d3      	adds	r3, r2, r3
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800a0fc:	4b31      	ldr	r3, [pc, #196]	@ (800a1c4 <check_cli_command+0xe0>)
 800a0fe:	0018      	movs	r0, r3
 800a100:	f018 fb0a 	bl	8022718 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800a104:	2003      	movs	r0, #3
 800a106:	f006 fb83 	bl	8010810 <SetVerboseLevel>
      break;
 800a10a:	e051      	b.n	800a1b0 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800a10c:	f7fc fb3e 	bl	800678c <PC_show_Keys>
    break;
 800a110:	e04e      	b.n	800a1b0 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800a112:	f7f9 fa9d 	bl	8003650 <forceNTPupdate>
    break;
 800a116:	e04b      	b.n	800a1b0 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800a118:	4b2b      	ldr	r3, [pc, #172]	@ (800a1c8 <check_cli_command+0xe4>)
 800a11a:	0018      	movs	r0, r3
 800a11c:	f018 fafc 	bl	8022718 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800a120:	2002      	movs	r0, #2
 800a122:	f006 fb75 	bl	8010810 <SetVerboseLevel>
      break;
 800a126:	e043      	b.n	800a1b0 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800a128:	4b28      	ldr	r3, [pc, #160]	@ (800a1cc <check_cli_command+0xe8>)
 800a12a:	0018      	movs	r0, r3
 800a12c:	f018 faf4 	bl	8022718 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800a130:	2001      	movs	r0, #1
 800a132:	f006 fb6d 	bl	8010810 <SetVerboseLevel>
      break;
 800a136:	e03b      	b.n	800a1b0 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800a138:	4b25      	ldr	r3, [pc, #148]	@ (800a1d0 <check_cli_command+0xec>)
 800a13a:	0018      	movs	r0, r3
 800a13c:	f018 faec 	bl	8022718 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800a140:	2000      	movs	r0, #0
 800a142:	f006 fb65 	bl	8010810 <SetVerboseLevel>
      break;
 800a146:	e033      	b.n	800a1b0 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800a148:	f006 ff44 	bl	8010fd4 <HAL_GetTick>
 800a14c:	0002      	movs	r2, r0
 800a14e:	4b21      	ldr	r3, [pc, #132]	@ (800a1d4 <check_cli_command+0xf0>)
 800a150:	601a      	str	r2, [r3, #0]
      break;
 800a152:	e02d      	b.n	800a1b0 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800a154:	f7fc ff5e 	bl	8007014 <showTime>
      break;
 800a158:	e02a      	b.n	800a1b0 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800a15a:	4a1f      	ldr	r2, [pc, #124]	@ (800a1d8 <check_cli_command+0xf4>)
 800a15c:	4b1f      	ldr	r3, [pc, #124]	@ (800a1dc <check_cli_command+0xf8>)
 800a15e:	0019      	movs	r1, r3
 800a160:	2001      	movs	r0, #1
 800a162:	f006 faeb 	bl	801073c <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800a166:	4b1e      	ldr	r3, [pc, #120]	@ (800a1e0 <check_cli_command+0xfc>)
 800a168:	0018      	movs	r0, r3
 800a16a:	f018 fad5 	bl	8022718 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800a16e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e4 <check_cli_command+0x100>)
 800a170:	0018      	movs	r0, r3
 800a172:	f018 fad1 	bl	8022718 <puts>
      printf("e - show EEPROM\r\n");
 800a176:	4b1c      	ldr	r3, [pc, #112]	@ (800a1e8 <check_cli_command+0x104>)
 800a178:	0018      	movs	r0, r3
 800a17a:	f018 facd 	bl	8022718 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800a17e:	4b1b      	ldr	r3, [pc, #108]	@ (800a1ec <check_cli_command+0x108>)
 800a180:	0018      	movs	r0, r3
 800a182:	f018 fac9 	bl	8022718 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800a186:	4b1a      	ldr	r3, [pc, #104]	@ (800a1f0 <check_cli_command+0x10c>)
 800a188:	0018      	movs	r0, r3
 800a18a:	f018 fac5 	bl	8022718 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800a18e:	4b19      	ldr	r3, [pc, #100]	@ (800a1f4 <check_cli_command+0x110>)
 800a190:	0018      	movs	r0, r3
 800a192:	f018 fac1 	bl	8022718 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800a196:	4b18      	ldr	r3, [pc, #96]	@ (800a1f8 <check_cli_command+0x114>)
 800a198:	0018      	movs	r0, r3
 800a19a:	f018 fabd 	bl	8022718 <puts>
      printf("s - Start particle measurement\r\n");
 800a19e:	4b17      	ldr	r3, [pc, #92]	@ (800a1fc <check_cli_command+0x118>)
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	f018 fab9 	bl	8022718 <puts>
      printf("t - Show actual systemtime\r\n");
 800a1a6:	4b16      	ldr	r3, [pc, #88]	@ (800a200 <check_cli_command+0x11c>)
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f018 fab5 	bl	8022718 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800a1ae:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800a1b0:	4b02      	ldr	r3, [pc, #8]	@ (800a1bc <check_cli_command+0xd8>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
}
 800a1b6:	46c0      	nop			@ (mov r8, r8)
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20000d90 	.word	0x20000d90
 800a1c0:	08028c14 	.word	0x08028c14
 800a1c4:	08027534 	.word	0x08027534
 800a1c8:	08027550 	.word	0x08027550
 800a1cc:	0802756c 	.word	0x0802756c
 800a1d0:	0802758c 	.word	0x0802758c
 800a1d4:	20000e58 	.word	0x20000e58
 800a1d8:	080275a8 	.word	0x080275a8
 800a1dc:	080275d8 	.word	0x080275d8
 800a1e0:	080275dc 	.word	0x080275dc
 800a1e4:	080275f4 	.word	0x080275f4
 800a1e8:	08027614 	.word	0x08027614
 800a1ec:	08027628 	.word	0x08027628
 800a1f0:	0802764c 	.word	0x0802764c
 800a1f4:	0802766c 	.word	0x0802766c
 800a1f8:	08027690 	.word	0x08027690
 800a1fc:	080276b0 	.word	0x080276b0
 800a200:	080276d0 	.word	0x080276d0

0800a204 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800a20c:	4907      	ldr	r1, [pc, #28]	@ (800a22c <HAL_UART_RxCpltCallback+0x28>)
 800a20e:	4b08      	ldr	r3, [pc, #32]	@ (800a230 <HAL_UART_RxCpltCallback+0x2c>)
 800a210:	2201      	movs	r2, #1
 800a212:	0018      	movs	r0, r3
 800a214:	f00f fc42 	bl	8019a9c <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800a218:	4904      	ldr	r1, [pc, #16]	@ (800a22c <HAL_UART_RxCpltCallback+0x28>)
 800a21a:	4b05      	ldr	r3, [pc, #20]	@ (800a230 <HAL_UART_RxCpltCallback+0x2c>)
 800a21c:	2201      	movs	r2, #1
 800a21e:	0018      	movs	r0, r3
 800a220:	f00f fc3c 	bl	8019a9c <HAL_UART_Receive_IT>
}
 800a224:	46c0      	nop			@ (mov r8, r8)
 800a226:	46bd      	mov	sp, r7
 800a228:	b002      	add	sp, #8
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000d90 	.word	0x20000d90
 800a230:	20001f70 	.word	0x20001f70

0800a234 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	0002      	movs	r2, r0
 800a23c:	1dbb      	adds	r3, r7, #6
 800a23e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800a240:	1dbb      	adds	r3, r7, #6
 800a242:	881a      	ldrh	r2, [r3, #0]
 800a244:	2380      	movs	r3, #128	@ 0x80
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	429a      	cmp	r2, r3
 800a24a:	d10b      	bne.n	800a264 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800a24c:	f005 fd1c 	bl	800fc88 <setuserToggle>
    if (GetPMSensorPresence()) {
 800a250:	f000 f854 	bl	800a2fc <GetPMSensorPresence>
 800a254:	1e03      	subs	r3, r0, #0
 800a256:	d005      	beq.n	800a264 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800a258:	4b04      	ldr	r3, [pc, #16]	@ (800a26c <HAL_GPIO_EXTI_Callback+0x38>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800a25e:	2000      	movs	r0, #0
 800a260:	f000 ff98 	bl	800b194 <sen5x_Set_sen5x_state>
    }
  }
}
 800a264:	46c0      	nop			@ (mov r8, r8)
 800a266:	46bd      	mov	sp, r7
 800a268:	b002      	add	sp, #8
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20000da8 	.word	0x20000da8

0800a270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800a274:	f005 f9d4 	bl	800f620 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a278:	b672      	cpsid	i
}
 800a27a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800a27c:	4a05      	ldr	r2, [pc, #20]	@ (800a294 <Error_Handler+0x24>)
 800a27e:	4b06      	ldr	r3, [pc, #24]	@ (800a298 <Error_Handler+0x28>)
 800a280:	0019      	movs	r1, r3
 800a282:	2001      	movs	r0, #1
 800a284:	f006 fa5a 	bl	801073c <CreateLine>

    HAL_Delay(2500);
 800a288:	4b04      	ldr	r3, [pc, #16]	@ (800a29c <Error_Handler+0x2c>)
 800a28a:	0018      	movs	r0, r3
 800a28c:	f006 feac 	bl	8010fe8 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800a290:	46c0      	nop			@ (mov r8, r8)
 800a292:	e7f3      	b.n	800a27c <Error_Handler+0xc>
 800a294:	080276ec 	.word	0x080276ec
 800a298:	080275d8 	.word	0x080275d8
 800a29c:	000009c4 	.word	0x000009c4

0800a2a0 <testInit>:
static uint8_t SGPstate;
static uint8_t HIDSstate;
static uint8_t AHTstate;
static uint8_t BMPstate;

void testInit(){
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800a2a4:	4b13      	ldr	r3, [pc, #76]	@ (800a2f4 <testInit+0x54>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800a2aa:	4b12      	ldr	r3, [pc, #72]	@ (800a2f4 <testInit+0x54>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800a2b0:	4b10      	ldr	r3, [pc, #64]	@ (800a2f4 <testInit+0x54>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	709a      	strb	r2, [r3, #2]
  SensorProbe.BMP280_Present = false;
 800a2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f4 <testInit+0x54>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	70da      	strb	r2, [r3, #3]
  SensorProbe.PM_Present = false;
 800a2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f4 <testInit+0x54>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	711a      	strb	r2, [r3, #4]
  SensorProbe.MIC_Present = false;
 800a2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <testInit+0x54>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	715a      	strb	r2, [r3, #5]
  SensorProbe.ESP_Present = false;
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f4 <testInit+0x54>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	719a      	strb	r2, [r3, #6]
  SensorProbe.SGP_Enabled = false;
 800a2ce:	4b09      	ldr	r3, [pc, #36]	@ (800a2f4 <testInit+0x54>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	71da      	strb	r2, [r3, #7]
  Sensor.HT_measurementEnabled = true;
 800a2d4:	4b08      	ldr	r3, [pc, #32]	@ (800a2f8 <testInit+0x58>)
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800a2da:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <testInit+0x58>)
 800a2dc:	2201      	movs	r2, #1
 800a2de:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800a2e0:	4b05      	ldr	r3, [pc, #20]	@ (800a2f8 <testInit+0x58>)
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800a2e6:	4b04      	ldr	r3, [pc, #16]	@ (800a2f8 <testInit+0x58>)
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	70da      	strb	r2, [r3, #3]
}
 800a2ec:	46c0      	nop			@ (mov r8, r8)
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	46c0      	nop			@ (mov r8, r8)
 800a2f4:	20000db0 	.word	0x20000db0
 800a2f8:	20000da8 	.word	0x20000da8

0800a2fc <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800a300:	4b02      	ldr	r3, [pc, #8]	@ (800a30c <GetPMSensorPresence+0x10>)
 800a302:	791b      	ldrb	r3, [r3, #4]
}
 800a304:	0018      	movs	r0, r3
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	46c0      	nop			@ (mov r8, r8)
 800a30c:	20000db0 	.word	0x20000db0

0800a310 <DisablePMSensor>:

void DisablePMSensor() {
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800a314:	4b02      	ldr	r3, [pc, #8]	@ (800a320 <DisablePMSensor+0x10>)
 800a316:	2200      	movs	r2, #0
 800a318:	711a      	strb	r2, [r3, #4]
}
 800a31a:	46c0      	nop			@ (mov r8, r8)
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000db0 	.word	0x20000db0

0800a324 <IsBMP280SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsBMP280SensorPresent() {
 800a324:	b580      	push	{r7, lr}
 800a326:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800a328:	4b02      	ldr	r3, [pc, #8]	@ (800a334 <IsBMP280SensorPresent+0x10>)
 800a32a:	78db      	ldrb	r3, [r3, #3]
}
 800a32c:	0018      	movs	r0, r3
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	46c0      	nop			@ (mov r8, r8)
 800a334:	20000db0 	.word	0x20000db0

0800a338 <IsSGPPresent>:

bool IsSGPPresent() {
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800a33c:	4b02      	ldr	r3, [pc, #8]	@ (800a348 <IsSGPPresent+0x10>)
 800a33e:	785b      	ldrb	r3, [r3, #1]
}
 800a340:	0018      	movs	r0, r3
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	46c0      	nop			@ (mov r8, r8)
 800a348:	20000db0 	.word	0x20000db0

0800a34c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	0002      	movs	r2, r0
 800a354:	1dfb      	adds	r3, r7, #7
 800a356:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800a358:	4b0b      	ldr	r3, [pc, #44]	@ (800a388 <SetVOCSensorDIS_ENA+0x3c>)
 800a35a:	1dfa      	adds	r2, r7, #7
 800a35c:	7812      	ldrb	r2, [r2, #0]
 800a35e:	71da      	strb	r2, [r3, #7]
  Sensor.VOC_measurementEnabled = setting;
 800a360:	4b0a      	ldr	r3, [pc, #40]	@ (800a38c <SetVOCSensorDIS_ENA+0x40>)
 800a362:	1dfa      	adds	r2, r7, #7
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800a368:	1dfb      	adds	r3, r7, #7
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <SetVOCSensorDIS_ENA+0x28>
 800a370:	4b07      	ldr	r3, [pc, #28]	@ (800a390 <SetVOCSensorDIS_ENA+0x44>)
 800a372:	e000      	b.n	800a376 <SetVOCSensorDIS_ENA+0x2a>
 800a374:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <SetVOCSensorDIS_ENA+0x48>)
 800a376:	4a08      	ldr	r2, [pc, #32]	@ (800a398 <SetVOCSensorDIS_ENA+0x4c>)
 800a378:	4908      	ldr	r1, [pc, #32]	@ (800a39c <SetVOCSensorDIS_ENA+0x50>)
 800a37a:	2003      	movs	r0, #3
 800a37c:	f006 f9de 	bl	801073c <CreateLine>
}
 800a380:	46c0      	nop			@ (mov r8, r8)
 800a382:	46bd      	mov	sp, r7
 800a384:	b002      	add	sp, #8
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20000db0 	.word	0x20000db0
 800a38c:	20000da8 	.word	0x20000da8
 800a390:	08027718 	.word	0x08027718
 800a394:	08027720 	.word	0x08027720
 800a398:	0802772c 	.word	0x0802772c
 800a39c:	08027740 	.word	0x08027740

0800a3a0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800a3a4:	4b02      	ldr	r3, [pc, #8]	@ (800a3b0 <IsPMSensorEnabled+0x10>)
 800a3a6:	789b      	ldrb	r3, [r3, #2]
}
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	46c0      	nop			@ (mov r8, r8)
 800a3b0:	20000da8 	.word	0x20000da8

0800a3b4 <SetVOCSensorStatus>:

void SetBMP280SensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	0002      	movs	r2, r0
 800a3bc:	1dfb      	adds	r3, r7, #7
 800a3be:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800a3c0:	4b05      	ldr	r3, [pc, #20]	@ (800a3d8 <SetVOCSensorStatus+0x24>)
 800a3c2:	79db      	ldrb	r3, [r3, #7]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800a3c8:	4b04      	ldr	r3, [pc, #16]	@ (800a3dc <SetVOCSensorStatus+0x28>)
 800a3ca:	1dfa      	adds	r2, r7, #7
 800a3cc:	7812      	ldrb	r2, [r2, #0]
 800a3ce:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800a3d0:	46c0      	nop			@ (mov r8, r8)
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	b002      	add	sp, #8
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000db0 	.word	0x20000db0
 800a3dc:	20000da8 	.word	0x20000da8

0800a3e0 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	0002      	movs	r2, r0
 800a3e8:	1dfb      	adds	r3, r7, #7
 800a3ea:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800a3ec:	4b03      	ldr	r3, [pc, #12]	@ (800a3fc <SetPMSensorStatus+0x1c>)
 800a3ee:	1dfa      	adds	r2, r7, #7
 800a3f0:	7812      	ldrb	r2, [r2, #0]
 800a3f2:	709a      	strb	r2, [r3, #2]
}
 800a3f4:	46c0      	nop			@ (mov r8, r8)
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	b002      	add	sp, #8
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	20000da8 	.word	0x20000da8

0800a400 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800a404:	4b02      	ldr	r3, [pc, #8]	@ (800a410 <SetESPMeasurementDone+0x10>)
 800a406:	2201      	movs	r2, #1
 800a408:	719a      	strb	r2, [r3, #6]
}
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20000db0 	.word	0x20000db0

0800a414 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
  testInit();
 800a422:	f7ff ff3d 	bl	800a2a0 <testInit>
  I2CSensors_Init(sensorI2C);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	0018      	movs	r0, r3
 800a42a:	f7fb fe61 	bl	80060f0 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800a42e:	f006 fbb7 	bl	8010ba0 <HIDS_DeviceConnected>
 800a432:	0003      	movs	r3, r0
 800a434:	001a      	movs	r2, r3
 800a436:	2301      	movs	r3, #1
 800a438:	4053      	eors	r3, r2
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00c      	beq.n	800a45a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800a440:	4aaa      	ldr	r2, [pc, #680]	@ (800a6ec <Device_Init+0x2d8>)
 800a442:	4bab      	ldr	r3, [pc, #684]	@ (800a6f0 <Device_Init+0x2dc>)
 800a444:	0019      	movs	r1, r3
 800a446:	2001      	movs	r0, #1
 800a448:	f006 f978 	bl	801073c <CreateLine>
     SensorProbe.HT_Present = false;
 800a44c:	4ba9      	ldr	r3, [pc, #676]	@ (800a6f4 <Device_Init+0x2e0>)
 800a44e:	2200      	movs	r2, #0
 800a450:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800a452:	4ba9      	ldr	r3, [pc, #676]	@ (800a6f8 <Device_Init+0x2e4>)
 800a454:	2200      	movs	r2, #0
 800a456:	701a      	strb	r2, [r3, #0]
 800a458:	e008      	b.n	800a46c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800a45a:	4ba6      	ldr	r3, [pc, #664]	@ (800a6f4 <Device_Init+0x2e0>)
 800a45c:	2201      	movs	r2, #1
 800a45e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800a460:	4aa6      	ldr	r2, [pc, #664]	@ (800a6fc <Device_Init+0x2e8>)
 800a462:	4ba7      	ldr	r3, [pc, #668]	@ (800a700 <Device_Init+0x2ec>)
 800a464:	0019      	movs	r1, r3
 800a466:	2003      	movs	r0, #3
 800a468:	f006 f968 	bl	801073c <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800a46c:	f7fd fd3e 	bl	8007eec <AHT20_DeviceConnected>
 800a470:	0003      	movs	r3, r0
 800a472:	001a      	movs	r2, r3
 800a474:	2301      	movs	r3, #1
 800a476:	4053      	eors	r3, r2
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00c      	beq.n	800a498 <Device_Init+0x84>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800a47e:	4aa1      	ldr	r2, [pc, #644]	@ (800a704 <Device_Init+0x2f0>)
 800a480:	4b9b      	ldr	r3, [pc, #620]	@ (800a6f0 <Device_Init+0x2dc>)
 800a482:	0019      	movs	r1, r3
 800a484:	2001      	movs	r0, #1
 800a486:	f006 f959 	bl	801073c <CreateLine>
     SensorProbe.AHT20_Present = false;
 800a48a:	4b9a      	ldr	r3, [pc, #616]	@ (800a6f4 <Device_Init+0x2e0>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT20_measurementEnabled = false;
 800a490:	4b99      	ldr	r3, [pc, #612]	@ (800a6f8 <Device_Init+0x2e4>)
 800a492:	2200      	movs	r2, #0
 800a494:	711a      	strb	r2, [r3, #4]
 800a496:	e008      	b.n	800a4aa <Device_Init+0x96>
  }else {
    SensorProbe.AHT20_Present = true;
 800a498:	4b96      	ldr	r3, [pc, #600]	@ (800a6f4 <Device_Init+0x2e0>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800a49e:	4a9a      	ldr	r2, [pc, #616]	@ (800a708 <Device_Init+0x2f4>)
 800a4a0:	4b97      	ldr	r3, [pc, #604]	@ (800a700 <Device_Init+0x2ec>)
 800a4a2:	0019      	movs	r1, r3
 800a4a4:	2003      	movs	r0, #3
 800a4a6:	f006 f949 	bl	801073c <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800a4aa:	f7fe fa55 	bl	8008958 <BMP280_DeviceConnected>
 800a4ae:	0003      	movs	r3, r0
 800a4b0:	001a      	movs	r2, r3
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4053      	eors	r3, r2
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00c      	beq.n	800a4d6 <Device_Init+0xc2>
     Error("Air pressure / Temperature sensor NOT connected!");
 800a4bc:	4a93      	ldr	r2, [pc, #588]	@ (800a70c <Device_Init+0x2f8>)
 800a4be:	4b8c      	ldr	r3, [pc, #560]	@ (800a6f0 <Device_Init+0x2dc>)
 800a4c0:	0019      	movs	r1, r3
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	f006 f93a 	bl	801073c <CreateLine>
     SensorProbe.BMP280_Present = false;
 800a4c8:	4b8a      	ldr	r3, [pc, #552]	@ (800a6f4 <Device_Init+0x2e0>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	70da      	strb	r2, [r3, #3]
     Sensor.BMP280_measurementEnabled = false;
 800a4ce:	4b8a      	ldr	r3, [pc, #552]	@ (800a6f8 <Device_Init+0x2e4>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	715a      	strb	r2, [r3, #5]
 800a4d4:	e008      	b.n	800a4e8 <Device_Init+0xd4>
  }else {
    SensorProbe.BMP280_Present = true;
 800a4d6:	4b87      	ldr	r3, [pc, #540]	@ (800a6f4 <Device_Init+0x2e0>)
 800a4d8:	2201      	movs	r2, #1
 800a4da:	70da      	strb	r2, [r3, #3]
    Debug("Air pressure / Temperature sensor initialised.");
 800a4dc:	4a8c      	ldr	r2, [pc, #560]	@ (800a710 <Device_Init+0x2fc>)
 800a4de:	4b88      	ldr	r3, [pc, #544]	@ (800a700 <Device_Init+0x2ec>)
 800a4e0:	0019      	movs	r1, r3
 800a4e2:	2003      	movs	r0, #3
 800a4e4:	f006 f92a 	bl	801073c <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800a4e8:	f003 fbd0 	bl	800dc8c <SGP_DeviceConnected>
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	001a      	movs	r2, r3
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	4053      	eors	r3, r2
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <Device_Init+0x100>
    SensorProbe.VOC_Present = false;
 800a4fa:	4b7e      	ldr	r3, [pc, #504]	@ (800a6f4 <Device_Init+0x2e0>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800a500:	4a84      	ldr	r2, [pc, #528]	@ (800a714 <Device_Init+0x300>)
 800a502:	4b7b      	ldr	r3, [pc, #492]	@ (800a6f0 <Device_Init+0x2dc>)
 800a504:	0019      	movs	r1, r3
 800a506:	2001      	movs	r0, #1
 800a508:	f006 f918 	bl	801073c <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800a50c:	4b7a      	ldr	r3, [pc, #488]	@ (800a6f8 <Device_Init+0x2e4>)
 800a50e:	2200      	movs	r2, #0
 800a510:	705a      	strb	r2, [r3, #1]
 800a512:	e00b      	b.n	800a52c <Device_Init+0x118>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800a514:	4b77      	ldr	r3, [pc, #476]	@ (800a6f4 <Device_Init+0x2e0>)
 800a516:	2201      	movs	r2, #1
 800a518:	71da      	strb	r2, [r3, #7]
    SensorProbe.VOC_Present = true;
 800a51a:	4b76      	ldr	r3, [pc, #472]	@ (800a6f4 <Device_Init+0x2e0>)
 800a51c:	2201      	movs	r2, #1
 800a51e:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800a520:	4a7d      	ldr	r2, [pc, #500]	@ (800a718 <Device_Init+0x304>)
 800a522:	4b77      	ldr	r3, [pc, #476]	@ (800a700 <Device_Init+0x2ec>)
 800a524:	0019      	movs	r1, r3
 800a526:	2003      	movs	r0, #3
 800a528:	f006 f908 	bl	801073c <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800a52c:	4b71      	ldr	r3, [pc, #452]	@ (800a6f4 <Device_Init+0x2e0>)
 800a52e:	785b      	ldrb	r3, [r3, #1]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d009      	beq.n	800a548 <Device_Init+0x134>
 800a534:	4b6f      	ldr	r3, [pc, #444]	@ (800a6f4 <Device_Init+0x2e0>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d005      	beq.n	800a548 <Device_Init+0x134>
    SetDBLED(false, true, false);
 800a53c:	2200      	movs	r2, #0
 800a53e:	2101      	movs	r1, #1
 800a540:	2000      	movs	r0, #0
 800a542:	f004 fec7 	bl	800f2d4 <SetDBLED>
 800a546:	e018      	b.n	800a57a <Device_Init+0x166>
  }
  else{
    SetDBLED(true, false, false);
 800a548:	2200      	movs	r2, #0
 800a54a:	2100      	movs	r1, #0
 800a54c:	2001      	movs	r0, #1
 800a54e:	f004 fec1 	bl	800f2d4 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800a552:	4b72      	ldr	r3, [pc, #456]	@ (800a71c <Device_Init+0x308>)
 800a554:	2200      	movs	r2, #0
 800a556:	2101      	movs	r1, #1
 800a558:	0018      	movs	r0, r3
 800a55a:	f007 ffcc 	bl	80124f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800a55e:	2380      	movs	r3, #128	@ 0x80
 800a560:	005b      	lsls	r3, r3, #1
 800a562:	486e      	ldr	r0, [pc, #440]	@ (800a71c <Device_Init+0x308>)
 800a564:	2201      	movs	r2, #1
 800a566:	0019      	movs	r1, r3
 800a568:	f007 ffc5 	bl	80124f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800a56c:	2380      	movs	r3, #128	@ 0x80
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	486a      	ldr	r0, [pc, #424]	@ (800a71c <Device_Init+0x308>)
 800a572:	2201      	movs	r2, #1
 800a574:	0019      	movs	r1, r3
 800a576:	f007 ffbe 	bl	80124f6 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800a57a:	4b5f      	ldr	r3, [pc, #380]	@ (800a6f8 <Device_Init+0x2e4>)
 800a57c:	78db      	ldrb	r3, [r3, #3]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d028      	beq.n	800a5d4 <Device_Init+0x1c0>
    Info("Device_Init calls enableMicrophone");
 800a582:	4a67      	ldr	r2, [pc, #412]	@ (800a720 <Device_Init+0x30c>)
 800a584:	4b67      	ldr	r3, [pc, #412]	@ (800a724 <Device_Init+0x310>)
 800a586:	0019      	movs	r1, r3
 800a588:	2002      	movs	r0, #2
 800a58a:	f006 f8d7 	bl	801073c <CreateLine>
    if (!enableMicrophone(true)) {
 800a58e:	2001      	movs	r0, #1
 800a590:	f003 ff9e 	bl	800e4d0 <enableMicrophone>
 800a594:	0003      	movs	r3, r0
 800a596:	001a      	movs	r2, r3
 800a598:	2301      	movs	r3, #1
 800a59a:	4053      	eors	r3, r2
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00c      	beq.n	800a5bc <Device_Init+0x1a8>
      Error("Microphone device not connected! DMA Error.");
 800a5a2:	4a61      	ldr	r2, [pc, #388]	@ (800a728 <Device_Init+0x314>)
 800a5a4:	4b52      	ldr	r3, [pc, #328]	@ (800a6f0 <Device_Init+0x2dc>)
 800a5a6:	0019      	movs	r1, r3
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	f006 f8c7 	bl	801073c <CreateLine>
      SensorProbe.MIC_Present = false;
 800a5ae:	4b51      	ldr	r3, [pc, #324]	@ (800a6f4 <Device_Init+0x2e0>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = false;
 800a5b4:	4b50      	ldr	r3, [pc, #320]	@ (800a6f8 <Device_Init+0x2e4>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	70da      	strb	r2, [r3, #3]
 800a5ba:	e00b      	b.n	800a5d4 <Device_Init+0x1c0>
    }
    else{
      SensorProbe.MIC_Present = true;
 800a5bc:	4b4d      	ldr	r3, [pc, #308]	@ (800a6f4 <Device_Init+0x2e0>)
 800a5be:	2201      	movs	r2, #1
 800a5c0:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = true;
 800a5c2:	4b4d      	ldr	r3, [pc, #308]	@ (800a6f8 <Device_Init+0x2e4>)
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800a5c8:	4a58      	ldr	r2, [pc, #352]	@ (800a72c <Device_Init+0x318>)
 800a5ca:	4b4d      	ldr	r3, [pc, #308]	@ (800a700 <Device_Init+0x2ec>)
 800a5cc:	0019      	movs	r1, r3
 800a5ce:	2003      	movs	r0, #3
 800a5d0:	f006 f8b4 	bl	801073c <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800a5d4:	f000 fed2 	bl	800b37c <probe_sen5x>
 800a5d8:	1e03      	subs	r3, r0, #0
 800a5da:	d122      	bne.n	800a622 <Device_Init+0x20e>
    Debug("PM sensor initialised.");
 800a5dc:	4a54      	ldr	r2, [pc, #336]	@ (800a730 <Device_Init+0x31c>)
 800a5de:	4b48      	ldr	r3, [pc, #288]	@ (800a700 <Device_Init+0x2ec>)
 800a5e0:	0019      	movs	r1, r3
 800a5e2:	2003      	movs	r0, #3
 800a5e4:	f006 f8aa 	bl	801073c <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800a5e8:	4b42      	ldr	r3, [pc, #264]	@ (800a6f4 <Device_Init+0x2e0>)
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	711a      	strb	r2, [r3, #4]
    Sensor.PM_measurementEnabled = true;
 800a5ee:	4b42      	ldr	r3, [pc, #264]	@ (800a6f8 <Device_Init+0x2e4>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800a5f4:	4b4f      	ldr	r3, [pc, #316]	@ (800a734 <Device_Init+0x320>)
 800a5f6:	791b      	ldrb	r3, [r3, #4]
 800a5f8:	2b34      	cmp	r3, #52	@ 0x34
 800a5fa:	d003      	beq.n	800a604 <Device_Init+0x1f0>
 800a5fc:	4b4d      	ldr	r3, [pc, #308]	@ (800a734 <Device_Init+0x320>)
 800a5fe:	791b      	ldrb	r3, [r3, #4]
 800a600:	2b35      	cmp	r3, #53	@ 0x35
 800a602:	d11c      	bne.n	800a63e <Device_Init+0x22a>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800a604:	4a4c      	ldr	r2, [pc, #304]	@ (800a738 <Device_Init+0x324>)
 800a606:	4b47      	ldr	r3, [pc, #284]	@ (800a724 <Device_Init+0x310>)
 800a608:	0019      	movs	r1, r3
 800a60a:	2002      	movs	r0, #2
 800a60c:	f006 f896 	bl	801073c <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800a610:	4b39      	ldr	r3, [pc, #228]	@ (800a6f8 <Device_Init+0x2e4>)
 800a612:	2200      	movs	r2, #0
 800a614:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800a616:	4b37      	ldr	r3, [pc, #220]	@ (800a6f4 <Device_Init+0x2e0>)
 800a618:	2200      	movs	r2, #0
 800a61a:	71da      	strb	r2, [r3, #7]
      SGP_SoftReset();
 800a61c:	f003 fd1a 	bl	800e054 <SGP_SoftReset>
 800a620:	e00d      	b.n	800a63e <Device_Init+0x22a>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800a622:	f000 fe75 	bl	800b310 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800a626:	4a45      	ldr	r2, [pc, #276]	@ (800a73c <Device_Init+0x328>)
 800a628:	4b35      	ldr	r3, [pc, #212]	@ (800a700 <Device_Init+0x2ec>)
 800a62a:	0019      	movs	r1, r3
 800a62c:	2003      	movs	r0, #3
 800a62e:	f006 f885 	bl	801073c <CreateLine>
    SensorProbe.PM_Present = false;
 800a632:	4b30      	ldr	r3, [pc, #192]	@ (800a6f4 <Device_Init+0x2e0>)
 800a634:	2200      	movs	r2, #0
 800a636:	711a      	strb	r2, [r3, #4]
    Sensor.PM_measurementEnabled = false;
 800a638:	4b2f      	ldr	r3, [pc, #188]	@ (800a6f8 <Device_Init+0x2e4>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800a63e:	4b2d      	ldr	r3, [pc, #180]	@ (800a6f4 <Device_Init+0x2e0>)
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <Device_Init+0x236>
 800a646:	4b3e      	ldr	r3, [pc, #248]	@ (800a740 <Device_Init+0x32c>)
 800a648:	e000      	b.n	800a64c <Device_Init+0x238>
 800a64a:	4b3e      	ldr	r3, [pc, #248]	@ (800a744 <Device_Init+0x330>)
 800a64c:	4a3e      	ldr	r2, [pc, #248]	@ (800a748 <Device_Init+0x334>)
 800a64e:	4935      	ldr	r1, [pc, #212]	@ (800a724 <Device_Init+0x310>)
 800a650:	2002      	movs	r0, #2
 800a652:	f006 f873 	bl	801073c <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800a656:	4b27      	ldr	r3, [pc, #156]	@ (800a6f4 <Device_Init+0x2e0>)
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <Device_Init+0x24e>
 800a65e:	4b38      	ldr	r3, [pc, #224]	@ (800a740 <Device_Init+0x32c>)
 800a660:	e000      	b.n	800a664 <Device_Init+0x250>
 800a662:	4b38      	ldr	r3, [pc, #224]	@ (800a744 <Device_Init+0x330>)
 800a664:	4a39      	ldr	r2, [pc, #228]	@ (800a74c <Device_Init+0x338>)
 800a666:	492f      	ldr	r1, [pc, #188]	@ (800a724 <Device_Init+0x310>)
 800a668:	2002      	movs	r0, #2
 800a66a:	f006 f867 	bl	801073c <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800a66e:	4b21      	ldr	r3, [pc, #132]	@ (800a6f4 <Device_Init+0x2e0>)
 800a670:	789b      	ldrb	r3, [r3, #2]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <Device_Init+0x266>
 800a676:	4b32      	ldr	r3, [pc, #200]	@ (800a740 <Device_Init+0x32c>)
 800a678:	e000      	b.n	800a67c <Device_Init+0x268>
 800a67a:	4b32      	ldr	r3, [pc, #200]	@ (800a744 <Device_Init+0x330>)
 800a67c:	4a34      	ldr	r2, [pc, #208]	@ (800a750 <Device_Init+0x33c>)
 800a67e:	4929      	ldr	r1, [pc, #164]	@ (800a724 <Device_Init+0x310>)
 800a680:	2002      	movs	r0, #2
 800a682:	f006 f85b 	bl	801073c <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800a686:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f4 <Device_Init+0x2e0>)
 800a688:	78db      	ldrb	r3, [r3, #3]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <Device_Init+0x27e>
 800a68e:	4b2c      	ldr	r3, [pc, #176]	@ (800a740 <Device_Init+0x32c>)
 800a690:	e000      	b.n	800a694 <Device_Init+0x280>
 800a692:	4b2c      	ldr	r3, [pc, #176]	@ (800a744 <Device_Init+0x330>)
 800a694:	4a2f      	ldr	r2, [pc, #188]	@ (800a754 <Device_Init+0x340>)
 800a696:	4923      	ldr	r1, [pc, #140]	@ (800a724 <Device_Init+0x310>)
 800a698:	2002      	movs	r0, #2
 800a69a:	f006 f84f 	bl	801073c <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800a69e:	4b15      	ldr	r3, [pc, #84]	@ (800a6f4 <Device_Init+0x2e0>)
 800a6a0:	791b      	ldrb	r3, [r3, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <Device_Init+0x296>
 800a6a6:	4b26      	ldr	r3, [pc, #152]	@ (800a740 <Device_Init+0x32c>)
 800a6a8:	e000      	b.n	800a6ac <Device_Init+0x298>
 800a6aa:	4b26      	ldr	r3, [pc, #152]	@ (800a744 <Device_Init+0x330>)
 800a6ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a758 <Device_Init+0x344>)
 800a6ae:	491d      	ldr	r1, [pc, #116]	@ (800a724 <Device_Init+0x310>)
 800a6b0:	2002      	movs	r0, #2
 800a6b2:	f006 f843 	bl	801073c <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800a6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a6f4 <Device_Init+0x2e0>)
 800a6b8:	795b      	ldrb	r3, [r3, #5]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <Device_Init+0x2ae>
 800a6be:	4b20      	ldr	r3, [pc, #128]	@ (800a740 <Device_Init+0x32c>)
 800a6c0:	e000      	b.n	800a6c4 <Device_Init+0x2b0>
 800a6c2:	4b20      	ldr	r3, [pc, #128]	@ (800a744 <Device_Init+0x330>)
 800a6c4:	4a25      	ldr	r2, [pc, #148]	@ (800a75c <Device_Init+0x348>)
 800a6c6:	4917      	ldr	r1, [pc, #92]	@ (800a724 <Device_Init+0x310>)
 800a6c8:	2002      	movs	r0, #2
 800a6ca:	f006 f837 	bl	801073c <CreateLine>
  ESP_Init(espUart);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f7f9 f98f 	bl	80039f4 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800a6d6:	4a22      	ldr	r2, [pc, #136]	@ (800a760 <Device_Init+0x34c>)
 800a6d8:	4b09      	ldr	r3, [pc, #36]	@ (800a700 <Device_Init+0x2ec>)
 800a6da:	0019      	movs	r1, r3
 800a6dc:	2003      	movs	r0, #3
 800a6de:	f006 f82d 	bl	801073c <CreateLine>
}
 800a6e2:	46c0      	nop			@ (mov r8, r8)
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	b004      	add	sp, #16
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	46c0      	nop			@ (mov r8, r8)
 800a6ec:	08027744 	.word	0x08027744
 800a6f0:	08027774 	.word	0x08027774
 800a6f4:	20000db0 	.word	0x20000db0
 800a6f8:	20000da8 	.word	0x20000da8
 800a6fc:	08027778 	.word	0x08027778
 800a700:	08027740 	.word	0x08027740
 800a704:	080277a4 	.word	0x080277a4
 800a708:	080277d8 	.word	0x080277d8
 800a70c:	0802780c 	.word	0x0802780c
 800a710:	08027840 	.word	0x08027840
 800a714:	08027870 	.word	0x08027870
 800a718:	0802788c 	.word	0x0802788c
 800a71c:	50000400 	.word	0x50000400
 800a720:	080278a4 	.word	0x080278a4
 800a724:	080278c8 	.word	0x080278c8
 800a728:	080278cc 	.word	0x080278cc
 800a72c:	080278f8 	.word	0x080278f8
 800a730:	08027924 	.word	0x08027924
 800a734:	20000e4c 	.word	0x20000e4c
 800a738:	0802793c 	.word	0x0802793c
 800a73c:	0802798c 	.word	0x0802798c
 800a740:	080279b0 	.word	0x080279b0
 800a744:	080279b4 	.word	0x080279b4
 800a748:	080279b8 	.word	0x080279b8
 800a74c:	080279d4 	.word	0x080279d4
 800a750:	080279f0 	.word	0x080279f0
 800a754:	08027a10 	.word	0x08027a10
 800a758:	08027a30 	.word	0x08027a30
 800a75c:	08027a4c 	.word	0x08027a4c
 800a760:	08027a68 	.word	0x08027a68

0800a764 <Device_Test>:

void Device_Test(){
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800a768:	4b34      	ldr	r3, [pc, #208]	@ (800a83c <Device_Test+0xd8>)
 800a76a:	795b      	ldrb	r3, [r3, #5]
 800a76c:	2201      	movs	r2, #1
 800a76e:	4053      	eors	r3, r2
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d027      	beq.n	800a7c6 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800a776:	f000 fb31 	bl	800addc <MIC_TestMeasurementDone>
 800a77a:	1e03      	subs	r3, r0, #0
 800a77c:	d011      	beq.n	800a7a2 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800a77e:	4b2f      	ldr	r3, [pc, #188]	@ (800a83c <Device_Test+0xd8>)
 800a780:	2201      	movs	r2, #1
 800a782:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = true;
 800a784:	4b2e      	ldr	r3, [pc, #184]	@ (800a840 <Device_Test+0xdc>)
 800a786:	2201      	movs	r2, #1
 800a788:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800a78a:	f004 fd27 	bl	800f1dc <Calculate_LED_ON>
 800a78e:	0003      	movs	r3, r0
 800a790:	0019      	movs	r1, r3
 800a792:	23fa      	movs	r3, #250	@ 0xfa
 800a794:	011a      	lsls	r2, r3, #4
 800a796:	23fa      	movs	r3, #250	@ 0xfa
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	0018      	movs	r0, r3
 800a79c:	f004 fd66 	bl	800f26c <SetStatusLED>
 800a7a0:	e011      	b.n	800a7c6 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800a7a2:	f003 fe71 	bl	800e488 <micSettlingComplete>
 800a7a6:	1e03      	subs	r3, r0, #0
 800a7a8:	d00d      	beq.n	800a7c6 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800a7aa:	4b25      	ldr	r3, [pc, #148]	@ (800a840 <Device_Test+0xdc>)
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800a7b0:	f004 fd14 	bl	800f1dc <Calculate_LED_ON>
 800a7b4:	0003      	movs	r3, r0
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	23fa      	movs	r3, #250	@ 0xfa
 800a7ba:	011a      	lsls	r2, r3, #4
 800a7bc:	23fa      	movs	r3, #250	@ 0xfa
 800a7be:	011b      	lsls	r3, r3, #4
 800a7c0:	0019      	movs	r1, r3
 800a7c2:	f004 fd53 	bl	800f26c <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800a7c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a83c <Device_Test+0xd8>)
 800a7c8:	799b      	ldrb	r3, [r3, #6]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	4053      	eors	r3, r2
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800a7d4:	f7fa fec6 	bl	8005564 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800a7d8:	4b18      	ldr	r3, [pc, #96]	@ (800a83c <Device_Test+0xd8>)
 800a7da:	799b      	ldrb	r3, [r3, #6]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d003      	beq.n	800a7e8 <Device_Test+0x84>
 800a7e0:	4b16      	ldr	r3, [pc, #88]	@ (800a83c <Device_Test+0xd8>)
 800a7e2:	795b      	ldrb	r3, [r3, #5]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <Device_Test+0x92>
 800a7e8:	4b16      	ldr	r3, [pc, #88]	@ (800a844 <Device_Test+0xe0>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	f005 ff4f 	bl	8010690 <TimestampIsReached>
 800a7f2:	1e03      	subs	r3, r0, #0
 800a7f4:	d01f      	beq.n	800a836 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800a7f6:	4b11      	ldr	r3, [pc, #68]	@ (800a83c <Device_Test+0xd8>)
 800a7f8:	799b      	ldrb	r3, [r3, #6]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <Device_Test+0x9e>
 800a7fe:	4b12      	ldr	r3, [pc, #72]	@ (800a848 <Device_Test+0xe4>)
 800a800:	e000      	b.n	800a804 <Device_Test+0xa0>
 800a802:	4b12      	ldr	r3, [pc, #72]	@ (800a84c <Device_Test+0xe8>)
 800a804:	4a12      	ldr	r2, [pc, #72]	@ (800a850 <Device_Test+0xec>)
 800a806:	4913      	ldr	r1, [pc, #76]	@ (800a854 <Device_Test+0xf0>)
 800a808:	2002      	movs	r0, #2
 800a80a:	f005 ff97 	bl	801073c <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800a80e:	4b0b      	ldr	r3, [pc, #44]	@ (800a83c <Device_Test+0xd8>)
 800a810:	795b      	ldrb	r3, [r3, #5]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <Device_Test+0xb6>
 800a816:	4b0c      	ldr	r3, [pc, #48]	@ (800a848 <Device_Test+0xe4>)
 800a818:	e000      	b.n	800a81c <Device_Test+0xb8>
 800a81a:	4b0c      	ldr	r3, [pc, #48]	@ (800a84c <Device_Test+0xe8>)
 800a81c:	4a0e      	ldr	r2, [pc, #56]	@ (800a858 <Device_Test+0xf4>)
 800a81e:	490d      	ldr	r1, [pc, #52]	@ (800a854 <Device_Test+0xf0>)
 800a820:	2002      	movs	r0, #2
 800a822:	f005 ff8b 	bl	801073c <CreateLine>
    Info("Test completed");
 800a826:	4a0d      	ldr	r2, [pc, #52]	@ (800a85c <Device_Test+0xf8>)
 800a828:	4b0a      	ldr	r3, [pc, #40]	@ (800a854 <Device_Test+0xf0>)
 800a82a:	0019      	movs	r1, r3
 800a82c:	2002      	movs	r0, #2
 800a82e:	f005 ff85 	bl	801073c <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800a832:	f7ff f96b 	bl	8009b0c <SetTestDone>
  }
}
 800a836:	46c0      	nop			@ (mov r8, r8)
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000db0 	.word	0x20000db0
 800a840:	20000da8 	.word	0x20000da8
 800a844:	20000da0 	.word	0x20000da0
 800a848:	08027a8c 	.word	0x08027a8c
 800a84c:	08027a94 	.word	0x08027a94
 800a850:	08027a9c 	.word	0x08027a9c
 800a854:	080278c8 	.word	0x080278c8
 800a858:	08027ab0 	.word	0x08027ab0
 800a85c:	08027ac4 	.word	0x08027ac4

0800a860 <AllDevicesReady>:

bool AllDevicesReady() {
 800a860:	b580      	push	{r7, lr}
 800a862:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800a864:	4b31      	ldr	r3, [pc, #196]	@ (800a92c <AllDevicesReady+0xcc>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	0018      	movs	r0, r3
 800a86a:	f005 ff11 	bl	8010690 <TimestampIsReached>
 800a86e:	1e03      	subs	r3, r0, #0
 800a870:	d058      	beq.n	800a924 <AllDevicesReady+0xc4>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800a872:	4b2f      	ldr	r3, [pc, #188]	@ (800a930 <AllDevicesReady+0xd0>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	2b06      	cmp	r3, #6
 800a878:	d102      	bne.n	800a880 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800a87a:	4b2e      	ldr	r3, [pc, #184]	@ (800a934 <AllDevicesReady+0xd4>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	701a      	strb	r2, [r3, #0]
    }
    if (AHTstate == AHT_STATE_WAIT) {
 800a880:	4b2d      	ldr	r3, [pc, #180]	@ (800a938 <AllDevicesReady+0xd8>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b09      	cmp	r3, #9
 800a886:	d102      	bne.n	800a88e <AllDevicesReady+0x2e>
      Sensor.AHT20_measurementEnabled = false;
 800a888:	4b2a      	ldr	r3, [pc, #168]	@ (800a934 <AllDevicesReady+0xd4>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	711a      	strb	r2, [r3, #4]
    }
    if (BMPstate == BMP_STATE_WAIT) {
 800a88e:	4b2b      	ldr	r3, [pc, #172]	@ (800a93c <AllDevicesReady+0xdc>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2b08      	cmp	r3, #8
 800a894:	d102      	bne.n	800a89c <AllDevicesReady+0x3c>
      Sensor.BMP280_measurementEnabled = false;
 800a896:	4b27      	ldr	r3, [pc, #156]	@ (800a934 <AllDevicesReady+0xd4>)
 800a898:	2200      	movs	r2, #0
 800a89a:	715a      	strb	r2, [r3, #5]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800a89c:	4b28      	ldr	r3, [pc, #160]	@ (800a940 <AllDevicesReady+0xe0>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b07      	cmp	r3, #7
 800a8a2:	d006      	beq.n	800a8b2 <AllDevicesReady+0x52>
 800a8a4:	4b27      	ldr	r3, [pc, #156]	@ (800a944 <AllDevicesReady+0xe4>)
 800a8a6:	79db      	ldrb	r3, [r3, #7]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	4053      	eors	r3, r2
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <AllDevicesReady+0x58>
      Sensor.VOC_measurementEnabled = false;
 800a8b2:	4b20      	ldr	r3, [pc, #128]	@ (800a934 <AllDevicesReady+0xd4>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800a8b8:	4b23      	ldr	r3, [pc, #140]	@ (800a948 <AllDevicesReady+0xe8>)
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d102      	bne.n	800a8c6 <AllDevicesReady+0x66>
      Sensor.PM_measurementEnabled = false;
 800a8c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a934 <AllDevicesReady+0xd4>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800a8c6:	4b21      	ldr	r3, [pc, #132]	@ (800a94c <AllDevicesReady+0xec>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	d102      	bne.n	800a8d4 <AllDevicesReady+0x74>
      Sensor.MIC_measurementEnabled = false;
 800a8ce:	4b19      	ldr	r3, [pc, #100]	@ (800a934 <AllDevicesReady+0xd4>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 800a8d4:	4b1e      	ldr	r3, [pc, #120]	@ (800a950 <AllDevicesReady+0xf0>)
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b09      	cmp	r3, #9
 800a8da:	d123      	bne.n	800a924 <AllDevicesReady+0xc4>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a8dc:	4b15      	ldr	r3, [pc, #84]	@ (800a934 <AllDevicesReady+0xd4>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	4053      	eors	r3, r2
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d016      	beq.n	800a918 <AllDevicesReady+0xb8>
 800a8ea:	4b12      	ldr	r3, [pc, #72]	@ (800a934 <AllDevicesReady+0xd4>)
 800a8ec:	785b      	ldrb	r3, [r3, #1]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	4053      	eors	r3, r2
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00f      	beq.n	800a918 <AllDevicesReady+0xb8>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800a8f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a934 <AllDevicesReady+0xd4>)
 800a8fa:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	4053      	eors	r3, r2
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d008      	beq.n	800a918 <AllDevicesReady+0xb8>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800a906:	4b0b      	ldr	r3, [pc, #44]	@ (800a934 <AllDevicesReady+0xd4>)
 800a908:	78db      	ldrb	r3, [r3, #3]
 800a90a:	2201      	movs	r2, #1
 800a90c:	4053      	eors	r3, r2
 800a90e:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <AllDevicesReady+0xb8>
 800a914:	2301      	movs	r3, #1
 800a916:	e000      	b.n	800a91a <AllDevicesReady+0xba>
 800a918:	2300      	movs	r3, #0
 800a91a:	1c1a      	adds	r2, r3, #0
 800a91c:	2301      	movs	r3, #1
 800a91e:	4013      	ands	r3, r2
 800a920:	b2db      	uxtb	r3, r3
 800a922:	e000      	b.n	800a926 <AllDevicesReady+0xc6>
    }
  }
  return false;
 800a924:	2300      	movs	r3, #0
}
 800a926:	0018      	movs	r0, r3
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	20000da0 	.word	0x20000da0
 800a930:	20000dba 	.word	0x20000dba
 800a934:	20000da8 	.word	0x20000da8
 800a938:	20000dbb 	.word	0x20000dbb
 800a93c:	20000dbc 	.word	0x20000dbc
 800a940:	20000db9 	.word	0x20000db9
 800a944:	20000db0 	.word	0x20000db0
 800a948:	20000099 	.word	0x20000099
 800a94c:	20000d8c 	.word	0x20000d8c
 800a950:	20000d8d 	.word	0x20000d8d

0800a954 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800a958:	4b18      	ldr	r3, [pc, #96]	@ (800a9bc <EnabledConnectedDevices+0x68>)
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800a960:	4b17      	ldr	r3, [pc, #92]	@ (800a9c0 <EnabledConnectedDevices+0x6c>)
 800a962:	2201      	movs	r2, #1
 800a964:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800a966:	4b15      	ldr	r3, [pc, #84]	@ (800a9bc <EnabledConnectedDevices+0x68>)
 800a968:	789b      	ldrb	r3, [r3, #2]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <EnabledConnectedDevices+0x20>
    Sensor.AHT20_measurementEnabled = true;
 800a96e:	4b14      	ldr	r3, [pc, #80]	@ (800a9c0 <EnabledConnectedDevices+0x6c>)
 800a970:	2201      	movs	r2, #1
 800a972:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800a974:	4b11      	ldr	r3, [pc, #68]	@ (800a9bc <EnabledConnectedDevices+0x68>)
 800a976:	78db      	ldrb	r3, [r3, #3]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <EnabledConnectedDevices+0x2e>
    Sensor.BMP280_measurementEnabled = true;
 800a97c:	4b10      	ldr	r3, [pc, #64]	@ (800a9c0 <EnabledConnectedDevices+0x6c>)
 800a97e:	2201      	movs	r2, #1
 800a980:	715a      	strb	r2, [r3, #5]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800a982:	4b0e      	ldr	r3, [pc, #56]	@ (800a9bc <EnabledConnectedDevices+0x68>)
 800a984:	785b      	ldrb	r3, [r3, #1]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d006      	beq.n	800a998 <EnabledConnectedDevices+0x44>
 800a98a:	4b0c      	ldr	r3, [pc, #48]	@ (800a9bc <EnabledConnectedDevices+0x68>)
 800a98c:	79db      	ldrb	r3, [r3, #7]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <EnabledConnectedDevices+0x44>
    Sensor.VOC_measurementEnabled = true;
 800a992:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c0 <EnabledConnectedDevices+0x6c>)
 800a994:	2201      	movs	r2, #1
 800a996:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800a998:	4b08      	ldr	r3, [pc, #32]	@ (800a9bc <EnabledConnectedDevices+0x68>)
 800a99a:	791b      	ldrb	r3, [r3, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <EnabledConnectedDevices+0x52>
    Sensor.PM_measurementEnabled = true;
 800a9a0:	4b07      	ldr	r3, [pc, #28]	@ (800a9c0 <EnabledConnectedDevices+0x6c>)
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800a9a6:	4b05      	ldr	r3, [pc, #20]	@ (800a9bc <EnabledConnectedDevices+0x68>)
 800a9a8:	795b      	ldrb	r3, [r3, #5]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <EnabledConnectedDevices+0x60>
    Sensor.MIC_measurementEnabled = true;
 800a9ae:	4b04      	ldr	r3, [pc, #16]	@ (800a9c0 <EnabledConnectedDevices+0x6c>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	70da      	strb	r2, [r3, #3]
  }
}
 800a9b4:	46c0      	nop			@ (mov r8, r8)
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	46c0      	nop			@ (mov r8, r8)
 800a9bc:	20000db0 	.word	0x20000db0
 800a9c0:	20000da8 	.word	0x20000da8

0800a9c4 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 800a9c8:	4a0d      	ldr	r2, [pc, #52]	@ (800aa00 <DisableConnectedDevices+0x3c>)
 800a9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800aa04 <DisableConnectedDevices+0x40>)
 800a9cc:	0019      	movs	r1, r3
 800a9ce:	2003      	movs	r0, #3
 800a9d0:	f005 feb4 	bl	801073c <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800a9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800aa08 <DisableConnectedDevices+0x44>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800a9da:	4b0b      	ldr	r3, [pc, #44]	@ (800aa08 <DisableConnectedDevices+0x44>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	705a      	strb	r2, [r3, #1]
  Sensor.AHT20_measurementEnabled = false;
 800a9e0:	4b09      	ldr	r3, [pc, #36]	@ (800aa08 <DisableConnectedDevices+0x44>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	711a      	strb	r2, [r3, #4]
  Sensor.BMP280_measurementEnabled = false;
 800a9e6:	4b08      	ldr	r3, [pc, #32]	@ (800aa08 <DisableConnectedDevices+0x44>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	715a      	strb	r2, [r3, #5]
  Sensor.PM_measurementEnabled = false;
 800a9ec:	4b06      	ldr	r3, [pc, #24]	@ (800aa08 <DisableConnectedDevices+0x44>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800a9f2:	4b05      	ldr	r3, [pc, #20]	@ (800aa08 <DisableConnectedDevices+0x44>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	70da      	strb	r2, [r3, #3]
}
 800a9f8:	46c0      	nop			@ (mov r8, r8)
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	46c0      	nop			@ (mov r8, r8)
 800aa00:	08027ad4 	.word	0x08027ad4
 800aa04:	08027740 	.word	0x08027740
 800aa08:	20000da8 	.word	0x20000da8

0800aa0c <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	0002      	movs	r2, r0
 800aa14:	1dfb      	adds	r3, r7, #7
 800aa16:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800aa18:	4b03      	ldr	r3, [pc, #12]	@ (800aa28 <setSensorLock+0x1c>)
 800aa1a:	1dfa      	adds	r2, r7, #7
 800aa1c:	7812      	ldrb	r2, [r2, #0]
 800aa1e:	701a      	strb	r2, [r3, #0]
}
 800aa20:	46c0      	nop			@ (mov r8, r8)
 800aa22:	46bd      	mov	sp, r7
 800aa24:	b002      	add	sp, #8
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20000db8 	.word	0x20000db8

0800aa2c <getSensorLock>:

uint8_t getSensorLock() {
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800aa30:	4b02      	ldr	r3, [pc, #8]	@ (800aa3c <getSensorLock+0x10>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
}
 800aa34:	0018      	movs	r0, r3
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	46c0      	nop			@ (mov r8, r8)
 800aa3c:	20000db8 	.word	0x20000db8

0800aa40 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800aa40:	b580      	push	{r7, lr}
 800aa42:	af00      	add	r7, sp, #0
  if (Sensor.HT_measurementEnabled) {
 800aa44:	4b15      	ldr	r3, [pc, #84]	@ (800aa9c <UpkeepI2Csensors+0x5c>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800aa4c:	f006 f99a 	bl	8010d84 <HIDS_Upkeep>
 800aa50:	0003      	movs	r3, r0
 800aa52:	001a      	movs	r2, r3
 800aa54:	4b12      	ldr	r3, [pc, #72]	@ (800aaa0 <UpkeepI2Csensors+0x60>)
 800aa56:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800aa58:	4b10      	ldr	r3, [pc, #64]	@ (800aa9c <UpkeepI2Csensors+0x5c>)
 800aa5a:	785b      	ldrb	r3, [r3, #1]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800aa60:	f003 fb1e 	bl	800e0a0 <SGP_Upkeep>
 800aa64:	0003      	movs	r3, r0
 800aa66:	001a      	movs	r2, r3
 800aa68:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa4 <UpkeepI2Csensors+0x64>)
 800aa6a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT20_measurementEnabled) {
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa9c <UpkeepI2Csensors+0x5c>)
 800aa6e:	791b      	ldrb	r3, [r3, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800aa74:	f7fd fbf0 	bl	8008258 <AHT_Upkeep>
 800aa78:	0003      	movs	r3, r0
 800aa7a:	001a      	movs	r2, r3
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa8 <UpkeepI2Csensors+0x68>)
 800aa7e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP280_measurementEnabled) {
 800aa80:	4b06      	ldr	r3, [pc, #24]	@ (800aa9c <UpkeepI2Csensors+0x5c>)
 800aa82:	795b      	ldrb	r3, [r3, #5]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800aa88:	f7fe f9a0 	bl	8008dcc <BMP_Upkeep>
 800aa8c:	0003      	movs	r3, r0
 800aa8e:	001a      	movs	r2, r3
 800aa90:	4b06      	ldr	r3, [pc, #24]	@ (800aaac <UpkeepI2Csensors+0x6c>)
 800aa92:	701a      	strb	r2, [r3, #0]
  }
}
 800aa94:	46c0      	nop			@ (mov r8, r8)
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	46c0      	nop			@ (mov r8, r8)
 800aa9c:	20000da8 	.word	0x20000da8
 800aaa0:	20000dba 	.word	0x20000dba
 800aaa4:	20000db9 	.word	0x20000db9
 800aaa8:	20000dbb 	.word	0x20000dbb
 800aaac:	20000dbc 	.word	0x20000dbc

0800aab0 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800aab4:	4b02      	ldr	r3, [pc, #8]	@ (800aac0 <ResetdBAmax+0x10>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	601a      	str	r2, [r3, #0]
}
 800aaba:	46c0      	nop			@ (mov r8, r8)
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000e04 	.word	0x20000e04

0800aac4 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800aacc:	f006 fa82 	bl	8010fd4 <HAL_GetTick>
 800aad0:	0002      	movs	r2, r0
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	18d2      	adds	r2, r2, r3
 800aad6:	4b03      	ldr	r3, [pc, #12]	@ (800aae4 <setMICTimeStamp+0x20>)
 800aad8:	601a      	str	r2, [r3, #0]
}
 800aada:	46c0      	nop			@ (mov r8, r8)
 800aadc:	46bd      	mov	sp, r7
 800aade:	b002      	add	sp, #8
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	46c0      	nop			@ (mov r8, r8)
 800aae4:	20000e0c 	.word	0x20000e0c

0800aae8 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
  counter = 0;
 800aaec:	4b05      	ldr	r3, [pc, #20]	@ (800ab04 <ResetDBACalculator+0x1c>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800aaf2:	4b05      	ldr	r3, [pc, #20]	@ (800ab08 <ResetDBACalculator+0x20>)
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800aaf8:	4b04      	ldr	r3, [pc, #16]	@ (800ab0c <ResetDBACalculator+0x24>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
}
 800aafe:	46c0      	nop			@ (mov r8, r8)
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20000e08 	.word	0x20000e08
 800ab08:	20000098 	.word	0x20000098
 800ab0c:	20000e09 	.word	0x20000e09

0800ab10 <MIC_Print>:

void MIC_Print(void) {
 800ab10:	b5b0      	push	{r4, r5, r7, lr}
 800ab12:	b08a      	sub	sp, #40	@ 0x28
 800ab14:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800ab16:	4b9f      	ldr	r3, [pc, #636]	@ (800ad94 <MIC_Print+0x284>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	4b9f      	ldr	r3, [pc, #636]	@ (800ad98 <MIC_Print+0x288>)
 800ab1c:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800ab1e:	4b9f      	ldr	r3, [pc, #636]	@ (800ad9c <MIC_Print+0x28c>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	001a      	movs	r2, r3
 800ab24:	4b9c      	ldr	r3, [pc, #624]	@ (800ad98 <MIC_Print+0x288>)
 800ab26:	6819      	ldr	r1, [r3, #0]
 800ab28:	4b9d      	ldr	r3, [pc, #628]	@ (800ada0 <MIC_Print+0x290>)
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	50d1      	str	r1, [r2, r3]
  counter++;
 800ab2e:	4b9b      	ldr	r3, [pc, #620]	@ (800ad9c <MIC_Print+0x28c>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	4b99      	ldr	r3, [pc, #612]	@ (800ad9c <MIC_Print+0x28c>)
 800ab38:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800ab3a:	4b98      	ldr	r3, [pc, #608]	@ (800ad9c <MIC_Print+0x28c>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d80b      	bhi.n	800ab5a <MIC_Print+0x4a>
 800ab42:	4b98      	ldr	r3, [pc, #608]	@ (800ada4 <MIC_Print+0x294>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2201      	movs	r2, #1
 800ab48:	4053      	eors	r3, r2
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d004      	beq.n	800ab5a <MIC_Print+0x4a>
    denominator = counter;
 800ab50:	4b92      	ldr	r3, [pc, #584]	@ (800ad9c <MIC_Print+0x28c>)
 800ab52:	781a      	ldrb	r2, [r3, #0]
 800ab54:	4b94      	ldr	r3, [pc, #592]	@ (800ada8 <MIC_Print+0x298>)
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	e005      	b.n	800ab66 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800ab5a:	4b93      	ldr	r3, [pc, #588]	@ (800ada8 <MIC_Print+0x298>)
 800ab5c:	220a      	movs	r2, #10
 800ab5e:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800ab60:	4b90      	ldr	r3, [pc, #576]	@ (800ada4 <MIC_Print+0x294>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800ab66:	4b91      	ldr	r3, [pc, #580]	@ (800adac <MIC_Print+0x29c>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800ab6c:	230f      	movs	r3, #15
 800ab6e:	18fb      	adds	r3, r7, r3
 800ab70:	2200      	movs	r2, #0
 800ab72:	701a      	strb	r2, [r3, #0]
 800ab74:	e042      	b.n	800abfc <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800ab76:	240f      	movs	r4, #15
 800ab78:	193b      	adds	r3, r7, r4
 800ab7a:	781a      	ldrb	r2, [r3, #0]
 800ab7c:	4b88      	ldr	r3, [pc, #544]	@ (800ada0 <MIC_Print+0x290>)
 800ab7e:	0092      	lsls	r2, r2, #2
 800ab80:	58d2      	ldr	r2, [r2, r3]
 800ab82:	4b8a      	ldr	r3, [pc, #552]	@ (800adac <MIC_Print+0x29c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	1c19      	adds	r1, r3, #0
 800ab88:	1c10      	adds	r0, r2, #0
 800ab8a:	f7f5 fe99 	bl	80008c0 <__aeabi_fadd>
 800ab8e:	1c03      	adds	r3, r0, #0
 800ab90:	1c1a      	adds	r2, r3, #0
 800ab92:	4b86      	ldr	r3, [pc, #536]	@ (800adac <MIC_Print+0x29c>)
 800ab94:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800ab96:	193b      	adds	r3, r7, r4
 800ab98:	781a      	ldrb	r2, [r3, #0]
 800ab9a:	4b81      	ldr	r3, [pc, #516]	@ (800ada0 <MIC_Print+0x290>)
 800ab9c:	0092      	lsls	r2, r2, #2
 800ab9e:	58d2      	ldr	r2, [r2, r3]
 800aba0:	4b83      	ldr	r3, [pc, #524]	@ (800adb0 <MIC_Print+0x2a0>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	1c19      	adds	r1, r3, #0
 800aba6:	1c10      	adds	r0, r2, #0
 800aba8:	f7f5 fcd6 	bl	8000558 <__aeabi_fcmpgt>
 800abac:	1e03      	subs	r3, r0, #0
 800abae:	d006      	beq.n	800abbe <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800abb0:	193b      	adds	r3, r7, r4
 800abb2:	781a      	ldrb	r2, [r3, #0]
 800abb4:	4b7a      	ldr	r3, [pc, #488]	@ (800ada0 <MIC_Print+0x290>)
 800abb6:	0092      	lsls	r2, r2, #2
 800abb8:	58d2      	ldr	r2, [r2, r3]
 800abba:	4b7d      	ldr	r3, [pc, #500]	@ (800adb0 <MIC_Print+0x2a0>)
 800abbc:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800abbe:	4b7b      	ldr	r3, [pc, #492]	@ (800adac <MIC_Print+0x29c>)
 800abc0:	681c      	ldr	r4, [r3, #0]
 800abc2:	4b79      	ldr	r3, [pc, #484]	@ (800ada8 <MIC_Print+0x298>)
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	0018      	movs	r0, r3
 800abc8:	f7f6 fd4e 	bl	8001668 <__aeabi_ui2f>
 800abcc:	1c03      	adds	r3, r0, #0
 800abce:	1c19      	adds	r1, r3, #0
 800abd0:	1c20      	adds	r0, r4, #0
 800abd2:	f7f5 ffff 	bl	8000bd4 <__aeabi_fdiv>
 800abd6:	1c03      	adds	r3, r0, #0
 800abd8:	1c1a      	adds	r2, r3, #0
 800abda:	4b76      	ldr	r3, [pc, #472]	@ (800adb4 <MIC_Print+0x2a4>)
 800abdc:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800abde:	4b6e      	ldr	r3, [pc, #440]	@ (800ad98 <MIC_Print+0x288>)
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	4b73      	ldr	r3, [pc, #460]	@ (800adb0 <MIC_Print+0x2a0>)
 800abe4:	6819      	ldr	r1, [r3, #0]
 800abe6:	4b73      	ldr	r3, [pc, #460]	@ (800adb4 <MIC_Print+0x2a4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	1c1a      	adds	r2, r3, #0
 800abec:	f7f8 fe22 	bl	8003834 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800abf0:	210f      	movs	r1, #15
 800abf2:	187b      	adds	r3, r7, r1
 800abf4:	781a      	ldrb	r2, [r3, #0]
 800abf6:	187b      	adds	r3, r7, r1
 800abf8:	3201      	adds	r2, #1
 800abfa:	701a      	strb	r2, [r3, #0]
 800abfc:	4b6a      	ldr	r3, [pc, #424]	@ (800ada8 <MIC_Print+0x298>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	220f      	movs	r2, #15
 800ac02:	18ba      	adds	r2, r7, r2
 800ac04:	7812      	ldrb	r2, [r2, #0]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d3b5      	bcc.n	800ab76 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800ac0a:	4b63      	ldr	r3, [pc, #396]	@ (800ad98 <MIC_Print+0x288>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	1c18      	adds	r0, r3, #0
 800ac10:	f7f8 fc28 	bl	8003464 <__aeabi_f2d>
 800ac14:	6038      	str	r0, [r7, #0]
 800ac16:	6079      	str	r1, [r7, #4]
 800ac18:	4b65      	ldr	r3, [pc, #404]	@ (800adb0 <MIC_Print+0x2a0>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	1c18      	adds	r0, r3, #0
 800ac1e:	f7f8 fc21 	bl	8003464 <__aeabi_f2d>
 800ac22:	0004      	movs	r4, r0
 800ac24:	000d      	movs	r5, r1
 800ac26:	4b63      	ldr	r3, [pc, #396]	@ (800adb4 <MIC_Print+0x2a4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	1c18      	adds	r0, r3, #0
 800ac2c:	f7f8 fc1a 	bl	8003464 <__aeabi_f2d>
 800ac30:	0002      	movs	r2, r0
 800ac32:	000b      	movs	r3, r1
 800ac34:	4960      	ldr	r1, [pc, #384]	@ (800adb8 <MIC_Print+0x2a8>)
 800ac36:	9204      	str	r2, [sp, #16]
 800ac38:	9305      	str	r3, [sp, #20]
 800ac3a:	9402      	str	r4, [sp, #8]
 800ac3c:	9503      	str	r5, [sp, #12]
 800ac3e:	4b5f      	ldr	r3, [pc, #380]	@ (800adbc <MIC_Print+0x2ac>)
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	0008      	movs	r0, r1
 800ac48:	f017 fd00 	bl	802264c <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800ac4c:	4b53      	ldr	r3, [pc, #332]	@ (800ad9c <MIC_Print+0x28c>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2b0a      	cmp	r3, #10
 800ac52:	d902      	bls.n	800ac5a <MIC_Print+0x14a>
    counter = 0;
 800ac54:	4b51      	ldr	r3, [pc, #324]	@ (800ad9c <MIC_Print+0x28c>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800ac5a:	4b4f      	ldr	r3, [pc, #316]	@ (800ad98 <MIC_Print+0x288>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4958      	ldr	r1, [pc, #352]	@ (800adc0 <MIC_Print+0x2b0>)
 800ac60:	1c18      	adds	r0, r3, #0
 800ac62:	f7f5 fc83 	bl	800056c <__aeabi_fcmpge>
 800ac66:	1e03      	subs	r3, r0, #0
 800ac68:	d004      	beq.n	800ac74 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	2001      	movs	r0, #1
 800ac70:	f004 fb30 	bl	800f2d4 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800ac74:	4b48      	ldr	r3, [pc, #288]	@ (800ad98 <MIC_Print+0x288>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4952      	ldr	r1, [pc, #328]	@ (800adc4 <MIC_Print+0x2b4>)
 800ac7a:	1c18      	adds	r0, r3, #0
 800ac7c:	f7f5 fc76 	bl	800056c <__aeabi_fcmpge>
 800ac80:	1e03      	subs	r3, r0, #0
 800ac82:	d00c      	beq.n	800ac9e <MIC_Print+0x18e>
 800ac84:	4b44      	ldr	r3, [pc, #272]	@ (800ad98 <MIC_Print+0x288>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	494d      	ldr	r1, [pc, #308]	@ (800adc0 <MIC_Print+0x2b0>)
 800ac8a:	1c18      	adds	r0, r3, #0
 800ac8c:	f7f5 fc50 	bl	8000530 <__aeabi_fcmplt>
 800ac90:	1e03      	subs	r3, r0, #0
 800ac92:	d004      	beq.n	800ac9e <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800ac94:	2200      	movs	r2, #0
 800ac96:	2100      	movs	r1, #0
 800ac98:	2001      	movs	r0, #1
 800ac9a:	f004 fb1b 	bl	800f2d4 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800ac9e:	4b3e      	ldr	r3, [pc, #248]	@ (800ad98 <MIC_Print+0x288>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4949      	ldr	r1, [pc, #292]	@ (800adc8 <MIC_Print+0x2b8>)
 800aca4:	1c18      	adds	r0, r3, #0
 800aca6:	f7f5 fc61 	bl	800056c <__aeabi_fcmpge>
 800acaa:	1e03      	subs	r3, r0, #0
 800acac:	d00c      	beq.n	800acc8 <MIC_Print+0x1b8>
 800acae:	4b3a      	ldr	r3, [pc, #232]	@ (800ad98 <MIC_Print+0x288>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4944      	ldr	r1, [pc, #272]	@ (800adc4 <MIC_Print+0x2b4>)
 800acb4:	1c18      	adds	r0, r3, #0
 800acb6:	f7f5 fc3b 	bl	8000530 <__aeabi_fcmplt>
 800acba:	1e03      	subs	r3, r0, #0
 800acbc:	d004      	beq.n	800acc8 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800acbe:	2200      	movs	r2, #0
 800acc0:	2101      	movs	r1, #1
 800acc2:	2001      	movs	r0, #1
 800acc4:	f004 fb06 	bl	800f2d4 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800acc8:	4b33      	ldr	r3, [pc, #204]	@ (800ad98 <MIC_Print+0x288>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	493f      	ldr	r1, [pc, #252]	@ (800adcc <MIC_Print+0x2bc>)
 800acce:	1c18      	adds	r0, r3, #0
 800acd0:	f7f5 fc4c 	bl	800056c <__aeabi_fcmpge>
 800acd4:	1e03      	subs	r3, r0, #0
 800acd6:	d00c      	beq.n	800acf2 <MIC_Print+0x1e2>
 800acd8:	4b2f      	ldr	r3, [pc, #188]	@ (800ad98 <MIC_Print+0x288>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	493a      	ldr	r1, [pc, #232]	@ (800adc8 <MIC_Print+0x2b8>)
 800acde:	1c18      	adds	r0, r3, #0
 800ace0:	f7f5 fc26 	bl	8000530 <__aeabi_fcmplt>
 800ace4:	1e03      	subs	r3, r0, #0
 800ace6:	d004      	beq.n	800acf2 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800ace8:	2200      	movs	r2, #0
 800acea:	2101      	movs	r1, #1
 800acec:	2000      	movs	r0, #0
 800acee:	f004 faf1 	bl	800f2d4 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800acf2:	4b29      	ldr	r3, [pc, #164]	@ (800ad98 <MIC_Print+0x288>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4936      	ldr	r1, [pc, #216]	@ (800add0 <MIC_Print+0x2c0>)
 800acf8:	1c18      	adds	r0, r3, #0
 800acfa:	f7f5 fc37 	bl	800056c <__aeabi_fcmpge>
 800acfe:	1e03      	subs	r3, r0, #0
 800ad00:	d00c      	beq.n	800ad1c <MIC_Print+0x20c>
 800ad02:	4b25      	ldr	r3, [pc, #148]	@ (800ad98 <MIC_Print+0x288>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4931      	ldr	r1, [pc, #196]	@ (800adcc <MIC_Print+0x2bc>)
 800ad08:	1c18      	adds	r0, r3, #0
 800ad0a:	f7f5 fc11 	bl	8000530 <__aeabi_fcmplt>
 800ad0e:	1e03      	subs	r3, r0, #0
 800ad10:	d004      	beq.n	800ad1c <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800ad12:	2201      	movs	r2, #1
 800ad14:	2101      	movs	r1, #1
 800ad16:	2000      	movs	r0, #0
 800ad18:	f004 fadc 	bl	800f2d4 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800ad1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ad98 <MIC_Print+0x288>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	492c      	ldr	r1, [pc, #176]	@ (800add4 <MIC_Print+0x2c4>)
 800ad22:	1c18      	adds	r0, r3, #0
 800ad24:	f7f5 fc22 	bl	800056c <__aeabi_fcmpge>
 800ad28:	1e03      	subs	r3, r0, #0
 800ad2a:	d00c      	beq.n	800ad46 <MIC_Print+0x236>
 800ad2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ad98 <MIC_Print+0x288>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4927      	ldr	r1, [pc, #156]	@ (800add0 <MIC_Print+0x2c0>)
 800ad32:	1c18      	adds	r0, r3, #0
 800ad34:	f7f5 fbfc 	bl	8000530 <__aeabi_fcmplt>
 800ad38:	1e03      	subs	r3, r0, #0
 800ad3a:	d004      	beq.n	800ad46 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	2100      	movs	r1, #0
 800ad40:	2000      	movs	r0, #0
 800ad42:	f004 fac7 	bl	800f2d4 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800ad46:	4b14      	ldr	r3, [pc, #80]	@ (800ad98 <MIC_Print+0x288>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4923      	ldr	r1, [pc, #140]	@ (800add8 <MIC_Print+0x2c8>)
 800ad4c:	1c18      	adds	r0, r3, #0
 800ad4e:	f7f5 fc0d 	bl	800056c <__aeabi_fcmpge>
 800ad52:	1e03      	subs	r3, r0, #0
 800ad54:	d00c      	beq.n	800ad70 <MIC_Print+0x260>
 800ad56:	4b10      	ldr	r3, [pc, #64]	@ (800ad98 <MIC_Print+0x288>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	491e      	ldr	r1, [pc, #120]	@ (800add4 <MIC_Print+0x2c4>)
 800ad5c:	1c18      	adds	r0, r3, #0
 800ad5e:	f7f5 fbe7 	bl	8000530 <__aeabi_fcmplt>
 800ad62:	1e03      	subs	r3, r0, #0
 800ad64:	d004      	beq.n	800ad70 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800ad66:	2201      	movs	r2, #1
 800ad68:	2100      	movs	r1, #0
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	f004 fab2 	bl	800f2d4 <SetDBLED>
  }
  if(dBA < 35){//off
 800ad70:	4b09      	ldr	r3, [pc, #36]	@ (800ad98 <MIC_Print+0x288>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4918      	ldr	r1, [pc, #96]	@ (800add8 <MIC_Print+0x2c8>)
 800ad76:	1c18      	adds	r0, r3, #0
 800ad78:	f7f5 fbda 	bl	8000530 <__aeabi_fcmplt>
 800ad7c:	1e03      	subs	r3, r0, #0
 800ad7e:	d100      	bne.n	800ad82 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800ad80:	e004      	b.n	800ad8c <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800ad82:	2200      	movs	r2, #0
 800ad84:	2100      	movs	r1, #0
 800ad86:	2000      	movs	r0, #0
 800ad88:	f004 faa4 	bl	800f2d4 <SetDBLED>
}
 800ad8c:	46c0      	nop			@ (mov r8, r8)
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	b004      	add	sp, #16
 800ad92:	bdb0      	pop	{r4, r5, r7, pc}
 800ad94:	20000e00 	.word	0x20000e00
 800ad98:	20000dcc 	.word	0x20000dcc
 800ad9c:	20000e08 	.word	0x20000e08
 800ada0:	20000dd0 	.word	0x20000dd0
 800ada4:	20000e09 	.word	0x20000e09
 800ada8:	20000098 	.word	0x20000098
 800adac:	20000dfc 	.word	0x20000dfc
 800adb0:	20000e04 	.word	0x20000e04
 800adb4:	20000df8 	.word	0x20000df8
 800adb8:	08027ae8 	.word	0x08027ae8
 800adbc:	20000dc0 	.word	0x20000dc0
 800adc0:	42b40000 	.word	0x42b40000
 800adc4:	42a00000 	.word	0x42a00000
 800adc8:	428c0000 	.word	0x428c0000
 800adcc:	42700000 	.word	0x42700000
 800add0:	42480000 	.word	0x42480000
 800add4:	42200000 	.word	0x42200000
 800add8:	420c0000 	.word	0x420c0000

0800addc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800ade2:	4b11      	ldr	r3, [pc, #68]	@ (800ae28 <MIC_TestMeasurementDone+0x4c>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	4a10      	ldr	r2, [pc, #64]	@ (800ae2c <MIC_TestMeasurementDone+0x50>)
 800adea:	4911      	ldr	r1, [pc, #68]	@ (800ae30 <MIC_TestMeasurementDone+0x54>)
 800adec:	2002      	movs	r0, #2
 800adee:	f005 fca5 	bl	801073c <CreateLine>
  if(DataReady) {
 800adf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae28 <MIC_TestMeasurementDone+0x4c>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d010      	beq.n	800ae1e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800adfc:	1dfb      	adds	r3, r7, #7
 800adfe:	4a0d      	ldr	r2, [pc, #52]	@ (800ae34 <MIC_TestMeasurementDone+0x58>)
 800ae00:	7812      	ldrb	r2, [r2, #0]
 800ae02:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800ae04:	4b0b      	ldr	r3, [pc, #44]	@ (800ae34 <MIC_TestMeasurementDone+0x58>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	4a0b      	ldr	r2, [pc, #44]	@ (800ae38 <MIC_TestMeasurementDone+0x5c>)
 800ae0c:	4908      	ldr	r1, [pc, #32]	@ (800ae30 <MIC_TestMeasurementDone+0x54>)
 800ae0e:	2002      	movs	r0, #2
 800ae10:	f005 fc94 	bl	801073c <CreateLine>
    ResetMICIndicator();
 800ae14:	f004 fb4c 	bl	800f4b0 <ResetMICIndicator>
    return Check;
 800ae18:	1dfb      	adds	r3, r7, #7
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	e000      	b.n	800ae20 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	0018      	movs	r0, r3
 800ae22:	46bd      	mov	sp, r7
 800ae24:	b002      	add	sp, #8
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20000f3d 	.word	0x20000f3d
 800ae2c:	08027b30 	.word	0x08027b30
 800ae30:	08027b5c 	.word	0x08027b5c
 800ae34:	20000f3e 	.word	0x20000f3e
 800ae38:	08027b60 	.word	0x08027b60

0800ae3c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800ae42:	4b78      	ldr	r3, [pc, #480]	@ (800b024 <Mic_Upkeep+0x1e8>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d100      	bne.n	800ae4c <Mic_Upkeep+0x10>
 800ae4a:	e0b8      	b.n	800afbe <Mic_Upkeep+0x182>
 800ae4c:	dd00      	ble.n	800ae50 <Mic_Upkeep+0x14>
 800ae4e:	e0d3      	b.n	800aff8 <Mic_Upkeep+0x1bc>
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d037      	beq.n	800aec4 <Mic_Upkeep+0x88>
 800ae54:	dd00      	ble.n	800ae58 <Mic_Upkeep+0x1c>
 800ae56:	e0cf      	b.n	800aff8 <Mic_Upkeep+0x1bc>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <Mic_Upkeep+0x26>
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d014      	beq.n	800ae8a <Mic_Upkeep+0x4e>
 800ae60:	e0ca      	b.n	800aff8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800ae62:	2001      	movs	r0, #1
 800ae64:	f003 fb34 	bl	800e4d0 <enableMicrophone>
 800ae68:	0003      	movs	r3, r0
 800ae6a:	001a      	movs	r2, r3
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4053      	eors	r3, r2
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800ae76:	4a6c      	ldr	r2, [pc, #432]	@ (800b028 <Mic_Upkeep+0x1ec>)
 800ae78:	4b6c      	ldr	r3, [pc, #432]	@ (800b02c <Mic_Upkeep+0x1f0>)
 800ae7a:	217f      	movs	r1, #127	@ 0x7f
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	f005 fd15 	bl	80108ac <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800ae82:	4b68      	ldr	r3, [pc, #416]	@ (800b024 <Mic_Upkeep+0x1e8>)
 800ae84:	2201      	movs	r2, #1
 800ae86:	701a      	strb	r2, [r3, #0]
    break;
 800ae88:	e0c5      	b.n	800b016 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800ae8a:	f003 fafd 	bl	800e488 <micSettlingComplete>
 800ae8e:	1e03      	subs	r3, r0, #0
 800ae90:	d105      	bne.n	800ae9e <Mic_Upkeep+0x62>
 800ae92:	4b67      	ldr	r3, [pc, #412]	@ (800b030 <Mic_Upkeep+0x1f4>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d100      	bne.n	800ae9e <Mic_Upkeep+0x62>
 800ae9c:	e0b6      	b.n	800b00c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800ae9e:	f003 fb81 	bl	800e5a4 <startSPLcalculation>
 800aea2:	0003      	movs	r3, r0
 800aea4:	001a      	movs	r2, r3
 800aea6:	2301      	movs	r3, #1
 800aea8:	4053      	eors	r3, r2
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d005      	beq.n	800aebc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800aeb0:	4a5d      	ldr	r2, [pc, #372]	@ (800b028 <Mic_Upkeep+0x1ec>)
 800aeb2:	4b5e      	ldr	r3, [pc, #376]	@ (800b02c <Mic_Upkeep+0x1f0>)
 800aeb4:	2188      	movs	r1, #136	@ 0x88
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f005 fcf8 	bl	80108ac <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800aebc:	4b59      	ldr	r3, [pc, #356]	@ (800b024 <Mic_Upkeep+0x1e8>)
 800aebe:	2202      	movs	r2, #2
 800aec0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800aec2:	e0a3      	b.n	800b00c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800aec4:	4b5b      	ldr	r3, [pc, #364]	@ (800b034 <Mic_Upkeep+0x1f8>)
 800aec6:	2201      	movs	r2, #1
 800aec8:	2101      	movs	r1, #1
 800aeca:	0018      	movs	r0, r3
 800aecc:	f003 f9be 	bl	800e24c <getSoundData>
 800aed0:	1e03      	subs	r3, r0, #0
 800aed2:	d100      	bne.n	800aed6 <Mic_Upkeep+0x9a>
 800aed4:	e09c      	b.n	800b010 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800aed6:	f003 fab7 	bl	800e448 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800aeda:	4b56      	ldr	r3, [pc, #344]	@ (800b034 <Mic_Upkeep+0x1f8>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	001a      	movs	r2, r3
 800aee0:	4b54      	ldr	r3, [pc, #336]	@ (800b034 <Mic_Upkeep+0x1f8>)
 800aee2:	785b      	ldrb	r3, [r3, #1]
 800aee4:	4954      	ldr	r1, [pc, #336]	@ (800b038 <Mic_Upkeep+0x1fc>)
 800aee6:	0038      	movs	r0, r7
 800aee8:	f017 fc20 	bl	802272c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800aeec:	4b51      	ldr	r3, [pc, #324]	@ (800b034 <Mic_Upkeep+0x1f8>)
 800aeee:	89db      	ldrh	r3, [r3, #14]
 800aef0:	001a      	movs	r2, r3
 800aef2:	4b50      	ldr	r3, [pc, #320]	@ (800b034 <Mic_Upkeep+0x1f8>)
 800aef4:	7c1b      	ldrb	r3, [r3, #16]
 800aef6:	4951      	ldr	r1, [pc, #324]	@ (800b03c <Mic_Upkeep+0x200>)
 800aef8:	4851      	ldr	r0, [pc, #324]	@ (800b040 <Mic_Upkeep+0x204>)
 800aefa:	f017 fc17 	bl	802272c <siprintf>
      dBValue = atof(dBbuffer);
 800aefe:	003b      	movs	r3, r7
 800af00:	0018      	movs	r0, r3
 800af02:	f015 ffc3 	bl	8020e8c <atof>
 800af06:	0002      	movs	r2, r0
 800af08:	000b      	movs	r3, r1
 800af0a:	0010      	movs	r0, r2
 800af0c:	0019      	movs	r1, r3
 800af0e:	f7f8 faf1 	bl	80034f4 <__aeabi_d2f>
 800af12:	1c02      	adds	r2, r0, #0
 800af14:	4b4b      	ldr	r3, [pc, #300]	@ (800b044 <Mic_Upkeep+0x208>)
 800af16:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800af18:	4b4a      	ldr	r3, [pc, #296]	@ (800b044 <Mic_Upkeep+0x208>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	494a      	ldr	r1, [pc, #296]	@ (800b048 <Mic_Upkeep+0x20c>)
 800af1e:	1c18      	adds	r0, r3, #0
 800af20:	f7f6 f83e 	bl	8000fa0 <__aeabi_fmul>
 800af24:	1c03      	adds	r3, r0, #0
 800af26:	1c18      	adds	r0, r3, #0
 800af28:	f7f8 fa9c 	bl	8003464 <__aeabi_f2d>
 800af2c:	2200      	movs	r2, #0
 800af2e:	4b47      	ldr	r3, [pc, #284]	@ (800b04c <Mic_Upkeep+0x210>)
 800af30:	f7f6 fbdc 	bl	80016ec <__aeabi_dadd>
 800af34:	0002      	movs	r2, r0
 800af36:	000b      	movs	r3, r1
 800af38:	0010      	movs	r0, r2
 800af3a:	0019      	movs	r1, r3
 800af3c:	f7f8 fa04 	bl	8003348 <__aeabi_d2iz>
 800af40:	0003      	movs	r3, r0
 800af42:	0018      	movs	r0, r3
 800af44:	f7f8 fa3c 	bl	80033c0 <__aeabi_i2d>
 800af48:	2200      	movs	r2, #0
 800af4a:	4b41      	ldr	r3, [pc, #260]	@ (800b050 <Mic_Upkeep+0x214>)
 800af4c:	f7f6 ff32 	bl	8001db4 <__aeabi_ddiv>
 800af50:	0002      	movs	r2, r0
 800af52:	000b      	movs	r3, r1
 800af54:	0010      	movs	r0, r2
 800af56:	0019      	movs	r1, r3
 800af58:	f7f8 facc 	bl	80034f4 <__aeabi_d2f>
 800af5c:	1c02      	adds	r2, r0, #0
 800af5e:	4b39      	ldr	r3, [pc, #228]	@ (800b044 <Mic_Upkeep+0x208>)
 800af60:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800af62:	f7ff fdd5 	bl	800ab10 <MIC_Print>
      if (!startSPLcalculation()) {
 800af66:	f003 fb1d 	bl	800e5a4 <startSPLcalculation>
 800af6a:	0003      	movs	r3, r0
 800af6c:	001a      	movs	r2, r3
 800af6e:	2301      	movs	r3, #1
 800af70:	4053      	eors	r3, r2
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800af78:	4a2b      	ldr	r2, [pc, #172]	@ (800b028 <Mic_Upkeep+0x1ec>)
 800af7a:	4b2c      	ldr	r3, [pc, #176]	@ (800b02c <Mic_Upkeep+0x1f0>)
 800af7c:	2198      	movs	r1, #152	@ 0x98
 800af7e:	0018      	movs	r0, r3
 800af80:	f005 fc94 	bl	80108ac <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800af84:	2000      	movs	r0, #0
 800af86:	f003 faa3 	bl	800e4d0 <enableMicrophone>
 800af8a:	0003      	movs	r3, r0
 800af8c:	001a      	movs	r2, r3
 800af8e:	2301      	movs	r3, #1
 800af90:	4053      	eors	r3, r2
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d005      	beq.n	800afa4 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800af98:	4a23      	ldr	r2, [pc, #140]	@ (800b028 <Mic_Upkeep+0x1ec>)
 800af9a:	4b24      	ldr	r3, [pc, #144]	@ (800b02c <Mic_Upkeep+0x1f0>)
 800af9c:	219b      	movs	r1, #155	@ 0x9b
 800af9e:	0018      	movs	r0, r3
 800afa0:	f005 fc84 	bl	80108ac <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800afa4:	f006 f816 	bl	8010fd4 <HAL_GetTick>
 800afa8:	0003      	movs	r3, r0
 800afaa:	4a2a      	ldr	r2, [pc, #168]	@ (800b054 <Mic_Upkeep+0x218>)
 800afac:	189a      	adds	r2, r3, r2
 800afae:	4b2a      	ldr	r3, [pc, #168]	@ (800b058 <Mic_Upkeep+0x21c>)
 800afb0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800afb2:	4b1c      	ldr	r3, [pc, #112]	@ (800b024 <Mic_Upkeep+0x1e8>)
 800afb4:	2203      	movs	r2, #3
 800afb6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800afb8:	f004 fa7a 	bl	800f4b0 <ResetMICIndicator>
    }
    break;
 800afbc:	e028      	b.n	800b010 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800afbe:	4b26      	ldr	r3, [pc, #152]	@ (800b058 <Mic_Upkeep+0x21c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	0018      	movs	r0, r3
 800afc4:	f005 fb64 	bl	8010690 <TimestampIsReached>
 800afc8:	1e03      	subs	r3, r0, #0
 800afca:	d023      	beq.n	800b014 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800afcc:	2001      	movs	r0, #1
 800afce:	f003 fa7f 	bl	800e4d0 <enableMicrophone>
 800afd2:	0003      	movs	r3, r0
 800afd4:	001a      	movs	r2, r3
 800afd6:	2301      	movs	r3, #1
 800afd8:	4053      	eors	r3, r2
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d005      	beq.n	800afec <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800afe0:	4a11      	ldr	r2, [pc, #68]	@ (800b028 <Mic_Upkeep+0x1ec>)
 800afe2:	4b12      	ldr	r3, [pc, #72]	@ (800b02c <Mic_Upkeep+0x1f0>)
 800afe4:	21a6      	movs	r1, #166	@ 0xa6
 800afe6:	0018      	movs	r0, r3
 800afe8:	f005 fc60 	bl	80108ac <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800afec:	4b0d      	ldr	r3, [pc, #52]	@ (800b024 <Mic_Upkeep+0x1e8>)
 800afee:	2201      	movs	r2, #1
 800aff0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800aff2:	f004 fa1b 	bl	800f42c <SetMICIndicator>
    }
    break;
 800aff6:	e00d      	b.n	800b014 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800aff8:	4a18      	ldr	r2, [pc, #96]	@ (800b05c <Mic_Upkeep+0x220>)
 800affa:	4b19      	ldr	r3, [pc, #100]	@ (800b060 <Mic_Upkeep+0x224>)
 800affc:	0019      	movs	r1, r3
 800affe:	2003      	movs	r0, #3
 800b000:	f005 fb9c 	bl	801073c <CreateLine>
    MicState = MIC_STATE_INIT;
 800b004:	4b07      	ldr	r3, [pc, #28]	@ (800b024 <Mic_Upkeep+0x1e8>)
 800b006:	2200      	movs	r2, #0
 800b008:	701a      	strb	r2, [r3, #0]
    break;
 800b00a:	e004      	b.n	800b016 <Mic_Upkeep+0x1da>
    break;
 800b00c:	46c0      	nop			@ (mov r8, r8)
 800b00e:	e002      	b.n	800b016 <Mic_Upkeep+0x1da>
    break;
 800b010:	46c0      	nop			@ (mov r8, r8)
 800b012:	e000      	b.n	800b016 <Mic_Upkeep+0x1da>
    break;
 800b014:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800b016:	4b03      	ldr	r3, [pc, #12]	@ (800b024 <Mic_Upkeep+0x1e8>)
 800b018:	781b      	ldrb	r3, [r3, #0]
}
 800b01a:	0018      	movs	r0, r3
 800b01c:	46bd      	mov	sp, r7
 800b01e:	b002      	add	sp, #8
 800b020:	bd80      	pop	{r7, pc}
 800b022:	46c0      	nop			@ (mov r8, r8)
 800b024:	20000e22 	.word	0x20000e22
 800b028:	08027b78 	.word	0x08027b78
 800b02c:	08028c6c 	.word	0x08028c6c
 800b030:	20000f3d 	.word	0x20000f3d
 800b034:	20000e10 	.word	0x20000e10
 800b038:	08027b94 	.word	0x08027b94
 800b03c:	08027b9c 	.word	0x08027b9c
 800b040:	20000dc0 	.word	0x20000dc0
 800b044:	20000e00 	.word	0x20000e00
 800b048:	42c80000 	.word	0x42c80000
 800b04c:	3fe00000 	.word	0x3fe00000
 800b050:	40590000 	.word	0x40590000
 800b054:	000002f3 	.word	0x000002f3
 800b058:	20000e0c 	.word	0x20000e0c
 800b05c:	08027ba4 	.word	0x08027ba4
 800b060:	08027bc4 	.word	0x08027bc4

0800b064 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b06a:	1d3b      	adds	r3, r7, #4
 800b06c:	0018      	movs	r0, r3
 800b06e:	2314      	movs	r3, #20
 800b070:	001a      	movs	r2, r3
 800b072:	2100      	movs	r1, #0
 800b074:	f017 fcc0 	bl	80229f8 <memset>
  RTC_DateTypeDef sDate = {0};
 800b078:	003b      	movs	r3, r7
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800b07e:	4b2e      	ldr	r3, [pc, #184]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b080:	4a2e      	ldr	r2, [pc, #184]	@ (800b13c <MX_RTC_Init+0xd8>)
 800b082:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b084:	4b2c      	ldr	r3, [pc, #176]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b086:	2200      	movs	r2, #0
 800b088:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b08a:	4b2b      	ldr	r3, [pc, #172]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b08c:	227f      	movs	r2, #127	@ 0x7f
 800b08e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b090:	4b29      	ldr	r3, [pc, #164]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b092:	22ff      	movs	r2, #255	@ 0xff
 800b094:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b096:	4b28      	ldr	r3, [pc, #160]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b098:	2200      	movs	r2, #0
 800b09a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800b09c:	4b26      	ldr	r3, [pc, #152]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b0a2:	4b25      	ldr	r3, [pc, #148]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b0a8:	4b23      	ldr	r3, [pc, #140]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b0ae:	4b22      	ldr	r3, [pc, #136]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b0b0:	0018      	movs	r0, r3
 800b0b2:	f00d faab 	bl	801860c <HAL_RTC_Init>
 800b0b6:	1e03      	subs	r3, r0, #0
 800b0b8:	d001      	beq.n	800b0be <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800b0ba:	f7ff f8d9 	bl	800a270 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800b0be:	1d3b      	adds	r3, r7, #4
 800b0c0:	220d      	movs	r2, #13
 800b0c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800b0c4:	1d3b      	adds	r3, r7, #4
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800b0ca:	1d3b      	adds	r3, r7, #4
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b0d0:	1d3b      	adds	r3, r7, #4
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b0d6:	1d3b      	adds	r3, r7, #4
 800b0d8:	2200      	movs	r2, #0
 800b0da:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800b0dc:	1d39      	adds	r1, r7, #4
 800b0de:	4b16      	ldr	r3, [pc, #88]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f00d fb2e 	bl	8018744 <HAL_RTC_SetTime>
 800b0e8:	1e03      	subs	r3, r0, #0
 800b0ea:	d001      	beq.n	800b0f0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800b0ec:	f7ff f8c0 	bl	800a270 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800b0f0:	003b      	movs	r3, r7
 800b0f2:	2206      	movs	r2, #6
 800b0f4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800b0f6:	003b      	movs	r3, r7
 800b0f8:	2211      	movs	r2, #17
 800b0fa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800b0fc:	003b      	movs	r3, r7
 800b0fe:	2217      	movs	r2, #23
 800b100:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800b102:	003b      	movs	r3, r7
 800b104:	2218      	movs	r2, #24
 800b106:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b108:	0039      	movs	r1, r7
 800b10a:	4b0b      	ldr	r3, [pc, #44]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	0018      	movs	r0, r3
 800b110:	f00d fc20 	bl	8018954 <HAL_RTC_SetDate>
 800b114:	1e03      	subs	r3, r0, #0
 800b116:	d001      	beq.n	800b11c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800b118:	f7ff f8aa 	bl	800a270 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800b11c:	4b06      	ldr	r3, [pc, #24]	@ (800b138 <MX_RTC_Init+0xd4>)
 800b11e:	2200      	movs	r2, #0
 800b120:	2100      	movs	r1, #0
 800b122:	0018      	movs	r0, r3
 800b124:	f00d fdd0 	bl	8018cc8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800b128:	1e03      	subs	r3, r0, #0
 800b12a:	d001      	beq.n	800b130 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800b12c:	f7ff f8a0 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b130:	46c0      	nop			@ (mov r8, r8)
 800b132:	46bd      	mov	sp, r7
 800b134:	b006      	add	sp, #24
 800b136:	bd80      	pop	{r7, pc}
 800b138:	20000e24 	.word	0x20000e24
 800b13c:	40002800 	.word	0x40002800

0800b140 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a0a      	ldr	r2, [pc, #40]	@ (800b178 <HAL_RTC_MspInit+0x38>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d10e      	bne.n	800b170 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b152:	4b0a      	ldr	r3, [pc, #40]	@ (800b17c <HAL_RTC_MspInit+0x3c>)
 800b154:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b156:	4b09      	ldr	r3, [pc, #36]	@ (800b17c <HAL_RTC_MspInit+0x3c>)
 800b158:	2180      	movs	r1, #128	@ 0x80
 800b15a:	02c9      	lsls	r1, r1, #11
 800b15c:	430a      	orrs	r2, r1
 800b15e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800b160:	2200      	movs	r2, #0
 800b162:	2100      	movs	r1, #0
 800b164:	2002      	movs	r0, #2
 800b166:	f006 fbd9 	bl	801191c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800b16a:	2002      	movs	r0, #2
 800b16c:	f006 fbeb 	bl	8011946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800b170:	46c0      	nop			@ (mov r8, r8)
 800b172:	46bd      	mov	sp, r7
 800b174:	b002      	add	sp, #8
 800b176:	bd80      	pop	{r7, pc}
 800b178:	40002800 	.word	0x40002800
 800b17c:	40021000 	.word	0x40021000

0800b180 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800b180:	b580      	push	{r7, lr}
 800b182:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800b184:	4b02      	ldr	r3, [pc, #8]	@ (800b190 <sen5x_Get_sen5x_enable_state+0x10>)
 800b186:	781b      	ldrb	r3, [r3, #0]
}
 800b188:	0018      	movs	r0, r3
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	46c0      	nop			@ (mov r8, r8)
 800b190:	20000e4b 	.word	0x20000e4b

0800b194 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	0002      	movs	r2, r0
 800b19c:	1dfb      	adds	r3, r7, #7
 800b19e:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800b1a0:	4b03      	ldr	r3, [pc, #12]	@ (800b1b0 <sen5x_Set_sen5x_state+0x1c>)
 800b1a2:	1dfa      	adds	r2, r7, #7
 800b1a4:	7812      	ldrb	r2, [r2, #0]
 800b1a6:	701a      	strb	r2, [r3, #0]
}
 800b1a8:	46c0      	nop			@ (mov r8, r8)
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	b002      	add	sp, #8
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20000e4b 	.word	0x20000e4b

0800b1b4 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800b1bc:	f005 ff0a 	bl	8010fd4 <HAL_GetTick>
 800b1c0:	0002      	movs	r2, r0
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	18d2      	adds	r2, r2, r3
 800b1c6:	4b03      	ldr	r3, [pc, #12]	@ (800b1d4 <setsen5xReadTimer+0x20>)
 800b1c8:	601a      	str	r2, [r3, #0]
}
 800b1ca:	46c0      	nop			@ (mov r8, r8)
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	b002      	add	sp, #8
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	46c0      	nop			@ (mov r8, r8)
 800b1d4:	20000e58 	.word	0x20000e58

0800b1d8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	0002      	movs	r2, r0
 800b1e0:	1dfb      	adds	r3, r7, #7
 800b1e2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800b1e4:	4b03      	ldr	r3, [pc, #12]	@ (800b1f4 <setsen5xSamplecounter+0x1c>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	701a      	strb	r2, [r3, #0]
}
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	b002      	add	sp, #8
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	46c0      	nop			@ (mov r8, r8)
 800b1f4:	20000e54 	.word	0x20000e54

0800b1f8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800b200:	f7ff f8ce 	bl	800a3a0 <IsPMSensorEnabled>
 800b204:	1e03      	subs	r3, r0, #0
 800b206:	d035      	beq.n	800b274 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800b208:	f003 ff8e 	bl	800f128 <batteryChargeCheck>
 800b20c:	0003      	movs	r3, r0
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d103      	bne.n	800b21a <sen5x_enable+0x22>
      sen5x_Enable = true;
 800b212:	4b20      	ldr	r3, [pc, #128]	@ (800b294 <sen5x_enable+0x9c>)
 800b214:	2201      	movs	r2, #1
 800b216:	701a      	strb	r2, [r3, #0]
 800b218:	e00d      	b.n	800b236 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800b21a:	4b1e      	ldr	r3, [pc, #120]	@ (800b294 <sen5x_enable+0x9c>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	1e5a      	subs	r2, r3, #1
 800b220:	4193      	sbcs	r3, r2
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2201      	movs	r2, #1
 800b226:	4053      	eors	r3, r2
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	1c1a      	adds	r2, r3, #0
 800b22c:	2301      	movs	r3, #1
 800b22e:	4013      	ands	r3, r2
 800b230:	b2da      	uxtb	r2, r3
 800b232:	4b18      	ldr	r3, [pc, #96]	@ (800b294 <sen5x_enable+0x9c>)
 800b234:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800b236:	4b17      	ldr	r3, [pc, #92]	@ (800b294 <sen5x_enable+0x9c>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800b23e:	2000      	movs	r0, #0
 800b240:	f7ff ffb8 	bl	800b1b4 <setsen5xReadTimer>
 800b244:	e009      	b.n	800b25a <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800b246:	f005 fec5 	bl	8010fd4 <HAL_GetTick>
 800b24a:	0002      	movs	r2, r0
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2164      	movs	r1, #100	@ 0x64
 800b250:	434b      	muls	r3, r1
 800b252:	18d3      	adds	r3, r2, r3
 800b254:	0018      	movs	r0, r3
 800b256:	f7ff ffad 	bl	800b1b4 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800b25a:	4b0e      	ldr	r3, [pc, #56]	@ (800b294 <sen5x_enable+0x9c>)
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <sen5x_enable+0x6e>
 800b262:	4b0d      	ldr	r3, [pc, #52]	@ (800b298 <sen5x_enable+0xa0>)
 800b264:	e000      	b.n	800b268 <sen5x_enable+0x70>
 800b266:	4b0d      	ldr	r3, [pc, #52]	@ (800b29c <sen5x_enable+0xa4>)
 800b268:	4a0d      	ldr	r2, [pc, #52]	@ (800b2a0 <sen5x_enable+0xa8>)
 800b26a:	490e      	ldr	r1, [pc, #56]	@ (800b2a4 <sen5x_enable+0xac>)
 800b26c:	2002      	movs	r0, #2
 800b26e:	f005 fa65 	bl	801073c <CreateLine>
 800b272:	e005      	b.n	800b280 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800b274:	4a0c      	ldr	r2, [pc, #48]	@ (800b2a8 <sen5x_enable+0xb0>)
 800b276:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a4 <sen5x_enable+0xac>)
 800b278:	0019      	movs	r1, r3
 800b27a:	2002      	movs	r0, #2
 800b27c:	f005 fa5e 	bl	801073c <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800b280:	4b0a      	ldr	r3, [pc, #40]	@ (800b2ac <sen5x_enable+0xb4>)
 800b282:	2201      	movs	r2, #1
 800b284:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800b286:	4b03      	ldr	r3, [pc, #12]	@ (800b294 <sen5x_enable+0x9c>)
 800b288:	781b      	ldrb	r3, [r3, #0]
}
 800b28a:	0018      	movs	r0, r3
 800b28c:	46bd      	mov	sp, r7
 800b28e:	b002      	add	sp, #8
 800b290:	bd80      	pop	{r7, pc}
 800b292:	46c0      	nop			@ (mov r8, r8)
 800b294:	20000e4b 	.word	0x20000e4b
 800b298:	08027bc8 	.word	0x08027bc8
 800b29c:	08027bd0 	.word	0x08027bd0
 800b2a0:	08027bdc 	.word	0x08027bdc
 800b2a4:	08027bf8 	.word	0x08027bf8
 800b2a8:	08027bfc 	.word	0x08027bfc
 800b2ac:	20000099 	.word	0x20000099

0800b2b0 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800b2b4:	2380      	movs	r3, #128	@ 0x80
 800b2b6:	015b      	lsls	r3, r3, #5
 800b2b8:	480f      	ldr	r0, [pc, #60]	@ (800b2f8 <sen5x_Power_On+0x48>)
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	0019      	movs	r1, r3
 800b2be:	f007 f91a 	bl	80124f6 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800b2c2:	4a0e      	ldr	r2, [pc, #56]	@ (800b2fc <sen5x_Power_On+0x4c>)
 800b2c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b300 <sen5x_Power_On+0x50>)
 800b2c6:	0019      	movs	r1, r3
 800b2c8:	2003      	movs	r0, #3
 800b2ca:	f005 fa37 	bl	801073c <CreateLine>
  HAL_Delay(150);
 800b2ce:	2096      	movs	r0, #150	@ 0x96
 800b2d0:	f005 fe8a 	bl	8010fe8 <HAL_Delay>
  if (sen5x_device_reset()) {
 800b2d4:	f001 f98c 	bl	800c5f0 <sen5x_device_reset>
 800b2d8:	1e03      	subs	r3, r0, #0
 800b2da:	d006      	beq.n	800b2ea <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800b2dc:	4a09      	ldr	r2, [pc, #36]	@ (800b304 <sen5x_Power_On+0x54>)
 800b2de:	4b0a      	ldr	r3, [pc, #40]	@ (800b308 <sen5x_Power_On+0x58>)
 800b2e0:	0019      	movs	r1, r3
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	f005 fa2a 	bl	801073c <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800b2e8:	e002      	b.n	800b2f0 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800b2ea:	4b08      	ldr	r3, [pc, #32]	@ (800b30c <sen5x_Power_On+0x5c>)
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	701a      	strb	r2, [r3, #0]
}
 800b2f0:	46c0      	nop			@ (mov r8, r8)
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	46c0      	nop			@ (mov r8, r8)
 800b2f8:	50000800 	.word	0x50000800
 800b2fc:	08027c1c 	.word	0x08027c1c
 800b300:	08027c38 	.word	0x08027c38
 800b304:	08027c3c 	.word	0x08027c3c
 800b308:	08027c64 	.word	0x08027c64
 800b30c:	20000e49 	.word	0x20000e49

0800b310 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800b314:	4b0e      	ldr	r3, [pc, #56]	@ (800b350 <sen5x_Power_Off+0x40>)
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d006      	beq.n	800b32a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800b31c:	4a0d      	ldr	r2, [pc, #52]	@ (800b354 <sen5x_Power_Off+0x44>)
 800b31e:	4b0e      	ldr	r3, [pc, #56]	@ (800b358 <sen5x_Power_Off+0x48>)
 800b320:	0019      	movs	r1, r3
 800b322:	2003      	movs	r0, #3
 800b324:	f005 fa0a 	bl	801073c <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800b328:	e00f      	b.n	800b34a <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800b32a:	4a0c      	ldr	r2, [pc, #48]	@ (800b35c <sen5x_Power_Off+0x4c>)
 800b32c:	4b0a      	ldr	r3, [pc, #40]	@ (800b358 <sen5x_Power_Off+0x48>)
 800b32e:	0019      	movs	r1, r3
 800b330:	2003      	movs	r0, #3
 800b332:	f005 fa03 	bl	801073c <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800b336:	2380      	movs	r3, #128	@ 0x80
 800b338:	015b      	lsls	r3, r3, #5
 800b33a:	4809      	ldr	r0, [pc, #36]	@ (800b360 <sen5x_Power_Off+0x50>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	0019      	movs	r1, r3
 800b340:	f007 f8d9 	bl	80124f6 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800b344:	4b07      	ldr	r3, [pc, #28]	@ (800b364 <sen5x_Power_Off+0x54>)
 800b346:	2200      	movs	r2, #0
 800b348:	701a      	strb	r2, [r3, #0]
}
 800b34a:	46c0      	nop			@ (mov r8, r8)
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20000e4a 	.word	0x20000e4a
 800b354:	08027c68 	.word	0x08027c68
 800b358:	08027c38 	.word	0x08027c38
 800b35c:	08027c98 	.word	0x08027c98
 800b360:	50000800 	.word	0x50000800
 800b364:	20000e49 	.word	0x20000e49

0800b368 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800b36c:	4b02      	ldr	r3, [pc, #8]	@ (800b378 <reset_fanCleaningDone+0x10>)
 800b36e:	2200      	movs	r2, #0
 800b370:	701a      	strb	r2, [r3, #0]
}
 800b372:	46c0      	nop			@ (mov r8, r8)
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20000e48 	.word	0x20000e48

0800b37c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800b37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37e:	b093      	sub	sp, #76	@ 0x4c
 800b380:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800b382:	2436      	movs	r4, #54	@ 0x36
 800b384:	193b      	adds	r3, r7, r4
 800b386:	2200      	movs	r2, #0
 800b388:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800b38a:	2335      	movs	r3, #53	@ 0x35
 800b38c:	18fb      	adds	r3, r7, r3
 800b38e:	2220      	movs	r2, #32
 800b390:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800b392:	2334      	movs	r3, #52	@ 0x34
 800b394:	18fb      	adds	r3, r7, r3
 800b396:	2220      	movs	r2, #32
 800b398:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800b39a:	f7ff ff89 	bl	800b2b0 <sen5x_Power_On>
  error = sen5x_device_reset();
 800b39e:	0025      	movs	r5, r4
 800b3a0:	193c      	adds	r4, r7, r4
 800b3a2:	f001 f925 	bl	800c5f0 <sen5x_device_reset>
 800b3a6:	0003      	movs	r3, r0
 800b3a8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b3aa:	002c      	movs	r4, r5
 800b3ac:	193b      	adds	r3, r7, r4
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	5e9b      	ldrsh	r3, [r3, r2]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00b      	beq.n	800b3ce <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800b3b6:	193b      	adds	r3, r7, r4
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	5e9b      	ldrsh	r3, [r3, r2]
 800b3bc:	4a75      	ldr	r2, [pc, #468]	@ (800b594 <probe_sen5x+0x218>)
 800b3be:	4976      	ldr	r1, [pc, #472]	@ (800b598 <probe_sen5x+0x21c>)
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	f005 f9bb 	bl	801073c <CreateLine>
      return error;
 800b3c6:	193b      	adds	r3, r7, r4
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	5e9b      	ldrsh	r3, [r3, r2]
 800b3cc:	e0de      	b.n	800b58c <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800b3ce:	2536      	movs	r5, #54	@ 0x36
 800b3d0:	197c      	adds	r4, r7, r5
 800b3d2:	2335      	movs	r3, #53	@ 0x35
 800b3d4:	18fb      	adds	r3, r7, r3
 800b3d6:	781a      	ldrb	r2, [r3, #0]
 800b3d8:	230c      	movs	r3, #12
 800b3da:	18fb      	adds	r3, r7, r3
 800b3dc:	0011      	movs	r1, r2
 800b3de:	0018      	movs	r0, r3
 800b3e0:	f000 fff2 	bl	800c3c8 <sen5x_get_serial_number>
 800b3e4:	0003      	movs	r3, r0
 800b3e6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b3e8:	197b      	adds	r3, r7, r5
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	5e9b      	ldrsh	r3, [r3, r2]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00b      	beq.n	800b40a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800b3f2:	197b      	adds	r3, r7, r5
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	5e9a      	ldrsh	r2, [r3, r2]
 800b3f8:	4b68      	ldr	r3, [pc, #416]	@ (800b59c <probe_sen5x+0x220>)
 800b3fa:	0011      	movs	r1, r2
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	f017 f925 	bl	802264c <iprintf>
      return error;
 800b402:	197b      	adds	r3, r7, r5
 800b404:	2200      	movs	r2, #0
 800b406:	5e9b      	ldrsh	r3, [r3, r2]
 800b408:	e0c0      	b.n	800b58c <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800b40a:	230c      	movs	r3, #12
 800b40c:	18fa      	adds	r2, r7, r3
 800b40e:	4b64      	ldr	r3, [pc, #400]	@ (800b5a0 <probe_sen5x+0x224>)
 800b410:	0011      	movs	r1, r2
 800b412:	0018      	movs	r0, r3
 800b414:	f017 f91a 	bl	802264c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800b418:	2536      	movs	r5, #54	@ 0x36
 800b41a:	197c      	adds	r4, r7, r5
 800b41c:	2334      	movs	r3, #52	@ 0x34
 800b41e:	18fb      	adds	r3, r7, r3
 800b420:	781a      	ldrb	r2, [r3, #0]
 800b422:	4b60      	ldr	r3, [pc, #384]	@ (800b5a4 <probe_sen5x+0x228>)
 800b424:	0011      	movs	r1, r2
 800b426:	0018      	movs	r0, r3
 800b428:	f000 ff78 	bl	800c31c <sen5x_get_product_name>
 800b42c:	0003      	movs	r3, r0
 800b42e:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b430:	197b      	adds	r3, r7, r5
 800b432:	2200      	movs	r2, #0
 800b434:	5e9b      	ldrsh	r3, [r3, r2]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00b      	beq.n	800b452 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800b43a:	197b      	adds	r3, r7, r5
 800b43c:	2200      	movs	r2, #0
 800b43e:	5e9a      	ldrsh	r2, [r3, r2]
 800b440:	4b59      	ldr	r3, [pc, #356]	@ (800b5a8 <probe_sen5x+0x22c>)
 800b442:	0011      	movs	r1, r2
 800b444:	0018      	movs	r0, r3
 800b446:	f017 f901 	bl	802264c <iprintf>
      return error;
 800b44a:	197b      	adds	r3, r7, r5
 800b44c:	2200      	movs	r2, #0
 800b44e:	5e9b      	ldrsh	r3, [r3, r2]
 800b450:	e09c      	b.n	800b58c <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800b452:	4a54      	ldr	r2, [pc, #336]	@ (800b5a4 <probe_sen5x+0x228>)
 800b454:	4b55      	ldr	r3, [pc, #340]	@ (800b5ac <probe_sen5x+0x230>)
 800b456:	0011      	movs	r1, r2
 800b458:	0018      	movs	r0, r3
 800b45a:	f017 f8f7 	bl	802264c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800b45e:	2636      	movs	r6, #54	@ 0x36
 800b460:	19bc      	adds	r4, r7, r6
 800b462:	2308      	movs	r3, #8
 800b464:	18fd      	adds	r5, r7, r3
 800b466:	2309      	movs	r3, #9
 800b468:	18fa      	adds	r2, r7, r3
 800b46a:	230a      	movs	r3, #10
 800b46c:	18f9      	adds	r1, r7, r3
 800b46e:	230b      	movs	r3, #11
 800b470:	18f8      	adds	r0, r7, r3
 800b472:	1d7b      	adds	r3, r7, #5
 800b474:	9302      	str	r3, [sp, #8]
 800b476:	1dbb      	adds	r3, r7, #6
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	1dfb      	adds	r3, r7, #7
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	002b      	movs	r3, r5
 800b480:	f000 fff8 	bl	800c474 <sen5x_get_version>
 800b484:	0003      	movs	r3, r0
 800b486:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800b488:	19bb      	adds	r3, r7, r6
 800b48a:	2200      	movs	r2, #0
 800b48c:	5e9b      	ldrsh	r3, [r3, r2]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00b      	beq.n	800b4aa <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800b492:	19bb      	adds	r3, r7, r6
 800b494:	2200      	movs	r2, #0
 800b496:	5e9a      	ldrsh	r2, [r3, r2]
 800b498:	4b45      	ldr	r3, [pc, #276]	@ (800b5b0 <probe_sen5x+0x234>)
 800b49a:	0011      	movs	r1, r2
 800b49c:	0018      	movs	r0, r3
 800b49e:	f017 f8d5 	bl	802264c <iprintf>
      return error;
 800b4a2:	19bb      	adds	r3, r7, r6
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	5e9b      	ldrsh	r3, [r3, r2]
 800b4a8:	e070      	b.n	800b58c <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800b4aa:	230b      	movs	r3, #11
 800b4ac:	18fb      	adds	r3, r7, r3
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	0019      	movs	r1, r3
 800b4b2:	230a      	movs	r3, #10
 800b4b4:	18fb      	adds	r3, r7, r3
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	001a      	movs	r2, r3
 800b4ba:	2308      	movs	r3, #8
 800b4bc:	18fb      	adds	r3, r7, r3
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	001c      	movs	r4, r3
 800b4c2:	1dfb      	adds	r3, r7, #7
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	483b      	ldr	r0, [pc, #236]	@ (800b5b4 <probe_sen5x+0x238>)
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	0023      	movs	r3, r4
 800b4cc:	f017 f8be 	bl	802264c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800b4d4:	262e      	movs	r6, #46	@ 0x2e
 800b4d6:	19bb      	adds	r3, r7, r6
 800b4d8:	2200      	movs	r2, #0
 800b4da:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800b4dc:	232c      	movs	r3, #44	@ 0x2c
 800b4de:	18fb      	adds	r3, r7, r3
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800b4e4:	4934      	ldr	r1, [pc, #208]	@ (800b5b8 <probe_sen5x+0x23c>)
 800b4e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4e8:	f7f5 fd5a 	bl	8000fa0 <__aeabi_fmul>
 800b4ec:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800b4ee:	1c18      	adds	r0, r3, #0
 800b4f0:	f7f6 f84e 	bl	8001590 <__aeabi_f2iz>
 800b4f4:	0003      	movs	r3, r0
 800b4f6:	b218      	sxth	r0, r3
 800b4f8:	2536      	movs	r5, #54	@ 0x36
 800b4fa:	197c      	adds	r4, r7, r5
 800b4fc:	232c      	movs	r3, #44	@ 0x2c
 800b4fe:	18fb      	adds	r3, r7, r3
 800b500:	881a      	ldrh	r2, [r3, #0]
 800b502:	19bb      	adds	r3, r7, r6
 800b504:	2100      	movs	r1, #0
 800b506:	5e5b      	ldrsh	r3, [r3, r1]
 800b508:	0019      	movs	r1, r3
 800b50a:	f000 fea3 	bl	800c254 <sen5x_set_temperature_offset_parameters>
 800b50e:	0003      	movs	r3, r0
 800b510:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b512:	197b      	adds	r3, r7, r5
 800b514:	2200      	movs	r2, #0
 800b516:	5e9b      	ldrsh	r3, [r3, r2]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800b51c:	197b      	adds	r3, r7, r5
 800b51e:	2200      	movs	r2, #0
 800b520:	5e9b      	ldrsh	r3, [r3, r2]
 800b522:	4a26      	ldr	r2, [pc, #152]	@ (800b5bc <probe_sen5x+0x240>)
 800b524:	491c      	ldr	r1, [pc, #112]	@ (800b598 <probe_sen5x+0x21c>)
 800b526:	2001      	movs	r0, #1
 800b528:	f005 f908 	bl	801073c <CreateLine>
      return error;
 800b52c:	197b      	adds	r3, r7, r5
 800b52e:	2200      	movs	r2, #0
 800b530:	5e9b      	ldrsh	r3, [r3, r2]
 800b532:	e02b      	b.n	800b58c <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800b534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b536:	f7f7 ff95 	bl	8003464 <__aeabi_f2d>
 800b53a:	0002      	movs	r2, r0
 800b53c:	000b      	movs	r3, r1
 800b53e:	4820      	ldr	r0, [pc, #128]	@ (800b5c0 <probe_sen5x+0x244>)
 800b540:	4920      	ldr	r1, [pc, #128]	@ (800b5c4 <probe_sen5x+0x248>)
 800b542:	9200      	str	r2, [sp, #0]
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	0002      	movs	r2, r0
 800b548:	2002      	movs	r0, #2
 800b54a:	f005 f8f7 	bl	801073c <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800b54e:	f7fb fd31 	bl	8006fb4 <Check_USB_PowerOn>
 800b552:	0003      	movs	r3, r0
 800b554:	001a      	movs	r2, r3
 800b556:	2301      	movs	r3, #1
 800b558:	4053      	eors	r3, r2
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00a      	beq.n	800b576 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800b560:	f7ff fed6 	bl	800b310 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800b564:	f005 fd36 	bl	8010fd4 <HAL_GetTick>
 800b568:	0003      	movs	r3, r0
 800b56a:	22fa      	movs	r2, #250	@ 0xfa
 800b56c:	00d2      	lsls	r2, r2, #3
 800b56e:	189a      	adds	r2, r3, r2
 800b570:	4b15      	ldr	r3, [pc, #84]	@ (800b5c8 <probe_sen5x+0x24c>)
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	e006      	b.n	800b584 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800b576:	f005 fd2d 	bl	8010fd4 <HAL_GetTick>
 800b57a:	0003      	movs	r3, r0
 800b57c:	4a13      	ldr	r2, [pc, #76]	@ (800b5cc <probe_sen5x+0x250>)
 800b57e:	189a      	adds	r2, r3, r2
 800b580:	4b11      	ldr	r3, [pc, #68]	@ (800b5c8 <probe_sen5x+0x24c>)
 800b582:	601a      	str	r2, [r3, #0]
  }
  return error;
 800b584:	2336      	movs	r3, #54	@ 0x36
 800b586:	18fb      	adds	r3, r7, r3
 800b588:	2200      	movs	r2, #0
 800b58a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b58c:	0018      	movs	r0, r3
 800b58e:	46bd      	mov	sp, r7
 800b590:	b00f      	add	sp, #60	@ 0x3c
 800b592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b594:	08027cb4 	.word	0x08027cb4
 800b598:	08027c64 	.word	0x08027c64
 800b59c:	08027ce0 	.word	0x08027ce0
 800b5a0:	08027d10 	.word	0x08027d10
 800b5a4:	20000e4c 	.word	0x20000e4c
 800b5a8:	08027d24 	.word	0x08027d24
 800b5ac:	08027d54 	.word	0x08027d54
 800b5b0:	08027d68 	.word	0x08027d68
 800b5b4:	08027d94 	.word	0x08027d94
 800b5b8:	43480000 	.word	0x43480000
 800b5bc:	08027db8 	.word	0x08027db8
 800b5c0:	08027df8 	.word	0x08027df8
 800b5c4:	08027bf8 	.word	0x08027bf8
 800b5c8:	20000e58 	.word	0x20000e58
 800b5cc:	00006d60 	.word	0x00006d60

0800b5d0 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800b5d0:	b590      	push	{r4, r7, lr}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800b5d6:	1dbb      	adds	r3, r7, #6
 800b5d8:	2200      	movs	r2, #0
 800b5da:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800b5dc:	4b1b      	ldr	r3, [pc, #108]	@ (800b64c <sen5x_lightup_measurement+0x7c>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00b      	beq.n	800b5fc <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800b5e4:	4a1a      	ldr	r2, [pc, #104]	@ (800b650 <sen5x_lightup_measurement+0x80>)
 800b5e6:	4b1b      	ldr	r3, [pc, #108]	@ (800b654 <sen5x_lightup_measurement+0x84>)
 800b5e8:	0019      	movs	r1, r3
 800b5ea:	2002      	movs	r0, #2
 800b5ec:	f005 f8a6 	bl	801073c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800b5f0:	1dbc      	adds	r4, r7, #6
 800b5f2:	f000 fcbb 	bl	800bf6c <sen5x_start_measurement_without_pm>
 800b5f6:	0003      	movs	r3, r0
 800b5f8:	8023      	strh	r3, [r4, #0]
 800b5fa:	e00a      	b.n	800b612 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800b5fc:	4a16      	ldr	r2, [pc, #88]	@ (800b658 <sen5x_lightup_measurement+0x88>)
 800b5fe:	4b15      	ldr	r3, [pc, #84]	@ (800b654 <sen5x_lightup_measurement+0x84>)
 800b600:	0019      	movs	r1, r3
 800b602:	2002      	movs	r0, #2
 800b604:	f005 f89a 	bl	801073c <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800b608:	1dbc      	adds	r4, r7, #6
 800b60a:	f000 fc81 	bl	800bf10 <sen5x_start_measurement>
 800b60e:	0003      	movs	r3, r0
 800b610:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800b612:	1dbb      	adds	r3, r7, #6
 800b614:	2200      	movs	r2, #0
 800b616:	5e9b      	ldrsh	r3, [r3, r2]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d008      	beq.n	800b62e <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800b61c:	1dbb      	adds	r3, r7, #6
 800b61e:	2200      	movs	r2, #0
 800b620:	5e9b      	ldrsh	r3, [r3, r2]
 800b622:	4a0e      	ldr	r2, [pc, #56]	@ (800b65c <sen5x_lightup_measurement+0x8c>)
 800b624:	490e      	ldr	r1, [pc, #56]	@ (800b660 <sen5x_lightup_measurement+0x90>)
 800b626:	2001      	movs	r0, #1
 800b628:	f005 f888 	bl	801073c <CreateLine>
 800b62c:	e007      	b.n	800b63e <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800b62e:	f7fb fcf1 	bl	8007014 <showTime>
    Info("sen5x_start_measurement executed");
 800b632:	4a0c      	ldr	r2, [pc, #48]	@ (800b664 <sen5x_lightup_measurement+0x94>)
 800b634:	4b07      	ldr	r3, [pc, #28]	@ (800b654 <sen5x_lightup_measurement+0x84>)
 800b636:	0019      	movs	r1, r3
 800b638:	2002      	movs	r0, #2
 800b63a:	f005 f87f 	bl	801073c <CreateLine>
  }
  return error;
 800b63e:	1dbb      	adds	r3, r7, #6
 800b640:	2200      	movs	r2, #0
 800b642:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b644:	0018      	movs	r0, r3
 800b646:	46bd      	mov	sp, r7
 800b648:	b003      	add	sp, #12
 800b64a:	bd90      	pop	{r4, r7, pc}
 800b64c:	20000e4a 	.word	0x20000e4a
 800b650:	08027e30 	.word	0x08027e30
 800b654:	08027bf8 	.word	0x08027bf8
 800b658:	08027e5c 	.word	0x08027e5c
 800b65c:	08027e7c 	.word	0x08027e7c
 800b660:	08027c64 	.word	0x08027c64
 800b664:	08027eac 	.word	0x08027eac

0800b668 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800b668:	b590      	push	{r4, r7, lr}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800b66e:	1dbb      	adds	r3, r7, #6
 800b670:	2200      	movs	r2, #0
 800b672:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800b674:	4b21      	ldr	r3, [pc, #132]	@ (800b6fc <sen5x_extinguish_measurement+0x94>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01e      	beq.n	800b6ba <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800b67c:	4a20      	ldr	r2, [pc, #128]	@ (800b700 <sen5x_extinguish_measurement+0x98>)
 800b67e:	4b21      	ldr	r3, [pc, #132]	@ (800b704 <sen5x_extinguish_measurement+0x9c>)
 800b680:	0019      	movs	r1, r3
 800b682:	2002      	movs	r0, #2
 800b684:	f005 f85a 	bl	801073c <CreateLine>
    Info("PM measurement is disabled");
 800b688:	4a1f      	ldr	r2, [pc, #124]	@ (800b708 <sen5x_extinguish_measurement+0xa0>)
 800b68a:	4b1e      	ldr	r3, [pc, #120]	@ (800b704 <sen5x_extinguish_measurement+0x9c>)
 800b68c:	0019      	movs	r1, r3
 800b68e:	2002      	movs	r0, #2
 800b690:	f005 f854 	bl	801073c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800b694:	1dbc      	adds	r4, r7, #6
 800b696:	f000 fc69 	bl	800bf6c <sen5x_start_measurement_without_pm>
 800b69a:	0003      	movs	r3, r0
 800b69c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800b69e:	1dbb      	adds	r3, r7, #6
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	5e9b      	ldrsh	r3, [r3, r2]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d022      	beq.n	800b6ee <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800b6a8:	1dbb      	adds	r3, r7, #6
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	5e9b      	ldrsh	r3, [r3, r2]
 800b6ae:	4a17      	ldr	r2, [pc, #92]	@ (800b70c <sen5x_extinguish_measurement+0xa4>)
 800b6b0:	4917      	ldr	r1, [pc, #92]	@ (800b710 <sen5x_extinguish_measurement+0xa8>)
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	f005 f842 	bl	801073c <CreateLine>
 800b6b8:	e019      	b.n	800b6ee <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800b6ba:	1dbc      	adds	r4, r7, #6
 800b6bc:	f000 fc84 	bl	800bfc8 <sen5x_stop_measurement>
 800b6c0:	0003      	movs	r3, r0
 800b6c2:	8023      	strh	r3, [r4, #0]
    showTime();
 800b6c4:	f7fb fca6 	bl	8007014 <showTime>
    Info("sen5x_stop_measurement executed");
 800b6c8:	4a12      	ldr	r2, [pc, #72]	@ (800b714 <sen5x_extinguish_measurement+0xac>)
 800b6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b704 <sen5x_extinguish_measurement+0x9c>)
 800b6cc:	0019      	movs	r1, r3
 800b6ce:	2002      	movs	r0, #2
 800b6d0:	f005 f834 	bl	801073c <CreateLine>
    if (error) {
 800b6d4:	1dbb      	adds	r3, r7, #6
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	5e9b      	ldrsh	r3, [r3, r2]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d007      	beq.n	800b6ee <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800b6de:	1dbb      	adds	r3, r7, #6
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	5e9b      	ldrsh	r3, [r3, r2]
 800b6e4:	4a0c      	ldr	r2, [pc, #48]	@ (800b718 <sen5x_extinguish_measurement+0xb0>)
 800b6e6:	490a      	ldr	r1, [pc, #40]	@ (800b710 <sen5x_extinguish_measurement+0xa8>)
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	f005 f827 	bl	801073c <CreateLine>
    }
  }
  return error;
 800b6ee:	1dbb      	adds	r3, r7, #6
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b6f4:	0018      	movs	r0, r3
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	b003      	add	sp, #12
 800b6fa:	bd90      	pop	{r4, r7, pc}
 800b6fc:	20000e4a 	.word	0x20000e4a
 800b700:	08027ed0 	.word	0x08027ed0
 800b704:	08027bf8 	.word	0x08027bf8
 800b708:	08027f08 	.word	0x08027f08
 800b70c:	08027f24 	.word	0x08027f24
 800b710:	08027c64 	.word	0x08027c64
 800b714:	08027f64 	.word	0x08027f64
 800b718:	08027f84 	.word	0x08027f84

0800b71c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800b71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b71e:	b08d      	sub	sp, #52	@ 0x34
 800b720:	af04      	add	r7, sp, #16
 800b722:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800b724:	261e      	movs	r6, #30
 800b726:	19bb      	adds	r3, r7, r6
 800b728:	2200      	movs	r2, #0
 800b72a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800b72c:	19bc      	adds	r4, r7, r6
 800b72e:	2316      	movs	r3, #22
 800b730:	18fd      	adds	r5, r7, r3
 800b732:	2318      	movs	r3, #24
 800b734:	18fa      	adds	r2, r7, r3
 800b736:	231a      	movs	r3, #26
 800b738:	18f9      	adds	r1, r7, r3
 800b73a:	231c      	movs	r3, #28
 800b73c:	18f8      	adds	r0, r7, r3
 800b73e:	230e      	movs	r3, #14
 800b740:	18fb      	adds	r3, r7, r3
 800b742:	9303      	str	r3, [sp, #12]
 800b744:	2310      	movs	r3, #16
 800b746:	18fb      	adds	r3, r7, r3
 800b748:	9302      	str	r3, [sp, #8]
 800b74a:	2312      	movs	r3, #18
 800b74c:	18fb      	adds	r3, r7, r3
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	2314      	movs	r3, #20
 800b752:	18fb      	adds	r3, r7, r3
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	002b      	movs	r3, r5
 800b758:	f000 fcb8 	bl	800c0cc <sen5x_read_measured_values>
 800b75c:	0003      	movs	r3, r0
 800b75e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800b760:	19bb      	adds	r3, r7, r6
 800b762:	2200      	movs	r2, #0
 800b764:	5e9b      	ldrsh	r3, [r3, r2]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d003      	beq.n	800b772 <sen5x_read_measurement+0x56>
    return error;
 800b76a:	19bb      	adds	r3, r7, r6
 800b76c:	2200      	movs	r2, #0
 800b76e:	5e9b      	ldrsh	r3, [r3, r2]
 800b770:	e02c      	b.n	800b7cc <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800b772:	231c      	movs	r3, #28
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	881a      	ldrh	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800b77c:	231a      	movs	r3, #26
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	881a      	ldrh	r2, [r3, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800b786:	2318      	movs	r3, #24
 800b788:	18fb      	adds	r3, r7, r3
 800b78a:	881a      	ldrh	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800b790:	2316      	movs	r3, #22
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	881a      	ldrh	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800b79a:	2314      	movs	r3, #20
 800b79c:	18fb      	adds	r3, r7, r3
 800b79e:	2200      	movs	r2, #0
 800b7a0:	5e9a      	ldrsh	r2, [r3, r2]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800b7a6:	2312      	movs	r3, #18
 800b7a8:	18fb      	adds	r3, r7, r3
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	5e9a      	ldrsh	r2, [r3, r2]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800b7b2:	2310      	movs	r3, #16
 800b7b4:	18fb      	adds	r3, r7, r3
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	5e9a      	ldrsh	r2, [r3, r2]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800b7be:	230e      	movs	r3, #14
 800b7c0:	18fb      	adds	r3, r7, r3
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	5e9a      	ldrsh	r2, [r3, r2]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	81da      	strh	r2, [r3, #14]
  return 0;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	0018      	movs	r0, r3
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	b009      	add	sp, #36	@ 0x24
 800b7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7d4 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800b7d8:	4b63      	ldr	r3, [pc, #396]	@ (800b968 <sen5x_printvalues+0x194>)
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	4a63      	ldr	r2, [pc, #396]	@ (800b96c <sen5x_printvalues+0x198>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d013      	beq.n	800b80a <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800b7e2:	4b61      	ldr	r3, [pc, #388]	@ (800b968 <sen5x_printvalues+0x194>)
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	f7f5 fef2 	bl	80015d0 <__aeabi_i2f>
 800b7ec:	1c03      	adds	r3, r0, #0
 800b7ee:	4960      	ldr	r1, [pc, #384]	@ (800b970 <sen5x_printvalues+0x19c>)
 800b7f0:	1c18      	adds	r0, r3, #0
 800b7f2:	f7f5 f9ef 	bl	8000bd4 <__aeabi_fdiv>
 800b7f6:	1c03      	adds	r3, r0, #0
 800b7f8:	1c18      	adds	r0, r3, #0
 800b7fa:	f7f7 fe33 	bl	8003464 <__aeabi_f2d>
 800b7fe:	0002      	movs	r2, r0
 800b800:	000b      	movs	r3, r1
 800b802:	495c      	ldr	r1, [pc, #368]	@ (800b974 <sen5x_printvalues+0x1a0>)
 800b804:	0008      	movs	r0, r1
 800b806:	f016 ff21 	bl	802264c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800b80a:	4b57      	ldr	r3, [pc, #348]	@ (800b968 <sen5x_printvalues+0x194>)
 800b80c:	885b      	ldrh	r3, [r3, #2]
 800b80e:	4a57      	ldr	r2, [pc, #348]	@ (800b96c <sen5x_printvalues+0x198>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d013      	beq.n	800b83c <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800b814:	4b54      	ldr	r3, [pc, #336]	@ (800b968 <sen5x_printvalues+0x194>)
 800b816:	885b      	ldrh	r3, [r3, #2]
 800b818:	0018      	movs	r0, r3
 800b81a:	f7f5 fed9 	bl	80015d0 <__aeabi_i2f>
 800b81e:	1c03      	adds	r3, r0, #0
 800b820:	4953      	ldr	r1, [pc, #332]	@ (800b970 <sen5x_printvalues+0x19c>)
 800b822:	1c18      	adds	r0, r3, #0
 800b824:	f7f5 f9d6 	bl	8000bd4 <__aeabi_fdiv>
 800b828:	1c03      	adds	r3, r0, #0
 800b82a:	1c18      	adds	r0, r3, #0
 800b82c:	f7f7 fe1a 	bl	8003464 <__aeabi_f2d>
 800b830:	0002      	movs	r2, r0
 800b832:	000b      	movs	r3, r1
 800b834:	4950      	ldr	r1, [pc, #320]	@ (800b978 <sen5x_printvalues+0x1a4>)
 800b836:	0008      	movs	r0, r1
 800b838:	f016 ff08 	bl	802264c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800b83c:	4b4a      	ldr	r3, [pc, #296]	@ (800b968 <sen5x_printvalues+0x194>)
 800b83e:	889b      	ldrh	r3, [r3, #4]
 800b840:	4a4a      	ldr	r2, [pc, #296]	@ (800b96c <sen5x_printvalues+0x198>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d013      	beq.n	800b86e <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800b846:	4b48      	ldr	r3, [pc, #288]	@ (800b968 <sen5x_printvalues+0x194>)
 800b848:	889b      	ldrh	r3, [r3, #4]
 800b84a:	0018      	movs	r0, r3
 800b84c:	f7f5 fec0 	bl	80015d0 <__aeabi_i2f>
 800b850:	1c03      	adds	r3, r0, #0
 800b852:	4947      	ldr	r1, [pc, #284]	@ (800b970 <sen5x_printvalues+0x19c>)
 800b854:	1c18      	adds	r0, r3, #0
 800b856:	f7f5 f9bd 	bl	8000bd4 <__aeabi_fdiv>
 800b85a:	1c03      	adds	r3, r0, #0
 800b85c:	1c18      	adds	r0, r3, #0
 800b85e:	f7f7 fe01 	bl	8003464 <__aeabi_f2d>
 800b862:	0002      	movs	r2, r0
 800b864:	000b      	movs	r3, r1
 800b866:	4945      	ldr	r1, [pc, #276]	@ (800b97c <sen5x_printvalues+0x1a8>)
 800b868:	0008      	movs	r0, r1
 800b86a:	f016 feef 	bl	802264c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800b86e:	4b3e      	ldr	r3, [pc, #248]	@ (800b968 <sen5x_printvalues+0x194>)
 800b870:	88db      	ldrh	r3, [r3, #6]
 800b872:	4a3e      	ldr	r2, [pc, #248]	@ (800b96c <sen5x_printvalues+0x198>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d013      	beq.n	800b8a0 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800b878:	4b3b      	ldr	r3, [pc, #236]	@ (800b968 <sen5x_printvalues+0x194>)
 800b87a:	88db      	ldrh	r3, [r3, #6]
 800b87c:	0018      	movs	r0, r3
 800b87e:	f7f5 fea7 	bl	80015d0 <__aeabi_i2f>
 800b882:	1c03      	adds	r3, r0, #0
 800b884:	493a      	ldr	r1, [pc, #232]	@ (800b970 <sen5x_printvalues+0x19c>)
 800b886:	1c18      	adds	r0, r3, #0
 800b888:	f7f5 f9a4 	bl	8000bd4 <__aeabi_fdiv>
 800b88c:	1c03      	adds	r3, r0, #0
 800b88e:	1c18      	adds	r0, r3, #0
 800b890:	f7f7 fde8 	bl	8003464 <__aeabi_f2d>
 800b894:	0002      	movs	r2, r0
 800b896:	000b      	movs	r3, r1
 800b898:	4939      	ldr	r1, [pc, #228]	@ (800b980 <sen5x_printvalues+0x1ac>)
 800b89a:	0008      	movs	r0, r1
 800b89c:	f016 fed6 	bl	802264c <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800b8a0:	4b31      	ldr	r3, [pc, #196]	@ (800b968 <sen5x_printvalues+0x194>)
 800b8a2:	2208      	movs	r2, #8
 800b8a4:	5e9b      	ldrsh	r3, [r3, r2]
 800b8a6:	4a37      	ldr	r2, [pc, #220]	@ (800b984 <sen5x_printvalues+0x1b0>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d014      	beq.n	800b8d6 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800b8ac:	4b2e      	ldr	r3, [pc, #184]	@ (800b968 <sen5x_printvalues+0x194>)
 800b8ae:	2208      	movs	r2, #8
 800b8b0:	5e9b      	ldrsh	r3, [r3, r2]
 800b8b2:	0018      	movs	r0, r3
 800b8b4:	f7f5 fe8c 	bl	80015d0 <__aeabi_i2f>
 800b8b8:	1c03      	adds	r3, r0, #0
 800b8ba:	4933      	ldr	r1, [pc, #204]	@ (800b988 <sen5x_printvalues+0x1b4>)
 800b8bc:	1c18      	adds	r0, r3, #0
 800b8be:	f7f5 f989 	bl	8000bd4 <__aeabi_fdiv>
 800b8c2:	1c03      	adds	r3, r0, #0
 800b8c4:	1c18      	adds	r0, r3, #0
 800b8c6:	f7f7 fdcd 	bl	8003464 <__aeabi_f2d>
 800b8ca:	0002      	movs	r2, r0
 800b8cc:	000b      	movs	r3, r1
 800b8ce:	492f      	ldr	r1, [pc, #188]	@ (800b98c <sen5x_printvalues+0x1b8>)
 800b8d0:	0008      	movs	r0, r1
 800b8d2:	f016 febb 	bl	802264c <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800b8d6:	4b24      	ldr	r3, [pc, #144]	@ (800b968 <sen5x_printvalues+0x194>)
 800b8d8:	220a      	movs	r2, #10
 800b8da:	5e9b      	ldrsh	r3, [r3, r2]
 800b8dc:	4a29      	ldr	r2, [pc, #164]	@ (800b984 <sen5x_printvalues+0x1b0>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d014      	beq.n	800b90c <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800b8e2:	4b21      	ldr	r3, [pc, #132]	@ (800b968 <sen5x_printvalues+0x194>)
 800b8e4:	220a      	movs	r2, #10
 800b8e6:	5e9b      	ldrsh	r3, [r3, r2]
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	f7f5 fe71 	bl	80015d0 <__aeabi_i2f>
 800b8ee:	1c03      	adds	r3, r0, #0
 800b8f0:	4927      	ldr	r1, [pc, #156]	@ (800b990 <sen5x_printvalues+0x1bc>)
 800b8f2:	1c18      	adds	r0, r3, #0
 800b8f4:	f7f5 f96e 	bl	8000bd4 <__aeabi_fdiv>
 800b8f8:	1c03      	adds	r3, r0, #0
 800b8fa:	1c18      	adds	r0, r3, #0
 800b8fc:	f7f7 fdb2 	bl	8003464 <__aeabi_f2d>
 800b900:	0002      	movs	r2, r0
 800b902:	000b      	movs	r3, r1
 800b904:	4923      	ldr	r1, [pc, #140]	@ (800b994 <sen5x_printvalues+0x1c0>)
 800b906:	0008      	movs	r0, r1
 800b908:	f016 fea0 	bl	802264c <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800b90c:	4b16      	ldr	r3, [pc, #88]	@ (800b968 <sen5x_printvalues+0x194>)
 800b90e:	220c      	movs	r2, #12
 800b910:	5e9b      	ldrsh	r3, [r3, r2]
 800b912:	4a1c      	ldr	r2, [pc, #112]	@ (800b984 <sen5x_printvalues+0x1b0>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d00e      	beq.n	800b936 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800b918:	4b13      	ldr	r3, [pc, #76]	@ (800b968 <sen5x_printvalues+0x194>)
 800b91a:	220c      	movs	r2, #12
 800b91c:	5e9b      	ldrsh	r3, [r3, r2]
 800b91e:	210a      	movs	r1, #10
 800b920:	0018      	movs	r0, r3
 800b922:	f7f4 fcc9 	bl	80002b8 <__divsi3>
 800b926:	0003      	movs	r3, r0
 800b928:	b21b      	sxth	r3, r3
 800b92a:	001a      	movs	r2, r3
 800b92c:	4b1a      	ldr	r3, [pc, #104]	@ (800b998 <sen5x_printvalues+0x1c4>)
 800b92e:	0011      	movs	r1, r2
 800b930:	0018      	movs	r0, r3
 800b932:	f016 fe8b 	bl	802264c <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800b936:	4b0c      	ldr	r3, [pc, #48]	@ (800b968 <sen5x_printvalues+0x194>)
 800b938:	220e      	movs	r2, #14
 800b93a:	5e9b      	ldrsh	r3, [r3, r2]
 800b93c:	4a11      	ldr	r2, [pc, #68]	@ (800b984 <sen5x_printvalues+0x1b0>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d00e      	beq.n	800b960 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800b942:	4b09      	ldr	r3, [pc, #36]	@ (800b968 <sen5x_printvalues+0x194>)
 800b944:	220e      	movs	r2, #14
 800b946:	5e9b      	ldrsh	r3, [r3, r2]
 800b948:	210a      	movs	r1, #10
 800b94a:	0018      	movs	r0, r3
 800b94c:	f7f4 fcb4 	bl	80002b8 <__divsi3>
 800b950:	0003      	movs	r3, r0
 800b952:	b21b      	sxth	r3, r3
 800b954:	001a      	movs	r2, r3
 800b956:	4b11      	ldr	r3, [pc, #68]	@ (800b99c <sen5x_printvalues+0x1c8>)
 800b958:	0011      	movs	r1, r2
 800b95a:	0018      	movs	r0, r3
 800b95c:	f016 fe76 	bl	802264c <iprintf>
  }
}
 800b960:	46c0      	nop			@ (mov r8, r8)
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	46c0      	nop			@ (mov r8, r8)
 800b968:	20000e5c 	.word	0x20000e5c
 800b96c:	0000ffff 	.word	0x0000ffff
 800b970:	41200000 	.word	0x41200000
 800b974:	08027fb4 	.word	0x08027fb4
 800b978:	08027fe0 	.word	0x08027fe0
 800b97c:	0802800c 	.word	0x0802800c
 800b980:	08028038 	.word	0x08028038
 800b984:	00007fff 	.word	0x00007fff
 800b988:	42c80000 	.word	0x42c80000
 800b98c:	08028064 	.word	0x08028064
 800b990:	43480000 	.word	0x43480000
 800b994:	08028088 	.word	0x08028088
 800b998:	080280b0 	.word	0x080280b0
 800b99c:	080280c8 	.word	0x080280c8

0800b9a0 <sen5xStore>:

void sen5xStore() {
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800b9a4:	4b2e      	ldr	r3, [pc, #184]	@ (800ba60 <sen5xStore+0xc0>)
 800b9a6:	885b      	ldrh	r3, [r3, #2]
 800b9a8:	4a2e      	ldr	r2, [pc, #184]	@ (800ba64 <sen5xStore+0xc4>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d004      	beq.n	800b9b8 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800b9ae:	4b2c      	ldr	r3, [pc, #176]	@ (800ba60 <sen5xStore+0xc0>)
 800b9b0:	885b      	ldrh	r3, [r3, #2]
 800b9b2:	0018      	movs	r0, r3
 800b9b4:	f7f7 ff54 	bl	8003860 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800b9b8:	4b29      	ldr	r3, [pc, #164]	@ (800ba60 <sen5xStore+0xc0>)
 800b9ba:	88db      	ldrh	r3, [r3, #6]
 800b9bc:	4a29      	ldr	r2, [pc, #164]	@ (800ba64 <sen5xStore+0xc4>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d004      	beq.n	800b9cc <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800b9c2:	4b27      	ldr	r3, [pc, #156]	@ (800ba60 <sen5xStore+0xc0>)
 800b9c4:	88db      	ldrh	r3, [r3, #6]
 800b9c6:	0018      	movs	r0, r3
 800b9c8:	f7f7 ff76 	bl	80038b8 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800b9cc:	4b26      	ldr	r3, [pc, #152]	@ (800ba68 <sen5xStore+0xc8>)
 800b9ce:	791b      	ldrb	r3, [r3, #4]
 800b9d0:	2b34      	cmp	r3, #52	@ 0x34
 800b9d2:	d003      	beq.n	800b9dc <sen5xStore+0x3c>
 800b9d4:	4b24      	ldr	r3, [pc, #144]	@ (800ba68 <sen5xStore+0xc8>)
 800b9d6:	791b      	ldrb	r3, [r3, #4]
 800b9d8:	2b35      	cmp	r3, #53	@ 0x35
 800b9da:	d13d      	bne.n	800ba58 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800b9dc:	4b23      	ldr	r3, [pc, #140]	@ (800ba6c <sen5xStore+0xcc>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	4053      	eors	r3, r2
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d103      	bne.n	800b9f2 <sen5xStore+0x52>
 800b9ea:	4b21      	ldr	r3, [pc, #132]	@ (800ba70 <sen5xStore+0xd0>)
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d032      	beq.n	800ba58 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800b9f2:	4b1b      	ldr	r3, [pc, #108]	@ (800ba60 <sen5xStore+0xc0>)
 800b9f4:	220c      	movs	r2, #12
 800b9f6:	5e9b      	ldrsh	r3, [r3, r2]
 800b9f8:	4a1e      	ldr	r2, [pc, #120]	@ (800ba74 <sen5xStore+0xd4>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d019      	beq.n	800ba32 <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800b9fe:	4b18      	ldr	r3, [pc, #96]	@ (800ba60 <sen5xStore+0xc0>)
 800ba00:	220c      	movs	r2, #12
 800ba02:	5e9b      	ldrsh	r3, [r3, r2]
 800ba04:	210a      	movs	r1, #10
 800ba06:	0018      	movs	r0, r3
 800ba08:	f7f4 fc56 	bl	80002b8 <__divsi3>
 800ba0c:	0003      	movs	r3, r0
 800ba0e:	b21b      	sxth	r3, r3
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	0018      	movs	r0, r3
 800ba14:	f003 fe42 	bl	800f69c <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800ba18:	4b11      	ldr	r3, [pc, #68]	@ (800ba60 <sen5xStore+0xc0>)
 800ba1a:	220c      	movs	r2, #12
 800ba1c:	5e9b      	ldrsh	r3, [r3, r2]
 800ba1e:	210a      	movs	r1, #10
 800ba20:	0018      	movs	r0, r3
 800ba22:	f7f4 fc49 	bl	80002b8 <__divsi3>
 800ba26:	0003      	movs	r3, r0
 800ba28:	b21b      	sxth	r3, r3
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	0018      	movs	r0, r3
 800ba2e:	f7f7 fecd 	bl	80037cc <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800ba32:	4b0b      	ldr	r3, [pc, #44]	@ (800ba60 <sen5xStore+0xc0>)
 800ba34:	220e      	movs	r2, #14
 800ba36:	5e9b      	ldrsh	r3, [r3, r2]
 800ba38:	4a0e      	ldr	r2, [pc, #56]	@ (800ba74 <sen5xStore+0xd4>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d00c      	beq.n	800ba58 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800ba3e:	4b08      	ldr	r3, [pc, #32]	@ (800ba60 <sen5xStore+0xc0>)
 800ba40:	220e      	movs	r2, #14
 800ba42:	5e9b      	ldrsh	r3, [r3, r2]
 800ba44:	210a      	movs	r1, #10
 800ba46:	0018      	movs	r0, r3
 800ba48:	f7f4 fc36 	bl	80002b8 <__divsi3>
 800ba4c:	0003      	movs	r3, r0
 800ba4e:	b21b      	sxth	r3, r3
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	0018      	movs	r0, r3
 800ba54:	f7f7 ff5c 	bl	8003910 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800ba58:	46c0      	nop			@ (mov r8, r8)
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	46c0      	nop			@ (mov r8, r8)
 800ba60:	20000e5c 	.word	0x20000e5c
 800ba64:	0000ffff 	.word	0x0000ffff
 800ba68:	20000e4c 	.word	0x20000e4c
 800ba6c:	20000e4a 	.word	0x20000e4a
 800ba70:	20001dd9 	.word	0x20001dd9
 800ba74:	00007fff 	.word	0x00007fff

0800ba78 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800ba78:	b590      	push	{r4, r7, lr}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af02      	add	r7, sp, #8
 800ba7e:	6039      	str	r1, [r7, #0]
 800ba80:	0011      	movs	r1, r2
 800ba82:	1dfb      	adds	r3, r7, #7
 800ba84:	1c02      	adds	r2, r0, #0
 800ba86:	701a      	strb	r2, [r3, #0]
 800ba88:	1d3b      	adds	r3, r7, #4
 800ba8a:	1c0a      	adds	r2, r1, #0
 800ba8c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800ba8e:	1dfb      	adds	r3, r7, #7
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	18db      	adds	r3, r3, r3
 800ba96:	b299      	uxth	r1, r3
 800ba98:	1d3b      	adds	r3, r7, #4
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	4805      	ldr	r0, [pc, #20]	@ (800bab4 <sensirion_i2c_hal_read+0x3c>)
 800baa0:	2464      	movs	r4, #100	@ 0x64
 800baa2:	9400      	str	r4, [sp, #0]
 800baa4:	f006 fefe 	bl	80128a4 <HAL_I2C_Master_Receive>
 800baa8:	0003      	movs	r3, r0
 800baaa:	b25b      	sxtb	r3, r3
}
 800baac:	0018      	movs	r0, r3
 800baae:	46bd      	mov	sp, r7
 800bab0:	b003      	add	sp, #12
 800bab2:	bd90      	pop	{r4, r7, pc}
 800bab4:	20000c20 	.word	0x20000c20

0800bab8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800bab8:	b590      	push	{r4, r7, lr}
 800baba:	b085      	sub	sp, #20
 800babc:	af02      	add	r7, sp, #8
 800babe:	6039      	str	r1, [r7, #0]
 800bac0:	0011      	movs	r1, r2
 800bac2:	1dfb      	adds	r3, r7, #7
 800bac4:	1c02      	adds	r2, r0, #0
 800bac6:	701a      	strb	r2, [r3, #0]
 800bac8:	1d3b      	adds	r3, r7, #4
 800baca:	1c0a      	adds	r2, r1, #0
 800bacc:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800bace:	1dfb      	adds	r3, r7, #7
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	18db      	adds	r3, r3, r3
 800bad6:	b299      	uxth	r1, r3
 800bad8:	1d3b      	adds	r3, r7, #4
 800bada:	881b      	ldrh	r3, [r3, #0]
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	4805      	ldr	r0, [pc, #20]	@ (800baf4 <sensirion_i2c_hal_write+0x3c>)
 800bae0:	2464      	movs	r4, #100	@ 0x64
 800bae2:	9400      	str	r4, [sp, #0]
 800bae4:	f006 fdd6 	bl	8012694 <HAL_I2C_Master_Transmit>
 800bae8:	0003      	movs	r3, r0
 800baea:	b25b      	sxtb	r3, r3
}
 800baec:	0018      	movs	r0, r3
 800baee:	46bd      	mov	sp, r7
 800baf0:	b003      	add	sp, #12
 800baf2:	bd90      	pop	{r4, r7, pc}
 800baf4:	20000c20 	.word	0x20000c20

0800baf8 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	22fa      	movs	r2, #250	@ 0xfa
 800bb04:	0091      	lsls	r1, r2, #2
 800bb06:	0018      	movs	r0, r3
 800bb08:	f7f4 fb4c 	bl	80001a4 <__udivsi3>
 800bb0c:	0003      	movs	r3, r0
 800bb0e:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	22fa      	movs	r2, #250	@ 0xfa
 800bb14:	0091      	lsls	r1, r2, #2
 800bb16:	0018      	movs	r0, r3
 800bb18:	f7f4 fbca 	bl	80002b0 <__aeabi_uidivmod>
 800bb1c:	1e0b      	subs	r3, r1, #0
 800bb1e:	d002      	beq.n	800bb26 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3301      	adds	r3, #1
 800bb24:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	0018      	movs	r0, r3
 800bb2a:	f005 fa5d 	bl	8010fe8 <HAL_Delay>
}
 800bb2e:	46c0      	nop			@ (mov r8, r8)
 800bb30:	46bd      	mov	sp, r7
 800bb32:	b004      	add	sp, #16
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800bb42:	1d3b      	adds	r3, r7, #4
 800bb44:	0018      	movs	r0, r3
 800bb46:	f000 fd01 	bl	800c54c <sen5x_read_device_status>
 800bb4a:	1e03      	subs	r3, r0, #0
 800bb4c:	d007      	beq.n	800bb5e <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800bb4e:	4a28      	ldr	r2, [pc, #160]	@ (800bbf0 <sen5x_check_for_errors+0xb8>)
 800bb50:	4b28      	ldr	r3, [pc, #160]	@ (800bbf4 <sen5x_check_for_errors+0xbc>)
 800bb52:	0019      	movs	r1, r3
 800bb54:	2001      	movs	r0, #1
 800bb56:	f004 fdf1 	bl	801073c <CreateLine>
    return true;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e043      	b.n	800bbe6 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d101      	bne.n	800bb68 <sen5x_check_for_errors+0x30>
    return false;
 800bb64:	2300      	movs	r3, #0
 800bb66:	e03e      	b.n	800bbe6 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	2380      	movs	r3, #128	@ 0x80
 800bb6c:	039b      	lsls	r3, r3, #14
 800bb6e:	4013      	ands	r3, r2
 800bb70:	d005      	beq.n	800bb7e <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800bb72:	4a21      	ldr	r2, [pc, #132]	@ (800bbf8 <sen5x_check_for_errors+0xc0>)
 800bb74:	4b21      	ldr	r3, [pc, #132]	@ (800bbfc <sen5x_check_for_errors+0xc4>)
 800bb76:	0019      	movs	r1, r3
 800bb78:	2003      	movs	r0, #3
 800bb7a:	f004 fddf 	bl	801073c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	2380      	movs	r3, #128	@ 0x80
 800bb82:	031b      	lsls	r3, r3, #12
 800bb84:	4013      	ands	r3, r2
 800bb86:	d005      	beq.n	800bb94 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800bb88:	4a1d      	ldr	r2, [pc, #116]	@ (800bc00 <sen5x_check_for_errors+0xc8>)
 800bb8a:	4b1c      	ldr	r3, [pc, #112]	@ (800bbfc <sen5x_check_for_errors+0xc4>)
 800bb8c:	0019      	movs	r1, r3
 800bb8e:	2003      	movs	r0, #3
 800bb90:	f004 fdd4 	bl	801073c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2280      	movs	r2, #128	@ 0x80
 800bb98:	4013      	ands	r3, r2
 800bb9a:	d005      	beq.n	800bba8 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800bb9c:	4a19      	ldr	r2, [pc, #100]	@ (800bc04 <sen5x_check_for_errors+0xcc>)
 800bb9e:	4b17      	ldr	r3, [pc, #92]	@ (800bbfc <sen5x_check_for_errors+0xc4>)
 800bba0:	0019      	movs	r1, r3
 800bba2:	2003      	movs	r0, #3
 800bba4:	f004 fdca 	bl	801073c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2240      	movs	r2, #64	@ 0x40
 800bbac:	4013      	ands	r3, r2
 800bbae:	d005      	beq.n	800bbbc <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800bbb0:	4a15      	ldr	r2, [pc, #84]	@ (800bc08 <sen5x_check_for_errors+0xd0>)
 800bbb2:	4b12      	ldr	r3, [pc, #72]	@ (800bbfc <sen5x_check_for_errors+0xc4>)
 800bbb4:	0019      	movs	r1, r3
 800bbb6:	2003      	movs	r0, #3
 800bbb8:	f004 fdc0 	bl	801073c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	d005      	beq.n	800bbd0 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800bbc4:	4a11      	ldr	r2, [pc, #68]	@ (800bc0c <sen5x_check_for_errors+0xd4>)
 800bbc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bbfc <sen5x_check_for_errors+0xc4>)
 800bbc8:	0019      	movs	r1, r3
 800bbca:	2003      	movs	r0, #3
 800bbcc:	f004 fdb6 	bl	801073c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2210      	movs	r2, #16
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	d005      	beq.n	800bbe4 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800bbd8:	4a0d      	ldr	r2, [pc, #52]	@ (800bc10 <sen5x_check_for_errors+0xd8>)
 800bbda:	4b08      	ldr	r3, [pc, #32]	@ (800bbfc <sen5x_check_for_errors+0xc4>)
 800bbdc:	0019      	movs	r1, r3
 800bbde:	2003      	movs	r0, #3
 800bbe0:	f004 fdac 	bl	801073c <CreateLine>
  }
  return 1;
 800bbe4:	2301      	movs	r3, #1
}
 800bbe6:	0018      	movs	r0, r3
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	b002      	add	sp, #8
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	46c0      	nop			@ (mov r8, r8)
 800bbf0:	080280e0 	.word	0x080280e0
 800bbf4:	08027c64 	.word	0x08027c64
 800bbf8:	0802810c 	.word	0x0802810c
 800bbfc:	08027c38 	.word	0x08027c38
 800bc00:	0802812c 	.word	0x0802812c
 800bc04:	08028148 	.word	0x08028148
 800bc08:	0802816c 	.word	0x0802816c
 800bc0c:	0802818c 	.word	0x0802818c
 800bc10:	080281a0 	.word	0x080281a0

0800bc14 <set_light_on_state>:

void set_light_on_state(void) {
 800bc14:	b580      	push	{r7, lr}
 800bc16:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800bc18:	4b15      	ldr	r3, [pc, #84]	@ (800bc70 <set_light_on_state+0x5c>)
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	4053      	eors	r3, r2
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d008      	beq.n	800bc38 <set_light_on_state+0x24>
    sen5x_Power_On();
 800bc26:	f7ff fb43 	bl	800b2b0 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800bc2a:	4a12      	ldr	r2, [pc, #72]	@ (800bc74 <set_light_on_state+0x60>)
 800bc2c:	4b12      	ldr	r3, [pc, #72]	@ (800bc78 <set_light_on_state+0x64>)
 800bc2e:	0019      	movs	r1, r3
 800bc30:	2003      	movs	r0, #3
 800bc32:	f004 fd83 	bl	801073c <CreateLine>
 800bc36:	e00a      	b.n	800bc4e <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800bc38:	f005 f9cc 	bl	8010fd4 <HAL_GetTick>
 800bc3c:	0002      	movs	r2, r0
 800bc3e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc7c <set_light_on_state+0x68>)
 800bc40:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800bc42:	4a0f      	ldr	r2, [pc, #60]	@ (800bc80 <set_light_on_state+0x6c>)
 800bc44:	4b0c      	ldr	r3, [pc, #48]	@ (800bc78 <set_light_on_state+0x64>)
 800bc46:	0019      	movs	r1, r3
 800bc48:	2003      	movs	r0, #3
 800bc4a:	f004 fd77 	bl	801073c <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800bc4e:	f7ff fcbf 	bl	800b5d0 <sen5x_lightup_measurement>
 800bc52:	1e03      	subs	r3, r0, #0
 800bc54:	d005      	beq.n	800bc62 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800bc56:	4a0b      	ldr	r2, [pc, #44]	@ (800bc84 <set_light_on_state+0x70>)
 800bc58:	4b0b      	ldr	r3, [pc, #44]	@ (800bc88 <set_light_on_state+0x74>)
 800bc5a:	0019      	movs	r1, r3
 800bc5c:	2001      	movs	r0, #1
 800bc5e:	f004 fd6d 	bl	801073c <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800bc62:	4b0a      	ldr	r3, [pc, #40]	@ (800bc8c <set_light_on_state+0x78>)
 800bc64:	2203      	movs	r2, #3
 800bc66:	701a      	strb	r2, [r3, #0]
}
 800bc68:	46c0      	nop			@ (mov r8, r8)
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	46c0      	nop			@ (mov r8, r8)
 800bc70:	20000e49 	.word	0x20000e49
 800bc74:	080281dc 	.word	0x080281dc
 800bc78:	08027c38 	.word	0x08027c38
 800bc7c:	20000e58 	.word	0x20000e58
 800bc80:	08028208 	.word	0x08028208
 800bc84:	08028220 	.word	0x08028220
 800bc88:	08027c64 	.word	0x08027c64
 800bc8c:	20000099 	.word	0x20000099

0800bc90 <sen5x_statemachine>:

void sen5x_statemachine() {
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800bc96:	1dfb      	adds	r3, r7, #7
 800bc98:	2200      	movs	r2, #0
 800bc9a:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800bc9c:	4b86      	ldr	r3, [pc, #536]	@ (800beb8 <sen5x_statemachine+0x228>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	0018      	movs	r0, r3
 800bca2:	f004 fcf5 	bl	8010690 <TimestampIsReached>
 800bca6:	1e03      	subs	r3, r0, #0
 800bca8:	d100      	bne.n	800bcac <sen5x_statemachine+0x1c>
 800bcaa:	e100      	b.n	800beae <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800bcac:	4b83      	ldr	r3, [pc, #524]	@ (800bebc <sen5x_statemachine+0x22c>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b05      	cmp	r3, #5
 800bcb2:	d900      	bls.n	800bcb6 <sen5x_statemachine+0x26>
 800bcb4:	e0fb      	b.n	800beae <sen5x_statemachine+0x21e>
 800bcb6:	009a      	lsls	r2, r3, #2
 800bcb8:	4b81      	ldr	r3, [pc, #516]	@ (800bec0 <sen5x_statemachine+0x230>)
 800bcba:	18d3      	adds	r3, r2, r3
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800bcc0:	4a80      	ldr	r2, [pc, #512]	@ (800bec4 <sen5x_statemachine+0x234>)
 800bcc2:	4b81      	ldr	r3, [pc, #516]	@ (800bec8 <sen5x_statemachine+0x238>)
 800bcc4:	0019      	movs	r1, r3
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	f004 fd38 	bl	801073c <CreateLine>
      SetPMSensorStatus(false);
 800bccc:	2000      	movs	r0, #0
 800bcce:	f7fe fb87 	bl	800a3e0 <SetPMSensorStatus>
      DisablePMSensor();
 800bcd2:	f7fe fb1d 	bl	800a310 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800bcd6:	f005 f97d 	bl	8010fd4 <HAL_GetTick>
 800bcda:	0003      	movs	r3, r0
 800bcdc:	4a7b      	ldr	r2, [pc, #492]	@ (800becc <sen5x_statemachine+0x23c>)
 800bcde:	189a      	adds	r2, r3, r2
 800bce0:	4b75      	ldr	r3, [pc, #468]	@ (800beb8 <sen5x_statemachine+0x228>)
 800bce2:	601a      	str	r2, [r3, #0]
      break;
 800bce4:	e0e3      	b.n	800beae <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800bce6:	f005 f975 	bl	8010fd4 <HAL_GetTick>
 800bcea:	0003      	movs	r3, r0
 800bcec:	4a78      	ldr	r2, [pc, #480]	@ (800bed0 <sen5x_statemachine+0x240>)
 800bcee:	189a      	adds	r2, r3, r2
 800bcf0:	4b71      	ldr	r3, [pc, #452]	@ (800beb8 <sen5x_statemachine+0x228>)
 800bcf2:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800bcf4:	f7ff ff8e 	bl	800bc14 <set_light_on_state>
      break;
 800bcf8:	e0d9      	b.n	800beae <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800bcfa:	4b70      	ldr	r3, [pc, #448]	@ (800bebc <sen5x_statemachine+0x22c>)
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800bd00:	4b74      	ldr	r3, [pc, #464]	@ (800bed4 <sen5x_statemachine+0x244>)
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b05      	cmp	r3, #5
 800bd06:	d905      	bls.n	800bd14 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800bd08:	4b6c      	ldr	r3, [pc, #432]	@ (800bebc <sen5x_statemachine+0x22c>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800bd0e:	f7ff faff 	bl	800b310 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800bd12:	e0c9      	b.n	800bea8 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800bd14:	f7ff ff10 	bl	800bb38 <sen5x_check_for_errors>
 800bd18:	1e03      	subs	r3, r0, #0
 800bd1a:	d01f      	beq.n	800bd5c <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800bd1c:	f000 fc68 	bl	800c5f0 <sen5x_device_reset>
 800bd20:	1e03      	subs	r3, r0, #0
 800bd22:	d00f      	beq.n	800bd44 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800bd24:	4a6c      	ldr	r2, [pc, #432]	@ (800bed8 <sen5x_statemachine+0x248>)
 800bd26:	4b68      	ldr	r3, [pc, #416]	@ (800bec8 <sen5x_statemachine+0x238>)
 800bd28:	0019      	movs	r1, r3
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	f004 fd06 	bl	801073c <CreateLine>
            sen5xErrors++;
 800bd30:	4b68      	ldr	r3, [pc, #416]	@ (800bed4 <sen5x_statemachine+0x244>)
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	3301      	adds	r3, #1
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	4b66      	ldr	r3, [pc, #408]	@ (800bed4 <sen5x_statemachine+0x244>)
 800bd3a:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800bd3c:	4b5f      	ldr	r3, [pc, #380]	@ (800bebc <sen5x_statemachine+0x22c>)
 800bd3e:	2203      	movs	r2, #3
 800bd40:	701a      	strb	r2, [r3, #0]
 800bd42:	e005      	b.n	800bd50 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800bd44:	4a65      	ldr	r2, [pc, #404]	@ (800bedc <sen5x_statemachine+0x24c>)
 800bd46:	4b66      	ldr	r3, [pc, #408]	@ (800bee0 <sen5x_statemachine+0x250>)
 800bd48:	0019      	movs	r1, r3
 800bd4a:	2002      	movs	r0, #2
 800bd4c:	f004 fcf6 	bl	801073c <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800bd50:	f005 f940 	bl	8010fd4 <HAL_GetTick>
 800bd54:	0002      	movs	r2, r0
 800bd56:	4b58      	ldr	r3, [pc, #352]	@ (800beb8 <sen5x_statemachine+0x228>)
 800bd58:	601a      	str	r2, [r3, #0]
      break;
 800bd5a:	e0a5      	b.n	800bea8 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800bd5c:	4b5d      	ldr	r3, [pc, #372]	@ (800bed4 <sen5x_statemachine+0x244>)
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d100      	bne.n	800bd66 <sen5x_statemachine+0xd6>
 800bd64:	e0a0      	b.n	800bea8 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800bd66:	4b5b      	ldr	r3, [pc, #364]	@ (800bed4 <sen5x_statemachine+0x244>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800bd6c:	4a5d      	ldr	r2, [pc, #372]	@ (800bee4 <sen5x_statemachine+0x254>)
 800bd6e:	4b5e      	ldr	r3, [pc, #376]	@ (800bee8 <sen5x_statemachine+0x258>)
 800bd70:	0019      	movs	r1, r3
 800bd72:	2003      	movs	r0, #3
 800bd74:	f004 fce2 	bl	801073c <CreateLine>
      break;
 800bd78:	e096      	b.n	800bea8 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800bd7a:	1dfb      	adds	r3, r7, #7
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f000 f953 	bl	800c028 <sen5x_read_data_ready>
      if (data_ready) {
 800bd82:	1dfb      	adds	r3, r7, #7
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d02c      	beq.n	800bde4 <sen5x_statemachine+0x154>
        SetPMIndicator();
 800bd8a:	f003 fbe7 	bl	800f55c <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800bd8e:	4b57      	ldr	r3, [pc, #348]	@ (800beec <sen5x_statemachine+0x25c>)
 800bd90:	0018      	movs	r0, r3
 800bd92:	f7ff fcc3 	bl	800b71c <sen5x_read_measurement>
 800bd96:	1e03      	subs	r3, r0, #0
 800bd98:	d00b      	beq.n	800bdb2 <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800bd9a:	4a55      	ldr	r2, [pc, #340]	@ (800bef0 <sen5x_statemachine+0x260>)
 800bd9c:	4b4a      	ldr	r3, [pc, #296]	@ (800bec8 <sen5x_statemachine+0x238>)
 800bd9e:	0019      	movs	r1, r3
 800bda0:	2001      	movs	r0, #1
 800bda2:	f004 fccb 	bl	801073c <CreateLine>
          sen5xErrors++;
 800bda6:	4b4b      	ldr	r3, [pc, #300]	@ (800bed4 <sen5x_statemachine+0x244>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	b2da      	uxtb	r2, r3
 800bdae:	4b49      	ldr	r3, [pc, #292]	@ (800bed4 <sen5x_statemachine+0x244>)
 800bdb0:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800bdb2:	4b50      	ldr	r3, [pc, #320]	@ (800bef4 <sen5x_statemachine+0x264>)
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	4b4e      	ldr	r3, [pc, #312]	@ (800bef4 <sen5x_statemachine+0x264>)
 800bdbc:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800bdbe:	4b4d      	ldr	r3, [pc, #308]	@ (800bef4 <sen5x_statemachine+0x264>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2b1f      	cmp	r3, #31
 800bdc4:	d102      	bne.n	800bdcc <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800bdc6:	4b4b      	ldr	r3, [pc, #300]	@ (800bef4 <sen5x_statemachine+0x264>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800bdcc:	4b49      	ldr	r3, [pc, #292]	@ (800bef4 <sen5x_statemachine+0x264>)
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d901      	bls.n	800bdd8 <sen5x_statemachine+0x148>
          sen5xStore();
 800bdd4:	f7ff fde4 	bl	800b9a0 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800bdd8:	4b46      	ldr	r3, [pc, #280]	@ (800bef4 <sen5x_statemachine+0x264>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d101      	bne.n	800bde4 <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800bde0:	f7ff fcf8 	bl	800b7d4 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800bde4:	4b44      	ldr	r3, [pc, #272]	@ (800bef8 <sen5x_statemachine+0x268>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d103      	bne.n	800bdf4 <sen5x_statemachine+0x164>
 800bdec:	4b41      	ldr	r3, [pc, #260]	@ (800bef4 <sen5x_statemachine+0x264>)
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d95b      	bls.n	800beac <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800bdf4:	4b31      	ldr	r3, [pc, #196]	@ (800bebc <sen5x_statemachine+0x22c>)
 800bdf6:	2204      	movs	r2, #4
 800bdf8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bdfa:	e057      	b.n	800beac <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800bdfc:	f7fb fbb6 	bl	800756c <RTC_GetWeekday>
 800be00:	0003      	movs	r3, r0
 800be02:	2b01      	cmp	r3, #1
 800be04:	d11a      	bne.n	800be3c <sen5x_statemachine+0x1ac>
 800be06:	4b3d      	ldr	r3, [pc, #244]	@ (800befc <sen5x_statemachine+0x26c>)
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2201      	movs	r2, #1
 800be0c:	4053      	eors	r3, r2
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d013      	beq.n	800be3c <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800be14:	f000 f9ee 	bl	800c1f4 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800be18:	4a39      	ldr	r2, [pc, #228]	@ (800bf00 <sen5x_statemachine+0x270>)
 800be1a:	4b31      	ldr	r3, [pc, #196]	@ (800bee0 <sen5x_statemachine+0x250>)
 800be1c:	0019      	movs	r1, r3
 800be1e:	2002      	movs	r0, #2
 800be20:	f004 fc8c 	bl	801073c <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800be24:	f005 f8d6 	bl	8010fd4 <HAL_GetTick>
 800be28:	0003      	movs	r3, r0
 800be2a:	4a36      	ldr	r2, [pc, #216]	@ (800bf04 <sen5x_statemachine+0x274>)
 800be2c:	189a      	adds	r2, r3, r2
 800be2e:	4b22      	ldr	r3, [pc, #136]	@ (800beb8 <sen5x_statemachine+0x228>)
 800be30:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800be32:	4b32      	ldr	r3, [pc, #200]	@ (800befc <sen5x_statemachine+0x26c>)
 800be34:	2201      	movs	r2, #1
 800be36:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800be38:	f7ff fbca 	bl	800b5d0 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800be3c:	4b1f      	ldr	r3, [pc, #124]	@ (800bebc <sen5x_statemachine+0x22c>)
 800be3e:	2205      	movs	r2, #5
 800be40:	701a      	strb	r2, [r3, #0]
      break;
 800be42:	e034      	b.n	800beae <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800be44:	4b2c      	ldr	r3, [pc, #176]	@ (800bef8 <sen5x_statemachine+0x268>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	2201      	movs	r2, #1
 800be4a:	4053      	eors	r3, r2
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d01c      	beq.n	800be8c <sen5x_statemachine+0x1fc>
 800be52:	4b2d      	ldr	r3, [pc, #180]	@ (800bf08 <sen5x_statemachine+0x278>)
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2201      	movs	r2, #1
 800be58:	4053      	eors	r3, r2
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d015      	beq.n	800be8c <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800be60:	f7ff fc02 	bl	800b668 <sen5x_extinguish_measurement>
 800be64:	1e03      	subs	r3, r0, #0
 800be66:	d005      	beq.n	800be74 <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800be68:	4a28      	ldr	r2, [pc, #160]	@ (800bf0c <sen5x_statemachine+0x27c>)
 800be6a:	4b17      	ldr	r3, [pc, #92]	@ (800bec8 <sen5x_statemachine+0x238>)
 800be6c:	0019      	movs	r1, r3
 800be6e:	2001      	movs	r0, #1
 800be70:	f004 fc64 	bl	801073c <CreateLine>
        }
        sen5xSamples = 0;
 800be74:	4b1f      	ldr	r3, [pc, #124]	@ (800bef4 <sen5x_statemachine+0x264>)
 800be76:	2200      	movs	r2, #0
 800be78:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800be7a:	f7ff fa49 	bl	800b310 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800be7e:	2000      	movs	r0, #0
 800be80:	f7fe faae 	bl	800a3e0 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800be84:	4b0d      	ldr	r3, [pc, #52]	@ (800bebc <sen5x_statemachine+0x22c>)
 800be86:	2201      	movs	r2, #1
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	e002      	b.n	800be92 <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800be8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bebc <sen5x_statemachine+0x22c>)
 800be8e:	2203      	movs	r2, #3
 800be90:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800be92:	f003 fb89 	bl	800f5a8 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800be96:	f005 f89d 	bl	8010fd4 <HAL_GetTick>
 800be9a:	0003      	movs	r3, r0
 800be9c:	22fa      	movs	r2, #250	@ 0xfa
 800be9e:	0092      	lsls	r2, r2, #2
 800bea0:	189a      	adds	r2, r3, r2
 800bea2:	4b05      	ldr	r3, [pc, #20]	@ (800beb8 <sen5x_statemachine+0x228>)
 800bea4:	601a      	str	r2, [r3, #0]
    }
  }
}
 800bea6:	e002      	b.n	800beae <sen5x_statemachine+0x21e>
      break;
 800bea8:	46c0      	nop			@ (mov r8, r8)
 800beaa:	e000      	b.n	800beae <sen5x_statemachine+0x21e>
      break;
 800beac:	46c0      	nop			@ (mov r8, r8)
}
 800beae:	46c0      	nop			@ (mov r8, r8)
 800beb0:	46bd      	mov	sp, r7
 800beb2:	b002      	add	sp, #8
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	46c0      	nop			@ (mov r8, r8)
 800beb8:	20000e58 	.word	0x20000e58
 800bebc:	20000099 	.word	0x20000099
 800bec0:	08028c78 	.word	0x08028c78
 800bec4:	0802824c 	.word	0x0802824c
 800bec8:	08027c64 	.word	0x08027c64
 800becc:	002fefd8 	.word	0x002fefd8
 800bed0:	00005910 	.word	0x00005910
 800bed4:	20000e55 	.word	0x20000e55
 800bed8:	0802827c 	.word	0x0802827c
 800bedc:	08028294 	.word	0x08028294
 800bee0:	08027bf8 	.word	0x08027bf8
 800bee4:	080282ac 	.word	0x080282ac
 800bee8:	08027c38 	.word	0x08027c38
 800beec:	20000e5c 	.word	0x20000e5c
 800bef0:	080282c0 	.word	0x080282c0
 800bef4:	20000e54 	.word	0x20000e54
 800bef8:	20001dd9 	.word	0x20001dd9
 800befc:	20000e48 	.word	0x20000e48
 800bf00:	080282f0 	.word	0x080282f0
 800bf04:	00002710 	.word	0x00002710
 800bf08:	20001dda 	.word	0x20001dda
 800bf0c:	08028308 	.word	0x08028308

0800bf10 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800bf10:	b590      	push	{r4, r7, lr}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800bf16:	1dbb      	adds	r3, r7, #6
 800bf18:	2200      	movs	r2, #0
 800bf1a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800bf1c:	1dbc      	adds	r4, r7, #6
 800bf1e:	1dbb      	adds	r3, r7, #6
 800bf20:	8819      	ldrh	r1, [r3, #0]
 800bf22:	003b      	movs	r3, r7
 800bf24:	2221      	movs	r2, #33	@ 0x21
 800bf26:	0018      	movs	r0, r3
 800bf28:	f001 fb56 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800bf2c:	0003      	movs	r3, r0
 800bf2e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800bf30:	1d3c      	adds	r4, r7, #4
 800bf32:	1dbb      	adds	r3, r7, #6
 800bf34:	881a      	ldrh	r2, [r3, #0]
 800bf36:	003b      	movs	r3, r7
 800bf38:	0019      	movs	r1, r3
 800bf3a:	2069      	movs	r0, #105	@ 0x69
 800bf3c:	f001 fbd0 	bl	800d6e0 <sensirion_i2c_write_data>
 800bf40:	0003      	movs	r3, r0
 800bf42:	8023      	strh	r3, [r4, #0]
    if (error) {
 800bf44:	1d3b      	adds	r3, r7, #4
 800bf46:	2200      	movs	r2, #0
 800bf48:	5e9b      	ldrsh	r3, [r3, r2]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d003      	beq.n	800bf56 <sen5x_start_measurement+0x46>
        return error;
 800bf4e:	1d3b      	adds	r3, r7, #4
 800bf50:	2200      	movs	r2, #0
 800bf52:	5e9b      	ldrsh	r3, [r3, r2]
 800bf54:	e004      	b.n	800bf60 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800bf56:	4b04      	ldr	r3, [pc, #16]	@ (800bf68 <sen5x_start_measurement+0x58>)
 800bf58:	0018      	movs	r0, r3
 800bf5a:	f7ff fdcd 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	0018      	movs	r0, r3
 800bf62:	46bd      	mov	sp, r7
 800bf64:	b003      	add	sp, #12
 800bf66:	bd90      	pop	{r4, r7, pc}
 800bf68:	0000c350 	.word	0x0000c350

0800bf6c <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800bf6c:	b590      	push	{r4, r7, lr}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800bf72:	1dbb      	adds	r3, r7, #6
 800bf74:	2200      	movs	r2, #0
 800bf76:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800bf78:	1dbc      	adds	r4, r7, #6
 800bf7a:	1dbb      	adds	r3, r7, #6
 800bf7c:	8819      	ldrh	r1, [r3, #0]
 800bf7e:	003b      	movs	r3, r7
 800bf80:	2237      	movs	r2, #55	@ 0x37
 800bf82:	0018      	movs	r0, r3
 800bf84:	f001 fb28 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800bf88:	0003      	movs	r3, r0
 800bf8a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800bf8c:	1d3c      	adds	r4, r7, #4
 800bf8e:	1dbb      	adds	r3, r7, #6
 800bf90:	881a      	ldrh	r2, [r3, #0]
 800bf92:	003b      	movs	r3, r7
 800bf94:	0019      	movs	r1, r3
 800bf96:	2069      	movs	r0, #105	@ 0x69
 800bf98:	f001 fba2 	bl	800d6e0 <sensirion_i2c_write_data>
 800bf9c:	0003      	movs	r3, r0
 800bf9e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800bfa0:	1d3b      	adds	r3, r7, #4
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	5e9b      	ldrsh	r3, [r3, r2]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800bfaa:	1d3b      	adds	r3, r7, #4
 800bfac:	2200      	movs	r2, #0
 800bfae:	5e9b      	ldrsh	r3, [r3, r2]
 800bfb0:	e004      	b.n	800bfbc <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800bfb2:	4b04      	ldr	r3, [pc, #16]	@ (800bfc4 <sen5x_start_measurement_without_pm+0x58>)
 800bfb4:	0018      	movs	r0, r3
 800bfb6:	f7ff fd9f 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	0018      	movs	r0, r3
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	b003      	add	sp, #12
 800bfc2:	bd90      	pop	{r4, r7, pc}
 800bfc4:	0000c350 	.word	0x0000c350

0800bfc8 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800bfce:	1dbb      	adds	r3, r7, #6
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800bfd4:	1dbc      	adds	r4, r7, #6
 800bfd6:	2382      	movs	r3, #130	@ 0x82
 800bfd8:	005a      	lsls	r2, r3, #1
 800bfda:	1dbb      	adds	r3, r7, #6
 800bfdc:	8819      	ldrh	r1, [r3, #0]
 800bfde:	003b      	movs	r3, r7
 800bfe0:	0018      	movs	r0, r3
 800bfe2:	f001 faf9 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800bfe6:	0003      	movs	r3, r0
 800bfe8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800bfea:	1d3c      	adds	r4, r7, #4
 800bfec:	1dbb      	adds	r3, r7, #6
 800bfee:	881a      	ldrh	r2, [r3, #0]
 800bff0:	003b      	movs	r3, r7
 800bff2:	0019      	movs	r1, r3
 800bff4:	2069      	movs	r0, #105	@ 0x69
 800bff6:	f001 fb73 	bl	800d6e0 <sensirion_i2c_write_data>
 800bffa:	0003      	movs	r3, r0
 800bffc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800bffe:	1d3b      	adds	r3, r7, #4
 800c000:	2200      	movs	r2, #0
 800c002:	5e9b      	ldrsh	r3, [r3, r2]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d003      	beq.n	800c010 <sen5x_stop_measurement+0x48>
        return error;
 800c008:	1d3b      	adds	r3, r7, #4
 800c00a:	2200      	movs	r2, #0
 800c00c:	5e9b      	ldrsh	r3, [r3, r2]
 800c00e:	e004      	b.n	800c01a <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800c010:	4b04      	ldr	r3, [pc, #16]	@ (800c024 <sen5x_stop_measurement+0x5c>)
 800c012:	0018      	movs	r0, r3
 800c014:	f7ff fd70 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	0018      	movs	r0, r3
 800c01c:	46bd      	mov	sp, r7
 800c01e:	b003      	add	sp, #12
 800c020:	bd90      	pop	{r4, r7, pc}
 800c022:	46c0      	nop			@ (mov r8, r8)
 800c024:	00030d40 	.word	0x00030d40

0800c028 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800c028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800c030:	250e      	movs	r5, #14
 800c032:	197b      	adds	r3, r7, r5
 800c034:	2200      	movs	r2, #0
 800c036:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800c038:	197c      	adds	r4, r7, r5
 800c03a:	4a22      	ldr	r2, [pc, #136]	@ (800c0c4 <sen5x_read_data_ready+0x9c>)
 800c03c:	197b      	adds	r3, r7, r5
 800c03e:	8819      	ldrh	r1, [r3, #0]
 800c040:	2308      	movs	r3, #8
 800c042:	18fb      	adds	r3, r7, r3
 800c044:	0018      	movs	r0, r3
 800c046:	f001 fac7 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c04a:	0003      	movs	r3, r0
 800c04c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c04e:	260c      	movs	r6, #12
 800c050:	19bc      	adds	r4, r7, r6
 800c052:	197b      	adds	r3, r7, r5
 800c054:	881a      	ldrh	r2, [r3, #0]
 800c056:	2308      	movs	r3, #8
 800c058:	18fb      	adds	r3, r7, r3
 800c05a:	0019      	movs	r1, r3
 800c05c:	2069      	movs	r0, #105	@ 0x69
 800c05e:	f001 fb3f 	bl	800d6e0 <sensirion_i2c_write_data>
 800c062:	0003      	movs	r3, r0
 800c064:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c066:	19bb      	adds	r3, r7, r6
 800c068:	2200      	movs	r2, #0
 800c06a:	5e9b      	ldrsh	r3, [r3, r2]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <sen5x_read_data_ready+0x50>
        return error;
 800c070:	19bb      	adds	r3, r7, r6
 800c072:	2200      	movs	r2, #0
 800c074:	5e9b      	ldrsh	r3, [r3, r2]
 800c076:	e020      	b.n	800c0ba <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c078:	4b13      	ldr	r3, [pc, #76]	@ (800c0c8 <sen5x_read_data_ready+0xa0>)
 800c07a:	0018      	movs	r0, r3
 800c07c:	f7ff fd3c 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800c080:	250c      	movs	r5, #12
 800c082:	197c      	adds	r4, r7, r5
 800c084:	2308      	movs	r3, #8
 800c086:	18fb      	adds	r3, r7, r3
 800c088:	2202      	movs	r2, #2
 800c08a:	0019      	movs	r1, r3
 800c08c:	2069      	movs	r0, #105	@ 0x69
 800c08e:	f001 fb3f 	bl	800d710 <sensirion_i2c_read_data_inplace>
 800c092:	0003      	movs	r3, r0
 800c094:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c096:	197b      	adds	r3, r7, r5
 800c098:	2200      	movs	r2, #0
 800c09a:	5e9b      	ldrsh	r3, [r3, r2]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d003      	beq.n	800c0a8 <sen5x_read_data_ready+0x80>
        return error;
 800c0a0:	197b      	adds	r3, r7, r5
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	5e9b      	ldrsh	r3, [r3, r2]
 800c0a6:	e008      	b.n	800c0ba <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800c0a8:	2308      	movs	r3, #8
 800c0aa:	18fb      	adds	r3, r7, r3
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	1e5a      	subs	r2, r3, #1
 800c0b0:	4193      	sbcs	r3, r2
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	b005      	add	sp, #20
 800c0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c2:	46c0      	nop			@ (mov r8, r8)
 800c0c4:	00000202 	.word	0x00000202
 800c0c8:	00004e20 	.word	0x00004e20

0800c0cc <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800c0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ce:	b08d      	sub	sp, #52	@ 0x34
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800c0da:	252e      	movs	r5, #46	@ 0x2e
 800c0dc:	197b      	adds	r3, r7, r5
 800c0de:	2200      	movs	r2, #0
 800c0e0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800c0e2:	197c      	adds	r4, r7, r5
 800c0e4:	23f1      	movs	r3, #241	@ 0xf1
 800c0e6:	009a      	lsls	r2, r3, #2
 800c0e8:	197b      	adds	r3, r7, r5
 800c0ea:	8819      	ldrh	r1, [r3, #0]
 800c0ec:	2314      	movs	r3, #20
 800c0ee:	18fb      	adds	r3, r7, r3
 800c0f0:	0018      	movs	r0, r3
 800c0f2:	f001 fa71 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c0f6:	0003      	movs	r3, r0
 800c0f8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c0fa:	262c      	movs	r6, #44	@ 0x2c
 800c0fc:	19bc      	adds	r4, r7, r6
 800c0fe:	197b      	adds	r3, r7, r5
 800c100:	881a      	ldrh	r2, [r3, #0]
 800c102:	2314      	movs	r3, #20
 800c104:	18fb      	adds	r3, r7, r3
 800c106:	0019      	movs	r1, r3
 800c108:	2069      	movs	r0, #105	@ 0x69
 800c10a:	f001 fae9 	bl	800d6e0 <sensirion_i2c_write_data>
 800c10e:	0003      	movs	r3, r0
 800c110:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c112:	19bb      	adds	r3, r7, r6
 800c114:	2200      	movs	r2, #0
 800c116:	5e9b      	ldrsh	r3, [r3, r2]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <sen5x_read_measured_values+0x58>
        return error;
 800c11c:	19bb      	adds	r3, r7, r6
 800c11e:	2200      	movs	r2, #0
 800c120:	5e9b      	ldrsh	r3, [r3, r2]
 800c122:	e060      	b.n	800c1e6 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c124:	4b32      	ldr	r3, [pc, #200]	@ (800c1f0 <sen5x_read_measured_values+0x124>)
 800c126:	0018      	movs	r0, r3
 800c128:	f7ff fce6 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800c12c:	252c      	movs	r5, #44	@ 0x2c
 800c12e:	197c      	adds	r4, r7, r5
 800c130:	2314      	movs	r3, #20
 800c132:	18fb      	adds	r3, r7, r3
 800c134:	2210      	movs	r2, #16
 800c136:	0019      	movs	r1, r3
 800c138:	2069      	movs	r0, #105	@ 0x69
 800c13a:	f001 fae9 	bl	800d710 <sensirion_i2c_read_data_inplace>
 800c13e:	0003      	movs	r3, r0
 800c140:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c142:	197b      	adds	r3, r7, r5
 800c144:	2200      	movs	r2, #0
 800c146:	5e9b      	ldrsh	r3, [r3, r2]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <sen5x_read_measured_values+0x88>
        return error;
 800c14c:	197b      	adds	r3, r7, r5
 800c14e:	2200      	movs	r2, #0
 800c150:	5e9b      	ldrsh	r3, [r3, r2]
 800c152:	e048      	b.n	800c1e6 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800c154:	2414      	movs	r4, #20
 800c156:	193b      	adds	r3, r7, r4
 800c158:	0018      	movs	r0, r3
 800c15a:	f000 fa79 	bl	800c650 <sensirion_common_bytes_to_uint16_t>
 800c15e:	0003      	movs	r3, r0
 800c160:	001a      	movs	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800c166:	193b      	adds	r3, r7, r4
 800c168:	3302      	adds	r3, #2
 800c16a:	0018      	movs	r0, r3
 800c16c:	f000 fa70 	bl	800c650 <sensirion_common_bytes_to_uint16_t>
 800c170:	0003      	movs	r3, r0
 800c172:	001a      	movs	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800c178:	193b      	adds	r3, r7, r4
 800c17a:	3304      	adds	r3, #4
 800c17c:	0018      	movs	r0, r3
 800c17e:	f000 fa67 	bl	800c650 <sensirion_common_bytes_to_uint16_t>
 800c182:	0003      	movs	r3, r0
 800c184:	001a      	movs	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800c18a:	193b      	adds	r3, r7, r4
 800c18c:	3306      	adds	r3, #6
 800c18e:	0018      	movs	r0, r3
 800c190:	f000 fa5e 	bl	800c650 <sensirion_common_bytes_to_uint16_t>
 800c194:	0003      	movs	r3, r0
 800c196:	001a      	movs	r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800c19c:	193b      	adds	r3, r7, r4
 800c19e:	3308      	adds	r3, #8
 800c1a0:	0018      	movs	r0, r3
 800c1a2:	f000 fa81 	bl	800c6a8 <sensirion_common_bytes_to_int16_t>
 800c1a6:	0003      	movs	r3, r0
 800c1a8:	001a      	movs	r2, r3
 800c1aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1ac:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800c1ae:	193b      	adds	r3, r7, r4
 800c1b0:	330a      	adds	r3, #10
 800c1b2:	0018      	movs	r0, r3
 800c1b4:	f000 fa78 	bl	800c6a8 <sensirion_common_bytes_to_int16_t>
 800c1b8:	0003      	movs	r3, r0
 800c1ba:	001a      	movs	r2, r3
 800c1bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1be:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800c1c0:	193b      	adds	r3, r7, r4
 800c1c2:	330c      	adds	r3, #12
 800c1c4:	0018      	movs	r0, r3
 800c1c6:	f000 fa6f 	bl	800c6a8 <sensirion_common_bytes_to_int16_t>
 800c1ca:	0003      	movs	r3, r0
 800c1cc:	001a      	movs	r2, r3
 800c1ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1d0:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800c1d2:	193b      	adds	r3, r7, r4
 800c1d4:	330e      	adds	r3, #14
 800c1d6:	0018      	movs	r0, r3
 800c1d8:	f000 fa66 	bl	800c6a8 <sensirion_common_bytes_to_int16_t>
 800c1dc:	0003      	movs	r3, r0
 800c1de:	001a      	movs	r2, r3
 800c1e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1e2:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	b00d      	add	sp, #52	@ 0x34
 800c1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ee:	46c0      	nop			@ (mov r8, r8)
 800c1f0:	00004e20 	.word	0x00004e20

0800c1f4 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800c1f4:	b590      	push	{r4, r7, lr}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c1fa:	1dbb      	adds	r3, r7, #6
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800c200:	1dbc      	adds	r4, r7, #6
 800c202:	4a12      	ldr	r2, [pc, #72]	@ (800c24c <sen5x_start_fan_cleaning+0x58>)
 800c204:	1dbb      	adds	r3, r7, #6
 800c206:	8819      	ldrh	r1, [r3, #0]
 800c208:	003b      	movs	r3, r7
 800c20a:	0018      	movs	r0, r3
 800c20c:	f001 f9e4 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c210:	0003      	movs	r3, r0
 800c212:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c214:	1d3c      	adds	r4, r7, #4
 800c216:	1dbb      	adds	r3, r7, #6
 800c218:	881a      	ldrh	r2, [r3, #0]
 800c21a:	003b      	movs	r3, r7
 800c21c:	0019      	movs	r1, r3
 800c21e:	2069      	movs	r0, #105	@ 0x69
 800c220:	f001 fa5e 	bl	800d6e0 <sensirion_i2c_write_data>
 800c224:	0003      	movs	r3, r0
 800c226:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c228:	1d3b      	adds	r3, r7, #4
 800c22a:	2200      	movs	r2, #0
 800c22c:	5e9b      	ldrsh	r3, [r3, r2]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <sen5x_start_fan_cleaning+0x46>
        return error;
 800c232:	1d3b      	adds	r3, r7, #4
 800c234:	2200      	movs	r2, #0
 800c236:	5e9b      	ldrsh	r3, [r3, r2]
 800c238:	e004      	b.n	800c244 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800c23a:	4b05      	ldr	r3, [pc, #20]	@ (800c250 <sen5x_start_fan_cleaning+0x5c>)
 800c23c:	0018      	movs	r0, r3
 800c23e:	f7ff fc5b 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c242:	2300      	movs	r3, #0
}
 800c244:	0018      	movs	r0, r3
 800c246:	46bd      	mov	sp, r7
 800c248:	b003      	add	sp, #12
 800c24a:	bd90      	pop	{r4, r7, pc}
 800c24c:	00005607 	.word	0x00005607
 800c250:	00004e20 	.word	0x00004e20

0800c254 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800c254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	0004      	movs	r4, r0
 800c25c:	0008      	movs	r0, r1
 800c25e:	0011      	movs	r1, r2
 800c260:	1dbb      	adds	r3, r7, #6
 800c262:	1c22      	adds	r2, r4, #0
 800c264:	801a      	strh	r2, [r3, #0]
 800c266:	1d3b      	adds	r3, r7, #4
 800c268:	1c02      	adds	r2, r0, #0
 800c26a:	801a      	strh	r2, [r3, #0]
 800c26c:	1cbb      	adds	r3, r7, #2
 800c26e:	1c0a      	adds	r2, r1, #0
 800c270:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800c272:	2516      	movs	r5, #22
 800c274:	197b      	adds	r3, r7, r5
 800c276:	2200      	movs	r2, #0
 800c278:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800c27a:	197c      	adds	r4, r7, r5
 800c27c:	4a25      	ldr	r2, [pc, #148]	@ (800c314 <sen5x_set_temperature_offset_parameters+0xc0>)
 800c27e:	197b      	adds	r3, r7, r5
 800c280:	8819      	ldrh	r1, [r3, #0]
 800c282:	2608      	movs	r6, #8
 800c284:	19bb      	adds	r3, r7, r6
 800c286:	0018      	movs	r0, r3
 800c288:	f001 f9a6 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c28c:	0003      	movs	r3, r0
 800c28e:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800c290:	197c      	adds	r4, r7, r5
 800c292:	1dbb      	adds	r3, r7, #6
 800c294:	2200      	movs	r2, #0
 800c296:	5e9a      	ldrsh	r2, [r3, r2]
 800c298:	197b      	adds	r3, r7, r5
 800c29a:	8819      	ldrh	r1, [r3, #0]
 800c29c:	19bb      	adds	r3, r7, r6
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f001 fa05 	bl	800d6ae <sensirion_i2c_add_int16_t_to_buffer>
 800c2a4:	0003      	movs	r3, r0
 800c2a6:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800c2a8:	197c      	adds	r4, r7, r5
 800c2aa:	1d3b      	adds	r3, r7, #4
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	5e9a      	ldrsh	r2, [r3, r2]
 800c2b0:	197b      	adds	r3, r7, r5
 800c2b2:	8819      	ldrh	r1, [r3, #0]
 800c2b4:	19bb      	adds	r3, r7, r6
 800c2b6:	0018      	movs	r0, r3
 800c2b8:	f001 f9f9 	bl	800d6ae <sensirion_i2c_add_int16_t_to_buffer>
 800c2bc:	0003      	movs	r3, r0
 800c2be:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800c2c0:	197c      	adds	r4, r7, r5
 800c2c2:	1cbb      	adds	r3, r7, #2
 800c2c4:	881a      	ldrh	r2, [r3, #0]
 800c2c6:	197b      	adds	r3, r7, r5
 800c2c8:	8819      	ldrh	r1, [r3, #0]
 800c2ca:	19bb      	adds	r3, r7, r6
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	f001 f9af 	bl	800d630 <sensirion_i2c_add_uint16_t_to_buffer>
 800c2d2:	0003      	movs	r3, r0
 800c2d4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c2d6:	2214      	movs	r2, #20
 800c2d8:	18bc      	adds	r4, r7, r2
 800c2da:	197b      	adds	r3, r7, r5
 800c2dc:	881a      	ldrh	r2, [r3, #0]
 800c2de:	19bb      	adds	r3, r7, r6
 800c2e0:	0019      	movs	r1, r3
 800c2e2:	2069      	movs	r0, #105	@ 0x69
 800c2e4:	f001 f9fc 	bl	800d6e0 <sensirion_i2c_write_data>
 800c2e8:	0003      	movs	r3, r0
 800c2ea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c2ec:	2214      	movs	r2, #20
 800c2ee:	18bb      	adds	r3, r7, r2
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	5e5b      	ldrsh	r3, [r3, r1]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800c2f8:	18bb      	adds	r3, r7, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	5e9b      	ldrsh	r3, [r3, r2]
 800c2fe:	e004      	b.n	800c30a <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800c300:	4b05      	ldr	r3, [pc, #20]	@ (800c318 <sen5x_set_temperature_offset_parameters+0xc4>)
 800c302:	0018      	movs	r0, r3
 800c304:	f7ff fbf8 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	0018      	movs	r0, r3
 800c30c:	46bd      	mov	sp, r7
 800c30e:	b007      	add	sp, #28
 800c310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c312:	46c0      	nop			@ (mov r8, r8)
 800c314:	000060b2 	.word	0x000060b2
 800c318:	00004e20 	.word	0x00004e20

0800c31c <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800c31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c31e:	b091      	sub	sp, #68	@ 0x44
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	000a      	movs	r2, r1
 800c326:	1cfb      	adds	r3, r7, #3
 800c328:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800c32a:	253e      	movs	r5, #62	@ 0x3e
 800c32c:	197b      	adds	r3, r7, r5
 800c32e:	2200      	movs	r2, #0
 800c330:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800c332:	197c      	adds	r4, r7, r5
 800c334:	4a22      	ldr	r2, [pc, #136]	@ (800c3c0 <sen5x_get_product_name+0xa4>)
 800c336:	197b      	adds	r3, r7, r5
 800c338:	8819      	ldrh	r1, [r3, #0]
 800c33a:	230c      	movs	r3, #12
 800c33c:	18fb      	adds	r3, r7, r3
 800c33e:	0018      	movs	r0, r3
 800c340:	f001 f94a 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c344:	0003      	movs	r3, r0
 800c346:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c348:	263c      	movs	r6, #60	@ 0x3c
 800c34a:	19bc      	adds	r4, r7, r6
 800c34c:	197b      	adds	r3, r7, r5
 800c34e:	881a      	ldrh	r2, [r3, #0]
 800c350:	230c      	movs	r3, #12
 800c352:	18fb      	adds	r3, r7, r3
 800c354:	0019      	movs	r1, r3
 800c356:	2069      	movs	r0, #105	@ 0x69
 800c358:	f001 f9c2 	bl	800d6e0 <sensirion_i2c_write_data>
 800c35c:	0003      	movs	r3, r0
 800c35e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c360:	19bb      	adds	r3, r7, r6
 800c362:	2200      	movs	r2, #0
 800c364:	5e9b      	ldrsh	r3, [r3, r2]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <sen5x_get_product_name+0x56>
        return error;
 800c36a:	19bb      	adds	r3, r7, r6
 800c36c:	2200      	movs	r2, #0
 800c36e:	5e9b      	ldrsh	r3, [r3, r2]
 800c370:	e021      	b.n	800c3b6 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800c372:	4b14      	ldr	r3, [pc, #80]	@ (800c3c4 <sen5x_get_product_name+0xa8>)
 800c374:	0018      	movs	r0, r3
 800c376:	f7ff fbbf 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800c37a:	253c      	movs	r5, #60	@ 0x3c
 800c37c:	197c      	adds	r4, r7, r5
 800c37e:	230c      	movs	r3, #12
 800c380:	18fb      	adds	r3, r7, r3
 800c382:	2220      	movs	r2, #32
 800c384:	0019      	movs	r1, r3
 800c386:	2069      	movs	r0, #105	@ 0x69
 800c388:	f001 f9c2 	bl	800d710 <sensirion_i2c_read_data_inplace>
 800c38c:	0003      	movs	r3, r0
 800c38e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c390:	197b      	adds	r3, r7, r5
 800c392:	2200      	movs	r2, #0
 800c394:	5e9b      	ldrsh	r3, [r3, r2]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <sen5x_get_product_name+0x86>
        return error;
 800c39a:	197b      	adds	r3, r7, r5
 800c39c:	2200      	movs	r2, #0
 800c39e:	5e9b      	ldrsh	r3, [r3, r2]
 800c3a0:	e009      	b.n	800c3b6 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800c3a2:	1cfb      	adds	r3, r7, #3
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	6879      	ldr	r1, [r7, #4]
 800c3aa:	230c      	movs	r3, #12
 800c3ac:	18fb      	adds	r3, r7, r3
 800c3ae:	0018      	movs	r0, r3
 800c3b0:	f000 f988 	bl	800c6c4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	b011      	add	sp, #68	@ 0x44
 800c3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3be:	46c0      	nop			@ (mov r8, r8)
 800c3c0:	0000d014 	.word	0x0000d014
 800c3c4:	0000c350 	.word	0x0000c350

0800c3c8 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800c3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ca:	b091      	sub	sp, #68	@ 0x44
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	000a      	movs	r2, r1
 800c3d2:	1cfb      	adds	r3, r7, #3
 800c3d4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800c3d6:	253e      	movs	r5, #62	@ 0x3e
 800c3d8:	197b      	adds	r3, r7, r5
 800c3da:	2200      	movs	r2, #0
 800c3dc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800c3de:	197c      	adds	r4, r7, r5
 800c3e0:	4a22      	ldr	r2, [pc, #136]	@ (800c46c <sen5x_get_serial_number+0xa4>)
 800c3e2:	197b      	adds	r3, r7, r5
 800c3e4:	8819      	ldrh	r1, [r3, #0]
 800c3e6:	230c      	movs	r3, #12
 800c3e8:	18fb      	adds	r3, r7, r3
 800c3ea:	0018      	movs	r0, r3
 800c3ec:	f001 f8f4 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c3f0:	0003      	movs	r3, r0
 800c3f2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c3f4:	263c      	movs	r6, #60	@ 0x3c
 800c3f6:	19bc      	adds	r4, r7, r6
 800c3f8:	197b      	adds	r3, r7, r5
 800c3fa:	881a      	ldrh	r2, [r3, #0]
 800c3fc:	230c      	movs	r3, #12
 800c3fe:	18fb      	adds	r3, r7, r3
 800c400:	0019      	movs	r1, r3
 800c402:	2069      	movs	r0, #105	@ 0x69
 800c404:	f001 f96c 	bl	800d6e0 <sensirion_i2c_write_data>
 800c408:	0003      	movs	r3, r0
 800c40a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c40c:	19bb      	adds	r3, r7, r6
 800c40e:	2200      	movs	r2, #0
 800c410:	5e9b      	ldrsh	r3, [r3, r2]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <sen5x_get_serial_number+0x56>
        return error;
 800c416:	19bb      	adds	r3, r7, r6
 800c418:	2200      	movs	r2, #0
 800c41a:	5e9b      	ldrsh	r3, [r3, r2]
 800c41c:	e021      	b.n	800c462 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800c41e:	4b14      	ldr	r3, [pc, #80]	@ (800c470 <sen5x_get_serial_number+0xa8>)
 800c420:	0018      	movs	r0, r3
 800c422:	f7ff fb69 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800c426:	253c      	movs	r5, #60	@ 0x3c
 800c428:	197c      	adds	r4, r7, r5
 800c42a:	230c      	movs	r3, #12
 800c42c:	18fb      	adds	r3, r7, r3
 800c42e:	2220      	movs	r2, #32
 800c430:	0019      	movs	r1, r3
 800c432:	2069      	movs	r0, #105	@ 0x69
 800c434:	f001 f96c 	bl	800d710 <sensirion_i2c_read_data_inplace>
 800c438:	0003      	movs	r3, r0
 800c43a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c43c:	197b      	adds	r3, r7, r5
 800c43e:	2200      	movs	r2, #0
 800c440:	5e9b      	ldrsh	r3, [r3, r2]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d003      	beq.n	800c44e <sen5x_get_serial_number+0x86>
        return error;
 800c446:	197b      	adds	r3, r7, r5
 800c448:	2200      	movs	r2, #0
 800c44a:	5e9b      	ldrsh	r3, [r3, r2]
 800c44c:	e009      	b.n	800c462 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800c44e:	1cfb      	adds	r3, r7, #3
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	b29a      	uxth	r2, r3
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	230c      	movs	r3, #12
 800c458:	18fb      	adds	r3, r7, r3
 800c45a:	0018      	movs	r0, r3
 800c45c:	f000 f932 	bl	800c6c4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800c460:	2300      	movs	r3, #0
}
 800c462:	0018      	movs	r0, r3
 800c464:	46bd      	mov	sp, r7
 800c466:	b011      	add	sp, #68	@ 0x44
 800c468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c46a:	46c0      	nop			@ (mov r8, r8)
 800c46c:	0000d033 	.word	0x0000d033
 800c470:	0000c350 	.word	0x0000c350

0800c474 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800c474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c476:	b089      	sub	sp, #36	@ 0x24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800c482:	251e      	movs	r5, #30
 800c484:	197b      	adds	r3, r7, r5
 800c486:	2200      	movs	r2, #0
 800c488:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800c48a:	197c      	adds	r4, r7, r5
 800c48c:	23d1      	movs	r3, #209	@ 0xd1
 800c48e:	021a      	lsls	r2, r3, #8
 800c490:	197b      	adds	r3, r7, r5
 800c492:	8819      	ldrh	r1, [r3, #0]
 800c494:	2310      	movs	r3, #16
 800c496:	18fb      	adds	r3, r7, r3
 800c498:	0018      	movs	r0, r3
 800c49a:	f001 f89d 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c49e:	0003      	movs	r3, r0
 800c4a0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c4a2:	261c      	movs	r6, #28
 800c4a4:	19bc      	adds	r4, r7, r6
 800c4a6:	197b      	adds	r3, r7, r5
 800c4a8:	881a      	ldrh	r2, [r3, #0]
 800c4aa:	2310      	movs	r3, #16
 800c4ac:	18fb      	adds	r3, r7, r3
 800c4ae:	0019      	movs	r1, r3
 800c4b0:	2069      	movs	r0, #105	@ 0x69
 800c4b2:	f001 f915 	bl	800d6e0 <sensirion_i2c_write_data>
 800c4b6:	0003      	movs	r3, r0
 800c4b8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c4ba:	19bb      	adds	r3, r7, r6
 800c4bc:	2200      	movs	r2, #0
 800c4be:	5e9b      	ldrsh	r3, [r3, r2]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d003      	beq.n	800c4cc <sen5x_get_version+0x58>
        return error;
 800c4c4:	19bb      	adds	r3, r7, r6
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	5e9b      	ldrsh	r3, [r3, r2]
 800c4ca:	e038      	b.n	800c53e <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c4cc:	4b1e      	ldr	r3, [pc, #120]	@ (800c548 <sen5x_get_version+0xd4>)
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	f7ff fb12 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800c4d4:	251c      	movs	r5, #28
 800c4d6:	197c      	adds	r4, r7, r5
 800c4d8:	2310      	movs	r3, #16
 800c4da:	18fb      	adds	r3, r7, r3
 800c4dc:	2208      	movs	r2, #8
 800c4de:	0019      	movs	r1, r3
 800c4e0:	2069      	movs	r0, #105	@ 0x69
 800c4e2:	f001 f915 	bl	800d710 <sensirion_i2c_read_data_inplace>
 800c4e6:	0003      	movs	r3, r0
 800c4e8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c4ea:	197b      	adds	r3, r7, r5
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	5e9b      	ldrsh	r3, [r3, r2]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d003      	beq.n	800c4fc <sen5x_get_version+0x88>
        return error;
 800c4f4:	197b      	adds	r3, r7, r5
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	5e9b      	ldrsh	r3, [r3, r2]
 800c4fa:	e020      	b.n	800c53e <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800c4fc:	2110      	movs	r1, #16
 800c4fe:	187b      	adds	r3, r7, r1
 800c500:	781a      	ldrb	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800c506:	187b      	adds	r3, r7, r1
 800c508:	785a      	ldrb	r2, [r3, #1]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800c50e:	187b      	adds	r3, r7, r1
 800c510:	789b      	ldrb	r3, [r3, #2]
 800c512:	1e5a      	subs	r2, r3, #1
 800c514:	4193      	sbcs	r3, r2
 800c516:	b2da      	uxtb	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800c51c:	187b      	adds	r3, r7, r1
 800c51e:	78da      	ldrb	r2, [r3, #3]
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800c524:	187b      	adds	r3, r7, r1
 800c526:	791a      	ldrb	r2, [r3, #4]
 800c528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52a:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800c52c:	187b      	adds	r3, r7, r1
 800c52e:	795a      	ldrb	r2, [r3, #5]
 800c530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c532:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800c534:	187b      	adds	r3, r7, r1
 800c536:	799a      	ldrb	r2, [r3, #6]
 800c538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c53a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	0018      	movs	r0, r3
 800c540:	46bd      	mov	sp, r7
 800c542:	b009      	add	sp, #36	@ 0x24
 800c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c546:	46c0      	nop			@ (mov r8, r8)
 800c548:	00004e20 	.word	0x00004e20

0800c54c <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800c54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c54e:	b087      	sub	sp, #28
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800c554:	2516      	movs	r5, #22
 800c556:	197b      	adds	r3, r7, r5
 800c558:	2200      	movs	r2, #0
 800c55a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800c55c:	197c      	adds	r4, r7, r5
 800c55e:	4a22      	ldr	r2, [pc, #136]	@ (800c5e8 <sen5x_read_device_status+0x9c>)
 800c560:	197b      	adds	r3, r7, r5
 800c562:	8819      	ldrh	r1, [r3, #0]
 800c564:	230c      	movs	r3, #12
 800c566:	18fb      	adds	r3, r7, r3
 800c568:	0018      	movs	r0, r3
 800c56a:	f001 f835 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c56e:	0003      	movs	r3, r0
 800c570:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c572:	2614      	movs	r6, #20
 800c574:	19bc      	adds	r4, r7, r6
 800c576:	197b      	adds	r3, r7, r5
 800c578:	881a      	ldrh	r2, [r3, #0]
 800c57a:	230c      	movs	r3, #12
 800c57c:	18fb      	adds	r3, r7, r3
 800c57e:	0019      	movs	r1, r3
 800c580:	2069      	movs	r0, #105	@ 0x69
 800c582:	f001 f8ad 	bl	800d6e0 <sensirion_i2c_write_data>
 800c586:	0003      	movs	r3, r0
 800c588:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c58a:	19bb      	adds	r3, r7, r6
 800c58c:	2200      	movs	r2, #0
 800c58e:	5e9b      	ldrsh	r3, [r3, r2]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d003      	beq.n	800c59c <sen5x_read_device_status+0x50>
        return error;
 800c594:	19bb      	adds	r3, r7, r6
 800c596:	2200      	movs	r2, #0
 800c598:	5e9b      	ldrsh	r3, [r3, r2]
 800c59a:	e020      	b.n	800c5de <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c59c:	4b13      	ldr	r3, [pc, #76]	@ (800c5ec <sen5x_read_device_status+0xa0>)
 800c59e:	0018      	movs	r0, r3
 800c5a0:	f7ff faaa 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800c5a4:	2514      	movs	r5, #20
 800c5a6:	197c      	adds	r4, r7, r5
 800c5a8:	230c      	movs	r3, #12
 800c5aa:	18fb      	adds	r3, r7, r3
 800c5ac:	2204      	movs	r2, #4
 800c5ae:	0019      	movs	r1, r3
 800c5b0:	2069      	movs	r0, #105	@ 0x69
 800c5b2:	f001 f8ad 	bl	800d710 <sensirion_i2c_read_data_inplace>
 800c5b6:	0003      	movs	r3, r0
 800c5b8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c5ba:	197b      	adds	r3, r7, r5
 800c5bc:	2200      	movs	r2, #0
 800c5be:	5e9b      	ldrsh	r3, [r3, r2]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <sen5x_read_device_status+0x80>
        return error;
 800c5c4:	197b      	adds	r3, r7, r5
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	5e9b      	ldrsh	r3, [r3, r2]
 800c5ca:	e008      	b.n	800c5de <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	18fb      	adds	r3, r7, r3
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	f000 f850 	bl	800c676 <sensirion_common_bytes_to_uint32_t>
 800c5d6:	0002      	movs	r2, r0
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	0018      	movs	r0, r3
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	b007      	add	sp, #28
 800c5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5e6:	46c0      	nop			@ (mov r8, r8)
 800c5e8:	0000d206 	.word	0x0000d206
 800c5ec:	00004e20 	.word	0x00004e20

0800c5f0 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800c5f0:	b590      	push	{r4, r7, lr}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c5f6:	1dbb      	adds	r3, r7, #6
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800c5fc:	1dbc      	adds	r4, r7, #6
 800c5fe:	4a12      	ldr	r2, [pc, #72]	@ (800c648 <sen5x_device_reset+0x58>)
 800c600:	1dbb      	adds	r3, r7, #6
 800c602:	8819      	ldrh	r1, [r3, #0]
 800c604:	003b      	movs	r3, r7
 800c606:	0018      	movs	r0, r3
 800c608:	f000 ffe6 	bl	800d5d8 <sensirion_i2c_add_command_to_buffer>
 800c60c:	0003      	movs	r3, r0
 800c60e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c610:	1d3c      	adds	r4, r7, #4
 800c612:	1dbb      	adds	r3, r7, #6
 800c614:	881a      	ldrh	r2, [r3, #0]
 800c616:	003b      	movs	r3, r7
 800c618:	0019      	movs	r1, r3
 800c61a:	2069      	movs	r0, #105	@ 0x69
 800c61c:	f001 f860 	bl	800d6e0 <sensirion_i2c_write_data>
 800c620:	0003      	movs	r3, r0
 800c622:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c624:	1d3b      	adds	r3, r7, #4
 800c626:	2200      	movs	r2, #0
 800c628:	5e9b      	ldrsh	r3, [r3, r2]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <sen5x_device_reset+0x46>
        return error;
 800c62e:	1d3b      	adds	r3, r7, #4
 800c630:	2200      	movs	r2, #0
 800c632:	5e9b      	ldrsh	r3, [r3, r2]
 800c634:	e004      	b.n	800c640 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800c636:	4b05      	ldr	r3, [pc, #20]	@ (800c64c <sen5x_device_reset+0x5c>)
 800c638:	0018      	movs	r0, r3
 800c63a:	f7ff fa5d 	bl	800baf8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	0018      	movs	r0, r3
 800c642:	46bd      	mov	sp, r7
 800c644:	b003      	add	sp, #12
 800c646:	bd90      	pop	{r4, r7, pc}
 800c648:	0000d304 	.word	0x0000d304
 800c64c:	00030d40 	.word	0x00030d40

0800c650 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	021b      	lsls	r3, r3, #8
 800c65e:	b21a      	sxth	r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	3301      	adds	r3, #1
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	b21b      	sxth	r3, r3
 800c668:	4313      	orrs	r3, r2
 800c66a:	b21b      	sxth	r3, r3
 800c66c:	b29b      	uxth	r3, r3
}
 800c66e:	0018      	movs	r0, r3
 800c670:	46bd      	mov	sp, r7
 800c672:	b002      	add	sp, #8
 800c674:	bd80      	pop	{r7, pc}

0800c676 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800c676:	b580      	push	{r7, lr}
 800c678:	b082      	sub	sp, #8
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	061a      	lsls	r2, r3, #24
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3301      	adds	r3, #1
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	041b      	lsls	r3, r3, #16
 800c68c:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	3302      	adds	r3, #2
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800c696:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	3203      	adds	r2, #3
 800c69c:	7812      	ldrb	r2, [r2, #0]
 800c69e:	4313      	orrs	r3, r2
}
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	b002      	add	sp, #8
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	0018      	movs	r0, r3
 800c6b4:	f7ff ffcc 	bl	800c650 <sensirion_common_bytes_to_uint16_t>
 800c6b8:	0003      	movs	r3, r0
 800c6ba:	b21b      	sxth	r3, r3
}
 800c6bc:	0018      	movs	r0, r3
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	b002      	add	sp, #8
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	1dbb      	adds	r3, r7, #6
 800c6d0:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800c6d2:	2316      	movs	r3, #22
 800c6d4:	18fb      	adds	r3, r7, r3
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	801a      	strh	r2, [r3, #0]
 800c6da:	e00f      	b.n	800c6fc <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800c6dc:	2016      	movs	r0, #22
 800c6de:	183b      	adds	r3, r7, r0
 800c6e0:	881b      	ldrh	r3, [r3, #0]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	18d2      	adds	r2, r2, r3
 800c6e6:	183b      	adds	r3, r7, r0
 800c6e8:	881b      	ldrh	r3, [r3, #0]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	18cb      	adds	r3, r1, r3
 800c6ee:	7812      	ldrb	r2, [r2, #0]
 800c6f0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800c6f2:	183b      	adds	r3, r7, r0
 800c6f4:	881a      	ldrh	r2, [r3, #0]
 800c6f6:	183b      	adds	r3, r7, r0
 800c6f8:	3201      	adds	r2, #1
 800c6fa:	801a      	strh	r2, [r3, #0]
 800c6fc:	2316      	movs	r3, #22
 800c6fe:	18fa      	adds	r2, r7, r3
 800c700:	1dbb      	adds	r3, r7, #6
 800c702:	8812      	ldrh	r2, [r2, #0]
 800c704:	881b      	ldrh	r3, [r3, #0]
 800c706:	429a      	cmp	r2, r3
 800c708:	d3e8      	bcc.n	800c6dc <sensirion_common_copy_bytes+0x18>
    }
}
 800c70a:	46c0      	nop			@ (mov r8, r8)
 800c70c:	46c0      	nop			@ (mov r8, r8)
 800c70e:	46bd      	mov	sp, r7
 800c710:	b006      	add	sp, #24
 800c712:	bd80      	pop	{r7, pc}

0800c714 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d113      	bne.n	800c75a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	22fe      	movs	r2, #254	@ 0xfe
 800c736:	0592      	lsls	r2, r2, #22
 800c738:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	4a1a      	ldr	r2, [pc, #104]	@ (800c7a8 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800c73e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	4a1a      	ldr	r2, [pc, #104]	@ (800c7ac <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800c744:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	4a19      	ldr	r2, [pc, #100]	@ (800c7b0 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800c74a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4a19      	ldr	r2, [pc, #100]	@ (800c7b4 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800c750:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	4a18      	ldr	r2, [pc, #96]	@ (800c7b8 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800c756:	61da      	str	r2, [r3, #28]
 800c758:	e011      	b.n	800c77e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	4a17      	ldr	r2, [pc, #92]	@ (800c7bc <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800c75e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	4a17      	ldr	r2, [pc, #92]	@ (800c7c0 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800c764:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	4a16      	ldr	r2, [pc, #88]	@ (800c7c4 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800c76a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4a16      	ldr	r2, [pc, #88]	@ (800c7c8 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800c770:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	4a15      	ldr	r2, [pc, #84]	@ (800c7cc <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800c776:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	4a15      	ldr	r2, [pc, #84]	@ (800c7d0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800c77c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	4a14      	ldr	r2, [pc, #80]	@ (800c7d4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800c782:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	4a14      	ldr	r2, [pc, #80]	@ (800c7d8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800c788:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	4a12      	ldr	r2, [pc, #72]	@ (800c7d8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800c78e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	4a12      	ldr	r2, [pc, #72]	@ (800c7dc <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800c794:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	0018      	movs	r0, r3
 800c79a:	f000 f833 	bl	800c804 <GasIndexAlgorithm_reset>
}
 800c79e:	46c0      	nop			@ (mov r8, r8)
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	b004      	add	sp, #16
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	46c0      	nop			@ (mov r8, r8)
 800c7a8:	00002710 	.word	0x00002710
 800c7ac:	44340000 	.word	0x44340000
 800c7b0:	46859800 	.word	0x46859800
 800c7b4:	46a05000 	.word	0x46a05000
 800c7b8:	41f00000 	.word	0x41f00000
 800c7bc:	42c80000 	.word	0x42c80000
 800c7c0:	00004e20 	.word	0x00004e20
 800c7c4:	43340000 	.word	0x43340000
 800c7c8:	4528c000 	.word	0x4528c000
 800c7cc:	45a32000 	.word	0x45a32000
 800c7d0:	43aa0000 	.word	0x43aa0000
 800c7d4:	43660000 	.word	0x43660000
 800c7d8:	41400000 	.word	0x41400000
 800c7dc:	42480000 	.word	0x42480000

0800c7e0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800c7ea:	4a05      	ldr	r2, [pc, #20]	@ (800c800 <GasIndexAlgorithm_init+0x20>)
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	0018      	movs	r0, r3
 800c7f2:	f7ff ff8f 	bl	800c714 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800c7f6:	46c0      	nop			@ (mov r8, r8)
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	b002      	add	sp, #8
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	46c0      	nop			@ (mov r8, r8)
 800c800:	44610000 	.word	0x44610000

0800c804 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	0018      	movs	r0, r3
 800c822:	f000 f805 	bl	800c830 <GasIndexAlgorithm__init_instances>
}
 800c826:	46c0      	nop			@ (mov r8, r8)
 800c828:	46bd      	mov	sp, r7
 800c82a:	b002      	add	sp, #8
 800c82c:	bd80      	pop	{r7, pc}
	...

0800c830 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800c830:	b590      	push	{r4, r7, lr}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	0018      	movs	r0, r3
 800c83c:	f000 f8e8 	bl	800ca10 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	0018      	movs	r0, r3
 800c844:	f000 f9a6 	bl	800cb94 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800c848:	1c04      	adds	r4, r0, #0
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	0018      	movs	r0, r3
 800c84e:	f000 f9ab 	bl	800cba8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800c852:	1c02      	adds	r2, r0, #0
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	1c21      	adds	r1, r4, #0
 800c858:	0018      	movs	r0, r3
 800c85a:	f000 fc3b 	bl	800d0d4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d107      	bne.n	800c876 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800c866:	23fe      	movs	r3, #254	@ 0xfe
 800c868:	059b      	lsls	r3, r3, #22
 800c86a:	4a0a      	ldr	r2, [pc, #40]	@ (800c894 <GasIndexAlgorithm__init_instances+0x64>)
 800c86c:	490a      	ldr	r1, [pc, #40]	@ (800c898 <GasIndexAlgorithm__init_instances+0x68>)
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fc86 	bl	800d180 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800c874:	e005      	b.n	800c882 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800c876:	4b09      	ldr	r3, [pc, #36]	@ (800c89c <GasIndexAlgorithm__init_instances+0x6c>)
 800c878:	4a09      	ldr	r2, [pc, #36]	@ (800c8a0 <GasIndexAlgorithm__init_instances+0x70>)
 800c87a:	490a      	ldr	r1, [pc, #40]	@ (800c8a4 <GasIndexAlgorithm__init_instances+0x74>)
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fc7f 	bl	800d180 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	0018      	movs	r0, r3
 800c886:	f000 fd35 	bl	800d2f4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800c88a:	46c0      	nop			@ (mov r8, r8)
 800c88c:	46bd      	mov	sp, r7
 800c88e:	b003      	add	sp, #12
 800c890:	bd90      	pop	{r4, r7, pc}
 800c892:	46c0      	nop			@ (mov r8, r8)
 800c894:	bc257a78 	.word	0xbc257a78
 800c898:	44198000 	.word	0x44198000
 800c89c:	42c80000 	.word	0x42c80000
 800c8a0:	bbd4fdf4 	.word	0xbbd4fdf4
 800c8a4:	43550000 	.word	0x43550000

0800c8a8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800c8a8:	b590      	push	{r4, r7, lr}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8b8:	4952      	ldr	r1, [pc, #328]	@ (800ca04 <GasIndexAlgorithm_process+0x15c>)
 800c8ba:	1c18      	adds	r0, r3, #0
 800c8bc:	f7f3 fe42 	bl	8000544 <__aeabi_fcmple>
 800c8c0:	1e03      	subs	r3, r0, #0
 800c8c2:	d00c      	beq.n	800c8de <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	1c19      	adds	r1, r3, #0
 800c8ce:	1c10      	adds	r0, r2, #0
 800c8d0:	f7f3 fff6 	bl	80008c0 <__aeabi_fadd>
 800c8d4:	1c03      	adds	r3, r0, #0
 800c8d6:	1c1a      	adds	r2, r3, #0
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	631a      	str	r2, [r3, #48]	@ 0x30
 800c8dc:	e080      	b.n	800c9e0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	dd25      	ble.n	800c930 <GasIndexAlgorithm_process+0x88>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	4a48      	ldr	r2, [pc, #288]	@ (800ca08 <GasIndexAlgorithm_process+0x160>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	dc21      	bgt.n	800c930 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	dc04      	bgt.n	800c900 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	60bb      	str	r3, [r7, #8]
 800c8fe:	e00d      	b.n	800c91c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	4a41      	ldr	r2, [pc, #260]	@ (800ca0c <GasIndexAlgorithm_process+0x164>)
 800c906:	4694      	mov	ip, r2
 800c908:	4463      	add	r3, ip
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	dd05      	ble.n	800c91c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	4a3d      	ldr	r2, [pc, #244]	@ (800ca0c <GasIndexAlgorithm_process+0x164>)
 800c916:	4694      	mov	ip, r2
 800c918:	4463      	add	r3, ip
 800c91a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	0018      	movs	r0, r3
 800c926:	f7f4 fe53 	bl	80015d0 <__aeabi_i2f>
 800c92a:	1c02      	adds	r2, r0, #0
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d005      	beq.n	800c944 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	0018      	movs	r0, r3
 800c93c:	f000 f945 	bl	800cbca <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800c940:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800c942:	d014      	beq.n	800c96e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	1c11      	adds	r1, r2, #0
 800c94c:	0018      	movs	r0, r3
 800c94e:	f000 fbd1 	bl	800d0f4 <GasIndexAlgorithm__mox_model__process>
 800c952:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	1c11      	adds	r1, r2, #0
 800c960:	0018      	movs	r0, r3
 800c962:	f000 fc25 	bl	800d1b0 <GasIndexAlgorithm__sigmoid_scaled__process>
 800c966:	1c02      	adds	r2, r0, #0
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c96c:	e003      	b.n	800c976 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	689a      	ldr	r2, [r3, #8]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	1c11      	adds	r1, r2, #0
 800c97e:	0018      	movs	r0, r3
 800c980:	f000 fcec 	bl	800d35c <GasIndexAlgorithm__adaptive_lowpass__process>
 800c984:	1c02      	adds	r2, r0, #0
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c98e:	21fc      	movs	r1, #252	@ 0xfc
 800c990:	0589      	lsls	r1, r1, #22
 800c992:	1c18      	adds	r0, r3, #0
 800c994:	f7f3 fdcc 	bl	8000530 <__aeabi_fcmplt>
 800c998:	1e03      	subs	r3, r0, #0
 800c99a:	d003      	beq.n	800c9a4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	22fc      	movs	r2, #252	@ 0xfc
 800c9a0:	0592      	lsls	r2, r2, #22
 800c9a2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	1c18      	adds	r0, r3, #0
 800c9ac:	f7f3 fdd4 	bl	8000558 <__aeabi_fcmpgt>
 800c9b0:	1e03      	subs	r3, r0, #0
 800c9b2:	d015      	beq.n	800c9e0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	1c11      	adds	r1, r2, #0
 800c9bc:	0018      	movs	r0, r3
 800c9be:	f000 fa4f 	bl	800ce60 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	0018      	movs	r0, r3
 800c9c6:	f000 f8e5 	bl	800cb94 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800c9ca:	1c04      	adds	r4, r0, #0
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	0018      	movs	r0, r3
 800c9d0:	f000 f8ea 	bl	800cba8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800c9d4:	1c02      	adds	r2, r0, #0
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	1c21      	adds	r1, r4, #0
 800c9da:	0018      	movs	r0, r3
 800c9dc:	f000 fb7a 	bl	800d0d4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e4:	21fc      	movs	r1, #252	@ 0xfc
 800c9e6:	0589      	lsls	r1, r1, #22
 800c9e8:	1c18      	adds	r0, r3, #0
 800c9ea:	f7f3 ff69 	bl	80008c0 <__aeabi_fadd>
 800c9ee:	1c03      	adds	r3, r0, #0
 800c9f0:	1c18      	adds	r0, r3, #0
 800c9f2:	f7f4 fdcd 	bl	8001590 <__aeabi_f2iz>
 800c9f6:	0002      	movs	r2, r0
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	601a      	str	r2, [r3, #0]
    return;
 800c9fc:	46c0      	nop			@ (mov r8, r8)
}
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	b005      	add	sp, #20
 800ca02:	bd90      	pop	{r4, r7, pc}
 800ca04:	42340000 	.word	0x42340000
 800ca08:	0000fde7 	.word	0x0000fde7
 800ca0c:	00007fff 	.word	0x00007fff

0800ca10 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ca10:	b5b0      	push	{r4, r5, r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	223c      	movs	r2, #60	@ 0x3c
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	4952      	ldr	r1, [pc, #328]	@ (800cb84 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ca3a:	1c18      	adds	r0, r3, #0
 800ca3c:	f7f4 f8ca 	bl	8000bd4 <__aeabi_fdiv>
 800ca40:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ca42:	2188      	movs	r1, #136	@ 0x88
 800ca44:	05c9      	lsls	r1, r1, #23
 800ca46:	1c18      	adds	r0, r3, #0
 800ca48:	f7f4 faaa 	bl	8000fa0 <__aeabi_fmul>
 800ca4c:	1c03      	adds	r3, r0, #0
 800ca4e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	494a      	ldr	r1, [pc, #296]	@ (800cb84 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ca5a:	1c18      	adds	r0, r3, #0
 800ca5c:	f7f4 f8ba 	bl	8000bd4 <__aeabi_fdiv>
 800ca60:	1c03      	adds	r3, r0, #0
 800ca62:	1c19      	adds	r1, r3, #0
 800ca64:	1c20      	adds	r0, r4, #0
 800ca66:	f7f3 ff2b 	bl	80008c0 <__aeabi_fadd>
 800ca6a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ca6c:	1c19      	adds	r1, r3, #0
 800ca6e:	1c28      	adds	r0, r5, #0
 800ca70:	f7f4 f8b0 	bl	8000bd4 <__aeabi_fdiv>
 800ca74:	1c03      	adds	r3, r0, #0
 800ca76:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	4940      	ldr	r1, [pc, #256]	@ (800cb84 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ca82:	1c18      	adds	r0, r3, #0
 800ca84:	f7f4 f8a6 	bl	8000bd4 <__aeabi_fdiv>
 800ca88:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ca8a:	2185      	movs	r1, #133	@ 0x85
 800ca8c:	05c9      	lsls	r1, r1, #23
 800ca8e:	1c18      	adds	r0, r3, #0
 800ca90:	f7f4 fa86 	bl	8000fa0 <__aeabi_fmul>
 800ca94:	1c03      	adds	r3, r0, #0
 800ca96:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	4938      	ldr	r1, [pc, #224]	@ (800cb84 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800caa2:	1c18      	adds	r0, r3, #0
 800caa4:	f7f4 f896 	bl	8000bd4 <__aeabi_fdiv>
 800caa8:	1c03      	adds	r3, r0, #0
 800caaa:	1c19      	adds	r1, r3, #0
 800caac:	1c20      	adds	r0, r4, #0
 800caae:	f7f3 ff07 	bl	80008c0 <__aeabi_fadd>
 800cab2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800cab4:	1c19      	adds	r1, r3, #0
 800cab6:	1c28      	adds	r0, r5, #0
 800cab8:	f7f4 f88c 	bl	8000bd4 <__aeabi_fdiv>
 800cabc:	1c03      	adds	r3, r0, #0
 800cabe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d118      	bne.n	800cafe <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800cad0:	2188      	movs	r1, #136	@ 0x88
 800cad2:	05c9      	lsls	r1, r1, #23
 800cad4:	1c18      	adds	r0, r3, #0
 800cad6:	f7f4 fa63 	bl	8000fa0 <__aeabi_fmul>
 800cada:	1c03      	adds	r3, r0, #0
 800cadc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800cae2:	4929      	ldr	r1, [pc, #164]	@ (800cb88 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800cae4:	1c18      	adds	r0, r3, #0
 800cae6:	f7f3 feeb 	bl	80008c0 <__aeabi_fadd>
 800caea:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800caec:	1c19      	adds	r1, r3, #0
 800caee:	1c20      	adds	r0, r4, #0
 800caf0:	f7f4 f870 	bl	8000bd4 <__aeabi_fdiv>
 800caf4:	1c03      	adds	r3, r0, #0
 800caf6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	655a      	str	r2, [r3, #84]	@ 0x54
 800cafc:	e017      	b.n	800cb2e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800cb02:	2188      	movs	r1, #136	@ 0x88
 800cb04:	05c9      	lsls	r1, r1, #23
 800cb06:	1c18      	adds	r0, r3, #0
 800cb08:	f7f4 fa4a 	bl	8000fa0 <__aeabi_fmul>
 800cb0c:	1c03      	adds	r3, r0, #0
 800cb0e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800cb14:	491d      	ldr	r1, [pc, #116]	@ (800cb8c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800cb16:	1c18      	adds	r0, r3, #0
 800cb18:	f7f3 fed2 	bl	80008c0 <__aeabi_fadd>
 800cb1c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800cb1e:	1c19      	adds	r1, r3, #0
 800cb20:	1c20      	adds	r0, r4, #0
 800cb22:	f7f4 f857 	bl	8000bd4 <__aeabi_fdiv>
 800cb26:	1c03      	adds	r3, r0, #0
 800cb28:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800cb32:	2185      	movs	r1, #133	@ 0x85
 800cb34:	05c9      	lsls	r1, r1, #23
 800cb36:	1c18      	adds	r0, r3, #0
 800cb38:	f7f4 fa32 	bl	8000fa0 <__aeabi_fmul>
 800cb3c:	1c03      	adds	r3, r0, #0
 800cb3e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	4912      	ldr	r1, [pc, #72]	@ (800cb90 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800cb46:	1c18      	adds	r0, r3, #0
 800cb48:	f7f3 feba 	bl	80008c0 <__aeabi_fadd>
 800cb4c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800cb4e:	1c19      	adds	r1, r3, #0
 800cb50:	1c20      	adds	r0, r4, #0
 800cb52:	f7f4 f83f 	bl	8000bd4 <__aeabi_fdiv>
 800cb56:	1c03      	adds	r3, r0, #0
 800cb58:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2200      	movs	r2, #0
 800cb74:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800cb7c:	46c0      	nop			@ (mov r8, r8)
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	b002      	add	sp, #8
 800cb82:	bdb0      	pop	{r4, r5, r7, pc}
 800cb84:	45610000 	.word	0x45610000
 800cb88:	44960000 	.word	0x44960000
 800cb8c:	41a00000 	.word	0x41a00000
 800cb90:	451c4000 	.word	0x451c4000

0800cb94 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800cba0:	1c18      	adds	r0, r3, #0
 800cba2:	46bd      	mov	sp, r7
 800cba4:	b002      	add	sp, #8
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800cbb8:	1c19      	adds	r1, r3, #0
 800cbba:	1c10      	adds	r0, r2, #0
 800cbbc:	f7f3 fe80 	bl	80008c0 <__aeabi_fadd>
 800cbc0:	1c03      	adds	r3, r0, #0
}
 800cbc2:	1c18      	adds	r0, r3, #0
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	b002      	add	sp, #8
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	223c      	movs	r2, #60	@ 0x3c
 800cbd6:	5c9b      	ldrb	r3, [r3, r2]
}
 800cbd8:	0018      	movs	r0, r3
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	b002      	add	sp, #8
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800cbe0:	b5b0      	push	{r4, r5, r7, lr}
 800cbe2:	b08c      	sub	sp, #48	@ 0x30
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800cbec:	1c19      	adds	r1, r3, #0
 800cbee:	4895      	ldr	r0, [pc, #596]	@ (800ce44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800cbf0:	f7f4 fb14 	bl	800121c <__aeabi_fsub>
 800cbf4:	1c03      	adds	r3, r0, #0
 800cbf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbfc:	1c19      	adds	r1, r3, #0
 800cbfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc00:	f7f3 fcaa 	bl	8000558 <__aeabi_fcmpgt>
 800cc04:	1e03      	subs	r3, r0, #0
 800cc06:	d00b      	beq.n	800cc20 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800cc10:	1c19      	adds	r1, r3, #0
 800cc12:	1c10      	adds	r0, r2, #0
 800cc14:	f7f3 fe54 	bl	80008c0 <__aeabi_fadd>
 800cc18:	1c03      	adds	r3, r0, #0
 800cc1a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc24:	1c19      	adds	r1, r3, #0
 800cc26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc28:	f7f3 fc96 	bl	8000558 <__aeabi_fcmpgt>
 800cc2c:	1e03      	subs	r3, r0, #0
 800cc2e:	d00b      	beq.n	800cc48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800cc38:	1c19      	adds	r1, r3, #0
 800cc3a:	1c10      	adds	r0, r2, #0
 800cc3c:	f7f3 fe40 	bl	80008c0 <__aeabi_fadd>
 800cc40:	1c03      	adds	r3, r0, #0
 800cc42:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6959      	ldr	r1, [r3, #20]
 800cc4c:	4a7e      	ldr	r2, [pc, #504]	@ (800ce48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	0018      	movs	r0, r3
 800cc52:	f000 f9f1 	bl	800d038 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	1c11      	adds	r1, r2, #0
 800cc5e:	0018      	movs	r0, r3
 800cc60:	f000 f9fa 	bl	800d058 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cc64:	1c03      	adds	r3, r0, #0
 800cc66:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800cc74:	1c19      	adds	r1, r3, #0
 800cc76:	1c10      	adds	r0, r2, #0
 800cc78:	f7f4 fad0 	bl	800121c <__aeabi_fsub>
 800cc7c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800cc7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc80:	1c18      	adds	r0, r3, #0
 800cc82:	f7f4 f98d 	bl	8000fa0 <__aeabi_fmul>
 800cc86:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800cc88:	1c19      	adds	r1, r3, #0
 800cc8a:	1c20      	adds	r0, r4, #0
 800cc8c:	f7f3 fe18 	bl	80008c0 <__aeabi_fadd>
 800cc90:	1c03      	adds	r3, r0, #0
 800cc92:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800cc9c:	1c19      	adds	r1, r3, #0
 800cc9e:	486b      	ldr	r0, [pc, #428]	@ (800ce4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800cca0:	f7f4 fabc 	bl	800121c <__aeabi_fsub>
 800cca4:	1c03      	adds	r3, r0, #0
 800cca6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	1c11      	adds	r1, r2, #0
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	f000 f9d1 	bl	800d058 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ccb6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ccb8:	1c19      	adds	r1, r3, #0
 800ccba:	1c28      	adds	r0, r5, #0
 800ccbc:	f7f4 f970 	bl	8000fa0 <__aeabi_fmul>
 800ccc0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800ccc2:	1c19      	adds	r1, r3, #0
 800ccc4:	1c20      	adds	r0, r4, #0
 800ccc6:	f7f3 fdfb 	bl	80008c0 <__aeabi_fadd>
 800ccca:	1c03      	adds	r3, r0, #0
 800cccc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ccce:	4a60      	ldr	r2, [pc, #384]	@ (800ce50 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ccd0:	6a39      	ldr	r1, [r7, #32]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	0018      	movs	r0, r3
 800ccd6:	f000 f9af 	bl	800d038 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	1c11      	adds	r1, r2, #0
 800cce2:	0018      	movs	r0, r3
 800cce4:	f000 f9b8 	bl	800d058 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cce8:	1c03      	adds	r3, r0, #0
 800ccea:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800ccec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ccee:	69f8      	ldr	r0, [r7, #28]
 800ccf0:	f7f4 f956 	bl	8000fa0 <__aeabi_fmul>
 800ccf4:	1c03      	adds	r3, r0, #0
 800ccf6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6999      	ldr	r1, [r3, #24]
 800cd00:	4a51      	ldr	r2, [pc, #324]	@ (800ce48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	0018      	movs	r0, r3
 800cd06:	f000 f997 	bl	800d038 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	1c11      	adds	r1, r2, #0
 800cd12:	0018      	movs	r0, r3
 800cd14:	f000 f9a0 	bl	800d058 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cd18:	1c03      	adds	r3, r0, #0
 800cd1a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800cd28:	1c19      	adds	r1, r3, #0
 800cd2a:	1c10      	adds	r0, r2, #0
 800cd2c:	f7f4 fa76 	bl	800121c <__aeabi_fsub>
 800cd30:	1c03      	adds	r3, r0, #0
 800cd32:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800cd34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd36:	69b8      	ldr	r0, [r7, #24]
 800cd38:	f7f4 fa70 	bl	800121c <__aeabi_fsub>
 800cd3c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800cd3e:	1c19      	adds	r1, r3, #0
 800cd40:	1c28      	adds	r0, r5, #0
 800cd42:	f7f4 f92d 	bl	8000fa0 <__aeabi_fmul>
 800cd46:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800cd48:	1c19      	adds	r1, r3, #0
 800cd4a:	1c20      	adds	r0, r4, #0
 800cd4c:	f7f3 fdb8 	bl	80008c0 <__aeabi_fadd>
 800cd50:	1c03      	adds	r3, r0, #0
 800cd52:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800cd5c:	1c19      	adds	r1, r3, #0
 800cd5e:	483b      	ldr	r0, [pc, #236]	@ (800ce4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800cd60:	f7f4 fa5c 	bl	800121c <__aeabi_fsub>
 800cd64:	1c03      	adds	r3, r0, #0
 800cd66:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	1c11      	adds	r1, r2, #0
 800cd70:	0018      	movs	r0, r3
 800cd72:	f000 f971 	bl	800d058 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cd76:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800cd78:	1c19      	adds	r1, r3, #0
 800cd7a:	1c28      	adds	r0, r5, #0
 800cd7c:	f7f4 f910 	bl	8000fa0 <__aeabi_fmul>
 800cd80:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800cd82:	1c19      	adds	r1, r3, #0
 800cd84:	1c20      	adds	r0, r4, #0
 800cd86:	f7f3 fd9b 	bl	80008c0 <__aeabi_fadd>
 800cd8a:	1c03      	adds	r3, r0, #0
 800cd8c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cd8e:	4a30      	ldr	r2, [pc, #192]	@ (800ce50 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800cd90:	6939      	ldr	r1, [r7, #16]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	0018      	movs	r0, r3
 800cd96:	f000 f94f 	bl	800d038 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	1c11      	adds	r1, r2, #0
 800cda2:	0018      	movs	r0, r3
 800cda4:	f000 f958 	bl	800d058 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cda8:	1c03      	adds	r3, r0, #0
 800cdaa:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800cdac:	6979      	ldr	r1, [r7, #20]
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f7f4 f8f6 	bl	8000fa0 <__aeabi_fmul>
 800cdb4:	1c03      	adds	r3, r0, #0
 800cdb6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	4923      	ldr	r1, [pc, #140]	@ (800ce54 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800cdc6:	1c18      	adds	r0, r3, #0
 800cdc8:	f7f3 ff04 	bl	8000bd4 <__aeabi_fdiv>
 800cdcc:	1c03      	adds	r3, r0, #0
 800cdce:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800cdd0:	69f9      	ldr	r1, [r7, #28]
 800cdd2:	20fe      	movs	r0, #254	@ 0xfe
 800cdd4:	0580      	lsls	r0, r0, #22
 800cdd6:	f7f4 fa21 	bl	800121c <__aeabi_fsub>
 800cdda:	1c03      	adds	r3, r0, #0
 800cddc:	491e      	ldr	r1, [pc, #120]	@ (800ce58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800cdde:	1c18      	adds	r0, r3, #0
 800cde0:	f7f4 f8de 	bl	8000fa0 <__aeabi_fmul>
 800cde4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800cde6:	491d      	ldr	r1, [pc, #116]	@ (800ce5c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800cde8:	1c18      	adds	r0, r3, #0
 800cdea:	f7f4 fa17 	bl	800121c <__aeabi_fsub>
 800cdee:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800cdf0:	1c19      	adds	r1, r3, #0
 800cdf2:	1c28      	adds	r0, r5, #0
 800cdf4:	f7f4 f8d4 	bl	8000fa0 <__aeabi_fmul>
 800cdf8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800cdfa:	1c19      	adds	r1, r3, #0
 800cdfc:	1c20      	adds	r0, r4, #0
 800cdfe:	f7f3 fd5f 	bl	80008c0 <__aeabi_fadd>
 800ce02:	1c03      	adds	r3, r0, #0
 800ce04:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce0e:	2100      	movs	r1, #0
 800ce10:	1c18      	adds	r0, r3, #0
 800ce12:	f7f3 fb8d 	bl	8000530 <__aeabi_fcmplt>
 800ce16:	1e03      	subs	r3, r0, #0
 800ce18:	d002      	beq.n	800ce20 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800ce28:	1c19      	adds	r1, r3, #0
 800ce2a:	1c10      	adds	r0, r2, #0
 800ce2c:	f7f3 fb94 	bl	8000558 <__aeabi_fcmpgt>
 800ce30:	1e03      	subs	r3, r0, #0
 800ce32:	d100      	bne.n	800ce36 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800ce34:	e002      	b.n	800ce3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ce3c:	46c0      	nop			@ (mov r8, r8)
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	b00c      	add	sp, #48	@ 0x30
 800ce42:	bdb0      	pop	{r4, r5, r7, pc}
 800ce44:	46fffe00 	.word	0x46fffe00
 800ce48:	3c23d70a 	.word	0x3c23d70a
 800ce4c:	43ff0000 	.word	0x43ff0000
 800ce50:	3db851ec 	.word	0x3db851ec
 800ce54:	42700000 	.word	0x42700000
 800ce58:	3fa66666 	.word	0x3fa66666
 800ce5c:	3e99999a 	.word	0x3e99999a

0800ce60 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ce60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce62:	b087      	sub	sp, #28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	223c      	movs	r2, #60	@ 0x3c
 800ce6e:	5c9b      	ldrb	r3, [r3, r2]
 800ce70:	2201      	movs	r2, #1
 800ce72:	4053      	eors	r3, r2
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00a      	beq.n	800ce90 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	223c      	movs	r2, #60	@ 0x3c
 800ce7e:	2101      	movs	r1, #1
 800ce80:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800ce8e:	e0c8      	b.n	800d022 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce94:	4965      	ldr	r1, [pc, #404]	@ (800d02c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800ce96:	1c18      	adds	r0, r3, #0
 800ce98:	f7f3 fb68 	bl	800056c <__aeabi_fcmpge>
 800ce9c:	1e03      	subs	r3, r0, #0
 800ce9e:	d107      	bne.n	800ceb0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800cea4:	4962      	ldr	r1, [pc, #392]	@ (800d030 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800cea6:	1c18      	adds	r0, r3, #0
 800cea8:	f7f3 fb4c 	bl	8000544 <__aeabi_fcmple>
 800ceac:	1e03      	subs	r3, r0, #0
 800ceae:	d00e      	beq.n	800cece <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ceb8:	1c19      	adds	r1, r3, #0
 800ceba:	1c10      	adds	r0, r2, #0
 800cebc:	f7f3 fd00 	bl	80008c0 <__aeabi_fadd>
 800cec0:	1c03      	adds	r3, r0, #0
 800cec2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ced2:	1c19      	adds	r1, r3, #0
 800ced4:	6838      	ldr	r0, [r7, #0]
 800ced6:	f7f4 f9a1 	bl	800121c <__aeabi_fsub>
 800ceda:	1c03      	adds	r3, r0, #0
 800cedc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	0018      	movs	r0, r3
 800cee2:	f7ff fe7d 	bl	800cbe0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceea:	1c19      	adds	r1, r3, #0
 800ceec:	6838      	ldr	r0, [r7, #0]
 800ceee:	f7f4 f995 	bl	800121c <__aeabi_fsub>
 800cef2:	1c03      	adds	r3, r0, #0
 800cef4:	2185      	movs	r1, #133	@ 0x85
 800cef6:	05c9      	lsls	r1, r1, #23
 800cef8:	1c18      	adds	r0, r3, #0
 800cefa:	f7f3 fe6b 	bl	8000bd4 <__aeabi_fdiv>
 800cefe:	1c03      	adds	r3, r0, #0
 800cf00:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800cf02:	2100      	movs	r1, #0
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f7f3 fb13 	bl	8000530 <__aeabi_fcmplt>
 800cf0a:	1e03      	subs	r3, r0, #0
 800cf0c:	d008      	beq.n	800cf20 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	1c18      	adds	r0, r3, #0
 800cf16:	f7f4 f981 	bl	800121c <__aeabi_fsub>
 800cf1a:	1c03      	adds	r3, r0, #0
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	e007      	b.n	800cf30 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf24:	1c19      	adds	r1, r3, #0
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7f3 fcca 	bl	80008c0 <__aeabi_fadd>
 800cf2c:	1c03      	adds	r3, r0, #0
 800cf2e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800cf30:	23fe      	movs	r3, #254	@ 0xfe
 800cf32:	059b      	lsls	r3, r3, #22
 800cf34:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800cf36:	493f      	ldr	r1, [pc, #252]	@ (800d034 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800cf38:	6978      	ldr	r0, [r7, #20]
 800cf3a:	f7f3 fb0d 	bl	8000558 <__aeabi_fcmpgt>
 800cf3e:	1e03      	subs	r3, r0, #0
 800cf40:	d010      	beq.n	800cf64 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800cf42:	493c      	ldr	r1, [pc, #240]	@ (800d034 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800cf44:	6978      	ldr	r0, [r7, #20]
 800cf46:	f7f3 fe45 	bl	8000bd4 <__aeabi_fdiv>
 800cf4a:	1c03      	adds	r3, r0, #0
 800cf4c:	1c1c      	adds	r4, r3, #0
 800cf4e:	4939      	ldr	r1, [pc, #228]	@ (800d034 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800cf50:	6978      	ldr	r0, [r7, #20]
 800cf52:	f7f3 fe3f 	bl	8000bd4 <__aeabi_fdiv>
 800cf56:	1c03      	adds	r3, r0, #0
 800cf58:	1c19      	adds	r1, r3, #0
 800cf5a:	1c20      	adds	r0, r4, #0
 800cf5c:	f7f4 f820 	bl	8000fa0 <__aeabi_fmul>
 800cf60:	1c03      	adds	r3, r0, #0
 800cf62:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800cf68:	1c19      	adds	r1, r3, #0
 800cf6a:	2085      	movs	r0, #133	@ 0x85
 800cf6c:	05c0      	lsls	r0, r0, #23
 800cf6e:	f7f4 f955 	bl	800121c <__aeabi_fsub>
 800cf72:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800cf74:	6939      	ldr	r1, [r7, #16]
 800cf76:	1c18      	adds	r0, r3, #0
 800cf78:	f7f4 f812 	bl	8000fa0 <__aeabi_fmul>
 800cf7c:	1c03      	adds	r3, r0, #0
 800cf7e:	1c18      	adds	r0, r3, #0
 800cf80:	f018 fb04 	bl	802558c <sqrtf>
 800cf84:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800cf8e:	2185      	movs	r1, #133	@ 0x85
 800cf90:	05c9      	lsls	r1, r1, #23
 800cf92:	6938      	ldr	r0, [r7, #16]
 800cf94:	f7f4 f804 	bl	8000fa0 <__aeabi_fmul>
 800cf98:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800cf9a:	1c19      	adds	r1, r3, #0
 800cf9c:	1c28      	adds	r0, r5, #0
 800cf9e:	f7f3 fe19 	bl	8000bd4 <__aeabi_fdiv>
 800cfa2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800cfa4:	1c19      	adds	r1, r3, #0
 800cfa6:	1c20      	adds	r0, r4, #0
 800cfa8:	f7f3 fffa 	bl	8000fa0 <__aeabi_fmul>
 800cfac:	1c03      	adds	r3, r0, #0
 800cfae:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfb4:	68f9      	ldr	r1, [r7, #12]
 800cfb6:	1c18      	adds	r0, r3, #0
 800cfb8:	f7f3 fff2 	bl	8000fa0 <__aeabi_fmul>
 800cfbc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800cfbe:	6939      	ldr	r1, [r7, #16]
 800cfc0:	1c18      	adds	r0, r3, #0
 800cfc2:	f7f3 fe07 	bl	8000bd4 <__aeabi_fdiv>
 800cfc6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800cfc8:	68f9      	ldr	r1, [r7, #12]
 800cfca:	1c18      	adds	r0, r3, #0
 800cfcc:	f7f3 ffe8 	bl	8000fa0 <__aeabi_fmul>
 800cfd0:	1c03      	adds	r3, r0, #0
             sqrtf(
 800cfd2:	1c19      	adds	r1, r3, #0
 800cfd4:	1c20      	adds	r0, r4, #0
 800cfd6:	f7f3 fc73 	bl	80008c0 <__aeabi_fadd>
 800cfda:	1c03      	adds	r3, r0, #0
 800cfdc:	1c18      	adds	r0, r3, #0
 800cfde:	f018 fad5 	bl	802558c <sqrtf>
 800cfe2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800cfe4:	1c19      	adds	r1, r3, #0
 800cfe6:	1c30      	adds	r0, r6, #0
 800cfe8:	f7f3 ffda 	bl	8000fa0 <__aeabi_fmul>
 800cfec:	1c03      	adds	r3, r0, #0
 800cfee:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cffc:	68f9      	ldr	r1, [r7, #12]
 800cffe:	1c18      	adds	r0, r3, #0
 800d000:	f7f3 ffce 	bl	8000fa0 <__aeabi_fmul>
 800d004:	1c03      	adds	r3, r0, #0
 800d006:	2182      	movs	r1, #130	@ 0x82
 800d008:	05c9      	lsls	r1, r1, #23
 800d00a:	1c18      	adds	r0, r3, #0
 800d00c:	f7f3 fde2 	bl	8000bd4 <__aeabi_fdiv>
 800d010:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800d012:	1c19      	adds	r1, r3, #0
 800d014:	1c20      	adds	r0, r4, #0
 800d016:	f7f3 fc53 	bl	80008c0 <__aeabi_fadd>
 800d01a:	1c03      	adds	r3, r0, #0
 800d01c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800d022:	46c0      	nop			@ (mov r8, r8)
 800d024:	46bd      	mov	sp, r7
 800d026:	b007      	add	sp, #28
 800d028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d02a:	46c0      	nop			@ (mov r8, r8)
 800d02c:	42c80000 	.word	0x42c80000
 800d030:	c2c80000 	.word	0xc2c80000
 800d034:	44b40000 	.word	0x44b40000

0800d038 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d050:	46c0      	nop			@ (mov r8, r8)
 800d052:	46bd      	mov	sp, r7
 800d054:	b004      	add	sp, #16
 800d056:	bd80      	pop	{r7, pc}

0800d058 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800d058:	b590      	push	{r4, r7, lr}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d06a:	1c19      	adds	r1, r3, #0
 800d06c:	6838      	ldr	r0, [r7, #0]
 800d06e:	f7f4 f8d5 	bl	800121c <__aeabi_fsub>
 800d072:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800d074:	1c19      	adds	r1, r3, #0
 800d076:	1c20      	adds	r0, r4, #0
 800d078:	f7f3 ff92 	bl	8000fa0 <__aeabi_fmul>
 800d07c:	1c03      	adds	r3, r0, #0
 800d07e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800d080:	4912      	ldr	r1, [pc, #72]	@ (800d0cc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7f3 fa54 	bl	8000530 <__aeabi_fcmplt>
 800d088:	1e03      	subs	r3, r0, #0
 800d08a:	d002      	beq.n	800d092 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800d08c:	23fe      	movs	r3, #254	@ 0xfe
 800d08e:	059b      	lsls	r3, r3, #22
 800d090:	e018      	b.n	800d0c4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800d092:	490f      	ldr	r1, [pc, #60]	@ (800d0d0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f7f3 fa5f 	bl	8000558 <__aeabi_fcmpgt>
 800d09a:	1e03      	subs	r3, r0, #0
 800d09c:	d001      	beq.n	800d0a2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e010      	b.n	800d0c4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	1c18      	adds	r0, r3, #0
 800d0a6:	f018 fa49 	bl	802553c <expf>
 800d0aa:	1c03      	adds	r3, r0, #0
 800d0ac:	21fe      	movs	r1, #254	@ 0xfe
 800d0ae:	0589      	lsls	r1, r1, #22
 800d0b0:	1c18      	adds	r0, r3, #0
 800d0b2:	f7f3 fc05 	bl	80008c0 <__aeabi_fadd>
 800d0b6:	1c03      	adds	r3, r0, #0
 800d0b8:	1c19      	adds	r1, r3, #0
 800d0ba:	20fe      	movs	r0, #254	@ 0xfe
 800d0bc:	0580      	lsls	r0, r0, #22
 800d0be:	f7f3 fd89 	bl	8000bd4 <__aeabi_fdiv>
 800d0c2:	1c03      	adds	r3, r0, #0
    }
}
 800d0c4:	1c18      	adds	r0, r3, #0
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	b005      	add	sp, #20
 800d0ca:	bd90      	pop	{r4, r7, pc}
 800d0cc:	c2480000 	.word	0xc2480000
 800d0d0:	42480000 	.word	0x42480000

0800d0d4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d0ec:	46c0      	nop			@ (mov r8, r8)
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	b004      	add	sp, #16
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800d0f4:	b590      	push	{r4, r7, lr}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d114      	bne.n	800d130 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d10a:	1c19      	adds	r1, r3, #0
 800d10c:	6838      	ldr	r0, [r7, #0]
 800d10e:	f7f4 f885 	bl	800121c <__aeabi_fsub>
 800d112:	1c03      	adds	r3, r0, #0
 800d114:	4918      	ldr	r1, [pc, #96]	@ (800d178 <GasIndexAlgorithm__mox_model__process+0x84>)
 800d116:	1c18      	adds	r0, r3, #0
 800d118:	f7f3 fd5c 	bl	8000bd4 <__aeabi_fdiv>
 800d11c:	1c03      	adds	r3, r0, #0
 800d11e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800d124:	1c19      	adds	r1, r3, #0
 800d126:	1c10      	adds	r0, r2, #0
 800d128:	f7f3 ff3a 	bl	8000fa0 <__aeabi_fmul>
 800d12c:	1c03      	adds	r3, r0, #0
 800d12e:	e01f      	b.n	800d170 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d134:	1c19      	adds	r1, r3, #0
 800d136:	6838      	ldr	r0, [r7, #0]
 800d138:	f7f4 f870 	bl	800121c <__aeabi_fsub>
 800d13c:	1c03      	adds	r3, r0, #0
 800d13e:	1c1a      	adds	r2, r3, #0
 800d140:	2380      	movs	r3, #128	@ 0x80
 800d142:	061b      	lsls	r3, r3, #24
 800d144:	4053      	eors	r3, r2
 800d146:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d14c:	490b      	ldr	r1, [pc, #44]	@ (800d17c <GasIndexAlgorithm__mox_model__process+0x88>)
 800d14e:	1c18      	adds	r0, r3, #0
 800d150:	f7f3 fbb6 	bl	80008c0 <__aeabi_fadd>
 800d154:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d156:	1c19      	adds	r1, r3, #0
 800d158:	1c20      	adds	r0, r4, #0
 800d15a:	f7f3 fd3b 	bl	8000bd4 <__aeabi_fdiv>
 800d15e:	1c03      	adds	r3, r0, #0
 800d160:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800d166:	1c19      	adds	r1, r3, #0
 800d168:	1c10      	adds	r0, r2, #0
 800d16a:	f7f3 ff19 	bl	8000fa0 <__aeabi_fmul>
 800d16e:	1c03      	adds	r3, r0, #0
    }
}
 800d170:	1c18      	adds	r0, r3, #0
 800d172:	46bd      	mov	sp, r7
 800d174:	b003      	add	sp, #12
 800d176:	bd90      	pop	{r4, r7, pc}
 800d178:	44fa0000 	.word	0x44fa0000
 800d17c:	435c0000 	.word	0x435c0000

0800d180 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2180      	movs	r1, #128	@ 0x80
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2184      	movs	r1, #132	@ 0x84
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2188      	movs	r1, #136	@ 0x88
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	505a      	str	r2, [r3, r1]
}
 800d1a6:	46c0      	nop			@ (mov r8, r8)
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	b004      	add	sp, #16
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2280      	movs	r2, #128	@ 0x80
 800d1be:	589c      	ldr	r4, [r3, r2]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2284      	movs	r2, #132	@ 0x84
 800d1c4:	589b      	ldr	r3, [r3, r2]
 800d1c6:	1c19      	adds	r1, r3, #0
 800d1c8:	6838      	ldr	r0, [r7, #0]
 800d1ca:	f7f4 f827 	bl	800121c <__aeabi_fsub>
 800d1ce:	1c03      	adds	r3, r0, #0
 800d1d0:	1c19      	adds	r1, r3, #0
 800d1d2:	1c20      	adds	r0, r4, #0
 800d1d4:	f7f3 fee4 	bl	8000fa0 <__aeabi_fmul>
 800d1d8:	1c03      	adds	r3, r0, #0
 800d1da:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800d1dc:	4940      	ldr	r1, [pc, #256]	@ (800d2e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800d1de:	68b8      	ldr	r0, [r7, #8]
 800d1e0:	f7f3 f9a6 	bl	8000530 <__aeabi_fcmplt>
 800d1e4:	1e03      	subs	r3, r0, #0
 800d1e6:	d001      	beq.n	800d1ec <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800d1e8:	4b3e      	ldr	r3, [pc, #248]	@ (800d2e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d1ea:	e075      	b.n	800d2d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800d1ec:	493e      	ldr	r1, [pc, #248]	@ (800d2e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800d1ee:	68b8      	ldr	r0, [r7, #8]
 800d1f0:	f7f3 f9b2 	bl	8000558 <__aeabi_fcmpgt>
 800d1f4:	1e03      	subs	r3, r0, #0
 800d1f6:	d001      	beq.n	800d1fc <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	e06d      	b.n	800d2d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	6838      	ldr	r0, [r7, #0]
 800d200:	f7f3 f9b4 	bl	800056c <__aeabi_fcmpge>
 800d204:	1e03      	subs	r3, r0, #0
 800d206:	d047      	beq.n	800d298 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2288      	movs	r2, #136	@ 0x88
 800d20c:	589b      	ldr	r3, [r3, r2]
 800d20e:	21fe      	movs	r1, #254	@ 0xfe
 800d210:	0589      	lsls	r1, r1, #22
 800d212:	1c18      	adds	r0, r3, #0
 800d214:	f7f3 f986 	bl	8000524 <__aeabi_fcmpeq>
 800d218:	1e03      	subs	r3, r0, #0
 800d21a:	d00e      	beq.n	800d23a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	1c19      	adds	r1, r3, #0
 800d222:	20fe      	movs	r0, #254	@ 0xfe
 800d224:	0580      	lsls	r0, r0, #22
 800d226:	f7f3 fff9 	bl	800121c <__aeabi_fsub>
 800d22a:	1c03      	adds	r3, r0, #0
 800d22c:	492f      	ldr	r1, [pc, #188]	@ (800d2ec <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800d22e:	1c18      	adds	r0, r3, #0
 800d230:	f7f3 feb6 	bl	8000fa0 <__aeabi_fmul>
 800d234:	1c03      	adds	r3, r0, #0
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	e012      	b.n	800d260 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	492c      	ldr	r1, [pc, #176]	@ (800d2f0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800d240:	1c18      	adds	r0, r3, #0
 800d242:	f7f3 fead 	bl	8000fa0 <__aeabi_fmul>
 800d246:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800d248:	1c19      	adds	r1, r3, #0
 800d24a:	4826      	ldr	r0, [pc, #152]	@ (800d2e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d24c:	f7f3 ffe6 	bl	800121c <__aeabi_fsub>
 800d250:	1c03      	adds	r3, r0, #0
 800d252:	2181      	movs	r1, #129	@ 0x81
 800d254:	05c9      	lsls	r1, r1, #23
 800d256:	1c18      	adds	r0, r3, #0
 800d258:	f7f3 fcbc 	bl	8000bd4 <__aeabi_fdiv>
 800d25c:	1c03      	adds	r3, r0, #0
 800d25e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800d260:	4920      	ldr	r1, [pc, #128]	@ (800d2e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f7f3 fb2c 	bl	80008c0 <__aeabi_fadd>
 800d268:	1c03      	adds	r3, r0, #0
 800d26a:	1c1c      	adds	r4, r3, #0
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	1c18      	adds	r0, r3, #0
 800d270:	f018 f964 	bl	802553c <expf>
 800d274:	1c03      	adds	r3, r0, #0
 800d276:	21fe      	movs	r1, #254	@ 0xfe
 800d278:	0589      	lsls	r1, r1, #22
 800d27a:	1c18      	adds	r0, r3, #0
 800d27c:	f7f3 fb20 	bl	80008c0 <__aeabi_fadd>
 800d280:	1c03      	adds	r3, r0, #0
 800d282:	1c19      	adds	r1, r3, #0
 800d284:	1c20      	adds	r0, r4, #0
 800d286:	f7f3 fca5 	bl	8000bd4 <__aeabi_fdiv>
 800d28a:	1c03      	adds	r3, r0, #0
 800d28c:	68f9      	ldr	r1, [r7, #12]
 800d28e:	1c18      	adds	r0, r3, #0
 800d290:	f7f3 ffc4 	bl	800121c <__aeabi_fsub>
 800d294:	1c03      	adds	r3, r0, #0
 800d296:	e01f      	b.n	800d2d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2188      	movs	r1, #136	@ 0x88
 800d2a0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800d2a2:	1c19      	adds	r1, r3, #0
 800d2a4:	1c10      	adds	r0, r2, #0
 800d2a6:	f7f3 fc95 	bl	8000bd4 <__aeabi_fdiv>
 800d2aa:	1c03      	adds	r3, r0, #0
 800d2ac:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	1c18      	adds	r0, r3, #0
 800d2b2:	f018 f943 	bl	802553c <expf>
 800d2b6:	1c03      	adds	r3, r0, #0
 800d2b8:	21fe      	movs	r1, #254	@ 0xfe
 800d2ba:	0589      	lsls	r1, r1, #22
 800d2bc:	1c18      	adds	r0, r3, #0
 800d2be:	f7f3 faff 	bl	80008c0 <__aeabi_fadd>
 800d2c2:	1c03      	adds	r3, r0, #0
 800d2c4:	1c19      	adds	r1, r3, #0
 800d2c6:	4807      	ldr	r0, [pc, #28]	@ (800d2e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d2c8:	f7f3 fc84 	bl	8000bd4 <__aeabi_fdiv>
 800d2cc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800d2ce:	1c19      	adds	r1, r3, #0
 800d2d0:	1c20      	adds	r0, r4, #0
 800d2d2:	f7f3 fe65 	bl	8000fa0 <__aeabi_fmul>
 800d2d6:	1c03      	adds	r3, r0, #0
        }
    }
}
 800d2d8:	1c18      	adds	r0, r3, #0
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	b005      	add	sp, #20
 800d2de:	bd90      	pop	{r4, r7, pc}
 800d2e0:	c2480000 	.word	0xc2480000
 800d2e4:	43fa0000 	.word	0x43fa0000
 800d2e8:	42480000 	.word	0x42480000
 800d2ec:	3f8041ab 	.word	0x3f8041ab
 800d2f0:	40a00000 	.word	0x40a00000

0800d2f4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800d2f4:	b590      	push	{r4, r7, lr}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	4913      	ldr	r1, [pc, #76]	@ (800d354 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800d306:	1c18      	adds	r0, r3, #0
 800d308:	f7f3 fada 	bl	80008c0 <__aeabi_fadd>
 800d30c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800d30e:	1c19      	adds	r1, r3, #0
 800d310:	1c20      	adds	r0, r4, #0
 800d312:	f7f3 fc5f 	bl	8000bd4 <__aeabi_fdiv>
 800d316:	1c03      	adds	r3, r0, #0
 800d318:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	228c      	movs	r2, #140	@ 0x8c
 800d31e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	490b      	ldr	r1, [pc, #44]	@ (800d358 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800d32a:	1c18      	adds	r0, r3, #0
 800d32c:	f7f3 fac8 	bl	80008c0 <__aeabi_fadd>
 800d330:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800d332:	1c19      	adds	r1, r3, #0
 800d334:	1c20      	adds	r0, r4, #0
 800d336:	f7f3 fc4d 	bl	8000bd4 <__aeabi_fdiv>
 800d33a:	1c03      	adds	r3, r0, #0
 800d33c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2290      	movs	r2, #144	@ 0x90
 800d342:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2294      	movs	r2, #148	@ 0x94
 800d348:	2100      	movs	r1, #0
 800d34a:	5499      	strb	r1, [r3, r2]
}
 800d34c:	46c0      	nop			@ (mov r8, r8)
 800d34e:	46bd      	mov	sp, r7
 800d350:	b003      	add	sp, #12
 800d352:	bd90      	pop	{r4, r7, pc}
 800d354:	41a00000 	.word	0x41a00000
 800d358:	43fa0000 	.word	0x43fa0000

0800d35c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800d35c:	b590      	push	{r4, r7, lr}
 800d35e:	b087      	sub	sp, #28
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2294      	movs	r2, #148	@ 0x94
 800d36a:	5c9b      	ldrb	r3, [r3, r2]
 800d36c:	2201      	movs	r2, #1
 800d36e:	4053      	eors	r3, r2
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00f      	beq.n	800d396 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2198      	movs	r1, #152	@ 0x98
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	219c      	movs	r1, #156	@ 0x9c
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	21a0      	movs	r1, #160	@ 0xa0
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2294      	movs	r2, #148	@ 0x94
 800d392:	2101      	movs	r1, #1
 800d394:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	228c      	movs	r2, #140	@ 0x8c
 800d39a:	589b      	ldr	r3, [r3, r2]
 800d39c:	1c19      	adds	r1, r3, #0
 800d39e:	20fe      	movs	r0, #254	@ 0xfe
 800d3a0:	0580      	lsls	r0, r0, #22
 800d3a2:	f7f3 ff3b 	bl	800121c <__aeabi_fsub>
 800d3a6:	1c03      	adds	r3, r0, #0
 800d3a8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2298      	movs	r2, #152	@ 0x98
 800d3ae:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800d3b0:	1c19      	adds	r1, r3, #0
 800d3b2:	f7f3 fdf5 	bl	8000fa0 <__aeabi_fmul>
 800d3b6:	1c03      	adds	r3, r0, #0
 800d3b8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	228c      	movs	r2, #140	@ 0x8c
 800d3be:	589b      	ldr	r3, [r3, r2]
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	1c18      	adds	r0, r3, #0
 800d3c4:	f7f3 fdec 	bl	8000fa0 <__aeabi_fmul>
 800d3c8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800d3ca:	1c19      	adds	r1, r3, #0
 800d3cc:	1c20      	adds	r0, r4, #0
 800d3ce:	f7f3 fa77 	bl	80008c0 <__aeabi_fadd>
 800d3d2:	1c03      	adds	r3, r0, #0
 800d3d4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2298      	movs	r2, #152	@ 0x98
 800d3da:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2290      	movs	r2, #144	@ 0x90
 800d3e0:	589b      	ldr	r3, [r3, r2]
 800d3e2:	1c19      	adds	r1, r3, #0
 800d3e4:	20fe      	movs	r0, #254	@ 0xfe
 800d3e6:	0580      	lsls	r0, r0, #22
 800d3e8:	f7f3 ff18 	bl	800121c <__aeabi_fsub>
 800d3ec:	1c03      	adds	r3, r0, #0
 800d3ee:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	229c      	movs	r2, #156	@ 0x9c
 800d3f4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800d3f6:	1c19      	adds	r1, r3, #0
 800d3f8:	f7f3 fdd2 	bl	8000fa0 <__aeabi_fmul>
 800d3fc:	1c03      	adds	r3, r0, #0
 800d3fe:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2290      	movs	r2, #144	@ 0x90
 800d404:	589b      	ldr	r3, [r3, r2]
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	1c18      	adds	r0, r3, #0
 800d40a:	f7f3 fdc9 	bl	8000fa0 <__aeabi_fmul>
 800d40e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800d410:	1c19      	adds	r1, r3, #0
 800d412:	1c20      	adds	r0, r4, #0
 800d414:	f7f3 fa54 	bl	80008c0 <__aeabi_fadd>
 800d418:	1c03      	adds	r3, r0, #0
 800d41a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	229c      	movs	r2, #156	@ 0x9c
 800d420:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2298      	movs	r2, #152	@ 0x98
 800d426:	589a      	ldr	r2, [r3, r2]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	219c      	movs	r1, #156	@ 0x9c
 800d42c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800d42e:	1c19      	adds	r1, r3, #0
 800d430:	1c10      	adds	r0, r2, #0
 800d432:	f7f3 fef3 	bl	800121c <__aeabi_fsub>
 800d436:	1c03      	adds	r3, r0, #0
 800d438:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800d43a:	2100      	movs	r1, #0
 800d43c:	6978      	ldr	r0, [r7, #20]
 800d43e:	f7f3 f877 	bl	8000530 <__aeabi_fcmplt>
 800d442:	1e03      	subs	r3, r0, #0
 800d444:	d004      	beq.n	800d450 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	2280      	movs	r2, #128	@ 0x80
 800d44a:	0612      	lsls	r2, r2, #24
 800d44c:	4053      	eors	r3, r2
 800d44e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800d450:	4923      	ldr	r1, [pc, #140]	@ (800d4e0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800d452:	6978      	ldr	r0, [r7, #20]
 800d454:	f7f3 fda4 	bl	8000fa0 <__aeabi_fmul>
 800d458:	1c03      	adds	r3, r0, #0
 800d45a:	1c18      	adds	r0, r3, #0
 800d45c:	f018 f86e 	bl	802553c <expf>
 800d460:	1c03      	adds	r3, r0, #0
 800d462:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800d464:	491f      	ldr	r1, [pc, #124]	@ (800d4e4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800d466:	6938      	ldr	r0, [r7, #16]
 800d468:	f7f3 fd9a 	bl	8000fa0 <__aeabi_fmul>
 800d46c:	1c03      	adds	r3, r0, #0
 800d46e:	491e      	ldr	r1, [pc, #120]	@ (800d4e8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800d470:	1c18      	adds	r0, r3, #0
 800d472:	f7f3 fa25 	bl	80008c0 <__aeabi_fadd>
 800d476:	1c03      	adds	r3, r0, #0
 800d478:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685c      	ldr	r4, [r3, #4]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	68f9      	ldr	r1, [r7, #12]
 800d484:	1c18      	adds	r0, r3, #0
 800d486:	f7f3 fa1b 	bl	80008c0 <__aeabi_fadd>
 800d48a:	1c03      	adds	r3, r0, #0
 800d48c:	1c19      	adds	r1, r3, #0
 800d48e:	1c20      	adds	r0, r4, #0
 800d490:	f7f3 fba0 	bl	8000bd4 <__aeabi_fdiv>
 800d494:	1c03      	adds	r3, r0, #0
 800d496:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800d498:	68b9      	ldr	r1, [r7, #8]
 800d49a:	20fe      	movs	r0, #254	@ 0xfe
 800d49c:	0580      	lsls	r0, r0, #22
 800d49e:	f7f3 febd 	bl	800121c <__aeabi_fsub>
 800d4a2:	1c03      	adds	r3, r0, #0
 800d4a4:	1c18      	adds	r0, r3, #0
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	22a0      	movs	r2, #160	@ 0xa0
 800d4aa:	589b      	ldr	r3, [r3, r2]
 800d4ac:	1c19      	adds	r1, r3, #0
 800d4ae:	f7f3 fd77 	bl	8000fa0 <__aeabi_fmul>
 800d4b2:	1c03      	adds	r3, r0, #0
 800d4b4:	1c1c      	adds	r4, r3, #0
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	68b8      	ldr	r0, [r7, #8]
 800d4ba:	f7f3 fd71 	bl	8000fa0 <__aeabi_fmul>
 800d4be:	1c03      	adds	r3, r0, #0
 800d4c0:	1c19      	adds	r1, r3, #0
 800d4c2:	1c20      	adds	r0, r4, #0
 800d4c4:	f7f3 f9fc 	bl	80008c0 <__aeabi_fadd>
 800d4c8:	1c03      	adds	r3, r0, #0
 800d4ca:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	22a0      	movs	r2, #160	@ 0xa0
 800d4d0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	22a0      	movs	r2, #160	@ 0xa0
 800d4d6:	589b      	ldr	r3, [r3, r2]
}
 800d4d8:	1c18      	adds	r0, r3, #0
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	b007      	add	sp, #28
 800d4de:	bd90      	pop	{r4, r7, pc}
 800d4e0:	be4ccccd 	.word	0xbe4ccccd
 800d4e4:	43f00000 	.word	0x43f00000
 800d4e8:	41a00000 	.word	0x41a00000

0800d4ec <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	000a      	movs	r2, r1
 800d4f6:	1cbb      	adds	r3, r7, #2
 800d4f8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800d4fa:	230d      	movs	r3, #13
 800d4fc:	18fb      	adds	r3, r7, r3
 800d4fe:	22ff      	movs	r2, #255	@ 0xff
 800d500:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800d502:	230e      	movs	r3, #14
 800d504:	18fb      	adds	r3, r7, r3
 800d506:	2200      	movs	r2, #0
 800d508:	801a      	strh	r2, [r3, #0]
 800d50a:	e037      	b.n	800d57c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800d50c:	230e      	movs	r3, #14
 800d50e:	18fb      	adds	r3, r7, r3
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	18d3      	adds	r3, r2, r3
 800d516:	7819      	ldrb	r1, [r3, #0]
 800d518:	220d      	movs	r2, #13
 800d51a:	18bb      	adds	r3, r7, r2
 800d51c:	18ba      	adds	r2, r7, r2
 800d51e:	7812      	ldrb	r2, [r2, #0]
 800d520:	404a      	eors	r2, r1
 800d522:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800d524:	230c      	movs	r3, #12
 800d526:	18fb      	adds	r3, r7, r3
 800d528:	2208      	movs	r2, #8
 800d52a:	701a      	strb	r2, [r3, #0]
 800d52c:	e01b      	b.n	800d566 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800d52e:	210d      	movs	r1, #13
 800d530:	187b      	adds	r3, r7, r1
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	b25b      	sxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	da09      	bge.n	800d54e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800d53a:	187b      	adds	r3, r7, r1
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	b25b      	sxtb	r3, r3
 800d542:	2231      	movs	r2, #49	@ 0x31
 800d544:	4053      	eors	r3, r2
 800d546:	b25a      	sxtb	r2, r3
 800d548:	187b      	adds	r3, r7, r1
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	e005      	b.n	800d55a <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800d54e:	230d      	movs	r3, #13
 800d550:	18fa      	adds	r2, r7, r3
 800d552:	18fb      	adds	r3, r7, r3
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	18db      	adds	r3, r3, r3
 800d558:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800d55a:	220c      	movs	r2, #12
 800d55c:	18bb      	adds	r3, r7, r2
 800d55e:	18ba      	adds	r2, r7, r2
 800d560:	7812      	ldrb	r2, [r2, #0]
 800d562:	3a01      	subs	r2, #1
 800d564:	701a      	strb	r2, [r3, #0]
 800d566:	230c      	movs	r3, #12
 800d568:	18fb      	adds	r3, r7, r3
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1de      	bne.n	800d52e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800d570:	220e      	movs	r2, #14
 800d572:	18bb      	adds	r3, r7, r2
 800d574:	18ba      	adds	r2, r7, r2
 800d576:	8812      	ldrh	r2, [r2, #0]
 800d578:	3201      	adds	r2, #1
 800d57a:	801a      	strh	r2, [r3, #0]
 800d57c:	230e      	movs	r3, #14
 800d57e:	18fa      	adds	r2, r7, r3
 800d580:	1cbb      	adds	r3, r7, #2
 800d582:	8812      	ldrh	r2, [r2, #0]
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	429a      	cmp	r2, r3
 800d588:	d3c0      	bcc.n	800d50c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800d58a:	230d      	movs	r3, #13
 800d58c:	18fb      	adds	r3, r7, r3
 800d58e:	781b      	ldrb	r3, [r3, #0]
}
 800d590:	0018      	movs	r0, r3
 800d592:	46bd      	mov	sp, r7
 800d594:	b004      	add	sp, #16
 800d596:	bd80      	pop	{r7, pc}

0800d598 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	0008      	movs	r0, r1
 800d5a2:	0011      	movs	r1, r2
 800d5a4:	1cbb      	adds	r3, r7, #2
 800d5a6:	1c02      	adds	r2, r0, #0
 800d5a8:	801a      	strh	r2, [r3, #0]
 800d5aa:	1c7b      	adds	r3, r7, #1
 800d5ac:	1c0a      	adds	r2, r1, #0
 800d5ae:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800d5b0:	1cbb      	adds	r3, r7, #2
 800d5b2:	881a      	ldrh	r2, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	0011      	movs	r1, r2
 800d5b8:	0018      	movs	r0, r3
 800d5ba:	f7ff ff97 	bl	800d4ec <sensirion_i2c_generate_crc>
 800d5be:	0003      	movs	r3, r0
 800d5c0:	001a      	movs	r2, r3
 800d5c2:	1c7b      	adds	r3, r7, #1
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d001      	beq.n	800d5ce <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e000      	b.n	800d5d0 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	0018      	movs	r0, r3
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	b002      	add	sp, #8
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	0008      	movs	r0, r1
 800d5e2:	0011      	movs	r1, r2
 800d5e4:	1cbb      	adds	r3, r7, #2
 800d5e6:	1c02      	adds	r2, r0, #0
 800d5e8:	801a      	strh	r2, [r3, #0]
 800d5ea:	003b      	movs	r3, r7
 800d5ec:	1c0a      	adds	r2, r1, #0
 800d5ee:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800d5f0:	003b      	movs	r3, r7
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	0a1b      	lsrs	r3, r3, #8
 800d5f6:	b299      	uxth	r1, r3
 800d5f8:	1cbb      	adds	r3, r7, #2
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	1cba      	adds	r2, r7, #2
 800d5fe:	1c58      	adds	r0, r3, #1
 800d600:	8010      	strh	r0, [r2, #0]
 800d602:	001a      	movs	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	189b      	adds	r3, r3, r2
 800d608:	b2ca      	uxtb	r2, r1
 800d60a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800d60c:	1cbb      	adds	r3, r7, #2
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	1cba      	adds	r2, r7, #2
 800d612:	1c59      	adds	r1, r3, #1
 800d614:	8011      	strh	r1, [r2, #0]
 800d616:	001a      	movs	r2, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	189b      	adds	r3, r3, r2
 800d61c:	003a      	movs	r2, r7
 800d61e:	8812      	ldrh	r2, [r2, #0]
 800d620:	b2d2      	uxtb	r2, r2
 800d622:	701a      	strb	r2, [r3, #0]
    return offset;
 800d624:	1cbb      	adds	r3, r7, #2
 800d626:	881b      	ldrh	r3, [r3, #0]
}
 800d628:	0018      	movs	r0, r3
 800d62a:	46bd      	mov	sp, r7
 800d62c:	b002      	add	sp, #8
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800d630:	b590      	push	{r4, r7, lr}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	0008      	movs	r0, r1
 800d63a:	0011      	movs	r1, r2
 800d63c:	1cbb      	adds	r3, r7, #2
 800d63e:	1c02      	adds	r2, r0, #0
 800d640:	801a      	strh	r2, [r3, #0]
 800d642:	003b      	movs	r3, r7
 800d644:	1c0a      	adds	r2, r1, #0
 800d646:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800d648:	003b      	movs	r3, r7
 800d64a:	881b      	ldrh	r3, [r3, #0]
 800d64c:	0a1b      	lsrs	r3, r3, #8
 800d64e:	b299      	uxth	r1, r3
 800d650:	1cbb      	adds	r3, r7, #2
 800d652:	881b      	ldrh	r3, [r3, #0]
 800d654:	1cba      	adds	r2, r7, #2
 800d656:	1c58      	adds	r0, r3, #1
 800d658:	8010      	strh	r0, [r2, #0]
 800d65a:	001a      	movs	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	189b      	adds	r3, r3, r2
 800d660:	b2ca      	uxtb	r2, r1
 800d662:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800d664:	1cbb      	adds	r3, r7, #2
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	1cba      	adds	r2, r7, #2
 800d66a:	1c59      	adds	r1, r3, #1
 800d66c:	8011      	strh	r1, [r2, #0]
 800d66e:	001a      	movs	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	189b      	adds	r3, r3, r2
 800d674:	003a      	movs	r2, r7
 800d676:	8812      	ldrh	r2, [r2, #0]
 800d678:	b2d2      	uxtb	r2, r2
 800d67a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800d67c:	1cbb      	adds	r3, r7, #2
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	3b02      	subs	r3, #2
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800d686:	1cbb      	adds	r3, r7, #2
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	18d4      	adds	r4, r2, r3
 800d68e:	2102      	movs	r1, #2
 800d690:	f7ff ff2c 	bl	800d4ec <sensirion_i2c_generate_crc>
 800d694:	0003      	movs	r3, r0
 800d696:	7023      	strb	r3, [r4, #0]
    offset++;
 800d698:	1cbb      	adds	r3, r7, #2
 800d69a:	881a      	ldrh	r2, [r3, #0]
 800d69c:	1cbb      	adds	r3, r7, #2
 800d69e:	3201      	adds	r2, #1
 800d6a0:	801a      	strh	r2, [r3, #0]

    return offset;
 800d6a2:	1cbb      	adds	r3, r7, #2
 800d6a4:	881b      	ldrh	r3, [r3, #0]
}
 800d6a6:	0018      	movs	r0, r3
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	b003      	add	sp, #12
 800d6ac:	bd90      	pop	{r4, r7, pc}

0800d6ae <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	0008      	movs	r0, r1
 800d6b8:	0011      	movs	r1, r2
 800d6ba:	1cbb      	adds	r3, r7, #2
 800d6bc:	1c02      	adds	r2, r0, #0
 800d6be:	801a      	strh	r2, [r3, #0]
 800d6c0:	003b      	movs	r3, r7
 800d6c2:	1c0a      	adds	r2, r1, #0
 800d6c4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800d6c6:	003b      	movs	r3, r7
 800d6c8:	881a      	ldrh	r2, [r3, #0]
 800d6ca:	1cbb      	adds	r3, r7, #2
 800d6cc:	8819      	ldrh	r1, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	f7ff ffad 	bl	800d630 <sensirion_i2c_add_uint16_t_to_buffer>
 800d6d6:	0003      	movs	r3, r0
}
 800d6d8:	0018      	movs	r0, r3
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	b002      	add	sp, #8
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6039      	str	r1, [r7, #0]
 800d6e8:	0011      	movs	r1, r2
 800d6ea:	1dfb      	adds	r3, r7, #7
 800d6ec:	1c02      	adds	r2, r0, #0
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	1d3b      	adds	r3, r7, #4
 800d6f2:	1c0a      	adds	r2, r1, #0
 800d6f4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800d6f6:	1d3b      	adds	r3, r7, #4
 800d6f8:	881a      	ldrh	r2, [r3, #0]
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	1dfb      	adds	r3, r7, #7
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	0018      	movs	r0, r3
 800d702:	f7fe f9d9 	bl	800bab8 <sensirion_i2c_hal_write>
 800d706:	0003      	movs	r3, r0
}
 800d708:	0018      	movs	r0, r3
 800d70a:	46bd      	mov	sp, r7
 800d70c:	b002      	add	sp, #8
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800d710:	b5b0      	push	{r4, r5, r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6039      	str	r1, [r7, #0]
 800d718:	0011      	movs	r1, r2
 800d71a:	1dfb      	adds	r3, r7, #7
 800d71c:	1c02      	adds	r2, r0, #0
 800d71e:	701a      	strb	r2, [r3, #0]
 800d720:	1d3b      	adds	r3, r7, #4
 800d722:	1c0a      	adds	r2, r1, #0
 800d724:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800d726:	1d3b      	adds	r3, r7, #4
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	085b      	lsrs	r3, r3, #1
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	220a      	movs	r2, #10
 800d730:	18ba      	adds	r2, r7, r2
 800d732:	1c19      	adds	r1, r3, #0
 800d734:	1c0b      	adds	r3, r1, #0
 800d736:	18db      	adds	r3, r3, r3
 800d738:	185b      	adds	r3, r3, r1
 800d73a:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800d73c:	1d3b      	adds	r3, r7, #4
 800d73e:	881b      	ldrh	r3, [r3, #0]
 800d740:	2201      	movs	r2, #1
 800d742:	4013      	ands	r3, r2
 800d744:	b29b      	uxth	r3, r3
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800d74a:	2304      	movs	r3, #4
 800d74c:	e06b      	b.n	800d826 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800d74e:	230a      	movs	r3, #10
 800d750:	18fb      	adds	r3, r7, r3
 800d752:	881a      	ldrh	r2, [r3, #0]
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	1dfb      	adds	r3, r7, #7
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	0018      	movs	r0, r3
 800d75c:	f7fe f98c 	bl	800ba78 <sensirion_i2c_hal_read>
 800d760:	0003      	movs	r3, r0
 800d762:	001a      	movs	r2, r3
 800d764:	2108      	movs	r1, #8
 800d766:	187b      	adds	r3, r7, r1
 800d768:	801a      	strh	r2, [r3, #0]
    if (error) {
 800d76a:	000a      	movs	r2, r1
 800d76c:	18bb      	adds	r3, r7, r2
 800d76e:	2100      	movs	r1, #0
 800d770:	5e5b      	ldrsh	r3, [r3, r1]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d003      	beq.n	800d77e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800d776:	18bb      	adds	r3, r7, r2
 800d778:	2200      	movs	r2, #0
 800d77a:	5e9b      	ldrsh	r3, [r3, r2]
 800d77c:	e053      	b.n	800d826 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800d77e:	230e      	movs	r3, #14
 800d780:	18fb      	adds	r3, r7, r3
 800d782:	2200      	movs	r2, #0
 800d784:	801a      	strh	r2, [r3, #0]
 800d786:	230c      	movs	r3, #12
 800d788:	18fb      	adds	r3, r7, r3
 800d78a:	2200      	movs	r2, #0
 800d78c:	801a      	strh	r2, [r3, #0]
 800d78e:	e041      	b.n	800d814 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800d790:	210e      	movs	r1, #14
 800d792:	187b      	adds	r3, r7, r1
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800d79a:	187b      	adds	r3, r7, r1
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	3302      	adds	r3, #2
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	001a      	movs	r2, r3
 800d7a8:	2102      	movs	r1, #2
 800d7aa:	f7ff fef5 	bl	800d598 <sensirion_i2c_check_crc>
 800d7ae:	0003      	movs	r3, r0
 800d7b0:	001a      	movs	r2, r3
 800d7b2:	2108      	movs	r1, #8
 800d7b4:	187b      	adds	r3, r7, r1
 800d7b6:	801a      	strh	r2, [r3, #0]
        if (error) {
 800d7b8:	000a      	movs	r2, r1
 800d7ba:	18bb      	adds	r3, r7, r2
 800d7bc:	2100      	movs	r1, #0
 800d7be:	5e5b      	ldrsh	r3, [r3, r1]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d003      	beq.n	800d7cc <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800d7c4:	18bb      	adds	r3, r7, r2
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	5e9b      	ldrsh	r3, [r3, r2]
 800d7ca:	e02c      	b.n	800d826 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800d7cc:	240e      	movs	r4, #14
 800d7ce:	193b      	adds	r3, r7, r4
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	18d2      	adds	r2, r2, r3
 800d7d6:	250c      	movs	r5, #12
 800d7d8:	197b      	adds	r3, r7, r5
 800d7da:	881b      	ldrh	r3, [r3, #0]
 800d7dc:	1979      	adds	r1, r7, r5
 800d7de:	1c58      	adds	r0, r3, #1
 800d7e0:	8008      	strh	r0, [r1, #0]
 800d7e2:	0019      	movs	r1, r3
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	185b      	adds	r3, r3, r1
 800d7e8:	7812      	ldrb	r2, [r2, #0]
 800d7ea:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800d7ec:	193b      	adds	r3, r7, r4
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	683a      	ldr	r2, [r7, #0]
 800d7f4:	18d2      	adds	r2, r2, r3
 800d7f6:	197b      	adds	r3, r7, r5
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	1979      	adds	r1, r7, r5
 800d7fc:	1c58      	adds	r0, r3, #1
 800d7fe:	8008      	strh	r0, [r1, #0]
 800d800:	0019      	movs	r1, r3
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	185b      	adds	r3, r3, r1
 800d806:	7812      	ldrb	r2, [r2, #0]
 800d808:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800d80a:	193b      	adds	r3, r7, r4
 800d80c:	193a      	adds	r2, r7, r4
 800d80e:	8812      	ldrh	r2, [r2, #0]
 800d810:	3203      	adds	r2, #3
 800d812:	801a      	strh	r2, [r3, #0]
 800d814:	230e      	movs	r3, #14
 800d816:	18fa      	adds	r2, r7, r3
 800d818:	230a      	movs	r3, #10
 800d81a:	18fb      	adds	r3, r7, r3
 800d81c:	8812      	ldrh	r2, [r2, #0]
 800d81e:	881b      	ldrh	r3, [r3, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d3b5      	bcc.n	800d790 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800d824:	2300      	movs	r3, #0
}
 800d826:	0018      	movs	r0, r3
 800d828:	46bd      	mov	sp, r7
 800d82a:	b004      	add	sp, #16
 800d82c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d830 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800d830:	b590      	push	{r4, r7, lr}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6039      	str	r1, [r7, #0]
 800d838:	0011      	movs	r1, r2
 800d83a:	1dfb      	adds	r3, r7, #7
 800d83c:	1c02      	adds	r2, r0, #0
 800d83e:	701a      	strb	r2, [r3, #0]
 800d840:	1dbb      	adds	r3, r7, #6
 800d842:	1c0a      	adds	r2, r1, #0
 800d844:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800d846:	4b08      	ldr	r3, [pc, #32]	@ (800d868 <ReadRegister+0x38>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d008      	beq.n	800d860 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800d84e:	4b06      	ldr	r3, [pc, #24]	@ (800d868 <ReadRegister+0x38>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	1dba      	adds	r2, r7, #6
 800d854:	7814      	ldrb	r4, [r2, #0]
 800d856:	6839      	ldr	r1, [r7, #0]
 800d858:	1dfa      	adds	r2, r7, #7
 800d85a:	7810      	ldrb	r0, [r2, #0]
 800d85c:	0022      	movs	r2, r4
 800d85e:	4798      	blx	r3
  }
}
 800d860:	46c0      	nop			@ (mov r8, r8)
 800d862:	46bd      	mov	sp, r7
 800d864:	b003      	add	sp, #12
 800d866:	bd90      	pop	{r4, r7, pc}
 800d868:	20000e70 	.word	0x20000e70

0800d86c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800d86c:	b590      	push	{r4, r7, lr}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6039      	str	r1, [r7, #0]
 800d874:	0011      	movs	r1, r2
 800d876:	1dfb      	adds	r3, r7, #7
 800d878:	1c02      	adds	r2, r0, #0
 800d87a:	701a      	strb	r2, [r3, #0]
 800d87c:	1dbb      	adds	r3, r7, #6
 800d87e:	1c0a      	adds	r2, r1, #0
 800d880:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800d882:	4b08      	ldr	r3, [pc, #32]	@ (800d8a4 <WriteRegister+0x38>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d008      	beq.n	800d89c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800d88a:	4b06      	ldr	r3, [pc, #24]	@ (800d8a4 <WriteRegister+0x38>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	1dba      	adds	r2, r7, #6
 800d890:	7814      	ldrb	r4, [r2, #0]
 800d892:	6839      	ldr	r1, [r7, #0]
 800d894:	1dfa      	adds	r2, r7, #7
 800d896:	7810      	ldrb	r0, [r2, #0]
 800d898:	0022      	movs	r2, r4
 800d89a:	4798      	blx	r3
  }
}
 800d89c:	46c0      	nop			@ (mov r8, r8)
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	b003      	add	sp, #12
 800d8a2:	bd90      	pop	{r4, r7, pc}
 800d8a4:	20000e74 	.word	0x20000e74

0800d8a8 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800d8b0:	f003 fb90 	bl	8010fd4 <HAL_GetTick>
 800d8b4:	0002      	movs	r2, r0
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	18d2      	adds	r2, r2, r3
 800d8ba:	4b03      	ldr	r3, [pc, #12]	@ (800d8c8 <setSGP40TimeStamp+0x20>)
 800d8bc:	601a      	str	r2, [r3, #0]
}
 800d8be:	46c0      	nop			@ (mov r8, r8)
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	b002      	add	sp, #8
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	46c0      	nop			@ (mov r8, r8)
 800d8c8:	20000e84 	.word	0x20000e84

0800d8cc <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800d8d0:	4b02      	ldr	r3, [pc, #8]	@ (800d8dc <ResetSGP40samplecounter+0x10>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	701a      	strb	r2, [r3, #0]
}
 800d8d6:	46c0      	nop			@ (mov r8, r8)
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	20000e82 	.word	0x20000e82

0800d8e0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800d8ea:	4b07      	ldr	r3, [pc, #28]	@ (800d908 <SGP_Init+0x28>)
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800d8f0:	4b06      	ldr	r3, [pc, #24]	@ (800d90c <SGP_Init+0x2c>)
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800d8f6:	4b06      	ldr	r3, [pc, #24]	@ (800d910 <SGP_Init+0x30>)
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	0018      	movs	r0, r3
 800d8fc:	f7fe ff70 	bl	800c7e0 <GasIndexAlgorithm_init>
}
 800d900:	46c0      	nop			@ (mov r8, r8)
 800d902:	46bd      	mov	sp, r7
 800d904:	b002      	add	sp, #8
 800d906:	bd80      	pop	{r7, pc}
 800d908:	20000e70 	.word	0x20000e70
 800d90c:	20000e74 	.word	0x20000e74
 800d910:	20000e8c 	.word	0x20000e8c

0800d914 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800d914:	b580      	push	{r7, lr}
 800d916:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800d918:	4b07      	ldr	r3, [pc, #28]	@ (800d938 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d004      	beq.n	800d92a <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800d920:	4b06      	ldr	r3, [pc, #24]	@ (800d93c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800d922:	22fe      	movs	r2, #254	@ 0xfe
 800d924:	0592      	lsls	r2, r2, #22
 800d926:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800d928:	e002      	b.n	800d930 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800d92a:	4b04      	ldr	r3, [pc, #16]	@ (800d93c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800d92c:	4a04      	ldr	r2, [pc, #16]	@ (800d940 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800d92e:	605a      	str	r2, [r3, #4]
}
 800d930:	46c0      	nop			@ (mov r8, r8)
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	46c0      	nop			@ (mov r8, r8)
 800d938:	20001dd9 	.word	0x20001dd9
 800d93c:	20000e8c 	.word	0x20000e8c
 800d940:	44610000 	.word	0x44610000

0800d944 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800d948:	4b13      	ldr	r3, [pc, #76]	@ (800d998 <SGP_StartMeasurement+0x54>)
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d00d      	beq.n	800d96c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800d950:	4b12      	ldr	r3, [pc, #72]	@ (800d99c <SGP_StartMeasurement+0x58>)
 800d952:	2208      	movs	r2, #8
 800d954:	0019      	movs	r1, r3
 800d956:	2059      	movs	r0, #89	@ 0x59
 800d958:	f7ff ff88 	bl	800d86c <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800d95c:	f003 fb3a 	bl	8010fd4 <HAL_GetTick>
 800d960:	0003      	movs	r3, r0
 800d962:	331e      	adds	r3, #30
 800d964:	001a      	movs	r2, r3
 800d966:	4b0e      	ldr	r3, [pc, #56]	@ (800d9a0 <SGP_StartMeasurement+0x5c>)
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	e00c      	b.n	800d986 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800d96c:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a4 <SGP_StartMeasurement+0x60>)
 800d96e:	2208      	movs	r2, #8
 800d970:	0019      	movs	r1, r3
 800d972:	2059      	movs	r0, #89	@ 0x59
 800d974:	f7ff ff7a 	bl	800d86c <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800d978:	f003 fb2c 	bl	8010fd4 <HAL_GetTick>
 800d97c:	0003      	movs	r3, r0
 800d97e:	33aa      	adds	r3, #170	@ 0xaa
 800d980:	001a      	movs	r2, r3
 800d982:	4b09      	ldr	r3, [pc, #36]	@ (800d9a8 <SGP_StartMeasurement+0x64>)
 800d984:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800d986:	4b09      	ldr	r3, [pc, #36]	@ (800d9ac <SGP_StartMeasurement+0x68>)
 800d988:	2200      	movs	r2, #0
 800d98a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800d98c:	4b08      	ldr	r3, [pc, #32]	@ (800d9b0 <SGP_StartMeasurement+0x6c>)
 800d98e:	2200      	movs	r2, #0
 800d990:	701a      	strb	r2, [r3, #0]
}
 800d992:	46c0      	nop			@ (mov r8, r8)
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	20000f34 	.word	0x20000f34
 800d99c:	200000ac 	.word	0x200000ac
 800d9a0:	200000c0 	.word	0x200000c0
 800d9a4:	200000a4 	.word	0x200000a4
 800d9a8:	200000b8 	.word	0x200000b8
 800d9ac:	20000e88 	.word	0x20000e88
 800d9b0:	20000e89 	.word	0x20000e89

0800d9b4 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800d9b8:	4b04      	ldr	r3, [pc, #16]	@ (800d9cc <SGP_HeatedUp+0x18>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	0018      	movs	r0, r3
 800d9be:	f002 fe67 	bl	8010690 <TimestampIsReached>
 800d9c2:	0003      	movs	r3, r0
}
 800d9c4:	0018      	movs	r0, r3
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	46c0      	nop			@ (mov r8, r8)
 800d9cc:	200000b8 	.word	0x200000b8

0800d9d0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800d9d4:	4b04      	ldr	r3, [pc, #16]	@ (800d9e8 <SGP_MeasurementReady+0x18>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	0018      	movs	r0, r3
 800d9da:	f002 fe59 	bl	8010690 <TimestampIsReached>
 800d9de:	0003      	movs	r3, r0
}
 800d9e0:	0018      	movs	r0, r3
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	46c0      	nop			@ (mov r8, r8)
 800d9e8:	200000c0 	.word	0x200000c0

0800d9ec <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800d9f0:	4b04      	ldr	r3, [pc, #16]	@ (800da04 <SGP_MeasurementDone+0x18>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	0018      	movs	r0, r3
 800d9f6:	f002 fe4b 	bl	8010690 <TimestampIsReached>
 800d9fa:	0003      	movs	r3, r0
}
 800d9fc:	0018      	movs	r0, r3
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	46c0      	nop			@ (mov r8, r8)
 800da04:	200000bc 	.word	0x200000bc

0800da08 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800da0c:	4b04      	ldr	r3, [pc, #16]	@ (800da20 <SGP_TurnHeaterOff+0x18>)
 800da0e:	2202      	movs	r2, #2
 800da10:	0019      	movs	r1, r3
 800da12:	2059      	movs	r0, #89	@ 0x59
 800da14:	f7ff ff2a 	bl	800d86c <WriteRegister>
}
 800da18:	46c0      	nop			@ (mov r8, r8)
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	46c0      	nop			@ (mov r8, r8)
 800da20:	2000009c 	.word	0x2000009c

0800da24 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800da24:	b590      	push	{r4, r7, lr}
 800da26:	b087      	sub	sp, #28
 800da28:	af02      	add	r7, sp, #8
 800da2a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800da2c:	f7ff ffc2 	bl	800d9b4 <SGP_HeatedUp>
 800da30:	1e03      	subs	r3, r0, #0
 800da32:	d032      	beq.n	800da9a <SGP_GetMeasurementValues+0x76>
 800da34:	4b7f      	ldr	r3, [pc, #508]	@ (800dc34 <SGP_GetMeasurementValues+0x210>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	2201      	movs	r2, #1
 800da3a:	4053      	eors	r3, r2
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d02b      	beq.n	800da9a <SGP_GetMeasurementValues+0x76>
 800da42:	4b7d      	ldr	r3, [pc, #500]	@ (800dc38 <SGP_GetMeasurementValues+0x214>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	2201      	movs	r2, #1
 800da48:	4053      	eors	r3, r2
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d024      	beq.n	800da9a <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800da50:	4b78      	ldr	r3, [pc, #480]	@ (800dc34 <SGP_GetMeasurementValues+0x210>)
 800da52:	2201      	movs	r2, #1
 800da54:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800da56:	4b79      	ldr	r3, [pc, #484]	@ (800dc3c <SGP_GetMeasurementValues+0x218>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00d      	beq.n	800da7a <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800da5e:	4b78      	ldr	r3, [pc, #480]	@ (800dc40 <SGP_GetMeasurementValues+0x21c>)
 800da60:	2208      	movs	r2, #8
 800da62:	0019      	movs	r1, r3
 800da64:	2059      	movs	r0, #89	@ 0x59
 800da66:	f7ff ff01 	bl	800d86c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800da6a:	f003 fab3 	bl	8010fd4 <HAL_GetTick>
 800da6e:	0003      	movs	r3, r0
 800da70:	331e      	adds	r3, #30
 800da72:	001a      	movs	r2, r3
 800da74:	4b73      	ldr	r3, [pc, #460]	@ (800dc44 <SGP_GetMeasurementValues+0x220>)
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	e00c      	b.n	800da94 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800da7a:	4b73      	ldr	r3, [pc, #460]	@ (800dc48 <SGP_GetMeasurementValues+0x224>)
 800da7c:	2208      	movs	r2, #8
 800da7e:	0019      	movs	r1, r3
 800da80:	2059      	movs	r0, #89	@ 0x59
 800da82:	f7ff fef3 	bl	800d86c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800da86:	f003 faa5 	bl	8010fd4 <HAL_GetTick>
 800da8a:	0003      	movs	r3, r0
 800da8c:	331e      	adds	r3, #30
 800da8e:	001a      	movs	r2, r3
 800da90:	4b6c      	ldr	r3, [pc, #432]	@ (800dc44 <SGP_GetMeasurementValues+0x220>)
 800da92:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800da94:	4b68      	ldr	r3, [pc, #416]	@ (800dc38 <SGP_GetMeasurementValues+0x214>)
 800da96:	2201      	movs	r2, #1
 800da98:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800da9a:	4b66      	ldr	r3, [pc, #408]	@ (800dc34 <SGP_GetMeasurementValues+0x210>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d100      	bne.n	800daa4 <SGP_GetMeasurementValues+0x80>
 800daa2:	e0ab      	b.n	800dbfc <SGP_GetMeasurementValues+0x1d8>
 800daa4:	f7ff ff94 	bl	800d9d0 <SGP_MeasurementReady>
 800daa8:	1e03      	subs	r3, r0, #0
 800daaa:	d100      	bne.n	800daae <SGP_GetMeasurementValues+0x8a>
 800daac:	e0a6      	b.n	800dbfc <SGP_GetMeasurementValues+0x1d8>
 800daae:	4b67      	ldr	r3, [pc, #412]	@ (800dc4c <SGP_GetMeasurementValues+0x228>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	2201      	movs	r2, #1
 800dab4:	4053      	eors	r3, r2
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d100      	bne.n	800dabe <SGP_GetMeasurementValues+0x9a>
 800dabc:	e09e      	b.n	800dbfc <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800dabe:	4b63      	ldr	r3, [pc, #396]	@ (800dc4c <SGP_GetMeasurementValues+0x228>)
 800dac0:	2201      	movs	r2, #1
 800dac2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800dac4:	4b62      	ldr	r3, [pc, #392]	@ (800dc50 <SGP_GetMeasurementValues+0x22c>)
 800dac6:	2203      	movs	r2, #3
 800dac8:	0019      	movs	r1, r3
 800daca:	2059      	movs	r0, #89	@ 0x59
 800dacc:	f7ff feb0 	bl	800d830 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800dad0:	4b5f      	ldr	r3, [pc, #380]	@ (800dc50 <SGP_GetMeasurementValues+0x22c>)
 800dad2:	2203      	movs	r2, #3
 800dad4:	2103      	movs	r1, #3
 800dad6:	0018      	movs	r0, r3
 800dad8:	f000 f918 	bl	800dd0c <CheckCRC>
 800dadc:	0003      	movs	r3, r0
 800dade:	001a      	movs	r2, r3
 800dae0:	2301      	movs	r3, #1
 800dae2:	4053      	eors	r3, r2
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d02a      	beq.n	800db40 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800daea:	4a5a      	ldr	r2, [pc, #360]	@ (800dc54 <SGP_GetMeasurementValues+0x230>)
 800daec:	4b5a      	ldr	r3, [pc, #360]	@ (800dc58 <SGP_GetMeasurementValues+0x234>)
 800daee:	0019      	movs	r1, r3
 800daf0:	2001      	movs	r0, #1
 800daf2:	f002 fe23 	bl	801073c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800daf6:	4a59      	ldr	r2, [pc, #356]	@ (800dc5c <SGP_GetMeasurementValues+0x238>)
 800daf8:	4b59      	ldr	r3, [pc, #356]	@ (800dc60 <SGP_GetMeasurementValues+0x23c>)
 800dafa:	0019      	movs	r1, r3
 800dafc:	2002      	movs	r0, #2
 800dafe:	f002 fe1d 	bl	801073c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800db02:	230f      	movs	r3, #15
 800db04:	18fb      	adds	r3, r7, r3
 800db06:	2200      	movs	r2, #0
 800db08:	701a      	strb	r2, [r3, #0]
 800db0a:	e012      	b.n	800db32 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800db0c:	240f      	movs	r4, #15
 800db0e:	193b      	adds	r3, r7, r4
 800db10:	7818      	ldrb	r0, [r3, #0]
 800db12:	193b      	adds	r3, r7, r4
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	4a4e      	ldr	r2, [pc, #312]	@ (800dc50 <SGP_GetMeasurementValues+0x22c>)
 800db18:	5cd3      	ldrb	r3, [r2, r3]
 800db1a:	4a52      	ldr	r2, [pc, #328]	@ (800dc64 <SGP_GetMeasurementValues+0x240>)
 800db1c:	4952      	ldr	r1, [pc, #328]	@ (800dc68 <SGP_GetMeasurementValues+0x244>)
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	0003      	movs	r3, r0
 800db22:	2003      	movs	r0, #3
 800db24:	f002 fe0a 	bl	801073c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800db28:	193b      	adds	r3, r7, r4
 800db2a:	781a      	ldrb	r2, [r3, #0]
 800db2c:	193b      	adds	r3, r7, r4
 800db2e:	3201      	adds	r2, #1
 800db30:	701a      	strb	r2, [r3, #0]
 800db32:	230f      	movs	r3, #15
 800db34:	18fb      	adds	r3, r7, r3
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d9e7      	bls.n	800db0c <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800db3c:	2300      	movs	r3, #0
 800db3e:	e075      	b.n	800dc2c <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800db40:	f003 fa48 	bl	8010fd4 <HAL_GetTick>
 800db44:	0003      	movs	r3, r0
 800db46:	22fa      	movs	r2, #250	@ 0xfa
 800db48:	0092      	lsls	r2, r2, #2
 800db4a:	189a      	adds	r2, r3, r2
 800db4c:	4b47      	ldr	r3, [pc, #284]	@ (800dc6c <SGP_GetMeasurementValues+0x248>)
 800db4e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800db50:	f7ff ff5a 	bl	800da08 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800db54:	4b46      	ldr	r3, [pc, #280]	@ (800dc70 <SGP_GetMeasurementValues+0x24c>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	3301      	adds	r3, #1
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	4b44      	ldr	r3, [pc, #272]	@ (800dc70 <SGP_GetMeasurementValues+0x24c>)
 800db5e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800db60:	4b43      	ldr	r3, [pc, #268]	@ (800dc70 <SGP_GetMeasurementValues+0x24c>)
 800db62:	781a      	ldrb	r2, [r3, #0]
 800db64:	4b43      	ldr	r3, [pc, #268]	@ (800dc74 <SGP_GetMeasurementValues+0x250>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d347      	bcc.n	800dbfc <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800db6c:	4b38      	ldr	r3, [pc, #224]	@ (800dc50 <SGP_GetMeasurementValues+0x22c>)
 800db6e:	785b      	ldrb	r3, [r3, #1]
 800db70:	021b      	lsls	r3, r3, #8
 800db72:	b21a      	sxth	r2, r3
 800db74:	4b36      	ldr	r3, [pc, #216]	@ (800dc50 <SGP_GetMeasurementValues+0x22c>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	b21b      	sxth	r3, r3
 800db7a:	4313      	orrs	r3, r2
 800db7c:	b21a      	sxth	r2, r3
 800db7e:	240c      	movs	r4, #12
 800db80:	193b      	adds	r3, r7, r4
 800db82:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800db88:	193b      	adds	r3, r7, r4
 800db8a:	8819      	ldrh	r1, [r3, #0]
 800db8c:	2308      	movs	r3, #8
 800db8e:	18fa      	adds	r2, r7, r3
 800db90:	4b39      	ldr	r3, [pc, #228]	@ (800dc78 <SGP_GetMeasurementValues+0x254>)
 800db92:	0018      	movs	r0, r3
 800db94:	f7fe fe88 	bl	800c8a8 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800db98:	68ba      	ldr	r2, [r7, #8]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800db9e:	4b37      	ldr	r3, [pc, #220]	@ (800dc7c <SGP_GetMeasurementValues+0x258>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	3301      	adds	r3, #1
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	4b35      	ldr	r3, [pc, #212]	@ (800dc7c <SGP_GetMeasurementValues+0x258>)
 800dba8:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800dbaa:	4b34      	ldr	r3, [pc, #208]	@ (800dc7c <SGP_GetMeasurementValues+0x258>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d10d      	bne.n	800dbce <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800dbb2:	193b      	adds	r3, r7, r4
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	4a32      	ldr	r2, [pc, #200]	@ (800dc80 <SGP_GetMeasurementValues+0x25c>)
 800dbb8:	492b      	ldr	r1, [pc, #172]	@ (800dc68 <SGP_GetMeasurementValues+0x244>)
 800dbba:	2003      	movs	r0, #3
 800dbbc:	f002 fdbe 	bl	801073c <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	4a30      	ldr	r2, [pc, #192]	@ (800dc84 <SGP_GetMeasurementValues+0x260>)
 800dbc4:	4928      	ldr	r1, [pc, #160]	@ (800dc68 <SGP_GetMeasurementValues+0x244>)
 800dbc6:	2003      	movs	r0, #3
 800dbc8:	f002 fdb8 	bl	801073c <CreateLine>
 800dbcc:	e006      	b.n	800dbdc <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800dbce:	4b2b      	ldr	r3, [pc, #172]	@ (800dc7c <SGP_GetMeasurementValues+0x258>)
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b0b      	cmp	r3, #11
 800dbd4:	d102      	bne.n	800dbdc <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800dbd6:	4b29      	ldr	r3, [pc, #164]	@ (800dc7c <SGP_GetMeasurementValues+0x258>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	f001 fd5b 	bl	800f69c <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800dbe6:	4b22      	ldr	r3, [pc, #136]	@ (800dc70 <SGP_GetMeasurementValues+0x24c>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800dbec:	4b13      	ldr	r3, [pc, #76]	@ (800dc3c <SGP_GetMeasurementValues+0x218>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800dbf2:	4b11      	ldr	r3, [pc, #68]	@ (800dc38 <SGP_GetMeasurementValues+0x214>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
      return true;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e017      	b.n	800dc2c <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800dbfc:	f7ff fef6 	bl	800d9ec <SGP_MeasurementDone>
 800dc00:	1e03      	subs	r3, r0, #0
 800dc02:	d012      	beq.n	800dc2a <SGP_GetMeasurementValues+0x206>
 800dc04:	4b0b      	ldr	r3, [pc, #44]	@ (800dc34 <SGP_GetMeasurementValues+0x210>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00e      	beq.n	800dc2a <SGP_GetMeasurementValues+0x206>
 800dc0c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc4c <SGP_GetMeasurementValues+0x228>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00a      	beq.n	800dc2a <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800dc14:	4a1c      	ldr	r2, [pc, #112]	@ (800dc88 <SGP_GetMeasurementValues+0x264>)
 800dc16:	4b14      	ldr	r3, [pc, #80]	@ (800dc68 <SGP_GetMeasurementValues+0x244>)
 800dc18:	0019      	movs	r1, r3
 800dc1a:	2003      	movs	r0, #3
 800dc1c:	f002 fd8e 	bl	801073c <CreateLine>
    SGP_StartMeasurement();
 800dc20:	f7ff fe90 	bl	800d944 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800dc24:	4b04      	ldr	r3, [pc, #16]	@ (800dc38 <SGP_GetMeasurementValues+0x214>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	0018      	movs	r0, r3
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	b005      	add	sp, #20
 800dc32:	bd90      	pop	{r4, r7, pc}
 800dc34:	20000e88 	.word	0x20000e88
 800dc38:	20000f35 	.word	0x20000f35
 800dc3c:	20000f34 	.word	0x20000f34
 800dc40:	200000ac 	.word	0x200000ac
 800dc44:	200000c0 	.word	0x200000c0
 800dc48:	200000a4 	.word	0x200000a4
 800dc4c:	20000e89 	.word	0x20000e89
 800dc50:	20000e78 	.word	0x20000e78
 800dc54:	08028338 	.word	0x08028338
 800dc58:	08028360 	.word	0x08028360
 800dc5c:	08028364 	.word	0x08028364
 800dc60:	08028384 	.word	0x08028384
 800dc64:	08028388 	.word	0x08028388
 800dc68:	080283a8 	.word	0x080283a8
 800dc6c:	200000bc 	.word	0x200000bc
 800dc70:	20000e81 	.word	0x20000e81
 800dc74:	200000b6 	.word	0x200000b6
 800dc78:	20000e8c 	.word	0x20000e8c
 800dc7c:	20000e82 	.word	0x20000e82
 800dc80:	080283ac 	.word	0x080283ac
 800dc84:	080283c8 	.word	0x080283c8
 800dc88:	080283e4 	.word	0x080283e4

0800dc8c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800dc92:	4b1a      	ldr	r3, [pc, #104]	@ (800dcfc <SGP_DeviceConnected+0x70>)
 800dc94:	2202      	movs	r2, #2
 800dc96:	0019      	movs	r1, r3
 800dc98:	2059      	movs	r0, #89	@ 0x59
 800dc9a:	f7ff fde7 	bl	800d86c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800dc9e:	2001      	movs	r0, #1
 800dca0:	f003 f9a2 	bl	8010fe8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800dca4:	4b16      	ldr	r3, [pc, #88]	@ (800dd00 <SGP_DeviceConnected+0x74>)
 800dca6:	2209      	movs	r2, #9
 800dca8:	0019      	movs	r1, r3
 800dcaa:	2059      	movs	r0, #89	@ 0x59
 800dcac:	f7ff fdc0 	bl	800d830 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800dcb0:	1dfb      	adds	r3, r7, #7
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	701a      	strb	r2, [r3, #0]
 800dcb6:	e011      	b.n	800dcdc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800dcb8:	1dfb      	adds	r3, r7, #7
 800dcba:	7818      	ldrb	r0, [r3, #0]
 800dcbc:	1dfb      	adds	r3, r7, #7
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	4a0f      	ldr	r2, [pc, #60]	@ (800dd00 <SGP_DeviceConnected+0x74>)
 800dcc2:	5cd3      	ldrb	r3, [r2, r3]
 800dcc4:	4a0f      	ldr	r2, [pc, #60]	@ (800dd04 <SGP_DeviceConnected+0x78>)
 800dcc6:	4910      	ldr	r1, [pc, #64]	@ (800dd08 <SGP_DeviceConnected+0x7c>)
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	0003      	movs	r3, r0
 800dccc:	2002      	movs	r0, #2
 800dcce:	f002 fd35 	bl	801073c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800dcd2:	1dfb      	adds	r3, r7, #7
 800dcd4:	781a      	ldrb	r2, [r3, #0]
 800dcd6:	1dfb      	adds	r3, r7, #7
 800dcd8:	3201      	adds	r2, #1
 800dcda:	701a      	strb	r2, [r3, #0]
 800dcdc:	1dfb      	adds	r3, r7, #7
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b08      	cmp	r3, #8
 800dce2:	d9e9      	bls.n	800dcb8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800dce4:	4b06      	ldr	r3, [pc, #24]	@ (800dd00 <SGP_DeviceConnected+0x74>)
 800dce6:	2203      	movs	r2, #3
 800dce8:	2109      	movs	r1, #9
 800dcea:	0018      	movs	r0, r3
 800dcec:	f000 f80e 	bl	800dd0c <CheckCRC>
 800dcf0:	0003      	movs	r3, r0
}
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	b002      	add	sp, #8
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	46c0      	nop			@ (mov r8, r8)
 800dcfc:	200000a0 	.word	0x200000a0
 800dd00:	20000e78 	.word	0x20000e78
 800dd04:	08028404 	.word	0x08028404
 800dd08:	08028384 	.word	0x08028384

0800dd0c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd0e:	b08f      	sub	sp, #60	@ 0x3c
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6278      	str	r0, [r7, #36]	@ 0x24
 800dd14:	0008      	movs	r0, r1
 800dd16:	0011      	movs	r1, r2
 800dd18:	2323      	movs	r3, #35	@ 0x23
 800dd1a:	18fb      	adds	r3, r7, r3
 800dd1c:	1c02      	adds	r2, r0, #0
 800dd1e:	701a      	strb	r2, [r3, #0]
 800dd20:	2322      	movs	r3, #34	@ 0x22
 800dd22:	18fb      	adds	r3, r7, r3
 800dd24:	1c0a      	adds	r2, r1, #0
 800dd26:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800dd28:	2317      	movs	r3, #23
 800dd2a:	2220      	movs	r2, #32
 800dd2c:	189b      	adds	r3, r3, r2
 800dd2e:	19db      	adds	r3, r3, r7
 800dd30:	2200      	movs	r2, #0
 800dd32:	701a      	strb	r2, [r3, #0]
 800dd34:	e09f      	b.n	800de76 <CheckCRC+0x16a>
 800dd36:	466b      	mov	r3, sp
 800dd38:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800dd3a:	2322      	movs	r3, #34	@ 0x22
 800dd3c:	18fb      	adds	r3, r7, r3
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	001a      	movs	r2, r3
 800dd42:	3a01      	subs	r2, #1
 800dd44:	633a      	str	r2, [r7, #48]	@ 0x30
 800dd46:	60bb      	str	r3, [r7, #8]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	60fa      	str	r2, [r7, #12]
 800dd4c:	68b8      	ldr	r0, [r7, #8]
 800dd4e:	68f9      	ldr	r1, [r7, #12]
 800dd50:	0002      	movs	r2, r0
 800dd52:	0f52      	lsrs	r2, r2, #29
 800dd54:	000c      	movs	r4, r1
 800dd56:	00e4      	lsls	r4, r4, #3
 800dd58:	61fc      	str	r4, [r7, #28]
 800dd5a:	69fc      	ldr	r4, [r7, #28]
 800dd5c:	4314      	orrs	r4, r2
 800dd5e:	61fc      	str	r4, [r7, #28]
 800dd60:	0002      	movs	r2, r0
 800dd62:	00d2      	lsls	r2, r2, #3
 800dd64:	61ba      	str	r2, [r7, #24]
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	607a      	str	r2, [r7, #4]
 800dd6c:	6838      	ldr	r0, [r7, #0]
 800dd6e:	6879      	ldr	r1, [r7, #4]
 800dd70:	0002      	movs	r2, r0
 800dd72:	0f52      	lsrs	r2, r2, #29
 800dd74:	000c      	movs	r4, r1
 800dd76:	00e4      	lsls	r4, r4, #3
 800dd78:	617c      	str	r4, [r7, #20]
 800dd7a:	697c      	ldr	r4, [r7, #20]
 800dd7c:	4314      	orrs	r4, r2
 800dd7e:	617c      	str	r4, [r7, #20]
 800dd80:	0002      	movs	r2, r0
 800dd82:	00d2      	lsls	r2, r2, #3
 800dd84:	613a      	str	r2, [r7, #16]
 800dd86:	3307      	adds	r3, #7
 800dd88:	08db      	lsrs	r3, r3, #3
 800dd8a:	00db      	lsls	r3, r3, #3
 800dd8c:	466a      	mov	r2, sp
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	469d      	mov	sp, r3
 800dd92:	466b      	mov	r3, sp
 800dd94:	3300      	adds	r3, #0
 800dd96:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800dd98:	2316      	movs	r3, #22
 800dd9a:	2220      	movs	r2, #32
 800dd9c:	189b      	adds	r3, r3, r2
 800dd9e:	19db      	adds	r3, r3, r7
 800dda0:	2200      	movs	r2, #0
 800dda2:	701a      	strb	r2, [r3, #0]
 800dda4:	e01e      	b.n	800dde4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800dda6:	2317      	movs	r3, #23
 800dda8:	2220      	movs	r2, #32
 800ddaa:	189b      	adds	r3, r3, r2
 800ddac:	19db      	adds	r3, r3, r7
 800ddae:	781a      	ldrb	r2, [r3, #0]
 800ddb0:	2116      	movs	r1, #22
 800ddb2:	2320      	movs	r3, #32
 800ddb4:	18cb      	adds	r3, r1, r3
 800ddb6:	19db      	adds	r3, r3, r7
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	18d3      	adds	r3, r2, r3
 800ddbc:	001a      	movs	r2, r3
 800ddbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc0:	189a      	adds	r2, r3, r2
 800ddc2:	0008      	movs	r0, r1
 800ddc4:	2320      	movs	r3, #32
 800ddc6:	18cb      	adds	r3, r1, r3
 800ddc8:	19db      	adds	r3, r3, r7
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	7811      	ldrb	r1, [r2, #0]
 800ddce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddd0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800ddd2:	2320      	movs	r3, #32
 800ddd4:	18c3      	adds	r3, r0, r3
 800ddd6:	19db      	adds	r3, r3, r7
 800ddd8:	781a      	ldrb	r2, [r3, #0]
 800ddda:	2320      	movs	r3, #32
 800dddc:	18c3      	adds	r3, r0, r3
 800ddde:	19db      	adds	r3, r3, r7
 800dde0:	3201      	adds	r2, #1
 800dde2:	701a      	strb	r2, [r3, #0]
 800dde4:	2316      	movs	r3, #22
 800dde6:	2220      	movs	r2, #32
 800dde8:	189b      	adds	r3, r3, r2
 800ddea:	19da      	adds	r2, r3, r7
 800ddec:	2322      	movs	r3, #34	@ 0x22
 800ddee:	18fb      	adds	r3, r7, r3
 800ddf0:	7812      	ldrb	r2, [r2, #0]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d3d6      	bcc.n	800dda6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800ddf8:	2417      	movs	r4, #23
 800ddfa:	2320      	movs	r3, #32
 800ddfc:	18e3      	adds	r3, r4, r3
 800ddfe:	19db      	adds	r3, r3, r7
 800de00:	781a      	ldrb	r2, [r3, #0]
 800de02:	2322      	movs	r3, #34	@ 0x22
 800de04:	18fb      	adds	r3, r7, r3
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	18d3      	adds	r3, r2, r3
 800de0a:	3b01      	subs	r3, #1
 800de0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de0e:	18d2      	adds	r2, r2, r3
 800de10:	250b      	movs	r5, #11
 800de12:	2320      	movs	r3, #32
 800de14:	18eb      	adds	r3, r5, r3
 800de16:	19db      	adds	r3, r3, r7
 800de18:	7812      	ldrb	r2, [r2, #0]
 800de1a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800de1c:	2322      	movs	r3, #34	@ 0x22
 800de1e:	18fb      	adds	r3, r7, r3
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	3b01      	subs	r3, #1
 800de24:	b2da      	uxtb	r2, r3
 800de26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de28:	0011      	movs	r1, r2
 800de2a:	0018      	movs	r0, r3
 800de2c:	f000 f838 	bl	800dea0 <CalculateCRC>
 800de30:	0003      	movs	r3, r0
 800de32:	001a      	movs	r2, r3
 800de34:	2320      	movs	r3, #32
 800de36:	18eb      	adds	r3, r5, r3
 800de38:	19db      	adds	r3, r3, r7
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d00c      	beq.n	800de5a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800de40:	2320      	movs	r3, #32
 800de42:	18e3      	adds	r3, r4, r3
 800de44:	19db      	adds	r3, r3, r7
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	3301      	adds	r3, #1
 800de4a:	4a13      	ldr	r2, [pc, #76]	@ (800de98 <CheckCRC+0x18c>)
 800de4c:	4913      	ldr	r1, [pc, #76]	@ (800de9c <CheckCRC+0x190>)
 800de4e:	2001      	movs	r0, #1
 800de50:	f002 fc74 	bl	801073c <CreateLine>
      return false;
 800de54:	2300      	movs	r3, #0
 800de56:	46b5      	mov	sp, r6
 800de58:	e019      	b.n	800de8e <CheckCRC+0x182>
 800de5a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800de5c:	2217      	movs	r2, #23
 800de5e:	2320      	movs	r3, #32
 800de60:	18d3      	adds	r3, r2, r3
 800de62:	19db      	adds	r3, r3, r7
 800de64:	2120      	movs	r1, #32
 800de66:	1852      	adds	r2, r2, r1
 800de68:	19d1      	adds	r1, r2, r7
 800de6a:	2222      	movs	r2, #34	@ 0x22
 800de6c:	18ba      	adds	r2, r7, r2
 800de6e:	7809      	ldrb	r1, [r1, #0]
 800de70:	7812      	ldrb	r2, [r2, #0]
 800de72:	188a      	adds	r2, r1, r2
 800de74:	701a      	strb	r2, [r3, #0]
 800de76:	2317      	movs	r3, #23
 800de78:	2220      	movs	r2, #32
 800de7a:	189b      	adds	r3, r3, r2
 800de7c:	19da      	adds	r2, r3, r7
 800de7e:	2323      	movs	r3, #35	@ 0x23
 800de80:	18fb      	adds	r3, r7, r3
 800de82:	7812      	ldrb	r2, [r2, #0]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	429a      	cmp	r2, r3
 800de88:	d200      	bcs.n	800de8c <CheckCRC+0x180>
 800de8a:	e754      	b.n	800dd36 <CheckCRC+0x2a>
    }
  }
  return true;
 800de8c:	2301      	movs	r3, #1
}
 800de8e:	0018      	movs	r0, r3
 800de90:	46bd      	mov	sp, r7
 800de92:	b00f      	add	sp, #60	@ 0x3c
 800de94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de96:	46c0      	nop			@ (mov r8, r8)
 800de98:	08028424 	.word	0x08028424
 800de9c:	08028360 	.word	0x08028360

0800dea0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	000a      	movs	r2, r1
 800deaa:	1cfb      	adds	r3, r7, #3
 800deac:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800deae:	230f      	movs	r3, #15
 800deb0:	18fb      	adds	r3, r7, r3
 800deb2:	22ff      	movs	r2, #255	@ 0xff
 800deb4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800deb6:	230e      	movs	r3, #14
 800deb8:	18fb      	adds	r3, r7, r3
 800deba:	2200      	movs	r2, #0
 800debc:	701a      	strb	r2, [r3, #0]
 800debe:	e037      	b.n	800df30 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800dec0:	230e      	movs	r3, #14
 800dec2:	18fb      	adds	r3, r7, r3
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	18d3      	adds	r3, r2, r3
 800deca:	7819      	ldrb	r1, [r3, #0]
 800decc:	220f      	movs	r2, #15
 800dece:	18bb      	adds	r3, r7, r2
 800ded0:	18ba      	adds	r2, r7, r2
 800ded2:	7812      	ldrb	r2, [r2, #0]
 800ded4:	404a      	eors	r2, r1
 800ded6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800ded8:	230d      	movs	r3, #13
 800deda:	18fb      	adds	r3, r7, r3
 800dedc:	2200      	movs	r2, #0
 800dede:	701a      	strb	r2, [r3, #0]
 800dee0:	e01b      	b.n	800df1a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800dee2:	210f      	movs	r1, #15
 800dee4:	187b      	adds	r3, r7, r1
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	b25b      	sxtb	r3, r3
 800deea:	2b00      	cmp	r3, #0
 800deec:	da09      	bge.n	800df02 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800deee:	187b      	adds	r3, r7, r1
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	b25b      	sxtb	r3, r3
 800def6:	2231      	movs	r2, #49	@ 0x31
 800def8:	4053      	eors	r3, r2
 800defa:	b25a      	sxtb	r2, r3
 800defc:	187b      	adds	r3, r7, r1
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	e005      	b.n	800df0e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800df02:	230f      	movs	r3, #15
 800df04:	18fa      	adds	r2, r7, r3
 800df06:	18fb      	adds	r3, r7, r3
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	18db      	adds	r3, r3, r3
 800df0c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800df0e:	210d      	movs	r1, #13
 800df10:	187b      	adds	r3, r7, r1
 800df12:	781a      	ldrb	r2, [r3, #0]
 800df14:	187b      	adds	r3, r7, r1
 800df16:	3201      	adds	r2, #1
 800df18:	701a      	strb	r2, [r3, #0]
 800df1a:	230d      	movs	r3, #13
 800df1c:	18fb      	adds	r3, r7, r3
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	2b07      	cmp	r3, #7
 800df22:	d9de      	bls.n	800dee2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800df24:	210e      	movs	r1, #14
 800df26:	187b      	adds	r3, r7, r1
 800df28:	781a      	ldrb	r2, [r3, #0]
 800df2a:	187b      	adds	r3, r7, r1
 800df2c:	3201      	adds	r2, #1
 800df2e:	701a      	strb	r2, [r3, #0]
 800df30:	230e      	movs	r3, #14
 800df32:	18fa      	adds	r2, r7, r3
 800df34:	1cfb      	adds	r3, r7, #3
 800df36:	7812      	ldrb	r2, [r2, #0]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d3c0      	bcc.n	800dec0 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800df3e:	230f      	movs	r3, #15
 800df40:	18fb      	adds	r3, r7, r3
 800df42:	781b      	ldrb	r3, [r3, #0]
}
 800df44:	0018      	movs	r0, r3
 800df46:	46bd      	mov	sp, r7
 800df48:	b004      	add	sp, #16
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4936      	ldr	r1, [pc, #216]	@ (800e034 <SGP_SetHT+0xe8>)
 800df5c:	1c18      	adds	r0, r3, #0
 800df5e:	f7f2 fcaf 	bl	80008c0 <__aeabi_fadd>
 800df62:	1c03      	adds	r3, r0, #0
 800df64:	4934      	ldr	r1, [pc, #208]	@ (800e038 <SGP_SetHT+0xec>)
 800df66:	1c18      	adds	r0, r3, #0
 800df68:	f7f2 fe34 	bl	8000bd4 <__aeabi_fdiv>
 800df6c:	1c03      	adds	r3, r0, #0
 800df6e:	4933      	ldr	r1, [pc, #204]	@ (800e03c <SGP_SetHT+0xf0>)
 800df70:	1c18      	adds	r0, r3, #0
 800df72:	f7f3 f815 	bl	8000fa0 <__aeabi_fmul>
 800df76:	1c03      	adds	r3, r0, #0
 800df78:	1c18      	adds	r0, r3, #0
 800df7a:	f7f2 fb4f 	bl	800061c <__aeabi_f2uiz>
 800df7e:	0003      	movs	r3, r0
 800df80:	b29a      	uxth	r2, r3
 800df82:	4b2f      	ldr	r3, [pc, #188]	@ (800e040 <SGP_SetHT+0xf4>)
 800df84:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	492e      	ldr	r1, [pc, #184]	@ (800e044 <SGP_SetHT+0xf8>)
 800df8c:	1c18      	adds	r0, r3, #0
 800df8e:	f7f2 fe21 	bl	8000bd4 <__aeabi_fdiv>
 800df92:	1c03      	adds	r3, r0, #0
 800df94:	4929      	ldr	r1, [pc, #164]	@ (800e03c <SGP_SetHT+0xf0>)
 800df96:	1c18      	adds	r0, r3, #0
 800df98:	f7f3 f802 	bl	8000fa0 <__aeabi_fmul>
 800df9c:	1c03      	adds	r3, r0, #0
 800df9e:	1c18      	adds	r0, r3, #0
 800dfa0:	f7f2 fb3c 	bl	800061c <__aeabi_f2uiz>
 800dfa4:	0003      	movs	r3, r0
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	4b27      	ldr	r3, [pc, #156]	@ (800e048 <SGP_SetHT+0xfc>)
 800dfaa:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800dfac:	4b26      	ldr	r3, [pc, #152]	@ (800e048 <SGP_SetHT+0xfc>)
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	0a1b      	lsrs	r3, r3, #8
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	4b25      	ldr	r3, [pc, #148]	@ (800e04c <SGP_SetHT+0x100>)
 800dfb8:	709a      	strb	r2, [r3, #2]
 800dfba:	4b24      	ldr	r3, [pc, #144]	@ (800e04c <SGP_SetHT+0x100>)
 800dfbc:	789a      	ldrb	r2, [r3, #2]
 800dfbe:	210c      	movs	r1, #12
 800dfc0:	187b      	adds	r3, r7, r1
 800dfc2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800dfc4:	4b20      	ldr	r3, [pc, #128]	@ (800e048 <SGP_SetHT+0xfc>)
 800dfc6:	881b      	ldrh	r3, [r3, #0]
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	4b20      	ldr	r3, [pc, #128]	@ (800e04c <SGP_SetHT+0x100>)
 800dfcc:	70da      	strb	r2, [r3, #3]
 800dfce:	4b1f      	ldr	r3, [pc, #124]	@ (800e04c <SGP_SetHT+0x100>)
 800dfd0:	78da      	ldrb	r2, [r3, #3]
 800dfd2:	187b      	adds	r3, r7, r1
 800dfd4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800dfd6:	187b      	adds	r3, r7, r1
 800dfd8:	2102      	movs	r1, #2
 800dfda:	0018      	movs	r0, r3
 800dfdc:	f7ff ff60 	bl	800dea0 <CalculateCRC>
 800dfe0:	0003      	movs	r3, r0
 800dfe2:	001a      	movs	r2, r3
 800dfe4:	4b19      	ldr	r3, [pc, #100]	@ (800e04c <SGP_SetHT+0x100>)
 800dfe6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800dfe8:	4b15      	ldr	r3, [pc, #84]	@ (800e040 <SGP_SetHT+0xf4>)
 800dfea:	881b      	ldrh	r3, [r3, #0]
 800dfec:	0a1b      	lsrs	r3, r3, #8
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	4b16      	ldr	r3, [pc, #88]	@ (800e04c <SGP_SetHT+0x100>)
 800dff4:	715a      	strb	r2, [r3, #5]
 800dff6:	4b15      	ldr	r3, [pc, #84]	@ (800e04c <SGP_SetHT+0x100>)
 800dff8:	795a      	ldrb	r2, [r3, #5]
 800dffa:	2108      	movs	r1, #8
 800dffc:	187b      	adds	r3, r7, r1
 800dffe:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800e000:	4b0f      	ldr	r3, [pc, #60]	@ (800e040 <SGP_SetHT+0xf4>)
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	b2da      	uxtb	r2, r3
 800e006:	4b11      	ldr	r3, [pc, #68]	@ (800e04c <SGP_SetHT+0x100>)
 800e008:	719a      	strb	r2, [r3, #6]
 800e00a:	4b10      	ldr	r3, [pc, #64]	@ (800e04c <SGP_SetHT+0x100>)
 800e00c:	799a      	ldrb	r2, [r3, #6]
 800e00e:	187b      	adds	r3, r7, r1
 800e010:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800e012:	187b      	adds	r3, r7, r1
 800e014:	2102      	movs	r1, #2
 800e016:	0018      	movs	r0, r3
 800e018:	f7ff ff42 	bl	800dea0 <CalculateCRC>
 800e01c:	0003      	movs	r3, r0
 800e01e:	001a      	movs	r2, r3
 800e020:	4b0a      	ldr	r3, [pc, #40]	@ (800e04c <SGP_SetHT+0x100>)
 800e022:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800e024:	4b0a      	ldr	r3, [pc, #40]	@ (800e050 <SGP_SetHT+0x104>)
 800e026:	2201      	movs	r2, #1
 800e028:	701a      	strb	r2, [r3, #0]
}
 800e02a:	46c0      	nop			@ (mov r8, r8)
 800e02c:	46bd      	mov	sp, r7
 800e02e:	b004      	add	sp, #16
 800e030:	bd80      	pop	{r7, pc}
 800e032:	46c0      	nop			@ (mov r8, r8)
 800e034:	42340000 	.word	0x42340000
 800e038:	432f0000 	.word	0x432f0000
 800e03c:	477fff00 	.word	0x477fff00
 800e040:	20000f32 	.word	0x20000f32
 800e044:	42c80000 	.word	0x42c80000
 800e048:	20000f30 	.word	0x20000f30
 800e04c:	200000ac 	.word	0x200000ac
 800e050:	20000f34 	.word	0x20000f34

0800e054 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800e054:	b580      	push	{r7, lr}
 800e056:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800e058:	4a09      	ldr	r2, [pc, #36]	@ (800e080 <SGP_SoftReset+0x2c>)
 800e05a:	4b0a      	ldr	r3, [pc, #40]	@ (800e084 <SGP_SoftReset+0x30>)
 800e05c:	0019      	movs	r1, r3
 800e05e:	2003      	movs	r0, #3
 800e060:	f002 fb6c 	bl	801073c <CreateLine>
  SGP_TurnHeaterOff();
 800e064:	f7ff fcd0 	bl	800da08 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800e068:	200a      	movs	r0, #10
 800e06a:	f002 ffbd 	bl	8010fe8 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800e06e:	4b06      	ldr	r3, [pc, #24]	@ (800e088 <SGP_SoftReset+0x34>)
 800e070:	2202      	movs	r2, #2
 800e072:	0019      	movs	r1, r3
 800e074:	2059      	movs	r0, #89	@ 0x59
 800e076:	f7ff fbf9 	bl	800d86c <WriteRegister>
}
 800e07a:	46c0      	nop			@ (mov r8, r8)
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	080284cc 	.word	0x080284cc
 800e084:	080283a8 	.word	0x080283a8
 800e088:	200000b4 	.word	0x200000b4

0800e08c <ResetVOCresult>:

void ResetVOCresult(void) {
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800e090:	4b02      	ldr	r3, [pc, #8]	@ (800e09c <ResetVOCresult+0x10>)
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
}
 800e096:	46c0      	nop			@ (mov r8, r8)
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	20000f38 	.word	0x20000f38

0800e0a0 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800e0a4:	4b42      	ldr	r3, [pc, #264]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	2b07      	cmp	r3, #7
 800e0aa:	d869      	bhi.n	800e180 <SGP_Upkeep+0xe0>
 800e0ac:	009a      	lsls	r2, r3, #2
 800e0ae:	4b41      	ldr	r3, [pc, #260]	@ (800e1b4 <SGP_Upkeep+0x114>)
 800e0b0:	18d3      	adds	r3, r2, r3
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800e0b6:	4a40      	ldr	r2, [pc, #256]	@ (800e1b8 <SGP_Upkeep+0x118>)
 800e0b8:	4b40      	ldr	r3, [pc, #256]	@ (800e1bc <SGP_Upkeep+0x11c>)
 800e0ba:	0019      	movs	r1, r3
 800e0bc:	2003      	movs	r0, #3
 800e0be:	f002 fb3d 	bl	801073c <CreateLine>
    break;
 800e0c2:	e070      	b.n	800e1a6 <SGP_Upkeep+0x106>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800e0c4:	f7ff ffe2 	bl	800e08c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800e0c8:	4b39      	ldr	r3, [pc, #228]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	701a      	strb	r2, [r3, #0]
    break;
 800e0ce:	e06a      	b.n	800e1a6 <SGP_Upkeep+0x106>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800e0d0:	f7fc fcac 	bl	800aa2c <getSensorLock>
 800e0d4:	1e03      	subs	r3, r0, #0
 800e0d6:	d15f      	bne.n	800e198 <SGP_Upkeep+0xf8>
      break;
    }
    setSensorLock(SGP40);
 800e0d8:	2002      	movs	r0, #2
 800e0da:	f7fc fc97 	bl	800aa0c <setSensorLock>
    SetMeasurementIndicator();
 800e0de:	f001 f977 	bl	800f3d0 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 800e0e2:	f7ff fc2f 	bl	800d944 <SGP_StartMeasurement>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800e0e6:	4b32      	ldr	r3, [pc, #200]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e0e8:	2202      	movs	r2, #2
 800e0ea:	701a      	strb	r2, [r3, #0]
    break;
 800e0ec:	e05b      	b.n	800e1a6 <SGP_Upkeep+0x106>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800e0ee:	4b34      	ldr	r3, [pc, #208]	@ (800e1c0 <SGP_Upkeep+0x120>)
 800e0f0:	0018      	movs	r0, r3
 800e0f2:	f7ff fc97 	bl	800da24 <SGP_GetMeasurementValues>
 800e0f6:	1e03      	subs	r3, r0, #0
 800e0f8:	d050      	beq.n	800e19c <SGP_Upkeep+0xfc>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800e0fa:	4b2d      	ldr	r3, [pc, #180]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e0fc:	2203      	movs	r2, #3
 800e0fe:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 800e100:	2000      	movs	r0, #0
 800e102:	f7fc fc83 	bl	800aa0c <setSensorLock>
    }
    break;
 800e106:	e049      	b.n	800e19c <SGP_Upkeep+0xfc>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800e108:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c0 <SGP_Upkeep+0x120>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	0018      	movs	r0, r3
 800e110:	f7f5 fb5c 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800e114:	4b26      	ldr	r3, [pc, #152]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e116:	2206      	movs	r2, #6
 800e118:	701a      	strb	r2, [r3, #0]
    break;
 800e11a:	e044      	b.n	800e1a6 <SGP_Upkeep+0x106>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800e11c:	4b24      	ldr	r3, [pc, #144]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e11e:	2207      	movs	r2, #7
 800e120:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800e122:	4b28      	ldr	r3, [pc, #160]	@ (800e1c4 <SGP_Upkeep+0x124>)
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	2b01      	cmp	r3, #1
 800e128:	d112      	bne.n	800e150 <SGP_Upkeep+0xb0>
 800e12a:	4b27      	ldr	r3, [pc, #156]	@ (800e1c8 <SGP_Upkeep+0x128>)
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	2201      	movs	r2, #1
 800e130:	4053      	eors	r3, r2
 800e132:	b2db      	uxtb	r3, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00b      	beq.n	800e150 <SGP_Upkeep+0xb0>
      // During startup take 12 samples
      if (sgpinitdone) {
 800e138:	4b24      	ldr	r3, [pc, #144]	@ (800e1cc <SGP_Upkeep+0x12c>)
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d004      	beq.n	800e14a <SGP_Upkeep+0xaa>
        SGP_SoftReset();
 800e140:	f7ff ff88 	bl	800e054 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800e144:	2000      	movs	r0, #0
 800e146:	f7fc f935 	bl	800a3b4 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800e14a:	4b20      	ldr	r3, [pc, #128]	@ (800e1cc <SGP_Upkeep+0x12c>)
 800e14c:	2201      	movs	r2, #1
 800e14e:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800e150:	f002 ff40 	bl	8010fd4 <HAL_GetTick>
 800e154:	0003      	movs	r3, r0
 800e156:	22c8      	movs	r2, #200	@ 0xc8
 800e158:	0092      	lsls	r2, r2, #2
 800e15a:	189a      	adds	r2, r3, r2
 800e15c:	4b1c      	ldr	r3, [pc, #112]	@ (800e1d0 <SGP_Upkeep+0x130>)
 800e15e:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800e160:	f001 f94e 	bl	800f400 <ResetMeasurementIndicator>
  break;
 800e164:	e01f      	b.n	800e1a6 <SGP_Upkeep+0x106>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800e166:	4b1a      	ldr	r3, [pc, #104]	@ (800e1d0 <SGP_Upkeep+0x130>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	0018      	movs	r0, r3
 800e16c:	f002 fa90 	bl	8010690 <TimestampIsReached>
 800e170:	1e03      	subs	r3, r0, #0
 800e172:	d015      	beq.n	800e1a0 <SGP_Upkeep+0x100>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800e174:	f7ff fbce 	bl	800d914 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800e178:	4b0d      	ldr	r3, [pc, #52]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e17e:	e00f      	b.n	800e1a0 <SGP_Upkeep+0x100>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800e180:	4b0b      	ldr	r3, [pc, #44]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e182:	2200      	movs	r2, #0
 800e184:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 800e186:	f7fc fc51 	bl	800aa2c <getSensorLock>
 800e18a:	0003      	movs	r3, r0
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d109      	bne.n	800e1a4 <SGP_Upkeep+0x104>
      setSensorLock(FREE);
 800e190:	2000      	movs	r0, #0
 800e192:	f7fc fc3b 	bl	800aa0c <setSensorLock>
    }
    break;
 800e196:	e005      	b.n	800e1a4 <SGP_Upkeep+0x104>
      break;
 800e198:	46c0      	nop			@ (mov r8, r8)
 800e19a:	e004      	b.n	800e1a6 <SGP_Upkeep+0x106>
    break;
 800e19c:	46c0      	nop			@ (mov r8, r8)
 800e19e:	e002      	b.n	800e1a6 <SGP_Upkeep+0x106>
    break;
 800e1a0:	46c0      	nop			@ (mov r8, r8)
 800e1a2:	e000      	b.n	800e1a6 <SGP_Upkeep+0x106>
    break;
 800e1a4:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800e1a6:	4b02      	ldr	r3, [pc, #8]	@ (800e1b0 <SGP_Upkeep+0x110>)
 800e1a8:	781b      	ldrb	r3, [r3, #0]
}
 800e1aa:	0018      	movs	r0, r3
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	20000f3c 	.word	0x20000f3c
 800e1b4:	08028c90 	.word	0x08028c90
 800e1b8:	080284e4 	.word	0x080284e4
 800e1bc:	080283a8 	.word	0x080283a8
 800e1c0:	20000f38 	.word	0x20000f38
 800e1c4:	20000e82 	.word	0x20000e82
 800e1c8:	20001dd9 	.word	0x20001dd9
 800e1cc:	20000e6c 	.word	0x20000e6c
 800e1d0:	20000e84 	.word	0x20000e84

0800e1d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	0002      	movs	r2, r0
 800e1dc:	1dfb      	adds	r3, r7, #7
 800e1de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e1e0:	1dfb      	adds	r3, r7, #7
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	2b7f      	cmp	r3, #127	@ 0x7f
 800e1e6:	d809      	bhi.n	800e1fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e1e8:	1dfb      	adds	r3, r7, #7
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	001a      	movs	r2, r3
 800e1ee:	231f      	movs	r3, #31
 800e1f0:	401a      	ands	r2, r3
 800e1f2:	4b04      	ldr	r3, [pc, #16]	@ (800e204 <__NVIC_EnableIRQ+0x30>)
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	4091      	lsls	r1, r2
 800e1f8:	000a      	movs	r2, r1
 800e1fa:	601a      	str	r2, [r3, #0]
  }
}
 800e1fc:	46c0      	nop			@ (mov r8, r8)
 800e1fe:	46bd      	mov	sp, r7
 800e200:	b002      	add	sp, #8
 800e202:	bd80      	pop	{r7, pc}
 800e204:	e000e100 	.word	0xe000e100

0800e208 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	0002      	movs	r2, r0
 800e210:	1dfb      	adds	r3, r7, #7
 800e212:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e214:	1dfb      	adds	r3, r7, #7
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	2b7f      	cmp	r3, #127	@ 0x7f
 800e21a:	d810      	bhi.n	800e23e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e21c:	1dfb      	adds	r3, r7, #7
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	001a      	movs	r2, r3
 800e222:	231f      	movs	r3, #31
 800e224:	4013      	ands	r3, r2
 800e226:	4908      	ldr	r1, [pc, #32]	@ (800e248 <__NVIC_DisableIRQ+0x40>)
 800e228:	2201      	movs	r2, #1
 800e22a:	409a      	lsls	r2, r3
 800e22c:	0013      	movs	r3, r2
 800e22e:	2280      	movs	r2, #128	@ 0x80
 800e230:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e232:	f3bf 8f4f 	dsb	sy
}
 800e236:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800e238:	f3bf 8f6f 	isb	sy
}
 800e23c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800e23e:	46c0      	nop			@ (mov r8, r8)
 800e240:	46bd      	mov	sp, r7
 800e242:	b002      	add	sp, #8
 800e244:	bd80      	pop	{r7, pc}
 800e246:	46c0      	nop			@ (mov r8, r8)
 800e248:	e000e100 	.word	0xe000e100

0800e24c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800e24c:	b5b0      	push	{r4, r5, r7, lr}
 800e24e:	b088      	sub	sp, #32
 800e250:	af02      	add	r7, sp, #8
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	0008      	movs	r0, r1
 800e256:	0011      	movs	r1, r2
 800e258:	1cfb      	adds	r3, r7, #3
 800e25a:	1c02      	adds	r2, r0, #0
 800e25c:	701a      	strb	r2, [r3, #0]
 800e25e:	1cbb      	adds	r3, r7, #2
 800e260:	1c0a      	adds	r2, r1, #0
 800e262:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800e264:	4b5b      	ldr	r3, [pc, #364]	@ (800e3d4 <getSoundData+0x188>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2201      	movs	r2, #1
 800e26c:	4053      	eors	r3, r2
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	d107      	bne.n	800e284 <getSoundData+0x38>
 800e274:	4b58      	ldr	r3, [pc, #352]	@ (800e3d8 <getSoundData+0x18c>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2201      	movs	r2, #1
 800e27c:	4053      	eors	r3, r2
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b00      	cmp	r3, #0
 800e282:	d001      	beq.n	800e288 <getSoundData+0x3c>
    {
        return false;
 800e284:	2300      	movs	r3, #0
 800e286:	e0a0      	b.n	800e3ca <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800e288:	4b54      	ldr	r3, [pc, #336]	@ (800e3dc <getSoundData+0x190>)
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d005      	beq.n	800e29e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800e292:	4b53      	ldr	r3, [pc, #332]	@ (800e3e0 <getSoundData+0x194>)
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	b25b      	sxtb	r3, r3
 800e298:	0018      	movs	r0, r3
 800e29a:	f7ff ffb5 	bl	800e208 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800e29e:	f3bf 8f4f 	dsb	sy
}
 800e2a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800e2a4:	f3bf 8f6f 	isb	sy
}
 800e2a8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800e2aa:	1cfb      	adds	r3, r7, #3
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d04c      	beq.n	800e34c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800e2b2:	4b4c      	ldr	r3, [pc, #304]	@ (800e3e4 <getSoundData+0x198>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d11b      	bne.n	800e2f2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	617b      	str	r3, [r7, #20]
 800e2ca:	e00e      	b.n	800e2ea <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	18d3      	adds	r3, r2, r3
 800e2d2:	3302      	adds	r3, #2
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	18d3      	adds	r3, r2, r3
 800e2de:	3308      	adds	r3, #8
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	617b      	str	r3, [r7, #20]
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2b05      	cmp	r3, #5
 800e2ee:	d9ed      	bls.n	800e2cc <getSoundData+0x80>
 800e2f0:	e02c      	b.n	800e34c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	1c59      	adds	r1, r3, #1
 800e2f8:	4b3b      	ldr	r3, [pc, #236]	@ (800e3e8 <getSoundData+0x19c>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	4b3b      	ldr	r3, [pc, #236]	@ (800e3ec <getSoundData+0x1a0>)
 800e2fe:	681c      	ldr	r4, [r3, #0]
 800e300:	4b38      	ldr	r3, [pc, #224]	@ (800e3e4 <getSoundData+0x198>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	9300      	str	r3, [sp, #0]
 800e306:	0023      	movs	r3, r4
 800e308:	f000 fde8 	bl	800eedc <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e30c:	2300      	movs	r3, #0
 800e30e:	613b      	str	r3, [r7, #16]
 800e310:	e019      	b.n	800e346 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	18d3      	adds	r3, r2, r3
 800e318:	1c98      	adds	r0, r3, #2
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	3308      	adds	r3, #8
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800e322:	4b33      	ldr	r3, [pc, #204]	@ (800e3f0 <getSoundData+0x1a4>)
 800e324:	693a      	ldr	r2, [r7, #16]
 800e326:	0092      	lsls	r2, r2, #2
 800e328:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800e32a:	4b32      	ldr	r3, [pc, #200]	@ (800e3f4 <getSoundData+0x1a8>)
 800e32c:	693a      	ldr	r2, [r7, #16]
 800e32e:	0092      	lsls	r2, r2, #2
 800e330:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800e332:	4b2c      	ldr	r3, [pc, #176]	@ (800e3e4 <getSoundData+0x198>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	0013      	movs	r3, r2
 800e33a:	0022      	movs	r2, r4
 800e33c:	f000 fdce 	bl	800eedc <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	3301      	adds	r3, #1
 800e344:	613b      	str	r3, [r7, #16]
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	2b05      	cmp	r3, #5
 800e34a:	d9e2      	bls.n	800e312 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800e34c:	1cbb      	adds	r3, r7, #2
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d028      	beq.n	800e3a6 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800e354:	240e      	movs	r4, #14
 800e356:	193b      	adds	r3, r7, r4
 800e358:	2200      	movs	r2, #0
 800e35a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800e35c:	250d      	movs	r5, #13
 800e35e:	197b      	adds	r3, r7, r5
 800e360:	2200      	movs	r2, #0
 800e362:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800e364:	4b24      	ldr	r3, [pc, #144]	@ (800e3f8 <getSoundData+0x1ac>)
 800e366:	6818      	ldr	r0, [r3, #0]
 800e368:	4924      	ldr	r1, [pc, #144]	@ (800e3fc <getSoundData+0x1b0>)
 800e36a:	197b      	adds	r3, r7, r5
 800e36c:	193a      	adds	r2, r7, r4
 800e36e:	f000 fe59 	bl	800f024 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800e372:	193b      	adds	r3, r7, r4
 800e374:	881a      	ldrh	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	21ff      	movs	r1, #255	@ 0xff
 800e37a:	4011      	ands	r1, r2
 800e37c:	000c      	movs	r4, r1
 800e37e:	7b99      	ldrb	r1, [r3, #14]
 800e380:	2000      	movs	r0, #0
 800e382:	4001      	ands	r1, r0
 800e384:	1c08      	adds	r0, r1, #0
 800e386:	1c21      	adds	r1, r4, #0
 800e388:	4301      	orrs	r1, r0
 800e38a:	7399      	strb	r1, [r3, #14]
 800e38c:	0a12      	lsrs	r2, r2, #8
 800e38e:	b290      	uxth	r0, r2
 800e390:	7bda      	ldrb	r2, [r3, #15]
 800e392:	2100      	movs	r1, #0
 800e394:	400a      	ands	r2, r1
 800e396:	1c11      	adds	r1, r2, #0
 800e398:	1c02      	adds	r2, r0, #0
 800e39a:	430a      	orrs	r2, r1
 800e39c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800e39e:	197b      	adds	r3, r7, r5
 800e3a0:	781a      	ldrb	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800e3a6:	f000 f86f 	bl	800e488 <micSettlingComplete>
 800e3aa:	0003      	movs	r3, r0
 800e3ac:	001a      	movs	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800e3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e3dc <getSoundData+0x190>)
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d005      	beq.n	800e3c8 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800e3bc:	4b08      	ldr	r3, [pc, #32]	@ (800e3e0 <getSoundData+0x194>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	b25b      	sxtb	r3, r3
 800e3c2:	0018      	movs	r0, r3
 800e3c4:	f7ff ff06 	bl	800e1d4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800e3c8:	2301      	movs	r3, #1
}
 800e3ca:	0018      	movs	r0, r3
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	b006      	add	sp, #24
 800e3d0:	bdb0      	pop	{r4, r5, r7, pc}
 800e3d2:	46c0      	nop			@ (mov r8, r8)
 800e3d4:	20000f3e 	.word	0x20000f3e
 800e3d8:	20000f41 	.word	0x20000f41
 800e3dc:	20000f40 	.word	0x20000f40
 800e3e0:	20001990 	.word	0x20001990
 800e3e4:	200019cc 	.word	0x200019cc
 800e3e8:	20001994 	.word	0x20001994
 800e3ec:	20001998 	.word	0x20001998
 800e3f0:	2000199c 	.word	0x2000199c
 800e3f4:	200019b4 	.word	0x200019b4
 800e3f8:	20000f48 	.word	0x20000f48
 800e3fc:	3b5c7333 	.word	0x3b5c7333

0800e400 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
 800e40c:	001a      	movs	r2, r3
 800e40e:	1cfb      	adds	r3, r7, #3
 800e410:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800e412:	4b09      	ldr	r3, [pc, #36]	@ (800e438 <soundInit+0x38>)
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800e418:	4b08      	ldr	r3, [pc, #32]	@ (800e43c <soundInit+0x3c>)
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800e41e:	4b08      	ldr	r3, [pc, #32]	@ (800e440 <soundInit+0x40>)
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800e424:	4b07      	ldr	r3, [pc, #28]	@ (800e444 <soundInit+0x44>)
 800e426:	2200      	movs	r2, #0
 800e428:	569a      	ldrsb	r2, [r3, r2]
 800e42a:	4b06      	ldr	r3, [pc, #24]	@ (800e444 <soundInit+0x44>)
 800e42c:	701a      	strb	r2, [r3, #0]

    return true;
 800e42e:	2301      	movs	r3, #1
}
 800e430:	0018      	movs	r0, r3
 800e432:	46bd      	mov	sp, r7
 800e434:	b004      	add	sp, #16
 800e436:	bd80      	pop	{r7, pc}
 800e438:	20001988 	.word	0x20001988
 800e43c:	20001984 	.word	0x20001984
 800e440:	2000198c 	.word	0x2000198c
 800e444:	20001990 	.word	0x20001990

0800e448 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800e44c:	4b02      	ldr	r3, [pc, #8]	@ (800e458 <clearMaximumAmplitude+0x10>)
 800e44e:	2200      	movs	r2, #0
 800e450:	601a      	str	r2, [r3, #0]
}
 800e452:	46c0      	nop			@ (mov r8, r8)
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	20000f48 	.word	0x20000f48

0800e45c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800e460:	4b08      	ldr	r3, [pc, #32]	@ (800e484 <startMicSettlingPeriod+0x28>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2200      	movs	r2, #0
 800e468:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800e46a:	4b06      	ldr	r3, [pc, #24]	@ (800e484 <startMicSettlingPeriod+0x28>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	0018      	movs	r0, r3
 800e470:	f00a fe0c 	bl	801908c <HAL_TIM_Base_Start>
 800e474:	1e03      	subs	r3, r0, #0
 800e476:	d001      	beq.n	800e47c <startMicSettlingPeriod+0x20>
    {
        return false;
 800e478:	2300      	movs	r3, #0
 800e47a:	e000      	b.n	800e47e <startMicSettlingPeriod+0x22>
    }
    return true;
 800e47c:	2301      	movs	r3, #1
}
 800e47e:	0018      	movs	r0, r3
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	20001984 	.word	0x20001984

0800e488 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800e48e:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c8 <micSettlingComplete+0x40>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	691b      	ldr	r3, [r3, #16]
 800e496:	2201      	movs	r2, #1
 800e498:	401a      	ands	r2, r3
 800e49a:	1dfb      	adds	r3, r7, #7
 800e49c:	3a01      	subs	r2, #1
 800e49e:	4251      	negs	r1, r2
 800e4a0:	414a      	adcs	r2, r1
 800e4a2:	701a      	strb	r2, [r3, #0]
    if (complete)
 800e4a4:	1dfb      	adds	r3, r7, #7
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d007      	beq.n	800e4bc <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800e4ac:	4b06      	ldr	r3, [pc, #24]	@ (800e4c8 <micSettlingComplete+0x40>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	0018      	movs	r0, r3
 800e4b2:	f00a fe35 	bl	8019120 <HAL_TIM_Base_Stop>
      DataReady = true;
 800e4b6:	4b05      	ldr	r3, [pc, #20]	@ (800e4cc <micSettlingComplete+0x44>)
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800e4bc:	1dfb      	adds	r3, r7, #7
 800e4be:	781b      	ldrb	r3, [r3, #0]
}
 800e4c0:	0018      	movs	r0, r3
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	b002      	add	sp, #8
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	20001984 	.word	0x20001984
 800e4cc:	20000f3d 	.word	0x20000f3d

0800e4d0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	0002      	movs	r2, r0
 800e4d8:	1dfb      	adds	r3, r7, #7
 800e4da:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800e4dc:	4b29      	ldr	r3, [pc, #164]	@ (800e584 <enableMicrophone+0xb4>)
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	1dfa      	adds	r2, r7, #7
 800e4e4:	7812      	ldrb	r2, [r2, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d101      	bne.n	800e4ee <enableMicrophone+0x1e>
    {
        return true;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e045      	b.n	800e57a <enableMicrophone+0xaa>
    }
    if (bEnable)
 800e4ee:	1dfb      	adds	r3, r7, #7
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d025      	beq.n	800e542 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800e4f6:	f7ff ffb1 	bl	800e45c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800e4fa:	4b23      	ldr	r3, [pc, #140]	@ (800e588 <enableMicrophone+0xb8>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2280      	movs	r2, #128	@ 0x80
 800e500:	0092      	lsls	r2, r2, #2
 800e502:	4922      	ldr	r1, [pc, #136]	@ (800e58c <enableMicrophone+0xbc>)
 800e504:	0018      	movs	r0, r3
 800e506:	f007 f82b 	bl	8015560 <HAL_I2S_Receive_DMA>
 800e50a:	1e03      	subs	r3, r0, #0
 800e50c:	d001      	beq.n	800e512 <enableMicrophone+0x42>
        {
            return false;
 800e50e:	2300      	movs	r3, #0
 800e510:	e033      	b.n	800e57a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800e512:	f7ff ff99 	bl	800e448 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800e516:	4b1e      	ldr	r3, [pc, #120]	@ (800e590 <enableMicrophone+0xc0>)
 800e518:	2200      	movs	r2, #0
 800e51a:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800e51c:	4b1d      	ldr	r3, [pc, #116]	@ (800e594 <enableMicrophone+0xc4>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	b25b      	sxtb	r3, r3
 800e522:	0018      	movs	r0, r3
 800e524:	f7ff fe56 	bl	800e1d4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800e528:	4b1b      	ldr	r3, [pc, #108]	@ (800e598 <enableMicrophone+0xc8>)
 800e52a:	2201      	movs	r2, #1
 800e52c:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800e52e:	4b15      	ldr	r3, [pc, #84]	@ (800e584 <enableMicrophone+0xb4>)
 800e530:	2201      	movs	r2, #1
 800e532:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800e534:	4b19      	ldr	r3, [pc, #100]	@ (800e59c <enableMicrophone+0xcc>)
 800e536:	2200      	movs	r2, #0
 800e538:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800e53a:	4b19      	ldr	r3, [pc, #100]	@ (800e5a0 <enableMicrophone+0xd0>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	e01a      	b.n	800e578 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800e542:	4b14      	ldr	r3, [pc, #80]	@ (800e594 <enableMicrophone+0xc4>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	b25b      	sxtb	r3, r3
 800e548:	0018      	movs	r0, r3
 800e54a:	f7ff fe5d 	bl	800e208 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800e54e:	4b12      	ldr	r3, [pc, #72]	@ (800e598 <enableMicrophone+0xc8>)
 800e550:	2200      	movs	r2, #0
 800e552:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800e554:	4b11      	ldr	r3, [pc, #68]	@ (800e59c <enableMicrophone+0xcc>)
 800e556:	2200      	movs	r2, #0
 800e558:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800e55a:	4b11      	ldr	r3, [pc, #68]	@ (800e5a0 <enableMicrophone+0xd0>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800e560:	4b09      	ldr	r3, [pc, #36]	@ (800e588 <enableMicrophone+0xb8>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	0018      	movs	r0, r3
 800e566:	f007 f8bd 	bl	80156e4 <HAL_I2S_DMAStop>
 800e56a:	1e03      	subs	r3, r0, #0
 800e56c:	d001      	beq.n	800e572 <enableMicrophone+0xa2>
        {
            return false;
 800e56e:	2300      	movs	r3, #0
 800e570:	e003      	b.n	800e57a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800e572:	4b04      	ldr	r3, [pc, #16]	@ (800e584 <enableMicrophone+0xb4>)
 800e574:	2200      	movs	r2, #0
 800e576:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800e578:	2301      	movs	r3, #1
}
 800e57a:	0018      	movs	r0, r3
 800e57c:	46bd      	mov	sp, r7
 800e57e:	b002      	add	sp, #8
 800e580:	bd80      	pop	{r7, pc}
 800e582:	46c0      	nop			@ (mov r8, r8)
 800e584:	20000f3e 	.word	0x20000f3e
 800e588:	20001988 	.word	0x20001988
 800e58c:	20000f84 	.word	0x20000f84
 800e590:	20000f44 	.word	0x20000f44
 800e594:	20001990 	.word	0x20001990
 800e598:	20000f40 	.word	0x20000f40
 800e59c:	20000f3f 	.word	0x20000f3f
 800e5a0:	20000f41 	.word	0x20000f41

0800e5a4 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800e5a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e5dc <startSPLcalculation+0x38>)
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	4053      	eors	r3, r2
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d001      	beq.n	800e5bc <startSPLcalculation+0x18>
    {
        return false;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e00c      	b.n	800e5d6 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800e5bc:	4b08      	ldr	r3, [pc, #32]	@ (800e5e0 <startSPLcalculation+0x3c>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <startSPLcalculation+0x26>
    {
        return true;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e005      	b.n	800e5d6 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800e5ca:	f000 fb63 	bl	800ec94 <resetSPLstate>
    SPLcalcEnabled = true;
 800e5ce:	4b04      	ldr	r3, [pc, #16]	@ (800e5e0 <startSPLcalculation+0x3c>)
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	701a      	strb	r2, [r3, #0]
    return true;
 800e5d4:	2301      	movs	r3, #1
}
 800e5d6:	0018      	movs	r0, r3
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	20000f3e 	.word	0x20000f3e
 800e5e0:	20000f3f 	.word	0x20000f3f

0800e5e4 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e5ec:	4b05      	ldr	r3, [pc, #20]	@ (800e604 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d102      	bne.n	800e5fc <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	f000 f81a 	bl	800e630 <processHalfDMAbuffer>
  }
}
 800e5fc:	46c0      	nop			@ (mov r8, r8)
 800e5fe:	46bd      	mov	sp, r7
 800e600:	b002      	add	sp, #8
 800e602:	bd80      	pop	{r7, pc}
 800e604:	20001988 	.word	0x20001988

0800e608 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e610:	4b06      	ldr	r3, [pc, #24]	@ (800e62c <HAL_I2S_RxCpltCallback+0x24>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	429a      	cmp	r2, r3
 800e618:	d104      	bne.n	800e624 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800e61a:	2380      	movs	r3, #128	@ 0x80
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	0018      	movs	r0, r3
 800e620:	f000 f806 	bl	800e630 <processHalfDMAbuffer>
  }
}
 800e624:	46c0      	nop			@ (mov r8, r8)
 800e626:	46bd      	mov	sp, r7
 800e628:	b002      	add	sp, #8
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	20001988 	.word	0x20001988

0800e630 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	005a      	lsls	r2, r3, #1
 800e63c:	4b15      	ldr	r3, [pc, #84]	@ (800e694 <processHalfDMAbuffer+0x64>)
 800e63e:	18d3      	adds	r3, r2, r3
 800e640:	4a15      	ldr	r2, [pc, #84]	@ (800e698 <processHalfDMAbuffer+0x68>)
 800e642:	2180      	movs	r1, #128	@ 0x80
 800e644:	0089      	lsls	r1, r1, #2
 800e646:	0018      	movs	r0, r3
 800e648:	f000 fd35 	bl	800f0b6 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800e64c:	4b13      	ldr	r3, [pc, #76]	@ (800e69c <processHalfDMAbuffer+0x6c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	425a      	negs	r2, r3
 800e652:	4153      	adcs	r3, r2
 800e654:	b2da      	uxtb	r2, r3
 800e656:	4b11      	ldr	r3, [pc, #68]	@ (800e69c <processHalfDMAbuffer+0x6c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2109      	movs	r1, #9
 800e65c:	4299      	cmp	r1, r3
 800e65e:	419b      	sbcs	r3, r3
 800e660:	425b      	negs	r3, r3
 800e662:	b2db      	uxtb	r3, r3
 800e664:	480c      	ldr	r0, [pc, #48]	@ (800e698 <processHalfDMAbuffer+0x68>)
 800e666:	2180      	movs	r1, #128	@ 0x80
 800e668:	f000 fb46 	bl	800ecf8 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800e66c:	4b0b      	ldr	r3, [pc, #44]	@ (800e69c <processHalfDMAbuffer+0x6c>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b09      	cmp	r3, #9
 800e672:	d804      	bhi.n	800e67e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800e674:	4b09      	ldr	r3, [pc, #36]	@ (800e69c <processHalfDMAbuffer+0x6c>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	4b08      	ldr	r3, [pc, #32]	@ (800e69c <processHalfDMAbuffer+0x6c>)
 800e67c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800e67e:	4b08      	ldr	r3, [pc, #32]	@ (800e6a0 <processHalfDMAbuffer+0x70>)
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	b2db      	uxtb	r3, r3
 800e684:	2b00      	cmp	r3, #0
 800e686:	d001      	beq.n	800e68c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800e688:	f000 f826 	bl	800e6d8 <calculateSPLQ31>
    }
}
 800e68c:	46c0      	nop			@ (mov r8, r8)
 800e68e:	46bd      	mov	sp, r7
 800e690:	b002      	add	sp, #8
 800e692:	bd80      	pop	{r7, pc}
 800e694:	20000f84 	.word	0x20000f84
 800e698:	20001784 	.word	0x20001784
 800e69c:	20000f44 	.word	0x20000f44
 800e6a0:	20000f3f 	.word	0x20000f3f

0800e6a4 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e6ac:	4b07      	ldr	r3, [pc, #28]	@ (800e6cc <HAL_I2S_ErrorCallback+0x28>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d106      	bne.n	800e6c4 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800e6b6:	4a06      	ldr	r2, [pc, #24]	@ (800e6d0 <HAL_I2S_ErrorCallback+0x2c>)
 800e6b8:	239e      	movs	r3, #158	@ 0x9e
 800e6ba:	0059      	lsls	r1, r3, #1
 800e6bc:	4b05      	ldr	r3, [pc, #20]	@ (800e6d4 <HAL_I2S_ErrorCallback+0x30>)
 800e6be:	0018      	movs	r0, r3
 800e6c0:	f002 f8f4 	bl	80108ac <errorHandler>
  }
}
 800e6c4:	46c0      	nop			@ (mov r8, r8)
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	b002      	add	sp, #8
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	20001988 	.word	0x20001988
 800e6d0:	0802850c 	.word	0x0802850c
 800e6d4:	08028d80 	.word	0x08028d80

0800e6d8 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800e6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6da:	b0b3      	sub	sp, #204	@ 0xcc
 800e6dc:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800e6de:	4ae2      	ldr	r2, [pc, #904]	@ (800ea68 <calculateSPLQ31+0x390>)
 800e6e0:	2338      	movs	r3, #56	@ 0x38
 800e6e2:	2030      	movs	r0, #48	@ 0x30
 800e6e4:	181b      	adds	r3, r3, r0
 800e6e6:	19d9      	adds	r1, r3, r7
 800e6e8:	2334      	movs	r3, #52	@ 0x34
 800e6ea:	181b      	adds	r3, r3, r0
 800e6ec:	19d8      	adds	r0, r3, r7
 800e6ee:	2380      	movs	r3, #128	@ 0x80
 800e6f0:	f000 fc36 	bl	800ef60 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800e6f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	da00      	bge.n	800e6fc <calculateSPLQ31+0x24>
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	105b      	asrs	r3, r3, #1
 800e6fe:	001a      	movs	r2, r3
 800e700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e702:	2b00      	cmp	r3, #0
 800e704:	da00      	bge.n	800e708 <calculateSPLQ31+0x30>
 800e706:	3301      	adds	r3, #1
 800e708:	105b      	asrs	r3, r3, #1
 800e70a:	18d3      	adds	r3, r2, r3
 800e70c:	2188      	movs	r1, #136	@ 0x88
 800e70e:	187a      	adds	r2, r7, r1
 800e710:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800e712:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e714:	187b      	adds	r3, r7, r1
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	1ad3      	subs	r3, r2, r3
 800e71a:	3304      	adds	r3, #4
 800e71c:	2284      	movs	r2, #132	@ 0x84
 800e71e:	18b9      	adds	r1, r7, r2
 800e720:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800e722:	18bb      	adds	r3, r7, r2
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4ad1      	ldr	r2, [pc, #836]	@ (800ea6c <calculateSPLQ31+0x394>)
 800e728:	0019      	movs	r1, r3
 800e72a:	0010      	movs	r0, r2
 800e72c:	f000 fc58 	bl	800efe0 <getPo2factor>
 800e730:	0003      	movs	r3, r0
 800e732:	2280      	movs	r2, #128	@ 0x80
 800e734:	18ba      	adds	r2, r7, r2
 800e736:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800e738:	2300      	movs	r3, #0
 800e73a:	2284      	movs	r2, #132	@ 0x84
 800e73c:	2130      	movs	r1, #48	@ 0x30
 800e73e:	1852      	adds	r2, r2, r1
 800e740:	19d2      	adds	r2, r2, r7
 800e742:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800e744:	2300      	movs	r3, #0
 800e746:	2280      	movs	r2, #128	@ 0x80
 800e748:	1852      	adds	r2, r2, r1
 800e74a:	19d2      	adds	r2, r2, r7
 800e74c:	6013      	str	r3, [r2, #0]
 800e74e:	e032      	b.n	800e7b6 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800e750:	4ac5      	ldr	r2, [pc, #788]	@ (800ea68 <calculateSPLQ31+0x390>)
 800e752:	2680      	movs	r6, #128	@ 0x80
 800e754:	2330      	movs	r3, #48	@ 0x30
 800e756:	18f1      	adds	r1, r6, r3
 800e758:	19cb      	adds	r3, r1, r7
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	589a      	ldr	r2, [r3, r2]
 800e760:	2188      	movs	r1, #136	@ 0x88
 800e762:	1879      	adds	r1, r7, r1
 800e764:	680b      	ldr	r3, [r1, #0]
 800e766:	1ad2      	subs	r2, r2, r3
 800e768:	2180      	movs	r1, #128	@ 0x80
 800e76a:	1879      	adds	r1, r7, r1
 800e76c:	680b      	ldr	r3, [r1, #0]
 800e76e:	409a      	lsls	r2, r3
 800e770:	0011      	movs	r1, r2
 800e772:	4abf      	ldr	r2, [pc, #764]	@ (800ea70 <calculateSPLQ31+0x398>)
 800e774:	2084      	movs	r0, #132	@ 0x84
 800e776:	2330      	movs	r3, #48	@ 0x30
 800e778:	18c3      	adds	r3, r0, r3
 800e77a:	19db      	adds	r3, r3, r7
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800e782:	2230      	movs	r2, #48	@ 0x30
 800e784:	1883      	adds	r3, r0, r2
 800e786:	19db      	adds	r3, r3, r7
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	3301      	adds	r3, #1
 800e78c:	49b8      	ldr	r1, [pc, #736]	@ (800ea70 <calculateSPLQ31+0x398>)
 800e78e:	009a      	lsls	r2, r3, #2
 800e790:	2300      	movs	r3, #0
 800e792:	5053      	str	r3, [r2, r1]
        count += 2;
 800e794:	2230      	movs	r2, #48	@ 0x30
 800e796:	1883      	adds	r3, r0, r2
 800e798:	19db      	adds	r3, r3, r7
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3302      	adds	r3, #2
 800e79e:	0011      	movs	r1, r2
 800e7a0:	1882      	adds	r2, r0, r2
 800e7a2:	19d2      	adds	r2, r2, r7
 800e7a4:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800e7a6:	000a      	movs	r2, r1
 800e7a8:	18b3      	adds	r3, r6, r2
 800e7aa:	19db      	adds	r3, r3, r7
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	18b2      	adds	r2, r6, r2
 800e7b2:	19d2      	adds	r2, r2, r7
 800e7b4:	6013      	str	r3, [r2, #0]
 800e7b6:	2380      	movs	r3, #128	@ 0x80
 800e7b8:	2630      	movs	r6, #48	@ 0x30
 800e7ba:	199b      	adds	r3, r3, r6
 800e7bc:	19db      	adds	r3, r3, r7
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7c2:	d9c5      	bls.n	800e750 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800e7c4:	4bab      	ldr	r3, [pc, #684]	@ (800ea74 <calculateSPLQ31+0x39c>)
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	49a9      	ldr	r1, [pc, #676]	@ (800ea70 <calculateSPLQ31+0x398>)
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f011 fd23 	bl	8020218 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800e7d2:	4aa9      	ldr	r2, [pc, #676]	@ (800ea78 <calculateSPLQ31+0x3a0>)
 800e7d4:	2338      	movs	r3, #56	@ 0x38
 800e7d6:	199b      	adds	r3, r3, r6
 800e7d8:	19d9      	adds	r1, r3, r7
 800e7da:	2334      	movs	r3, #52	@ 0x34
 800e7dc:	199b      	adds	r3, r3, r6
 800e7de:	19d8      	adds	r0, r3, r7
 800e7e0:	237e      	movs	r3, #126	@ 0x7e
 800e7e2:	f000 fbbd 	bl	800ef60 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800e7e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e7e8:	2380      	movs	r3, #128	@ 0x80
 800e7ea:	061b      	lsls	r3, r3, #24
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d101      	bne.n	800e7f4 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800e7f0:	4b9e      	ldr	r3, [pc, #632]	@ (800ea6c <calculateSPLQ31+0x394>)
 800e7f2:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800e7f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e7f6:	2380      	movs	r3, #128	@ 0x80
 800e7f8:	061b      	lsls	r3, r3, #24
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d101      	bne.n	800e802 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800e7fe:	4b9b      	ldr	r3, [pc, #620]	@ (800ea6c <calculateSPLQ31+0x394>)
 800e800:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800e802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e804:	17da      	asrs	r2, r3, #31
 800e806:	189b      	adds	r3, r3, r2
 800e808:	4053      	eors	r3, r2
 800e80a:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800e80c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e80e:	17da      	asrs	r2, r3, #31
 800e810:	189b      	adds	r3, r3, r2
 800e812:	4053      	eors	r3, r2
 800e814:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800e816:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e81a:	429a      	cmp	r2, r3
 800e81c:	dd01      	ble.n	800e822 <calculateSPLQ31+0x14a>
    {
        max = min;
 800e81e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e820:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800e822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e824:	3304      	adds	r3, #4
 800e826:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800e828:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e82a:	4a90      	ldr	r2, [pc, #576]	@ (800ea6c <calculateSPLQ31+0x394>)
 800e82c:	0019      	movs	r1, r3
 800e82e:	0010      	movs	r0, r2
 800e830:	f000 fbd6 	bl	800efe0 <getPo2factor>
 800e834:	0003      	movs	r3, r0
 800e836:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800e838:	2302      	movs	r3, #2
 800e83a:	22ac      	movs	r2, #172	@ 0xac
 800e83c:	18ba      	adds	r2, r7, r2
 800e83e:	6013      	str	r3, [r2, #0]
 800e840:	e012      	b.n	800e868 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800e842:	4a8b      	ldr	r2, [pc, #556]	@ (800ea70 <calculateSPLQ31+0x398>)
 800e844:	20ac      	movs	r0, #172	@ 0xac
 800e846:	183b      	adds	r3, r7, r0
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	589a      	ldr	r2, [r3, r2]
 800e84e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e850:	409a      	lsls	r2, r3
 800e852:	0011      	movs	r1, r2
 800e854:	4a86      	ldr	r2, [pc, #536]	@ (800ea70 <calculateSPLQ31+0x398>)
 800e856:	183b      	adds	r3, r7, r0
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800e85e:	183b      	adds	r3, r7, r0
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3301      	adds	r3, #1
 800e864:	183a      	adds	r2, r7, r0
 800e866:	6013      	str	r3, [r2, #0]
 800e868:	23ac      	movs	r3, #172	@ 0xac
 800e86a:	18fb      	adds	r3, r7, r3
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e870:	d9e7      	bls.n	800e842 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800e872:	4b7d      	ldr	r3, [pc, #500]	@ (800ea68 <calculateSPLQ31+0x390>)
 800e874:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800e876:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800e878:	4b7d      	ldr	r3, [pc, #500]	@ (800ea70 <calculateSPLQ31+0x398>)
 800e87a:	2240      	movs	r2, #64	@ 0x40
 800e87c:	0018      	movs	r0, r3
 800e87e:	f012 fa75 	bl	8020d6c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800e882:	2330      	movs	r3, #48	@ 0x30
 800e884:	18fb      	adds	r3, r7, r3
 800e886:	0018      	movs	r0, r3
 800e888:	2330      	movs	r3, #48	@ 0x30
 800e88a:	001a      	movs	r2, r3
 800e88c:	2100      	movs	r1, #0
 800e88e:	f014 f8b3 	bl	80229f8 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800e892:	2200      	movs	r2, #0
 800e894:	2300      	movs	r3, #0
 800e896:	21a0      	movs	r1, #160	@ 0xa0
 800e898:	1879      	adds	r1, r7, r1
 800e89a:	600a      	str	r2, [r1, #0]
 800e89c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800e89e:	2301      	movs	r3, #1
 800e8a0:	229c      	movs	r2, #156	@ 0x9c
 800e8a2:	18ba      	adds	r2, r7, r2
 800e8a4:	6013      	str	r3, [r2, #0]
 800e8a6:	e05b      	b.n	800e960 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800e8a8:	269c      	movs	r6, #156	@ 0x9c
 800e8aa:	19bb      	adds	r3, r7, r6
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	009a      	lsls	r2, r3, #2
 800e8b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e8b2:	189b      	adds	r3, r3, r2
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	613b      	str	r3, [r7, #16]
 800e8b8:	17db      	asrs	r3, r3, #31
 800e8ba:	617b      	str	r3, [r7, #20]
 800e8bc:	4b6f      	ldr	r3, [pc, #444]	@ (800ea7c <calculateSPLQ31+0x3a4>)
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	19bb      	adds	r3, r7, r6
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	005b      	lsls	r3, r3, #1
 800e8c6:	18d3      	adds	r3, r2, r3
 800e8c8:	881b      	ldrh	r3, [r3, #0]
 800e8ca:	60bb      	str	r3, [r7, #8]
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6938      	ldr	r0, [r7, #16]
 800e8d6:	6979      	ldr	r1, [r7, #20]
 800e8d8:	f7f1 fe72 	bl	80005c0 <__aeabi_lmul>
 800e8dc:	0002      	movs	r2, r0
 800e8de:	000b      	movs	r3, r1
 800e8e0:	0010      	movs	r0, r2
 800e8e2:	0019      	movs	r1, r3
 800e8e4:	23a0      	movs	r3, #160	@ 0xa0
 800e8e6:	18fa      	adds	r2, r7, r3
 800e8e8:	6853      	ldr	r3, [r2, #4]
 800e8ea:	6812      	ldr	r2, [r2, #0]
 800e8ec:	1812      	adds	r2, r2, r0
 800e8ee:	414b      	adcs	r3, r1
 800e8f0:	21a0      	movs	r1, #160	@ 0xa0
 800e8f2:	1879      	adds	r1, r7, r1
 800e8f4:	600a      	str	r2, [r1, #0]
 800e8f6:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800e8f8:	4b61      	ldr	r3, [pc, #388]	@ (800ea80 <calculateSPLQ31+0x3a8>)
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	19bb      	adds	r3, r7, r6
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	18d3      	adds	r3, r2, r3
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b06      	cmp	r3, #6
 800e906:	d025      	beq.n	800e954 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800e908:	4b5d      	ldr	r3, [pc, #372]	@ (800ea80 <calculateSPLQ31+0x3a8>)
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	19bb      	adds	r3, r7, r6
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	18d3      	adds	r3, r2, r3
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	2230      	movs	r2, #48	@ 0x30
 800e916:	18ba      	adds	r2, r7, r2
 800e918:	00db      	lsls	r3, r3, #3
 800e91a:	18d3      	adds	r3, r2, r3
 800e91c:	6818      	ldr	r0, [r3, #0]
 800e91e:	6859      	ldr	r1, [r3, #4]
 800e920:	19bb      	adds	r3, r7, r6
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	009a      	lsls	r2, r3, #2
 800e926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e928:	189b      	adds	r3, r3, r2
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	603b      	str	r3, [r7, #0]
 800e92e:	17db      	asrs	r3, r3, #31
 800e930:	607b      	str	r3, [r7, #4]
 800e932:	4b53      	ldr	r3, [pc, #332]	@ (800ea80 <calculateSPLQ31+0x3a8>)
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	19be      	adds	r6, r7, r6
 800e938:	6833      	ldr	r3, [r6, #0]
 800e93a:	18d3      	adds	r3, r2, r3
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	001e      	movs	r6, r3
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	1880      	adds	r0, r0, r2
 800e946:	4159      	adcs	r1, r3
 800e948:	2330      	movs	r3, #48	@ 0x30
 800e94a:	18fa      	adds	r2, r7, r3
 800e94c:	00f3      	lsls	r3, r6, #3
 800e94e:	18d3      	adds	r3, r2, r3
 800e950:	6018      	str	r0, [r3, #0]
 800e952:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800e954:	229c      	movs	r2, #156	@ 0x9c
 800e956:	18bb      	adds	r3, r7, r2
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3301      	adds	r3, #1
 800e95c:	18ba      	adds	r2, r7, r2
 800e95e:	6013      	str	r3, [r2, #0]
 800e960:	239c      	movs	r3, #156	@ 0x9c
 800e962:	18fb      	adds	r3, r7, r3
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b3f      	cmp	r3, #63	@ 0x3f
 800e968:	d99e      	bls.n	800e8a8 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800e96a:	2380      	movs	r3, #128	@ 0x80
 800e96c:	18fb      	adds	r3, r7, r3
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	005b      	lsls	r3, r3, #1
 800e972:	001a      	movs	r2, r3
 800e974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	18d3      	adds	r3, r2, r3
 800e97a:	3b22      	subs	r3, #34	@ 0x22
 800e97c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800e97e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e980:	17da      	asrs	r2, r3, #31
 800e982:	189b      	adds	r3, r3, r2
 800e984:	4053      	eors	r3, r2
 800e986:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800e988:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	da62      	bge.n	800ea54 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800e98e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e990:	3b20      	subs	r3, #32
 800e992:	2b00      	cmp	r3, #0
 800e994:	db05      	blt.n	800e9a2 <calculateSPLQ31+0x2ca>
 800e996:	22a0      	movs	r2, #160	@ 0xa0
 800e998:	18ba      	adds	r2, r7, r2
 800e99a:	6812      	ldr	r2, [r2, #0]
 800e99c:	409a      	lsls	r2, r3
 800e99e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e9a0:	e010      	b.n	800e9c4 <calculateSPLQ31+0x2ec>
 800e9a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9a4:	2220      	movs	r2, #32
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	22a0      	movs	r2, #160	@ 0xa0
 800e9aa:	18ba      	adds	r2, r7, r2
 800e9ac:	6812      	ldr	r2, [r2, #0]
 800e9ae:	40da      	lsrs	r2, r3
 800e9b0:	0013      	movs	r3, r2
 800e9b2:	22a4      	movs	r2, #164	@ 0xa4
 800e9b4:	18ba      	adds	r2, r7, r2
 800e9b6:	6811      	ldr	r1, [r2, #0]
 800e9b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9ba:	4091      	lsls	r1, r2
 800e9bc:	6279      	str	r1, [r7, #36]	@ 0x24
 800e9be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9c0:	431a      	orrs	r2, r3
 800e9c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800e9c4:	21a0      	movs	r1, #160	@ 0xa0
 800e9c6:	187b      	adds	r3, r7, r1
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9cc:	409a      	lsls	r2, r3
 800e9ce:	623a      	str	r2, [r7, #32]
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800e9d4:	187a      	adds	r2, r7, r1
 800e9d6:	6013      	str	r3, [r2, #0]
 800e9d8:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e9da:	2300      	movs	r3, #0
 800e9dc:	2298      	movs	r2, #152	@ 0x98
 800e9de:	18ba      	adds	r2, r7, r2
 800e9e0:	6013      	str	r3, [r2, #0]
 800e9e2:	e031      	b.n	800ea48 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800e9e4:	2330      	movs	r3, #48	@ 0x30
 800e9e6:	18fa      	adds	r2, r7, r3
 800e9e8:	2398      	movs	r3, #152	@ 0x98
 800e9ea:	18fb      	adds	r3, r7, r3
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	00db      	lsls	r3, r3, #3
 800e9f0:	18d3      	adds	r3, r2, r3
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e9f8:	3920      	subs	r1, #32
 800e9fa:	2900      	cmp	r1, #0
 800e9fc:	db03      	blt.n	800ea06 <calculateSPLQ31+0x32e>
 800e9fe:	0010      	movs	r0, r2
 800ea00:	4088      	lsls	r0, r1
 800ea02:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ea04:	e00c      	b.n	800ea20 <calculateSPLQ31+0x348>
 800ea06:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ea08:	2020      	movs	r0, #32
 800ea0a:	1a41      	subs	r1, r0, r1
 800ea0c:	0010      	movs	r0, r2
 800ea0e:	40c8      	lsrs	r0, r1
 800ea10:	0001      	movs	r1, r0
 800ea12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ea14:	001c      	movs	r4, r3
 800ea16:	4084      	lsls	r4, r0
 800ea18:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800ea1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea1c:	4308      	orrs	r0, r1
 800ea1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ea20:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ea22:	0013      	movs	r3, r2
 800ea24:	408b      	lsls	r3, r1
 800ea26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea28:	2330      	movs	r3, #48	@ 0x30
 800ea2a:	18fa      	adds	r2, r7, r3
 800ea2c:	2098      	movs	r0, #152	@ 0x98
 800ea2e:	183b      	adds	r3, r7, r0
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	00db      	lsls	r3, r3, #3
 800ea34:	18d3      	adds	r3, r2, r3
 800ea36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea3a:	6019      	str	r1, [r3, #0]
 800ea3c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ea3e:	183b      	adds	r3, r7, r0
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	3301      	adds	r3, #1
 800ea44:	183a      	adds	r2, r7, r0
 800ea46:	6013      	str	r3, [r2, #0]
 800ea48:	2398      	movs	r3, #152	@ 0x98
 800ea4a:	18fb      	adds	r3, r7, r3
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b05      	cmp	r3, #5
 800ea50:	d9c8      	bls.n	800e9e4 <calculateSPLQ31+0x30c>
 800ea52:	e06b      	b.n	800eb2c <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800ea54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea56:	3b20      	subs	r3, #32
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	db13      	blt.n	800ea84 <calculateSPLQ31+0x3ac>
 800ea5c:	22a4      	movs	r2, #164	@ 0xa4
 800ea5e:	18ba      	adds	r2, r7, r2
 800ea60:	6812      	ldr	r2, [r2, #0]
 800ea62:	40da      	lsrs	r2, r3
 800ea64:	61ba      	str	r2, [r7, #24]
 800ea66:	e01e      	b.n	800eaa6 <calculateSPLQ31+0x3ce>
 800ea68:	20001784 	.word	0x20001784
 800ea6c:	7fffffff 	.word	0x7fffffff
 800ea70:	200019d0 	.word	0x200019d0
 800ea74:	200000c4 	.word	0x200000c4
 800ea78:	200019d8 	.word	0x200019d8
 800ea7c:	200000c8 	.word	0x200000c8
 800ea80:	200000d4 	.word	0x200000d4
 800ea84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea86:	2220      	movs	r2, #32
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	22a4      	movs	r2, #164	@ 0xa4
 800ea8c:	18ba      	adds	r2, r7, r2
 800ea8e:	6812      	ldr	r2, [r2, #0]
 800ea90:	409a      	lsls	r2, r3
 800ea92:	0013      	movs	r3, r2
 800ea94:	22a0      	movs	r2, #160	@ 0xa0
 800ea96:	18ba      	adds	r2, r7, r2
 800ea98:	6811      	ldr	r1, [r2, #0]
 800ea9a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ea9c:	40d1      	lsrs	r1, r2
 800ea9e:	61b9      	str	r1, [r7, #24]
 800eaa0:	69ba      	ldr	r2, [r7, #24]
 800eaa2:	431a      	orrs	r2, r3
 800eaa4:	61ba      	str	r2, [r7, #24]
 800eaa6:	23a4      	movs	r3, #164	@ 0xa4
 800eaa8:	18fb      	adds	r3, r7, r3
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eaae:	40da      	lsrs	r2, r3
 800eab0:	61fa      	str	r2, [r7, #28]
 800eab2:	69ba      	ldr	r2, [r7, #24]
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	21a0      	movs	r1, #160	@ 0xa0
 800eab8:	1879      	adds	r1, r7, r1
 800eaba:	600a      	str	r2, [r1, #0]
 800eabc:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800eabe:	2300      	movs	r3, #0
 800eac0:	2294      	movs	r2, #148	@ 0x94
 800eac2:	18ba      	adds	r2, r7, r2
 800eac4:	6013      	str	r3, [r2, #0]
 800eac6:	e02c      	b.n	800eb22 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800eac8:	2330      	movs	r3, #48	@ 0x30
 800eaca:	18fa      	adds	r2, r7, r3
 800eacc:	2394      	movs	r3, #148	@ 0x94
 800eace:	18fb      	adds	r3, r7, r3
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	00db      	lsls	r3, r3, #3
 800ead4:	18d3      	adds	r3, r2, r3
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eadc:	3920      	subs	r1, #32
 800eade:	2900      	cmp	r1, #0
 800eae0:	db03      	blt.n	800eaea <calculateSPLQ31+0x412>
 800eae2:	0018      	movs	r0, r3
 800eae4:	40c8      	lsrs	r0, r1
 800eae6:	0004      	movs	r4, r0
 800eae8:	e00a      	b.n	800eb00 <calculateSPLQ31+0x428>
 800eaea:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eaec:	2020      	movs	r0, #32
 800eaee:	1a41      	subs	r1, r0, r1
 800eaf0:	0018      	movs	r0, r3
 800eaf2:	4088      	lsls	r0, r1
 800eaf4:	0001      	movs	r1, r0
 800eaf6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eaf8:	0016      	movs	r6, r2
 800eafa:	40c6      	lsrs	r6, r0
 800eafc:	0034      	movs	r4, r6
 800eafe:	430c      	orrs	r4, r1
 800eb00:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eb02:	40cb      	lsrs	r3, r1
 800eb04:	001d      	movs	r5, r3
 800eb06:	2330      	movs	r3, #48	@ 0x30
 800eb08:	18fa      	adds	r2, r7, r3
 800eb0a:	2194      	movs	r1, #148	@ 0x94
 800eb0c:	187b      	adds	r3, r7, r1
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	18d3      	adds	r3, r2, r3
 800eb14:	601c      	str	r4, [r3, #0]
 800eb16:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800eb18:	187b      	adds	r3, r7, r1
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	187a      	adds	r2, r7, r1
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	2394      	movs	r3, #148	@ 0x94
 800eb24:	18fb      	adds	r3, r7, r3
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b05      	cmp	r3, #5
 800eb2a:	d9cd      	bls.n	800eac8 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800eb2c:	230f      	movs	r3, #15
 800eb2e:	425d      	negs	r5, r3
 800eb30:	2305      	movs	r3, #5
 800eb32:	425e      	negs	r6, r3
 800eb34:	4b4a      	ldr	r3, [pc, #296]	@ (800ec60 <calculateSPLQ31+0x588>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	4b4a      	ldr	r3, [pc, #296]	@ (800ec64 <calculateSPLQ31+0x58c>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	21a0      	movs	r1, #160	@ 0xa0
 800eb42:	1879      	adds	r1, r7, r1
 800eb44:	6808      	ldr	r0, [r1, #0]
 800eb46:	6849      	ldr	r1, [r1, #4]
 800eb48:	4c47      	ldr	r4, [pc, #284]	@ (800ec68 <calculateSPLQ31+0x590>)
 800eb4a:	9403      	str	r4, [sp, #12]
 800eb4c:	4c47      	ldr	r4, [pc, #284]	@ (800ec6c <calculateSPLQ31+0x594>)
 800eb4e:	9402      	str	r4, [sp, #8]
 800eb50:	9301      	str	r3, [sp, #4]
 800eb52:	9200      	str	r2, [sp, #0]
 800eb54:	0033      	movs	r3, r6
 800eb56:	002a      	movs	r2, r5
 800eb58:	f000 fa86 	bl	800f068 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	2290      	movs	r2, #144	@ 0x90
 800eb60:	18ba      	adds	r2, r7, r2
 800eb62:	6013      	str	r3, [r2, #0]
 800eb64:	e026      	b.n	800ebb4 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800eb66:	2330      	movs	r3, #48	@ 0x30
 800eb68:	18fa      	adds	r2, r7, r3
 800eb6a:	2490      	movs	r4, #144	@ 0x90
 800eb6c:	193b      	adds	r3, r7, r4
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	00db      	lsls	r3, r3, #3
 800eb72:	18d3      	adds	r3, r2, r3
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	6859      	ldr	r1, [r3, #4]
 800eb78:	230f      	movs	r3, #15
 800eb7a:	425d      	negs	r5, r3
 800eb7c:	2305      	movs	r3, #5
 800eb7e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800eb80:	193b      	adds	r3, r7, r4
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	009a      	lsls	r2, r3, #2
 800eb86:	4b3a      	ldr	r3, [pc, #232]	@ (800ec70 <calculateSPLQ31+0x598>)
 800eb88:	18d3      	adds	r3, r2, r3
 800eb8a:	193a      	adds	r2, r7, r4
 800eb8c:	6812      	ldr	r2, [r2, #0]
 800eb8e:	0094      	lsls	r4, r2, #2
 800eb90:	4a38      	ldr	r2, [pc, #224]	@ (800ec74 <calculateSPLQ31+0x59c>)
 800eb92:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800eb94:	9203      	str	r2, [sp, #12]
 800eb96:	9302      	str	r3, [sp, #8]
 800eb98:	2300      	movs	r3, #0
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	0033      	movs	r3, r6
 800eba2:	002a      	movs	r2, r5
 800eba4:	f000 fa60 	bl	800f068 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800eba8:	2490      	movs	r4, #144	@ 0x90
 800ebaa:	193b      	adds	r3, r7, r4
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	193a      	adds	r2, r7, r4
 800ebb2:	6013      	str	r3, [r2, #0]
 800ebb4:	2390      	movs	r3, #144	@ 0x90
 800ebb6:	18fb      	adds	r3, r7, r3
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b05      	cmp	r3, #5
 800ebbc:	d9d3      	bls.n	800eb66 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800ebbe:	4b2b      	ldr	r3, [pc, #172]	@ (800ec6c <calculateSPLQ31+0x594>)
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	4b2d      	ldr	r3, [pc, #180]	@ (800ec78 <calculateSPLQ31+0x5a0>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	18d2      	adds	r2, r2, r3
 800ebc8:	4b2b      	ldr	r3, [pc, #172]	@ (800ec78 <calculateSPLQ31+0x5a0>)
 800ebca:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800ebcc:	4b26      	ldr	r3, [pc, #152]	@ (800ec68 <calculateSPLQ31+0x590>)
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	4b2a      	ldr	r3, [pc, #168]	@ (800ec7c <calculateSPLQ31+0x5a4>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	18d2      	adds	r2, r2, r3
 800ebd6:	4b29      	ldr	r3, [pc, #164]	@ (800ec7c <calculateSPLQ31+0x5a4>)
 800ebd8:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ebda:	2300      	movs	r3, #0
 800ebdc:	228c      	movs	r2, #140	@ 0x8c
 800ebde:	18ba      	adds	r2, r7, r2
 800ebe0:	6013      	str	r3, [r2, #0]
 800ebe2:	e025      	b.n	800ec30 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800ebe4:	4b22      	ldr	r3, [pc, #136]	@ (800ec70 <calculateSPLQ31+0x598>)
 800ebe6:	208c      	movs	r0, #140	@ 0x8c
 800ebe8:	183a      	adds	r2, r7, r0
 800ebea:	6812      	ldr	r2, [r2, #0]
 800ebec:	0092      	lsls	r2, r2, #2
 800ebee:	58d2      	ldr	r2, [r2, r3]
 800ebf0:	4b23      	ldr	r3, [pc, #140]	@ (800ec80 <calculateSPLQ31+0x5a8>)
 800ebf2:	1839      	adds	r1, r7, r0
 800ebf4:	6809      	ldr	r1, [r1, #0]
 800ebf6:	0089      	lsls	r1, r1, #2
 800ebf8:	58cb      	ldr	r3, [r1, r3]
 800ebfa:	18d1      	adds	r1, r2, r3
 800ebfc:	4b20      	ldr	r3, [pc, #128]	@ (800ec80 <calculateSPLQ31+0x5a8>)
 800ebfe:	183a      	adds	r2, r7, r0
 800ec00:	6812      	ldr	r2, [r2, #0]
 800ec02:	0092      	lsls	r2, r2, #2
 800ec04:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800ec06:	4b1b      	ldr	r3, [pc, #108]	@ (800ec74 <calculateSPLQ31+0x59c>)
 800ec08:	183a      	adds	r2, r7, r0
 800ec0a:	6812      	ldr	r2, [r2, #0]
 800ec0c:	0092      	lsls	r2, r2, #2
 800ec0e:	58d2      	ldr	r2, [r2, r3]
 800ec10:	4b1c      	ldr	r3, [pc, #112]	@ (800ec84 <calculateSPLQ31+0x5ac>)
 800ec12:	1839      	adds	r1, r7, r0
 800ec14:	6809      	ldr	r1, [r1, #0]
 800ec16:	0089      	lsls	r1, r1, #2
 800ec18:	58cb      	ldr	r3, [r1, r3]
 800ec1a:	18d1      	adds	r1, r2, r3
 800ec1c:	4b19      	ldr	r3, [pc, #100]	@ (800ec84 <calculateSPLQ31+0x5ac>)
 800ec1e:	183a      	adds	r2, r7, r0
 800ec20:	6812      	ldr	r2, [r2, #0]
 800ec22:	0092      	lsls	r2, r2, #2
 800ec24:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ec26:	183b      	adds	r3, r7, r0
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	183a      	adds	r2, r7, r0
 800ec2e:	6013      	str	r3, [r2, #0]
 800ec30:	238c      	movs	r3, #140	@ 0x8c
 800ec32:	18fb      	adds	r3, r7, r3
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b05      	cmp	r3, #5
 800ec38:	d9d4      	bls.n	800ebe4 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800ec3a:	4b13      	ldr	r3, [pc, #76]	@ (800ec88 <calculateSPLQ31+0x5b0>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	4b11      	ldr	r3, [pc, #68]	@ (800ec88 <calculateSPLQ31+0x5b0>)
 800ec42:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800ec44:	4b10      	ldr	r3, [pc, #64]	@ (800ec88 <calculateSPLQ31+0x5b0>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b0f      	cmp	r3, #15
 800ec4a:	d905      	bls.n	800ec58 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800ec4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec8c <calculateSPLQ31+0x5b4>)
 800ec4e:	2201      	movs	r2, #1
 800ec50:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ec52:	4b0f      	ldr	r3, [pc, #60]	@ (800ec90 <calculateSPLQ31+0x5b8>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	701a      	strb	r2, [r3, #0]
    }
}
 800ec58:	46c0      	nop			@ (mov r8, r8)
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	b02f      	add	sp, #188	@ 0xbc
 800ec5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec60:	200000cc 	.word	0x200000cc
 800ec64:	200000d0 	.word	0x200000d0
 800ec68:	20000f50 	.word	0x20000f50
 800ec6c:	20000f4c 	.word	0x20000f4c
 800ec70:	20000f54 	.word	0x20000f54
 800ec74:	20000f6c 	.word	0x20000f6c
 800ec78:	20001994 	.word	0x20001994
 800ec7c:	20001998 	.word	0x20001998
 800ec80:	2000199c 	.word	0x2000199c
 800ec84:	200019b4 	.word	0x200019b4
 800ec88:	200019cc 	.word	0x200019cc
 800ec8c:	20000f41 	.word	0x20000f41
 800ec90:	20000f3f 	.word	0x20000f3f

0800ec94 <resetSPLstate>:

static void resetSPLstate(void)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800ec9a:	4b11      	ldr	r3, [pc, #68]	@ (800ece0 <resetSPLstate+0x4c>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800eca0:	4b10      	ldr	r3, [pc, #64]	@ (800ece4 <resetSPLstate+0x50>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800eca6:	4b10      	ldr	r3, [pc, #64]	@ (800ece8 <resetSPLstate+0x54>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ecac:	2300      	movs	r3, #0
 800ecae:	607b      	str	r3, [r7, #4]
 800ecb0:	e00c      	b.n	800eccc <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800ecb2:	4b0e      	ldr	r3, [pc, #56]	@ (800ecec <resetSPLstate+0x58>)
 800ecb4:	687a      	ldr	r2, [r7, #4]
 800ecb6:	0092      	lsls	r2, r2, #2
 800ecb8:	2100      	movs	r1, #0
 800ecba:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800ecbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ecf0 <resetSPLstate+0x5c>)
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	0092      	lsls	r2, r2, #2
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	607b      	str	r3, [r7, #4]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2b05      	cmp	r3, #5
 800ecd0:	d9ef      	bls.n	800ecb2 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800ecd2:	4b08      	ldr	r3, [pc, #32]	@ (800ecf4 <resetSPLstate+0x60>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	701a      	strb	r2, [r3, #0]
}
 800ecd8:	46c0      	nop			@ (mov r8, r8)
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	b002      	add	sp, #8
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	20001994 	.word	0x20001994
 800ece4:	20001998 	.word	0x20001998
 800ece8:	200019cc 	.word	0x200019cc
 800ecec:	2000199c 	.word	0x2000199c
 800ecf0:	200019b4 	.word	0x200019b4
 800ecf4:	20000f41 	.word	0x20000f41

0800ecf8 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800ecf8:	b5b0      	push	{r4, r5, r7, lr}
 800ecfa:	b090      	sub	sp, #64	@ 0x40
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	0019      	movs	r1, r3
 800ed04:	1dfb      	adds	r3, r7, #7
 800ed06:	701a      	strb	r2, [r3, #0]
 800ed08:	1dbb      	adds	r3, r7, #6
 800ed0a:	1c0a      	adds	r2, r1, #0
 800ed0c:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800ed0e:	1dfb      	adds	r3, r7, #7
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d005      	beq.n	800ed22 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800ed16:	4b3b      	ldr	r3, [pc, #236]	@ (800ee04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800ed1c:	4b3a      	ldr	r3, [pc, #232]	@ (800ee08 <getFilteredMaxAmplitudeQ31+0x110>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800ed26:	2300      	movs	r3, #0
 800ed28:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800ed2a:	2305      	movs	r3, #5
 800ed2c:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800ed2e:	2300      	movs	r3, #0
 800ed30:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed32:	e040      	b.n	800edb6 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800ed34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	18d3      	adds	r3, r2, r3
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed40:	409a      	lsls	r2, r3
 800ed42:	0013      	movs	r3, r2
 800ed44:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800ed46:	4b30      	ldr	r3, [pc, #192]	@ (800ee08 <getFilteredMaxAmplitudeQ31+0x110>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	425a      	negs	r2, r3
 800ed4c:	4b2e      	ldr	r3, [pc, #184]	@ (800ee08 <getFilteredMaxAmplitudeQ31+0x110>)
 800ed4e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800ed50:	2418      	movs	r4, #24
 800ed52:	193a      	adds	r2, r7, r4
 800ed54:	492c      	ldr	r1, [pc, #176]	@ (800ee08 <getFilteredMaxAmplitudeQ31+0x110>)
 800ed56:	231c      	movs	r3, #28
 800ed58:	18f8      	adds	r0, r7, r3
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	f012 f85e 	bl	8020e1c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800ed60:	2514      	movs	r5, #20
 800ed62:	197a      	adds	r2, r7, r5
 800ed64:	1939      	adds	r1, r7, r4
 800ed66:	4829      	ldr	r0, [pc, #164]	@ (800ee0c <getFilteredMaxAmplitudeQ31+0x114>)
 800ed68:	2301      	movs	r3, #1
 800ed6a:	f012 f825 	bl	8020db8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800ed6e:	2410      	movs	r4, #16
 800ed70:	193a      	adds	r2, r7, r4
 800ed72:	4924      	ldr	r1, [pc, #144]	@ (800ee04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ed74:	4826      	ldr	r0, [pc, #152]	@ (800ee10 <getFilteredMaxAmplitudeQ31+0x118>)
 800ed76:	2301      	movs	r3, #1
 800ed78:	f012 f81e 	bl	8020db8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800ed7c:	4a21      	ldr	r2, [pc, #132]	@ (800ee04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ed7e:	1939      	adds	r1, r7, r4
 800ed80:	1978      	adds	r0, r7, r5
 800ed82:	2301      	movs	r3, #1
 800ed84:	f012 f84a 	bl	8020e1c <arm_add_q31>

        lastData = fx;
 800ed88:	69fa      	ldr	r2, [r7, #28]
 800ed8a:	4b1f      	ldr	r3, [pc, #124]	@ (800ee08 <getFilteredMaxAmplitudeQ31+0x110>)
 800ed8c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800ed8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ee04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed94:	429a      	cmp	r2, r3
 800ed96:	da03      	bge.n	800eda0 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800ed98:	4b1a      	ldr	r3, [pc, #104]	@ (800ee04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed9e:	e007      	b.n	800edb0 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800eda0:	4b18      	ldr	r3, [pc, #96]	@ (800ee04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eda6:	429a      	cmp	r2, r3
 800eda8:	dd02      	ble.n	800edb0 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800edaa:	4b16      	ldr	r3, [pc, #88]	@ (800ee04 <getFilteredMaxAmplitudeQ31+0x10c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800edb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edb2:	3301      	adds	r3, #1
 800edb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800edb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d3ba      	bcc.n	800ed34 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800edbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc0:	17da      	asrs	r2, r3, #31
 800edc2:	189b      	adds	r3, r3, r2
 800edc4:	4053      	eors	r3, r2
 800edc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800edc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edca:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800edcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800edce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d200      	bcs.n	800edd6 <getFilteredMaxAmplitudeQ31+0xde>
 800edd4:	0013      	movs	r3, r2
 800edd6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800edd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eddc:	40da      	lsrs	r2, r3
 800edde:	0013      	movs	r3, r2
 800ede0:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800ede2:	1dbb      	adds	r3, r7, #6
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d007      	beq.n	800edfa <getFilteredMaxAmplitudeQ31+0x102>
 800edea:	4b0a      	ldr	r3, [pc, #40]	@ (800ee14 <getFilteredMaxAmplitudeQ31+0x11c>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	6a3a      	ldr	r2, [r7, #32]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d902      	bls.n	800edfa <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800edf4:	4b07      	ldr	r3, [pc, #28]	@ (800ee14 <getFilteredMaxAmplitudeQ31+0x11c>)
 800edf6:	6a3a      	ldr	r2, [r7, #32]
 800edf8:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800edfa:	6a3b      	ldr	r3, [r7, #32]
}
 800edfc:	0018      	movs	r0, r3
 800edfe:	46bd      	mov	sp, r7
 800ee00:	b010      	add	sp, #64	@ 0x40
 800ee02:	bdb0      	pop	{r4, r5, r7, pc}
 800ee04:	20001dd0 	.word	0x20001dd0
 800ee08:	20001dd4 	.word	0x20001dd4
 800ee0c:	08028d78 	.word	0x08028d78
 800ee10:	08028d7c 	.word	0x08028d7c
 800ee14:	20000f48 	.word	0x20000f48

0800ee18 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800ee24:	4913      	ldr	r1, [pc, #76]	@ (800ee74 <floatToIntAndFrac2dp+0x5c>)
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f7f2 f8ba 	bl	8000fa0 <__aeabi_fmul>
 800ee2c:	1c03      	adds	r3, r0, #0
 800ee2e:	1c18      	adds	r0, r3, #0
 800ee30:	f016 fc4a 	bl	80256c8 <roundf>
 800ee34:	1c03      	adds	r3, r0, #0
 800ee36:	1c18      	adds	r0, r3, #0
 800ee38:	f7f1 fbf0 	bl	800061c <__aeabi_f2uiz>
 800ee3c:	0003      	movs	r3, r0
 800ee3e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	2164      	movs	r1, #100	@ 0x64
 800ee44:	0018      	movs	r0, r3
 800ee46:	f7f1 f9ad 	bl	80001a4 <__udivsi3>
 800ee4a:	0003      	movs	r3, r0
 800ee4c:	001a      	movs	r2, r3
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	2164      	movs	r1, #100	@ 0x64
 800ee5e:	434b      	muls	r3, r1
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	701a      	strb	r2, [r3, #0]
}
 800ee6a:	46c0      	nop			@ (mov r8, r8)
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	b006      	add	sp, #24
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	46c0      	nop			@ (mov r8, r8)
 800ee74:	42c80000 	.word	0x42c80000

0800ee78 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ee84:	4914      	ldr	r1, [pc, #80]	@ (800eed8 <floatToIntAndFrac1dp+0x60>)
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7f2 f88a 	bl	8000fa0 <__aeabi_fmul>
 800ee8c:	1c03      	adds	r3, r0, #0
 800ee8e:	1c18      	adds	r0, r3, #0
 800ee90:	f016 fc1a 	bl	80256c8 <roundf>
 800ee94:	1c03      	adds	r3, r0, #0
 800ee96:	1c18      	adds	r0, r3, #0
 800ee98:	f7f1 fbc0 	bl	800061c <__aeabi_f2uiz>
 800ee9c:	0003      	movs	r3, r0
 800ee9e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	210a      	movs	r1, #10
 800eea4:	0018      	movs	r0, r3
 800eea6:	f7f1 f97d 	bl	80001a4 <__udivsi3>
 800eeaa:	0003      	movs	r3, r0
 800eeac:	001a      	movs	r2, r3
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	1c19      	adds	r1, r3, #0
 800eebe:	0089      	lsls	r1, r1, #2
 800eec0:	18cb      	adds	r3, r1, r3
 800eec2:	18db      	adds	r3, r3, r3
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	1ad3      	subs	r3, r2, r3
 800eec8:	b2da      	uxtb	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	701a      	strb	r2, [r3, #0]
}
 800eece:	46c0      	nop			@ (mov r8, r8)
 800eed0:	46bd      	mov	sp, r7
 800eed2:	b006      	add	sp, #24
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	46c0      	nop			@ (mov r8, r8)
 800eed8:	41200000 	.word	0x41200000

0800eedc <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800eedc:	b590      	push	{r4, r7, lr}
 800eede:	b087      	sub	sp, #28
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7f2 fb70 	bl	80015d0 <__aeabi_i2f>
 800eef0:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800eef2:	6838      	ldr	r0, [r7, #0]
 800eef4:	f7f2 fb6c 	bl	80015d0 <__aeabi_i2f>
 800eef8:	1c03      	adds	r3, r0, #0
 800eefa:	4918      	ldr	r1, [pc, #96]	@ (800ef5c <sumToIntAverage+0x80>)
 800eefc:	1c18      	adds	r0, r3, #0
 800eefe:	f7f1 fe69 	bl	8000bd4 <__aeabi_fdiv>
 800ef02:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ef04:	1c19      	adds	r1, r3, #0
 800ef06:	1c20      	adds	r0, r4, #0
 800ef08:	f7f1 fcda 	bl	80008c0 <__aeabi_fadd>
 800ef0c:	1c03      	adds	r3, r0, #0
 800ef0e:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ef10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef12:	f7f2 fba9 	bl	8001668 <__aeabi_ui2f>
 800ef16:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ef18:	1c19      	adds	r1, r3, #0
 800ef1a:	1c20      	adds	r0, r4, #0
 800ef1c:	f7f1 fe5a 	bl	8000bd4 <__aeabi_fdiv>
 800ef20:	1c03      	adds	r3, r0, #0
 800ef22:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ef24:	2300      	movs	r3, #0
 800ef26:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	2310      	movs	r3, #16
 800ef2c:	18f9      	adds	r1, r7, r3
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	1c18      	adds	r0, r3, #0
 800ef32:	f7ff ffa1 	bl	800ee78 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	2bff      	cmp	r3, #255	@ 0xff
 800ef3a:	d906      	bls.n	800ef4a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	22ff      	movs	r2, #255	@ 0xff
 800ef40:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	2209      	movs	r2, #9
 800ef46:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ef48:	e003      	b.n	800ef52 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	b2da      	uxtb	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	701a      	strb	r2, [r3, #0]
}
 800ef52:	46c0      	nop			@ (mov r8, r8)
 800ef54:	46bd      	mov	sp, r7
 800ef56:	b007      	add	sp, #28
 800ef58:	bd90      	pop	{r4, r7, pc}
 800ef5a:	46c0      	nop			@ (mov r8, r8)
 800ef5c:	41200000 	.word	0x41200000

0800ef60 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	60b9      	str	r1, [r7, #8]
 800ef6a:	607a      	str	r2, [r7, #4]
 800ef6c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2280      	movs	r2, #128	@ 0x80
 800ef72:	0612      	lsls	r2, r2, #24
 800ef74:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	4a18      	ldr	r2, [pc, #96]	@ (800efdc <findMinMax+0x7c>)
 800ef7a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	617b      	str	r3, [r7, #20]
 800ef80:	e022      	b.n	800efc8 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	18d3      	adds	r3, r2, r3
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	da06      	bge.n	800efa2 <findMinMax+0x42>
        {
            min[0] = array[i];
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	18d3      	adds	r3, r2, r3
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	18d3      	adds	r3, r2, r3
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	dd06      	ble.n	800efc2 <findMinMax+0x62>
        {
            max[0] = array[i];
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	18d3      	adds	r3, r2, r3
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	3301      	adds	r3, #1
 800efc6:	617b      	str	r3, [r7, #20]
 800efc8:	697a      	ldr	r2, [r7, #20]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d3d8      	bcc.n	800ef82 <findMinMax+0x22>
        }
    }
}
 800efd0:	46c0      	nop			@ (mov r8, r8)
 800efd2:	46c0      	nop			@ (mov r8, r8)
 800efd4:	46bd      	mov	sp, r7
 800efd6:	b006      	add	sp, #24
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	46c0      	nop			@ (mov r8, r8)
 800efdc:	7fffffff 	.word	0x7fffffff

0800efe0 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d302      	bcc.n	800effc <getPo2factor+0x1c>
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d107      	bne.n	800f00c <getPo2factor+0x2c>
    {
        return 0;
 800effc:	2300      	movs	r3, #0
 800effe:	e00d      	b.n	800f01c <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	085b      	lsrs	r3, r3, #1
 800f004:	607b      	str	r3, [r7, #4]
        bitShift++;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3301      	adds	r3, #1
 800f00a:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d2f5      	bcs.n	800f000 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	3b01      	subs	r3, #1
 800f018:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800f01a:	68fb      	ldr	r3, [r7, #12]
}
 800f01c:	0018      	movs	r0, r3
 800f01e:	46bd      	mov	sp, r7
 800f020:	b004      	add	sp, #16
 800f022:	bd80      	pop	{r7, pc}

0800f024 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7f2 fb18 	bl	8001668 <__aeabi_ui2f>
 800f038:	1c03      	adds	r3, r0, #0
 800f03a:	1c19      	adds	r1, r3, #0
 800f03c:	68b8      	ldr	r0, [r7, #8]
 800f03e:	f7f1 ffaf 	bl	8000fa0 <__aeabi_fmul>
 800f042:	1c03      	adds	r3, r0, #0
 800f044:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800f04a:	683a      	ldr	r2, [r7, #0]
 800f04c:	2310      	movs	r3, #16
 800f04e:	18f9      	adds	r1, r7, r3
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	1c18      	adds	r0, r3, #0
 800f054:	f7ff fee0 	bl	800ee18 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	801a      	strh	r2, [r3, #0]
}
 800f060:	46c0      	nop			@ (mov r8, r8)
 800f062:	46bd      	mov	sp, r7
 800f064:	b006      	add	sp, #24
 800f066:	bd80      	pop	{r7, pc}

0800f068 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60b8      	str	r0, [r7, #8]
 800f070:	60f9      	str	r1, [r7, #12]
 800f072:	607a      	str	r2, [r7, #4]
 800f074:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800f076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f078:	6a3a      	ldr	r2, [r7, #32]
 800f07a:	68b8      	ldr	r0, [r7, #8]
 800f07c:	68f9      	ldr	r1, [r7, #12]
 800f07e:	f7fa f8d3 	bl	8009228 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800f082:	6a3b      	ldr	r3, [r7, #32]
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	18d2      	adds	r2, r2, r3
 800f08a:	69bb      	ldr	r3, [r7, #24]
 800f08c:	18d2      	adds	r2, r2, r3
 800f08e:	6a3b      	ldr	r3, [r7, #32]
 800f090:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800f092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	18d2      	adds	r2, r2, r3
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	18d2      	adds	r2, r2, r3
 800f09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a0:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800f0a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0a4:	6a3b      	ldr	r3, [r7, #32]
 800f0a6:	0011      	movs	r1, r2
 800f0a8:	0018      	movs	r0, r3
 800f0aa:	f7fa f94d 	bl	8009348 <correctIntFracNumber>
}
 800f0ae:	46c0      	nop			@ (mov r8, r8)
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	b004      	add	sp, #16
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b086      	sub	sp, #24
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	60f8      	str	r0, [r7, #12]
 800f0be:	60b9      	str	r1, [r7, #8]
 800f0c0:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	613b      	str	r3, [r7, #16]
 800f0ca:	e019      	b.n	800f100 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	18d3      	adds	r3, r2, r3
 800f0d4:	881b      	ldrh	r3, [r3, #0]
 800f0d6:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800f0d8:	693a      	ldr	r2, [r7, #16]
 800f0da:	3201      	adds	r2, #1
 800f0dc:	0052      	lsls	r2, r2, #1
 800f0de:	68f9      	ldr	r1, [r7, #12]
 800f0e0:	188a      	adds	r2, r1, r2
 800f0e2:	8812      	ldrh	r2, [r2, #0]
 800f0e4:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f0e6:	0019      	movs	r1, r3
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800f0f0:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f0f2:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	3304      	adds	r3, #4
 800f0fe:	613b      	str	r3, [r7, #16]
 800f100:	693a      	ldr	r2, [r7, #16]
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	429a      	cmp	r2, r3
 800f106:	d3e1      	bcc.n	800f0cc <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800f108:	46c0      	nop			@ (mov r8, r8)
 800f10a:	46c0      	nop			@ (mov r8, r8)
 800f10c:	46bd      	mov	sp, r7
 800f10e:	b006      	add	sp, #24
 800f110:	bd80      	pop	{r7, pc}
	...

0800f114 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800f114:	b580      	push	{r7, lr}
 800f116:	af00      	add	r7, sp, #0
  init = false;
 800f118:	4b02      	ldr	r3, [pc, #8]	@ (800f124 <InitDone+0x10>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	701a      	strb	r2, [r3, #0]
}
 800f11e:	46c0      	nop			@ (mov r8, r8)
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	200000d8 	.word	0x200000d8

0800f128 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800f12e:	f7f7 fe8b 	bl	8006e48 <ReadBatteryVoltage>
 800f132:	1c02      	adds	r2, r0, #0
 800f134:	4b25      	ldr	r3, [pc, #148]	@ (800f1cc <batteryChargeCheck+0xa4>)
 800f136:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800f138:	4b24      	ldr	r3, [pc, #144]	@ (800f1cc <batteryChargeCheck+0xa4>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4924      	ldr	r1, [pc, #144]	@ (800f1d0 <batteryChargeCheck+0xa8>)
 800f13e:	1c18      	adds	r0, r3, #0
 800f140:	f7f1 f9f6 	bl	8000530 <__aeabi_fcmplt>
 800f144:	1e03      	subs	r3, r0, #0
 800f146:	d002      	beq.n	800f14e <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800f148:	1dfb      	adds	r3, r7, #7
 800f14a:	2200      	movs	r2, #0
 800f14c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800f14e:	4b1f      	ldr	r3, [pc, #124]	@ (800f1cc <batteryChargeCheck+0xa4>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	491f      	ldr	r1, [pc, #124]	@ (800f1d0 <batteryChargeCheck+0xa8>)
 800f154:	1c18      	adds	r0, r3, #0
 800f156:	f7f1 fa09 	bl	800056c <__aeabi_fcmpge>
 800f15a:	1e03      	subs	r3, r0, #0
 800f15c:	d00d      	beq.n	800f17a <batteryChargeCheck+0x52>
 800f15e:	4b1b      	ldr	r3, [pc, #108]	@ (800f1cc <batteryChargeCheck+0xa4>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	1c18      	adds	r0, r3, #0
 800f164:	f7f4 f97e 	bl	8003464 <__aeabi_f2d>
 800f168:	4a1a      	ldr	r2, [pc, #104]	@ (800f1d4 <batteryChargeCheck+0xac>)
 800f16a:	4b1b      	ldr	r3, [pc, #108]	@ (800f1d8 <batteryChargeCheck+0xb0>)
 800f16c:	f7f1 f9a6 	bl	80004bc <__aeabi_dcmplt>
 800f170:	1e03      	subs	r3, r0, #0
 800f172:	d002      	beq.n	800f17a <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800f174:	1dfb      	adds	r3, r7, #7
 800f176:	2201      	movs	r2, #1
 800f178:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800f17a:	4b14      	ldr	r3, [pc, #80]	@ (800f1cc <batteryChargeCheck+0xa4>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	1c18      	adds	r0, r3, #0
 800f180:	f7f4 f970 	bl	8003464 <__aeabi_f2d>
 800f184:	4a13      	ldr	r2, [pc, #76]	@ (800f1d4 <batteryChargeCheck+0xac>)
 800f186:	4b14      	ldr	r3, [pc, #80]	@ (800f1d8 <batteryChargeCheck+0xb0>)
 800f188:	f7f1 f9b6 	bl	80004f8 <__aeabi_dcmpge>
 800f18c:	1e03      	subs	r3, r0, #0
 800f18e:	d00b      	beq.n	800f1a8 <batteryChargeCheck+0x80>
 800f190:	4b0e      	ldr	r3, [pc, #56]	@ (800f1cc <batteryChargeCheck+0xa4>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2181      	movs	r1, #129	@ 0x81
 800f196:	05c9      	lsls	r1, r1, #23
 800f198:	1c18      	adds	r0, r3, #0
 800f19a:	f7f1 f9c9 	bl	8000530 <__aeabi_fcmplt>
 800f19e:	1e03      	subs	r3, r0, #0
 800f1a0:	d002      	beq.n	800f1a8 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800f1a2:	1dfb      	adds	r3, r7, #7
 800f1a4:	2202      	movs	r2, #2
 800f1a6:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800f1a8:	4b08      	ldr	r3, [pc, #32]	@ (800f1cc <batteryChargeCheck+0xa4>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2181      	movs	r1, #129	@ 0x81
 800f1ae:	05c9      	lsls	r1, r1, #23
 800f1b0:	1c18      	adds	r0, r3, #0
 800f1b2:	f7f1 f9db 	bl	800056c <__aeabi_fcmpge>
 800f1b6:	1e03      	subs	r3, r0, #0
 800f1b8:	d002      	beq.n	800f1c0 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800f1ba:	1dfb      	adds	r3, r7, #7
 800f1bc:	2203      	movs	r2, #3
 800f1be:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800f1c0:	1dfb      	adds	r3, r7, #7
 800f1c2:	781b      	ldrb	r3, [r3, #0]
}
 800f1c4:	0018      	movs	r0, r3
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	b002      	add	sp, #8
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	20001de8 	.word	0x20001de8
 800f1d0:	40600000 	.word	0x40600000
 800f1d4:	9999999a 	.word	0x9999999a
 800f1d8:	400d9999 	.word	0x400d9999

0800f1dc <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800f1dc:	b5b0      	push	{r4, r5, r7, lr}
 800f1de:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800f1e0:	f7f7 fe94 	bl	8006f0c <ReadSolarVoltage>
 800f1e4:	0003      	movs	r3, r0
 800f1e6:	001a      	movs	r2, r3
 800f1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800f254 <Calculate_LED_ON+0x78>)
 800f1ea:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800f1ec:	4b19      	ldr	r3, [pc, #100]	@ (800f254 <Calculate_LED_ON+0x78>)
 800f1ee:	881b      	ldrh	r3, [r3, #0]
 800f1f0:	4a19      	ldr	r2, [pc, #100]	@ (800f258 <Calculate_LED_ON+0x7c>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d802      	bhi.n	800f1fc <Calculate_LED_ON+0x20>
    solmV = 2900;
 800f1f6:	4b17      	ldr	r3, [pc, #92]	@ (800f254 <Calculate_LED_ON+0x78>)
 800f1f8:	4a18      	ldr	r2, [pc, #96]	@ (800f25c <Calculate_LED_ON+0x80>)
 800f1fa:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800f1fc:	4b15      	ldr	r3, [pc, #84]	@ (800f254 <Calculate_LED_ON+0x78>)
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	4a17      	ldr	r2, [pc, #92]	@ (800f260 <Calculate_LED_ON+0x84>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d902      	bls.n	800f20c <Calculate_LED_ON+0x30>
    solmV = 4700;
 800f206:	4b13      	ldr	r3, [pc, #76]	@ (800f254 <Calculate_LED_ON+0x78>)
 800f208:	4a15      	ldr	r2, [pc, #84]	@ (800f260 <Calculate_LED_ON+0x84>)
 800f20a:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800f20c:	4b11      	ldr	r3, [pc, #68]	@ (800f254 <Calculate_LED_ON+0x78>)
 800f20e:	881b      	ldrh	r3, [r3, #0]
 800f210:	0018      	movs	r0, r3
 800f212:	f7f4 f8d5 	bl	80033c0 <__aeabi_i2d>
 800f216:	0004      	movs	r4, r0
 800f218:	000d      	movs	r5, r1
 800f21a:	4b0e      	ldr	r3, [pc, #56]	@ (800f254 <Calculate_LED_ON+0x78>)
 800f21c:	881b      	ldrh	r3, [r3, #0]
 800f21e:	001a      	movs	r2, r3
 800f220:	4b10      	ldr	r3, [pc, #64]	@ (800f264 <Calculate_LED_ON+0x88>)
 800f222:	1a9b      	subs	r3, r3, r2
 800f224:	0018      	movs	r0, r3
 800f226:	f7f4 f8cb 	bl	80033c0 <__aeabi_i2d>
 800f22a:	2200      	movs	r2, #0
 800f22c:	4b0e      	ldr	r3, [pc, #56]	@ (800f268 <Calculate_LED_ON+0x8c>)
 800f22e:	f7f3 fa05 	bl	800263c <__aeabi_dmul>
 800f232:	0002      	movs	r2, r0
 800f234:	000b      	movs	r3, r1
 800f236:	0020      	movs	r0, r4
 800f238:	0029      	movs	r1, r5
 800f23a:	f7f2 fa57 	bl	80016ec <__aeabi_dadd>
 800f23e:	0002      	movs	r2, r0
 800f240:	000b      	movs	r3, r1
 800f242:	0010      	movs	r0, r2
 800f244:	0019      	movs	r1, r3
 800f246:	f7f1 fa01 	bl	800064c <__aeabi_d2uiz>
 800f24a:	0003      	movs	r3, r0
 800f24c:	b29b      	uxth	r3, r3
}
 800f24e:	0018      	movs	r0, r3
 800f250:	46bd      	mov	sp, r7
 800f252:	bdb0      	pop	{r4, r5, r7, pc}
 800f254:	20001dec 	.word	0x20001dec
 800f258:	00000b53 	.word	0x00000b53
 800f25c:	00000b54 	.word	0x00000b54
 800f260:	0000125c 	.word	0x0000125c
 800f264:	00000dee 	.word	0x00000dee
 800f268:	3ff80000 	.word	0x3ff80000

0800f26c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800f26c:	b590      	push	{r4, r7, lr}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	0004      	movs	r4, r0
 800f274:	0008      	movs	r0, r1
 800f276:	0011      	movs	r1, r2
 800f278:	1dbb      	adds	r3, r7, #6
 800f27a:	1c22      	adds	r2, r4, #0
 800f27c:	801a      	strh	r2, [r3, #0]
 800f27e:	1d3b      	adds	r3, r7, #4
 800f280:	1c02      	adds	r2, r0, #0
 800f282:	801a      	strh	r2, [r3, #0]
 800f284:	1cbb      	adds	r3, r7, #2
 800f286:	1c0a      	adds	r2, r1, #0
 800f288:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800f28a:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c8 <SetStatusLED+0x5c>)
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d107      	bne.n	800f2a2 <SetStatusLED+0x36>
 800f292:	4b0e      	ldr	r3, [pc, #56]	@ (800f2cc <SetStatusLED+0x60>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d103      	bne.n	800f2a2 <SetStatusLED+0x36>
 800f29a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2d0 <SetStatusLED+0x64>)
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00e      	beq.n	800f2c0 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800f2a2:	2380      	movs	r3, #128	@ 0x80
 800f2a4:	05db      	lsls	r3, r3, #23
 800f2a6:	1dba      	adds	r2, r7, #6
 800f2a8:	8812      	ldrh	r2, [r2, #0]
 800f2aa:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800f2ac:	2380      	movs	r3, #128	@ 0x80
 800f2ae:	05db      	lsls	r3, r3, #23
 800f2b0:	1d3a      	adds	r2, r7, #4
 800f2b2:	8812      	ldrh	r2, [r2, #0]
 800f2b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800f2b6:	2380      	movs	r3, #128	@ 0x80
 800f2b8:	05db      	lsls	r3, r3, #23
 800f2ba:	1cba      	adds	r2, r7, #2
 800f2bc:	8812      	ldrh	r2, [r2, #0]
 800f2be:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f2c0:	46c0      	nop			@ (mov r8, r8)
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	b003      	add	sp, #12
 800f2c6:	bd90      	pop	{r4, r7, pc}
 800f2c8:	20001dd9 	.word	0x20001dd9
 800f2cc:	200000d8 	.word	0x200000d8
 800f2d0:	20001dda 	.word	0x20001dda

0800f2d4 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800f2d4:	b590      	push	{r4, r7, lr}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	0004      	movs	r4, r0
 800f2dc:	0008      	movs	r0, r1
 800f2de:	0011      	movs	r1, r2
 800f2e0:	1dfb      	adds	r3, r7, #7
 800f2e2:	1c22      	adds	r2, r4, #0
 800f2e4:	701a      	strb	r2, [r3, #0]
 800f2e6:	1dbb      	adds	r3, r7, #6
 800f2e8:	1c02      	adds	r2, r0, #0
 800f2ea:	701a      	strb	r2, [r3, #0]
 800f2ec:	1d7b      	adds	r3, r7, #5
 800f2ee:	1c0a      	adds	r2, r1, #0
 800f2f0:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800f2f2:	4b19      	ldr	r3, [pc, #100]	@ (800f358 <SetDBLED+0x84>)
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d107      	bne.n	800f30a <SetDBLED+0x36>
 800f2fa:	4b18      	ldr	r3, [pc, #96]	@ (800f35c <SetDBLED+0x88>)
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d103      	bne.n	800f30a <SetDBLED+0x36>
 800f302:	4b17      	ldr	r3, [pc, #92]	@ (800f360 <SetDBLED+0x8c>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d022      	beq.n	800f350 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800f30a:	1dfb      	adds	r3, r7, #7
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	2201      	movs	r2, #1
 800f310:	4053      	eors	r3, r2
 800f312:	b2db      	uxtb	r3, r3
 800f314:	001a      	movs	r2, r3
 800f316:	4b13      	ldr	r3, [pc, #76]	@ (800f364 <SetDBLED+0x90>)
 800f318:	2101      	movs	r1, #1
 800f31a:	0018      	movs	r0, r3
 800f31c:	f003 f8eb 	bl	80124f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800f320:	1dbb      	adds	r3, r7, #6
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	2201      	movs	r2, #1
 800f326:	4053      	eors	r3, r2
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	001a      	movs	r2, r3
 800f32c:	2380      	movs	r3, #128	@ 0x80
 800f32e:	005b      	lsls	r3, r3, #1
 800f330:	480c      	ldr	r0, [pc, #48]	@ (800f364 <SetDBLED+0x90>)
 800f332:	0019      	movs	r1, r3
 800f334:	f003 f8df 	bl	80124f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800f338:	1d7b      	adds	r3, r7, #5
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	2201      	movs	r2, #1
 800f33e:	4053      	eors	r3, r2
 800f340:	b2db      	uxtb	r3, r3
 800f342:	001a      	movs	r2, r3
 800f344:	2380      	movs	r3, #128	@ 0x80
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	4806      	ldr	r0, [pc, #24]	@ (800f364 <SetDBLED+0x90>)
 800f34a:	0019      	movs	r1, r3
 800f34c:	f003 f8d3 	bl	80124f6 <HAL_GPIO_WritePin>
  }
}
 800f350:	46c0      	nop			@ (mov r8, r8)
 800f352:	46bd      	mov	sp, r7
 800f354:	b003      	add	sp, #12
 800f356:	bd90      	pop	{r4, r7, pc}
 800f358:	20001dd9 	.word	0x20001dd9
 800f35c:	200000d8 	.word	0x200000d8
 800f360:	20001dda 	.word	0x20001dda
 800f364:	50000400 	.word	0x50000400

0800f368 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800f368:	b590      	push	{r4, r7, lr}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	0004      	movs	r4, r0
 800f370:	0008      	movs	r0, r1
 800f372:	0011      	movs	r1, r2
 800f374:	1dbb      	adds	r3, r7, #6
 800f376:	1c22      	adds	r2, r4, #0
 800f378:	801a      	strh	r2, [r3, #0]
 800f37a:	1d3b      	adds	r3, r7, #4
 800f37c:	1c02      	adds	r2, r0, #0
 800f37e:	801a      	strh	r2, [r3, #0]
 800f380:	1cbb      	adds	r3, r7, #2
 800f382:	1c0a      	adds	r2, r1, #0
 800f384:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800f386:	4b0e      	ldr	r3, [pc, #56]	@ (800f3c0 <SetVocLED+0x58>)
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d107      	bne.n	800f39e <SetVocLED+0x36>
 800f38e:	4b0d      	ldr	r3, [pc, #52]	@ (800f3c4 <SetVocLED+0x5c>)
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d103      	bne.n	800f39e <SetVocLED+0x36>
 800f396:	4b0c      	ldr	r3, [pc, #48]	@ (800f3c8 <SetVocLED+0x60>)
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00b      	beq.n	800f3b6 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800f39e:	4b0b      	ldr	r3, [pc, #44]	@ (800f3cc <SetVocLED+0x64>)
 800f3a0:	1dba      	adds	r2, r7, #6
 800f3a2:	8812      	ldrh	r2, [r2, #0]
 800f3a4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800f3a6:	4b09      	ldr	r3, [pc, #36]	@ (800f3cc <SetVocLED+0x64>)
 800f3a8:	1d3a      	adds	r2, r7, #4
 800f3aa:	8812      	ldrh	r2, [r2, #0]
 800f3ac:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800f3ae:	4b07      	ldr	r3, [pc, #28]	@ (800f3cc <SetVocLED+0x64>)
 800f3b0:	1cba      	adds	r2, r7, #2
 800f3b2:	8812      	ldrh	r2, [r2, #0]
 800f3b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f3b6:	46c0      	nop			@ (mov r8, r8)
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	b003      	add	sp, #12
 800f3bc:	bd90      	pop	{r4, r7, pc}
 800f3be:	46c0      	nop			@ (mov r8, r8)
 800f3c0:	20001dd9 	.word	0x20001dd9
 800f3c4:	200000d8 	.word	0x200000d8
 800f3c8:	20001dda 	.word	0x20001dda
 800f3cc:	40000400 	.word	0x40000400

0800f3d0 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f3d4:	4b08      	ldr	r3, [pc, #32]	@ (800f3f8 <SetMeasurementIndicator+0x28>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d103      	bne.n	800f3e4 <SetMeasurementIndicator+0x14>
 800f3dc:	4b07      	ldr	r3, [pc, #28]	@ (800f3fc <SetMeasurementIndicator+0x2c>)
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d006      	beq.n	800f3f2 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800f3e4:	f7ff fefa 	bl	800f1dc <Calculate_LED_ON>
 800f3e8:	0003      	movs	r3, r0
 800f3ea:	001a      	movs	r2, r3
 800f3ec:	2380      	movs	r3, #128	@ 0x80
 800f3ee:	05db      	lsls	r3, r3, #23
 800f3f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f3f2:	46c0      	nop			@ (mov r8, r8)
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	20001dd9 	.word	0x20001dd9
 800f3fc:	20001dda 	.word	0x20001dda

0800f400 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800f400:	b580      	push	{r7, lr}
 800f402:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f404:	4b07      	ldr	r3, [pc, #28]	@ (800f424 <ResetMeasurementIndicator+0x24>)
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d103      	bne.n	800f414 <ResetMeasurementIndicator+0x14>
 800f40c:	4b06      	ldr	r3, [pc, #24]	@ (800f428 <ResetMeasurementIndicator+0x28>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d004      	beq.n	800f41e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800f414:	2380      	movs	r3, #128	@ 0x80
 800f416:	05db      	lsls	r3, r3, #23
 800f418:	22fa      	movs	r2, #250	@ 0xfa
 800f41a:	0112      	lsls	r2, r2, #4
 800f41c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f41e:	46c0      	nop			@ (mov r8, r8)
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	20001dd9 	.word	0x20001dd9
 800f428:	20001dda 	.word	0x20001dda

0800f42c <SetMICIndicator>:
void SetMICIndicator(){
 800f42c:	b580      	push	{r7, lr}
 800f42e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f430:	4b19      	ldr	r3, [pc, #100]	@ (800f498 <SetMICIndicator+0x6c>)
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d103      	bne.n	800f440 <SetMICIndicator+0x14>
 800f438:	4b18      	ldr	r3, [pc, #96]	@ (800f49c <SetMICIndicator+0x70>)
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d007      	beq.n	800f450 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800f440:	f7ff fecc 	bl	800f1dc <Calculate_LED_ON>
 800f444:	0003      	movs	r3, r0
 800f446:	001a      	movs	r2, r3
 800f448:	2380      	movs	r3, #128	@ 0x80
 800f44a:	05db      	lsls	r3, r3, #23
 800f44c:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800f44e:	e01f      	b.n	800f490 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800f450:	4b13      	ldr	r3, [pc, #76]	@ (800f4a0 <SetMICIndicator+0x74>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	1c18      	adds	r0, r3, #0
 800f456:	f7f4 f805 	bl	8003464 <__aeabi_f2d>
 800f45a:	4a12      	ldr	r2, [pc, #72]	@ (800f4a4 <SetMICIndicator+0x78>)
 800f45c:	4b12      	ldr	r3, [pc, #72]	@ (800f4a8 <SetMICIndicator+0x7c>)
 800f45e:	f7f1 f841 	bl	80004e4 <__aeabi_dcmpgt>
 800f462:	1e03      	subs	r3, r0, #0
 800f464:	d00a      	beq.n	800f47c <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800f466:	f7ff feb9 	bl	800f1dc <Calculate_LED_ON>
 800f46a:	0003      	movs	r3, r0
 800f46c:	001a      	movs	r2, r3
 800f46e:	2380      	movs	r3, #128	@ 0x80
 800f470:	05db      	lsls	r3, r3, #23
 800f472:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800f474:	4b0d      	ldr	r3, [pc, #52]	@ (800f4ac <SetMICIndicator+0x80>)
 800f476:	2202      	movs	r2, #2
 800f478:	701a      	strb	r2, [r3, #0]
}
 800f47a:	e009      	b.n	800f490 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800f47c:	f7ff feae 	bl	800f1dc <Calculate_LED_ON>
 800f480:	0003      	movs	r3, r0
 800f482:	001a      	movs	r2, r3
 800f484:	2380      	movs	r3, #128	@ 0x80
 800f486:	05db      	lsls	r3, r3, #23
 800f488:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800f48a:	4b08      	ldr	r3, [pc, #32]	@ (800f4ac <SetMICIndicator+0x80>)
 800f48c:	2201      	movs	r2, #1
 800f48e:	701a      	strb	r2, [r3, #0]
}
 800f490:	46c0      	nop			@ (mov r8, r8)
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	46c0      	nop			@ (mov r8, r8)
 800f498:	20001dd9 	.word	0x20001dd9
 800f49c:	20001dda 	.word	0x20001dda
 800f4a0:	20001de8 	.word	0x20001de8
 800f4a4:	9999999a 	.word	0x9999999a
 800f4a8:	400d9999 	.word	0x400d9999
 800f4ac:	20001ddc 	.word	0x20001ddc

0800f4b0 <ResetMICIndicator>:
void ResetMICIndicator(){
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f4 <ResetMICIndicator+0x44>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d103      	bne.n	800f4c4 <ResetMICIndicator+0x14>
 800f4bc:	4b0e      	ldr	r3, [pc, #56]	@ (800f4f8 <ResetMICIndicator+0x48>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d005      	beq.n	800f4d0 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800f4c4:	2380      	movs	r3, #128	@ 0x80
 800f4c6:	05db      	lsls	r3, r3, #23
 800f4c8:	22fa      	movs	r2, #250	@ 0xfa
 800f4ca:	0112      	lsls	r2, r2, #4
 800f4cc:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800f4ce:	e00e      	b.n	800f4ee <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800f4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f4fc <ResetMICIndicator+0x4c>)
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	2b02      	cmp	r3, #2
 800f4d6:	d105      	bne.n	800f4e4 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800f4d8:	2380      	movs	r3, #128	@ 0x80
 800f4da:	05db      	lsls	r3, r3, #23
 800f4dc:	22fa      	movs	r2, #250	@ 0xfa
 800f4de:	0112      	lsls	r2, r2, #4
 800f4e0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800f4e2:	e004      	b.n	800f4ee <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800f4e4:	2380      	movs	r3, #128	@ 0x80
 800f4e6:	05db      	lsls	r3, r3, #23
 800f4e8:	22fa      	movs	r2, #250	@ 0xfa
 800f4ea:	0112      	lsls	r2, r2, #4
 800f4ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800f4ee:	46c0      	nop			@ (mov r8, r8)
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	20001dd9 	.word	0x20001dd9
 800f4f8:	20001dda 	.word	0x20001dda
 800f4fc:	20001ddc 	.word	0x20001ddc

0800f500 <SetESPIndicator>:
void SetESPIndicator(){
 800f500:	b580      	push	{r7, lr}
 800f502:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f504:	4b08      	ldr	r3, [pc, #32]	@ (800f528 <SetESPIndicator+0x28>)
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d103      	bne.n	800f514 <SetESPIndicator+0x14>
 800f50c:	4b07      	ldr	r3, [pc, #28]	@ (800f52c <SetESPIndicator+0x2c>)
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d006      	beq.n	800f522 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800f514:	f7ff fe62 	bl	800f1dc <Calculate_LED_ON>
 800f518:	0003      	movs	r3, r0
 800f51a:	001a      	movs	r2, r3
 800f51c:	2380      	movs	r3, #128	@ 0x80
 800f51e:	05db      	lsls	r3, r3, #23
 800f520:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f522:	46c0      	nop			@ (mov r8, r8)
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20001dd9 	.word	0x20001dd9
 800f52c:	20001dda 	.word	0x20001dda

0800f530 <ResetESPIndicator>:
void ResetESPIndicator(){
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f534:	4b07      	ldr	r3, [pc, #28]	@ (800f554 <ResetESPIndicator+0x24>)
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d103      	bne.n	800f544 <ResetESPIndicator+0x14>
 800f53c:	4b06      	ldr	r3, [pc, #24]	@ (800f558 <ResetESPIndicator+0x28>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d004      	beq.n	800f54e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800f544:	2380      	movs	r3, #128	@ 0x80
 800f546:	05db      	lsls	r3, r3, #23
 800f548:	22fa      	movs	r2, #250	@ 0xfa
 800f54a:	0112      	lsls	r2, r2, #4
 800f54c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f54e:	46c0      	nop			@ (mov r8, r8)
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	20001dd9 	.word	0x20001dd9
 800f558:	20001dda 	.word	0x20001dda

0800f55c <SetPMIndicator>:

void SetPMIndicator() {
 800f55c:	b580      	push	{r7, lr}
 800f55e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f560:	4b0f      	ldr	r3, [pc, #60]	@ (800f5a0 <SetPMIndicator+0x44>)
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d103      	bne.n	800f570 <SetPMIndicator+0x14>
 800f568:	4b0e      	ldr	r3, [pc, #56]	@ (800f5a4 <SetPMIndicator+0x48>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d014      	beq.n	800f59a <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800f570:	f7ff fe34 	bl	800f1dc <Calculate_LED_ON>
 800f574:	0003      	movs	r3, r0
 800f576:	001a      	movs	r2, r3
 800f578:	2380      	movs	r3, #128	@ 0x80
 800f57a:	05db      	lsls	r3, r3, #23
 800f57c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800f57e:	f7ff fe2d 	bl	800f1dc <Calculate_LED_ON>
 800f582:	0003      	movs	r3, r0
 800f584:	001a      	movs	r2, r3
 800f586:	2380      	movs	r3, #128	@ 0x80
 800f588:	05db      	lsls	r3, r3, #23
 800f58a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800f58c:	f7ff fe26 	bl	800f1dc <Calculate_LED_ON>
 800f590:	0003      	movs	r3, r0
 800f592:	001a      	movs	r2, r3
 800f594:	2380      	movs	r3, #128	@ 0x80
 800f596:	05db      	lsls	r3, r3, #23
 800f598:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f59a:	46c0      	nop			@ (mov r8, r8)
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	20001dd9 	.word	0x20001dd9
 800f5a4:	20001dda 	.word	0x20001dda

0800f5a8 <ResetPMIndicator>:

void ResetPMIndicator() {
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f5e0 <ResetPMIndicator+0x38>)
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d103      	bne.n	800f5bc <ResetPMIndicator+0x14>
 800f5b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f5e4 <ResetPMIndicator+0x3c>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00e      	beq.n	800f5da <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800f5bc:	2380      	movs	r3, #128	@ 0x80
 800f5be:	05db      	lsls	r3, r3, #23
 800f5c0:	22fa      	movs	r2, #250	@ 0xfa
 800f5c2:	0112      	lsls	r2, r2, #4
 800f5c4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800f5c6:	2380      	movs	r3, #128	@ 0x80
 800f5c8:	05db      	lsls	r3, r3, #23
 800f5ca:	22fa      	movs	r2, #250	@ 0xfa
 800f5cc:	0112      	lsls	r2, r2, #4
 800f5ce:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800f5d0:	2380      	movs	r3, #128	@ 0x80
 800f5d2:	05db      	lsls	r3, r3, #23
 800f5d4:	22fa      	movs	r2, #250	@ 0xfa
 800f5d6:	0112      	lsls	r2, r2, #4
 800f5d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f5da:	46c0      	nop			@ (mov r8, r8)
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	20001dd9 	.word	0x20001dd9
 800f5e4:	20001dda 	.word	0x20001dda

0800f5e8 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800f5ec:	23fa      	movs	r3, #250	@ 0xfa
 800f5ee:	011a      	lsls	r2, r3, #4
 800f5f0:	23fa      	movs	r3, #250	@ 0xfa
 800f5f2:	0119      	lsls	r1, r3, #4
 800f5f4:	23fa      	movs	r3, #250	@ 0xfa
 800f5f6:	011b      	lsls	r3, r3, #4
 800f5f8:	0018      	movs	r0, r3
 800f5fa:	f7ff fe37 	bl	800f26c <SetStatusLED>
  SetDBLED(false,false,false);
 800f5fe:	2200      	movs	r2, #0
 800f600:	2100      	movs	r1, #0
 800f602:	2000      	movs	r0, #0
 800f604:	f7ff fe66 	bl	800f2d4 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800f608:	23fa      	movs	r3, #250	@ 0xfa
 800f60a:	011a      	lsls	r2, r3, #4
 800f60c:	23fa      	movs	r3, #250	@ 0xfa
 800f60e:	0119      	lsls	r1, r3, #4
 800f610:	23fa      	movs	r3, #250	@ 0xfa
 800f612:	011b      	lsls	r3, r3, #4
 800f614:	0018      	movs	r0, r3
 800f616:	f7ff fea7 	bl	800f368 <SetVocLED>
return;
 800f61a:	46c0      	nop			@ (mov r8, r8)
}
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <SetAllREDLED>:

void SetAllREDLED() {
 800f620:	b580      	push	{r7, lr}
 800f622:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 800f624:	2380      	movs	r3, #128	@ 0x80
 800f626:	05db      	lsls	r3, r3, #23
 800f628:	4a19      	ldr	r2, [pc, #100]	@ (800f690 <SetAllREDLED+0x70>)
 800f62a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 800f62c:	2380      	movs	r3, #128	@ 0x80
 800f62e:	05db      	lsls	r3, r3, #23
 800f630:	22fa      	movs	r2, #250	@ 0xfa
 800f632:	0112      	lsls	r2, r2, #4
 800f634:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 800f636:	2380      	movs	r3, #128	@ 0x80
 800f638:	05db      	lsls	r3, r3, #23
 800f63a:	22fa      	movs	r2, #250	@ 0xfa
 800f63c:	0112      	lsls	r2, r2, #4
 800f63e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 800f640:	4b14      	ldr	r3, [pc, #80]	@ (800f694 <SetAllREDLED+0x74>)
 800f642:	4a13      	ldr	r2, [pc, #76]	@ (800f690 <SetAllREDLED+0x70>)
 800f644:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 800f646:	4b13      	ldr	r3, [pc, #76]	@ (800f694 <SetAllREDLED+0x74>)
 800f648:	22fa      	movs	r2, #250	@ 0xfa
 800f64a:	0112      	lsls	r2, r2, #4
 800f64c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 800f64e:	4b11      	ldr	r3, [pc, #68]	@ (800f694 <SetAllREDLED+0x74>)
 800f650:	22fa      	movs	r2, #250	@ 0xfa
 800f652:	0112      	lsls	r2, r2, #4
 800f654:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 800f656:	4b10      	ldr	r3, [pc, #64]	@ (800f698 <SetAllREDLED+0x78>)
 800f658:	2200      	movs	r2, #0
 800f65a:	2101      	movs	r1, #1
 800f65c:	0018      	movs	r0, r3
 800f65e:	f002 ff4a 	bl	80124f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 800f662:	2380      	movs	r3, #128	@ 0x80
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	480c      	ldr	r0, [pc, #48]	@ (800f698 <SetAllREDLED+0x78>)
 800f668:	2201      	movs	r2, #1
 800f66a:	0019      	movs	r1, r3
 800f66c:	f002 ff43 	bl	80124f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 800f670:	2380      	movs	r3, #128	@ 0x80
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4808      	ldr	r0, [pc, #32]	@ (800f698 <SetAllREDLED+0x78>)
 800f676:	2201      	movs	r2, #1
 800f678:	0019      	movs	r1, r3
 800f67a:	f002 ff3c 	bl	80124f6 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800f67e:	23fa      	movs	r3, #250	@ 0xfa
 800f680:	009b      	lsls	r3, r3, #2
 800f682:	0018      	movs	r0, r3
 800f684:	f001 fcb0 	bl	8010fe8 <HAL_Delay>
}
 800f688:	46c0      	nop			@ (mov r8, r8)
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	46c0      	nop			@ (mov r8, r8)
 800f690:	00000bb8 	.word	0x00000bb8
 800f694:	40000400 	.word	0x40000400
 800f698:	50000400 	.word	0x50000400

0800f69c <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800f69c:	b5b0      	push	{r4, r5, r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	0002      	movs	r2, r0
 800f6a4:	1dbb      	adds	r3, r7, #6
 800f6a6:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800f6a8:	1dbb      	adds	r3, r7, #6
 800f6aa:	881b      	ldrh	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d05a      	beq.n	800f766 <SetVOCindicator+0xca>
 800f6b0:	1dbb      	adds	r3, r7, #6
 800f6b2:	881b      	ldrh	r3, [r3, #0]
 800f6b4:	2b64      	cmp	r3, #100	@ 0x64
 800f6b6:	d856      	bhi.n	800f766 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800f6b8:	1dbb      	adds	r3, r7, #6
 800f6ba:	881b      	ldrh	r3, [r3, #0]
 800f6bc:	0018      	movs	r0, r3
 800f6be:	f7f3 fe7f 	bl	80033c0 <__aeabi_i2d>
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	4b5f      	ldr	r3, [pc, #380]	@ (800f844 <SetVOCindicator+0x1a8>)
 800f6c6:	f7f2 fb75 	bl	8001db4 <__aeabi_ddiv>
 800f6ca:	0002      	movs	r2, r0
 800f6cc:	000b      	movs	r3, r1
 800f6ce:	2000      	movs	r0, #0
 800f6d0:	495d      	ldr	r1, [pc, #372]	@ (800f848 <SetVOCindicator+0x1ac>)
 800f6d2:	f7f3 fa7b 	bl	8002bcc <__aeabi_dsub>
 800f6d6:	0002      	movs	r2, r0
 800f6d8:	000b      	movs	r3, r1
 800f6da:	0014      	movs	r4, r2
 800f6dc:	001d      	movs	r5, r3
 800f6de:	4b5b      	ldr	r3, [pc, #364]	@ (800f84c <SetVOCindicator+0x1b0>)
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	0018      	movs	r0, r3
 800f6e4:	f7f3 fe6c 	bl	80033c0 <__aeabi_i2d>
 800f6e8:	0002      	movs	r2, r0
 800f6ea:	000b      	movs	r3, r1
 800f6ec:	0020      	movs	r0, r4
 800f6ee:	0029      	movs	r1, r5
 800f6f0:	f7f2 ffa4 	bl	800263c <__aeabi_dmul>
 800f6f4:	0002      	movs	r2, r0
 800f6f6:	000b      	movs	r3, r1
 800f6f8:	0010      	movs	r0, r2
 800f6fa:	0019      	movs	r1, r3
 800f6fc:	f7f0 ffa6 	bl	800064c <__aeabi_d2uiz>
 800f700:	0003      	movs	r3, r0
 800f702:	b29a      	uxth	r2, r3
 800f704:	4b52      	ldr	r3, [pc, #328]	@ (800f850 <SetVOCindicator+0x1b4>)
 800f706:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800f708:	1dbb      	adds	r3, r7, #6
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	0018      	movs	r0, r3
 800f70e:	f7f3 fe57 	bl	80033c0 <__aeabi_i2d>
 800f712:	2200      	movs	r2, #0
 800f714:	4b4b      	ldr	r3, [pc, #300]	@ (800f844 <SetVOCindicator+0x1a8>)
 800f716:	f7f2 fb4d 	bl	8001db4 <__aeabi_ddiv>
 800f71a:	0002      	movs	r2, r0
 800f71c:	000b      	movs	r3, r1
 800f71e:	0014      	movs	r4, r2
 800f720:	001d      	movs	r5, r3
 800f722:	4b4a      	ldr	r3, [pc, #296]	@ (800f84c <SetVOCindicator+0x1b0>)
 800f724:	881b      	ldrh	r3, [r3, #0]
 800f726:	0018      	movs	r0, r3
 800f728:	f7f3 fe4a 	bl	80033c0 <__aeabi_i2d>
 800f72c:	0002      	movs	r2, r0
 800f72e:	000b      	movs	r3, r1
 800f730:	0020      	movs	r0, r4
 800f732:	0029      	movs	r1, r5
 800f734:	f7f2 ff82 	bl	800263c <__aeabi_dmul>
 800f738:	0002      	movs	r2, r0
 800f73a:	000b      	movs	r3, r1
 800f73c:	0010      	movs	r0, r2
 800f73e:	0019      	movs	r1, r3
 800f740:	f7f0 ff84 	bl	800064c <__aeabi_d2uiz>
 800f744:	0003      	movs	r3, r0
 800f746:	b29a      	uxth	r2, r3
 800f748:	4b42      	ldr	r3, [pc, #264]	@ (800f854 <SetVOCindicator+0x1b8>)
 800f74a:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800f74c:	4b3f      	ldr	r3, [pc, #252]	@ (800f84c <SetVOCindicator+0x1b0>)
 800f74e:	881a      	ldrh	r2, [r3, #0]
 800f750:	4b41      	ldr	r3, [pc, #260]	@ (800f858 <SetVOCindicator+0x1bc>)
 800f752:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800f754:	4b40      	ldr	r3, [pc, #256]	@ (800f858 <SetVOCindicator+0x1bc>)
 800f756:	8818      	ldrh	r0, [r3, #0]
 800f758:	4b3d      	ldr	r3, [pc, #244]	@ (800f850 <SetVOCindicator+0x1b4>)
 800f75a:	8819      	ldrh	r1, [r3, #0]
 800f75c:	4b3d      	ldr	r3, [pc, #244]	@ (800f854 <SetVOCindicator+0x1b8>)
 800f75e:	881b      	ldrh	r3, [r3, #0]
 800f760:	001a      	movs	r2, r3
 800f762:	f7ff fe01 	bl	800f368 <SetVocLED>
  }
  if(VOCi > 100){
 800f766:	1dbb      	adds	r3, r7, #6
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	2b64      	cmp	r3, #100	@ 0x64
 800f76c:	d966      	bls.n	800f83c <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800f76e:	1dbb      	adds	r3, r7, #6
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	0018      	movs	r0, r3
 800f774:	f7f3 fe24 	bl	80033c0 <__aeabi_i2d>
 800f778:	2200      	movs	r2, #0
 800f77a:	4b32      	ldr	r3, [pc, #200]	@ (800f844 <SetVOCindicator+0x1a8>)
 800f77c:	f7f3 fa26 	bl	8002bcc <__aeabi_dsub>
 800f780:	0002      	movs	r2, r0
 800f782:	000b      	movs	r3, r1
 800f784:	0010      	movs	r0, r2
 800f786:	0019      	movs	r1, r3
 800f788:	2200      	movs	r2, #0
 800f78a:	4b34      	ldr	r3, [pc, #208]	@ (800f85c <SetVOCindicator+0x1c0>)
 800f78c:	f7f2 fb12 	bl	8001db4 <__aeabi_ddiv>
 800f790:	0002      	movs	r2, r0
 800f792:	000b      	movs	r3, r1
 800f794:	0014      	movs	r4, r2
 800f796:	001d      	movs	r5, r3
 800f798:	4b2c      	ldr	r3, [pc, #176]	@ (800f84c <SetVOCindicator+0x1b0>)
 800f79a:	881b      	ldrh	r3, [r3, #0]
 800f79c:	0018      	movs	r0, r3
 800f79e:	f7f3 fe0f 	bl	80033c0 <__aeabi_i2d>
 800f7a2:	0002      	movs	r2, r0
 800f7a4:	000b      	movs	r3, r1
 800f7a6:	0020      	movs	r0, r4
 800f7a8:	0029      	movs	r1, r5
 800f7aa:	f7f2 ff47 	bl	800263c <__aeabi_dmul>
 800f7ae:	0002      	movs	r2, r0
 800f7b0:	000b      	movs	r3, r1
 800f7b2:	0010      	movs	r0, r2
 800f7b4:	0019      	movs	r1, r3
 800f7b6:	f7f0 ff49 	bl	800064c <__aeabi_d2uiz>
 800f7ba:	0003      	movs	r3, r0
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	4b24      	ldr	r3, [pc, #144]	@ (800f850 <SetVOCindicator+0x1b4>)
 800f7c0:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800f7c2:	1dbb      	adds	r3, r7, #6
 800f7c4:	881b      	ldrh	r3, [r3, #0]
 800f7c6:	0018      	movs	r0, r3
 800f7c8:	f7f3 fdfa 	bl	80033c0 <__aeabi_i2d>
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800f844 <SetVOCindicator+0x1a8>)
 800f7d0:	f7f3 f9fc 	bl	8002bcc <__aeabi_dsub>
 800f7d4:	0002      	movs	r2, r0
 800f7d6:	000b      	movs	r3, r1
 800f7d8:	0010      	movs	r0, r2
 800f7da:	0019      	movs	r1, r3
 800f7dc:	2200      	movs	r2, #0
 800f7de:	4b1f      	ldr	r3, [pc, #124]	@ (800f85c <SetVOCindicator+0x1c0>)
 800f7e0:	f7f2 fae8 	bl	8001db4 <__aeabi_ddiv>
 800f7e4:	0002      	movs	r2, r0
 800f7e6:	000b      	movs	r3, r1
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	4917      	ldr	r1, [pc, #92]	@ (800f848 <SetVOCindicator+0x1ac>)
 800f7ec:	f7f3 f9ee 	bl	8002bcc <__aeabi_dsub>
 800f7f0:	0002      	movs	r2, r0
 800f7f2:	000b      	movs	r3, r1
 800f7f4:	0014      	movs	r4, r2
 800f7f6:	001d      	movs	r5, r3
 800f7f8:	4b14      	ldr	r3, [pc, #80]	@ (800f84c <SetVOCindicator+0x1b0>)
 800f7fa:	881b      	ldrh	r3, [r3, #0]
 800f7fc:	0018      	movs	r0, r3
 800f7fe:	f7f3 fddf 	bl	80033c0 <__aeabi_i2d>
 800f802:	0002      	movs	r2, r0
 800f804:	000b      	movs	r3, r1
 800f806:	0020      	movs	r0, r4
 800f808:	0029      	movs	r1, r5
 800f80a:	f7f2 ff17 	bl	800263c <__aeabi_dmul>
 800f80e:	0002      	movs	r2, r0
 800f810:	000b      	movs	r3, r1
 800f812:	0010      	movs	r0, r2
 800f814:	0019      	movs	r1, r3
 800f816:	f7f0 ff19 	bl	800064c <__aeabi_d2uiz>
 800f81a:	0003      	movs	r3, r0
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	4b0e      	ldr	r3, [pc, #56]	@ (800f858 <SetVOCindicator+0x1bc>)
 800f820:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800f822:	4b0a      	ldr	r3, [pc, #40]	@ (800f84c <SetVOCindicator+0x1b0>)
 800f824:	881a      	ldrh	r2, [r3, #0]
 800f826:	4b0b      	ldr	r3, [pc, #44]	@ (800f854 <SetVOCindicator+0x1b8>)
 800f828:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800f82a:	4b0b      	ldr	r3, [pc, #44]	@ (800f858 <SetVOCindicator+0x1bc>)
 800f82c:	8818      	ldrh	r0, [r3, #0]
 800f82e:	4b08      	ldr	r3, [pc, #32]	@ (800f850 <SetVOCindicator+0x1b4>)
 800f830:	8819      	ldrh	r1, [r3, #0]
 800f832:	4b08      	ldr	r3, [pc, #32]	@ (800f854 <SetVOCindicator+0x1b8>)
 800f834:	881b      	ldrh	r3, [r3, #0]
 800f836:	001a      	movs	r2, r3
 800f838:	f7ff fd96 	bl	800f368 <SetVocLED>
  }

}
 800f83c:	46c0      	nop			@ (mov r8, r8)
 800f83e:	46bd      	mov	sp, r7
 800f840:	b002      	add	sp, #8
 800f842:	bdb0      	pop	{r4, r5, r7, pc}
 800f844:	40590000 	.word	0x40590000
 800f848:	3ff00000 	.word	0x3ff00000
 800f84c:	200000da 	.word	0x200000da
 800f850:	20001dee 	.word	0x20001dee
 800f854:	20001df0 	.word	0x20001df0
 800f858:	20001df2 	.word	0x20001df2
 800f85c:	40790000 	.word	0x40790000

0800f860 <powerCheck>:

Battery_Status powerCheck(){
 800f860:	b590      	push	{r4, r7, lr}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800f866:	f7f7 fba5 	bl	8006fb4 <Check_USB_PowerOn>
 800f86a:	0003      	movs	r3, r0
 800f86c:	001a      	movs	r2, r3
 800f86e:	2301      	movs	r3, #1
 800f870:	4053      	eors	r3, r2
 800f872:	b2db      	uxtb	r3, r3
 800f874:	2b00      	cmp	r3, #0
 800f876:	d005      	beq.n	800f884 <powerCheck+0x24>
    status = batteryChargeCheck();
 800f878:	1dfc      	adds	r4, r7, #7
 800f87a:	f7ff fc55 	bl	800f128 <batteryChargeCheck>
 800f87e:	0003      	movs	r3, r0
 800f880:	7023      	strb	r3, [r4, #0]
 800f882:	e002      	b.n	800f88a <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800f884:	1dfb      	adds	r3, r7, #7
 800f886:	2204      	movs	r2, #4
 800f888:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800f88a:	1dfb      	adds	r3, r7, #7
 800f88c:	781b      	ldrb	r3, [r3, #0]
}
 800f88e:	0018      	movs	r0, r3
 800f890:	46bd      	mov	sp, r7
 800f892:	b003      	add	sp, #12
 800f894:	bd90      	pop	{r4, r7, pc}
	...

0800f898 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	0002      	movs	r2, r0
 800f8a0:	1dfb      	adds	r3, r7, #7
 800f8a2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800f8a4:	1dfb      	adds	r3, r7, #7
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2b04      	cmp	r3, #4
 800f8aa:	d105      	bne.n	800f8b8 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800f8ac:	4a18      	ldr	r2, [pc, #96]	@ (800f910 <powerDisplay+0x78>)
 800f8ae:	4b19      	ldr	r3, [pc, #100]	@ (800f914 <powerDisplay+0x7c>)
 800f8b0:	0019      	movs	r1, r3
 800f8b2:	2003      	movs	r0, #3
 800f8b4:	f000 ff42 	bl	801073c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800f8b8:	1dfb      	adds	r3, r7, #7
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b03      	cmp	r3, #3
 800f8be:	d105      	bne.n	800f8cc <powerDisplay+0x34>
    Debug("Battery fully charged");
 800f8c0:	4a15      	ldr	r2, [pc, #84]	@ (800f918 <powerDisplay+0x80>)
 800f8c2:	4b14      	ldr	r3, [pc, #80]	@ (800f914 <powerDisplay+0x7c>)
 800f8c4:	0019      	movs	r1, r3
 800f8c6:	2003      	movs	r0, #3
 800f8c8:	f000 ff38 	bl	801073c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800f8cc:	1dfb      	adds	r3, r7, #7
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	d105      	bne.n	800f8e0 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800f8d4:	4a11      	ldr	r2, [pc, #68]	@ (800f91c <powerDisplay+0x84>)
 800f8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800f914 <powerDisplay+0x7c>)
 800f8d8:	0019      	movs	r1, r3
 800f8da:	2003      	movs	r0, #3
 800f8dc:	f000 ff2e 	bl	801073c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800f8e0:	1dfb      	adds	r3, r7, #7
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d105      	bne.n	800f8f4 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800f8e8:	4a0d      	ldr	r2, [pc, #52]	@ (800f920 <powerDisplay+0x88>)
 800f8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800f914 <powerDisplay+0x7c>)
 800f8ec:	0019      	movs	r1, r3
 800f8ee:	2003      	movs	r0, #3
 800f8f0:	f000 ff24 	bl	801073c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800f8f4:	1dfb      	adds	r3, r7, #7
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d105      	bne.n	800f908 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800f8fc:	4a09      	ldr	r2, [pc, #36]	@ (800f924 <powerDisplay+0x8c>)
 800f8fe:	4b05      	ldr	r3, [pc, #20]	@ (800f914 <powerDisplay+0x7c>)
 800f900:	0019      	movs	r1, r3
 800f902:	2003      	movs	r0, #3
 800f904:	f000 ff1a 	bl	801073c <CreateLine>
  }
}
 800f908:	46c0      	nop			@ (mov r8, r8)
 800f90a:	46bd      	mov	sp, r7
 800f90c:	b002      	add	sp, #8
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	0802852c 	.word	0x0802852c
 800f914:	08028550 	.word	0x08028550
 800f918:	08028554 	.word	0x08028554
 800f91c:	0802856c 	.word	0x0802856c
 800f920:	0802858c 	.word	0x0802858c
 800f924:	080285a4 	.word	0x080285a4

0800f928 <configCheck>:

void configCheck(){
 800f928:	b590      	push	{r4, r7, lr}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800f92e:	f7f7 fb50 	bl	8006fd2 <BootButton_Pressed>
 800f932:	1e03      	subs	r3, r0, #0
 800f934:	d007      	beq.n	800f946 <configCheck+0x1e>
 800f936:	f7f7 fb5d 	bl	8006ff4 <UserButton_Pressed>
 800f93a:	1e03      	subs	r3, r0, #0
 800f93c:	d003      	beq.n	800f946 <configCheck+0x1e>
    configSet = true;
 800f93e:	4bb2      	ldr	r3, [pc, #712]	@ (800fc08 <configCheck+0x2e0>)
 800f940:	2201      	movs	r2, #1
 800f942:	701a      	strb	r2, [r3, #0]
 800f944:	e00a      	b.n	800f95c <configCheck+0x34>
  }
  else{
    configSet = false;
 800f946:	4bb0      	ldr	r3, [pc, #704]	@ (800fc08 <configCheck+0x2e0>)
 800f948:	2200      	movs	r2, #0
 800f94a:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800f94c:	f001 fb42 	bl	8010fd4 <HAL_GetTick>
 800f950:	0003      	movs	r3, r0
 800f952:	22fa      	movs	r2, #250	@ 0xfa
 800f954:	00d2      	lsls	r2, r2, #3
 800f956:	189a      	adds	r2, r3, r2
 800f958:	4bac      	ldr	r3, [pc, #688]	@ (800fc0c <configCheck+0x2e4>)
 800f95a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800f95c:	4baa      	ldr	r3, [pc, #680]	@ (800fc08 <configCheck+0x2e0>)
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00d      	beq.n	800f980 <configCheck+0x58>
 800f964:	4ba9      	ldr	r3, [pc, #676]	@ (800fc0c <configCheck+0x2e4>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	0018      	movs	r0, r3
 800f96a:	f000 fe91 	bl	8010690 <TimestampIsReached>
 800f96e:	1e03      	subs	r3, r0, #0
 800f970:	d006      	beq.n	800f980 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800f972:	f7f3 ffff 	bl	8003974 <SetConfigMode>
    SetDBLED(true, true, true);
 800f976:	2201      	movs	r2, #1
 800f978:	2101      	movs	r1, #1
 800f97a:	2001      	movs	r0, #1
 800f97c:	f7ff fcaa 	bl	800f2d4 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800f980:	f7f7 fb27 	bl	8006fd2 <BootButton_Pressed>
 800f984:	0003      	movs	r3, r0
 800f986:	001a      	movs	r2, r3
 800f988:	2301      	movs	r3, #1
 800f98a:	4053      	eors	r3, r2
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d054      	beq.n	800fa3c <configCheck+0x114>
 800f992:	f7f7 fb2f 	bl	8006ff4 <UserButton_Pressed>
 800f996:	1e03      	subs	r3, r0, #0
 800f998:	d050      	beq.n	800fa3c <configCheck+0x114>
 800f99a:	4b9d      	ldr	r3, [pc, #628]	@ (800fc10 <configCheck+0x2e8>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	4053      	eors	r3, r2
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d049      	beq.n	800fa3c <configCheck+0x114>
 800f9a8:	f7f4 f804 	bl	80039b4 <GetReconfigMode>
 800f9ac:	0003      	movs	r3, r0
 800f9ae:	001a      	movs	r2, r3
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	4053      	eors	r3, r2
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d040      	beq.n	800fa3c <configCheck+0x114>
    SetLEDsOff();
 800f9ba:	f7ff fe15 	bl	800f5e8 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800f9be:	4a95      	ldr	r2, [pc, #596]	@ (800fc14 <configCheck+0x2ec>)
 800f9c0:	4994      	ldr	r1, [pc, #592]	@ (800fc14 <configCheck+0x2ec>)
 800f9c2:	4b94      	ldr	r3, [pc, #592]	@ (800fc14 <configCheck+0x2ec>)
 800f9c4:	0018      	movs	r0, r3
 800f9c6:	f7ff fccf 	bl	800f368 <SetVocLED>
    HAL_Delay(1500);
 800f9ca:	4b93      	ldr	r3, [pc, #588]	@ (800fc18 <configCheck+0x2f0>)
 800f9cc:	0018      	movs	r0, r3
 800f9ce:	f001 fb0b 	bl	8010fe8 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800f9d2:	23fa      	movs	r3, #250	@ 0xfa
 800f9d4:	011a      	lsls	r2, r3, #4
 800f9d6:	23fa      	movs	r3, #250	@ 0xfa
 800f9d8:	0119      	lsls	r1, r3, #4
 800f9da:	23fa      	movs	r3, #250	@ 0xfa
 800f9dc:	011b      	lsls	r3, r3, #4
 800f9de:	0018      	movs	r0, r3
 800f9e0:	f7ff fcc2 	bl	800f368 <SetVocLED>
    userToggle = !userToggle;
 800f9e4:	4b8d      	ldr	r3, [pc, #564]	@ (800fc1c <configCheck+0x2f4>)
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	1e5a      	subs	r2, r3, #1
 800f9ea:	4193      	sbcs	r3, r2
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	4053      	eors	r3, r2
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	1c1a      	adds	r2, r3, #0
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	4013      	ands	r3, r2
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	4b87      	ldr	r3, [pc, #540]	@ (800fc1c <configCheck+0x2f4>)
 800f9fe:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800fa00:	4b86      	ldr	r3, [pc, #536]	@ (800fc1c <configCheck+0x2f4>)
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d001      	beq.n	800fa0c <configCheck+0xe4>
      EnabledConnectedDevices();
 800fa08:	f7fa ffa4 	bl	800a954 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800fa0c:	4b83      	ldr	r3, [pc, #524]	@ (800fc1c <configCheck+0x2f4>)
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <configCheck+0xf0>
 800fa14:	4b82      	ldr	r3, [pc, #520]	@ (800fc20 <configCheck+0x2f8>)
 800fa16:	e000      	b.n	800fa1a <configCheck+0xf2>
 800fa18:	4b82      	ldr	r3, [pc, #520]	@ (800fc24 <configCheck+0x2fc>)
 800fa1a:	4a83      	ldr	r2, [pc, #524]	@ (800fc28 <configCheck+0x300>)
 800fa1c:	4983      	ldr	r1, [pc, #524]	@ (800fc2c <configCheck+0x304>)
 800fa1e:	2003      	movs	r0, #3
 800fa20:	f000 fe8c 	bl	801073c <CreateLine>
    userbuttonHeld = true;
 800fa24:	4b7a      	ldr	r3, [pc, #488]	@ (800fc10 <configCheck+0x2e8>)
 800fa26:	2201      	movs	r2, #1
 800fa28:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800fa2a:	f001 fad3 	bl	8010fd4 <HAL_GetTick>
 800fa2e:	0003      	movs	r3, r0
 800fa30:	22fa      	movs	r2, #250	@ 0xfa
 800fa32:	00d2      	lsls	r2, r2, #3
 800fa34:	189a      	adds	r2, r3, r2
 800fa36:	4b7e      	ldr	r3, [pc, #504]	@ (800fc30 <configCheck+0x308>)
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	e002      	b.n	800fa42 <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800fa3c:	4b74      	ldr	r3, [pc, #464]	@ (800fc10 <configCheck+0x2e8>)
 800fa3e:	2200      	movs	r2, #0
 800fa40:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800fa42:	f7f7 fac6 	bl	8006fd2 <BootButton_Pressed>
 800fa46:	0003      	movs	r3, r0
 800fa48:	001a      	movs	r2, r3
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	4053      	eors	r3, r2
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d100      	bne.n	800fa56 <configCheck+0x12e>
 800fa54:	e0a4      	b.n	800fba0 <configCheck+0x278>
 800fa56:	4b6e      	ldr	r3, [pc, #440]	@ (800fc10 <configCheck+0x2e8>)
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d100      	bne.n	800fa60 <configCheck+0x138>
 800fa5e:	e09f      	b.n	800fba0 <configCheck+0x278>
 800fa60:	4b73      	ldr	r3, [pc, #460]	@ (800fc30 <configCheck+0x308>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	0018      	movs	r0, r3
 800fa66:	f000 fe13 	bl	8010690 <TimestampIsReached>
 800fa6a:	1e03      	subs	r3, r0, #0
 800fa6c:	d100      	bne.n	800fa70 <configCheck+0x148>
 800fa6e:	e097      	b.n	800fba0 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fa70:	f7fa fc44 	bl	800a2fc <GetPMSensorPresence>
 800fa74:	1e03      	subs	r3, r0, #0
 800fa76:	d100      	bne.n	800fa7a <configCheck+0x152>
 800fa78:	e082      	b.n	800fb80 <configCheck+0x258>
 800fa7a:	4b6e      	ldr	r3, [pc, #440]	@ (800fc34 <configCheck+0x30c>)
 800fa7c:	791b      	ldrb	r3, [r3, #4]
 800fa7e:	2b34      	cmp	r3, #52	@ 0x34
 800fa80:	d004      	beq.n	800fa8c <configCheck+0x164>
 800fa82:	4b6c      	ldr	r3, [pc, #432]	@ (800fc34 <configCheck+0x30c>)
 800fa84:	791b      	ldrb	r3, [r3, #4]
 800fa86:	2b35      	cmp	r3, #53	@ 0x35
 800fa88:	d000      	beq.n	800fa8c <configCheck+0x164>
 800fa8a:	e079      	b.n	800fb80 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800fa8c:	4b6a      	ldr	r3, [pc, #424]	@ (800fc38 <configCheck+0x310>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	1e5a      	subs	r2, r3, #1
 800fa92:	4193      	sbcs	r3, r2
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	2201      	movs	r2, #1
 800fa98:	4053      	eors	r3, r2
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	1c1a      	adds	r2, r3, #0
 800fa9e:	2301      	movs	r3, #1
 800faa0:	4013      	ands	r3, r2
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	4b64      	ldr	r3, [pc, #400]	@ (800fc38 <configCheck+0x310>)
 800faa6:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800faa8:	4b63      	ldr	r3, [pc, #396]	@ (800fc38 <configCheck+0x310>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d005      	beq.n	800fabc <configCheck+0x194>
 800fab0:	1dbc      	adds	r4, r7, #6
 800fab2:	f7ff fb93 	bl	800f1dc <Calculate_LED_ON>
 800fab6:	0003      	movs	r3, r0
 800fab8:	8023      	strh	r3, [r4, #0]
 800faba:	e003      	b.n	800fac4 <configCheck+0x19c>
        else color = 4000;
 800fabc:	1dbb      	adds	r3, r7, #6
 800fabe:	22fa      	movs	r2, #250	@ 0xfa
 800fac0:	0112      	lsls	r2, r2, #4
 800fac2:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800fac4:	4b5c      	ldr	r3, [pc, #368]	@ (800fc38 <configCheck+0x310>)
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <configCheck+0x1a8>
 800facc:	4b5b      	ldr	r3, [pc, #364]	@ (800fc3c <configCheck+0x314>)
 800face:	e000      	b.n	800fad2 <configCheck+0x1aa>
 800fad0:	4b5b      	ldr	r3, [pc, #364]	@ (800fc40 <configCheck+0x318>)
 800fad2:	4a5c      	ldr	r2, [pc, #368]	@ (800fc44 <configCheck+0x31c>)
 800fad4:	495c      	ldr	r1, [pc, #368]	@ (800fc48 <configCheck+0x320>)
 800fad6:	2002      	movs	r0, #2
 800fad8:	f000 fe30 	bl	801073c <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800fadc:	1d7b      	adds	r3, r7, #5
 800fade:	2200      	movs	r2, #0
 800fae0:	701a      	strb	r2, [r3, #0]
 800fae2:	e028      	b.n	800fb36 <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800fae4:	f7ff fb7a 	bl	800f1dc <Calculate_LED_ON>
 800fae8:	0003      	movs	r3, r0
 800faea:	001a      	movs	r2, r3
 800faec:	4b57      	ldr	r3, [pc, #348]	@ (800fc4c <configCheck+0x324>)
 800faee:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800faf0:	4b56      	ldr	r3, [pc, #344]	@ (800fc4c <configCheck+0x324>)
 800faf2:	1dba      	adds	r2, r7, #6
 800faf4:	8812      	ldrh	r2, [r2, #0]
 800faf6:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800faf8:	4b54      	ldr	r3, [pc, #336]	@ (800fc4c <configCheck+0x324>)
 800fafa:	1dba      	adds	r2, r7, #6
 800fafc:	8812      	ldrh	r2, [r2, #0]
 800fafe:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800fb00:	23c8      	movs	r3, #200	@ 0xc8
 800fb02:	005b      	lsls	r3, r3, #1
 800fb04:	0018      	movs	r0, r3
 800fb06:	f001 fa6f 	bl	8010fe8 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800fb0a:	4b50      	ldr	r3, [pc, #320]	@ (800fc4c <configCheck+0x324>)
 800fb0c:	22fa      	movs	r2, #250	@ 0xfa
 800fb0e:	0112      	lsls	r2, r2, #4
 800fb10:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800fb12:	4b4e      	ldr	r3, [pc, #312]	@ (800fc4c <configCheck+0x324>)
 800fb14:	22fa      	movs	r2, #250	@ 0xfa
 800fb16:	0112      	lsls	r2, r2, #4
 800fb18:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800fb1a:	4b4c      	ldr	r3, [pc, #304]	@ (800fc4c <configCheck+0x324>)
 800fb1c:	22fa      	movs	r2, #250	@ 0xfa
 800fb1e:	0112      	lsls	r2, r2, #4
 800fb20:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800fb22:	23c8      	movs	r3, #200	@ 0xc8
 800fb24:	005b      	lsls	r3, r3, #1
 800fb26:	0018      	movs	r0, r3
 800fb28:	f001 fa5e 	bl	8010fe8 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800fb2c:	1d7b      	adds	r3, r7, #5
 800fb2e:	781a      	ldrb	r2, [r3, #0]
 800fb30:	1d7b      	adds	r3, r7, #5
 800fb32:	3201      	adds	r2, #1
 800fb34:	701a      	strb	r2, [r3, #0]
 800fb36:	1d7b      	adds	r3, r7, #5
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d9d2      	bls.n	800fae4 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800fb3e:	4b37      	ldr	r3, [pc, #220]	@ (800fc1c <configCheck+0x2f4>)
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	1e5a      	subs	r2, r3, #1
 800fb44:	4193      	sbcs	r3, r2
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	2201      	movs	r2, #1
 800fb4a:	4053      	eors	r3, r2
 800fb4c:	b2db      	uxtb	r3, r3
 800fb4e:	1c1a      	adds	r2, r3, #0
 800fb50:	2301      	movs	r3, #1
 800fb52:	4013      	ands	r3, r2
 800fb54:	b2da      	uxtb	r2, r3
 800fb56:	4b31      	ldr	r3, [pc, #196]	@ (800fc1c <configCheck+0x2f4>)
 800fb58:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800fb5a:	4b30      	ldr	r3, [pc, #192]	@ (800fc1c <configCheck+0x2f4>)
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <configCheck+0x23e>
 800fb62:	4b36      	ldr	r3, [pc, #216]	@ (800fc3c <configCheck+0x314>)
 800fb64:	e000      	b.n	800fb68 <configCheck+0x240>
 800fb66:	4b36      	ldr	r3, [pc, #216]	@ (800fc40 <configCheck+0x318>)
 800fb68:	4a39      	ldr	r2, [pc, #228]	@ (800fc50 <configCheck+0x328>)
 800fb6a:	4937      	ldr	r1, [pc, #220]	@ (800fc48 <configCheck+0x320>)
 800fb6c:	2002      	movs	r0, #2
 800fb6e:	f000 fde5 	bl	801073c <CreateLine>
      if (usbPluggedIn) {
 800fb72:	4b38      	ldr	r3, [pc, #224]	@ (800fc54 <configCheck+0x32c>)
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d009      	beq.n	800fb8e <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800fb7a:	f7fc f84b 	bl	800bc14 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fb7e:	e006      	b.n	800fb8e <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800fb80:	4a35      	ldr	r2, [pc, #212]	@ (800fc58 <configCheck+0x330>)
 800fb82:	4b31      	ldr	r3, [pc, #196]	@ (800fc48 <configCheck+0x320>)
 800fb84:	0019      	movs	r1, r3
 800fb86:	2002      	movs	r0, #2
 800fb88:	f000 fdd8 	bl	801073c <CreateLine>
 800fb8c:	e000      	b.n	800fb90 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fb8e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800fb90:	46c0      	nop			@ (mov r8, r8)
 800fb92:	f7f7 fa2f 	bl	8006ff4 <UserButton_Pressed>
 800fb96:	1e03      	subs	r3, r0, #0
 800fb98:	d1fb      	bne.n	800fb92 <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800fb9a:	4b1d      	ldr	r3, [pc, #116]	@ (800fc10 <configCheck+0x2e8>)
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800fba0:	f7f7 fa17 	bl	8006fd2 <BootButton_Pressed>
 800fba4:	0003      	movs	r3, r0
 800fba6:	001a      	movs	r2, r3
 800fba8:	2301      	movs	r3, #1
 800fbaa:	4053      	eors	r3, r2
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00b      	beq.n	800fbca <configCheck+0x2a2>
 800fbb2:	f7f7 fa1f 	bl	8006ff4 <UserButton_Pressed>
 800fbb6:	0003      	movs	r3, r0
 800fbb8:	001a      	movs	r2, r3
 800fbba:	2301      	movs	r3, #1
 800fbbc:	4053      	eors	r3, r2
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d002      	beq.n	800fbca <configCheck+0x2a2>
    userbuttonHeld = false;
 800fbc4:	4b12      	ldr	r3, [pc, #72]	@ (800fc10 <configCheck+0x2e8>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800fbca:	f7f7 f9f3 	bl	8006fb4 <Check_USB_PowerOn>
 800fbce:	1e03      	subs	r3, r0, #0
 800fbd0:	d003      	beq.n	800fbda <configCheck+0x2b2>
    usbPluggedIn = true;
 800fbd2:	4b20      	ldr	r3, [pc, #128]	@ (800fc54 <configCheck+0x32c>)
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800fbd8:	e012      	b.n	800fc00 <configCheck+0x2d8>
    if(!userToggle && !init){
 800fbda:	4b10      	ldr	r3, [pc, #64]	@ (800fc1c <configCheck+0x2f4>)
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	4053      	eors	r3, r2
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d008      	beq.n	800fbfa <configCheck+0x2d2>
 800fbe8:	4b1c      	ldr	r3, [pc, #112]	@ (800fc5c <configCheck+0x334>)
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2201      	movs	r2, #1
 800fbee:	4053      	eors	r3, r2
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d001      	beq.n	800fbfa <configCheck+0x2d2>
      SetLEDsOff();
 800fbf6:	f7ff fcf7 	bl	800f5e8 <SetLEDsOff>
    usbPluggedIn = false;
 800fbfa:	4b16      	ldr	r3, [pc, #88]	@ (800fc54 <configCheck+0x32c>)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	701a      	strb	r2, [r3, #0]
}
 800fc00:	46c0      	nop			@ (mov r8, r8)
 800fc02:	46bd      	mov	sp, r7
 800fc04:	b003      	add	sp, #12
 800fc06:	bd90      	pop	{r4, r7, pc}
 800fc08:	20001dd8 	.word	0x20001dd8
 800fc0c:	20001de0 	.word	0x20001de0
 800fc10:	20001ddb 	.word	0x20001ddb
 800fc14:	00000bb8 	.word	0x00000bb8
 800fc18:	000005dc 	.word	0x000005dc
 800fc1c:	20001dda 	.word	0x20001dda
 800fc20:	080285c8 	.word	0x080285c8
 800fc24:	080285cc 	.word	0x080285cc
 800fc28:	080285d0 	.word	0x080285d0
 800fc2c:	08028550 	.word	0x08028550
 800fc30:	20001de4 	.word	0x20001de4
 800fc34:	20000e4c 	.word	0x20000e4c
 800fc38:	20000e4a 	.word	0x20000e4a
 800fc3c:	080285f0 	.word	0x080285f0
 800fc40:	080285f8 	.word	0x080285f8
 800fc44:	08028604 	.word	0x08028604
 800fc48:	08028624 	.word	0x08028624
 800fc4c:	40000400 	.word	0x40000400
 800fc50:	08028628 	.word	0x08028628
 800fc54:	20001dd9 	.word	0x20001dd9
 800fc58:	08028640 	.word	0x08028640
 800fc5c:	200000d8 	.word	0x200000d8

0800fc60 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800fc60:	b590      	push	{r4, r7, lr}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800fc66:	1dfc      	adds	r4, r7, #7
 800fc68:	f7ff fdfa 	bl	800f860 <powerCheck>
 800fc6c:	0003      	movs	r3, r0
 800fc6e:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800fc70:	1dfb      	adds	r3, r7, #7
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	0018      	movs	r0, r3
 800fc76:	f7ff fe0f 	bl	800f898 <powerDisplay>
  return status;
 800fc7a:	1dfb      	adds	r3, r7, #7
 800fc7c:	781b      	ldrb	r3, [r3, #0]
}
 800fc7e:	0018      	movs	r0, r3
 800fc80:	46bd      	mov	sp, r7
 800fc82:	b003      	add	sp, #12
 800fc84:	bd90      	pop	{r4, r7, pc}
	...

0800fc88 <setuserToggle>:

void setuserToggle(void) {
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800fc8c:	f7ff fde8 	bl	800f860 <powerCheck>
 800fc90:	0003      	movs	r3, r0
 800fc92:	2b04      	cmp	r3, #4
 800fc94:	d004      	beq.n	800fca0 <setuserToggle+0x18>
    userToggle = true;
 800fc96:	4b04      	ldr	r3, [pc, #16]	@ (800fca8 <setuserToggle+0x20>)
 800fc98:	2201      	movs	r2, #1
 800fc9a:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800fc9c:	f7fa fe5a 	bl	800a954 <EnabledConnectedDevices>
  }
}
 800fca0:	46c0      	nop			@ (mov r8, r8)
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	46c0      	nop			@ (mov r8, r8)
 800fca8:	20001dda 	.word	0x20001dda

0800fcac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fcb0:	4b07      	ldr	r3, [pc, #28]	@ (800fcd0 <HAL_MspInit+0x24>)
 800fcb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fcb4:	4b06      	ldr	r3, [pc, #24]	@ (800fcd0 <HAL_MspInit+0x24>)
 800fcb6:	2101      	movs	r1, #1
 800fcb8:	430a      	orrs	r2, r1
 800fcba:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800fcbc:	4b04      	ldr	r3, [pc, #16]	@ (800fcd0 <HAL_MspInit+0x24>)
 800fcbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcc0:	4b03      	ldr	r3, [pc, #12]	@ (800fcd0 <HAL_MspInit+0x24>)
 800fcc2:	2180      	movs	r1, #128	@ 0x80
 800fcc4:	0549      	lsls	r1, r1, #21
 800fcc6:	430a      	orrs	r2, r1
 800fcc8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fcca:	46c0      	nop			@ (mov r8, r8)
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	40021000 	.word	0x40021000

0800fcd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800fcd8:	46c0      	nop			@ (mov r8, r8)
 800fcda:	e7fd      	b.n	800fcd8 <NMI_Handler+0x4>

0800fcdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fce0:	46c0      	nop			@ (mov r8, r8)
 800fce2:	e7fd      	b.n	800fce0 <HardFault_Handler+0x4>

0800fce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800fce8:	46c0      	nop			@ (mov r8, r8)
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800fcf2:	46c0      	nop			@ (mov r8, r8)
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fcfc:	f001 f958 	bl	8010fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800fd00:	46c0      	nop			@ (mov r8, r8)
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
	...

0800fd08 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800fd0c:	4b03      	ldr	r3, [pc, #12]	@ (800fd1c <RTC_IRQHandler+0x14>)
 800fd0e:	0018      	movs	r0, r3
 800fd10:	f009 f916 	bl	8018f40 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800fd14:	46c0      	nop			@ (mov r8, r8)
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	46c0      	nop			@ (mov r8, r8)
 800fd1c:	20000e24 	.word	0x20000e24

0800fd20 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800fd24:	2380      	movs	r3, #128	@ 0x80
 800fd26:	021b      	lsls	r3, r3, #8
 800fd28:	0018      	movs	r0, r3
 800fd2a:	f002 fc01 	bl	8012530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800fd2e:	46c0      	nop			@ (mov r8, r8)
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800fd38:	4b05      	ldr	r3, [pc, #20]	@ (800fd50 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800fd3a:	0018      	movs	r0, r3
 800fd3c:	f001 ff89 	bl	8011c52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800fd40:	4b04      	ldr	r3, [pc, #16]	@ (800fd54 <DMA1_Channel2_3_IRQHandler+0x20>)
 800fd42:	0018      	movs	r0, r3
 800fd44:	f001 ff85 	bl	8011c52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800fd48:	46c0      	nop			@ (mov r8, r8)
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	46c0      	nop			@ (mov r8, r8)
 800fd50:	20000cbc 	.word	0x20000cbc
 800fd54:	20000c74 	.word	0x20000c74

0800fd58 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800fd5c:	4b07      	ldr	r3, [pc, #28]	@ (800fd7c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800fd5e:	0018      	movs	r0, r3
 800fd60:	f001 ff77 	bl	8011c52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800fd64:	4b06      	ldr	r3, [pc, #24]	@ (800fd80 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800fd66:	0018      	movs	r0, r3
 800fd68:	f001 ff73 	bl	8011c52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800fd6c:	4b05      	ldr	r3, [pc, #20]	@ (800fd84 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800fd6e:	0018      	movs	r0, r3
 800fd70:	f001 ff6f 	bl	8011c52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800fd74:	46c0      	nop			@ (mov r8, r8)
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	46c0      	nop			@ (mov r8, r8)
 800fd7c:	20000d40 	.word	0x20000d40
 800fd80:	200020e0 	.word	0x200020e0
 800fd84:	20002128 	.word	0x20002128

0800fd88 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800fd8c:	4b03      	ldr	r3, [pc, #12]	@ (800fd9c <USART4_5_IRQHandler+0x14>)
 800fd8e:	0018      	movs	r0, r3
 800fd90:	f009 ffd0 	bl	8019d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800fd94:	46c0      	nop			@ (mov r8, r8)
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	46c0      	nop			@ (mov r8, r8)
 800fd9c:	20002028 	.word	0x20002028

0800fda0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800fda4:	4b09      	ldr	r3, [pc, #36]	@ (800fdcc <I2C1_IRQHandler+0x2c>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	699a      	ldr	r2, [r3, #24]
 800fdaa:	23e0      	movs	r3, #224	@ 0xe0
 800fdac:	00db      	lsls	r3, r3, #3
 800fdae:	4013      	ands	r3, r2
 800fdb0:	d004      	beq.n	800fdbc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800fdb2:	4b06      	ldr	r3, [pc, #24]	@ (800fdcc <I2C1_IRQHandler+0x2c>)
 800fdb4:	0018      	movs	r0, r3
 800fdb6:	f003 fad9 	bl	801336c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800fdba:	e003      	b.n	800fdc4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800fdbc:	4b03      	ldr	r3, [pc, #12]	@ (800fdcc <I2C1_IRQHandler+0x2c>)
 800fdbe:	0018      	movs	r0, r3
 800fdc0:	f003 faba 	bl	8013338 <HAL_I2C_EV_IRQHandler>
}
 800fdc4:	46c0      	nop			@ (mov r8, r8)
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	46c0      	nop			@ (mov r8, r8)
 800fdcc:	20000bcc 	.word	0x20000bcc

0800fdd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800fdd4:	4b03      	ldr	r3, [pc, #12]	@ (800fde4 <USART1_IRQHandler+0x14>)
 800fdd6:	0018      	movs	r0, r3
 800fdd8:	f009 ffac 	bl	8019d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800fddc:	46c0      	nop			@ (mov r8, r8)
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	46c0      	nop			@ (mov r8, r8)
 800fde4:	20001f70 	.word	0x20001f70

0800fde8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800fdec:	4b03      	ldr	r3, [pc, #12]	@ (800fdfc <USB_IRQHandler+0x14>)
 800fdee:	0018      	movs	r0, r3
 800fdf0:	f005 fefc 	bl	8015bec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800fdf4:	46c0      	nop			@ (mov r8, r8)
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	46c0      	nop			@ (mov r8, r8)
 800fdfc:	20002f3c 	.word	0x20002f3c

0800fe00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
  return 1;
 800fe04:	2301      	movs	r3, #1
}
 800fe06:	0018      	movs	r0, r3
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <_kill>:

int _kill(int pid, int sig)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800fe16:	f012 fe93 	bl	8022b40 <__errno>
 800fe1a:	0003      	movs	r3, r0
 800fe1c:	2216      	movs	r2, #22
 800fe1e:	601a      	str	r2, [r3, #0]
  return -1;
 800fe20:	2301      	movs	r3, #1
 800fe22:	425b      	negs	r3, r3
}
 800fe24:	0018      	movs	r0, r3
 800fe26:	46bd      	mov	sp, r7
 800fe28:	b002      	add	sp, #8
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <_exit>:

void _exit (int status)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800fe34:	2301      	movs	r3, #1
 800fe36:	425a      	negs	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	0011      	movs	r1, r2
 800fe3c:	0018      	movs	r0, r3
 800fe3e:	f7ff ffe5 	bl	800fe0c <_kill>
  while (1) {}    /* Make sure we hang here */
 800fe42:	46c0      	nop			@ (mov r8, r8)
 800fe44:	e7fd      	b.n	800fe42 <_exit+0x16>

0800fe46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b086      	sub	sp, #24
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	60f8      	str	r0, [r7, #12]
 800fe4e:	60b9      	str	r1, [r7, #8]
 800fe50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fe52:	2300      	movs	r3, #0
 800fe54:	617b      	str	r3, [r7, #20]
 800fe56:	e00a      	b.n	800fe6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800fe58:	e000      	b.n	800fe5c <_read+0x16>
 800fe5a:	bf00      	nop
 800fe5c:	0001      	movs	r1, r0
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	1c5a      	adds	r2, r3, #1
 800fe62:	60ba      	str	r2, [r7, #8]
 800fe64:	b2ca      	uxtb	r2, r1
 800fe66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	697a      	ldr	r2, [r7, #20]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	dbf0      	blt.n	800fe58 <_read+0x12>
  }

  return len;
 800fe76:	687b      	ldr	r3, [r7, #4]
}
 800fe78:	0018      	movs	r0, r3
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	b006      	add	sp, #24
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <_close>:
  }
  return len;
}

int _close(int file)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	425b      	negs	r3, r3
}
 800fe8c:	0018      	movs	r0, r3
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	b002      	add	sp, #8
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	2280      	movs	r2, #128	@ 0x80
 800fea2:	0192      	lsls	r2, r2, #6
 800fea4:	605a      	str	r2, [r3, #4]
  return 0;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	0018      	movs	r0, r3
 800feaa:	46bd      	mov	sp, r7
 800feac:	b002      	add	sp, #8
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <_isatty>:

int _isatty(int file)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800feb8:	2301      	movs	r3, #1
}
 800feba:	0018      	movs	r0, r3
 800febc:	46bd      	mov	sp, r7
 800febe:	b002      	add	sp, #8
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b084      	sub	sp, #16
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	60f8      	str	r0, [r7, #12]
 800feca:	60b9      	str	r1, [r7, #8]
 800fecc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800fece:	2300      	movs	r3, #0
}
 800fed0:	0018      	movs	r0, r3
 800fed2:	46bd      	mov	sp, r7
 800fed4:	b004      	add	sp, #16
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800fee0:	4a14      	ldr	r2, [pc, #80]	@ (800ff34 <_sbrk+0x5c>)
 800fee2:	4b15      	ldr	r3, [pc, #84]	@ (800ff38 <_sbrk+0x60>)
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800feec:	4b13      	ldr	r3, [pc, #76]	@ (800ff3c <_sbrk+0x64>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d102      	bne.n	800fefa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800fef4:	4b11      	ldr	r3, [pc, #68]	@ (800ff3c <_sbrk+0x64>)
 800fef6:	4a12      	ldr	r2, [pc, #72]	@ (800ff40 <_sbrk+0x68>)
 800fef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800fefa:	4b10      	ldr	r3, [pc, #64]	@ (800ff3c <_sbrk+0x64>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	18d3      	adds	r3, r2, r3
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d207      	bcs.n	800ff18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ff08:	f012 fe1a 	bl	8022b40 <__errno>
 800ff0c:	0003      	movs	r3, r0
 800ff0e:	220c      	movs	r2, #12
 800ff10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ff12:	2301      	movs	r3, #1
 800ff14:	425b      	negs	r3, r3
 800ff16:	e009      	b.n	800ff2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ff18:	4b08      	ldr	r3, [pc, #32]	@ (800ff3c <_sbrk+0x64>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ff1e:	4b07      	ldr	r3, [pc, #28]	@ (800ff3c <_sbrk+0x64>)
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	18d2      	adds	r2, r2, r3
 800ff26:	4b05      	ldr	r3, [pc, #20]	@ (800ff3c <_sbrk+0x64>)
 800ff28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
}
 800ff2c:	0018      	movs	r0, r3
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	b006      	add	sp, #24
 800ff32:	bd80      	pop	{r7, pc}
 800ff34:	20005000 	.word	0x20005000
 800ff38:	00000400 	.word	0x00000400
 800ff3c:	20001df4 	.word	0x20001df4
 800ff40:	200035a0 	.word	0x200035a0

0800ff44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ff48:	46c0      	nop			@ (mov r8, r8)
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
	...

0800ff50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ff56:	2310      	movs	r3, #16
 800ff58:	18fb      	adds	r3, r7, r3
 800ff5a:	0018      	movs	r0, r3
 800ff5c:	2308      	movs	r3, #8
 800ff5e:	001a      	movs	r2, r3
 800ff60:	2100      	movs	r1, #0
 800ff62:	f012 fd49 	bl	80229f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ff66:	003b      	movs	r3, r7
 800ff68:	0018      	movs	r0, r3
 800ff6a:	2310      	movs	r3, #16
 800ff6c:	001a      	movs	r2, r3
 800ff6e:	2100      	movs	r1, #0
 800ff70:	f012 fd42 	bl	80229f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ff74:	4b2e      	ldr	r3, [pc, #184]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ff76:	2280      	movs	r2, #128	@ 0x80
 800ff78:	05d2      	lsls	r2, r2, #23
 800ff7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ff7c:	4b2c      	ldr	r3, [pc, #176]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ff82:	4b2b      	ldr	r3, [pc, #172]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800ff88:	4b29      	ldr	r3, [pc, #164]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ff8a:	4a2a      	ldr	r2, [pc, #168]	@ (8010034 <MX_TIM2_Init+0xe4>)
 800ff8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff8e:	4b28      	ldr	r3, [pc, #160]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ff94:	4b26      	ldr	r3, [pc, #152]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ff96:	2200      	movs	r2, #0
 800ff98:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800ff9a:	4b25      	ldr	r3, [pc, #148]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ff9c:	0018      	movs	r0, r3
 800ff9e:	f009 f8dd 	bl	801915c <HAL_TIM_PWM_Init>
 800ffa2:	1e03      	subs	r3, r0, #0
 800ffa4:	d001      	beq.n	800ffaa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800ffa6:	f7fa f963 	bl	800a270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ffaa:	2110      	movs	r1, #16
 800ffac:	187b      	adds	r3, r7, r1
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ffb2:	187b      	adds	r3, r7, r1
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ffb8:	187a      	adds	r2, r7, r1
 800ffba:	4b1d      	ldr	r3, [pc, #116]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ffbc:	0011      	movs	r1, r2
 800ffbe:	0018      	movs	r0, r3
 800ffc0:	f009 fbea 	bl	8019798 <HAL_TIMEx_MasterConfigSynchronization>
 800ffc4:	1e03      	subs	r3, r0, #0
 800ffc6:	d001      	beq.n	800ffcc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800ffc8:	f7fa f952 	bl	800a270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ffcc:	003b      	movs	r3, r7
 800ffce:	2260      	movs	r2, #96	@ 0x60
 800ffd0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800ffd2:	003b      	movs	r3, r7
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ffd8:	003b      	movs	r3, r7
 800ffda:	2200      	movs	r2, #0
 800ffdc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ffde:	003b      	movs	r3, r7
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ffe4:	0039      	movs	r1, r7
 800ffe6:	4b12      	ldr	r3, [pc, #72]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800ffe8:	2200      	movs	r2, #0
 800ffea:	0018      	movs	r0, r3
 800ffec:	f009 f988 	bl	8019300 <HAL_TIM_PWM_ConfigChannel>
 800fff0:	1e03      	subs	r3, r0, #0
 800fff2:	d001      	beq.n	800fff8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800fff4:	f7fa f93c 	bl	800a270 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fff8:	0039      	movs	r1, r7
 800fffa:	4b0d      	ldr	r3, [pc, #52]	@ (8010030 <MX_TIM2_Init+0xe0>)
 800fffc:	2208      	movs	r2, #8
 800fffe:	0018      	movs	r0, r3
 8010000:	f009 f97e 	bl	8019300 <HAL_TIM_PWM_ConfigChannel>
 8010004:	1e03      	subs	r3, r0, #0
 8010006:	d001      	beq.n	801000c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8010008:	f7fa f932 	bl	800a270 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801000c:	0039      	movs	r1, r7
 801000e:	4b08      	ldr	r3, [pc, #32]	@ (8010030 <MX_TIM2_Init+0xe0>)
 8010010:	220c      	movs	r2, #12
 8010012:	0018      	movs	r0, r3
 8010014:	f009 f974 	bl	8019300 <HAL_TIM_PWM_ConfigChannel>
 8010018:	1e03      	subs	r3, r0, #0
 801001a:	d001      	beq.n	8010020 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 801001c:	f7fa f928 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8010020:	4b03      	ldr	r3, [pc, #12]	@ (8010030 <MX_TIM2_Init+0xe0>)
 8010022:	0018      	movs	r0, r3
 8010024:	f000 f8fe 	bl	8010224 <HAL_TIM_MspPostInit>

}
 8010028:	46c0      	nop			@ (mov r8, r8)
 801002a:	46bd      	mov	sp, r7
 801002c:	b006      	add	sp, #24
 801002e:	bd80      	pop	{r7, pc}
 8010030:	20001df8 	.word	0x20001df8
 8010034:	0000ffff 	.word	0x0000ffff

08010038 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801003e:	2310      	movs	r3, #16
 8010040:	18fb      	adds	r3, r7, r3
 8010042:	0018      	movs	r0, r3
 8010044:	2308      	movs	r3, #8
 8010046:	001a      	movs	r2, r3
 8010048:	2100      	movs	r1, #0
 801004a:	f012 fcd5 	bl	80229f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801004e:	003b      	movs	r3, r7
 8010050:	0018      	movs	r0, r3
 8010052:	2310      	movs	r3, #16
 8010054:	001a      	movs	r2, r3
 8010056:	2100      	movs	r1, #0
 8010058:	f012 fcce 	bl	80229f8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801005c:	4b32      	ldr	r3, [pc, #200]	@ (8010128 <MX_TIM3_Init+0xf0>)
 801005e:	4a33      	ldr	r2, [pc, #204]	@ (801012c <MX_TIM3_Init+0xf4>)
 8010060:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8010062:	4b31      	ldr	r3, [pc, #196]	@ (8010128 <MX_TIM3_Init+0xf0>)
 8010064:	2200      	movs	r2, #0
 8010066:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010068:	4b2f      	ldr	r3, [pc, #188]	@ (8010128 <MX_TIM3_Init+0xf0>)
 801006a:	2200      	movs	r2, #0
 801006c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 801006e:	4b2e      	ldr	r3, [pc, #184]	@ (8010128 <MX_TIM3_Init+0xf0>)
 8010070:	4a2f      	ldr	r2, [pc, #188]	@ (8010130 <MX_TIM3_Init+0xf8>)
 8010072:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010074:	4b2c      	ldr	r3, [pc, #176]	@ (8010128 <MX_TIM3_Init+0xf0>)
 8010076:	2200      	movs	r2, #0
 8010078:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801007a:	4b2b      	ldr	r3, [pc, #172]	@ (8010128 <MX_TIM3_Init+0xf0>)
 801007c:	2200      	movs	r2, #0
 801007e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8010080:	4b29      	ldr	r3, [pc, #164]	@ (8010128 <MX_TIM3_Init+0xf0>)
 8010082:	0018      	movs	r0, r3
 8010084:	f009 f86a 	bl	801915c <HAL_TIM_PWM_Init>
 8010088:	1e03      	subs	r3, r0, #0
 801008a:	d001      	beq.n	8010090 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 801008c:	f7fa f8f0 	bl	800a270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010090:	2110      	movs	r1, #16
 8010092:	187b      	adds	r3, r7, r1
 8010094:	2200      	movs	r2, #0
 8010096:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010098:	187b      	adds	r3, r7, r1
 801009a:	2200      	movs	r2, #0
 801009c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801009e:	187a      	adds	r2, r7, r1
 80100a0:	4b21      	ldr	r3, [pc, #132]	@ (8010128 <MX_TIM3_Init+0xf0>)
 80100a2:	0011      	movs	r1, r2
 80100a4:	0018      	movs	r0, r3
 80100a6:	f009 fb77 	bl	8019798 <HAL_TIMEx_MasterConfigSynchronization>
 80100aa:	1e03      	subs	r3, r0, #0
 80100ac:	d001      	beq.n	80100b2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80100ae:	f7fa f8df 	bl	800a270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80100b2:	003b      	movs	r3, r7
 80100b4:	2260      	movs	r2, #96	@ 0x60
 80100b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80100b8:	003b      	movs	r3, r7
 80100ba:	2200      	movs	r2, #0
 80100bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80100be:	003b      	movs	r3, r7
 80100c0:	2200      	movs	r2, #0
 80100c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80100c4:	003b      	movs	r3, r7
 80100c6:	2200      	movs	r2, #0
 80100c8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80100ca:	0039      	movs	r1, r7
 80100cc:	4b16      	ldr	r3, [pc, #88]	@ (8010128 <MX_TIM3_Init+0xf0>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	0018      	movs	r0, r3
 80100d2:	f009 f915 	bl	8019300 <HAL_TIM_PWM_ConfigChannel>
 80100d6:	1e03      	subs	r3, r0, #0
 80100d8:	d001      	beq.n	80100de <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80100da:	f7fa f8c9 	bl	800a270 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80100de:	4b12      	ldr	r3, [pc, #72]	@ (8010128 <MX_TIM3_Init+0xf0>)
 80100e0:	2104      	movs	r1, #4
 80100e2:	0018      	movs	r0, r3
 80100e4:	f009 fbb6 	bl	8019854 <HAL_TIMEx_RemapConfig>
 80100e8:	1e03      	subs	r3, r0, #0
 80100ea:	d001      	beq.n	80100f0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80100ec:	f7fa f8c0 	bl	800a270 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80100f0:	0039      	movs	r1, r7
 80100f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010128 <MX_TIM3_Init+0xf0>)
 80100f4:	2204      	movs	r2, #4
 80100f6:	0018      	movs	r0, r3
 80100f8:	f009 f902 	bl	8019300 <HAL_TIM_PWM_ConfigChannel>
 80100fc:	1e03      	subs	r3, r0, #0
 80100fe:	d001      	beq.n	8010104 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8010100:	f7fa f8b6 	bl	800a270 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8010104:	0039      	movs	r1, r7
 8010106:	4b08      	ldr	r3, [pc, #32]	@ (8010128 <MX_TIM3_Init+0xf0>)
 8010108:	2208      	movs	r2, #8
 801010a:	0018      	movs	r0, r3
 801010c:	f009 f8f8 	bl	8019300 <HAL_TIM_PWM_ConfigChannel>
 8010110:	1e03      	subs	r3, r0, #0
 8010112:	d001      	beq.n	8010118 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8010114:	f7fa f8ac 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8010118:	4b03      	ldr	r3, [pc, #12]	@ (8010128 <MX_TIM3_Init+0xf0>)
 801011a:	0018      	movs	r0, r3
 801011c:	f000 f882 	bl	8010224 <HAL_TIM_MspPostInit>

}
 8010120:	46c0      	nop			@ (mov r8, r8)
 8010122:	46bd      	mov	sp, r7
 8010124:	b006      	add	sp, #24
 8010126:	bd80      	pop	{r7, pc}
 8010128:	20001e38 	.word	0x20001e38
 801012c:	40000400 	.word	0x40000400
 8010130:	0000ffff 	.word	0x0000ffff

08010134 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801013a:	003b      	movs	r3, r7
 801013c:	0018      	movs	r0, r3
 801013e:	2308      	movs	r3, #8
 8010140:	001a      	movs	r2, r3
 8010142:	2100      	movs	r1, #0
 8010144:	f012 fc58 	bl	80229f8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8010148:	4b15      	ldr	r3, [pc, #84]	@ (80101a0 <MX_TIM6_Init+0x6c>)
 801014a:	4a16      	ldr	r2, [pc, #88]	@ (80101a4 <MX_TIM6_Init+0x70>)
 801014c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 801014e:	4b14      	ldr	r3, [pc, #80]	@ (80101a0 <MX_TIM6_Init+0x6c>)
 8010150:	220a      	movs	r2, #10
 8010152:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010154:	4b12      	ldr	r3, [pc, #72]	@ (80101a0 <MX_TIM6_Init+0x6c>)
 8010156:	2200      	movs	r2, #0
 8010158:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801015a:	4b11      	ldr	r3, [pc, #68]	@ (80101a0 <MX_TIM6_Init+0x6c>)
 801015c:	4a12      	ldr	r2, [pc, #72]	@ (80101a8 <MX_TIM6_Init+0x74>)
 801015e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010160:	4b0f      	ldr	r3, [pc, #60]	@ (80101a0 <MX_TIM6_Init+0x6c>)
 8010162:	2200      	movs	r2, #0
 8010164:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8010166:	4b0e      	ldr	r3, [pc, #56]	@ (80101a0 <MX_TIM6_Init+0x6c>)
 8010168:	0018      	movs	r0, r3
 801016a:	f008 ff4f 	bl	801900c <HAL_TIM_Base_Init>
 801016e:	1e03      	subs	r3, r0, #0
 8010170:	d001      	beq.n	8010176 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8010172:	f7fa f87d 	bl	800a270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010176:	003b      	movs	r3, r7
 8010178:	2200      	movs	r2, #0
 801017a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801017c:	003b      	movs	r3, r7
 801017e:	2200      	movs	r2, #0
 8010180:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8010182:	003a      	movs	r2, r7
 8010184:	4b06      	ldr	r3, [pc, #24]	@ (80101a0 <MX_TIM6_Init+0x6c>)
 8010186:	0011      	movs	r1, r2
 8010188:	0018      	movs	r0, r3
 801018a:	f009 fb05 	bl	8019798 <HAL_TIMEx_MasterConfigSynchronization>
 801018e:	1e03      	subs	r3, r0, #0
 8010190:	d001      	beq.n	8010196 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8010192:	f7fa f86d 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8010196:	46c0      	nop			@ (mov r8, r8)
 8010198:	46bd      	mov	sp, r7
 801019a:	b002      	add	sp, #8
 801019c:	bd80      	pop	{r7, pc}
 801019e:	46c0      	nop			@ (mov r8, r8)
 80101a0:	20001e78 	.word	0x20001e78
 80101a4:	40001000 	.word	0x40001000
 80101a8:	0000ffff 	.word	0x0000ffff

080101ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	2380      	movs	r3, #128	@ 0x80
 80101ba:	05db      	lsls	r3, r3, #23
 80101bc:	429a      	cmp	r2, r3
 80101be:	d106      	bne.n	80101ce <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80101c0:	4b0a      	ldr	r3, [pc, #40]	@ (80101ec <HAL_TIM_PWM_MspInit+0x40>)
 80101c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101c4:	4b09      	ldr	r3, [pc, #36]	@ (80101ec <HAL_TIM_PWM_MspInit+0x40>)
 80101c6:	2101      	movs	r1, #1
 80101c8:	430a      	orrs	r2, r1
 80101ca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80101cc:	e00a      	b.n	80101e4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4a07      	ldr	r2, [pc, #28]	@ (80101f0 <HAL_TIM_PWM_MspInit+0x44>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d105      	bne.n	80101e4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80101d8:	4b04      	ldr	r3, [pc, #16]	@ (80101ec <HAL_TIM_PWM_MspInit+0x40>)
 80101da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101dc:	4b03      	ldr	r3, [pc, #12]	@ (80101ec <HAL_TIM_PWM_MspInit+0x40>)
 80101de:	2102      	movs	r1, #2
 80101e0:	430a      	orrs	r2, r1
 80101e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80101e4:	46c0      	nop			@ (mov r8, r8)
 80101e6:	46bd      	mov	sp, r7
 80101e8:	b002      	add	sp, #8
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	40021000 	.word	0x40021000
 80101f0:	40000400 	.word	0x40000400

080101f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4a06      	ldr	r2, [pc, #24]	@ (801021c <HAL_TIM_Base_MspInit+0x28>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d105      	bne.n	8010212 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8010206:	4b06      	ldr	r3, [pc, #24]	@ (8010220 <HAL_TIM_Base_MspInit+0x2c>)
 8010208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801020a:	4b05      	ldr	r3, [pc, #20]	@ (8010220 <HAL_TIM_Base_MspInit+0x2c>)
 801020c:	2110      	movs	r1, #16
 801020e:	430a      	orrs	r2, r1
 8010210:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8010212:	46c0      	nop			@ (mov r8, r8)
 8010214:	46bd      	mov	sp, r7
 8010216:	b002      	add	sp, #8
 8010218:	bd80      	pop	{r7, pc}
 801021a:	46c0      	nop			@ (mov r8, r8)
 801021c:	40001000 	.word	0x40001000
 8010220:	40021000 	.word	0x40021000

08010224 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010224:	b590      	push	{r4, r7, lr}
 8010226:	b08b      	sub	sp, #44	@ 0x2c
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801022c:	2414      	movs	r4, #20
 801022e:	193b      	adds	r3, r7, r4
 8010230:	0018      	movs	r0, r3
 8010232:	2314      	movs	r3, #20
 8010234:	001a      	movs	r2, r3
 8010236:	2100      	movs	r1, #0
 8010238:	f012 fbde 	bl	80229f8 <memset>
  if(timHandle->Instance==TIM2)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	2380      	movs	r3, #128	@ 0x80
 8010242:	05db      	lsls	r3, r3, #23
 8010244:	429a      	cmp	r2, r3
 8010246:	d123      	bne.n	8010290 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010248:	4b27      	ldr	r3, [pc, #156]	@ (80102e8 <HAL_TIM_MspPostInit+0xc4>)
 801024a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801024c:	4b26      	ldr	r3, [pc, #152]	@ (80102e8 <HAL_TIM_MspPostInit+0xc4>)
 801024e:	2101      	movs	r1, #1
 8010250:	430a      	orrs	r2, r1
 8010252:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010254:	4b24      	ldr	r3, [pc, #144]	@ (80102e8 <HAL_TIM_MspPostInit+0xc4>)
 8010256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010258:	2201      	movs	r2, #1
 801025a:	4013      	ands	r3, r2
 801025c:	613b      	str	r3, [r7, #16]
 801025e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8010260:	0021      	movs	r1, r4
 8010262:	187b      	adds	r3, r7, r1
 8010264:	220d      	movs	r2, #13
 8010266:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010268:	187b      	adds	r3, r7, r1
 801026a:	2202      	movs	r2, #2
 801026c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801026e:	187b      	adds	r3, r7, r1
 8010270:	2200      	movs	r2, #0
 8010272:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010274:	187b      	adds	r3, r7, r1
 8010276:	2200      	movs	r2, #0
 8010278:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801027a:	187b      	adds	r3, r7, r1
 801027c:	2202      	movs	r2, #2
 801027e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010280:	187a      	adds	r2, r7, r1
 8010282:	23a0      	movs	r3, #160	@ 0xa0
 8010284:	05db      	lsls	r3, r3, #23
 8010286:	0011      	movs	r1, r2
 8010288:	0018      	movs	r0, r3
 801028a:	f001 ff99 	bl	80121c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801028e:	e027      	b.n	80102e0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a15      	ldr	r2, [pc, #84]	@ (80102ec <HAL_TIM_MspPostInit+0xc8>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d122      	bne.n	80102e0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801029a:	4b13      	ldr	r3, [pc, #76]	@ (80102e8 <HAL_TIM_MspPostInit+0xc4>)
 801029c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801029e:	4b12      	ldr	r3, [pc, #72]	@ (80102e8 <HAL_TIM_MspPostInit+0xc4>)
 80102a0:	2104      	movs	r1, #4
 80102a2:	430a      	orrs	r2, r1
 80102a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80102a6:	4b10      	ldr	r3, [pc, #64]	@ (80102e8 <HAL_TIM_MspPostInit+0xc4>)
 80102a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102aa:	2204      	movs	r2, #4
 80102ac:	4013      	ands	r3, r2
 80102ae:	60fb      	str	r3, [r7, #12]
 80102b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80102b2:	2114      	movs	r1, #20
 80102b4:	187b      	adds	r3, r7, r1
 80102b6:	22e0      	movs	r2, #224	@ 0xe0
 80102b8:	0052      	lsls	r2, r2, #1
 80102ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102bc:	187b      	adds	r3, r7, r1
 80102be:	2202      	movs	r2, #2
 80102c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102c2:	187b      	adds	r3, r7, r1
 80102c4:	2200      	movs	r2, #0
 80102c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80102c8:	187b      	adds	r3, r7, r1
 80102ca:	2200      	movs	r2, #0
 80102cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80102ce:	187b      	adds	r3, r7, r1
 80102d0:	2202      	movs	r2, #2
 80102d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80102d4:	187b      	adds	r3, r7, r1
 80102d6:	4a06      	ldr	r2, [pc, #24]	@ (80102f0 <HAL_TIM_MspPostInit+0xcc>)
 80102d8:	0019      	movs	r1, r3
 80102da:	0010      	movs	r0, r2
 80102dc:	f001 ff70 	bl	80121c0 <HAL_GPIO_Init>
}
 80102e0:	46c0      	nop			@ (mov r8, r8)
 80102e2:	46bd      	mov	sp, r7
 80102e4:	b00b      	add	sp, #44	@ 0x2c
 80102e6:	bd90      	pop	{r4, r7, pc}
 80102e8:	40021000 	.word	0x40021000
 80102ec:	40000400 	.word	0x40000400
 80102f0:	50000800 	.word	0x50000800

080102f4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80102f8:	4b17      	ldr	r3, [pc, #92]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 80102fa:	4a18      	ldr	r2, [pc, #96]	@ (801035c <MX_LPUART1_UART_Init+0x68>)
 80102fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80102fe:	4b16      	ldr	r3, [pc, #88]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 8010300:	22e1      	movs	r2, #225	@ 0xe1
 8010302:	0252      	lsls	r2, r2, #9
 8010304:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010306:	4b14      	ldr	r3, [pc, #80]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 8010308:	2200      	movs	r2, #0
 801030a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801030c:	4b12      	ldr	r3, [pc, #72]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 801030e:	2200      	movs	r2, #0
 8010310:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8010312:	4b11      	ldr	r3, [pc, #68]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 8010314:	2200      	movs	r2, #0
 8010316:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8010318:	4b0f      	ldr	r3, [pc, #60]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 801031a:	220c      	movs	r2, #12
 801031c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801031e:	4b0e      	ldr	r3, [pc, #56]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 8010320:	2200      	movs	r2, #0
 8010322:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010324:	4b0c      	ldr	r3, [pc, #48]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 8010326:	2200      	movs	r2, #0
 8010328:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 801032a:	4b0b      	ldr	r3, [pc, #44]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 801032c:	2218      	movs	r2, #24
 801032e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8010330:	4b09      	ldr	r3, [pc, #36]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 8010332:	2280      	movs	r2, #128	@ 0x80
 8010334:	0212      	lsls	r2, r2, #8
 8010336:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8010338:	4b07      	ldr	r3, [pc, #28]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 801033a:	2280      	movs	r2, #128	@ 0x80
 801033c:	0152      	lsls	r2, r2, #5
 801033e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8010340:	4b05      	ldr	r3, [pc, #20]	@ (8010358 <MX_LPUART1_UART_Init+0x64>)
 8010342:	0018      	movs	r0, r3
 8010344:	f009 faa4 	bl	8019890 <HAL_UART_Init>
 8010348:	1e03      	subs	r3, r0, #0
 801034a:	d001      	beq.n	8010350 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 801034c:	f7f9 ff90 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8010350:	46c0      	nop			@ (mov r8, r8)
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	46c0      	nop			@ (mov r8, r8)
 8010358:	20001eb8 	.word	0x20001eb8
 801035c:	40004800 	.word	0x40004800

08010360 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010364:	4b14      	ldr	r3, [pc, #80]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 8010366:	4a15      	ldr	r2, [pc, #84]	@ (80103bc <MX_USART1_UART_Init+0x5c>)
 8010368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801036a:	4b13      	ldr	r3, [pc, #76]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 801036c:	22e1      	movs	r2, #225	@ 0xe1
 801036e:	0252      	lsls	r2, r2, #9
 8010370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010372:	4b11      	ldr	r3, [pc, #68]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 8010374:	2200      	movs	r2, #0
 8010376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010378:	4b0f      	ldr	r3, [pc, #60]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 801037a:	2200      	movs	r2, #0
 801037c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801037e:	4b0e      	ldr	r3, [pc, #56]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 8010380:	2200      	movs	r2, #0
 8010382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010384:	4b0c      	ldr	r3, [pc, #48]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 8010386:	220c      	movs	r2, #12
 8010388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801038a:	4b0b      	ldr	r3, [pc, #44]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 801038c:	2200      	movs	r2, #0
 801038e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010390:	4b09      	ldr	r3, [pc, #36]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 8010392:	2200      	movs	r2, #0
 8010394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8010396:	4b08      	ldr	r3, [pc, #32]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 8010398:	2200      	movs	r2, #0
 801039a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801039c:	4b06      	ldr	r3, [pc, #24]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 801039e:	2200      	movs	r2, #0
 80103a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80103a2:	4b05      	ldr	r3, [pc, #20]	@ (80103b8 <MX_USART1_UART_Init+0x58>)
 80103a4:	0018      	movs	r0, r3
 80103a6:	f009 fa73 	bl	8019890 <HAL_UART_Init>
 80103aa:	1e03      	subs	r3, r0, #0
 80103ac:	d001      	beq.n	80103b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80103ae:	f7f9 ff5f 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80103b2:	46c0      	nop			@ (mov r8, r8)
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	20001f70 	.word	0x20001f70
 80103bc:	40013800 	.word	0x40013800

080103c0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80103c4:	4b14      	ldr	r3, [pc, #80]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103c6:	4a15      	ldr	r2, [pc, #84]	@ (801041c <MX_USART4_UART_Init+0x5c>)
 80103c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80103ca:	4b13      	ldr	r3, [pc, #76]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103cc:	22e1      	movs	r2, #225	@ 0xe1
 80103ce:	0252      	lsls	r2, r2, #9
 80103d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80103d2:	4b11      	ldr	r3, [pc, #68]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80103d8:	4b0f      	ldr	r3, [pc, #60]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103da:	2200      	movs	r2, #0
 80103dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80103de:	4b0e      	ldr	r3, [pc, #56]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80103e4:	4b0c      	ldr	r3, [pc, #48]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103e6:	220c      	movs	r2, #12
 80103e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80103ea:	4b0b      	ldr	r3, [pc, #44]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103ec:	2200      	movs	r2, #0
 80103ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80103f0:	4b09      	ldr	r3, [pc, #36]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80103f6:	4b08      	ldr	r3, [pc, #32]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80103fc:	4b06      	ldr	r3, [pc, #24]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 80103fe:	2200      	movs	r2, #0
 8010400:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8010402:	4b05      	ldr	r3, [pc, #20]	@ (8010418 <MX_USART4_UART_Init+0x58>)
 8010404:	0018      	movs	r0, r3
 8010406:	f009 fa43 	bl	8019890 <HAL_UART_Init>
 801040a:	1e03      	subs	r3, r0, #0
 801040c:	d001      	beq.n	8010412 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 801040e:	f7f9 ff2f 	bl	800a270 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8010412:	46c0      	nop			@ (mov r8, r8)
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	20002028 	.word	0x20002028
 801041c:	40004c00 	.word	0x40004c00

08010420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010420:	b590      	push	{r4, r7, lr}
 8010422:	b08d      	sub	sp, #52	@ 0x34
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010428:	241c      	movs	r4, #28
 801042a:	193b      	adds	r3, r7, r4
 801042c:	0018      	movs	r0, r3
 801042e:	2314      	movs	r3, #20
 8010430:	001a      	movs	r2, r3
 8010432:	2100      	movs	r1, #0
 8010434:	f012 fae0 	bl	80229f8 <memset>
  if(uartHandle->Instance==LPUART1)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a8b      	ldr	r2, [pc, #556]	@ (801066c <HAL_UART_MspInit+0x24c>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d129      	bne.n	8010496 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8010442:	4b8b      	ldr	r3, [pc, #556]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010446:	4b8a      	ldr	r3, [pc, #552]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010448:	2180      	movs	r1, #128	@ 0x80
 801044a:	02c9      	lsls	r1, r1, #11
 801044c:	430a      	orrs	r2, r1
 801044e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010450:	4b87      	ldr	r3, [pc, #540]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010454:	4b86      	ldr	r3, [pc, #536]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010456:	2104      	movs	r1, #4
 8010458:	430a      	orrs	r2, r1
 801045a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801045c:	4b84      	ldr	r3, [pc, #528]	@ (8010670 <HAL_UART_MspInit+0x250>)
 801045e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010460:	2204      	movs	r2, #4
 8010462:	4013      	ands	r3, r2
 8010464:	61bb      	str	r3, [r7, #24]
 8010466:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010468:	0021      	movs	r1, r4
 801046a:	187b      	adds	r3, r7, r1
 801046c:	2203      	movs	r2, #3
 801046e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010470:	187b      	adds	r3, r7, r1
 8010472:	2202      	movs	r2, #2
 8010474:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010476:	187b      	adds	r3, r7, r1
 8010478:	2200      	movs	r2, #0
 801047a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801047c:	187b      	adds	r3, r7, r1
 801047e:	2203      	movs	r2, #3
 8010480:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8010482:	187b      	adds	r3, r7, r1
 8010484:	2206      	movs	r2, #6
 8010486:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010488:	187b      	adds	r3, r7, r1
 801048a:	4a7a      	ldr	r2, [pc, #488]	@ (8010674 <HAL_UART_MspInit+0x254>)
 801048c:	0019      	movs	r1, r3
 801048e:	0010      	movs	r0, r2
 8010490:	f001 fe96 	bl	80121c0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8010494:	e0e5      	b.n	8010662 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a77      	ldr	r2, [pc, #476]	@ (8010678 <HAL_UART_MspInit+0x258>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d133      	bne.n	8010508 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80104a0:	4b73      	ldr	r3, [pc, #460]	@ (8010670 <HAL_UART_MspInit+0x250>)
 80104a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104a4:	4b72      	ldr	r3, [pc, #456]	@ (8010670 <HAL_UART_MspInit+0x250>)
 80104a6:	2180      	movs	r1, #128	@ 0x80
 80104a8:	01c9      	lsls	r1, r1, #7
 80104aa:	430a      	orrs	r2, r1
 80104ac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80104ae:	4b70      	ldr	r3, [pc, #448]	@ (8010670 <HAL_UART_MspInit+0x250>)
 80104b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104b2:	4b6f      	ldr	r3, [pc, #444]	@ (8010670 <HAL_UART_MspInit+0x250>)
 80104b4:	2101      	movs	r1, #1
 80104b6:	430a      	orrs	r2, r1
 80104b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80104ba:	4b6d      	ldr	r3, [pc, #436]	@ (8010670 <HAL_UART_MspInit+0x250>)
 80104bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104be:	2201      	movs	r2, #1
 80104c0:	4013      	ands	r3, r2
 80104c2:	617b      	str	r3, [r7, #20]
 80104c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80104c6:	211c      	movs	r1, #28
 80104c8:	187b      	adds	r3, r7, r1
 80104ca:	22c0      	movs	r2, #192	@ 0xc0
 80104cc:	00d2      	lsls	r2, r2, #3
 80104ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104d0:	187b      	adds	r3, r7, r1
 80104d2:	2202      	movs	r2, #2
 80104d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104d6:	187b      	adds	r3, r7, r1
 80104d8:	2200      	movs	r2, #0
 80104da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104dc:	187b      	adds	r3, r7, r1
 80104de:	2203      	movs	r2, #3
 80104e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80104e2:	187b      	adds	r3, r7, r1
 80104e4:	2204      	movs	r2, #4
 80104e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104e8:	187a      	adds	r2, r7, r1
 80104ea:	23a0      	movs	r3, #160	@ 0xa0
 80104ec:	05db      	lsls	r3, r3, #23
 80104ee:	0011      	movs	r1, r2
 80104f0:	0018      	movs	r0, r3
 80104f2:	f001 fe65 	bl	80121c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80104f6:	2200      	movs	r2, #0
 80104f8:	2100      	movs	r1, #0
 80104fa:	201b      	movs	r0, #27
 80104fc:	f001 fa0e 	bl	801191c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8010500:	201b      	movs	r0, #27
 8010502:	f001 fa20 	bl	8011946 <HAL_NVIC_EnableIRQ>
}
 8010506:	e0ac      	b.n	8010662 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a5b      	ldr	r2, [pc, #364]	@ (801067c <HAL_UART_MspInit+0x25c>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d000      	beq.n	8010514 <HAL_UART_MspInit+0xf4>
 8010512:	e0a6      	b.n	8010662 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8010514:	4b56      	ldr	r3, [pc, #344]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010518:	4b55      	ldr	r3, [pc, #340]	@ (8010670 <HAL_UART_MspInit+0x250>)
 801051a:	2180      	movs	r1, #128	@ 0x80
 801051c:	0309      	lsls	r1, r1, #12
 801051e:	430a      	orrs	r2, r1
 8010520:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010522:	4b53      	ldr	r3, [pc, #332]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010526:	4b52      	ldr	r3, [pc, #328]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010528:	2101      	movs	r1, #1
 801052a:	430a      	orrs	r2, r1
 801052c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801052e:	4b50      	ldr	r3, [pc, #320]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010532:	2201      	movs	r2, #1
 8010534:	4013      	ands	r3, r2
 8010536:	613b      	str	r3, [r7, #16]
 8010538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801053a:	4b4d      	ldr	r3, [pc, #308]	@ (8010670 <HAL_UART_MspInit+0x250>)
 801053c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801053e:	4b4c      	ldr	r3, [pc, #304]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010540:	2104      	movs	r1, #4
 8010542:	430a      	orrs	r2, r1
 8010544:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010546:	4b4a      	ldr	r3, [pc, #296]	@ (8010670 <HAL_UART_MspInit+0x250>)
 8010548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801054a:	2204      	movs	r2, #4
 801054c:	4013      	ands	r3, r2
 801054e:	60fb      	str	r3, [r7, #12]
 8010550:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010552:	241c      	movs	r4, #28
 8010554:	193b      	adds	r3, r7, r4
 8010556:	2202      	movs	r2, #2
 8010558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801055a:	193b      	adds	r3, r7, r4
 801055c:	2202      	movs	r2, #2
 801055e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010560:	193b      	adds	r3, r7, r4
 8010562:	2200      	movs	r2, #0
 8010564:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010566:	193b      	adds	r3, r7, r4
 8010568:	2203      	movs	r2, #3
 801056a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 801056c:	193b      	adds	r3, r7, r4
 801056e:	2206      	movs	r2, #6
 8010570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010572:	193a      	adds	r2, r7, r4
 8010574:	23a0      	movs	r3, #160	@ 0xa0
 8010576:	05db      	lsls	r3, r3, #23
 8010578:	0011      	movs	r1, r2
 801057a:	0018      	movs	r0, r3
 801057c:	f001 fe20 	bl	80121c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8010580:	0021      	movs	r1, r4
 8010582:	187b      	adds	r3, r7, r1
 8010584:	2280      	movs	r2, #128	@ 0x80
 8010586:	00d2      	lsls	r2, r2, #3
 8010588:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801058a:	187b      	adds	r3, r7, r1
 801058c:	2202      	movs	r2, #2
 801058e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010590:	187b      	adds	r3, r7, r1
 8010592:	2200      	movs	r2, #0
 8010594:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010596:	187b      	adds	r3, r7, r1
 8010598:	2203      	movs	r2, #3
 801059a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 801059c:	187b      	adds	r3, r7, r1
 801059e:	2206      	movs	r2, #6
 80105a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80105a2:	187b      	adds	r3, r7, r1
 80105a4:	4a33      	ldr	r2, [pc, #204]	@ (8010674 <HAL_UART_MspInit+0x254>)
 80105a6:	0019      	movs	r1, r3
 80105a8:	0010      	movs	r0, r2
 80105aa:	f001 fe09 	bl	80121c0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80105ae:	4b34      	ldr	r3, [pc, #208]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105b0:	4a34      	ldr	r2, [pc, #208]	@ (8010684 <HAL_UART_MspInit+0x264>)
 80105b2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80105b4:	4b32      	ldr	r3, [pc, #200]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105b6:	220c      	movs	r2, #12
 80105b8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80105ba:	4b31      	ldr	r3, [pc, #196]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105bc:	2200      	movs	r2, #0
 80105be:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80105c0:	4b2f      	ldr	r3, [pc, #188]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105c2:	2200      	movs	r2, #0
 80105c4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80105c6:	4b2e      	ldr	r3, [pc, #184]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105c8:	2280      	movs	r2, #128	@ 0x80
 80105ca:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80105cc:	4b2c      	ldr	r3, [pc, #176]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105ce:	2200      	movs	r2, #0
 80105d0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80105d2:	4b2b      	ldr	r3, [pc, #172]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105d4:	2200      	movs	r2, #0
 80105d6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80105d8:	4b29      	ldr	r3, [pc, #164]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105da:	2220      	movs	r2, #32
 80105dc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80105de:	4b28      	ldr	r3, [pc, #160]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80105e4:	4b26      	ldr	r3, [pc, #152]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105e6:	0018      	movs	r0, r3
 80105e8:	f001 f9ce 	bl	8011988 <HAL_DMA_Init>
 80105ec:	1e03      	subs	r3, r0, #0
 80105ee:	d001      	beq.n	80105f4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80105f0:	f7f9 fe3e 	bl	800a270 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a22      	ldr	r2, [pc, #136]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80105fa:	4b21      	ldr	r3, [pc, #132]	@ (8010680 <HAL_UART_MspInit+0x260>)
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8010600:	4b21      	ldr	r3, [pc, #132]	@ (8010688 <HAL_UART_MspInit+0x268>)
 8010602:	4a22      	ldr	r2, [pc, #136]	@ (801068c <HAL_UART_MspInit+0x26c>)
 8010604:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8010606:	4b20      	ldr	r3, [pc, #128]	@ (8010688 <HAL_UART_MspInit+0x268>)
 8010608:	220c      	movs	r2, #12
 801060a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801060c:	4b1e      	ldr	r3, [pc, #120]	@ (8010688 <HAL_UART_MspInit+0x268>)
 801060e:	2210      	movs	r2, #16
 8010610:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010612:	4b1d      	ldr	r3, [pc, #116]	@ (8010688 <HAL_UART_MspInit+0x268>)
 8010614:	2200      	movs	r2, #0
 8010616:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010618:	4b1b      	ldr	r3, [pc, #108]	@ (8010688 <HAL_UART_MspInit+0x268>)
 801061a:	2280      	movs	r2, #128	@ 0x80
 801061c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801061e:	4b1a      	ldr	r3, [pc, #104]	@ (8010688 <HAL_UART_MspInit+0x268>)
 8010620:	2200      	movs	r2, #0
 8010622:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010624:	4b18      	ldr	r3, [pc, #96]	@ (8010688 <HAL_UART_MspInit+0x268>)
 8010626:	2200      	movs	r2, #0
 8010628:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 801062a:	4b17      	ldr	r3, [pc, #92]	@ (8010688 <HAL_UART_MspInit+0x268>)
 801062c:	2200      	movs	r2, #0
 801062e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8010630:	4b15      	ldr	r3, [pc, #84]	@ (8010688 <HAL_UART_MspInit+0x268>)
 8010632:	2200      	movs	r2, #0
 8010634:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8010636:	4b14      	ldr	r3, [pc, #80]	@ (8010688 <HAL_UART_MspInit+0x268>)
 8010638:	0018      	movs	r0, r3
 801063a:	f001 f9a5 	bl	8011988 <HAL_DMA_Init>
 801063e:	1e03      	subs	r3, r0, #0
 8010640:	d001      	beq.n	8010646 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8010642:	f7f9 fe15 	bl	800a270 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	4a0f      	ldr	r2, [pc, #60]	@ (8010688 <HAL_UART_MspInit+0x268>)
 801064a:	671a      	str	r2, [r3, #112]	@ 0x70
 801064c:	4b0e      	ldr	r3, [pc, #56]	@ (8010688 <HAL_UART_MspInit+0x268>)
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8010652:	2200      	movs	r2, #0
 8010654:	2100      	movs	r1, #0
 8010656:	200e      	movs	r0, #14
 8010658:	f001 f960 	bl	801191c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 801065c:	200e      	movs	r0, #14
 801065e:	f001 f972 	bl	8011946 <HAL_NVIC_EnableIRQ>
}
 8010662:	46c0      	nop			@ (mov r8, r8)
 8010664:	46bd      	mov	sp, r7
 8010666:	b00d      	add	sp, #52	@ 0x34
 8010668:	bd90      	pop	{r4, r7, pc}
 801066a:	46c0      	nop			@ (mov r8, r8)
 801066c:	40004800 	.word	0x40004800
 8010670:	40021000 	.word	0x40021000
 8010674:	50000800 	.word	0x50000800
 8010678:	40013800 	.word	0x40013800
 801067c:	40004c00 	.word	0x40004c00
 8010680:	200020e0 	.word	0x200020e0
 8010684:	4002006c 	.word	0x4002006c
 8010688:	20002128 	.word	0x20002128
 801068c:	40020080 	.word	0x40020080

08010690 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8010690:	b580      	push	{r7, lr}
 8010692:	b086      	sub	sp, #24
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8010698:	f000 fc9c 	bl	8010fd4 <HAL_GetTick>
 801069c:	0003      	movs	r3, r0
 801069e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80106a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010714 <TimestampIsReached+0x84>)
 80106a2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80106a4:	697a      	ldr	r2, [r7, #20]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d307      	bcc.n	80106bc <TimestampIsReached+0x2c>
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	693a      	ldr	r2, [r7, #16]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d901      	bls.n	80106bc <TimestampIsReached+0x2c>
 80106b8:	2201      	movs	r2, #1
 80106ba:	e000      	b.n	80106be <TimestampIsReached+0x2e>
 80106bc:	2200      	movs	r2, #0
 80106be:	230f      	movs	r3, #15
 80106c0:	18fb      	adds	r3, r7, r3
 80106c2:	701a      	strb	r2, [r3, #0]
 80106c4:	781a      	ldrb	r2, [r3, #0]
 80106c6:	2101      	movs	r1, #1
 80106c8:	400a      	ands	r2, r1
 80106ca:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80106cc:	697a      	ldr	r2, [r7, #20]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d207      	bcs.n	80106e4 <TimestampIsReached+0x54>
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	1ad3      	subs	r3, r2, r3
 80106da:	693a      	ldr	r2, [r7, #16]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d201      	bcs.n	80106e4 <TimestampIsReached+0x54>
 80106e0:	2201      	movs	r2, #1
 80106e2:	e000      	b.n	80106e6 <TimestampIsReached+0x56>
 80106e4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 80106e6:	200e      	movs	r0, #14
 80106e8:	183b      	adds	r3, r7, r0
 80106ea:	701a      	strb	r2, [r3, #0]
 80106ec:	781a      	ldrb	r2, [r3, #0]
 80106ee:	2101      	movs	r1, #1
 80106f0:	400a      	ands	r2, r1
 80106f2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80106f4:	230f      	movs	r3, #15
 80106f6:	18fb      	adds	r3, r7, r3
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d103      	bne.n	8010706 <TimestampIsReached+0x76>
 80106fe:	183b      	adds	r3, r7, r0
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8010706:	2301      	movs	r3, #1
 8010708:	e000      	b.n	801070c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 801070a:	2300      	movs	r3, #0
}
 801070c:	0018      	movs	r0, r3
 801070e:	46bd      	mov	sp, r7
 8010710:	b006      	add	sp, #24
 8010712:	bd80      	pop	{r7, pc}
 8010714:	7fffffff 	.word	0x7fffffff

08010718 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8010720:	f000 fc58 	bl	8010fd4 <HAL_GetTick>
 8010724:	0002      	movs	r2, r0
 8010726:	4904      	ldr	r1, [pc, #16]	@ (8010738 <AddTimestamp+0x20>)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	0018      	movs	r0, r3
 801072c:	f011 fffe 	bl	802272c <siprintf>
}
 8010730:	46c0      	nop			@ (mov r8, r8)
 8010732:	46bd      	mov	sp, r7
 8010734:	b002      	add	sp, #8
 8010736:	bd80      	pop	{r7, pc}
 8010738:	08028674 	.word	0x08028674

0801073c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 801073c:	b40c      	push	{r2, r3}
 801073e:	b5b0      	push	{r4, r5, r7, lr}
 8010740:	b0a4      	sub	sp, #144	@ 0x90
 8010742:	af00      	add	r7, sp, #0
 8010744:	0002      	movs	r2, r0
 8010746:	6039      	str	r1, [r7, #0]
 8010748:	1dfb      	adds	r3, r7, #7
 801074a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 801074c:	4b23      	ldr	r3, [pc, #140]	@ (80107dc <CreateLine+0xa0>)
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	1dfa      	adds	r2, r7, #7
 8010752:	7812      	ldrb	r2, [r2, #0]
 8010754:	429a      	cmp	r2, r3
 8010756:	d839      	bhi.n	80107cc <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8010758:	683a      	ldr	r2, [r7, #0]
 801075a:	4921      	ldr	r1, [pc, #132]	@ (80107e0 <CreateLine+0xa4>)
 801075c:	240c      	movs	r4, #12
 801075e:	193b      	adds	r3, r7, r4
 8010760:	0018      	movs	r0, r3
 8010762:	f011 ffe3 	bl	802272c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8010766:	4b1d      	ldr	r3, [pc, #116]	@ (80107dc <CreateLine+0xa0>)
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	2b01      	cmp	r3, #1
 801076c:	d909      	bls.n	8010782 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 801076e:	193b      	adds	r3, r7, r4
 8010770:	0018      	movs	r0, r3
 8010772:	f7ef fcfb 	bl	800016c <strlen>
 8010776:	0002      	movs	r2, r0
 8010778:	193b      	adds	r3, r7, r4
 801077a:	189b      	adds	r3, r3, r2
 801077c:	0018      	movs	r0, r3
 801077e:	f7ff ffcb 	bl	8010718 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8010782:	240c      	movs	r4, #12
 8010784:	193b      	adds	r3, r7, r4
 8010786:	0018      	movs	r0, r3
 8010788:	f7ef fcf0 	bl	800016c <strlen>
 801078c:	0003      	movs	r3, r0
 801078e:	218c      	movs	r1, #140	@ 0x8c
 8010790:	187a      	adds	r2, r7, r1
 8010792:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8010794:	239c      	movs	r3, #156	@ 0x9c
 8010796:	2508      	movs	r5, #8
 8010798:	195b      	adds	r3, r3, r5
 801079a:	19db      	adds	r3, r3, r7
 801079c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 801079e:	193a      	adds	r2, r7, r4
 80107a0:	187b      	adds	r3, r7, r1
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	18d0      	adds	r0, r2, r3
 80107a6:	187b      	adds	r3, r7, r1
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2280      	movs	r2, #128	@ 0x80
 80107ac:	1ad3      	subs	r3, r2, r3
 80107ae:	0019      	movs	r1, r3
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	2298      	movs	r2, #152	@ 0x98
 80107b4:	1952      	adds	r2, r2, r5
 80107b6:	19d2      	adds	r2, r2, r7
 80107b8:	6812      	ldr	r2, [r2, #0]
 80107ba:	f012 f84f 	bl	802285c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80107be:	193a      	adds	r2, r7, r4
 80107c0:	4b08      	ldr	r3, [pc, #32]	@ (80107e4 <CreateLine+0xa8>)
 80107c2:	0011      	movs	r1, r2
 80107c4:	0018      	movs	r0, r3
 80107c6:	f011 ff41 	bl	802264c <iprintf>
 80107ca:	e000      	b.n	80107ce <CreateLine+0x92>
    return;
 80107cc:	46c0      	nop			@ (mov r8, r8)
}
 80107ce:	46bd      	mov	sp, r7
 80107d0:	b024      	add	sp, #144	@ 0x90
 80107d2:	bcb0      	pop	{r4, r5, r7}
 80107d4:	bc08      	pop	{r3}
 80107d6:	b002      	add	sp, #8
 80107d8:	4718      	bx	r3
 80107da:	46c0      	nop			@ (mov r8, r8)
 80107dc:	200000e0 	.word	0x200000e0
 80107e0:	08028680 	.word	0x08028680
 80107e4:	08028684 	.word	0x08028684

080107e8 <_write>:

int _write(int fd, void *buf, size_t count) {
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	68b9      	ldr	r1, [r7, #8]
 80107fa:	4804      	ldr	r0, [pc, #16]	@ (801080c <_write+0x24>)
 80107fc:	2364      	movs	r3, #100	@ 0x64
 80107fe:	f009 f8ad 	bl	801995c <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8010802:	687b      	ldr	r3, [r7, #4]
}
 8010804:	0018      	movs	r0, r3
 8010806:	46bd      	mov	sp, r7
 8010808:	b004      	add	sp, #16
 801080a:	bd80      	pop	{r7, pc}
 801080c:	20001f70 	.word	0x20001f70

08010810 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	0002      	movs	r2, r0
 8010818:	1dfb      	adds	r3, r7, #7
 801081a:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 801081c:	4b03      	ldr	r3, [pc, #12]	@ (801082c <SetVerboseLevel+0x1c>)
 801081e:	1dfa      	adds	r2, r7, #7
 8010820:	7812      	ldrb	r2, [r2, #0]
 8010822:	701a      	strb	r2, [r3, #0]
}
 8010824:	46c0      	nop			@ (mov r8, r8)
 8010826:	46bd      	mov	sp, r7
 8010828:	b002      	add	sp, #8
 801082a:	bd80      	pop	{r7, pc}
 801082c:	200000e0 	.word	0x200000e0

08010830 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8010830:	b580      	push	{r7, lr}
 8010832:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8010834:	4b02      	ldr	r3, [pc, #8]	@ (8010840 <GetVerboseLevel+0x10>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	0018      	movs	r0, r3
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	46c0      	nop			@ (mov r8, r8)
 8010840:	200000e0 	.word	0x200000e0

08010844 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 801084a:	4a0f      	ldr	r2, [pc, #60]	@ (8010888 <BinaryReleaseInfo+0x44>)
 801084c:	4b0f      	ldr	r3, [pc, #60]	@ (801088c <BinaryReleaseInfo+0x48>)
 801084e:	0019      	movs	r1, r3
 8010850:	2002      	movs	r0, #2
 8010852:	f7ff ff73 	bl	801073c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8010856:	480e      	ldr	r0, [pc, #56]	@ (8010890 <BinaryReleaseInfo+0x4c>)
 8010858:	4a0e      	ldr	r2, [pc, #56]	@ (8010894 <BinaryReleaseInfo+0x50>)
 801085a:	490c      	ldr	r1, [pc, #48]	@ (801088c <BinaryReleaseInfo+0x48>)
 801085c:	4b0e      	ldr	r3, [pc, #56]	@ (8010898 <BinaryReleaseInfo+0x54>)
 801085e:	9300      	str	r3, [sp, #0]
 8010860:	0003      	movs	r3, r0
 8010862:	2002      	movs	r0, #2
 8010864:	f7ff ff6a 	bl	801073c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8010868:	4b0c      	ldr	r3, [pc, #48]	@ (801089c <BinaryReleaseInfo+0x58>)
 801086a:	4a0d      	ldr	r2, [pc, #52]	@ (80108a0 <BinaryReleaseInfo+0x5c>)
 801086c:	4907      	ldr	r1, [pc, #28]	@ (801088c <BinaryReleaseInfo+0x48>)
 801086e:	2002      	movs	r0, #2
 8010870:	f7ff ff64 	bl	801073c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8010874:	4b0b      	ldr	r3, [pc, #44]	@ (80108a4 <BinaryReleaseInfo+0x60>)
 8010876:	4a0c      	ldr	r2, [pc, #48]	@ (80108a8 <BinaryReleaseInfo+0x64>)
 8010878:	4904      	ldr	r1, [pc, #16]	@ (801088c <BinaryReleaseInfo+0x48>)
 801087a:	2002      	movs	r0, #2
 801087c:	f7ff ff5e 	bl	801073c <CreateLine>
}
 8010880:	46c0      	nop			@ (mov r8, r8)
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	46c0      	nop			@ (mov r8, r8)
 8010888:	0802868c 	.word	0x0802868c
 801088c:	080286b8 	.word	0x080286b8
 8010890:	080286bc 	.word	0x080286bc
 8010894:	080286c8 	.word	0x080286c8
 8010898:	080286dc 	.word	0x080286dc
 801089c:	080286e8 	.word	0x080286e8
 80108a0:	080286f4 	.word	0x080286f4
 80108a4:	080286fc 	.word	0x080286fc
 80108a8:	08028704 	.word	0x08028704

080108ac <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	68f9      	ldr	r1, [r7, #12]
 80108be:	4803      	ldr	r0, [pc, #12]	@ (80108cc <errorHandler+0x20>)
 80108c0:	f011 fec4 	bl	802264c <iprintf>
//    while (true)
//    {
//    }
}
 80108c4:	46c0      	nop			@ (mov r8, r8)
 80108c6:	46bd      	mov	sp, r7
 80108c8:	b004      	add	sp, #16
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	0802871c 	.word	0x0802871c

080108d0 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80108d0:	b590      	push	{r4, r7, lr}
 80108d2:	b083      	sub	sp, #12
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6039      	str	r1, [r7, #0]
 80108d8:	0011      	movs	r1, r2
 80108da:	1dfb      	adds	r3, r7, #7
 80108dc:	1c02      	adds	r2, r0, #0
 80108de:	701a      	strb	r2, [r3, #0]
 80108e0:	1dbb      	adds	r3, r7, #6
 80108e2:	1c0a      	adds	r2, r1, #0
 80108e4:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80108e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010910 <ReadRegister+0x40>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00a      	beq.n	8010904 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 80108ee:	4b08      	ldr	r3, [pc, #32]	@ (8010910 <ReadRegister+0x40>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	1dba      	adds	r2, r7, #6
 80108f4:	7814      	ldrb	r4, [r2, #0]
 80108f6:	6839      	ldr	r1, [r7, #0]
 80108f8:	1dfa      	adds	r2, r7, #7
 80108fa:	7810      	ldrb	r0, [r2, #0]
 80108fc:	0022      	movs	r2, r4
 80108fe:	4798      	blx	r3
 8010900:	0003      	movs	r3, r0
 8010902:	e000      	b.n	8010906 <ReadRegister+0x36>
	}
	return false;
 8010904:	2300      	movs	r3, #0
}
 8010906:	0018      	movs	r0, r3
 8010908:	46bd      	mov	sp, r7
 801090a:	b003      	add	sp, #12
 801090c:	bd90      	pop	{r4, r7, pc}
 801090e:	46c0      	nop			@ (mov r8, r8)
 8010910:	20002178 	.word	0x20002178

08010914 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8010914:	b590      	push	{r4, r7, lr}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6039      	str	r1, [r7, #0]
 801091c:	0011      	movs	r1, r2
 801091e:	1dfb      	adds	r3, r7, #7
 8010920:	1c02      	adds	r2, r0, #0
 8010922:	701a      	strb	r2, [r3, #0]
 8010924:	1dbb      	adds	r3, r7, #6
 8010926:	1c0a      	adds	r2, r1, #0
 8010928:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 801092a:	4b0a      	ldr	r3, [pc, #40]	@ (8010954 <WriteRegister+0x40>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d00a      	beq.n	8010948 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8010932:	4b08      	ldr	r3, [pc, #32]	@ (8010954 <WriteRegister+0x40>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	1dba      	adds	r2, r7, #6
 8010938:	7814      	ldrb	r4, [r2, #0]
 801093a:	6839      	ldr	r1, [r7, #0]
 801093c:	1dfa      	adds	r2, r7, #7
 801093e:	7810      	ldrb	r0, [r2, #0]
 8010940:	0022      	movs	r2, r4
 8010942:	4798      	blx	r3
 8010944:	0003      	movs	r3, r0
 8010946:	e000      	b.n	801094a <WriteRegister+0x36>
  }
  return false;
 8010948:	2300      	movs	r3, #0
}
 801094a:	0018      	movs	r0, r3
 801094c:	46bd      	mov	sp, r7
 801094e:	b003      	add	sp, #12
 8010950:	bd90      	pop	{r4, r7, pc}
 8010952:	46c0      	nop			@ (mov r8, r8)
 8010954:	2000217c 	.word	0x2000217c

08010958 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	000a      	movs	r2, r1
 8010962:	1cfb      	adds	r3, r7, #3
 8010964:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8010966:	230f      	movs	r3, #15
 8010968:	18fb      	adds	r3, r7, r3
 801096a:	22ff      	movs	r2, #255	@ 0xff
 801096c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 801096e:	230e      	movs	r3, #14
 8010970:	18fb      	adds	r3, r7, r3
 8010972:	2200      	movs	r2, #0
 8010974:	701a      	strb	r2, [r3, #0]
 8010976:	e037      	b.n	80109e8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8010978:	230e      	movs	r3, #14
 801097a:	18fb      	adds	r3, r7, r3
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	18d3      	adds	r3, r2, r3
 8010982:	7819      	ldrb	r1, [r3, #0]
 8010984:	220f      	movs	r2, #15
 8010986:	18bb      	adds	r3, r7, r2
 8010988:	18ba      	adds	r2, r7, r2
 801098a:	7812      	ldrb	r2, [r2, #0]
 801098c:	404a      	eors	r2, r1
 801098e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010990:	230d      	movs	r3, #13
 8010992:	18fb      	adds	r3, r7, r3
 8010994:	2200      	movs	r2, #0
 8010996:	701a      	strb	r2, [r3, #0]
 8010998:	e01b      	b.n	80109d2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 801099a:	210f      	movs	r1, #15
 801099c:	187b      	adds	r3, r7, r1
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	b25b      	sxtb	r3, r3
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	da09      	bge.n	80109ba <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80109a6:	187b      	adds	r3, r7, r1
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	b25b      	sxtb	r3, r3
 80109ae:	2231      	movs	r2, #49	@ 0x31
 80109b0:	4053      	eors	r3, r2
 80109b2:	b25a      	sxtb	r2, r3
 80109b4:	187b      	adds	r3, r7, r1
 80109b6:	701a      	strb	r2, [r3, #0]
 80109b8:	e005      	b.n	80109c6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80109ba:	230f      	movs	r3, #15
 80109bc:	18fa      	adds	r2, r7, r3
 80109be:	18fb      	adds	r3, r7, r3
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	18db      	adds	r3, r3, r3
 80109c4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80109c6:	210d      	movs	r1, #13
 80109c8:	187b      	adds	r3, r7, r1
 80109ca:	781a      	ldrb	r2, [r3, #0]
 80109cc:	187b      	adds	r3, r7, r1
 80109ce:	3201      	adds	r2, #1
 80109d0:	701a      	strb	r2, [r3, #0]
 80109d2:	230d      	movs	r3, #13
 80109d4:	18fb      	adds	r3, r7, r3
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	2b07      	cmp	r3, #7
 80109da:	d9de      	bls.n	801099a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80109dc:	210e      	movs	r1, #14
 80109de:	187b      	adds	r3, r7, r1
 80109e0:	781a      	ldrb	r2, [r3, #0]
 80109e2:	187b      	adds	r3, r7, r1
 80109e4:	3201      	adds	r2, #1
 80109e6:	701a      	strb	r2, [r3, #0]
 80109e8:	230e      	movs	r3, #14
 80109ea:	18fa      	adds	r2, r7, r3
 80109ec:	1cfb      	adds	r3, r7, #3
 80109ee:	7812      	ldrb	r2, [r2, #0]
 80109f0:	781b      	ldrb	r3, [r3, #0]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d3c0      	bcc.n	8010978 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80109f6:	230f      	movs	r3, #15
 80109f8:	18fb      	adds	r3, r7, r3
 80109fa:	781b      	ldrb	r3, [r3, #0]
}
 80109fc:	0018      	movs	r0, r3
 80109fe:	46bd      	mov	sp, r7
 8010a00:	b004      	add	sp, #16
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8010a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8010a38 <HIDS_Init+0x34>)
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8010a14:	4b09      	ldr	r3, [pc, #36]	@ (8010a3c <HIDS_Init+0x38>)
 8010a16:	683a      	ldr	r2, [r7, #0]
 8010a18:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8010a1a:	4b09      	ldr	r3, [pc, #36]	@ (8010a40 <HIDS_Init+0x3c>)
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	0018      	movs	r0, r3
 8010a20:	f000 f840 	bl	8010aa4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8010a24:	4b07      	ldr	r3, [pc, #28]	@ (8010a44 <HIDS_Init+0x40>)
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	0018      	movs	r0, r3
 8010a2a:	f000 f82b 	bl	8010a84 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8010a2e:	46c0      	nop			@ (mov r8, r8)
 8010a30:	46bd      	mov	sp, r7
 8010a32:	b002      	add	sp, #8
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	46c0      	nop			@ (mov r8, r8)
 8010a38:	20002178 	.word	0x20002178
 8010a3c:	2000217c 	.word	0x2000217c
 8010a40:	200000e2 	.word	0x200000e2
 8010a44:	200000e1 	.word	0x200000e1

08010a48 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8010a4c:	f000 fac2 	bl	8010fd4 <HAL_GetTick>
 8010a50:	0002      	movs	r2, r0
 8010a52:	4b08      	ldr	r3, [pc, #32]	@ (8010a74 <HIDS_StartMeasurement+0x2c>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	18d2      	adds	r2, r2, r3
 8010a58:	4b07      	ldr	r3, [pc, #28]	@ (8010a78 <HIDS_StartMeasurement+0x30>)
 8010a5a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8010a5c:	4b07      	ldr	r3, [pc, #28]	@ (8010a7c <HIDS_StartMeasurement+0x34>)
 8010a5e:	2201      	movs	r2, #1
 8010a60:	0019      	movs	r1, r3
 8010a62:	2044      	movs	r0, #68	@ 0x44
 8010a64:	f7ff ff56 	bl	8010914 <WriteRegister>
  MeasurementDone = false;
 8010a68:	4b05      	ldr	r3, [pc, #20]	@ (8010a80 <HIDS_StartMeasurement+0x38>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	701a      	strb	r2, [r3, #0]
}
 8010a6e:	46c0      	nop			@ (mov r8, r8)
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	200000e8 	.word	0x200000e8
 8010a78:	200000e4 	.word	0x200000e4
 8010a7c:	200000e2 	.word	0x200000e2
 8010a80:	2000218e 	.word	0x2000218e

08010a84 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	0002      	movs	r2, r0
 8010a8c:	1dfb      	adds	r3, r7, #7
 8010a8e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8010a90:	4b03      	ldr	r3, [pc, #12]	@ (8010aa0 <HIDS_SetHeaterMode+0x1c>)
 8010a92:	1dfa      	adds	r2, r7, #7
 8010a94:	7812      	ldrb	r2, [r2, #0]
 8010a96:	701a      	strb	r2, [r3, #0]
}
 8010a98:	46c0      	nop			@ (mov r8, r8)
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	b002      	add	sp, #8
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	200000e1 	.word	0x200000e1

08010aa4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	0002      	movs	r2, r0
 8010aac:	1dfb      	adds	r3, r7, #7
 8010aae:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8010ab0:	4b03      	ldr	r3, [pc, #12]	@ (8010ac0 <HIDS_SetMeasurementMode+0x1c>)
 8010ab2:	1dfa      	adds	r2, r7, #7
 8010ab4:	7812      	ldrb	r2, [r2, #0]
 8010ab6:	701a      	strb	r2, [r3, #0]
}
 8010ab8:	46c0      	nop			@ (mov r8, r8)
 8010aba:	46bd      	mov	sp, r7
 8010abc:	b002      	add	sp, #8
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	200000e2 	.word	0x200000e2

08010ac4 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8010acc:	f000 fa82 	bl	8010fd4 <HAL_GetTick>
 8010ad0:	0002      	movs	r2, r0
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	18d2      	adds	r2, r2, r3
 8010ad6:	4b03      	ldr	r3, [pc, #12]	@ (8010ae4 <setHIDSTimeStamp+0x20>)
 8010ad8:	601a      	str	r2, [r3, #0]
}
 8010ada:	46c0      	nop			@ (mov r8, r8)
 8010adc:	46bd      	mov	sp, r7
 8010ade:	b002      	add	sp, #8
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	46c0      	nop			@ (mov r8, r8)
 8010ae4:	20002190 	.word	0x20002190

08010ae8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8010ae8:	b590      	push	{r4, r7, lr}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	781a      	ldrb	r2, [r3, #0]
 8010af4:	210c      	movs	r1, #12
 8010af6:	187b      	adds	r3, r7, r1
 8010af8:	701a      	strb	r2, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	785a      	ldrb	r2, [r3, #1]
 8010afe:	187b      	adds	r3, r7, r1
 8010b00:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8010b02:	240f      	movs	r4, #15
 8010b04:	193b      	adds	r3, r7, r4
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	7892      	ldrb	r2, [r2, #2]
 8010b0a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8010b0c:	187b      	adds	r3, r7, r1
 8010b0e:	2102      	movs	r1, #2
 8010b10:	0018      	movs	r0, r3
 8010b12:	f7ff ff21 	bl	8010958 <CalculateCRC>
 8010b16:	0003      	movs	r3, r0
 8010b18:	001a      	movs	r2, r3
 8010b1a:	193b      	adds	r3, r7, r4
 8010b1c:	781b      	ldrb	r3, [r3, #0]
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d007      	beq.n	8010b32 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8010b22:	4a1a      	ldr	r2, [pc, #104]	@ (8010b8c <CheckCRC+0xa4>)
 8010b24:	4b1a      	ldr	r3, [pc, #104]	@ (8010b90 <CheckCRC+0xa8>)
 8010b26:	0019      	movs	r1, r3
 8010b28:	2001      	movs	r0, #1
 8010b2a:	f7ff fe07 	bl	801073c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	e027      	b.n	8010b82 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	78da      	ldrb	r2, [r3, #3]
 8010b36:	2108      	movs	r1, #8
 8010b38:	187b      	adds	r3, r7, r1
 8010b3a:	701a      	strb	r2, [r3, #0]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	791a      	ldrb	r2, [r3, #4]
 8010b40:	187b      	adds	r3, r7, r1
 8010b42:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8010b44:	240e      	movs	r4, #14
 8010b46:	193b      	adds	r3, r7, r4
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	7952      	ldrb	r2, [r2, #5]
 8010b4c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8010b4e:	187b      	adds	r3, r7, r1
 8010b50:	2102      	movs	r1, #2
 8010b52:	0018      	movs	r0, r3
 8010b54:	f7ff ff00 	bl	8010958 <CalculateCRC>
 8010b58:	0003      	movs	r3, r0
 8010b5a:	001a      	movs	r2, r3
 8010b5c:	193b      	adds	r3, r7, r4
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d00d      	beq.n	8010b80 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8010b64:	4a0b      	ldr	r2, [pc, #44]	@ (8010b94 <CheckCRC+0xac>)
 8010b66:	4b0a      	ldr	r3, [pc, #40]	@ (8010b90 <CheckCRC+0xa8>)
 8010b68:	0019      	movs	r1, r3
 8010b6a:	2001      	movs	r0, #1
 8010b6c:	f7ff fde6 	bl	801073c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8010b70:	4a09      	ldr	r2, [pc, #36]	@ (8010b98 <CheckCRC+0xb0>)
 8010b72:	4b0a      	ldr	r3, [pc, #40]	@ (8010b9c <CheckCRC+0xb4>)
 8010b74:	217d      	movs	r1, #125	@ 0x7d
 8010b76:	0018      	movs	r0, r3
 8010b78:	f7ff fe98 	bl	80108ac <errorHandler>
		return false;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	e000      	b.n	8010b82 <CheckCRC+0x9a>
	}
	return true;
 8010b80:	2301      	movs	r3, #1
}
 8010b82:	0018      	movs	r0, r3
 8010b84:	46bd      	mov	sp, r7
 8010b86:	b005      	add	sp, #20
 8010b88:	bd90      	pop	{r4, r7, pc}
 8010b8a:	46c0      	nop			@ (mov r8, r8)
 8010b8c:	08028768 	.word	0x08028768
 8010b90:	08028790 	.word	0x08028790
 8010b94:	08028794 	.word	0x08028794
 8010b98:	080287c0 	.word	0x080287c0
 8010b9c:	08028dd8 	.word	0x08028dd8

08010ba0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8010ba6:	1dbb      	adds	r3, r7, #6
 8010ba8:	2289      	movs	r2, #137	@ 0x89
 8010baa:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8010bac:	1dbb      	adds	r3, r7, #6
 8010bae:	2201      	movs	r2, #1
 8010bb0:	0019      	movs	r1, r3
 8010bb2:	2044      	movs	r0, #68	@ 0x44
 8010bb4:	f7ff feae 	bl	8010914 <WriteRegister>
	HAL_Delay(30);
 8010bb8:	201e      	movs	r0, #30
 8010bba:	f000 fa15 	bl	8010fe8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8010bbe:	4b14      	ldr	r3, [pc, #80]	@ (8010c10 <HIDS_DeviceConnected+0x70>)
 8010bc0:	2206      	movs	r2, #6
 8010bc2:	0019      	movs	r1, r3
 8010bc4:	2044      	movs	r0, #68	@ 0x44
 8010bc6:	f7ff fe83 	bl	80108d0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8010bca:	1dfb      	adds	r3, r7, #7
 8010bcc:	2200      	movs	r2, #0
 8010bce:	701a      	strb	r2, [r3, #0]
 8010bd0:	e011      	b.n	8010bf6 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8010bd2:	1dfb      	adds	r3, r7, #7
 8010bd4:	7818      	ldrb	r0, [r3, #0]
 8010bd6:	1dfb      	adds	r3, r7, #7
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	4a0d      	ldr	r2, [pc, #52]	@ (8010c10 <HIDS_DeviceConnected+0x70>)
 8010bdc:	5cd3      	ldrb	r3, [r2, r3]
 8010bde:	4a0d      	ldr	r2, [pc, #52]	@ (8010c14 <HIDS_DeviceConnected+0x74>)
 8010be0:	490d      	ldr	r1, [pc, #52]	@ (8010c18 <HIDS_DeviceConnected+0x78>)
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	0003      	movs	r3, r0
 8010be6:	2002      	movs	r0, #2
 8010be8:	f7ff fda8 	bl	801073c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8010bec:	1dfb      	adds	r3, r7, #7
 8010bee:	781a      	ldrb	r2, [r3, #0]
 8010bf0:	1dfb      	adds	r3, r7, #7
 8010bf2:	3201      	adds	r2, #1
 8010bf4:	701a      	strb	r2, [r3, #0]
 8010bf6:	1dfb      	adds	r3, r7, #7
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	2b05      	cmp	r3, #5
 8010bfc:	d9e9      	bls.n	8010bd2 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8010bfe:	4b04      	ldr	r3, [pc, #16]	@ (8010c10 <HIDS_DeviceConnected+0x70>)
 8010c00:	0018      	movs	r0, r3
 8010c02:	f7ff ff71 	bl	8010ae8 <CheckCRC>
 8010c06:	0003      	movs	r3, r0
}
 8010c08:	0018      	movs	r0, r3
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	b002      	add	sp, #8
 8010c0e:	bd80      	pop	{r7, pc}
 8010c10:	20002180 	.word	0x20002180
 8010c14:	080287d8 	.word	0x080287d8
 8010c18:	08028764 	.word	0x08028764

08010c1c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8010c20:	4b04      	ldr	r3, [pc, #16]	@ (8010c34 <HIDS_MeasurementReady+0x18>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	0018      	movs	r0, r3
 8010c26:	f7ff fd33 	bl	8010690 <TimestampIsReached>
 8010c2a:	0003      	movs	r3, r0
}
 8010c2c:	0018      	movs	r0, r3
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	46c0      	nop			@ (mov r8, r8)
 8010c34:	200000e4 	.word	0x200000e4

08010c38 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8010c42:	4b41      	ldr	r3, [pc, #260]	@ (8010d48 <HIDS_GetMeasurementValues+0x110>)
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d001      	beq.n	8010c4e <HIDS_GetMeasurementValues+0x16>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	e077      	b.n	8010d3e <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8010c4e:	f7ff ffe5 	bl	8010c1c <HIDS_MeasurementReady>
 8010c52:	0003      	movs	r3, r0
 8010c54:	001a      	movs	r2, r3
 8010c56:	2301      	movs	r3, #1
 8010c58:	4053      	eors	r3, r2
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d001      	beq.n	8010c64 <HIDS_GetMeasurementValues+0x2c>
 8010c60:	2300      	movs	r3, #0
 8010c62:	e06c      	b.n	8010d3e <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8010c64:	4b39      	ldr	r3, [pc, #228]	@ (8010d4c <HIDS_GetMeasurementValues+0x114>)
 8010c66:	2206      	movs	r2, #6
 8010c68:	0019      	movs	r1, r3
 8010c6a:	2044      	movs	r0, #68	@ 0x44
 8010c6c:	f7ff fe30 	bl	80108d0 <ReadRegister>
 8010c70:	0003      	movs	r3, r0
 8010c72:	001a      	movs	r2, r3
 8010c74:	2301      	movs	r3, #1
 8010c76:	4053      	eors	r3, r2
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d005      	beq.n	8010c8a <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8010c7e:	4a34      	ldr	r2, [pc, #208]	@ (8010d50 <HIDS_GetMeasurementValues+0x118>)
 8010c80:	4b34      	ldr	r3, [pc, #208]	@ (8010d54 <HIDS_GetMeasurementValues+0x11c>)
 8010c82:	0019      	movs	r1, r3
 8010c84:	2001      	movs	r0, #1
 8010c86:	f7ff fd59 	bl	801073c <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8010c8a:	4b30      	ldr	r3, [pc, #192]	@ (8010d4c <HIDS_GetMeasurementValues+0x114>)
 8010c8c:	0018      	movs	r0, r3
 8010c8e:	f7ff ff2b 	bl	8010ae8 <CheckCRC>
 8010c92:	0003      	movs	r3, r0
 8010c94:	001a      	movs	r2, r3
 8010c96:	2301      	movs	r3, #1
 8010c98:	4053      	eors	r3, r2
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d001      	beq.n	8010ca4 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	e04c      	b.n	8010d3e <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8010ca4:	4b29      	ldr	r3, [pc, #164]	@ (8010d4c <HIDS_GetMeasurementValues+0x114>)
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	021b      	lsls	r3, r3, #8
 8010caa:	4a28      	ldr	r2, [pc, #160]	@ (8010d4c <HIDS_GetMeasurementValues+0x114>)
 8010cac:	7852      	ldrb	r2, [r2, #1]
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	22af      	movs	r2, #175	@ 0xaf
 8010cb2:	4353      	muls	r3, r2
 8010cb4:	0018      	movs	r0, r3
 8010cb6:	f7f2 fb83 	bl	80033c0 <__aeabi_i2d>
 8010cba:	2200      	movs	r2, #0
 8010cbc:	4b26      	ldr	r3, [pc, #152]	@ (8010d58 <HIDS_GetMeasurementValues+0x120>)
 8010cbe:	f7f1 f879 	bl	8001db4 <__aeabi_ddiv>
 8010cc2:	0002      	movs	r2, r0
 8010cc4:	000b      	movs	r3, r1
 8010cc6:	0010      	movs	r0, r2
 8010cc8:	0019      	movs	r1, r3
 8010cca:	f7f2 fc13 	bl	80034f4 <__aeabi_d2f>
 8010cce:	1c03      	adds	r3, r0, #0
 8010cd0:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8010cd2:	4922      	ldr	r1, [pc, #136]	@ (8010d5c <HIDS_GetMeasurementValues+0x124>)
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	f7f0 faa1 	bl	800121c <__aeabi_fsub>
 8010cda:	1c03      	adds	r3, r0, #0
 8010cdc:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8010cde:	4b1b      	ldr	r3, [pc, #108]	@ (8010d4c <HIDS_GetMeasurementValues+0x114>)
 8010ce0:	78db      	ldrb	r3, [r3, #3]
 8010ce2:	021b      	lsls	r3, r3, #8
 8010ce4:	4a19      	ldr	r2, [pc, #100]	@ (8010d4c <HIDS_GetMeasurementValues+0x114>)
 8010ce6:	7912      	ldrb	r2, [r2, #4]
 8010ce8:	431a      	orrs	r2, r3
 8010cea:	0013      	movs	r3, r2
 8010cec:	015b      	lsls	r3, r3, #5
 8010cee:	1a9b      	subs	r3, r3, r2
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	189b      	adds	r3, r3, r2
 8010cf4:	0018      	movs	r0, r3
 8010cf6:	f7f2 fb63 	bl	80033c0 <__aeabi_i2d>
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	4b16      	ldr	r3, [pc, #88]	@ (8010d58 <HIDS_GetMeasurementValues+0x120>)
 8010cfe:	f7f1 f859 	bl	8001db4 <__aeabi_ddiv>
 8010d02:	0002      	movs	r2, r0
 8010d04:	000b      	movs	r3, r1
 8010d06:	0010      	movs	r0, r2
 8010d08:	0019      	movs	r1, r3
 8010d0a:	f7f2 fbf3 	bl	80034f4 <__aeabi_d2f>
 8010d0e:	1c03      	adds	r3, r0, #0
 8010d10:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8010d12:	4913      	ldr	r1, [pc, #76]	@ (8010d60 <HIDS_GetMeasurementValues+0x128>)
 8010d14:	68b8      	ldr	r0, [r7, #8]
 8010d16:	f7f0 fa81 	bl	800121c <__aeabi_fsub>
 8010d1a:	1c03      	adds	r3, r0, #0
 8010d1c:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	68fa      	ldr	r2, [r7, #12]
 8010d22:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	68ba      	ldr	r2, [r7, #8]
 8010d28:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	0011      	movs	r1, r2
 8010d30:	0018      	movs	r0, r3
 8010d32:	f7fd f90b 	bl	800df4c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8010d36:	4b04      	ldr	r3, [pc, #16]	@ (8010d48 <HIDS_GetMeasurementValues+0x110>)
 8010d38:	2201      	movs	r2, #1
 8010d3a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8010d3c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8010d3e:	0018      	movs	r0, r3
 8010d40:	46bd      	mov	sp, r7
 8010d42:	b004      	add	sp, #16
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	46c0      	nop			@ (mov r8, r8)
 8010d48:	2000218e 	.word	0x2000218e
 8010d4c:	20002188 	.word	0x20002188
 8010d50:	080287f8 	.word	0x080287f8
 8010d54:	08028790 	.word	0x08028790
 8010d58:	40efffe0 	.word	0x40efffe0
 8010d5c:	42340000 	.word	0x42340000
 8010d60:	40c00000 	.word	0x40c00000

08010d64 <ResetHIDSresults>:

void ResetHIDSresults() {
 8010d64:	b580      	push	{r7, lr}
 8010d66:	af00      	add	r7, sp, #0
  humid = 0.0;
 8010d68:	4b04      	ldr	r3, [pc, #16]	@ (8010d7c <ResetHIDSresults+0x18>)
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8010d6e:	4b04      	ldr	r3, [pc, #16]	@ (8010d80 <ResetHIDSresults+0x1c>)
 8010d70:	2200      	movs	r2, #0
 8010d72:	601a      	str	r2, [r3, #0]
}
 8010d74:	46c0      	nop			@ (mov r8, r8)
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	46c0      	nop			@ (mov r8, r8)
 8010d7c:	20002170 	.word	0x20002170
 8010d80:	20002174 	.word	0x20002174

08010d84 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8010d84:	b5b0      	push	{r4, r5, r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8010d8a:	4b40      	ldr	r3, [pc, #256]	@ (8010e8c <HIDS_Upkeep+0x108>)
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	2b06      	cmp	r3, #6
 8010d90:	d900      	bls.n	8010d94 <HIDS_Upkeep+0x10>
 8010d92:	e06e      	b.n	8010e72 <HIDS_Upkeep+0xee>
 8010d94:	009a      	lsls	r2, r3, #2
 8010d96:	4b3e      	ldr	r3, [pc, #248]	@ (8010e90 <HIDS_Upkeep+0x10c>)
 8010d98:	18d3      	adds	r3, r2, r3
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8010d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8010e94 <HIDS_Upkeep+0x110>)
 8010da0:	4b3d      	ldr	r3, [pc, #244]	@ (8010e98 <HIDS_Upkeep+0x114>)
 8010da2:	0019      	movs	r1, r3
 8010da4:	2003      	movs	r0, #3
 8010da6:	f7ff fcc9 	bl	801073c <CreateLine>
      break;
 8010daa:	e069      	b.n	8010e80 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8010dac:	f7ff ffda 	bl	8010d64 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8010db0:	4b36      	ldr	r3, [pc, #216]	@ (8010e8c <HIDS_Upkeep+0x108>)
 8010db2:	2201      	movs	r2, #1
 8010db4:	701a      	strb	r2, [r3, #0]
      break;
 8010db6:	e063      	b.n	8010e80 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 8010db8:	f7fe fb0a 	bl	800f3d0 <SetMeasurementIndicator>
      setSensorLock(HIDS);
 8010dbc:	2001      	movs	r0, #1
 8010dbe:	f7f9 fe25 	bl	800aa0c <setSensorLock>
      HIDS_StartMeasurement();
 8010dc2:	f7ff fe41 	bl	8010a48 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8010dc6:	4b31      	ldr	r3, [pc, #196]	@ (8010e8c <HIDS_Upkeep+0x108>)
 8010dc8:	2202      	movs	r2, #2
 8010dca:	701a      	strb	r2, [r3, #0]
      break;
 8010dcc:	e058      	b.n	8010e80 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8010dce:	4a33      	ldr	r2, [pc, #204]	@ (8010e9c <HIDS_Upkeep+0x118>)
 8010dd0:	4b33      	ldr	r3, [pc, #204]	@ (8010ea0 <HIDS_Upkeep+0x11c>)
 8010dd2:	0011      	movs	r1, r2
 8010dd4:	0018      	movs	r0, r3
 8010dd6:	f7ff ff2f 	bl	8010c38 <HIDS_GetMeasurementValues>
 8010dda:	1e03      	subs	r3, r0, #0
 8010ddc:	d04d      	beq.n	8010e7a <HIDS_Upkeep+0xf6>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8010dde:	4b2b      	ldr	r3, [pc, #172]	@ (8010e8c <HIDS_Upkeep+0x108>)
 8010de0:	2203      	movs	r2, #3
 8010de2:	701a      	strb	r2, [r3, #0]
        setSensorLock(FREE);
 8010de4:	2000      	movs	r0, #0
 8010de6:	f7f9 fe11 	bl	800aa0c <setSensorLock>
      }
      break;
 8010dea:	e046      	b.n	8010e7a <HIDS_Upkeep+0xf6>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8010dec:	4b2c      	ldr	r3, [pc, #176]	@ (8010ea0 <HIDS_Upkeep+0x11c>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	1c18      	adds	r0, r3, #0
 8010df2:	f7f2 fb37 	bl	8003464 <__aeabi_f2d>
 8010df6:	0004      	movs	r4, r0
 8010df8:	000d      	movs	r5, r1
 8010dfa:	4b28      	ldr	r3, [pc, #160]	@ (8010e9c <HIDS_Upkeep+0x118>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	1c18      	adds	r0, r3, #0
 8010e00:	f7f2 fb30 	bl	8003464 <__aeabi_f2d>
 8010e04:	0002      	movs	r2, r0
 8010e06:	000b      	movs	r3, r1
 8010e08:	4826      	ldr	r0, [pc, #152]	@ (8010ea4 <HIDS_Upkeep+0x120>)
 8010e0a:	4923      	ldr	r1, [pc, #140]	@ (8010e98 <HIDS_Upkeep+0x114>)
 8010e0c:	9202      	str	r2, [sp, #8]
 8010e0e:	9303      	str	r3, [sp, #12]
 8010e10:	9400      	str	r4, [sp, #0]
 8010e12:	9501      	str	r5, [sp, #4]
 8010e14:	0002      	movs	r2, r0
 8010e16:	2003      	movs	r0, #3
 8010e18:	f7ff fc90 	bl	801073c <CreateLine>
      setHIDS(temp, humid);
 8010e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8010e9c <HIDS_Upkeep+0x118>)
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	4b1f      	ldr	r3, [pc, #124]	@ (8010ea0 <HIDS_Upkeep+0x11c>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	1c19      	adds	r1, r3, #0
 8010e26:	1c10      	adds	r0, r2, #0
 8010e28:	f7f2 fcbe 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 8010e2c:	f7fe fae8 	bl	800f400 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8010e30:	f000 f8d0 	bl	8010fd4 <HAL_GetTick>
 8010e34:	0004      	movs	r4, r0
 8010e36:	f7f6 f8bd 	bl	8006fb4 <Check_USB_PowerOn>
 8010e3a:	1e03      	subs	r3, r0, #0
 8010e3c:	d103      	bne.n	8010e46 <HIDS_Upkeep+0xc2>
 8010e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ea8 <HIDS_Upkeep+0x124>)
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <HIDS_Upkeep+0xc6>
 8010e46:	4b19      	ldr	r3, [pc, #100]	@ (8010eac <HIDS_Upkeep+0x128>)
 8010e48:	e001      	b.n	8010e4e <HIDS_Upkeep+0xca>
 8010e4a:	23fa      	movs	r3, #250	@ 0xfa
 8010e4c:	009b      	lsls	r3, r3, #2
 8010e4e:	191a      	adds	r2, r3, r4
 8010e50:	4b17      	ldr	r3, [pc, #92]	@ (8010eb0 <HIDS_Upkeep+0x12c>)
 8010e52:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 8010e54:	4b0d      	ldr	r3, [pc, #52]	@ (8010e8c <HIDS_Upkeep+0x108>)
 8010e56:	2206      	movs	r2, #6
 8010e58:	701a      	strb	r2, [r3, #0]
      break;
 8010e5a:	e011      	b.n	8010e80 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8010e5c:	4b14      	ldr	r3, [pc, #80]	@ (8010eb0 <HIDS_Upkeep+0x12c>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	0018      	movs	r0, r3
 8010e62:	f7ff fc15 	bl	8010690 <TimestampIsReached>
 8010e66:	1e03      	subs	r3, r0, #0
 8010e68:	d009      	beq.n	8010e7e <HIDS_Upkeep+0xfa>
        HIDSState = HIDS_STATE_INIT;
 8010e6a:	4b08      	ldr	r3, [pc, #32]	@ (8010e8c <HIDS_Upkeep+0x108>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010e70:	e005      	b.n	8010e7e <HIDS_Upkeep+0xfa>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8010e72:	4b06      	ldr	r3, [pc, #24]	@ (8010e8c <HIDS_Upkeep+0x108>)
 8010e74:	2200      	movs	r2, #0
 8010e76:	701a      	strb	r2, [r3, #0]
      break;
 8010e78:	e002      	b.n	8010e80 <HIDS_Upkeep+0xfc>
      break;
 8010e7a:	46c0      	nop			@ (mov r8, r8)
 8010e7c:	e000      	b.n	8010e80 <HIDS_Upkeep+0xfc>
      break;
 8010e7e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8010e80:	4b02      	ldr	r3, [pc, #8]	@ (8010e8c <HIDS_Upkeep+0x108>)
 8010e82:	781b      	ldrb	r3, [r3, #0]
}
 8010e84:	0018      	movs	r0, r3
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bdb0      	pop	{r4, r5, r7, pc}
 8010e8a:	46c0      	nop			@ (mov r8, r8)
 8010e8c:	20002194 	.word	0x20002194
 8010e90:	08028dbc 	.word	0x08028dbc
 8010e94:	0802882c 	.word	0x0802882c
 8010e98:	08028860 	.word	0x08028860
 8010e9c:	20002174 	.word	0x20002174
 8010ea0:	20002170 	.word	0x20002170
 8010ea4:	08028864 	.word	0x08028864
 8010ea8:	20001dda 	.word	0x20001dda
 8010eac:	00002710 	.word	0x00002710
 8010eb0:	20002190 	.word	0x20002190

08010eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8010eb4:	480d      	ldr	r0, [pc, #52]	@ (8010eec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8010eb6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8010eb8:	f7ff f844 	bl	800ff44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010ebc:	480c      	ldr	r0, [pc, #48]	@ (8010ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8010ebe:	490d      	ldr	r1, [pc, #52]	@ (8010ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8010ef8 <LoopForever+0xe>)
  movs r3, #0
 8010ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010ec4:	e002      	b.n	8010ecc <LoopCopyDataInit>

08010ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010eca:	3304      	adds	r3, #4

08010ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010ed0:	d3f9      	bcc.n	8010ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8010efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8010ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8010f00 <LoopForever+0x16>)
  movs r3, #0
 8010ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010ed8:	e001      	b.n	8010ede <LoopFillZerobss>

08010eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010edc:	3204      	adds	r2, #4

08010ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010ee0:	d3fb      	bcc.n	8010eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010ee2:	f011 fe33 	bl	8022b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010ee6:	f7f8 fe75 	bl	8009bd4 <main>

08010eea <LoopForever>:

LoopForever:
    b LoopForever
 8010eea:	e7fe      	b.n	8010eea <LoopForever>
   ldr   r0, =_estack
 8010eec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8010ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010ef4:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8010ef8:	08029758 	.word	0x08029758
  ldr r2, =_sbss
 8010efc:	20000434 	.word	0x20000434
  ldr r4, =_ebss
 8010f00:	2000359c 	.word	0x2000359c

08010f04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010f04:	e7fe      	b.n	8010f04 <ADC1_COMP_IRQHandler>
	...

08010f08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8010f0e:	1dfb      	adds	r3, r7, #7
 8010f10:	2200      	movs	r2, #0
 8010f12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8010f14:	4b0b      	ldr	r3, [pc, #44]	@ (8010f44 <HAL_Init+0x3c>)
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	4b0a      	ldr	r3, [pc, #40]	@ (8010f44 <HAL_Init+0x3c>)
 8010f1a:	2140      	movs	r1, #64	@ 0x40
 8010f1c:	430a      	orrs	r2, r1
 8010f1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010f20:	2003      	movs	r0, #3
 8010f22:	f000 f811 	bl	8010f48 <HAL_InitTick>
 8010f26:	1e03      	subs	r3, r0, #0
 8010f28:	d003      	beq.n	8010f32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8010f2a:	1dfb      	adds	r3, r7, #7
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	701a      	strb	r2, [r3, #0]
 8010f30:	e001      	b.n	8010f36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8010f32:	f7fe febb 	bl	800fcac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8010f36:	1dfb      	adds	r3, r7, #7
 8010f38:	781b      	ldrb	r3, [r3, #0]
}
 8010f3a:	0018      	movs	r0, r3
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	b002      	add	sp, #8
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	46c0      	nop			@ (mov r8, r8)
 8010f44:	40022000 	.word	0x40022000

08010f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010f48:	b590      	push	{r4, r7, lr}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010f50:	4b14      	ldr	r3, [pc, #80]	@ (8010fa4 <HAL_InitTick+0x5c>)
 8010f52:	681c      	ldr	r4, [r3, #0]
 8010f54:	4b14      	ldr	r3, [pc, #80]	@ (8010fa8 <HAL_InitTick+0x60>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	0019      	movs	r1, r3
 8010f5a:	23fa      	movs	r3, #250	@ 0xfa
 8010f5c:	0098      	lsls	r0, r3, #2
 8010f5e:	f7ef f921 	bl	80001a4 <__udivsi3>
 8010f62:	0003      	movs	r3, r0
 8010f64:	0019      	movs	r1, r3
 8010f66:	0020      	movs	r0, r4
 8010f68:	f7ef f91c 	bl	80001a4 <__udivsi3>
 8010f6c:	0003      	movs	r3, r0
 8010f6e:	0018      	movs	r0, r3
 8010f70:	f000 fcfd 	bl	801196e <HAL_SYSTICK_Config>
 8010f74:	1e03      	subs	r3, r0, #0
 8010f76:	d001      	beq.n	8010f7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e00f      	b.n	8010f9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2b03      	cmp	r3, #3
 8010f80:	d80b      	bhi.n	8010f9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010f82:	6879      	ldr	r1, [r7, #4]
 8010f84:	2301      	movs	r3, #1
 8010f86:	425b      	negs	r3, r3
 8010f88:	2200      	movs	r2, #0
 8010f8a:	0018      	movs	r0, r3
 8010f8c:	f000 fcc6 	bl	801191c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010f90:	4b06      	ldr	r3, [pc, #24]	@ (8010fac <HAL_InitTick+0x64>)
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010f96:	2300      	movs	r3, #0
 8010f98:	e000      	b.n	8010f9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
}
 8010f9c:	0018      	movs	r0, r3
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	b003      	add	sp, #12
 8010fa2:	bd90      	pop	{r4, r7, pc}
 8010fa4:	200000dc 	.word	0x200000dc
 8010fa8:	200000f0 	.word	0x200000f0
 8010fac:	200000ec 	.word	0x200000ec

08010fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010fb4:	4b05      	ldr	r3, [pc, #20]	@ (8010fcc <HAL_IncTick+0x1c>)
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	001a      	movs	r2, r3
 8010fba:	4b05      	ldr	r3, [pc, #20]	@ (8010fd0 <HAL_IncTick+0x20>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	18d2      	adds	r2, r2, r3
 8010fc0:	4b03      	ldr	r3, [pc, #12]	@ (8010fd0 <HAL_IncTick+0x20>)
 8010fc2:	601a      	str	r2, [r3, #0]
}
 8010fc4:	46c0      	nop			@ (mov r8, r8)
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	46c0      	nop			@ (mov r8, r8)
 8010fcc:	200000f0 	.word	0x200000f0
 8010fd0:	20002198 	.word	0x20002198

08010fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8010fd8:	4b02      	ldr	r3, [pc, #8]	@ (8010fe4 <HAL_GetTick+0x10>)
 8010fda:	681b      	ldr	r3, [r3, #0]
}
 8010fdc:	0018      	movs	r0, r3
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	46c0      	nop			@ (mov r8, r8)
 8010fe4:	20002198 	.word	0x20002198

08010fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010ff0:	f7ff fff0 	bl	8010fd4 <HAL_GetTick>
 8010ff4:	0003      	movs	r3, r0
 8010ff6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	3301      	adds	r3, #1
 8011000:	d005      	beq.n	801100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011002:	4b0a      	ldr	r3, [pc, #40]	@ (801102c <HAL_Delay+0x44>)
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	001a      	movs	r2, r3
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	189b      	adds	r3, r3, r2
 801100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801100e:	46c0      	nop			@ (mov r8, r8)
 8011010:	f7ff ffe0 	bl	8010fd4 <HAL_GetTick>
 8011014:	0002      	movs	r2, r0
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	1ad3      	subs	r3, r2, r3
 801101a:	68fa      	ldr	r2, [r7, #12]
 801101c:	429a      	cmp	r2, r3
 801101e:	d8f7      	bhi.n	8011010 <HAL_Delay+0x28>
  {
  }
}
 8011020:	46c0      	nop			@ (mov r8, r8)
 8011022:	46c0      	nop			@ (mov r8, r8)
 8011024:	46bd      	mov	sp, r7
 8011026:	b004      	add	sp, #16
 8011028:	bd80      	pop	{r7, pc}
 801102a:	46c0      	nop			@ (mov r8, r8)
 801102c:	200000f0 	.word	0x200000f0

08011030 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8011034:	4b04      	ldr	r3, [pc, #16]	@ (8011048 <HAL_SuspendTick+0x18>)
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	4b03      	ldr	r3, [pc, #12]	@ (8011048 <HAL_SuspendTick+0x18>)
 801103a:	2102      	movs	r1, #2
 801103c:	438a      	bics	r2, r1
 801103e:	601a      	str	r2, [r3, #0]
}
 8011040:	46c0      	nop			@ (mov r8, r8)
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
 8011046:	46c0      	nop			@ (mov r8, r8)
 8011048:	e000e010 	.word	0xe000e010

0801104c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8011050:	4b04      	ldr	r3, [pc, #16]	@ (8011064 <HAL_ResumeTick+0x18>)
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	4b03      	ldr	r3, [pc, #12]	@ (8011064 <HAL_ResumeTick+0x18>)
 8011056:	2102      	movs	r1, #2
 8011058:	430a      	orrs	r2, r1
 801105a:	601a      	str	r2, [r3, #0]
}
 801105c:	46c0      	nop			@ (mov r8, r8)
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	46c0      	nop			@ (mov r8, r8)
 8011064:	e000e010 	.word	0xe000e010

08011068 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 801106c:	4b02      	ldr	r3, [pc, #8]	@ (8011078 <HAL_GetUIDw0+0x10>)
 801106e:	681b      	ldr	r3, [r3, #0]
}
 8011070:	0018      	movs	r0, r3
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	46c0      	nop			@ (mov r8, r8)
 8011078:	1ff80050 	.word	0x1ff80050

0801107c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8011080:	4b02      	ldr	r3, [pc, #8]	@ (801108c <HAL_GetUIDw1+0x10>)
 8011082:	681b      	ldr	r3, [r3, #0]
}
 8011084:	0018      	movs	r0, r3
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
 801108a:	46c0      	nop			@ (mov r8, r8)
 801108c:	1ff80054 	.word	0x1ff80054

08011090 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8011094:	4b02      	ldr	r3, [pc, #8]	@ (80110a0 <HAL_GetUIDw2+0x10>)
 8011096:	681b      	ldr	r3, [r3, #0]
}
 8011098:	0018      	movs	r0, r3
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	46c0      	nop			@ (mov r8, r8)
 80110a0:	1ff80064 	.word	0x1ff80064

080110a4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d101      	bne.n	80110b6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80110b2:	2301      	movs	r3, #1
 80110b4:	e159      	b.n	801136a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10a      	bne.n	80110d4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2250      	movs	r2, #80	@ 0x50
 80110c8:	2100      	movs	r1, #0
 80110ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	0018      	movs	r0, r3
 80110d0:	f7f6 fe0e 	bl	8007cf0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110d8:	2210      	movs	r2, #16
 80110da:	4013      	ands	r3, r2
 80110dc:	2b10      	cmp	r3, #16
 80110de:	d005      	beq.n	80110ec <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	689b      	ldr	r3, [r3, #8]
 80110e6:	2204      	movs	r2, #4
 80110e8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80110ea:	d00b      	beq.n	8011104 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110f0:	2210      	movs	r2, #16
 80110f2:	431a      	orrs	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2250      	movs	r2, #80	@ 0x50
 80110fc:	2100      	movs	r1, #0
 80110fe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8011100:	2301      	movs	r3, #1
 8011102:	e132      	b.n	801136a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011108:	4a9a      	ldr	r2, [pc, #616]	@ (8011374 <HAL_ADC_Init+0x2d0>)
 801110a:	4013      	ands	r3, r2
 801110c:	2202      	movs	r2, #2
 801110e:	431a      	orrs	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	689b      	ldr	r3, [r3, #8]
 801111a:	2203      	movs	r2, #3
 801111c:	4013      	ands	r3, r2
 801111e:	2b01      	cmp	r3, #1
 8011120:	d108      	bne.n	8011134 <HAL_ADC_Init+0x90>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2201      	movs	r2, #1
 801112a:	4013      	ands	r3, r2
 801112c:	2b01      	cmp	r3, #1
 801112e:	d101      	bne.n	8011134 <HAL_ADC_Init+0x90>
 8011130:	2301      	movs	r3, #1
 8011132:	e000      	b.n	8011136 <HAL_ADC_Init+0x92>
 8011134:	2300      	movs	r3, #0
 8011136:	2b00      	cmp	r3, #0
 8011138:	d149      	bne.n	80111ce <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	685a      	ldr	r2, [r3, #4]
 801113e:	23c0      	movs	r3, #192	@ 0xc0
 8011140:	061b      	lsls	r3, r3, #24
 8011142:	429a      	cmp	r2, r3
 8011144:	d00b      	beq.n	801115e <HAL_ADC_Init+0xba>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	685a      	ldr	r2, [r3, #4]
 801114a:	2380      	movs	r3, #128	@ 0x80
 801114c:	05db      	lsls	r3, r3, #23
 801114e:	429a      	cmp	r2, r3
 8011150:	d005      	beq.n	801115e <HAL_ADC_Init+0xba>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	685a      	ldr	r2, [r3, #4]
 8011156:	2380      	movs	r3, #128	@ 0x80
 8011158:	061b      	lsls	r3, r3, #24
 801115a:	429a      	cmp	r2, r3
 801115c:	d111      	bne.n	8011182 <HAL_ADC_Init+0xde>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	691a      	ldr	r2, [r3, #16]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	0092      	lsls	r2, r2, #2
 801116a:	0892      	lsrs	r2, r2, #2
 801116c:	611a      	str	r2, [r3, #16]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	6919      	ldr	r1, [r3, #16]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	685a      	ldr	r2, [r3, #4]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	430a      	orrs	r2, r1
 801117e:	611a      	str	r2, [r3, #16]
 8011180:	e014      	b.n	80111ac <HAL_ADC_Init+0x108>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	691a      	ldr	r2, [r3, #16]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	0092      	lsls	r2, r2, #2
 801118e:	0892      	lsrs	r2, r2, #2
 8011190:	611a      	str	r2, [r3, #16]
 8011192:	4b79      	ldr	r3, [pc, #484]	@ (8011378 <HAL_ADC_Init+0x2d4>)
 8011194:	681a      	ldr	r2, [r3, #0]
 8011196:	4b78      	ldr	r3, [pc, #480]	@ (8011378 <HAL_ADC_Init+0x2d4>)
 8011198:	4978      	ldr	r1, [pc, #480]	@ (801137c <HAL_ADC_Init+0x2d8>)
 801119a:	400a      	ands	r2, r1
 801119c:	601a      	str	r2, [r3, #0]
 801119e:	4b76      	ldr	r3, [pc, #472]	@ (8011378 <HAL_ADC_Init+0x2d4>)
 80111a0:	6819      	ldr	r1, [r3, #0]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	685a      	ldr	r2, [r3, #4]
 80111a6:	4b74      	ldr	r3, [pc, #464]	@ (8011378 <HAL_ADC_Init+0x2d4>)
 80111a8:	430a      	orrs	r2, r1
 80111aa:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	68da      	ldr	r2, [r3, #12]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2118      	movs	r1, #24
 80111b8:	438a      	bics	r2, r1
 80111ba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	68d9      	ldr	r1, [r3, #12]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	689a      	ldr	r2, [r3, #8]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	430a      	orrs	r2, r1
 80111cc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80111ce:	4b6a      	ldr	r3, [pc, #424]	@ (8011378 <HAL_ADC_Init+0x2d4>)
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	4b69      	ldr	r3, [pc, #420]	@ (8011378 <HAL_ADC_Init+0x2d4>)
 80111d4:	496a      	ldr	r1, [pc, #424]	@ (8011380 <HAL_ADC_Init+0x2dc>)
 80111d6:	400a      	ands	r2, r1
 80111d8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80111da:	4b67      	ldr	r3, [pc, #412]	@ (8011378 <HAL_ADC_Init+0x2d4>)
 80111dc:	6819      	ldr	r1, [r3, #0]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111e2:	065a      	lsls	r2, r3, #25
 80111e4:	4b64      	ldr	r3, [pc, #400]	@ (8011378 <HAL_ADC_Init+0x2d4>)
 80111e6:	430a      	orrs	r2, r1
 80111e8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	689a      	ldr	r2, [r3, #8]
 80111f0:	2380      	movs	r3, #128	@ 0x80
 80111f2:	055b      	lsls	r3, r3, #21
 80111f4:	4013      	ands	r3, r2
 80111f6:	d108      	bne.n	801120a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	689a      	ldr	r2, [r3, #8]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2180      	movs	r1, #128	@ 0x80
 8011204:	0549      	lsls	r1, r1, #21
 8011206:	430a      	orrs	r2, r1
 8011208:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68da      	ldr	r2, [r3, #12]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	495b      	ldr	r1, [pc, #364]	@ (8011384 <HAL_ADC_Init+0x2e0>)
 8011216:	400a      	ands	r2, r1
 8011218:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	68d9      	ldr	r1, [r3, #12]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	691b      	ldr	r3, [r3, #16]
 8011228:	2b02      	cmp	r3, #2
 801122a:	d101      	bne.n	8011230 <HAL_ADC_Init+0x18c>
 801122c:	2304      	movs	r3, #4
 801122e:	e000      	b.n	8011232 <HAL_ADC_Init+0x18e>
 8011230:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8011232:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2020      	movs	r0, #32
 8011238:	5c1b      	ldrb	r3, [r3, r0]
 801123a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801123c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	202c      	movs	r0, #44	@ 0x2c
 8011242:	5c1b      	ldrb	r3, [r3, r0]
 8011244:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8011246:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801124c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	699b      	ldr	r3, [r3, #24]
 8011252:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8011254:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	69db      	ldr	r3, [r3, #28]
 801125a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801125c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	430a      	orrs	r2, r1
 8011264:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801126a:	23c2      	movs	r3, #194	@ 0xc2
 801126c:	33ff      	adds	r3, #255	@ 0xff
 801126e:	429a      	cmp	r2, r3
 8011270:	d00b      	beq.n	801128a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	68d9      	ldr	r1, [r3, #12]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8011280:	431a      	orrs	r2, r3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	430a      	orrs	r2, r1
 8011288:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2221      	movs	r2, #33	@ 0x21
 801128e:	5c9b      	ldrb	r3, [r3, r2]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d11a      	bne.n	80112ca <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2220      	movs	r2, #32
 8011298:	5c9b      	ldrb	r3, [r3, r2]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d109      	bne.n	80112b2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	68da      	ldr	r2, [r3, #12]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2180      	movs	r1, #128	@ 0x80
 80112aa:	0249      	lsls	r1, r1, #9
 80112ac:	430a      	orrs	r2, r1
 80112ae:	60da      	str	r2, [r3, #12]
 80112b0:	e00b      	b.n	80112ca <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112b6:	2220      	movs	r2, #32
 80112b8:	431a      	orrs	r2, r3
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112c2:	2201      	movs	r2, #1
 80112c4:	431a      	orrs	r2, r3
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d11f      	bne.n	8011312 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	691a      	ldr	r2, [r3, #16]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	492a      	ldr	r1, [pc, #168]	@ (8011388 <HAL_ADC_Init+0x2e4>)
 80112de:	400a      	ands	r2, r1
 80112e0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	6919      	ldr	r1, [r3, #16]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80112f0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80112f6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	430a      	orrs	r2, r1
 80112fe:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	691a      	ldr	r2, [r3, #16]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2101      	movs	r1, #1
 801130c:	430a      	orrs	r2, r1
 801130e:	611a      	str	r2, [r3, #16]
 8011310:	e00e      	b.n	8011330 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	691b      	ldr	r3, [r3, #16]
 8011318:	2201      	movs	r2, #1
 801131a:	4013      	ands	r3, r2
 801131c:	2b01      	cmp	r3, #1
 801131e:	d107      	bne.n	8011330 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	691a      	ldr	r2, [r3, #16]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2101      	movs	r1, #1
 801132c:	438a      	bics	r2, r1
 801132e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	695a      	ldr	r2, [r3, #20]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	2107      	movs	r1, #7
 801133c:	438a      	bics	r2, r1
 801133e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	6959      	ldr	r1, [r3, #20]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	430a      	orrs	r2, r1
 8011350:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801135c:	2203      	movs	r2, #3
 801135e:	4393      	bics	r3, r2
 8011360:	2201      	movs	r2, #1
 8011362:	431a      	orrs	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8011368:	2300      	movs	r3, #0
}
 801136a:	0018      	movs	r0, r3
 801136c:	46bd      	mov	sp, r7
 801136e:	b002      	add	sp, #8
 8011370:	bd80      	pop	{r7, pc}
 8011372:	46c0      	nop			@ (mov r8, r8)
 8011374:	fffffefd 	.word	0xfffffefd
 8011378:	40012708 	.word	0x40012708
 801137c:	ffc3ffff 	.word	0xffc3ffff
 8011380:	fdffffff 	.word	0xfdffffff
 8011384:	fffe0219 	.word	0xfffe0219
 8011388:	fffffc03 	.word	0xfffffc03

0801138c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 801138c:	b590      	push	{r4, r7, lr}
 801138e:	b085      	sub	sp, #20
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011394:	230f      	movs	r3, #15
 8011396:	18fb      	adds	r3, r7, r3
 8011398:	2200      	movs	r2, #0
 801139a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	689b      	ldr	r3, [r3, #8]
 80113a2:	2204      	movs	r2, #4
 80113a4:	4013      	ands	r3, r2
 80113a6:	d138      	bne.n	801141a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2250      	movs	r2, #80	@ 0x50
 80113ac:	5c9b      	ldrb	r3, [r3, r2]
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	d101      	bne.n	80113b6 <HAL_ADC_Start+0x2a>
 80113b2:	2302      	movs	r3, #2
 80113b4:	e038      	b.n	8011428 <HAL_ADC_Start+0x9c>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2250      	movs	r2, #80	@ 0x50
 80113ba:	2101      	movs	r1, #1
 80113bc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	69db      	ldr	r3, [r3, #28]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d007      	beq.n	80113d6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80113c6:	230f      	movs	r3, #15
 80113c8:	18fc      	adds	r4, r7, r3
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	0018      	movs	r0, r3
 80113ce:	f000 f95f 	bl	8011690 <ADC_Enable>
 80113d2:	0003      	movs	r3, r0
 80113d4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80113d6:	230f      	movs	r3, #15
 80113d8:	18fb      	adds	r3, r7, r3
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d120      	bne.n	8011422 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113e4:	4a12      	ldr	r2, [pc, #72]	@ (8011430 <HAL_ADC_Start+0xa4>)
 80113e6:	4013      	ands	r3, r2
 80113e8:	2280      	movs	r2, #128	@ 0x80
 80113ea:	0052      	lsls	r2, r2, #1
 80113ec:	431a      	orrs	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2250      	movs	r2, #80	@ 0x50
 80113fc:	2100      	movs	r1, #0
 80113fe:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	221c      	movs	r2, #28
 8011406:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	689a      	ldr	r2, [r3, #8]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	2104      	movs	r1, #4
 8011414:	430a      	orrs	r2, r1
 8011416:	609a      	str	r2, [r3, #8]
 8011418:	e003      	b.n	8011422 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801141a:	230f      	movs	r3, #15
 801141c:	18fb      	adds	r3, r7, r3
 801141e:	2202      	movs	r2, #2
 8011420:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8011422:	230f      	movs	r3, #15
 8011424:	18fb      	adds	r3, r7, r3
 8011426:	781b      	ldrb	r3, [r3, #0]
}
 8011428:	0018      	movs	r0, r3
 801142a:	46bd      	mov	sp, r7
 801142c:	b005      	add	sp, #20
 801142e:	bd90      	pop	{r4, r7, pc}
 8011430:	fffff0fe 	.word	0xfffff0fe

08011434 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801143e:	2300      	movs	r3, #0
 8011440:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8011442:	2300      	movs	r3, #0
 8011444:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	695b      	ldr	r3, [r3, #20]
 801144a:	2b08      	cmp	r3, #8
 801144c:	d102      	bne.n	8011454 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801144e:	2308      	movs	r3, #8
 8011450:	60fb      	str	r3, [r7, #12]
 8011452:	e014      	b.n	801147e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	2201      	movs	r2, #1
 801145c:	4013      	ands	r3, r2
 801145e:	2b01      	cmp	r3, #1
 8011460:	d10b      	bne.n	801147a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011466:	2220      	movs	r2, #32
 8011468:	431a      	orrs	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2250      	movs	r2, #80	@ 0x50
 8011472:	2100      	movs	r1, #0
 8011474:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8011476:	2301      	movs	r3, #1
 8011478:	e072      	b.n	8011560 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 801147a:	230c      	movs	r3, #12
 801147c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801147e:	f7ff fda9 	bl	8010fd4 <HAL_GetTick>
 8011482:	0003      	movs	r3, r0
 8011484:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8011486:	e01f      	b.n	80114c8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	3301      	adds	r3, #1
 801148c:	d01c      	beq.n	80114c8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d007      	beq.n	80114a4 <HAL_ADC_PollForConversion+0x70>
 8011494:	f7ff fd9e 	bl	8010fd4 <HAL_GetTick>
 8011498:	0002      	movs	r2, r0
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	1ad3      	subs	r3, r2, r3
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d211      	bcs.n	80114c8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	68fa      	ldr	r2, [r7, #12]
 80114ac:	4013      	ands	r3, r2
 80114ae:	d10b      	bne.n	80114c8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114b4:	2204      	movs	r2, #4
 80114b6:	431a      	orrs	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2250      	movs	r2, #80	@ 0x50
 80114c0:	2100      	movs	r1, #0
 80114c2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80114c4:	2303      	movs	r3, #3
 80114c6:	e04b      	b.n	8011560 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	4013      	ands	r3, r2
 80114d2:	d0d9      	beq.n	8011488 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114d8:	2280      	movs	r2, #128	@ 0x80
 80114da:	0092      	lsls	r2, r2, #2
 80114dc:	431a      	orrs	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	68da      	ldr	r2, [r3, #12]
 80114e8:	23c0      	movs	r3, #192	@ 0xc0
 80114ea:	011b      	lsls	r3, r3, #4
 80114ec:	4013      	ands	r3, r2
 80114ee:	d12e      	bne.n	801154e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2220      	movs	r2, #32
 80114f4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d129      	bne.n	801154e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2208      	movs	r2, #8
 8011502:	4013      	ands	r3, r2
 8011504:	2b08      	cmp	r3, #8
 8011506:	d122      	bne.n	801154e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	689b      	ldr	r3, [r3, #8]
 801150e:	2204      	movs	r2, #4
 8011510:	4013      	ands	r3, r2
 8011512:	d110      	bne.n	8011536 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	685a      	ldr	r2, [r3, #4]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	210c      	movs	r1, #12
 8011520:	438a      	bics	r2, r1
 8011522:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011528:	4a0f      	ldr	r2, [pc, #60]	@ (8011568 <HAL_ADC_PollForConversion+0x134>)
 801152a:	4013      	ands	r3, r2
 801152c:	2201      	movs	r2, #1
 801152e:	431a      	orrs	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	655a      	str	r2, [r3, #84]	@ 0x54
 8011534:	e00b      	b.n	801154e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801153a:	2220      	movs	r2, #32
 801153c:	431a      	orrs	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011546:	2201      	movs	r2, #1
 8011548:	431a      	orrs	r2, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	699b      	ldr	r3, [r3, #24]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d103      	bne.n	801155e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	220c      	movs	r2, #12
 801155c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801155e:	2300      	movs	r3, #0
}
 8011560:	0018      	movs	r0, r3
 8011562:	46bd      	mov	sp, r7
 8011564:	b004      	add	sp, #16
 8011566:	bd80      	pop	{r7, pc}
 8011568:	fffffefe 	.word	0xfffffefe

0801156c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 801157a:	0018      	movs	r0, r3
 801157c:	46bd      	mov	sp, r7
 801157e:	b002      	add	sp, #8
 8011580:	bd80      	pop	{r7, pc}
	...

08011584 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2250      	movs	r2, #80	@ 0x50
 8011592:	5c9b      	ldrb	r3, [r3, r2]
 8011594:	2b01      	cmp	r3, #1
 8011596:	d101      	bne.n	801159c <HAL_ADC_ConfigChannel+0x18>
 8011598:	2302      	movs	r3, #2
 801159a:	e06c      	b.n	8011676 <HAL_ADC_ConfigChannel+0xf2>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2250      	movs	r2, #80	@ 0x50
 80115a0:	2101      	movs	r1, #1
 80115a2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	689b      	ldr	r3, [r3, #8]
 80115aa:	2204      	movs	r2, #4
 80115ac:	4013      	ands	r3, r2
 80115ae:	d00b      	beq.n	80115c8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115b4:	2220      	movs	r2, #32
 80115b6:	431a      	orrs	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2250      	movs	r2, #80	@ 0x50
 80115c0:	2100      	movs	r1, #0
 80115c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80115c4:	2301      	movs	r3, #1
 80115c6:	e056      	b.n	8011676 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	4a2c      	ldr	r2, [pc, #176]	@ (8011680 <HAL_ADC_ConfigChannel+0xfc>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d028      	beq.n	8011624 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	035b      	lsls	r3, r3, #13
 80115de:	0b5a      	lsrs	r2, r3, #13
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	430a      	orrs	r2, r1
 80115e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	2380      	movs	r3, #128	@ 0x80
 80115ee:	02db      	lsls	r3, r3, #11
 80115f0:	4013      	ands	r3, r2
 80115f2:	d009      	beq.n	8011608 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80115f4:	4b23      	ldr	r3, [pc, #140]	@ (8011684 <HAL_ADC_ConfigChannel+0x100>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	4b22      	ldr	r3, [pc, #136]	@ (8011684 <HAL_ADC_ConfigChannel+0x100>)
 80115fa:	2180      	movs	r1, #128	@ 0x80
 80115fc:	0409      	lsls	r1, r1, #16
 80115fe:	430a      	orrs	r2, r1
 8011600:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8011602:	200a      	movs	r0, #10
 8011604:	f000 f8ac 	bl	8011760 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	2380      	movs	r3, #128	@ 0x80
 801160e:	029b      	lsls	r3, r3, #10
 8011610:	4013      	ands	r3, r2
 8011612:	d02b      	beq.n	801166c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8011614:	4b1b      	ldr	r3, [pc, #108]	@ (8011684 <HAL_ADC_ConfigChannel+0x100>)
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	4b1a      	ldr	r3, [pc, #104]	@ (8011684 <HAL_ADC_ConfigChannel+0x100>)
 801161a:	2180      	movs	r1, #128	@ 0x80
 801161c:	03c9      	lsls	r1, r1, #15
 801161e:	430a      	orrs	r2, r1
 8011620:	601a      	str	r2, [r3, #0]
 8011622:	e023      	b.n	801166c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	035b      	lsls	r3, r3, #13
 8011630:	0b5b      	lsrs	r3, r3, #13
 8011632:	43d9      	mvns	r1, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	400a      	ands	r2, r1
 801163a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	2380      	movs	r3, #128	@ 0x80
 8011642:	02db      	lsls	r3, r3, #11
 8011644:	4013      	ands	r3, r2
 8011646:	d005      	beq.n	8011654 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8011648:	4b0e      	ldr	r3, [pc, #56]	@ (8011684 <HAL_ADC_ConfigChannel+0x100>)
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	4b0d      	ldr	r3, [pc, #52]	@ (8011684 <HAL_ADC_ConfigChannel+0x100>)
 801164e:	490e      	ldr	r1, [pc, #56]	@ (8011688 <HAL_ADC_ConfigChannel+0x104>)
 8011650:	400a      	ands	r2, r1
 8011652:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	2380      	movs	r3, #128	@ 0x80
 801165a:	029b      	lsls	r3, r3, #10
 801165c:	4013      	ands	r3, r2
 801165e:	d005      	beq.n	801166c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8011660:	4b08      	ldr	r3, [pc, #32]	@ (8011684 <HAL_ADC_ConfigChannel+0x100>)
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	4b07      	ldr	r3, [pc, #28]	@ (8011684 <HAL_ADC_ConfigChannel+0x100>)
 8011666:	4909      	ldr	r1, [pc, #36]	@ (801168c <HAL_ADC_ConfigChannel+0x108>)
 8011668:	400a      	ands	r2, r1
 801166a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2250      	movs	r2, #80	@ 0x50
 8011670:	2100      	movs	r1, #0
 8011672:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8011674:	2300      	movs	r3, #0
}
 8011676:	0018      	movs	r0, r3
 8011678:	46bd      	mov	sp, r7
 801167a:	b002      	add	sp, #8
 801167c:	bd80      	pop	{r7, pc}
 801167e:	46c0      	nop			@ (mov r8, r8)
 8011680:	00001001 	.word	0x00001001
 8011684:	40012708 	.word	0x40012708
 8011688:	ff7fffff 	.word	0xff7fffff
 801168c:	ffbfffff 	.word	0xffbfffff

08011690 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011698:	2300      	movs	r3, #0
 801169a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	689b      	ldr	r3, [r3, #8]
 80116a2:	2203      	movs	r2, #3
 80116a4:	4013      	ands	r3, r2
 80116a6:	2b01      	cmp	r3, #1
 80116a8:	d108      	bne.n	80116bc <ADC_Enable+0x2c>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2201      	movs	r2, #1
 80116b2:	4013      	ands	r3, r2
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d101      	bne.n	80116bc <ADC_Enable+0x2c>
 80116b8:	2301      	movs	r3, #1
 80116ba:	e000      	b.n	80116be <ADC_Enable+0x2e>
 80116bc:	2300      	movs	r3, #0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d146      	bne.n	8011750 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	689b      	ldr	r3, [r3, #8]
 80116c8:	4a24      	ldr	r2, [pc, #144]	@ (801175c <ADC_Enable+0xcc>)
 80116ca:	4013      	ands	r3, r2
 80116cc:	d00d      	beq.n	80116ea <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116d2:	2210      	movs	r2, #16
 80116d4:	431a      	orrs	r2, r3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116de:	2201      	movs	r2, #1
 80116e0:	431a      	orrs	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80116e6:	2301      	movs	r3, #1
 80116e8:	e033      	b.n	8011752 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	689a      	ldr	r2, [r3, #8]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	2101      	movs	r1, #1
 80116f6:	430a      	orrs	r2, r1
 80116f8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80116fa:	2001      	movs	r0, #1
 80116fc:	f000 f830 	bl	8011760 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8011700:	f7ff fc68 	bl	8010fd4 <HAL_GetTick>
 8011704:	0003      	movs	r3, r0
 8011706:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011708:	e01b      	b.n	8011742 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801170a:	f7ff fc63 	bl	8010fd4 <HAL_GetTick>
 801170e:	0002      	movs	r2, r0
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	2b0a      	cmp	r3, #10
 8011716:	d914      	bls.n	8011742 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2201      	movs	r2, #1
 8011720:	4013      	ands	r3, r2
 8011722:	2b01      	cmp	r3, #1
 8011724:	d00d      	beq.n	8011742 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801172a:	2210      	movs	r2, #16
 801172c:	431a      	orrs	r2, r3
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011736:	2201      	movs	r2, #1
 8011738:	431a      	orrs	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 801173e:	2301      	movs	r3, #1
 8011740:	e007      	b.n	8011752 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2201      	movs	r2, #1
 801174a:	4013      	ands	r3, r2
 801174c:	2b01      	cmp	r3, #1
 801174e:	d1dc      	bne.n	801170a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8011750:	2300      	movs	r3, #0
}
 8011752:	0018      	movs	r0, r3
 8011754:	46bd      	mov	sp, r7
 8011756:	b004      	add	sp, #16
 8011758:	bd80      	pop	{r7, pc}
 801175a:	46c0      	nop			@ (mov r8, r8)
 801175c:	80000017 	.word	0x80000017

08011760 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8011768:	4b0b      	ldr	r3, [pc, #44]	@ (8011798 <ADC_DelayMicroSecond+0x38>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	490b      	ldr	r1, [pc, #44]	@ (801179c <ADC_DelayMicroSecond+0x3c>)
 801176e:	0018      	movs	r0, r3
 8011770:	f7ee fd18 	bl	80001a4 <__udivsi3>
 8011774:	0003      	movs	r3, r0
 8011776:	001a      	movs	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4353      	muls	r3, r2
 801177c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801177e:	e002      	b.n	8011786 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	3b01      	subs	r3, #1
 8011784:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d1f9      	bne.n	8011780 <ADC_DelayMicroSecond+0x20>
  }
}
 801178c:	46c0      	nop			@ (mov r8, r8)
 801178e:	46c0      	nop			@ (mov r8, r8)
 8011790:	46bd      	mov	sp, r7
 8011792:	b004      	add	sp, #16
 8011794:	bd80      	pop	{r7, pc}
 8011796:	46c0      	nop			@ (mov r8, r8)
 8011798:	200000dc 	.word	0x200000dc
 801179c:	000f4240 	.word	0x000f4240

080117a0 <__NVIC_EnableIRQ>:
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	0002      	movs	r2, r0
 80117a8:	1dfb      	adds	r3, r7, #7
 80117aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80117ac:	1dfb      	adds	r3, r7, #7
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80117b2:	d809      	bhi.n	80117c8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80117b4:	1dfb      	adds	r3, r7, #7
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	001a      	movs	r2, r3
 80117ba:	231f      	movs	r3, #31
 80117bc:	401a      	ands	r2, r3
 80117be:	4b04      	ldr	r3, [pc, #16]	@ (80117d0 <__NVIC_EnableIRQ+0x30>)
 80117c0:	2101      	movs	r1, #1
 80117c2:	4091      	lsls	r1, r2
 80117c4:	000a      	movs	r2, r1
 80117c6:	601a      	str	r2, [r3, #0]
}
 80117c8:	46c0      	nop			@ (mov r8, r8)
 80117ca:	46bd      	mov	sp, r7
 80117cc:	b002      	add	sp, #8
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	e000e100 	.word	0xe000e100

080117d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80117d4:	b590      	push	{r4, r7, lr}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	0002      	movs	r2, r0
 80117dc:	6039      	str	r1, [r7, #0]
 80117de:	1dfb      	adds	r3, r7, #7
 80117e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80117e2:	1dfb      	adds	r3, r7, #7
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80117e8:	d828      	bhi.n	801183c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80117ea:	4a2f      	ldr	r2, [pc, #188]	@ (80118a8 <__NVIC_SetPriority+0xd4>)
 80117ec:	1dfb      	adds	r3, r7, #7
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	b25b      	sxtb	r3, r3
 80117f2:	089b      	lsrs	r3, r3, #2
 80117f4:	33c0      	adds	r3, #192	@ 0xc0
 80117f6:	009b      	lsls	r3, r3, #2
 80117f8:	589b      	ldr	r3, [r3, r2]
 80117fa:	1dfa      	adds	r2, r7, #7
 80117fc:	7812      	ldrb	r2, [r2, #0]
 80117fe:	0011      	movs	r1, r2
 8011800:	2203      	movs	r2, #3
 8011802:	400a      	ands	r2, r1
 8011804:	00d2      	lsls	r2, r2, #3
 8011806:	21ff      	movs	r1, #255	@ 0xff
 8011808:	4091      	lsls	r1, r2
 801180a:	000a      	movs	r2, r1
 801180c:	43d2      	mvns	r2, r2
 801180e:	401a      	ands	r2, r3
 8011810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	019b      	lsls	r3, r3, #6
 8011816:	22ff      	movs	r2, #255	@ 0xff
 8011818:	401a      	ands	r2, r3
 801181a:	1dfb      	adds	r3, r7, #7
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	0018      	movs	r0, r3
 8011820:	2303      	movs	r3, #3
 8011822:	4003      	ands	r3, r0
 8011824:	00db      	lsls	r3, r3, #3
 8011826:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011828:	481f      	ldr	r0, [pc, #124]	@ (80118a8 <__NVIC_SetPriority+0xd4>)
 801182a:	1dfb      	adds	r3, r7, #7
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	b25b      	sxtb	r3, r3
 8011830:	089b      	lsrs	r3, r3, #2
 8011832:	430a      	orrs	r2, r1
 8011834:	33c0      	adds	r3, #192	@ 0xc0
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801183a:	e031      	b.n	80118a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801183c:	4a1b      	ldr	r2, [pc, #108]	@ (80118ac <__NVIC_SetPriority+0xd8>)
 801183e:	1dfb      	adds	r3, r7, #7
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	0019      	movs	r1, r3
 8011844:	230f      	movs	r3, #15
 8011846:	400b      	ands	r3, r1
 8011848:	3b08      	subs	r3, #8
 801184a:	089b      	lsrs	r3, r3, #2
 801184c:	3306      	adds	r3, #6
 801184e:	009b      	lsls	r3, r3, #2
 8011850:	18d3      	adds	r3, r2, r3
 8011852:	3304      	adds	r3, #4
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	1dfa      	adds	r2, r7, #7
 8011858:	7812      	ldrb	r2, [r2, #0]
 801185a:	0011      	movs	r1, r2
 801185c:	2203      	movs	r2, #3
 801185e:	400a      	ands	r2, r1
 8011860:	00d2      	lsls	r2, r2, #3
 8011862:	21ff      	movs	r1, #255	@ 0xff
 8011864:	4091      	lsls	r1, r2
 8011866:	000a      	movs	r2, r1
 8011868:	43d2      	mvns	r2, r2
 801186a:	401a      	ands	r2, r3
 801186c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	019b      	lsls	r3, r3, #6
 8011872:	22ff      	movs	r2, #255	@ 0xff
 8011874:	401a      	ands	r2, r3
 8011876:	1dfb      	adds	r3, r7, #7
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	0018      	movs	r0, r3
 801187c:	2303      	movs	r3, #3
 801187e:	4003      	ands	r3, r0
 8011880:	00db      	lsls	r3, r3, #3
 8011882:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011884:	4809      	ldr	r0, [pc, #36]	@ (80118ac <__NVIC_SetPriority+0xd8>)
 8011886:	1dfb      	adds	r3, r7, #7
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	001c      	movs	r4, r3
 801188c:	230f      	movs	r3, #15
 801188e:	4023      	ands	r3, r4
 8011890:	3b08      	subs	r3, #8
 8011892:	089b      	lsrs	r3, r3, #2
 8011894:	430a      	orrs	r2, r1
 8011896:	3306      	adds	r3, #6
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	18c3      	adds	r3, r0, r3
 801189c:	3304      	adds	r3, #4
 801189e:	601a      	str	r2, [r3, #0]
}
 80118a0:	46c0      	nop			@ (mov r8, r8)
 80118a2:	46bd      	mov	sp, r7
 80118a4:	b003      	add	sp, #12
 80118a6:	bd90      	pop	{r4, r7, pc}
 80118a8:	e000e100 	.word	0xe000e100
 80118ac:	e000ed00 	.word	0xe000ed00

080118b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80118b4:	f3bf 8f4f 	dsb	sy
}
 80118b8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80118ba:	4b04      	ldr	r3, [pc, #16]	@ (80118cc <__NVIC_SystemReset+0x1c>)
 80118bc:	4a04      	ldr	r2, [pc, #16]	@ (80118d0 <__NVIC_SystemReset+0x20>)
 80118be:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80118c0:	f3bf 8f4f 	dsb	sy
}
 80118c4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80118c6:	46c0      	nop			@ (mov r8, r8)
 80118c8:	e7fd      	b.n	80118c6 <__NVIC_SystemReset+0x16>
 80118ca:	46c0      	nop			@ (mov r8, r8)
 80118cc:	e000ed00 	.word	0xe000ed00
 80118d0:	05fa0004 	.word	0x05fa0004

080118d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	1e5a      	subs	r2, r3, #1
 80118e0:	2380      	movs	r3, #128	@ 0x80
 80118e2:	045b      	lsls	r3, r3, #17
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d301      	bcc.n	80118ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80118e8:	2301      	movs	r3, #1
 80118ea:	e010      	b.n	801190e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80118ec:	4b0a      	ldr	r3, [pc, #40]	@ (8011918 <SysTick_Config+0x44>)
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	3a01      	subs	r2, #1
 80118f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80118f4:	2301      	movs	r3, #1
 80118f6:	425b      	negs	r3, r3
 80118f8:	2103      	movs	r1, #3
 80118fa:	0018      	movs	r0, r3
 80118fc:	f7ff ff6a 	bl	80117d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011900:	4b05      	ldr	r3, [pc, #20]	@ (8011918 <SysTick_Config+0x44>)
 8011902:	2200      	movs	r2, #0
 8011904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011906:	4b04      	ldr	r3, [pc, #16]	@ (8011918 <SysTick_Config+0x44>)
 8011908:	2207      	movs	r2, #7
 801190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801190c:	2300      	movs	r3, #0
}
 801190e:	0018      	movs	r0, r3
 8011910:	46bd      	mov	sp, r7
 8011912:	b002      	add	sp, #8
 8011914:	bd80      	pop	{r7, pc}
 8011916:	46c0      	nop			@ (mov r8, r8)
 8011918:	e000e010 	.word	0xe000e010

0801191c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	60b9      	str	r1, [r7, #8]
 8011924:	607a      	str	r2, [r7, #4]
 8011926:	210f      	movs	r1, #15
 8011928:	187b      	adds	r3, r7, r1
 801192a:	1c02      	adds	r2, r0, #0
 801192c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 801192e:	68ba      	ldr	r2, [r7, #8]
 8011930:	187b      	adds	r3, r7, r1
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	b25b      	sxtb	r3, r3
 8011936:	0011      	movs	r1, r2
 8011938:	0018      	movs	r0, r3
 801193a:	f7ff ff4b 	bl	80117d4 <__NVIC_SetPriority>
}
 801193e:	46c0      	nop			@ (mov r8, r8)
 8011940:	46bd      	mov	sp, r7
 8011942:	b004      	add	sp, #16
 8011944:	bd80      	pop	{r7, pc}

08011946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b082      	sub	sp, #8
 801194a:	af00      	add	r7, sp, #0
 801194c:	0002      	movs	r2, r0
 801194e:	1dfb      	adds	r3, r7, #7
 8011950:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011952:	1dfb      	adds	r3, r7, #7
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	b25b      	sxtb	r3, r3
 8011958:	0018      	movs	r0, r3
 801195a:	f7ff ff21 	bl	80117a0 <__NVIC_EnableIRQ>
}
 801195e:	46c0      	nop			@ (mov r8, r8)
 8011960:	46bd      	mov	sp, r7
 8011962:	b002      	add	sp, #8
 8011964:	bd80      	pop	{r7, pc}

08011966 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8011966:	b580      	push	{r7, lr}
 8011968:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801196a:	f7ff ffa1 	bl	80118b0 <__NVIC_SystemReset>

0801196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801196e:	b580      	push	{r7, lr}
 8011970:	b082      	sub	sp, #8
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	0018      	movs	r0, r3
 801197a:	f7ff ffab 	bl	80118d4 <SysTick_Config>
 801197e:	0003      	movs	r3, r0
}
 8011980:	0018      	movs	r0, r3
 8011982:	46bd      	mov	sp, r7
 8011984:	b002      	add	sp, #8
 8011986:	bd80      	pop	{r7, pc}

08011988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d101      	bne.n	801199a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8011996:	2301      	movs	r3, #1
 8011998:	e061      	b.n	8011a5e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	4a32      	ldr	r2, [pc, #200]	@ (8011a68 <HAL_DMA_Init+0xe0>)
 80119a0:	4694      	mov	ip, r2
 80119a2:	4463      	add	r3, ip
 80119a4:	2114      	movs	r1, #20
 80119a6:	0018      	movs	r0, r3
 80119a8:	f7ee fbfc 	bl	80001a4 <__udivsi3>
 80119ac:	0003      	movs	r3, r0
 80119ae:	009a      	lsls	r2, r3, #2
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	4a2d      	ldr	r2, [pc, #180]	@ (8011a6c <HAL_DMA_Init+0xe4>)
 80119b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2225      	movs	r2, #37	@ 0x25
 80119be:	2102      	movs	r1, #2
 80119c0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	4a28      	ldr	r2, [pc, #160]	@ (8011a70 <HAL_DMA_Init+0xe8>)
 80119ce:	4013      	ands	r3, r2
 80119d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80119da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	691b      	ldr	r3, [r3, #16]
 80119e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80119e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	699b      	ldr	r3, [r3, #24]
 80119ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80119f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6a1b      	ldr	r3, [r3, #32]
 80119f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80119fa:	68fa      	ldr	r2, [r7, #12]
 80119fc:	4313      	orrs	r3, r2
 80119fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	689a      	ldr	r2, [r3, #8]
 8011a0c:	2380      	movs	r3, #128	@ 0x80
 8011a0e:	01db      	lsls	r3, r3, #7
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d018      	beq.n	8011a46 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8011a14:	4b17      	ldr	r3, [pc, #92]	@ (8011a74 <HAL_DMA_Init+0xec>)
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a1c:	211c      	movs	r1, #28
 8011a1e:	400b      	ands	r3, r1
 8011a20:	210f      	movs	r1, #15
 8011a22:	4099      	lsls	r1, r3
 8011a24:	000b      	movs	r3, r1
 8011a26:	43d9      	mvns	r1, r3
 8011a28:	4b12      	ldr	r3, [pc, #72]	@ (8011a74 <HAL_DMA_Init+0xec>)
 8011a2a:	400a      	ands	r2, r1
 8011a2c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8011a2e:	4b11      	ldr	r3, [pc, #68]	@ (8011a74 <HAL_DMA_Init+0xec>)
 8011a30:	6819      	ldr	r1, [r3, #0]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	685a      	ldr	r2, [r3, #4]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a3a:	201c      	movs	r0, #28
 8011a3c:	4003      	ands	r3, r0
 8011a3e:	409a      	lsls	r2, r3
 8011a40:	4b0c      	ldr	r3, [pc, #48]	@ (8011a74 <HAL_DMA_Init+0xec>)
 8011a42:	430a      	orrs	r2, r1
 8011a44:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2225      	movs	r2, #37	@ 0x25
 8011a50:	2101      	movs	r1, #1
 8011a52:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2224      	movs	r2, #36	@ 0x24
 8011a58:	2100      	movs	r1, #0
 8011a5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	0018      	movs	r0, r3
 8011a60:	46bd      	mov	sp, r7
 8011a62:	b004      	add	sp, #16
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	46c0      	nop			@ (mov r8, r8)
 8011a68:	bffdfff8 	.word	0xbffdfff8
 8011a6c:	40020000 	.word	0x40020000
 8011a70:	ffff800f 	.word	0xffff800f
 8011a74:	400200a8 	.word	0x400200a8

08011a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b086      	sub	sp, #24
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
 8011a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011a86:	2317      	movs	r3, #23
 8011a88:	18fb      	adds	r3, r7, r3
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2224      	movs	r2, #36	@ 0x24
 8011a92:	5c9b      	ldrb	r3, [r3, r2]
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d101      	bne.n	8011a9c <HAL_DMA_Start_IT+0x24>
 8011a98:	2302      	movs	r3, #2
 8011a9a:	e04f      	b.n	8011b3c <HAL_DMA_Start_IT+0xc4>
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2224      	movs	r2, #36	@ 0x24
 8011aa0:	2101      	movs	r1, #1
 8011aa2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2225      	movs	r2, #37	@ 0x25
 8011aa8:	5c9b      	ldrb	r3, [r3, r2]
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d13a      	bne.n	8011b26 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2225      	movs	r2, #37	@ 0x25
 8011ab4:	2102      	movs	r1, #2
 8011ab6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2200      	movs	r2, #0
 8011abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2101      	movs	r1, #1
 8011aca:	438a      	bics	r2, r1
 8011acc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	68b9      	ldr	r1, [r7, #8]
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	f000 f976 	bl	8011dc6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d008      	beq.n	8011af4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	681a      	ldr	r2, [r3, #0]
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	210e      	movs	r1, #14
 8011aee:	430a      	orrs	r2, r1
 8011af0:	601a      	str	r2, [r3, #0]
 8011af2:	e00f      	b.n	8011b14 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	681a      	ldr	r2, [r3, #0]
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2104      	movs	r1, #4
 8011b00:	438a      	bics	r2, r1
 8011b02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	210a      	movs	r1, #10
 8011b10:	430a      	orrs	r2, r1
 8011b12:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	2101      	movs	r1, #1
 8011b20:	430a      	orrs	r2, r1
 8011b22:	601a      	str	r2, [r3, #0]
 8011b24:	e007      	b.n	8011b36 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2224      	movs	r2, #36	@ 0x24
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8011b2e:	2317      	movs	r3, #23
 8011b30:	18fb      	adds	r3, r7, r3
 8011b32:	2202      	movs	r2, #2
 8011b34:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8011b36:	2317      	movs	r3, #23
 8011b38:	18fb      	adds	r3, r7, r3
 8011b3a:	781b      	ldrb	r3, [r3, #0]
}
 8011b3c:	0018      	movs	r0, r3
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	b006      	add	sp, #24
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011b4c:	230f      	movs	r3, #15
 8011b4e:	18fb      	adds	r3, r7, r3
 8011b50:	2200      	movs	r2, #0
 8011b52:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2225      	movs	r2, #37	@ 0x25
 8011b58:	5c9b      	ldrb	r3, [r3, r2]
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	2b02      	cmp	r3, #2
 8011b5e:	d008      	beq.n	8011b72 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2204      	movs	r2, #4
 8011b64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2224      	movs	r2, #36	@ 0x24
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	e024      	b.n	8011bbc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	210e      	movs	r1, #14
 8011b7e:	438a      	bics	r2, r1
 8011b80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2101      	movs	r1, #1
 8011b8e:	438a      	bics	r2, r1
 8011b90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b96:	221c      	movs	r2, #28
 8011b98:	401a      	ands	r2, r3
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b9e:	2101      	movs	r1, #1
 8011ba0:	4091      	lsls	r1, r2
 8011ba2:	000a      	movs	r2, r1
 8011ba4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2225      	movs	r2, #37	@ 0x25
 8011baa:	2101      	movs	r1, #1
 8011bac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2224      	movs	r2, #36	@ 0x24
 8011bb2:	2100      	movs	r1, #0
 8011bb4:	5499      	strb	r1, [r3, r2]

    return status;
 8011bb6:	230f      	movs	r3, #15
 8011bb8:	18fb      	adds	r3, r7, r3
 8011bba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011bbc:	0018      	movs	r0, r3
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	b004      	add	sp, #16
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011bcc:	210f      	movs	r1, #15
 8011bce:	187b      	adds	r3, r7, r1
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2225      	movs	r2, #37	@ 0x25
 8011bd8:	5c9b      	ldrb	r3, [r3, r2]
 8011bda:	b2db      	uxtb	r3, r3
 8011bdc:	2b02      	cmp	r3, #2
 8011bde:	d006      	beq.n	8011bee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2204      	movs	r2, #4
 8011be4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8011be6:	187b      	adds	r3, r7, r1
 8011be8:	2201      	movs	r2, #1
 8011bea:	701a      	strb	r2, [r3, #0]
 8011bec:	e02a      	b.n	8011c44 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	681a      	ldr	r2, [r3, #0]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	210e      	movs	r1, #14
 8011bfa:	438a      	bics	r2, r1
 8011bfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	681a      	ldr	r2, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	2101      	movs	r1, #1
 8011c0a:	438a      	bics	r2, r1
 8011c0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c12:	221c      	movs	r2, #28
 8011c14:	401a      	ands	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c1a:	2101      	movs	r1, #1
 8011c1c:	4091      	lsls	r1, r2
 8011c1e:	000a      	movs	r2, r1
 8011c20:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2225      	movs	r2, #37	@ 0x25
 8011c26:	2101      	movs	r1, #1
 8011c28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2224      	movs	r2, #36	@ 0x24
 8011c2e:	2100      	movs	r1, #0
 8011c30:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d004      	beq.n	8011c44 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	0010      	movs	r0, r2
 8011c42:	4798      	blx	r3
    }
  }
  return status;
 8011c44:	230f      	movs	r3, #15
 8011c46:	18fb      	adds	r3, r7, r3
 8011c48:	781b      	ldrb	r3, [r3, #0]
}
 8011c4a:	0018      	movs	r0, r3
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	b004      	add	sp, #16
 8011c50:	bd80      	pop	{r7, pc}

08011c52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011c52:	b580      	push	{r7, lr}
 8011c54:	b084      	sub	sp, #16
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c6e:	221c      	movs	r2, #28
 8011c70:	4013      	ands	r3, r2
 8011c72:	2204      	movs	r2, #4
 8011c74:	409a      	lsls	r2, r3
 8011c76:	0013      	movs	r3, r2
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	d026      	beq.n	8011ccc <HAL_DMA_IRQHandler+0x7a>
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2204      	movs	r2, #4
 8011c82:	4013      	ands	r3, r2
 8011c84:	d022      	beq.n	8011ccc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2220      	movs	r2, #32
 8011c8e:	4013      	ands	r3, r2
 8011c90:	d107      	bne.n	8011ca2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	2104      	movs	r1, #4
 8011c9e:	438a      	bics	r2, r1
 8011ca0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ca6:	221c      	movs	r2, #28
 8011ca8:	401a      	ands	r2, r3
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011cae:	2104      	movs	r1, #4
 8011cb0:	4091      	lsls	r1, r2
 8011cb2:	000a      	movs	r2, r1
 8011cb4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d100      	bne.n	8011cc0 <HAL_DMA_IRQHandler+0x6e>
 8011cbe:	e071      	b.n	8011da4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	0010      	movs	r0, r2
 8011cc8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8011cca:	e06b      	b.n	8011da4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011cd0:	221c      	movs	r2, #28
 8011cd2:	4013      	ands	r3, r2
 8011cd4:	2202      	movs	r2, #2
 8011cd6:	409a      	lsls	r2, r3
 8011cd8:	0013      	movs	r3, r2
 8011cda:	68fa      	ldr	r2, [r7, #12]
 8011cdc:	4013      	ands	r3, r2
 8011cde:	d02d      	beq.n	8011d3c <HAL_DMA_IRQHandler+0xea>
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	2202      	movs	r2, #2
 8011ce4:	4013      	ands	r3, r2
 8011ce6:	d029      	beq.n	8011d3c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2220      	movs	r2, #32
 8011cf0:	4013      	ands	r3, r2
 8011cf2:	d10b      	bne.n	8011d0c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	681a      	ldr	r2, [r3, #0]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	210a      	movs	r1, #10
 8011d00:	438a      	bics	r2, r1
 8011d02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2225      	movs	r2, #37	@ 0x25
 8011d08:	2101      	movs	r1, #1
 8011d0a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d10:	221c      	movs	r2, #28
 8011d12:	401a      	ands	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d18:	2102      	movs	r1, #2
 8011d1a:	4091      	lsls	r1, r2
 8011d1c:	000a      	movs	r2, r1
 8011d1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2224      	movs	r2, #36	@ 0x24
 8011d24:	2100      	movs	r1, #0
 8011d26:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d039      	beq.n	8011da4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d34:	687a      	ldr	r2, [r7, #4]
 8011d36:	0010      	movs	r0, r2
 8011d38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8011d3a:	e033      	b.n	8011da4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d40:	221c      	movs	r2, #28
 8011d42:	4013      	ands	r3, r2
 8011d44:	2208      	movs	r2, #8
 8011d46:	409a      	lsls	r2, r3
 8011d48:	0013      	movs	r3, r2
 8011d4a:	68fa      	ldr	r2, [r7, #12]
 8011d4c:	4013      	ands	r3, r2
 8011d4e:	d02a      	beq.n	8011da6 <HAL_DMA_IRQHandler+0x154>
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2208      	movs	r2, #8
 8011d54:	4013      	ands	r3, r2
 8011d56:	d026      	beq.n	8011da6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	210e      	movs	r1, #14
 8011d64:	438a      	bics	r2, r1
 8011d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d6c:	221c      	movs	r2, #28
 8011d6e:	401a      	ands	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d74:	2101      	movs	r1, #1
 8011d76:	4091      	lsls	r1, r2
 8011d78:	000a      	movs	r2, r1
 8011d7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2225      	movs	r2, #37	@ 0x25
 8011d86:	2101      	movs	r1, #1
 8011d88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2224      	movs	r2, #36	@ 0x24
 8011d8e:	2100      	movs	r1, #0
 8011d90:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d005      	beq.n	8011da6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	0010      	movs	r0, r2
 8011da2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8011da4:	46c0      	nop			@ (mov r8, r8)
 8011da6:	46c0      	nop			@ (mov r8, r8)
}
 8011da8:	46bd      	mov	sp, r7
 8011daa:	b004      	add	sp, #16
 8011dac:	bd80      	pop	{r7, pc}

08011dae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b082      	sub	sp, #8
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2225      	movs	r2, #37	@ 0x25
 8011dba:	5c9b      	ldrb	r3, [r3, r2]
 8011dbc:	b2db      	uxtb	r3, r3
}
 8011dbe:	0018      	movs	r0, r3
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	b002      	add	sp, #8
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b084      	sub	sp, #16
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	60f8      	str	r0, [r7, #12]
 8011dce:	60b9      	str	r1, [r7, #8]
 8011dd0:	607a      	str	r2, [r7, #4]
 8011dd2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dd8:	221c      	movs	r2, #28
 8011dda:	401a      	ands	r2, r3
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011de0:	2101      	movs	r1, #1
 8011de2:	4091      	lsls	r1, r2
 8011de4:	000a      	movs	r2, r1
 8011de6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	683a      	ldr	r2, [r7, #0]
 8011dee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	689b      	ldr	r3, [r3, #8]
 8011df4:	2b10      	cmp	r3, #16
 8011df6:	d108      	bne.n	8011e0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	687a      	ldr	r2, [r7, #4]
 8011dfe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	68ba      	ldr	r2, [r7, #8]
 8011e06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8011e08:	e007      	b.n	8011e1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	68ba      	ldr	r2, [r7, #8]
 8011e10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	687a      	ldr	r2, [r7, #4]
 8011e18:	60da      	str	r2, [r3, #12]
}
 8011e1a:	46c0      	nop			@ (mov r8, r8)
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	b004      	add	sp, #16
 8011e20:	bd80      	pop	{r7, pc}
	...

08011e24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8011e2c:	f7ff f8d2 	bl	8010fd4 <HAL_GetTick>
 8011e30:	0003      	movs	r3, r0
 8011e32:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011e34:	e00f      	b.n	8011e56 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	d00c      	beq.n	8011e56 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d007      	beq.n	8011e52 <FLASH_WaitForLastOperation+0x2e>
 8011e42:	f7ff f8c7 	bl	8010fd4 <HAL_GetTick>
 8011e46:	0002      	movs	r2, r0
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	687a      	ldr	r2, [r7, #4]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d201      	bcs.n	8011e56 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8011e52:	2303      	movs	r3, #3
 8011e54:	e052      	b.n	8011efc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011e56:	4b2b      	ldr	r3, [pc, #172]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011e58:	699b      	ldr	r3, [r3, #24]
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	4013      	ands	r3, r2
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d0e9      	beq.n	8011e36 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011e62:	4b28      	ldr	r3, [pc, #160]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011e64:	699b      	ldr	r3, [r3, #24]
 8011e66:	2202      	movs	r2, #2
 8011e68:	4013      	ands	r3, r2
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	d102      	bne.n	8011e74 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011e6e:	4b25      	ldr	r3, [pc, #148]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011e70:	2202      	movs	r2, #2
 8011e72:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8011e74:	4b23      	ldr	r3, [pc, #140]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011e76:	699a      	ldr	r2, [r3, #24]
 8011e78:	2380      	movs	r3, #128	@ 0x80
 8011e7a:	005b      	lsls	r3, r3, #1
 8011e7c:	401a      	ands	r2, r3
 8011e7e:	2380      	movs	r3, #128	@ 0x80
 8011e80:	005b      	lsls	r3, r3, #1
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d035      	beq.n	8011ef2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8011e86:	4b1f      	ldr	r3, [pc, #124]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011e88:	699a      	ldr	r2, [r3, #24]
 8011e8a:	2380      	movs	r3, #128	@ 0x80
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8011e90:	2380      	movs	r3, #128	@ 0x80
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d02c      	beq.n	8011ef2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8011e98:	4b1a      	ldr	r3, [pc, #104]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011e9a:	699a      	ldr	r2, [r3, #24]
 8011e9c:	2380      	movs	r3, #128	@ 0x80
 8011e9e:	00db      	lsls	r3, r3, #3
 8011ea0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8011ea2:	2380      	movs	r3, #128	@ 0x80
 8011ea4:	00db      	lsls	r3, r3, #3
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d023      	beq.n	8011ef2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8011eaa:	4b16      	ldr	r3, [pc, #88]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011eac:	699a      	ldr	r2, [r3, #24]
 8011eae:	2380      	movs	r3, #128	@ 0x80
 8011eb0:	011b      	lsls	r3, r3, #4
 8011eb2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8011eb4:	2380      	movs	r3, #128	@ 0x80
 8011eb6:	011b      	lsls	r3, r3, #4
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d01a      	beq.n	8011ef2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8011ebc:	4b11      	ldr	r3, [pc, #68]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011ebe:	699a      	ldr	r2, [r3, #24]
 8011ec0:	2380      	movs	r3, #128	@ 0x80
 8011ec2:	019b      	lsls	r3, r3, #6
 8011ec4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8011ec6:	2380      	movs	r3, #128	@ 0x80
 8011ec8:	019b      	lsls	r3, r3, #6
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d011      	beq.n	8011ef2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8011ece:	4b0d      	ldr	r3, [pc, #52]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011ed0:	699a      	ldr	r2, [r3, #24]
 8011ed2:	2380      	movs	r3, #128	@ 0x80
 8011ed4:	029b      	lsls	r3, r3, #10
 8011ed6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8011ed8:	2380      	movs	r3, #128	@ 0x80
 8011eda:	029b      	lsls	r3, r3, #10
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d008      	beq.n	8011ef2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8011ee0:	4b08      	ldr	r3, [pc, #32]	@ (8011f04 <FLASH_WaitForLastOperation+0xe0>)
 8011ee2:	699a      	ldr	r2, [r3, #24]
 8011ee4:	2380      	movs	r3, #128	@ 0x80
 8011ee6:	025b      	lsls	r3, r3, #9
 8011ee8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8011eea:	2380      	movs	r3, #128	@ 0x80
 8011eec:	025b      	lsls	r3, r3, #9
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	d103      	bne.n	8011efa <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8011ef2:	f000 f809 	bl	8011f08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e000      	b.n	8011efc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	0018      	movs	r0, r3
 8011efe:	46bd      	mov	sp, r7
 8011f00:	b004      	add	sp, #16
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	40022000 	.word	0x40022000

08011f08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011f12:	4b49      	ldr	r3, [pc, #292]	@ (8012038 <FLASH_SetErrorCode+0x130>)
 8011f14:	699a      	ldr	r2, [r3, #24]
 8011f16:	2380      	movs	r3, #128	@ 0x80
 8011f18:	005b      	lsls	r3, r3, #1
 8011f1a:	401a      	ands	r2, r3
 8011f1c:	2380      	movs	r3, #128	@ 0x80
 8011f1e:	005b      	lsls	r3, r3, #1
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d10a      	bne.n	8011f3a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011f24:	4b45      	ldr	r3, [pc, #276]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011f26:	695b      	ldr	r3, [r3, #20]
 8011f28:	2202      	movs	r2, #2
 8011f2a:	431a      	orrs	r2, r3
 8011f2c:	4b43      	ldr	r3, [pc, #268]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011f2e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2280      	movs	r2, #128	@ 0x80
 8011f34:	0052      	lsls	r2, r2, #1
 8011f36:	4313      	orrs	r3, r2
 8011f38:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8011f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8012038 <FLASH_SetErrorCode+0x130>)
 8011f3c:	699a      	ldr	r2, [r3, #24]
 8011f3e:	2380      	movs	r3, #128	@ 0x80
 8011f40:	009b      	lsls	r3, r3, #2
 8011f42:	401a      	ands	r2, r3
 8011f44:	2380      	movs	r3, #128	@ 0x80
 8011f46:	009b      	lsls	r3, r3, #2
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d10a      	bne.n	8011f62 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8011f4c:	4b3b      	ldr	r3, [pc, #236]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011f4e:	695b      	ldr	r3, [r3, #20]
 8011f50:	2201      	movs	r2, #1
 8011f52:	431a      	orrs	r2, r3
 8011f54:	4b39      	ldr	r3, [pc, #228]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011f56:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2280      	movs	r2, #128	@ 0x80
 8011f5c:	0092      	lsls	r2, r2, #2
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8011f62:	4b35      	ldr	r3, [pc, #212]	@ (8012038 <FLASH_SetErrorCode+0x130>)
 8011f64:	699a      	ldr	r2, [r3, #24]
 8011f66:	2380      	movs	r3, #128	@ 0x80
 8011f68:	00db      	lsls	r3, r3, #3
 8011f6a:	401a      	ands	r2, r3
 8011f6c:	2380      	movs	r3, #128	@ 0x80
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d10a      	bne.n	8011f8a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8011f74:	4b31      	ldr	r3, [pc, #196]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011f76:	695b      	ldr	r3, [r3, #20]
 8011f78:	2208      	movs	r2, #8
 8011f7a:	431a      	orrs	r2, r3
 8011f7c:	4b2f      	ldr	r3, [pc, #188]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011f7e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2280      	movs	r2, #128	@ 0x80
 8011f84:	00d2      	lsls	r2, r2, #3
 8011f86:	4313      	orrs	r3, r2
 8011f88:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8011f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8012038 <FLASH_SetErrorCode+0x130>)
 8011f8c:	699a      	ldr	r2, [r3, #24]
 8011f8e:	2380      	movs	r3, #128	@ 0x80
 8011f90:	011b      	lsls	r3, r3, #4
 8011f92:	401a      	ands	r2, r3
 8011f94:	2380      	movs	r3, #128	@ 0x80
 8011f96:	011b      	lsls	r3, r3, #4
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d10a      	bne.n	8011fb2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8011f9c:	4b27      	ldr	r3, [pc, #156]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011f9e:	695b      	ldr	r3, [r3, #20]
 8011fa0:	2204      	movs	r2, #4
 8011fa2:	431a      	orrs	r2, r3
 8011fa4:	4b25      	ldr	r3, [pc, #148]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011fa6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2280      	movs	r2, #128	@ 0x80
 8011fac:	0112      	lsls	r2, r2, #4
 8011fae:	4313      	orrs	r3, r2
 8011fb0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8011fb2:	4b21      	ldr	r3, [pc, #132]	@ (8012038 <FLASH_SetErrorCode+0x130>)
 8011fb4:	699a      	ldr	r2, [r3, #24]
 8011fb6:	2380      	movs	r3, #128	@ 0x80
 8011fb8:	019b      	lsls	r3, r3, #6
 8011fba:	401a      	ands	r2, r3
 8011fbc:	2380      	movs	r3, #128	@ 0x80
 8011fbe:	019b      	lsls	r3, r3, #6
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d10a      	bne.n	8011fda <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8011fc4:	4b1d      	ldr	r3, [pc, #116]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011fc6:	695b      	ldr	r3, [r3, #20]
 8011fc8:	2210      	movs	r2, #16
 8011fca:	431a      	orrs	r2, r3
 8011fcc:	4b1b      	ldr	r3, [pc, #108]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011fce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2280      	movs	r2, #128	@ 0x80
 8011fd4:	0192      	lsls	r2, r2, #6
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8011fda:	4b17      	ldr	r3, [pc, #92]	@ (8012038 <FLASH_SetErrorCode+0x130>)
 8011fdc:	699a      	ldr	r2, [r3, #24]
 8011fde:	2380      	movs	r3, #128	@ 0x80
 8011fe0:	029b      	lsls	r3, r3, #10
 8011fe2:	401a      	ands	r2, r3
 8011fe4:	2380      	movs	r3, #128	@ 0x80
 8011fe6:	029b      	lsls	r3, r3, #10
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d109      	bne.n	8012000 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8011fec:	4b13      	ldr	r3, [pc, #76]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011fee:	695b      	ldr	r3, [r3, #20]
 8011ff0:	2220      	movs	r2, #32
 8011ff2:	431a      	orrs	r2, r3
 8011ff4:	4b11      	ldr	r3, [pc, #68]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8011ff6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2220      	movs	r2, #32
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8012000:	4b0d      	ldr	r3, [pc, #52]	@ (8012038 <FLASH_SetErrorCode+0x130>)
 8012002:	699a      	ldr	r2, [r3, #24]
 8012004:	2380      	movs	r3, #128	@ 0x80
 8012006:	025b      	lsls	r3, r3, #9
 8012008:	401a      	ands	r2, r3
 801200a:	2380      	movs	r3, #128	@ 0x80
 801200c:	025b      	lsls	r3, r3, #9
 801200e:	429a      	cmp	r2, r3
 8012010:	d10a      	bne.n	8012028 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8012012:	4b0a      	ldr	r3, [pc, #40]	@ (801203c <FLASH_SetErrorCode+0x134>)
 8012014:	695b      	ldr	r3, [r3, #20]
 8012016:	2240      	movs	r2, #64	@ 0x40
 8012018:	431a      	orrs	r2, r3
 801201a:	4b08      	ldr	r3, [pc, #32]	@ (801203c <FLASH_SetErrorCode+0x134>)
 801201c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2280      	movs	r2, #128	@ 0x80
 8012022:	0252      	lsls	r2, r2, #9
 8012024:	4313      	orrs	r3, r2
 8012026:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8012028:	4b03      	ldr	r3, [pc, #12]	@ (8012038 <FLASH_SetErrorCode+0x130>)
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	619a      	str	r2, [r3, #24]
}  
 801202e:	46c0      	nop			@ (mov r8, r8)
 8012030:	46bd      	mov	sp, r7
 8012032:	b002      	add	sp, #8
 8012034:	bd80      	pop	{r7, pc}
 8012036:	46c0      	nop			@ (mov r8, r8)
 8012038:	40022000 	.word	0x40022000
 801203c:	2000219c 	.word	0x2000219c

08012040 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8012046:	4b12      	ldr	r3, [pc, #72]	@ (8012090 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	2201      	movs	r2, #1
 801204c:	4013      	ands	r3, r2
 801204e:	d019      	beq.n	8012084 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012050:	f3ef 8310 	mrs	r3, PRIMASK
 8012054:	607b      	str	r3, [r7, #4]
  return(result);
 8012056:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8012058:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801205a:	b672      	cpsid	i
}
 801205c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 801205e:	4b0c      	ldr	r3, [pc, #48]	@ (8012090 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8012060:	4a0c      	ldr	r2, [pc, #48]	@ (8012094 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8012062:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8012064:	4b0a      	ldr	r3, [pc, #40]	@ (8012090 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8012066:	4a0c      	ldr	r2, [pc, #48]	@ (8012098 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8012068:	60da      	str	r2, [r3, #12]
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	f383 8810 	msr	PRIMASK, r3
}
 8012074:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8012076:	4b06      	ldr	r3, [pc, #24]	@ (8012090 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	2201      	movs	r2, #1
 801207c:	4013      	ands	r3, r2
 801207e:	d001      	beq.n	8012084 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8012080:	2301      	movs	r3, #1
 8012082:	e000      	b.n	8012086 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8012084:	2300      	movs	r3, #0
}
 8012086:	0018      	movs	r0, r3
 8012088:	46bd      	mov	sp, r7
 801208a:	b004      	add	sp, #16
 801208c:	bd80      	pop	{r7, pc}
 801208e:	46c0      	nop			@ (mov r8, r8)
 8012090:	40022000 	.word	0x40022000
 8012094:	89abcdef 	.word	0x89abcdef
 8012098:	02030405 	.word	0x02030405

0801209c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80120a0:	4b04      	ldr	r3, [pc, #16]	@ (80120b4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80120a2:	685a      	ldr	r2, [r3, #4]
 80120a4:	4b03      	ldr	r3, [pc, #12]	@ (80120b4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80120a6:	2101      	movs	r1, #1
 80120a8:	430a      	orrs	r2, r1
 80120aa:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80120ac:	2300      	movs	r3, #0
}
 80120ae:	0018      	movs	r0, r3
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}
 80120b4:	40022000 	.word	0x40022000

080120b8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80120b8:	b5b0      	push	{r4, r5, r7, lr}
 80120ba:	b084      	sub	sp, #16
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80120c0:	250f      	movs	r5, #15
 80120c2:	197b      	adds	r3, r7, r5
 80120c4:	2200      	movs	r2, #0
 80120c6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80120c8:	197c      	adds	r4, r7, r5
 80120ca:	4b0f      	ldr	r3, [pc, #60]	@ (8012108 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80120cc:	0018      	movs	r0, r3
 80120ce:	f7ff fea9 	bl	8011e24 <FLASH_WaitForLastOperation>
 80120d2:	0003      	movs	r3, r0
 80120d4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80120d6:	0029      	movs	r1, r5
 80120d8:	187b      	adds	r3, r7, r1
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10c      	bne.n	80120fa <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80120e0:	4b0a      	ldr	r3, [pc, #40]	@ (801210c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80120ec:	187c      	adds	r4, r7, r1
 80120ee:	4b06      	ldr	r3, [pc, #24]	@ (8012108 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80120f0:	0018      	movs	r0, r3
 80120f2:	f7ff fe97 	bl	8011e24 <FLASH_WaitForLastOperation>
 80120f6:	0003      	movs	r3, r0
 80120f8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80120fa:	230f      	movs	r3, #15
 80120fc:	18fb      	adds	r3, r7, r3
 80120fe:	781b      	ldrb	r3, [r3, #0]
}  
 8012100:	0018      	movs	r0, r3
 8012102:	46bd      	mov	sp, r7
 8012104:	b004      	add	sp, #16
 8012106:	bdb0      	pop	{r4, r5, r7, pc}
 8012108:	0000c350 	.word	0x0000c350
 801210c:	2000219c 	.word	0x2000219c

08012110 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8012110:	b5b0      	push	{r4, r5, r7, lr}
 8012112:	b086      	sub	sp, #24
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801211c:	2317      	movs	r3, #23
 801211e:	18fb      	adds	r3, r7, r3
 8012120:	2201      	movs	r2, #1
 8012122:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8012124:	4b24      	ldr	r3, [pc, #144]	@ (80121b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8012126:	7c1b      	ldrb	r3, [r3, #16]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d101      	bne.n	8012130 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 801212c:	2302      	movs	r3, #2
 801212e:	e03e      	b.n	80121ae <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8012130:	4b21      	ldr	r3, [pc, #132]	@ (80121b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8012132:	2201      	movs	r2, #1
 8012134:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012136:	2517      	movs	r5, #23
 8012138:	197c      	adds	r4, r7, r5
 801213a:	4b20      	ldr	r3, [pc, #128]	@ (80121bc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 801213c:	0018      	movs	r0, r3
 801213e:	f7ff fe71 	bl	8011e24 <FLASH_WaitForLastOperation>
 8012142:	0003      	movs	r3, r0
 8012144:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8012146:	197b      	adds	r3, r7, r5
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d129      	bne.n	80121a2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801214e:	4b1a      	ldr	r3, [pc, #104]	@ (80121b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8012150:	2200      	movs	r2, #0
 8012152:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b02      	cmp	r3, #2
 8012158:	d103      	bne.n	8012162 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	687a      	ldr	r2, [r7, #4]
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	e013      	b.n	801218a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2b01      	cmp	r3, #1
 8012166:	d104      	bne.n	8012172 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	b292      	uxth	r2, r2
 801216e:	801a      	strh	r2, [r3, #0]
 8012170:	e00b      	b.n	801218a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d104      	bne.n	8012182 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	687a      	ldr	r2, [r7, #4]
 801217c:	b2d2      	uxtb	r2, r2
 801217e:	701a      	strb	r2, [r3, #0]
 8012180:	e003      	b.n	801218a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8012182:	2317      	movs	r3, #23
 8012184:	18fb      	adds	r3, r7, r3
 8012186:	2201      	movs	r2, #1
 8012188:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 801218a:	2217      	movs	r2, #23
 801218c:	18bb      	adds	r3, r7, r2
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d106      	bne.n	80121a2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012194:	18bc      	adds	r4, r7, r2
 8012196:	4b09      	ldr	r3, [pc, #36]	@ (80121bc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8012198:	0018      	movs	r0, r3
 801219a:	f7ff fe43 	bl	8011e24 <FLASH_WaitForLastOperation>
 801219e:	0003      	movs	r3, r0
 80121a0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80121a2:	4b05      	ldr	r3, [pc, #20]	@ (80121b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80121a4:	2200      	movs	r2, #0
 80121a6:	741a      	strb	r2, [r3, #16]

  return status;
 80121a8:	2317      	movs	r3, #23
 80121aa:	18fb      	adds	r3, r7, r3
 80121ac:	781b      	ldrb	r3, [r3, #0]
}
 80121ae:	0018      	movs	r0, r3
 80121b0:	46bd      	mov	sp, r7
 80121b2:	b006      	add	sp, #24
 80121b4:	bdb0      	pop	{r4, r5, r7, pc}
 80121b6:	46c0      	nop			@ (mov r8, r8)
 80121b8:	2000219c 	.word	0x2000219c
 80121bc:	0000c350 	.word	0x0000c350

080121c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b086      	sub	sp, #24
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80121ca:	2300      	movs	r3, #0
 80121cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80121ce:	2300      	movs	r3, #0
 80121d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80121d2:	2300      	movs	r3, #0
 80121d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80121d6:	e155      	b.n	8012484 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2101      	movs	r1, #1
 80121de:	697a      	ldr	r2, [r7, #20]
 80121e0:	4091      	lsls	r1, r2
 80121e2:	000a      	movs	r2, r1
 80121e4:	4013      	ands	r3, r2
 80121e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d100      	bne.n	80121f0 <HAL_GPIO_Init+0x30>
 80121ee:	e146      	b.n	801247e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	2203      	movs	r2, #3
 80121f6:	4013      	ands	r3, r2
 80121f8:	2b01      	cmp	r3, #1
 80121fa:	d005      	beq.n	8012208 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	2203      	movs	r2, #3
 8012202:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8012204:	2b02      	cmp	r3, #2
 8012206:	d130      	bne.n	801226a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	005b      	lsls	r3, r3, #1
 8012212:	2203      	movs	r2, #3
 8012214:	409a      	lsls	r2, r3
 8012216:	0013      	movs	r3, r2
 8012218:	43da      	mvns	r2, r3
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	4013      	ands	r3, r2
 801221e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	68da      	ldr	r2, [r3, #12]
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	005b      	lsls	r3, r3, #1
 8012228:	409a      	lsls	r2, r3
 801222a:	0013      	movs	r3, r2
 801222c:	693a      	ldr	r2, [r7, #16]
 801222e:	4313      	orrs	r3, r2
 8012230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	693a      	ldr	r2, [r7, #16]
 8012236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801223e:	2201      	movs	r2, #1
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	409a      	lsls	r2, r3
 8012244:	0013      	movs	r3, r2
 8012246:	43da      	mvns	r2, r3
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	4013      	ands	r3, r2
 801224c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	091b      	lsrs	r3, r3, #4
 8012254:	2201      	movs	r2, #1
 8012256:	401a      	ands	r2, r3
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	409a      	lsls	r2, r3
 801225c:	0013      	movs	r3, r2
 801225e:	693a      	ldr	r2, [r7, #16]
 8012260:	4313      	orrs	r3, r2
 8012262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	693a      	ldr	r2, [r7, #16]
 8012268:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	2203      	movs	r2, #3
 8012270:	4013      	ands	r3, r2
 8012272:	2b03      	cmp	r3, #3
 8012274:	d017      	beq.n	80122a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	005b      	lsls	r3, r3, #1
 8012280:	2203      	movs	r2, #3
 8012282:	409a      	lsls	r2, r3
 8012284:	0013      	movs	r3, r2
 8012286:	43da      	mvns	r2, r3
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	4013      	ands	r3, r2
 801228c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	689a      	ldr	r2, [r3, #8]
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	409a      	lsls	r2, r3
 8012298:	0013      	movs	r3, r2
 801229a:	693a      	ldr	r2, [r7, #16]
 801229c:	4313      	orrs	r3, r2
 801229e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	693a      	ldr	r2, [r7, #16]
 80122a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	685b      	ldr	r3, [r3, #4]
 80122aa:	2203      	movs	r2, #3
 80122ac:	4013      	ands	r3, r2
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	d123      	bne.n	80122fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	08da      	lsrs	r2, r3, #3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	3208      	adds	r2, #8
 80122ba:	0092      	lsls	r2, r2, #2
 80122bc:	58d3      	ldr	r3, [r2, r3]
 80122be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	2207      	movs	r2, #7
 80122c4:	4013      	ands	r3, r2
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	220f      	movs	r2, #15
 80122ca:	409a      	lsls	r2, r3
 80122cc:	0013      	movs	r3, r2
 80122ce:	43da      	mvns	r2, r3
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	4013      	ands	r3, r2
 80122d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	691a      	ldr	r2, [r3, #16]
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	2107      	movs	r1, #7
 80122de:	400b      	ands	r3, r1
 80122e0:	009b      	lsls	r3, r3, #2
 80122e2:	409a      	lsls	r2, r3
 80122e4:	0013      	movs	r3, r2
 80122e6:	693a      	ldr	r2, [r7, #16]
 80122e8:	4313      	orrs	r3, r2
 80122ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	08da      	lsrs	r2, r3, #3
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	3208      	adds	r2, #8
 80122f4:	0092      	lsls	r2, r2, #2
 80122f6:	6939      	ldr	r1, [r7, #16]
 80122f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	2203      	movs	r2, #3
 8012306:	409a      	lsls	r2, r3
 8012308:	0013      	movs	r3, r2
 801230a:	43da      	mvns	r2, r3
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	4013      	ands	r3, r2
 8012310:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	2203      	movs	r2, #3
 8012318:	401a      	ands	r2, r3
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	005b      	lsls	r3, r3, #1
 801231e:	409a      	lsls	r2, r3
 8012320:	0013      	movs	r3, r2
 8012322:	693a      	ldr	r2, [r7, #16]
 8012324:	4313      	orrs	r3, r2
 8012326:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	693a      	ldr	r2, [r7, #16]
 801232c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	685a      	ldr	r2, [r3, #4]
 8012332:	23c0      	movs	r3, #192	@ 0xc0
 8012334:	029b      	lsls	r3, r3, #10
 8012336:	4013      	ands	r3, r2
 8012338:	d100      	bne.n	801233c <HAL_GPIO_Init+0x17c>
 801233a:	e0a0      	b.n	801247e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801233c:	4b57      	ldr	r3, [pc, #348]	@ (801249c <HAL_GPIO_Init+0x2dc>)
 801233e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012340:	4b56      	ldr	r3, [pc, #344]	@ (801249c <HAL_GPIO_Init+0x2dc>)
 8012342:	2101      	movs	r1, #1
 8012344:	430a      	orrs	r2, r1
 8012346:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8012348:	4a55      	ldr	r2, [pc, #340]	@ (80124a0 <HAL_GPIO_Init+0x2e0>)
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	089b      	lsrs	r3, r3, #2
 801234e:	3302      	adds	r3, #2
 8012350:	009b      	lsls	r3, r3, #2
 8012352:	589b      	ldr	r3, [r3, r2]
 8012354:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	2203      	movs	r2, #3
 801235a:	4013      	ands	r3, r2
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	220f      	movs	r2, #15
 8012360:	409a      	lsls	r2, r3
 8012362:	0013      	movs	r3, r2
 8012364:	43da      	mvns	r2, r3
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	4013      	ands	r3, r2
 801236a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	23a0      	movs	r3, #160	@ 0xa0
 8012370:	05db      	lsls	r3, r3, #23
 8012372:	429a      	cmp	r2, r3
 8012374:	d01f      	beq.n	80123b6 <HAL_GPIO_Init+0x1f6>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	4a4a      	ldr	r2, [pc, #296]	@ (80124a4 <HAL_GPIO_Init+0x2e4>)
 801237a:	4293      	cmp	r3, r2
 801237c:	d019      	beq.n	80123b2 <HAL_GPIO_Init+0x1f2>
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	4a49      	ldr	r2, [pc, #292]	@ (80124a8 <HAL_GPIO_Init+0x2e8>)
 8012382:	4293      	cmp	r3, r2
 8012384:	d013      	beq.n	80123ae <HAL_GPIO_Init+0x1ee>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4a48      	ldr	r2, [pc, #288]	@ (80124ac <HAL_GPIO_Init+0x2ec>)
 801238a:	4293      	cmp	r3, r2
 801238c:	d00d      	beq.n	80123aa <HAL_GPIO_Init+0x1ea>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4a47      	ldr	r2, [pc, #284]	@ (80124b0 <HAL_GPIO_Init+0x2f0>)
 8012392:	4293      	cmp	r3, r2
 8012394:	d007      	beq.n	80123a6 <HAL_GPIO_Init+0x1e6>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	4a46      	ldr	r2, [pc, #280]	@ (80124b4 <HAL_GPIO_Init+0x2f4>)
 801239a:	4293      	cmp	r3, r2
 801239c:	d101      	bne.n	80123a2 <HAL_GPIO_Init+0x1e2>
 801239e:	2305      	movs	r3, #5
 80123a0:	e00a      	b.n	80123b8 <HAL_GPIO_Init+0x1f8>
 80123a2:	2306      	movs	r3, #6
 80123a4:	e008      	b.n	80123b8 <HAL_GPIO_Init+0x1f8>
 80123a6:	2304      	movs	r3, #4
 80123a8:	e006      	b.n	80123b8 <HAL_GPIO_Init+0x1f8>
 80123aa:	2303      	movs	r3, #3
 80123ac:	e004      	b.n	80123b8 <HAL_GPIO_Init+0x1f8>
 80123ae:	2302      	movs	r3, #2
 80123b0:	e002      	b.n	80123b8 <HAL_GPIO_Init+0x1f8>
 80123b2:	2301      	movs	r3, #1
 80123b4:	e000      	b.n	80123b8 <HAL_GPIO_Init+0x1f8>
 80123b6:	2300      	movs	r3, #0
 80123b8:	697a      	ldr	r2, [r7, #20]
 80123ba:	2103      	movs	r1, #3
 80123bc:	400a      	ands	r2, r1
 80123be:	0092      	lsls	r2, r2, #2
 80123c0:	4093      	lsls	r3, r2
 80123c2:	693a      	ldr	r2, [r7, #16]
 80123c4:	4313      	orrs	r3, r2
 80123c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80123c8:	4935      	ldr	r1, [pc, #212]	@ (80124a0 <HAL_GPIO_Init+0x2e0>)
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	089b      	lsrs	r3, r3, #2
 80123ce:	3302      	adds	r3, #2
 80123d0:	009b      	lsls	r3, r3, #2
 80123d2:	693a      	ldr	r2, [r7, #16]
 80123d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80123d6:	4b38      	ldr	r3, [pc, #224]	@ (80124b8 <HAL_GPIO_Init+0x2f8>)
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	43da      	mvns	r2, r3
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	4013      	ands	r3, r2
 80123e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	685a      	ldr	r2, [r3, #4]
 80123ea:	2380      	movs	r3, #128	@ 0x80
 80123ec:	035b      	lsls	r3, r3, #13
 80123ee:	4013      	ands	r3, r2
 80123f0:	d003      	beq.n	80123fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80123f2:	693a      	ldr	r2, [r7, #16]
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	4313      	orrs	r3, r2
 80123f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80123fa:	4b2f      	ldr	r3, [pc, #188]	@ (80124b8 <HAL_GPIO_Init+0x2f8>)
 80123fc:	693a      	ldr	r2, [r7, #16]
 80123fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8012400:	4b2d      	ldr	r3, [pc, #180]	@ (80124b8 <HAL_GPIO_Init+0x2f8>)
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	43da      	mvns	r2, r3
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	4013      	ands	r3, r2
 801240e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	685a      	ldr	r2, [r3, #4]
 8012414:	2380      	movs	r3, #128	@ 0x80
 8012416:	039b      	lsls	r3, r3, #14
 8012418:	4013      	ands	r3, r2
 801241a:	d003      	beq.n	8012424 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 801241c:	693a      	ldr	r2, [r7, #16]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	4313      	orrs	r3, r2
 8012422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8012424:	4b24      	ldr	r3, [pc, #144]	@ (80124b8 <HAL_GPIO_Init+0x2f8>)
 8012426:	693a      	ldr	r2, [r7, #16]
 8012428:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801242a:	4b23      	ldr	r3, [pc, #140]	@ (80124b8 <HAL_GPIO_Init+0x2f8>)
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	43da      	mvns	r2, r3
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	4013      	ands	r3, r2
 8012438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	685a      	ldr	r2, [r3, #4]
 801243e:	2380      	movs	r3, #128	@ 0x80
 8012440:	029b      	lsls	r3, r3, #10
 8012442:	4013      	ands	r3, r2
 8012444:	d003      	beq.n	801244e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8012446:	693a      	ldr	r2, [r7, #16]
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	4313      	orrs	r3, r2
 801244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801244e:	4b1a      	ldr	r3, [pc, #104]	@ (80124b8 <HAL_GPIO_Init+0x2f8>)
 8012450:	693a      	ldr	r2, [r7, #16]
 8012452:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012454:	4b18      	ldr	r3, [pc, #96]	@ (80124b8 <HAL_GPIO_Init+0x2f8>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	43da      	mvns	r2, r3
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	4013      	ands	r3, r2
 8012462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	685a      	ldr	r2, [r3, #4]
 8012468:	2380      	movs	r3, #128	@ 0x80
 801246a:	025b      	lsls	r3, r3, #9
 801246c:	4013      	ands	r3, r2
 801246e:	d003      	beq.n	8012478 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8012470:	693a      	ldr	r2, [r7, #16]
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	4313      	orrs	r3, r2
 8012476:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8012478:	4b0f      	ldr	r3, [pc, #60]	@ (80124b8 <HAL_GPIO_Init+0x2f8>)
 801247a:	693a      	ldr	r2, [r7, #16]
 801247c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	3301      	adds	r3, #1
 8012482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	40da      	lsrs	r2, r3
 801248c:	1e13      	subs	r3, r2, #0
 801248e:	d000      	beq.n	8012492 <HAL_GPIO_Init+0x2d2>
 8012490:	e6a2      	b.n	80121d8 <HAL_GPIO_Init+0x18>
  }
}
 8012492:	46c0      	nop			@ (mov r8, r8)
 8012494:	46c0      	nop			@ (mov r8, r8)
 8012496:	46bd      	mov	sp, r7
 8012498:	b006      	add	sp, #24
 801249a:	bd80      	pop	{r7, pc}
 801249c:	40021000 	.word	0x40021000
 80124a0:	40010000 	.word	0x40010000
 80124a4:	50000400 	.word	0x50000400
 80124a8:	50000800 	.word	0x50000800
 80124ac:	50000c00 	.word	0x50000c00
 80124b0:	50001000 	.word	0x50001000
 80124b4:	50001c00 	.word	0x50001c00
 80124b8:	40010400 	.word	0x40010400

080124bc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	000a      	movs	r2, r1
 80124c6:	1cbb      	adds	r3, r7, #2
 80124c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	691b      	ldr	r3, [r3, #16]
 80124ce:	1cba      	adds	r2, r7, #2
 80124d0:	8812      	ldrh	r2, [r2, #0]
 80124d2:	4013      	ands	r3, r2
 80124d4:	d004      	beq.n	80124e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80124d6:	230f      	movs	r3, #15
 80124d8:	18fb      	adds	r3, r7, r3
 80124da:	2201      	movs	r2, #1
 80124dc:	701a      	strb	r2, [r3, #0]
 80124de:	e003      	b.n	80124e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80124e0:	230f      	movs	r3, #15
 80124e2:	18fb      	adds	r3, r7, r3
 80124e4:	2200      	movs	r2, #0
 80124e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80124e8:	230f      	movs	r3, #15
 80124ea:	18fb      	adds	r3, r7, r3
 80124ec:	781b      	ldrb	r3, [r3, #0]
}
 80124ee:	0018      	movs	r0, r3
 80124f0:	46bd      	mov	sp, r7
 80124f2:	b004      	add	sp, #16
 80124f4:	bd80      	pop	{r7, pc}

080124f6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80124f6:	b580      	push	{r7, lr}
 80124f8:	b082      	sub	sp, #8
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
 80124fe:	0008      	movs	r0, r1
 8012500:	0011      	movs	r1, r2
 8012502:	1cbb      	adds	r3, r7, #2
 8012504:	1c02      	adds	r2, r0, #0
 8012506:	801a      	strh	r2, [r3, #0]
 8012508:	1c7b      	adds	r3, r7, #1
 801250a:	1c0a      	adds	r2, r1, #0
 801250c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801250e:	1c7b      	adds	r3, r7, #1
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d004      	beq.n	8012520 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012516:	1cbb      	adds	r3, r7, #2
 8012518:	881a      	ldrh	r2, [r3, #0]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801251e:	e003      	b.n	8012528 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8012520:	1cbb      	adds	r3, r7, #2
 8012522:	881a      	ldrh	r2, [r3, #0]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012528:	46c0      	nop			@ (mov r8, r8)
 801252a:	46bd      	mov	sp, r7
 801252c:	b002      	add	sp, #8
 801252e:	bd80      	pop	{r7, pc}

08012530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	0002      	movs	r2, r0
 8012538:	1dbb      	adds	r3, r7, #6
 801253a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801253c:	4b09      	ldr	r3, [pc, #36]	@ (8012564 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801253e:	695b      	ldr	r3, [r3, #20]
 8012540:	1dba      	adds	r2, r7, #6
 8012542:	8812      	ldrh	r2, [r2, #0]
 8012544:	4013      	ands	r3, r2
 8012546:	d008      	beq.n	801255a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012548:	4b06      	ldr	r3, [pc, #24]	@ (8012564 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801254a:	1dba      	adds	r2, r7, #6
 801254c:	8812      	ldrh	r2, [r2, #0]
 801254e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012550:	1dbb      	adds	r3, r7, #6
 8012552:	881b      	ldrh	r3, [r3, #0]
 8012554:	0018      	movs	r0, r3
 8012556:	f7f7 fe6d 	bl	800a234 <HAL_GPIO_EXTI_Callback>
  }
}
 801255a:	46c0      	nop			@ (mov r8, r8)
 801255c:	46bd      	mov	sp, r7
 801255e:	b002      	add	sp, #8
 8012560:	bd80      	pop	{r7, pc}
 8012562:	46c0      	nop			@ (mov r8, r8)
 8012564:	40010400 	.word	0x40010400

08012568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d101      	bne.n	801257a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012576:	2301      	movs	r3, #1
 8012578:	e082      	b.n	8012680 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2241      	movs	r2, #65	@ 0x41
 801257e:	5c9b      	ldrb	r3, [r3, r2]
 8012580:	b2db      	uxtb	r3, r3
 8012582:	2b00      	cmp	r3, #0
 8012584:	d107      	bne.n	8012596 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2240      	movs	r2, #64	@ 0x40
 801258a:	2100      	movs	r1, #0
 801258c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	0018      	movs	r0, r3
 8012592:	f7f7 f945 	bl	8009820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2241      	movs	r2, #65	@ 0x41
 801259a:	2124      	movs	r1, #36	@ 0x24
 801259c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	681a      	ldr	r2, [r3, #0]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2101      	movs	r1, #1
 80125aa:	438a      	bics	r2, r1
 80125ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4934      	ldr	r1, [pc, #208]	@ (8012688 <HAL_I2C_Init+0x120>)
 80125b8:	400a      	ands	r2, r1
 80125ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	689a      	ldr	r2, [r3, #8]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	4931      	ldr	r1, [pc, #196]	@ (801268c <HAL_I2C_Init+0x124>)
 80125c8:	400a      	ands	r2, r1
 80125ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	68db      	ldr	r3, [r3, #12]
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d108      	bne.n	80125e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	689a      	ldr	r2, [r3, #8]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2180      	movs	r1, #128	@ 0x80
 80125de:	0209      	lsls	r1, r1, #8
 80125e0:	430a      	orrs	r2, r1
 80125e2:	609a      	str	r2, [r3, #8]
 80125e4:	e007      	b.n	80125f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	689a      	ldr	r2, [r3, #8]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2184      	movs	r1, #132	@ 0x84
 80125f0:	0209      	lsls	r1, r1, #8
 80125f2:	430a      	orrs	r2, r1
 80125f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	68db      	ldr	r3, [r3, #12]
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d104      	bne.n	8012608 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2280      	movs	r2, #128	@ 0x80
 8012604:	0112      	lsls	r2, r2, #4
 8012606:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	685a      	ldr	r2, [r3, #4]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	491f      	ldr	r1, [pc, #124]	@ (8012690 <HAL_I2C_Init+0x128>)
 8012614:	430a      	orrs	r2, r1
 8012616:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	68da      	ldr	r2, [r3, #12]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	491a      	ldr	r1, [pc, #104]	@ (801268c <HAL_I2C_Init+0x124>)
 8012624:	400a      	ands	r2, r1
 8012626:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	691a      	ldr	r2, [r3, #16]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	695b      	ldr	r3, [r3, #20]
 8012630:	431a      	orrs	r2, r3
 8012632:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	699b      	ldr	r3, [r3, #24]
 8012638:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	430a      	orrs	r2, r1
 8012640:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	69d9      	ldr	r1, [r3, #28]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6a1a      	ldr	r2, [r3, #32]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	430a      	orrs	r2, r1
 8012650:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	681a      	ldr	r2, [r3, #0]
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2101      	movs	r1, #1
 801265e:	430a      	orrs	r2, r1
 8012660:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2200      	movs	r2, #0
 8012666:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2241      	movs	r2, #65	@ 0x41
 801266c:	2120      	movs	r1, #32
 801266e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2200      	movs	r2, #0
 8012674:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2242      	movs	r2, #66	@ 0x42
 801267a:	2100      	movs	r1, #0
 801267c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801267e:	2300      	movs	r3, #0
}
 8012680:	0018      	movs	r0, r3
 8012682:	46bd      	mov	sp, r7
 8012684:	b002      	add	sp, #8
 8012686:	bd80      	pop	{r7, pc}
 8012688:	f0ffffff 	.word	0xf0ffffff
 801268c:	ffff7fff 	.word	0xffff7fff
 8012690:	02008000 	.word	0x02008000

08012694 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8012694:	b590      	push	{r4, r7, lr}
 8012696:	b089      	sub	sp, #36	@ 0x24
 8012698:	af02      	add	r7, sp, #8
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	0008      	movs	r0, r1
 801269e:	607a      	str	r2, [r7, #4]
 80126a0:	0019      	movs	r1, r3
 80126a2:	230a      	movs	r3, #10
 80126a4:	18fb      	adds	r3, r7, r3
 80126a6:	1c02      	adds	r2, r0, #0
 80126a8:	801a      	strh	r2, [r3, #0]
 80126aa:	2308      	movs	r3, #8
 80126ac:	18fb      	adds	r3, r7, r3
 80126ae:	1c0a      	adds	r2, r1, #0
 80126b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2241      	movs	r2, #65	@ 0x41
 80126b6:	5c9b      	ldrb	r3, [r3, r2]
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	2b20      	cmp	r3, #32
 80126bc:	d000      	beq.n	80126c0 <HAL_I2C_Master_Transmit+0x2c>
 80126be:	e0e7      	b.n	8012890 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2240      	movs	r2, #64	@ 0x40
 80126c4:	5c9b      	ldrb	r3, [r3, r2]
 80126c6:	2b01      	cmp	r3, #1
 80126c8:	d101      	bne.n	80126ce <HAL_I2C_Master_Transmit+0x3a>
 80126ca:	2302      	movs	r3, #2
 80126cc:	e0e1      	b.n	8012892 <HAL_I2C_Master_Transmit+0x1fe>
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2240      	movs	r2, #64	@ 0x40
 80126d2:	2101      	movs	r1, #1
 80126d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80126d6:	f7fe fc7d 	bl	8010fd4 <HAL_GetTick>
 80126da:	0003      	movs	r3, r0
 80126dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80126de:	2380      	movs	r3, #128	@ 0x80
 80126e0:	0219      	lsls	r1, r3, #8
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	2319      	movs	r3, #25
 80126ea:	2201      	movs	r2, #1
 80126ec:	f002 fa30 	bl	8014b50 <I2C_WaitOnFlagUntilTimeout>
 80126f0:	1e03      	subs	r3, r0, #0
 80126f2:	d001      	beq.n	80126f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80126f4:	2301      	movs	r3, #1
 80126f6:	e0cc      	b.n	8012892 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2241      	movs	r2, #65	@ 0x41
 80126fc:	2121      	movs	r1, #33	@ 0x21
 80126fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2242      	movs	r2, #66	@ 0x42
 8012704:	2110      	movs	r1, #16
 8012706:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2200      	movs	r2, #0
 801270c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2208      	movs	r2, #8
 8012718:	18ba      	adds	r2, r7, r2
 801271a:	8812      	ldrh	r2, [r2, #0]
 801271c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2200      	movs	r2, #0
 8012722:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012728:	b29b      	uxth	r3, r3
 801272a:	2bff      	cmp	r3, #255	@ 0xff
 801272c:	d911      	bls.n	8012752 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	22ff      	movs	r2, #255	@ 0xff
 8012732:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012738:	b2da      	uxtb	r2, r3
 801273a:	2380      	movs	r3, #128	@ 0x80
 801273c:	045c      	lsls	r4, r3, #17
 801273e:	230a      	movs	r3, #10
 8012740:	18fb      	adds	r3, r7, r3
 8012742:	8819      	ldrh	r1, [r3, #0]
 8012744:	68f8      	ldr	r0, [r7, #12]
 8012746:	4b55      	ldr	r3, [pc, #340]	@ (801289c <HAL_I2C_Master_Transmit+0x208>)
 8012748:	9300      	str	r3, [sp, #0]
 801274a:	0023      	movs	r3, r4
 801274c:	f002 fc52 	bl	8014ff4 <I2C_TransferConfig>
 8012750:	e075      	b.n	801283e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012756:	b29a      	uxth	r2, r3
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012760:	b2da      	uxtb	r2, r3
 8012762:	2380      	movs	r3, #128	@ 0x80
 8012764:	049c      	lsls	r4, r3, #18
 8012766:	230a      	movs	r3, #10
 8012768:	18fb      	adds	r3, r7, r3
 801276a:	8819      	ldrh	r1, [r3, #0]
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	4b4b      	ldr	r3, [pc, #300]	@ (801289c <HAL_I2C_Master_Transmit+0x208>)
 8012770:	9300      	str	r3, [sp, #0]
 8012772:	0023      	movs	r3, r4
 8012774:	f002 fc3e 	bl	8014ff4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8012778:	e061      	b.n	801283e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801277a:	697a      	ldr	r2, [r7, #20]
 801277c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	0018      	movs	r0, r3
 8012782:	f002 fa33 	bl	8014bec <I2C_WaitOnTXISFlagUntilTimeout>
 8012786:	1e03      	subs	r3, r0, #0
 8012788:	d001      	beq.n	801278e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801278a:	2301      	movs	r3, #1
 801278c:	e081      	b.n	8012892 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012792:	781a      	ldrb	r2, [r3, #0]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801279e:	1c5a      	adds	r2, r3, #1
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	3b01      	subs	r3, #1
 80127ac:	b29a      	uxth	r2, r3
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80127b6:	3b01      	subs	r3, #1
 80127b8:	b29a      	uxth	r2, r3
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127c2:	b29b      	uxth	r3, r3
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d03a      	beq.n	801283e <HAL_I2C_Master_Transmit+0x1aa>
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d136      	bne.n	801283e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80127d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	9300      	str	r3, [sp, #0]
 80127d8:	0013      	movs	r3, r2
 80127da:	2200      	movs	r2, #0
 80127dc:	2180      	movs	r1, #128	@ 0x80
 80127de:	f002 f9b7 	bl	8014b50 <I2C_WaitOnFlagUntilTimeout>
 80127e2:	1e03      	subs	r3, r0, #0
 80127e4:	d001      	beq.n	80127ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80127e6:	2301      	movs	r3, #1
 80127e8:	e053      	b.n	8012892 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	2bff      	cmp	r3, #255	@ 0xff
 80127f2:	d911      	bls.n	8012818 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	22ff      	movs	r2, #255	@ 0xff
 80127f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80127fe:	b2da      	uxtb	r2, r3
 8012800:	2380      	movs	r3, #128	@ 0x80
 8012802:	045c      	lsls	r4, r3, #17
 8012804:	230a      	movs	r3, #10
 8012806:	18fb      	adds	r3, r7, r3
 8012808:	8819      	ldrh	r1, [r3, #0]
 801280a:	68f8      	ldr	r0, [r7, #12]
 801280c:	2300      	movs	r3, #0
 801280e:	9300      	str	r3, [sp, #0]
 8012810:	0023      	movs	r3, r4
 8012812:	f002 fbef 	bl	8014ff4 <I2C_TransferConfig>
 8012816:	e012      	b.n	801283e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801281c:	b29a      	uxth	r2, r3
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012826:	b2da      	uxtb	r2, r3
 8012828:	2380      	movs	r3, #128	@ 0x80
 801282a:	049c      	lsls	r4, r3, #18
 801282c:	230a      	movs	r3, #10
 801282e:	18fb      	adds	r3, r7, r3
 8012830:	8819      	ldrh	r1, [r3, #0]
 8012832:	68f8      	ldr	r0, [r7, #12]
 8012834:	2300      	movs	r3, #0
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	0023      	movs	r3, r4
 801283a:	f002 fbdb 	bl	8014ff4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012842:	b29b      	uxth	r3, r3
 8012844:	2b00      	cmp	r3, #0
 8012846:	d198      	bne.n	801277a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012848:	697a      	ldr	r2, [r7, #20]
 801284a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	0018      	movs	r0, r3
 8012850:	f002 fa12 	bl	8014c78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012854:	1e03      	subs	r3, r0, #0
 8012856:	d001      	beq.n	801285c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8012858:	2301      	movs	r3, #1
 801285a:	e01a      	b.n	8012892 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2220      	movs	r2, #32
 8012862:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	685a      	ldr	r2, [r3, #4]
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	490c      	ldr	r1, [pc, #48]	@ (80128a0 <HAL_I2C_Master_Transmit+0x20c>)
 8012870:	400a      	ands	r2, r1
 8012872:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	2241      	movs	r2, #65	@ 0x41
 8012878:	2120      	movs	r1, #32
 801287a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2242      	movs	r2, #66	@ 0x42
 8012880:	2100      	movs	r1, #0
 8012882:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2240      	movs	r2, #64	@ 0x40
 8012888:	2100      	movs	r1, #0
 801288a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801288c:	2300      	movs	r3, #0
 801288e:	e000      	b.n	8012892 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8012890:	2302      	movs	r3, #2
  }
}
 8012892:	0018      	movs	r0, r3
 8012894:	46bd      	mov	sp, r7
 8012896:	b007      	add	sp, #28
 8012898:	bd90      	pop	{r4, r7, pc}
 801289a:	46c0      	nop			@ (mov r8, r8)
 801289c:	80002000 	.word	0x80002000
 80128a0:	fe00e800 	.word	0xfe00e800

080128a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80128a4:	b590      	push	{r4, r7, lr}
 80128a6:	b089      	sub	sp, #36	@ 0x24
 80128a8:	af02      	add	r7, sp, #8
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	0008      	movs	r0, r1
 80128ae:	607a      	str	r2, [r7, #4]
 80128b0:	0019      	movs	r1, r3
 80128b2:	230a      	movs	r3, #10
 80128b4:	18fb      	adds	r3, r7, r3
 80128b6:	1c02      	adds	r2, r0, #0
 80128b8:	801a      	strh	r2, [r3, #0]
 80128ba:	2308      	movs	r3, #8
 80128bc:	18fb      	adds	r3, r7, r3
 80128be:	1c0a      	adds	r2, r1, #0
 80128c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2241      	movs	r2, #65	@ 0x41
 80128c6:	5c9b      	ldrb	r3, [r3, r2]
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	2b20      	cmp	r3, #32
 80128cc:	d000      	beq.n	80128d0 <HAL_I2C_Master_Receive+0x2c>
 80128ce:	e0e8      	b.n	8012aa2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2240      	movs	r2, #64	@ 0x40
 80128d4:	5c9b      	ldrb	r3, [r3, r2]
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d101      	bne.n	80128de <HAL_I2C_Master_Receive+0x3a>
 80128da:	2302      	movs	r3, #2
 80128dc:	e0e2      	b.n	8012aa4 <HAL_I2C_Master_Receive+0x200>
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2240      	movs	r2, #64	@ 0x40
 80128e2:	2101      	movs	r1, #1
 80128e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80128e6:	f7fe fb75 	bl	8010fd4 <HAL_GetTick>
 80128ea:	0003      	movs	r3, r0
 80128ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80128ee:	2380      	movs	r3, #128	@ 0x80
 80128f0:	0219      	lsls	r1, r3, #8
 80128f2:	68f8      	ldr	r0, [r7, #12]
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	9300      	str	r3, [sp, #0]
 80128f8:	2319      	movs	r3, #25
 80128fa:	2201      	movs	r2, #1
 80128fc:	f002 f928 	bl	8014b50 <I2C_WaitOnFlagUntilTimeout>
 8012900:	1e03      	subs	r3, r0, #0
 8012902:	d001      	beq.n	8012908 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8012904:	2301      	movs	r3, #1
 8012906:	e0cd      	b.n	8012aa4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2241      	movs	r2, #65	@ 0x41
 801290c:	2122      	movs	r1, #34	@ 0x22
 801290e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2242      	movs	r2, #66	@ 0x42
 8012914:	2110      	movs	r1, #16
 8012916:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	2200      	movs	r2, #0
 801291c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2208      	movs	r2, #8
 8012928:	18ba      	adds	r2, r7, r2
 801292a:	8812      	ldrh	r2, [r2, #0]
 801292c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2200      	movs	r2, #0
 8012932:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012938:	b29b      	uxth	r3, r3
 801293a:	2bff      	cmp	r3, #255	@ 0xff
 801293c:	d911      	bls.n	8012962 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	22ff      	movs	r2, #255	@ 0xff
 8012942:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012948:	b2da      	uxtb	r2, r3
 801294a:	2380      	movs	r3, #128	@ 0x80
 801294c:	045c      	lsls	r4, r3, #17
 801294e:	230a      	movs	r3, #10
 8012950:	18fb      	adds	r3, r7, r3
 8012952:	8819      	ldrh	r1, [r3, #0]
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	4b55      	ldr	r3, [pc, #340]	@ (8012aac <HAL_I2C_Master_Receive+0x208>)
 8012958:	9300      	str	r3, [sp, #0]
 801295a:	0023      	movs	r3, r4
 801295c:	f002 fb4a 	bl	8014ff4 <I2C_TransferConfig>
 8012960:	e076      	b.n	8012a50 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012966:	b29a      	uxth	r2, r3
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012970:	b2da      	uxtb	r2, r3
 8012972:	2380      	movs	r3, #128	@ 0x80
 8012974:	049c      	lsls	r4, r3, #18
 8012976:	230a      	movs	r3, #10
 8012978:	18fb      	adds	r3, r7, r3
 801297a:	8819      	ldrh	r1, [r3, #0]
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	4b4b      	ldr	r3, [pc, #300]	@ (8012aac <HAL_I2C_Master_Receive+0x208>)
 8012980:	9300      	str	r3, [sp, #0]
 8012982:	0023      	movs	r3, r4
 8012984:	f002 fb36 	bl	8014ff4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8012988:	e062      	b.n	8012a50 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801298a:	697a      	ldr	r2, [r7, #20]
 801298c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	0018      	movs	r0, r3
 8012992:	f002 f9b5 	bl	8014d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012996:	1e03      	subs	r3, r0, #0
 8012998:	d001      	beq.n	801299e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801299a:	2301      	movs	r3, #1
 801299c:	e082      	b.n	8012aa4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129a8:	b2d2      	uxtb	r2, r2
 80129aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129b0:	1c5a      	adds	r2, r3, #1
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80129ba:	3b01      	subs	r3, #1
 80129bc:	b29a      	uxth	r2, r3
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	3b01      	subs	r3, #1
 80129ca:	b29a      	uxth	r2, r3
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d03a      	beq.n	8012a50 <HAL_I2C_Master_Receive+0x1ac>
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d136      	bne.n	8012a50 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80129e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129e4:	68f8      	ldr	r0, [r7, #12]
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	9300      	str	r3, [sp, #0]
 80129ea:	0013      	movs	r3, r2
 80129ec:	2200      	movs	r2, #0
 80129ee:	2180      	movs	r1, #128	@ 0x80
 80129f0:	f002 f8ae 	bl	8014b50 <I2C_WaitOnFlagUntilTimeout>
 80129f4:	1e03      	subs	r3, r0, #0
 80129f6:	d001      	beq.n	80129fc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80129f8:	2301      	movs	r3, #1
 80129fa:	e053      	b.n	8012aa4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	2bff      	cmp	r3, #255	@ 0xff
 8012a04:	d911      	bls.n	8012a2a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	22ff      	movs	r2, #255	@ 0xff
 8012a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a10:	b2da      	uxtb	r2, r3
 8012a12:	2380      	movs	r3, #128	@ 0x80
 8012a14:	045c      	lsls	r4, r3, #17
 8012a16:	230a      	movs	r3, #10
 8012a18:	18fb      	adds	r3, r7, r3
 8012a1a:	8819      	ldrh	r1, [r3, #0]
 8012a1c:	68f8      	ldr	r0, [r7, #12]
 8012a1e:	2300      	movs	r3, #0
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	0023      	movs	r3, r4
 8012a24:	f002 fae6 	bl	8014ff4 <I2C_TransferConfig>
 8012a28:	e012      	b.n	8012a50 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a2e:	b29a      	uxth	r2, r3
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a38:	b2da      	uxtb	r2, r3
 8012a3a:	2380      	movs	r3, #128	@ 0x80
 8012a3c:	049c      	lsls	r4, r3, #18
 8012a3e:	230a      	movs	r3, #10
 8012a40:	18fb      	adds	r3, r7, r3
 8012a42:	8819      	ldrh	r1, [r3, #0]
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	2300      	movs	r3, #0
 8012a48:	9300      	str	r3, [sp, #0]
 8012a4a:	0023      	movs	r3, r4
 8012a4c:	f002 fad2 	bl	8014ff4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d197      	bne.n	801298a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012a5a:	697a      	ldr	r2, [r7, #20]
 8012a5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	0018      	movs	r0, r3
 8012a62:	f002 f909 	bl	8014c78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012a66:	1e03      	subs	r3, r0, #0
 8012a68:	d001      	beq.n	8012a6e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e01a      	b.n	8012aa4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2220      	movs	r2, #32
 8012a74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	685a      	ldr	r2, [r3, #4]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	490b      	ldr	r1, [pc, #44]	@ (8012ab0 <HAL_I2C_Master_Receive+0x20c>)
 8012a82:	400a      	ands	r2, r1
 8012a84:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2241      	movs	r2, #65	@ 0x41
 8012a8a:	2120      	movs	r1, #32
 8012a8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2242      	movs	r2, #66	@ 0x42
 8012a92:	2100      	movs	r1, #0
 8012a94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2240      	movs	r2, #64	@ 0x40
 8012a9a:	2100      	movs	r1, #0
 8012a9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	e000      	b.n	8012aa4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8012aa2:	2302      	movs	r3, #2
  }
}
 8012aa4:	0018      	movs	r0, r3
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	b007      	add	sp, #28
 8012aaa:	bd90      	pop	{r4, r7, pc}
 8012aac:	80002400 	.word	0x80002400
 8012ab0:	fe00e800 	.word	0xfe00e800

08012ab4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8012ab4:	b5b0      	push	{r4, r5, r7, lr}
 8012ab6:	b088      	sub	sp, #32
 8012ab8:	af02      	add	r7, sp, #8
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	0008      	movs	r0, r1
 8012abe:	607a      	str	r2, [r7, #4]
 8012ac0:	0019      	movs	r1, r3
 8012ac2:	230a      	movs	r3, #10
 8012ac4:	18fb      	adds	r3, r7, r3
 8012ac6:	1c02      	adds	r2, r0, #0
 8012ac8:	801a      	strh	r2, [r3, #0]
 8012aca:	2308      	movs	r3, #8
 8012acc:	18fb      	adds	r3, r7, r3
 8012ace:	1c0a      	adds	r2, r1, #0
 8012ad0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2241      	movs	r2, #65	@ 0x41
 8012ad6:	5c9b      	ldrb	r3, [r3, r2]
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	2b20      	cmp	r3, #32
 8012adc:	d000      	beq.n	8012ae0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8012ade:	e0dd      	b.n	8012c9c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	699a      	ldr	r2, [r3, #24]
 8012ae6:	2380      	movs	r3, #128	@ 0x80
 8012ae8:	021b      	lsls	r3, r3, #8
 8012aea:	401a      	ands	r2, r3
 8012aec:	2380      	movs	r3, #128	@ 0x80
 8012aee:	021b      	lsls	r3, r3, #8
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d101      	bne.n	8012af8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8012af4:	2302      	movs	r3, #2
 8012af6:	e0d2      	b.n	8012c9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	2240      	movs	r2, #64	@ 0x40
 8012afc:	5c9b      	ldrb	r3, [r3, r2]
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d101      	bne.n	8012b06 <HAL_I2C_Master_Transmit_DMA+0x52>
 8012b02:	2302      	movs	r3, #2
 8012b04:	e0cb      	b.n	8012c9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2240      	movs	r2, #64	@ 0x40
 8012b0a:	2101      	movs	r1, #1
 8012b0c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	2241      	movs	r2, #65	@ 0x41
 8012b12:	2121      	movs	r1, #33	@ 0x21
 8012b14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	2242      	movs	r2, #66	@ 0x42
 8012b1a:	2110      	movs	r1, #16
 8012b1c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2200      	movs	r2, #0
 8012b22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2208      	movs	r2, #8
 8012b2e:	18ba      	adds	r2, r7, r2
 8012b30:	8812      	ldrh	r2, [r2, #0]
 8012b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	4a5c      	ldr	r2, [pc, #368]	@ (8012ca8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8012b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	4a5b      	ldr	r2, [pc, #364]	@ (8012cac <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8012b3e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b44:	b29b      	uxth	r3, r3
 8012b46:	2bff      	cmp	r3, #255	@ 0xff
 8012b48:	d906      	bls.n	8012b58 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	22ff      	movs	r2, #255	@ 0xff
 8012b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012b50:	2380      	movs	r3, #128	@ 0x80
 8012b52:	045b      	lsls	r3, r3, #17
 8012b54:	617b      	str	r3, [r7, #20]
 8012b56:	e007      	b.n	8012b68 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b5c:	b29a      	uxth	r2, r3
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012b62:	2380      	movs	r3, #128	@ 0x80
 8012b64:	049b      	lsls	r3, r3, #18
 8012b66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d100      	bne.n	8012b72 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8012b70:	e078      	b.n	8012c64 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d023      	beq.n	8012bc2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b7e:	4a4c      	ldr	r2, [pc, #304]	@ (8012cb0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8012b80:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b86:	4a4b      	ldr	r2, [pc, #300]	@ (8012cb4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8012b88:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b8e:	2200      	movs	r2, #0
 8012b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b96:	2200      	movs	r2, #0
 8012b98:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012b9e:	6879      	ldr	r1, [r7, #4]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	3328      	adds	r3, #40	@ 0x28
 8012ba6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8012bac:	2513      	movs	r5, #19
 8012bae:	197c      	adds	r4, r7, r5
 8012bb0:	f7fe ff62 	bl	8011a78 <HAL_DMA_Start_IT>
 8012bb4:	0003      	movs	r3, r0
 8012bb6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8012bb8:	197b      	adds	r3, r7, r5
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d13d      	bne.n	8012c3c <HAL_I2C_Master_Transmit_DMA+0x188>
 8012bc0:	e013      	b.n	8012bea <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2241      	movs	r2, #65	@ 0x41
 8012bc6:	2120      	movs	r1, #32
 8012bc8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2242      	movs	r2, #66	@ 0x42
 8012bce:	2100      	movs	r1, #0
 8012bd0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bd6:	2280      	movs	r2, #128	@ 0x80
 8012bd8:	431a      	orrs	r2, r3
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2240      	movs	r2, #64	@ 0x40
 8012be2:	2100      	movs	r1, #0
 8012be4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8012be6:	2301      	movs	r3, #1
 8012be8:	e059      	b.n	8012c9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012bee:	b2da      	uxtb	r2, r3
 8012bf0:	697c      	ldr	r4, [r7, #20]
 8012bf2:	230a      	movs	r3, #10
 8012bf4:	18fb      	adds	r3, r7, r3
 8012bf6:	8819      	ldrh	r1, [r3, #0]
 8012bf8:	68f8      	ldr	r0, [r7, #12]
 8012bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8012cb8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8012bfc:	9300      	str	r3, [sp, #0]
 8012bfe:	0023      	movs	r3, r4
 8012c00:	f002 f9f8 	bl	8014ff4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c0e:	1ad3      	subs	r3, r2, r3
 8012c10:	b29a      	uxth	r2, r3
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2240      	movs	r2, #64	@ 0x40
 8012c1a:	2100      	movs	r1, #0
 8012c1c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	2110      	movs	r1, #16
 8012c22:	0018      	movs	r0, r3
 8012c24:	f002 fa20 	bl	8015068 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2180      	movs	r1, #128	@ 0x80
 8012c34:	01c9      	lsls	r1, r1, #7
 8012c36:	430a      	orrs	r2, r1
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	e02d      	b.n	8012c98 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2241      	movs	r2, #65	@ 0x41
 8012c40:	2120      	movs	r1, #32
 8012c42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	2242      	movs	r2, #66	@ 0x42
 8012c48:	2100      	movs	r1, #0
 8012c4a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c50:	2210      	movs	r2, #16
 8012c52:	431a      	orrs	r2, r3
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	2240      	movs	r2, #64	@ 0x40
 8012c5c:	2100      	movs	r1, #0
 8012c5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012c60:	2301      	movs	r3, #1
 8012c62:	e01c      	b.n	8012c9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	4a15      	ldr	r2, [pc, #84]	@ (8012cbc <HAL_I2C_Master_Transmit_DMA+0x208>)
 8012c68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c6e:	b2da      	uxtb	r2, r3
 8012c70:	2380      	movs	r3, #128	@ 0x80
 8012c72:	049c      	lsls	r4, r3, #18
 8012c74:	230a      	movs	r3, #10
 8012c76:	18fb      	adds	r3, r7, r3
 8012c78:	8819      	ldrh	r1, [r3, #0]
 8012c7a:	68f8      	ldr	r0, [r7, #12]
 8012c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8012cb8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	0023      	movs	r3, r4
 8012c82:	f002 f9b7 	bl	8014ff4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	2240      	movs	r2, #64	@ 0x40
 8012c8a:	2100      	movs	r1, #0
 8012c8c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	2101      	movs	r1, #1
 8012c92:	0018      	movs	r0, r3
 8012c94:	f002 f9e8 	bl	8015068 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	e000      	b.n	8012c9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012c9c:	2302      	movs	r3, #2
  }
}
 8012c9e:	0018      	movs	r0, r3
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	b006      	add	sp, #24
 8012ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ca6:	46c0      	nop			@ (mov r8, r8)
 8012ca8:	ffff0000 	.word	0xffff0000
 8012cac:	08013925 	.word	0x08013925
 8012cb0:	080149a1 	.word	0x080149a1
 8012cb4:	08014ae1 	.word	0x08014ae1
 8012cb8:	80002000 	.word	0x80002000
 8012cbc:	080134d1 	.word	0x080134d1

08012cc0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8012cc0:	b5b0      	push	{r4, r5, r7, lr}
 8012cc2:	b088      	sub	sp, #32
 8012cc4:	af02      	add	r7, sp, #8
 8012cc6:	60f8      	str	r0, [r7, #12]
 8012cc8:	0008      	movs	r0, r1
 8012cca:	607a      	str	r2, [r7, #4]
 8012ccc:	0019      	movs	r1, r3
 8012cce:	230a      	movs	r3, #10
 8012cd0:	18fb      	adds	r3, r7, r3
 8012cd2:	1c02      	adds	r2, r0, #0
 8012cd4:	801a      	strh	r2, [r3, #0]
 8012cd6:	2308      	movs	r3, #8
 8012cd8:	18fb      	adds	r3, r7, r3
 8012cda:	1c0a      	adds	r2, r1, #0
 8012cdc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2241      	movs	r2, #65	@ 0x41
 8012ce2:	5c9b      	ldrb	r3, [r3, r2]
 8012ce4:	b2db      	uxtb	r3, r3
 8012ce6:	2b20      	cmp	r3, #32
 8012ce8:	d000      	beq.n	8012cec <HAL_I2C_Master_Receive_DMA+0x2c>
 8012cea:	e0dd      	b.n	8012ea8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	699a      	ldr	r2, [r3, #24]
 8012cf2:	2380      	movs	r3, #128	@ 0x80
 8012cf4:	021b      	lsls	r3, r3, #8
 8012cf6:	401a      	ands	r2, r3
 8012cf8:	2380      	movs	r3, #128	@ 0x80
 8012cfa:	021b      	lsls	r3, r3, #8
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d101      	bne.n	8012d04 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8012d00:	2302      	movs	r3, #2
 8012d02:	e0d2      	b.n	8012eaa <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	2240      	movs	r2, #64	@ 0x40
 8012d08:	5c9b      	ldrb	r3, [r3, r2]
 8012d0a:	2b01      	cmp	r3, #1
 8012d0c:	d101      	bne.n	8012d12 <HAL_I2C_Master_Receive_DMA+0x52>
 8012d0e:	2302      	movs	r3, #2
 8012d10:	e0cb      	b.n	8012eaa <HAL_I2C_Master_Receive_DMA+0x1ea>
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2240      	movs	r2, #64	@ 0x40
 8012d16:	2101      	movs	r1, #1
 8012d18:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2241      	movs	r2, #65	@ 0x41
 8012d1e:	2122      	movs	r1, #34	@ 0x22
 8012d20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	2242      	movs	r2, #66	@ 0x42
 8012d26:	2110      	movs	r1, #16
 8012d28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2208      	movs	r2, #8
 8012d3a:	18ba      	adds	r2, r7, r2
 8012d3c:	8812      	ldrh	r2, [r2, #0]
 8012d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	4a5c      	ldr	r2, [pc, #368]	@ (8012eb4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8012d44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	4a5b      	ldr	r2, [pc, #364]	@ (8012eb8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8012d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	2bff      	cmp	r3, #255	@ 0xff
 8012d54:	d906      	bls.n	8012d64 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	22ff      	movs	r2, #255	@ 0xff
 8012d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012d5c:	2380      	movs	r3, #128	@ 0x80
 8012d5e:	045b      	lsls	r3, r3, #17
 8012d60:	617b      	str	r3, [r7, #20]
 8012d62:	e007      	b.n	8012d74 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012d6e:	2380      	movs	r3, #128	@ 0x80
 8012d70:	049b      	lsls	r3, r3, #18
 8012d72:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d100      	bne.n	8012d7e <HAL_I2C_Master_Receive_DMA+0xbe>
 8012d7c:	e078      	b.n	8012e70 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d023      	beq.n	8012dce <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d8a:	4a4c      	ldr	r2, [pc, #304]	@ (8012ebc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8012d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d92:	4a4b      	ldr	r2, [pc, #300]	@ (8012ec0 <HAL_I2C_Master_Receive_DMA+0x200>)
 8012d94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012da2:	2200      	movs	r2, #0
 8012da4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	3324      	adds	r3, #36	@ 0x24
 8012db0:	0019      	movs	r1, r3
 8012db2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8012db8:	2513      	movs	r5, #19
 8012dba:	197c      	adds	r4, r7, r5
 8012dbc:	f7fe fe5c 	bl	8011a78 <HAL_DMA_Start_IT>
 8012dc0:	0003      	movs	r3, r0
 8012dc2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8012dc4:	197b      	adds	r3, r7, r5
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d13d      	bne.n	8012e48 <HAL_I2C_Master_Receive_DMA+0x188>
 8012dcc:	e013      	b.n	8012df6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	2241      	movs	r2, #65	@ 0x41
 8012dd2:	2120      	movs	r1, #32
 8012dd4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2242      	movs	r2, #66	@ 0x42
 8012dda:	2100      	movs	r1, #0
 8012ddc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012de2:	2280      	movs	r2, #128	@ 0x80
 8012de4:	431a      	orrs	r2, r3
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2240      	movs	r2, #64	@ 0x40
 8012dee:	2100      	movs	r1, #0
 8012df0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8012df2:	2301      	movs	r3, #1
 8012df4:	e059      	b.n	8012eaa <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	697c      	ldr	r4, [r7, #20]
 8012dfe:	230a      	movs	r3, #10
 8012e00:	18fb      	adds	r3, r7, r3
 8012e02:	8819      	ldrh	r1, [r3, #0]
 8012e04:	68f8      	ldr	r0, [r7, #12]
 8012e06:	4b2f      	ldr	r3, [pc, #188]	@ (8012ec4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	0023      	movs	r3, r4
 8012e0c:	f002 f8f2 	bl	8014ff4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e14:	b29a      	uxth	r2, r3
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e1a:	1ad3      	subs	r3, r2, r3
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2240      	movs	r2, #64	@ 0x40
 8012e26:	2100      	movs	r1, #0
 8012e28:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2110      	movs	r1, #16
 8012e2e:	0018      	movs	r0, r3
 8012e30:	f002 f91a 	bl	8015068 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	681a      	ldr	r2, [r3, #0]
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	2180      	movs	r1, #128	@ 0x80
 8012e40:	0209      	lsls	r1, r1, #8
 8012e42:	430a      	orrs	r2, r1
 8012e44:	601a      	str	r2, [r3, #0]
 8012e46:	e02d      	b.n	8012ea4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2241      	movs	r2, #65	@ 0x41
 8012e4c:	2120      	movs	r1, #32
 8012e4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	2242      	movs	r2, #66	@ 0x42
 8012e54:	2100      	movs	r1, #0
 8012e56:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e5c:	2210      	movs	r2, #16
 8012e5e:	431a      	orrs	r2, r3
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2240      	movs	r2, #64	@ 0x40
 8012e68:	2100      	movs	r1, #0
 8012e6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	e01c      	b.n	8012eaa <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	4a15      	ldr	r2, [pc, #84]	@ (8012ec8 <HAL_I2C_Master_Receive_DMA+0x208>)
 8012e74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e7a:	b2da      	uxtb	r2, r3
 8012e7c:	2380      	movs	r3, #128	@ 0x80
 8012e7e:	049c      	lsls	r4, r3, #18
 8012e80:	230a      	movs	r3, #10
 8012e82:	18fb      	adds	r3, r7, r3
 8012e84:	8819      	ldrh	r1, [r3, #0]
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	4b0e      	ldr	r3, [pc, #56]	@ (8012ec4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8012e8a:	9300      	str	r3, [sp, #0]
 8012e8c:	0023      	movs	r3, r4
 8012e8e:	f002 f8b1 	bl	8014ff4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2240      	movs	r2, #64	@ 0x40
 8012e96:	2100      	movs	r1, #0
 8012e98:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2101      	movs	r1, #1
 8012e9e:	0018      	movs	r0, r3
 8012ea0:	f002 f8e2 	bl	8015068 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	e000      	b.n	8012eaa <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012ea8:	2302      	movs	r3, #2
  }
}
 8012eaa:	0018      	movs	r0, r3
 8012eac:	46bd      	mov	sp, r7
 8012eae:	b006      	add	sp, #24
 8012eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8012eb2:	46c0      	nop			@ (mov r8, r8)
 8012eb4:	ffff0000 	.word	0xffff0000
 8012eb8:	08013925 	.word	0x08013925
 8012ebc:	08014a41 	.word	0x08014a41
 8012ec0:	08014ae1 	.word	0x08014ae1
 8012ec4:	80002400 	.word	0x80002400
 8012ec8:	080134d1 	.word	0x080134d1

08012ecc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012ecc:	b590      	push	{r4, r7, lr}
 8012ece:	b089      	sub	sp, #36	@ 0x24
 8012ed0:	af02      	add	r7, sp, #8
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	000c      	movs	r4, r1
 8012ed6:	0010      	movs	r0, r2
 8012ed8:	0019      	movs	r1, r3
 8012eda:	230a      	movs	r3, #10
 8012edc:	18fb      	adds	r3, r7, r3
 8012ede:	1c22      	adds	r2, r4, #0
 8012ee0:	801a      	strh	r2, [r3, #0]
 8012ee2:	2308      	movs	r3, #8
 8012ee4:	18fb      	adds	r3, r7, r3
 8012ee6:	1c02      	adds	r2, r0, #0
 8012ee8:	801a      	strh	r2, [r3, #0]
 8012eea:	1dbb      	adds	r3, r7, #6
 8012eec:	1c0a      	adds	r2, r1, #0
 8012eee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	2241      	movs	r2, #65	@ 0x41
 8012ef4:	5c9b      	ldrb	r3, [r3, r2]
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	2b20      	cmp	r3, #32
 8012efa:	d000      	beq.n	8012efe <HAL_I2C_Mem_Read+0x32>
 8012efc:	e110      	b.n	8013120 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8012efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d004      	beq.n	8012f0e <HAL_I2C_Mem_Read+0x42>
 8012f04:	232c      	movs	r3, #44	@ 0x2c
 8012f06:	18fb      	adds	r3, r7, r3
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d105      	bne.n	8012f1a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	2280      	movs	r2, #128	@ 0x80
 8012f12:	0092      	lsls	r2, r2, #2
 8012f14:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8012f16:	2301      	movs	r3, #1
 8012f18:	e103      	b.n	8013122 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2240      	movs	r2, #64	@ 0x40
 8012f1e:	5c9b      	ldrb	r3, [r3, r2]
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	d101      	bne.n	8012f28 <HAL_I2C_Mem_Read+0x5c>
 8012f24:	2302      	movs	r3, #2
 8012f26:	e0fc      	b.n	8013122 <HAL_I2C_Mem_Read+0x256>
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2240      	movs	r2, #64	@ 0x40
 8012f2c:	2101      	movs	r1, #1
 8012f2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012f30:	f7fe f850 	bl	8010fd4 <HAL_GetTick>
 8012f34:	0003      	movs	r3, r0
 8012f36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012f38:	2380      	movs	r3, #128	@ 0x80
 8012f3a:	0219      	lsls	r1, r3, #8
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	9300      	str	r3, [sp, #0]
 8012f42:	2319      	movs	r3, #25
 8012f44:	2201      	movs	r2, #1
 8012f46:	f001 fe03 	bl	8014b50 <I2C_WaitOnFlagUntilTimeout>
 8012f4a:	1e03      	subs	r3, r0, #0
 8012f4c:	d001      	beq.n	8012f52 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8012f4e:	2301      	movs	r3, #1
 8012f50:	e0e7      	b.n	8013122 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2241      	movs	r2, #65	@ 0x41
 8012f56:	2122      	movs	r1, #34	@ 0x22
 8012f58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	2242      	movs	r2, #66	@ 0x42
 8012f5e:	2140      	movs	r1, #64	@ 0x40
 8012f60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	2200      	movs	r2, #0
 8012f66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	222c      	movs	r2, #44	@ 0x2c
 8012f72:	18ba      	adds	r2, r7, r2
 8012f74:	8812      	ldrh	r2, [r2, #0]
 8012f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8012f7e:	1dbb      	adds	r3, r7, #6
 8012f80:	881c      	ldrh	r4, [r3, #0]
 8012f82:	2308      	movs	r3, #8
 8012f84:	18fb      	adds	r3, r7, r3
 8012f86:	881a      	ldrh	r2, [r3, #0]
 8012f88:	230a      	movs	r3, #10
 8012f8a:	18fb      	adds	r3, r7, r3
 8012f8c:	8819      	ldrh	r1, [r3, #0]
 8012f8e:	68f8      	ldr	r0, [r7, #12]
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	9301      	str	r3, [sp, #4]
 8012f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f96:	9300      	str	r3, [sp, #0]
 8012f98:	0023      	movs	r3, r4
 8012f9a:	f000 ffc1 	bl	8013f20 <I2C_RequestMemoryRead>
 8012f9e:	1e03      	subs	r3, r0, #0
 8012fa0:	d005      	beq.n	8012fae <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2240      	movs	r2, #64	@ 0x40
 8012fa6:	2100      	movs	r1, #0
 8012fa8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8012faa:	2301      	movs	r3, #1
 8012fac:	e0b9      	b.n	8013122 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	2bff      	cmp	r3, #255	@ 0xff
 8012fb6:	d911      	bls.n	8012fdc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	22ff      	movs	r2, #255	@ 0xff
 8012fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012fc2:	b2da      	uxtb	r2, r3
 8012fc4:	2380      	movs	r3, #128	@ 0x80
 8012fc6:	045c      	lsls	r4, r3, #17
 8012fc8:	230a      	movs	r3, #10
 8012fca:	18fb      	adds	r3, r7, r3
 8012fcc:	8819      	ldrh	r1, [r3, #0]
 8012fce:	68f8      	ldr	r0, [r7, #12]
 8012fd0:	4b56      	ldr	r3, [pc, #344]	@ (801312c <HAL_I2C_Mem_Read+0x260>)
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	0023      	movs	r3, r4
 8012fd6:	f002 f80d 	bl	8014ff4 <I2C_TransferConfig>
 8012fda:	e012      	b.n	8013002 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012fe0:	b29a      	uxth	r2, r3
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012fea:	b2da      	uxtb	r2, r3
 8012fec:	2380      	movs	r3, #128	@ 0x80
 8012fee:	049c      	lsls	r4, r3, #18
 8012ff0:	230a      	movs	r3, #10
 8012ff2:	18fb      	adds	r3, r7, r3
 8012ff4:	8819      	ldrh	r1, [r3, #0]
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	4b4c      	ldr	r3, [pc, #304]	@ (801312c <HAL_I2C_Mem_Read+0x260>)
 8012ffa:	9300      	str	r3, [sp, #0]
 8012ffc:	0023      	movs	r3, r4
 8012ffe:	f001 fff9 	bl	8014ff4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8013002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013004:	68f8      	ldr	r0, [r7, #12]
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	0013      	movs	r3, r2
 801300c:	2200      	movs	r2, #0
 801300e:	2104      	movs	r1, #4
 8013010:	f001 fd9e 	bl	8014b50 <I2C_WaitOnFlagUntilTimeout>
 8013014:	1e03      	subs	r3, r0, #0
 8013016:	d001      	beq.n	801301c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8013018:	2301      	movs	r3, #1
 801301a:	e082      	b.n	8013122 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013026:	b2d2      	uxtb	r2, r2
 8013028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801302e:	1c5a      	adds	r2, r3, #1
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013038:	3b01      	subs	r3, #1
 801303a:	b29a      	uxth	r2, r3
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013044:	b29b      	uxth	r3, r3
 8013046:	3b01      	subs	r3, #1
 8013048:	b29a      	uxth	r2, r3
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013052:	b29b      	uxth	r3, r3
 8013054:	2b00      	cmp	r3, #0
 8013056:	d03a      	beq.n	80130ce <HAL_I2C_Mem_Read+0x202>
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801305c:	2b00      	cmp	r3, #0
 801305e:	d136      	bne.n	80130ce <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013062:	68f8      	ldr	r0, [r7, #12]
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	9300      	str	r3, [sp, #0]
 8013068:	0013      	movs	r3, r2
 801306a:	2200      	movs	r2, #0
 801306c:	2180      	movs	r1, #128	@ 0x80
 801306e:	f001 fd6f 	bl	8014b50 <I2C_WaitOnFlagUntilTimeout>
 8013072:	1e03      	subs	r3, r0, #0
 8013074:	d001      	beq.n	801307a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8013076:	2301      	movs	r3, #1
 8013078:	e053      	b.n	8013122 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801307e:	b29b      	uxth	r3, r3
 8013080:	2bff      	cmp	r3, #255	@ 0xff
 8013082:	d911      	bls.n	80130a8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	22ff      	movs	r2, #255	@ 0xff
 8013088:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801308e:	b2da      	uxtb	r2, r3
 8013090:	2380      	movs	r3, #128	@ 0x80
 8013092:	045c      	lsls	r4, r3, #17
 8013094:	230a      	movs	r3, #10
 8013096:	18fb      	adds	r3, r7, r3
 8013098:	8819      	ldrh	r1, [r3, #0]
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	2300      	movs	r3, #0
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	0023      	movs	r3, r4
 80130a2:	f001 ffa7 	bl	8014ff4 <I2C_TransferConfig>
 80130a6:	e012      	b.n	80130ce <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130ac:	b29a      	uxth	r2, r3
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130b6:	b2da      	uxtb	r2, r3
 80130b8:	2380      	movs	r3, #128	@ 0x80
 80130ba:	049c      	lsls	r4, r3, #18
 80130bc:	230a      	movs	r3, #10
 80130be:	18fb      	adds	r3, r7, r3
 80130c0:	8819      	ldrh	r1, [r3, #0]
 80130c2:	68f8      	ldr	r0, [r7, #12]
 80130c4:	2300      	movs	r3, #0
 80130c6:	9300      	str	r3, [sp, #0]
 80130c8:	0023      	movs	r3, r4
 80130ca:	f001 ff93 	bl	8014ff4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d194      	bne.n	8013002 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80130d8:	697a      	ldr	r2, [r7, #20]
 80130da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	0018      	movs	r0, r3
 80130e0:	f001 fdca 	bl	8014c78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80130e4:	1e03      	subs	r3, r0, #0
 80130e6:	d001      	beq.n	80130ec <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80130e8:	2301      	movs	r3, #1
 80130ea:	e01a      	b.n	8013122 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2220      	movs	r2, #32
 80130f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	685a      	ldr	r2, [r3, #4]
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	490c      	ldr	r1, [pc, #48]	@ (8013130 <HAL_I2C_Mem_Read+0x264>)
 8013100:	400a      	ands	r2, r1
 8013102:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	2241      	movs	r2, #65	@ 0x41
 8013108:	2120      	movs	r1, #32
 801310a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2242      	movs	r2, #66	@ 0x42
 8013110:	2100      	movs	r1, #0
 8013112:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2240      	movs	r2, #64	@ 0x40
 8013118:	2100      	movs	r1, #0
 801311a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801311c:	2300      	movs	r3, #0
 801311e:	e000      	b.n	8013122 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8013120:	2302      	movs	r3, #2
  }
}
 8013122:	0018      	movs	r0, r3
 8013124:	46bd      	mov	sp, r7
 8013126:	b007      	add	sp, #28
 8013128:	bd90      	pop	{r4, r7, pc}
 801312a:	46c0      	nop			@ (mov r8, r8)
 801312c:	80002400 	.word	0x80002400
 8013130:	fe00e800 	.word	0xfe00e800

08013134 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8013134:	b5b0      	push	{r4, r5, r7, lr}
 8013136:	b088      	sub	sp, #32
 8013138:	af02      	add	r7, sp, #8
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	000c      	movs	r4, r1
 801313e:	0010      	movs	r0, r2
 8013140:	0019      	movs	r1, r3
 8013142:	230a      	movs	r3, #10
 8013144:	18fb      	adds	r3, r7, r3
 8013146:	1c22      	adds	r2, r4, #0
 8013148:	801a      	strh	r2, [r3, #0]
 801314a:	2308      	movs	r3, #8
 801314c:	18fb      	adds	r3, r7, r3
 801314e:	1c02      	adds	r2, r0, #0
 8013150:	801a      	strh	r2, [r3, #0]
 8013152:	1dbb      	adds	r3, r7, #6
 8013154:	1c0a      	adds	r2, r1, #0
 8013156:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2241      	movs	r2, #65	@ 0x41
 801315c:	5c9b      	ldrb	r3, [r3, r2]
 801315e:	b2db      	uxtb	r3, r3
 8013160:	2b20      	cmp	r3, #32
 8013162:	d000      	beq.n	8013166 <HAL_I2C_Mem_Write_DMA+0x32>
 8013164:	e0d8      	b.n	8013318 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8013166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <HAL_I2C_Mem_Write_DMA+0x42>
 801316c:	232c      	movs	r3, #44	@ 0x2c
 801316e:	18fb      	adds	r3, r7, r3
 8013170:	881b      	ldrh	r3, [r3, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d105      	bne.n	8013182 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2280      	movs	r2, #128	@ 0x80
 801317a:	0092      	lsls	r2, r2, #2
 801317c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801317e:	2301      	movs	r3, #1
 8013180:	e0cb      	b.n	801331a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	699a      	ldr	r2, [r3, #24]
 8013188:	2380      	movs	r3, #128	@ 0x80
 801318a:	021b      	lsls	r3, r3, #8
 801318c:	401a      	ands	r2, r3
 801318e:	2380      	movs	r3, #128	@ 0x80
 8013190:	021b      	lsls	r3, r3, #8
 8013192:	429a      	cmp	r2, r3
 8013194:	d101      	bne.n	801319a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8013196:	2302      	movs	r3, #2
 8013198:	e0bf      	b.n	801331a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2240      	movs	r2, #64	@ 0x40
 801319e:	5c9b      	ldrb	r3, [r3, r2]
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	d101      	bne.n	80131a8 <HAL_I2C_Mem_Write_DMA+0x74>
 80131a4:	2302      	movs	r3, #2
 80131a6:	e0b8      	b.n	801331a <HAL_I2C_Mem_Write_DMA+0x1e6>
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2240      	movs	r2, #64	@ 0x40
 80131ac:	2101      	movs	r1, #1
 80131ae:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	2241      	movs	r2, #65	@ 0x41
 80131b4:	2121      	movs	r1, #33	@ 0x21
 80131b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2242      	movs	r2, #66	@ 0x42
 80131bc:	2140      	movs	r1, #64	@ 0x40
 80131be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2200      	movs	r2, #0
 80131c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	222c      	movs	r2, #44	@ 0x2c
 80131d0:	18ba      	adds	r2, r7, r2
 80131d2:	8812      	ldrh	r2, [r2, #0]
 80131d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	4a52      	ldr	r2, [pc, #328]	@ (8013324 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 80131da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	4a52      	ldr	r2, [pc, #328]	@ (8013328 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 80131e0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80131e2:	230a      	movs	r3, #10
 80131e4:	18fb      	adds	r3, r7, r3
 80131e6:	881a      	ldrh	r2, [r3, #0]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131f0:	b29b      	uxth	r3, r3
 80131f2:	2bff      	cmp	r3, #255	@ 0xff
 80131f4:	d903      	bls.n	80131fe <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	22ff      	movs	r2, #255	@ 0xff
 80131fa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80131fc:	e004      	b.n	8013208 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013202:	b29a      	uxth	r2, r3
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013208:	1dbb      	adds	r3, r7, #6
 801320a:	881b      	ldrh	r3, [r3, #0]
 801320c:	2b01      	cmp	r3, #1
 801320e:	d10b      	bne.n	8013228 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8013210:	2308      	movs	r3, #8
 8013212:	18fb      	adds	r3, r7, r3
 8013214:	881b      	ldrh	r3, [r3, #0]
 8013216:	b2da      	uxtb	r2, r3
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	2201      	movs	r2, #1
 8013222:	4252      	negs	r2, r2
 8013224:	651a      	str	r2, [r3, #80]	@ 0x50
 8013226:	e00e      	b.n	8013246 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8013228:	2108      	movs	r1, #8
 801322a:	187b      	adds	r3, r7, r1
 801322c:	881b      	ldrh	r3, [r3, #0]
 801322e:	0a1b      	lsrs	r3, r3, #8
 8013230:	b29b      	uxth	r3, r3
 8013232:	b2da      	uxtb	r2, r3
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 801323a:	187b      	adds	r3, r7, r1
 801323c:	881b      	ldrh	r3, [r3, #0]
 801323e:	b2db      	uxtb	r3, r3
 8013240:	001a      	movs	r2, r3
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801324a:	2b00      	cmp	r3, #0
 801324c:	d023      	beq.n	8013296 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013252:	4a36      	ldr	r2, [pc, #216]	@ (801332c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8013254:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801325a:	4a35      	ldr	r2, [pc, #212]	@ (8013330 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 801325c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013262:	2200      	movs	r2, #0
 8013264:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801326a:	2200      	movs	r2, #0
 801326c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	3328      	adds	r3, #40	@ 0x28
 801327a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013280:	2517      	movs	r5, #23
 8013282:	197c      	adds	r4, r7, r5
 8013284:	f7fe fbf8 	bl	8011a78 <HAL_DMA_Start_IT>
 8013288:	0003      	movs	r3, r0
 801328a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 801328c:	197b      	adds	r3, r7, r5
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d12d      	bne.n	80132f0 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8013294:	e013      	b.n	80132be <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2241      	movs	r2, #65	@ 0x41
 801329a:	2120      	movs	r1, #32
 801329c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2242      	movs	r2, #66	@ 0x42
 80132a2:	2100      	movs	r1, #0
 80132a4:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132aa:	2280      	movs	r2, #128	@ 0x80
 80132ac:	431a      	orrs	r2, r3
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2240      	movs	r2, #64	@ 0x40
 80132b6:	2100      	movs	r1, #0
 80132b8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80132ba:	2301      	movs	r3, #1
 80132bc:	e02d      	b.n	801331a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80132be:	1dbb      	adds	r3, r7, #6
 80132c0:	881b      	ldrh	r3, [r3, #0]
 80132c2:	b2da      	uxtb	r2, r3
 80132c4:	2380      	movs	r3, #128	@ 0x80
 80132c6:	045c      	lsls	r4, r3, #17
 80132c8:	230a      	movs	r3, #10
 80132ca:	18fb      	adds	r3, r7, r3
 80132cc:	8819      	ldrh	r1, [r3, #0]
 80132ce:	68f8      	ldr	r0, [r7, #12]
 80132d0:	4b18      	ldr	r3, [pc, #96]	@ (8013334 <HAL_I2C_Mem_Write_DMA+0x200>)
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	0023      	movs	r3, r4
 80132d6:	f001 fe8d 	bl	8014ff4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	2240      	movs	r2, #64	@ 0x40
 80132de:	2100      	movs	r1, #0
 80132e0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2101      	movs	r1, #1
 80132e6:	0018      	movs	r0, r3
 80132e8:	f001 febe 	bl	8015068 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80132ec:	2300      	movs	r3, #0
 80132ee:	e014      	b.n	801331a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2241      	movs	r2, #65	@ 0x41
 80132f4:	2120      	movs	r1, #32
 80132f6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2242      	movs	r2, #66	@ 0x42
 80132fc:	2100      	movs	r1, #0
 80132fe:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013304:	2210      	movs	r2, #16
 8013306:	431a      	orrs	r2, r3
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	2240      	movs	r2, #64	@ 0x40
 8013310:	2100      	movs	r1, #0
 8013312:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8013314:	2301      	movs	r3, #1
 8013316:	e000      	b.n	801331a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8013318:	2302      	movs	r3, #2
  }
}
 801331a:	0018      	movs	r0, r3
 801331c:	46bd      	mov	sp, r7
 801331e:	b006      	add	sp, #24
 8013320:	bdb0      	pop	{r4, r5, r7, pc}
 8013322:	46c0      	nop			@ (mov r8, r8)
 8013324:	ffff0000 	.word	0xffff0000
 8013328:	08013b1d 	.word	0x08013b1d
 801332c:	080149a1 	.word	0x080149a1
 8013330:	08014ae1 	.word	0x08014ae1
 8013334:	80002000 	.word	0x80002000

08013338 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	699b      	ldr	r3, [r3, #24]
 8013346:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013354:	2b00      	cmp	r3, #0
 8013356:	d005      	beq.n	8013364 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801335c:	68ba      	ldr	r2, [r7, #8]
 801335e:	68f9      	ldr	r1, [r7, #12]
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	4798      	blx	r3
  }
}
 8013364:	46c0      	nop			@ (mov r8, r8)
 8013366:	46bd      	mov	sp, r7
 8013368:	b004      	add	sp, #16
 801336a:	bd80      	pop	{r7, pc}

0801336c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b086      	sub	sp, #24
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	699b      	ldr	r3, [r3, #24]
 801337a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013384:	697a      	ldr	r2, [r7, #20]
 8013386:	2380      	movs	r3, #128	@ 0x80
 8013388:	005b      	lsls	r3, r3, #1
 801338a:	4013      	ands	r3, r2
 801338c:	d00e      	beq.n	80133ac <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	2280      	movs	r2, #128	@ 0x80
 8013392:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8013394:	d00a      	beq.n	80133ac <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801339a:	2201      	movs	r2, #1
 801339c:	431a      	orrs	r2, r3
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2280      	movs	r2, #128	@ 0x80
 80133a8:	0052      	lsls	r2, r2, #1
 80133aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80133ac:	697a      	ldr	r2, [r7, #20]
 80133ae:	2380      	movs	r3, #128	@ 0x80
 80133b0:	00db      	lsls	r3, r3, #3
 80133b2:	4013      	ands	r3, r2
 80133b4:	d00e      	beq.n	80133d4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	2280      	movs	r2, #128	@ 0x80
 80133ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80133bc:	d00a      	beq.n	80133d4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133c2:	2208      	movs	r2, #8
 80133c4:	431a      	orrs	r2, r3
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2280      	movs	r2, #128	@ 0x80
 80133d0:	00d2      	lsls	r2, r2, #3
 80133d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80133d4:	697a      	ldr	r2, [r7, #20]
 80133d6:	2380      	movs	r3, #128	@ 0x80
 80133d8:	009b      	lsls	r3, r3, #2
 80133da:	4013      	ands	r3, r2
 80133dc:	d00e      	beq.n	80133fc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	2280      	movs	r2, #128	@ 0x80
 80133e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80133e4:	d00a      	beq.n	80133fc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80133ea:	2202      	movs	r2, #2
 80133ec:	431a      	orrs	r2, r3
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2280      	movs	r2, #128	@ 0x80
 80133f8:	0092      	lsls	r2, r2, #2
 80133fa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013400:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	220b      	movs	r2, #11
 8013406:	4013      	ands	r3, r2
 8013408:	d005      	beq.n	8013416 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801340a:	68fa      	ldr	r2, [r7, #12]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	0011      	movs	r1, r2
 8013410:	0018      	movs	r0, r3
 8013412:	f001 f977 	bl	8014704 <I2C_ITError>
  }
}
 8013416:	46c0      	nop			@ (mov r8, r8)
 8013418:	46bd      	mov	sp, r7
 801341a:	b006      	add	sp, #24
 801341c:	bd80      	pop	{r7, pc}

0801341e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801341e:	b580      	push	{r7, lr}
 8013420:	b082      	sub	sp, #8
 8013422:	af00      	add	r7, sp, #0
 8013424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8013426:	46c0      	nop			@ (mov r8, r8)
 8013428:	46bd      	mov	sp, r7
 801342a:	b002      	add	sp, #8
 801342c:	bd80      	pop	{r7, pc}

0801342e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801342e:	b580      	push	{r7, lr}
 8013430:	b082      	sub	sp, #8
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8013436:	46c0      	nop			@ (mov r8, r8)
 8013438:	46bd      	mov	sp, r7
 801343a:	b002      	add	sp, #8
 801343c:	bd80      	pop	{r7, pc}

0801343e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801343e:	b580      	push	{r7, lr}
 8013440:	b082      	sub	sp, #8
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8013446:	46c0      	nop			@ (mov r8, r8)
 8013448:	46bd      	mov	sp, r7
 801344a:	b002      	add	sp, #8
 801344c:	bd80      	pop	{r7, pc}

0801344e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801344e:	b580      	push	{r7, lr}
 8013450:	b082      	sub	sp, #8
 8013452:	af00      	add	r7, sp, #0
 8013454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8013456:	46c0      	nop			@ (mov r8, r8)
 8013458:	46bd      	mov	sp, r7
 801345a:	b002      	add	sp, #8
 801345c:	bd80      	pop	{r7, pc}

0801345e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801345e:	b580      	push	{r7, lr}
 8013460:	b082      	sub	sp, #8
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
 8013466:	0008      	movs	r0, r1
 8013468:	0011      	movs	r1, r2
 801346a:	1cfb      	adds	r3, r7, #3
 801346c:	1c02      	adds	r2, r0, #0
 801346e:	701a      	strb	r2, [r3, #0]
 8013470:	003b      	movs	r3, r7
 8013472:	1c0a      	adds	r2, r1, #0
 8013474:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8013476:	46c0      	nop			@ (mov r8, r8)
 8013478:	46bd      	mov	sp, r7
 801347a:	b002      	add	sp, #8
 801347c:	bd80      	pop	{r7, pc}

0801347e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801347e:	b580      	push	{r7, lr}
 8013480:	b082      	sub	sp, #8
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8013486:	46c0      	nop			@ (mov r8, r8)
 8013488:	46bd      	mov	sp, r7
 801348a:	b002      	add	sp, #8
 801348c:	bd80      	pop	{r7, pc}

0801348e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801348e:	b580      	push	{r7, lr}
 8013490:	b082      	sub	sp, #8
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8013496:	46c0      	nop			@ (mov r8, r8)
 8013498:	46bd      	mov	sp, r7
 801349a:	b002      	add	sp, #8
 801349c:	bd80      	pop	{r7, pc}

0801349e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801349e:	b580      	push	{r7, lr}
 80134a0:	b082      	sub	sp, #8
 80134a2:	af00      	add	r7, sp, #0
 80134a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80134a6:	46c0      	nop			@ (mov r8, r8)
 80134a8:	46bd      	mov	sp, r7
 80134aa:	b002      	add	sp, #8
 80134ac:	bd80      	pop	{r7, pc}

080134ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80134ae:	b580      	push	{r7, lr}
 80134b0:	b082      	sub	sp, #8
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80134b6:	46c0      	nop			@ (mov r8, r8)
 80134b8:	46bd      	mov	sp, r7
 80134ba:	b002      	add	sp, #8
 80134bc:	bd80      	pop	{r7, pc}

080134be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80134be:	b580      	push	{r7, lr}
 80134c0:	b082      	sub	sp, #8
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80134c6:	46c0      	nop			@ (mov r8, r8)
 80134c8:	46bd      	mov	sp, r7
 80134ca:	b002      	add	sp, #8
 80134cc:	bd80      	pop	{r7, pc}
	...

080134d0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80134d0:	b590      	push	{r4, r7, lr}
 80134d2:	b089      	sub	sp, #36	@ 0x24
 80134d4:	af02      	add	r7, sp, #8
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	60b9      	str	r1, [r7, #8]
 80134da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	2240      	movs	r2, #64	@ 0x40
 80134e4:	5c9b      	ldrb	r3, [r3, r2]
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	d101      	bne.n	80134ee <I2C_Master_ISR_IT+0x1e>
 80134ea:	2302      	movs	r3, #2
 80134ec:	e113      	b.n	8013716 <I2C_Master_ISR_IT+0x246>
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	2240      	movs	r2, #64	@ 0x40
 80134f2:	2101      	movs	r1, #1
 80134f4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	2210      	movs	r2, #16
 80134fa:	4013      	ands	r3, r2
 80134fc:	d012      	beq.n	8013524 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2210      	movs	r2, #16
 8013502:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8013504:	d00e      	beq.n	8013524 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2210      	movs	r2, #16
 801350c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013512:	2204      	movs	r2, #4
 8013514:	431a      	orrs	r2, r3
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	0018      	movs	r0, r3
 801351e:	f001 fa1c 	bl	801495a <I2C_Flush_TXDR>
 8013522:	e0e5      	b.n	80136f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	2204      	movs	r2, #4
 8013528:	4013      	ands	r3, r2
 801352a:	d021      	beq.n	8013570 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2204      	movs	r2, #4
 8013530:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013532:	d01d      	beq.n	8013570 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	2204      	movs	r2, #4
 8013538:	4393      	bics	r3, r2
 801353a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013546:	b2d2      	uxtb	r2, r2
 8013548:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801354e:	1c5a      	adds	r2, r3, #1
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013558:	3b01      	subs	r3, #1
 801355a:	b29a      	uxth	r2, r3
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013564:	b29b      	uxth	r3, r3
 8013566:	3b01      	subs	r3, #1
 8013568:	b29a      	uxth	r2, r3
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801356e:	e0bf      	b.n	80136f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	2202      	movs	r2, #2
 8013574:	4013      	ands	r3, r2
 8013576:	d01c      	beq.n	80135b2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2202      	movs	r2, #2
 801357c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801357e:	d018      	beq.n	80135b2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013584:	781a      	ldrb	r2, [r3, #0]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013590:	1c5a      	adds	r2, r3, #1
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801359a:	3b01      	subs	r3, #1
 801359c:	b29a      	uxth	r2, r3
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	3b01      	subs	r3, #1
 80135aa:	b29a      	uxth	r2, r3
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80135b0:	e09e      	b.n	80136f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	2280      	movs	r2, #128	@ 0x80
 80135b6:	4013      	ands	r3, r2
 80135b8:	d100      	bne.n	80135bc <I2C_Master_ISR_IT+0xec>
 80135ba:	e069      	b.n	8013690 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2240      	movs	r2, #64	@ 0x40
 80135c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80135c2:	d065      	beq.n	8013690 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d04a      	beq.n	8013664 <I2C_Master_ISR_IT+0x194>
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d146      	bne.n	8013664 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	b29a      	uxth	r2, r3
 80135de:	2112      	movs	r1, #18
 80135e0:	187b      	adds	r3, r7, r1
 80135e2:	0592      	lsls	r2, r2, #22
 80135e4:	0d92      	lsrs	r2, r2, #22
 80135e6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	2bff      	cmp	r3, #255	@ 0xff
 80135f0:	d910      	bls.n	8013614 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	22ff      	movs	r2, #255	@ 0xff
 80135f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80135fc:	b2da      	uxtb	r2, r3
 80135fe:	2380      	movs	r3, #128	@ 0x80
 8013600:	045c      	lsls	r4, r3, #17
 8013602:	187b      	adds	r3, r7, r1
 8013604:	8819      	ldrh	r1, [r3, #0]
 8013606:	68f8      	ldr	r0, [r7, #12]
 8013608:	2300      	movs	r3, #0
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	0023      	movs	r3, r4
 801360e:	f001 fcf1 	bl	8014ff4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013612:	e03c      	b.n	801368e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013618:	b29a      	uxth	r2, r3
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013622:	4a3f      	ldr	r2, [pc, #252]	@ (8013720 <I2C_Master_ISR_IT+0x250>)
 8013624:	4293      	cmp	r3, r2
 8013626:	d00e      	beq.n	8013646 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801362c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013632:	2312      	movs	r3, #18
 8013634:	18fb      	adds	r3, r7, r3
 8013636:	8819      	ldrh	r1, [r3, #0]
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	2300      	movs	r3, #0
 801363c:	9300      	str	r3, [sp, #0]
 801363e:	0023      	movs	r3, r4
 8013640:	f001 fcd8 	bl	8014ff4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013644:	e023      	b.n	801368e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801364a:	b2da      	uxtb	r2, r3
 801364c:	2380      	movs	r3, #128	@ 0x80
 801364e:	049c      	lsls	r4, r3, #18
 8013650:	2312      	movs	r3, #18
 8013652:	18fb      	adds	r3, r7, r3
 8013654:	8819      	ldrh	r1, [r3, #0]
 8013656:	68f8      	ldr	r0, [r7, #12]
 8013658:	2300      	movs	r3, #0
 801365a:	9300      	str	r3, [sp, #0]
 801365c:	0023      	movs	r3, r4
 801365e:	f001 fcc9 	bl	8014ff4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013662:	e014      	b.n	801368e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	685a      	ldr	r2, [r3, #4]
 801366a:	2380      	movs	r3, #128	@ 0x80
 801366c:	049b      	lsls	r3, r3, #18
 801366e:	401a      	ands	r2, r3
 8013670:	2380      	movs	r3, #128	@ 0x80
 8013672:	049b      	lsls	r3, r3, #18
 8013674:	429a      	cmp	r2, r3
 8013676:	d004      	beq.n	8013682 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	0018      	movs	r0, r3
 801367c:	f000 fd56 	bl	801412c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013680:	e036      	b.n	80136f0 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	2140      	movs	r1, #64	@ 0x40
 8013686:	0018      	movs	r0, r3
 8013688:	f001 f83c 	bl	8014704 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801368c:	e030      	b.n	80136f0 <I2C_Master_ISR_IT+0x220>
 801368e:	e02f      	b.n	80136f0 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	2240      	movs	r2, #64	@ 0x40
 8013694:	4013      	ands	r3, r2
 8013696:	d02b      	beq.n	80136f0 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2240      	movs	r2, #64	@ 0x40
 801369c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801369e:	d027      	beq.n	80136f0 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d11d      	bne.n	80136e6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	685a      	ldr	r2, [r3, #4]
 80136b0:	2380      	movs	r3, #128	@ 0x80
 80136b2:	049b      	lsls	r3, r3, #18
 80136b4:	401a      	ands	r2, r3
 80136b6:	2380      	movs	r3, #128	@ 0x80
 80136b8:	049b      	lsls	r3, r3, #18
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d018      	beq.n	80136f0 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136c2:	4a17      	ldr	r2, [pc, #92]	@ (8013720 <I2C_Master_ISR_IT+0x250>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d109      	bne.n	80136dc <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	685a      	ldr	r2, [r3, #4]
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2180      	movs	r1, #128	@ 0x80
 80136d4:	01c9      	lsls	r1, r1, #7
 80136d6:	430a      	orrs	r2, r1
 80136d8:	605a      	str	r2, [r3, #4]
 80136da:	e009      	b.n	80136f0 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	0018      	movs	r0, r3
 80136e0:	f000 fd24 	bl	801412c <I2C_ITMasterSeqCplt>
 80136e4:	e004      	b.n	80136f0 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2140      	movs	r1, #64	@ 0x40
 80136ea:	0018      	movs	r0, r3
 80136ec:	f001 f80a 	bl	8014704 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	2220      	movs	r2, #32
 80136f4:	4013      	ands	r3, r2
 80136f6:	d009      	beq.n	801370c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2220      	movs	r2, #32
 80136fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80136fe:	d005      	beq.n	801370c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8013700:	697a      	ldr	r2, [r7, #20]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	0011      	movs	r1, r2
 8013706:	0018      	movs	r0, r3
 8013708:	f000 fdb6 	bl	8014278 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	2240      	movs	r2, #64	@ 0x40
 8013710:	2100      	movs	r1, #0
 8013712:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013714:	2300      	movs	r3, #0
}
 8013716:	0018      	movs	r0, r3
 8013718:	46bd      	mov	sp, r7
 801371a:	b007      	add	sp, #28
 801371c:	bd90      	pop	{r4, r7, pc}
 801371e:	46c0      	nop			@ (mov r8, r8)
 8013720:	ffff0000 	.word	0xffff0000

08013724 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b086      	sub	sp, #24
 8013728:	af00      	add	r7, sp, #0
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013734:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2240      	movs	r2, #64	@ 0x40
 801373e:	5c9b      	ldrb	r3, [r3, r2]
 8013740:	2b01      	cmp	r3, #1
 8013742:	d101      	bne.n	8013748 <I2C_Slave_ISR_IT+0x24>
 8013744:	2302      	movs	r3, #2
 8013746:	e0e6      	b.n	8013916 <I2C_Slave_ISR_IT+0x1f2>
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2240      	movs	r2, #64	@ 0x40
 801374c:	2101      	movs	r1, #1
 801374e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	2220      	movs	r2, #32
 8013754:	4013      	ands	r3, r2
 8013756:	d009      	beq.n	801376c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2220      	movs	r2, #32
 801375c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801375e:	d005      	beq.n	801376c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8013760:	693a      	ldr	r2, [r7, #16]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	0011      	movs	r1, r2
 8013766:	0018      	movs	r0, r3
 8013768:	f000 fe54 	bl	8014414 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	2210      	movs	r2, #16
 8013770:	4013      	ands	r3, r2
 8013772:	d052      	beq.n	801381a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2210      	movs	r2, #16
 8013778:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801377a:	d04e      	beq.n	801381a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013780:	b29b      	uxth	r3, r3
 8013782:	2b00      	cmp	r3, #0
 8013784:	d12d      	bne.n	80137e2 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	2241      	movs	r2, #65	@ 0x41
 801378a:	5c9b      	ldrb	r3, [r3, r2]
 801378c:	b2db      	uxtb	r3, r3
 801378e:	2b28      	cmp	r3, #40	@ 0x28
 8013790:	d10b      	bne.n	80137aa <I2C_Slave_ISR_IT+0x86>
 8013792:	697a      	ldr	r2, [r7, #20]
 8013794:	2380      	movs	r3, #128	@ 0x80
 8013796:	049b      	lsls	r3, r3, #18
 8013798:	429a      	cmp	r2, r3
 801379a:	d106      	bne.n	80137aa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801379c:	693a      	ldr	r2, [r7, #16]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	0011      	movs	r1, r2
 80137a2:	0018      	movs	r0, r3
 80137a4:	f000 ff56 	bl	8014654 <I2C_ITListenCplt>
 80137a8:	e036      	b.n	8013818 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	2241      	movs	r2, #65	@ 0x41
 80137ae:	5c9b      	ldrb	r3, [r3, r2]
 80137b0:	b2db      	uxtb	r3, r3
 80137b2:	2b29      	cmp	r3, #41	@ 0x29
 80137b4:	d110      	bne.n	80137d8 <I2C_Slave_ISR_IT+0xb4>
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	4a59      	ldr	r2, [pc, #356]	@ (8013920 <I2C_Slave_ISR_IT+0x1fc>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d00c      	beq.n	80137d8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	2210      	movs	r2, #16
 80137c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	0018      	movs	r0, r3
 80137ca:	f001 f8c6 	bl	801495a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	0018      	movs	r0, r3
 80137d2:	f000 fced 	bl	80141b0 <I2C_ITSlaveSeqCplt>
 80137d6:	e01f      	b.n	8013818 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	2210      	movs	r2, #16
 80137de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80137e0:	e091      	b.n	8013906 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	2210      	movs	r2, #16
 80137e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137ee:	2204      	movs	r2, #4
 80137f0:	431a      	orrs	r2, r3
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d005      	beq.n	8013808 <I2C_Slave_ISR_IT+0xe4>
 80137fc:	697a      	ldr	r2, [r7, #20]
 80137fe:	2380      	movs	r3, #128	@ 0x80
 8013800:	045b      	lsls	r3, r3, #17
 8013802:	429a      	cmp	r2, r3
 8013804:	d000      	beq.n	8013808 <I2C_Slave_ISR_IT+0xe4>
 8013806:	e07e      	b.n	8013906 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	0011      	movs	r1, r2
 8013810:	0018      	movs	r0, r3
 8013812:	f000 ff77 	bl	8014704 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8013816:	e076      	b.n	8013906 <I2C_Slave_ISR_IT+0x1e2>
 8013818:	e075      	b.n	8013906 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	2204      	movs	r2, #4
 801381e:	4013      	ands	r3, r2
 8013820:	d02f      	beq.n	8013882 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2204      	movs	r2, #4
 8013826:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013828:	d02b      	beq.n	8013882 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801382e:	b29b      	uxth	r3, r3
 8013830:	2b00      	cmp	r3, #0
 8013832:	d018      	beq.n	8013866 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801383e:	b2d2      	uxtb	r2, r2
 8013840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013846:	1c5a      	adds	r2, r3, #1
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013850:	3b01      	subs	r3, #1
 8013852:	b29a      	uxth	r2, r3
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801385c:	b29b      	uxth	r3, r3
 801385e:	3b01      	subs	r3, #1
 8013860:	b29a      	uxth	r2, r3
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801386a:	b29b      	uxth	r3, r3
 801386c:	2b00      	cmp	r3, #0
 801386e:	d14c      	bne.n	801390a <I2C_Slave_ISR_IT+0x1e6>
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	4a2b      	ldr	r2, [pc, #172]	@ (8013920 <I2C_Slave_ISR_IT+0x1fc>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d048      	beq.n	801390a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	0018      	movs	r0, r3
 801387c:	f000 fc98 	bl	80141b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8013880:	e043      	b.n	801390a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	2208      	movs	r2, #8
 8013886:	4013      	ands	r3, r2
 8013888:	d00a      	beq.n	80138a0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2208      	movs	r2, #8
 801388e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013890:	d006      	beq.n	80138a0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8013892:	693a      	ldr	r2, [r7, #16]
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	0011      	movs	r1, r2
 8013898:	0018      	movs	r0, r3
 801389a:	f000 fba3 	bl	8013fe4 <I2C_ITAddrCplt>
 801389e:	e035      	b.n	801390c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	2202      	movs	r2, #2
 80138a4:	4013      	ands	r3, r2
 80138a6:	d031      	beq.n	801390c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2202      	movs	r2, #2
 80138ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80138ae:	d02d      	beq.n	801390c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138b4:	b29b      	uxth	r3, r3
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d018      	beq.n	80138ec <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138be:	781a      	ldrb	r2, [r3, #0]
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138ca:	1c5a      	adds	r2, r3, #1
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138d4:	b29b      	uxth	r3, r3
 80138d6:	3b01      	subs	r3, #1
 80138d8:	b29a      	uxth	r2, r3
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138e2:	3b01      	subs	r3, #1
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80138ea:	e00f      	b.n	801390c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80138ec:	697a      	ldr	r2, [r7, #20]
 80138ee:	2380      	movs	r3, #128	@ 0x80
 80138f0:	045b      	lsls	r3, r3, #17
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d002      	beq.n	80138fc <I2C_Slave_ISR_IT+0x1d8>
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d107      	bne.n	801390c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	0018      	movs	r0, r3
 8013900:	f000 fc56 	bl	80141b0 <I2C_ITSlaveSeqCplt>
 8013904:	e002      	b.n	801390c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8013906:	46c0      	nop			@ (mov r8, r8)
 8013908:	e000      	b.n	801390c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801390a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	2240      	movs	r2, #64	@ 0x40
 8013910:	2100      	movs	r1, #0
 8013912:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013914:	2300      	movs	r3, #0
}
 8013916:	0018      	movs	r0, r3
 8013918:	46bd      	mov	sp, r7
 801391a:	b006      	add	sp, #24
 801391c:	bd80      	pop	{r7, pc}
 801391e:	46c0      	nop			@ (mov r8, r8)
 8013920:	ffff0000 	.word	0xffff0000

08013924 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8013924:	b590      	push	{r4, r7, lr}
 8013926:	b089      	sub	sp, #36	@ 0x24
 8013928:	af02      	add	r7, sp, #8
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	2240      	movs	r2, #64	@ 0x40
 8013934:	5c9b      	ldrb	r3, [r3, r2]
 8013936:	2b01      	cmp	r3, #1
 8013938:	d101      	bne.n	801393e <I2C_Master_ISR_DMA+0x1a>
 801393a:	2302      	movs	r3, #2
 801393c:	e0e7      	b.n	8013b0e <I2C_Master_ISR_DMA+0x1ea>
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2240      	movs	r2, #64	@ 0x40
 8013942:	2101      	movs	r1, #1
 8013944:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	2210      	movs	r2, #16
 801394a:	4013      	ands	r3, r2
 801394c:	d017      	beq.n	801397e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2210      	movs	r2, #16
 8013952:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013954:	d013      	beq.n	801397e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	2210      	movs	r2, #16
 801395c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013962:	2204      	movs	r2, #4
 8013964:	431a      	orrs	r2, r3
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2120      	movs	r1, #32
 801396e:	0018      	movs	r0, r3
 8013970:	f001 fb7a 	bl	8015068 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	0018      	movs	r0, r3
 8013978:	f000 ffef 	bl	801495a <I2C_Flush_TXDR>
 801397c:	e0c2      	b.n	8013b04 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	2280      	movs	r2, #128	@ 0x80
 8013982:	4013      	ands	r3, r2
 8013984:	d100      	bne.n	8013988 <I2C_Master_ISR_DMA+0x64>
 8013986:	e07c      	b.n	8013a82 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2240      	movs	r2, #64	@ 0x40
 801398c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801398e:	d100      	bne.n	8013992 <I2C_Master_ISR_DMA+0x6e>
 8013990:	e077      	b.n	8013a82 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	681a      	ldr	r2, [r3, #0]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2140      	movs	r1, #64	@ 0x40
 801399e:	438a      	bics	r2, r1
 80139a0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d055      	beq.n	8013a58 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	685b      	ldr	r3, [r3, #4]
 80139b2:	b29a      	uxth	r2, r3
 80139b4:	2312      	movs	r3, #18
 80139b6:	18fb      	adds	r3, r7, r3
 80139b8:	0592      	lsls	r2, r2, #22
 80139ba:	0d92      	lsrs	r2, r2, #22
 80139bc:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	2bff      	cmp	r3, #255	@ 0xff
 80139c6:	d906      	bls.n	80139d6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	22ff      	movs	r2, #255	@ 0xff
 80139cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80139ce:	2380      	movs	r3, #128	@ 0x80
 80139d0:	045b      	lsls	r3, r3, #17
 80139d2:	617b      	str	r3, [r7, #20]
 80139d4:	e010      	b.n	80139f8 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139da:	b29a      	uxth	r2, r3
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139e4:	4a4c      	ldr	r2, [pc, #304]	@ (8013b18 <I2C_Master_ISR_DMA+0x1f4>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d003      	beq.n	80139f2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139ee:	617b      	str	r3, [r7, #20]
 80139f0:	e002      	b.n	80139f8 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80139f2:	2380      	movs	r3, #128	@ 0x80
 80139f4:	049b      	lsls	r3, r3, #18
 80139f6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80139fc:	b2da      	uxtb	r2, r3
 80139fe:	697c      	ldr	r4, [r7, #20]
 8013a00:	2312      	movs	r3, #18
 8013a02:	18fb      	adds	r3, r7, r3
 8013a04:	8819      	ldrh	r1, [r3, #0]
 8013a06:	68f8      	ldr	r0, [r7, #12]
 8013a08:	2300      	movs	r3, #0
 8013a0a:	9300      	str	r3, [sp, #0]
 8013a0c:	0023      	movs	r3, r4
 8013a0e:	f001 faf1 	bl	8014ff4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a16:	b29a      	uxth	r2, r3
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a1c:	1ad3      	subs	r3, r2, r3
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2241      	movs	r2, #65	@ 0x41
 8013a28:	5c9b      	ldrb	r3, [r3, r2]
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	2b22      	cmp	r3, #34	@ 0x22
 8013a2e:	d109      	bne.n	8013a44 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2180      	movs	r1, #128	@ 0x80
 8013a3c:	0209      	lsls	r1, r1, #8
 8013a3e:	430a      	orrs	r2, r1
 8013a40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013a42:	e05f      	b.n	8013b04 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2180      	movs	r1, #128	@ 0x80
 8013a50:	01c9      	lsls	r1, r1, #7
 8013a52:	430a      	orrs	r2, r1
 8013a54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013a56:	e055      	b.n	8013b04 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	685a      	ldr	r2, [r3, #4]
 8013a5e:	2380      	movs	r3, #128	@ 0x80
 8013a60:	049b      	lsls	r3, r3, #18
 8013a62:	401a      	ands	r2, r3
 8013a64:	2380      	movs	r3, #128	@ 0x80
 8013a66:	049b      	lsls	r3, r3, #18
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d004      	beq.n	8013a76 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	0018      	movs	r0, r3
 8013a70:	f000 fb5c 	bl	801412c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8013a74:	e046      	b.n	8013b04 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2140      	movs	r1, #64	@ 0x40
 8013a7a:	0018      	movs	r0, r3
 8013a7c:	f000 fe42 	bl	8014704 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8013a80:	e040      	b.n	8013b04 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	2240      	movs	r2, #64	@ 0x40
 8013a86:	4013      	ands	r3, r2
 8013a88:	d02c      	beq.n	8013ae4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2240      	movs	r2, #64	@ 0x40
 8013a8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013a90:	d028      	beq.n	8013ae4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d11d      	bne.n	8013ad8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	685a      	ldr	r2, [r3, #4]
 8013aa2:	2380      	movs	r3, #128	@ 0x80
 8013aa4:	049b      	lsls	r3, r3, #18
 8013aa6:	401a      	ands	r2, r3
 8013aa8:	2380      	movs	r3, #128	@ 0x80
 8013aaa:	049b      	lsls	r3, r3, #18
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d028      	beq.n	8013b02 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ab4:	4a18      	ldr	r2, [pc, #96]	@ (8013b18 <I2C_Master_ISR_DMA+0x1f4>)
 8013ab6:	4293      	cmp	r3, r2
 8013ab8:	d109      	bne.n	8013ace <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	685a      	ldr	r2, [r3, #4]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2180      	movs	r1, #128	@ 0x80
 8013ac6:	01c9      	lsls	r1, r1, #7
 8013ac8:	430a      	orrs	r2, r1
 8013aca:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8013acc:	e019      	b.n	8013b02 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	0018      	movs	r0, r3
 8013ad2:	f000 fb2b 	bl	801412c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8013ad6:	e014      	b.n	8013b02 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2140      	movs	r1, #64	@ 0x40
 8013adc:	0018      	movs	r0, r3
 8013ade:	f000 fe11 	bl	8014704 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8013ae2:	e00e      	b.n	8013b02 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	2220      	movs	r2, #32
 8013ae8:	4013      	ands	r3, r2
 8013aea:	d00b      	beq.n	8013b04 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2220      	movs	r2, #32
 8013af0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013af2:	d007      	beq.n	8013b04 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8013af4:	68ba      	ldr	r2, [r7, #8]
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	0011      	movs	r1, r2
 8013afa:	0018      	movs	r0, r3
 8013afc:	f000 fbbc 	bl	8014278 <I2C_ITMasterCplt>
 8013b00:	e000      	b.n	8013b04 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8013b02:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2240      	movs	r2, #64	@ 0x40
 8013b08:	2100      	movs	r1, #0
 8013b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013b0c:	2300      	movs	r3, #0
}
 8013b0e:	0018      	movs	r0, r3
 8013b10:	46bd      	mov	sp, r7
 8013b12:	b007      	add	sp, #28
 8013b14:	bd90      	pop	{r4, r7, pc}
 8013b16:	46c0      	nop			@ (mov r8, r8)
 8013b18:	ffff0000 	.word	0xffff0000

08013b1c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8013b1c:	b590      	push	{r4, r7, lr}
 8013b1e:	b089      	sub	sp, #36	@ 0x24
 8013b20:	af02      	add	r7, sp, #8
 8013b22:	60f8      	str	r0, [r7, #12]
 8013b24:	60b9      	str	r1, [r7, #8]
 8013b26:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8013b28:	4b88      	ldr	r3, [pc, #544]	@ (8013d4c <I2C_Mem_ISR_DMA+0x230>)
 8013b2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2240      	movs	r2, #64	@ 0x40
 8013b30:	5c9b      	ldrb	r3, [r3, r2]
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	d101      	bne.n	8013b3a <I2C_Mem_ISR_DMA+0x1e>
 8013b36:	2302      	movs	r3, #2
 8013b38:	e104      	b.n	8013d44 <I2C_Mem_ISR_DMA+0x228>
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2240      	movs	r2, #64	@ 0x40
 8013b3e:	2101      	movs	r1, #1
 8013b40:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	2210      	movs	r2, #16
 8013b46:	4013      	ands	r3, r2
 8013b48:	d017      	beq.n	8013b7a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2210      	movs	r2, #16
 8013b4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013b50:	d013      	beq.n	8013b7a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	2210      	movs	r2, #16
 8013b58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b5e:	2204      	movs	r2, #4
 8013b60:	431a      	orrs	r2, r3
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	2120      	movs	r1, #32
 8013b6a:	0018      	movs	r0, r3
 8013b6c:	f001 fa7c 	bl	8015068 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	0018      	movs	r0, r3
 8013b74:	f000 fef1 	bl	801495a <I2C_Flush_TXDR>
 8013b78:	e0df      	b.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	2202      	movs	r2, #2
 8013b7e:	4013      	ands	r3, r2
 8013b80:	d00d      	beq.n	8013b9e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2202      	movs	r2, #2
 8013b86:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013b88:	d009      	beq.n	8013b9e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	68fa      	ldr	r2, [r7, #12]
 8013b90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013b92:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2201      	movs	r2, #1
 8013b98:	4252      	negs	r2, r2
 8013b9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b9c:	e0cd      	b.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	2280      	movs	r2, #128	@ 0x80
 8013ba2:	4013      	ands	r3, r2
 8013ba4:	d05e      	beq.n	8013c64 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2240      	movs	r2, #64	@ 0x40
 8013baa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013bac:	d05a      	beq.n	8013c64 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	2110      	movs	r1, #16
 8013bb2:	0018      	movs	r0, r3
 8013bb4:	f001 fa58 	bl	8015068 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d04a      	beq.n	8013c58 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	2bff      	cmp	r3, #255	@ 0xff
 8013bca:	d910      	bls.n	8013bee <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	22ff      	movs	r2, #255	@ 0xff
 8013bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013bd6:	b299      	uxth	r1, r3
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013bdc:	b2da      	uxtb	r2, r3
 8013bde:	2380      	movs	r3, #128	@ 0x80
 8013be0:	045b      	lsls	r3, r3, #17
 8013be2:	68f8      	ldr	r0, [r7, #12]
 8013be4:	2400      	movs	r4, #0
 8013be6:	9400      	str	r4, [sp, #0]
 8013be8:	f001 fa04 	bl	8014ff4 <I2C_TransferConfig>
 8013bec:	e011      	b.n	8013c12 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bf2:	b29a      	uxth	r2, r3
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013bfc:	b299      	uxth	r1, r3
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c02:	b2da      	uxtb	r2, r3
 8013c04:	2380      	movs	r3, #128	@ 0x80
 8013c06:	049b      	lsls	r3, r3, #18
 8013c08:	68f8      	ldr	r0, [r7, #12]
 8013c0a:	2400      	movs	r4, #0
 8013c0c:	9400      	str	r4, [sp, #0]
 8013c0e:	f001 f9f1 	bl	8014ff4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c1c:	1ad3      	subs	r3, r2, r3
 8013c1e:	b29a      	uxth	r2, r3
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	2241      	movs	r2, #65	@ 0x41
 8013c28:	5c9b      	ldrb	r3, [r3, r2]
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	2b22      	cmp	r3, #34	@ 0x22
 8013c2e:	d109      	bne.n	8013c44 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	681a      	ldr	r2, [r3, #0]
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2180      	movs	r1, #128	@ 0x80
 8013c3c:	0209      	lsls	r1, r1, #8
 8013c3e:	430a      	orrs	r2, r1
 8013c40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013c42:	e07a      	b.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	2180      	movs	r1, #128	@ 0x80
 8013c50:	01c9      	lsls	r1, r1, #7
 8013c52:	430a      	orrs	r2, r1
 8013c54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013c56:	e070      	b.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	2140      	movs	r1, #64	@ 0x40
 8013c5c:	0018      	movs	r0, r3
 8013c5e:	f000 fd51 	bl	8014704 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8013c62:	e06a      	b.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2240      	movs	r2, #64	@ 0x40
 8013c68:	4013      	ands	r3, r2
 8013c6a:	d058      	beq.n	8013d1e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2240      	movs	r2, #64	@ 0x40
 8013c70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013c72:	d054      	beq.n	8013d1e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2241      	movs	r2, #65	@ 0x41
 8013c78:	5c9b      	ldrb	r3, [r3, r2]
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	2b22      	cmp	r3, #34	@ 0x22
 8013c7e:	d101      	bne.n	8013c84 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8013c80:	4b33      	ldr	r3, [pc, #204]	@ (8013d50 <I2C_Mem_ISR_DMA+0x234>)
 8013c82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	2bff      	cmp	r3, #255	@ 0xff
 8013c8c:	d911      	bls.n	8013cb2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	22ff      	movs	r2, #255	@ 0xff
 8013c92:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c98:	b299      	uxth	r1, r3
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c9e:	b2da      	uxtb	r2, r3
 8013ca0:	2380      	movs	r3, #128	@ 0x80
 8013ca2:	045c      	lsls	r4, r3, #17
 8013ca4:	68f8      	ldr	r0, [r7, #12]
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	9300      	str	r3, [sp, #0]
 8013caa:	0023      	movs	r3, r4
 8013cac:	f001 f9a2 	bl	8014ff4 <I2C_TransferConfig>
 8013cb0:	e012      	b.n	8013cd8 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013cb6:	b29a      	uxth	r2, r3
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013cc0:	b299      	uxth	r1, r3
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cc6:	b2da      	uxtb	r2, r3
 8013cc8:	2380      	movs	r3, #128	@ 0x80
 8013cca:	049c      	lsls	r4, r3, #18
 8013ccc:	68f8      	ldr	r0, [r7, #12]
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	9300      	str	r3, [sp, #0]
 8013cd2:	0023      	movs	r3, r4
 8013cd4:	f001 f98e 	bl	8014ff4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013cdc:	b29a      	uxth	r2, r3
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ce2:	1ad3      	subs	r3, r2, r3
 8013ce4:	b29a      	uxth	r2, r3
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2241      	movs	r2, #65	@ 0x41
 8013cee:	5c9b      	ldrb	r3, [r3, r2]
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	2b22      	cmp	r3, #34	@ 0x22
 8013cf4:	d109      	bne.n	8013d0a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	2180      	movs	r1, #128	@ 0x80
 8013d02:	0209      	lsls	r1, r1, #8
 8013d04:	430a      	orrs	r2, r1
 8013d06:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013d08:	e017      	b.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	681a      	ldr	r2, [r3, #0]
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	2180      	movs	r1, #128	@ 0x80
 8013d16:	01c9      	lsls	r1, r1, #7
 8013d18:	430a      	orrs	r2, r1
 8013d1a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013d1c:	e00d      	b.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	2220      	movs	r2, #32
 8013d22:	4013      	ands	r3, r2
 8013d24:	d009      	beq.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2220      	movs	r2, #32
 8013d2a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d2c:	d005      	beq.n	8013d3a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	0011      	movs	r1, r2
 8013d34:	0018      	movs	r0, r3
 8013d36:	f000 fa9f 	bl	8014278 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2240      	movs	r2, #64	@ 0x40
 8013d3e:	2100      	movs	r1, #0
 8013d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	0018      	movs	r0, r3
 8013d46:	46bd      	mov	sp, r7
 8013d48:	b007      	add	sp, #28
 8013d4a:	bd90      	pop	{r4, r7, pc}
 8013d4c:	80002000 	.word	0x80002000
 8013d50:	80002400 	.word	0x80002400

08013d54 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b088      	sub	sp, #32
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	60f8      	str	r0, [r7, #12]
 8013d5c:	60b9      	str	r1, [r7, #8]
 8013d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d64:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8013d66:	2300      	movs	r3, #0
 8013d68:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2240      	movs	r2, #64	@ 0x40
 8013d6e:	5c9b      	ldrb	r3, [r3, r2]
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d101      	bne.n	8013d78 <I2C_Slave_ISR_DMA+0x24>
 8013d74:	2302      	movs	r3, #2
 8013d76:	e0cd      	b.n	8013f14 <I2C_Slave_ISR_DMA+0x1c0>
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2240      	movs	r2, #64	@ 0x40
 8013d7c:	2101      	movs	r1, #1
 8013d7e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	2220      	movs	r2, #32
 8013d84:	4013      	ands	r3, r2
 8013d86:	d009      	beq.n	8013d9c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2220      	movs	r2, #32
 8013d8c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d8e:	d005      	beq.n	8013d9c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8013d90:	68ba      	ldr	r2, [r7, #8]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	0011      	movs	r1, r2
 8013d96:	0018      	movs	r0, r3
 8013d98:	f000 fb3c 	bl	8014414 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	2210      	movs	r2, #16
 8013da0:	4013      	ands	r3, r2
 8013da2:	d100      	bne.n	8013da6 <I2C_Slave_ISR_DMA+0x52>
 8013da4:	e0a3      	b.n	8013eee <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2210      	movs	r2, #16
 8013daa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013dac:	d100      	bne.n	8013db0 <I2C_Slave_ISR_DMA+0x5c>
 8013dae:	e09e      	b.n	8013eee <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013db0:	687a      	ldr	r2, [r7, #4]
 8013db2:	2380      	movs	r3, #128	@ 0x80
 8013db4:	01db      	lsls	r3, r3, #7
 8013db6:	4013      	ands	r3, r2
 8013db8:	d105      	bne.n	8013dc6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8013dba:	687a      	ldr	r2, [r7, #4]
 8013dbc:	2380      	movs	r3, #128	@ 0x80
 8013dbe:	021b      	lsls	r3, r3, #8
 8013dc0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013dc2:	d100      	bne.n	8013dc6 <I2C_Slave_ISR_DMA+0x72>
 8013dc4:	e08c      	b.n	8013ee0 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d00c      	beq.n	8013de8 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8013dce:	687a      	ldr	r2, [r7, #4]
 8013dd0:	2380      	movs	r3, #128	@ 0x80
 8013dd2:	021b      	lsls	r3, r3, #8
 8013dd4:	4013      	ands	r3, r2
 8013dd6:	d007      	beq.n	8013de8 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d101      	bne.n	8013de8 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8013de4:	2301      	movs	r3, #1
 8013de6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00c      	beq.n	8013e0a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	2380      	movs	r3, #128	@ 0x80
 8013df4:	01db      	lsls	r3, r3, #7
 8013df6:	4013      	ands	r3, r2
 8013df8:	d007      	beq.n	8013e0a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d101      	bne.n	8013e0a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8013e06:	2301      	movs	r3, #1
 8013e08:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8013e0a:	69fb      	ldr	r3, [r7, #28]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d12d      	bne.n	8013e6c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2241      	movs	r2, #65	@ 0x41
 8013e14:	5c9b      	ldrb	r3, [r3, r2]
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	2b28      	cmp	r3, #40	@ 0x28
 8013e1a:	d10b      	bne.n	8013e34 <I2C_Slave_ISR_DMA+0xe0>
 8013e1c:	69ba      	ldr	r2, [r7, #24]
 8013e1e:	2380      	movs	r3, #128	@ 0x80
 8013e20:	049b      	lsls	r3, r3, #18
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d106      	bne.n	8013e34 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8013e26:	68ba      	ldr	r2, [r7, #8]
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	0011      	movs	r1, r2
 8013e2c:	0018      	movs	r0, r3
 8013e2e:	f000 fc11 	bl	8014654 <I2C_ITListenCplt>
 8013e32:	e054      	b.n	8013ede <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2241      	movs	r2, #65	@ 0x41
 8013e38:	5c9b      	ldrb	r3, [r3, r2]
 8013e3a:	b2db      	uxtb	r3, r3
 8013e3c:	2b29      	cmp	r3, #41	@ 0x29
 8013e3e:	d110      	bne.n	8013e62 <I2C_Slave_ISR_DMA+0x10e>
 8013e40:	69bb      	ldr	r3, [r7, #24]
 8013e42:	4a36      	ldr	r2, [pc, #216]	@ (8013f1c <I2C_Slave_ISR_DMA+0x1c8>)
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d00c      	beq.n	8013e62 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	2210      	movs	r2, #16
 8013e4e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	0018      	movs	r0, r3
 8013e54:	f000 fd81 	bl	801495a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	0018      	movs	r0, r3
 8013e5c:	f000 f9a8 	bl	80141b0 <I2C_ITSlaveSeqCplt>
 8013e60:	e03d      	b.n	8013ede <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	2210      	movs	r2, #16
 8013e68:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8013e6a:	e03e      	b.n	8013eea <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	2210      	movs	r2, #16
 8013e72:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e78:	2204      	movs	r2, #4
 8013e7a:	431a      	orrs	r2, r3
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8013e80:	2317      	movs	r3, #23
 8013e82:	18fb      	adds	r3, r7, r3
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	2141      	movs	r1, #65	@ 0x41
 8013e88:	5c52      	ldrb	r2, [r2, r1]
 8013e8a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d004      	beq.n	8013e9c <I2C_Slave_ISR_DMA+0x148>
 8013e92:	69ba      	ldr	r2, [r7, #24]
 8013e94:	2380      	movs	r3, #128	@ 0x80
 8013e96:	045b      	lsls	r3, r3, #17
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d126      	bne.n	8013eea <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8013e9c:	2217      	movs	r2, #23
 8013e9e:	18bb      	adds	r3, r7, r2
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	2b21      	cmp	r3, #33	@ 0x21
 8013ea4:	d003      	beq.n	8013eae <I2C_Slave_ISR_DMA+0x15a>
 8013ea6:	18bb      	adds	r3, r7, r2
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	2b29      	cmp	r3, #41	@ 0x29
 8013eac:	d103      	bne.n	8013eb6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2221      	movs	r2, #33	@ 0x21
 8013eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8013eb4:	e00b      	b.n	8013ece <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8013eb6:	2217      	movs	r2, #23
 8013eb8:	18bb      	adds	r3, r7, r2
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	2b22      	cmp	r3, #34	@ 0x22
 8013ebe:	d003      	beq.n	8013ec8 <I2C_Slave_ISR_DMA+0x174>
 8013ec0:	18bb      	adds	r3, r7, r2
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ec6:	d102      	bne.n	8013ece <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2222      	movs	r2, #34	@ 0x22
 8013ecc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	0011      	movs	r1, r2
 8013ed6:	0018      	movs	r0, r3
 8013ed8:	f000 fc14 	bl	8014704 <I2C_ITError>
      if (treatdmanack == 1U)
 8013edc:	e005      	b.n	8013eea <I2C_Slave_ISR_DMA+0x196>
 8013ede:	e004      	b.n	8013eea <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2210      	movs	r2, #16
 8013ee6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013ee8:	e00f      	b.n	8013f0a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8013eea:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013eec:	e00d      	b.n	8013f0a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	2208      	movs	r2, #8
 8013ef2:	4013      	ands	r3, r2
 8013ef4:	d009      	beq.n	8013f0a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2208      	movs	r2, #8
 8013efa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013efc:	d005      	beq.n	8013f0a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8013efe:	68ba      	ldr	r2, [r7, #8]
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	0011      	movs	r1, r2
 8013f04:	0018      	movs	r0, r3
 8013f06:	f000 f86d 	bl	8013fe4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2240      	movs	r2, #64	@ 0x40
 8013f0e:	2100      	movs	r1, #0
 8013f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013f12:	2300      	movs	r3, #0
}
 8013f14:	0018      	movs	r0, r3
 8013f16:	46bd      	mov	sp, r7
 8013f18:	b008      	add	sp, #32
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	ffff0000 	.word	0xffff0000

08013f20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8013f20:	b5b0      	push	{r4, r5, r7, lr}
 8013f22:	b086      	sub	sp, #24
 8013f24:	af02      	add	r7, sp, #8
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	000c      	movs	r4, r1
 8013f2a:	0010      	movs	r0, r2
 8013f2c:	0019      	movs	r1, r3
 8013f2e:	250a      	movs	r5, #10
 8013f30:	197b      	adds	r3, r7, r5
 8013f32:	1c22      	adds	r2, r4, #0
 8013f34:	801a      	strh	r2, [r3, #0]
 8013f36:	2308      	movs	r3, #8
 8013f38:	18fb      	adds	r3, r7, r3
 8013f3a:	1c02      	adds	r2, r0, #0
 8013f3c:	801a      	strh	r2, [r3, #0]
 8013f3e:	1dbb      	adds	r3, r7, #6
 8013f40:	1c0a      	adds	r2, r1, #0
 8013f42:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8013f44:	1dbb      	adds	r3, r7, #6
 8013f46:	881b      	ldrh	r3, [r3, #0]
 8013f48:	b2da      	uxtb	r2, r3
 8013f4a:	197b      	adds	r3, r7, r5
 8013f4c:	8819      	ldrh	r1, [r3, #0]
 8013f4e:	68f8      	ldr	r0, [r7, #12]
 8013f50:	4b23      	ldr	r3, [pc, #140]	@ (8013fe0 <I2C_RequestMemoryRead+0xc0>)
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	2300      	movs	r3, #0
 8013f56:	f001 f84d 	bl	8014ff4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f5c:	6a39      	ldr	r1, [r7, #32]
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	0018      	movs	r0, r3
 8013f62:	f000 fe43 	bl	8014bec <I2C_WaitOnTXISFlagUntilTimeout>
 8013f66:	1e03      	subs	r3, r0, #0
 8013f68:	d001      	beq.n	8013f6e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	e033      	b.n	8013fd6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013f6e:	1dbb      	adds	r3, r7, #6
 8013f70:	881b      	ldrh	r3, [r3, #0]
 8013f72:	2b01      	cmp	r3, #1
 8013f74:	d107      	bne.n	8013f86 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8013f76:	2308      	movs	r3, #8
 8013f78:	18fb      	adds	r3, r7, r3
 8013f7a:	881b      	ldrh	r3, [r3, #0]
 8013f7c:	b2da      	uxtb	r2, r3
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	629a      	str	r2, [r3, #40]	@ 0x28
 8013f84:	e019      	b.n	8013fba <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8013f86:	2308      	movs	r3, #8
 8013f88:	18fb      	adds	r3, r7, r3
 8013f8a:	881b      	ldrh	r3, [r3, #0]
 8013f8c:	0a1b      	lsrs	r3, r3, #8
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	b2da      	uxtb	r2, r3
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8013f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f9a:	6a39      	ldr	r1, [r7, #32]
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	0018      	movs	r0, r3
 8013fa0:	f000 fe24 	bl	8014bec <I2C_WaitOnTXISFlagUntilTimeout>
 8013fa4:	1e03      	subs	r3, r0, #0
 8013fa6:	d001      	beq.n	8013fac <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e014      	b.n	8013fd6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8013fac:	2308      	movs	r3, #8
 8013fae:	18fb      	adds	r3, r7, r3
 8013fb0:	881b      	ldrh	r3, [r3, #0]
 8013fb2:	b2da      	uxtb	r2, r3
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8013fba:	6a3a      	ldr	r2, [r7, #32]
 8013fbc:	68f8      	ldr	r0, [r7, #12]
 8013fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fc0:	9300      	str	r3, [sp, #0]
 8013fc2:	0013      	movs	r3, r2
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	2140      	movs	r1, #64	@ 0x40
 8013fc8:	f000 fdc2 	bl	8014b50 <I2C_WaitOnFlagUntilTimeout>
 8013fcc:	1e03      	subs	r3, r0, #0
 8013fce:	d001      	beq.n	8013fd4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	e000      	b.n	8013fd6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8013fd4:	2300      	movs	r3, #0
}
 8013fd6:	0018      	movs	r0, r3
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	b004      	add	sp, #16
 8013fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8013fde:	46c0      	nop			@ (mov r8, r8)
 8013fe0:	80002000 	.word	0x80002000

08013fe4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8013fe4:	b5b0      	push	{r4, r5, r7, lr}
 8013fe6:	b084      	sub	sp, #16
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
 8013fec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2241      	movs	r2, #65	@ 0x41
 8013ff2:	5c9b      	ldrb	r3, [r3, r2]
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	001a      	movs	r2, r3
 8013ff8:	2328      	movs	r3, #40	@ 0x28
 8013ffa:	4013      	ands	r3, r2
 8013ffc:	2b28      	cmp	r3, #40	@ 0x28
 8013ffe:	d000      	beq.n	8014002 <I2C_ITAddrCplt+0x1e>
 8014000:	e088      	b.n	8014114 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	699b      	ldr	r3, [r3, #24]
 8014008:	0c1b      	lsrs	r3, r3, #16
 801400a:	b2da      	uxtb	r2, r3
 801400c:	250f      	movs	r5, #15
 801400e:	197b      	adds	r3, r7, r5
 8014010:	2101      	movs	r1, #1
 8014012:	400a      	ands	r2, r1
 8014014:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	699b      	ldr	r3, [r3, #24]
 801401c:	0c1b      	lsrs	r3, r3, #16
 801401e:	b29a      	uxth	r2, r3
 8014020:	200c      	movs	r0, #12
 8014022:	183b      	adds	r3, r7, r0
 8014024:	21fe      	movs	r1, #254	@ 0xfe
 8014026:	400a      	ands	r2, r1
 8014028:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	689b      	ldr	r3, [r3, #8]
 8014030:	b29a      	uxth	r2, r3
 8014032:	240a      	movs	r4, #10
 8014034:	193b      	adds	r3, r7, r4
 8014036:	0592      	lsls	r2, r2, #22
 8014038:	0d92      	lsrs	r2, r2, #22
 801403a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	b29a      	uxth	r2, r3
 8014044:	2308      	movs	r3, #8
 8014046:	18fb      	adds	r3, r7, r3
 8014048:	21fe      	movs	r1, #254	@ 0xfe
 801404a:	400a      	ands	r2, r1
 801404c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	68db      	ldr	r3, [r3, #12]
 8014052:	2b02      	cmp	r3, #2
 8014054:	d148      	bne.n	80140e8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8014056:	0021      	movs	r1, r4
 8014058:	187b      	adds	r3, r7, r1
 801405a:	881b      	ldrh	r3, [r3, #0]
 801405c:	09db      	lsrs	r3, r3, #7
 801405e:	b29a      	uxth	r2, r3
 8014060:	183b      	adds	r3, r7, r0
 8014062:	881b      	ldrh	r3, [r3, #0]
 8014064:	4053      	eors	r3, r2
 8014066:	b29b      	uxth	r3, r3
 8014068:	001a      	movs	r2, r3
 801406a:	2306      	movs	r3, #6
 801406c:	4013      	ands	r3, r2
 801406e:	d120      	bne.n	80140b2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8014070:	183b      	adds	r3, r7, r0
 8014072:	187a      	adds	r2, r7, r1
 8014074:	8812      	ldrh	r2, [r2, #0]
 8014076:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801407c:	1c5a      	adds	r2, r3, #1
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014086:	2b02      	cmp	r3, #2
 8014088:	d14c      	bne.n	8014124 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2200      	movs	r2, #0
 801408e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2208      	movs	r2, #8
 8014096:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2240      	movs	r2, #64	@ 0x40
 801409c:	2100      	movs	r1, #0
 801409e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80140a0:	183b      	adds	r3, r7, r0
 80140a2:	881a      	ldrh	r2, [r3, #0]
 80140a4:	197b      	adds	r3, r7, r5
 80140a6:	7819      	ldrb	r1, [r3, #0]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	0018      	movs	r0, r3
 80140ac:	f7ff f9d7 	bl	801345e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80140b0:	e038      	b.n	8014124 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80140b2:	240c      	movs	r4, #12
 80140b4:	193b      	adds	r3, r7, r4
 80140b6:	2208      	movs	r2, #8
 80140b8:	18ba      	adds	r2, r7, r2
 80140ba:	8812      	ldrh	r2, [r2, #0]
 80140bc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80140be:	2380      	movs	r3, #128	@ 0x80
 80140c0:	021a      	lsls	r2, r3, #8
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	0011      	movs	r1, r2
 80140c6:	0018      	movs	r0, r3
 80140c8:	f001 f85c 	bl	8015184 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2240      	movs	r2, #64	@ 0x40
 80140d0:	2100      	movs	r1, #0
 80140d2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80140d4:	193b      	adds	r3, r7, r4
 80140d6:	881a      	ldrh	r2, [r3, #0]
 80140d8:	230f      	movs	r3, #15
 80140da:	18fb      	adds	r3, r7, r3
 80140dc:	7819      	ldrb	r1, [r3, #0]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	0018      	movs	r0, r3
 80140e2:	f7ff f9bc 	bl	801345e <HAL_I2C_AddrCallback>
}
 80140e6:	e01d      	b.n	8014124 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80140e8:	2380      	movs	r3, #128	@ 0x80
 80140ea:	021a      	lsls	r2, r3, #8
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	0011      	movs	r1, r2
 80140f0:	0018      	movs	r0, r3
 80140f2:	f001 f847 	bl	8015184 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2240      	movs	r2, #64	@ 0x40
 80140fa:	2100      	movs	r1, #0
 80140fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80140fe:	230c      	movs	r3, #12
 8014100:	18fb      	adds	r3, r7, r3
 8014102:	881a      	ldrh	r2, [r3, #0]
 8014104:	230f      	movs	r3, #15
 8014106:	18fb      	adds	r3, r7, r3
 8014108:	7819      	ldrb	r1, [r3, #0]
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	0018      	movs	r0, r3
 801410e:	f7ff f9a6 	bl	801345e <HAL_I2C_AddrCallback>
}
 8014112:	e007      	b.n	8014124 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2208      	movs	r2, #8
 801411a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	2240      	movs	r2, #64	@ 0x40
 8014120:	2100      	movs	r1, #0
 8014122:	5499      	strb	r1, [r3, r2]
}
 8014124:	46c0      	nop			@ (mov r8, r8)
 8014126:	46bd      	mov	sp, r7
 8014128:	b004      	add	sp, #16
 801412a:	bdb0      	pop	{r4, r5, r7, pc}

0801412c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2242      	movs	r2, #66	@ 0x42
 8014138:	2100      	movs	r1, #0
 801413a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2241      	movs	r2, #65	@ 0x41
 8014140:	5c9b      	ldrb	r3, [r3, r2]
 8014142:	b2db      	uxtb	r3, r3
 8014144:	2b21      	cmp	r3, #33	@ 0x21
 8014146:	d117      	bne.n	8014178 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2241      	movs	r2, #65	@ 0x41
 801414c:	2120      	movs	r1, #32
 801414e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2211      	movs	r2, #17
 8014154:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2101      	movs	r1, #1
 8014160:	0018      	movs	r0, r3
 8014162:	f001 f80f 	bl	8015184 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	2240      	movs	r2, #64	@ 0x40
 801416a:	2100      	movs	r1, #0
 801416c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	0018      	movs	r0, r3
 8014172:	f7ff f954 	bl	801341e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014176:	e016      	b.n	80141a6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	2241      	movs	r2, #65	@ 0x41
 801417c:	2120      	movs	r1, #32
 801417e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2212      	movs	r2, #18
 8014184:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2200      	movs	r2, #0
 801418a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2102      	movs	r1, #2
 8014190:	0018      	movs	r0, r3
 8014192:	f000 fff7 	bl	8015184 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2240      	movs	r2, #64	@ 0x40
 801419a:	2100      	movs	r1, #0
 801419c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	0018      	movs	r0, r3
 80141a2:	f7ff f944 	bl	801342e <HAL_I2C_MasterRxCpltCallback>
}
 80141a6:	46c0      	nop			@ (mov r8, r8)
 80141a8:	46bd      	mov	sp, r7
 80141aa:	b002      	add	sp, #8
 80141ac:	bd80      	pop	{r7, pc}
	...

080141b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2242      	movs	r2, #66	@ 0x42
 80141c4:	2100      	movs	r1, #0
 80141c6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80141c8:	68fa      	ldr	r2, [r7, #12]
 80141ca:	2380      	movs	r3, #128	@ 0x80
 80141cc:	01db      	lsls	r3, r3, #7
 80141ce:	4013      	ands	r3, r2
 80141d0:	d008      	beq.n	80141e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	4924      	ldr	r1, [pc, #144]	@ (8014270 <I2C_ITSlaveSeqCplt+0xc0>)
 80141de:	400a      	ands	r2, r1
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	e00c      	b.n	80141fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80141e4:	68fa      	ldr	r2, [r7, #12]
 80141e6:	2380      	movs	r3, #128	@ 0x80
 80141e8:	021b      	lsls	r3, r3, #8
 80141ea:	4013      	ands	r3, r2
 80141ec:	d007      	beq.n	80141fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	681a      	ldr	r2, [r3, #0]
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	491e      	ldr	r1, [pc, #120]	@ (8014274 <I2C_ITSlaveSeqCplt+0xc4>)
 80141fa:	400a      	ands	r2, r1
 80141fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2241      	movs	r2, #65	@ 0x41
 8014202:	5c9b      	ldrb	r3, [r3, r2]
 8014204:	b2db      	uxtb	r3, r3
 8014206:	2b29      	cmp	r3, #41	@ 0x29
 8014208:	d114      	bne.n	8014234 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2241      	movs	r2, #65	@ 0x41
 801420e:	2128      	movs	r1, #40	@ 0x28
 8014210:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2221      	movs	r2, #33	@ 0x21
 8014216:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2101      	movs	r1, #1
 801421c:	0018      	movs	r0, r3
 801421e:	f000 ffb1 	bl	8015184 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2240      	movs	r2, #64	@ 0x40
 8014226:	2100      	movs	r1, #0
 8014228:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	0018      	movs	r0, r3
 801422e:	f7ff f906 	bl	801343e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014232:	e019      	b.n	8014268 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2241      	movs	r2, #65	@ 0x41
 8014238:	5c9b      	ldrb	r3, [r3, r2]
 801423a:	b2db      	uxtb	r3, r3
 801423c:	2b2a      	cmp	r3, #42	@ 0x2a
 801423e:	d113      	bne.n	8014268 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2241      	movs	r2, #65	@ 0x41
 8014244:	2128      	movs	r1, #40	@ 0x28
 8014246:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	2222      	movs	r2, #34	@ 0x22
 801424c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2102      	movs	r1, #2
 8014252:	0018      	movs	r0, r3
 8014254:	f000 ff96 	bl	8015184 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2240      	movs	r2, #64	@ 0x40
 801425c:	2100      	movs	r1, #0
 801425e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	0018      	movs	r0, r3
 8014264:	f7ff f8f3 	bl	801344e <HAL_I2C_SlaveRxCpltCallback>
}
 8014268:	46c0      	nop			@ (mov r8, r8)
 801426a:	46bd      	mov	sp, r7
 801426c:	b004      	add	sp, #16
 801426e:	bd80      	pop	{r7, pc}
 8014270:	ffffbfff 	.word	0xffffbfff
 8014274:	ffff7fff 	.word	0xffff7fff

08014278 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b086      	sub	sp, #24
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	2220      	movs	r2, #32
 801428c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2241      	movs	r2, #65	@ 0x41
 8014292:	5c9b      	ldrb	r3, [r3, r2]
 8014294:	b2db      	uxtb	r3, r3
 8014296:	2b21      	cmp	r3, #33	@ 0x21
 8014298:	d108      	bne.n	80142ac <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2101      	movs	r1, #1
 801429e:	0018      	movs	r0, r3
 80142a0:	f000 ff70 	bl	8015184 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2211      	movs	r2, #17
 80142a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80142aa:	e00d      	b.n	80142c8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2241      	movs	r2, #65	@ 0x41
 80142b0:	5c9b      	ldrb	r3, [r3, r2]
 80142b2:	b2db      	uxtb	r3, r3
 80142b4:	2b22      	cmp	r3, #34	@ 0x22
 80142b6:	d107      	bne.n	80142c8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2102      	movs	r1, #2
 80142bc:	0018      	movs	r0, r3
 80142be:	f000 ff61 	bl	8015184 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2212      	movs	r2, #18
 80142c6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	685a      	ldr	r2, [r3, #4]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	494e      	ldr	r1, [pc, #312]	@ (801440c <I2C_ITMasterCplt+0x194>)
 80142d4:	400a      	ands	r2, r1
 80142d6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	4a4b      	ldr	r2, [pc, #300]	@ (8014410 <I2C_ITMasterCplt+0x198>)
 80142e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	2210      	movs	r2, #16
 80142e8:	4013      	ands	r3, r2
 80142ea:	d009      	beq.n	8014300 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2210      	movs	r2, #16
 80142f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142f8:	2204      	movs	r2, #4
 80142fa:	431a      	orrs	r2, r3
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2241      	movs	r2, #65	@ 0x41
 8014304:	5c9b      	ldrb	r3, [r3, r2]
 8014306:	b2db      	uxtb	r3, r3
 8014308:	2b60      	cmp	r3, #96	@ 0x60
 801430a:	d109      	bne.n	8014320 <I2C_ITMasterCplt+0xa8>
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	2204      	movs	r2, #4
 8014310:	4013      	ands	r3, r2
 8014312:	d005      	beq.n	8014320 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801431a:	b2db      	uxtb	r3, r3
 801431c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801431e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	0018      	movs	r0, r3
 8014324:	f000 fb19 	bl	801495a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801432c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2241      	movs	r2, #65	@ 0x41
 8014332:	5c9b      	ldrb	r3, [r3, r2]
 8014334:	b2db      	uxtb	r3, r3
 8014336:	2b60      	cmp	r3, #96	@ 0x60
 8014338:	d002      	beq.n	8014340 <I2C_ITMasterCplt+0xc8>
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d007      	beq.n	8014350 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	0011      	movs	r1, r2
 8014348:	0018      	movs	r0, r3
 801434a:	f000 f9db 	bl	8014704 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801434e:	e058      	b.n	8014402 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2241      	movs	r2, #65	@ 0x41
 8014354:	5c9b      	ldrb	r3, [r3, r2]
 8014356:	b2db      	uxtb	r3, r3
 8014358:	2b21      	cmp	r3, #33	@ 0x21
 801435a:	d126      	bne.n	80143aa <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2241      	movs	r2, #65	@ 0x41
 8014360:	2120      	movs	r1, #32
 8014362:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2200      	movs	r2, #0
 8014368:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2242      	movs	r2, #66	@ 0x42
 801436e:	5c9b      	ldrb	r3, [r3, r2]
 8014370:	b2db      	uxtb	r3, r3
 8014372:	2b40      	cmp	r3, #64	@ 0x40
 8014374:	d10c      	bne.n	8014390 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2242      	movs	r2, #66	@ 0x42
 801437a:	2100      	movs	r1, #0
 801437c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2240      	movs	r2, #64	@ 0x40
 8014382:	2100      	movs	r1, #0
 8014384:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	0018      	movs	r0, r3
 801438a:	f7ff f880 	bl	801348e <HAL_I2C_MemTxCpltCallback>
}
 801438e:	e038      	b.n	8014402 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2242      	movs	r2, #66	@ 0x42
 8014394:	2100      	movs	r1, #0
 8014396:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2240      	movs	r2, #64	@ 0x40
 801439c:	2100      	movs	r1, #0
 801439e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	0018      	movs	r0, r3
 80143a4:	f7ff f83b 	bl	801341e <HAL_I2C_MasterTxCpltCallback>
}
 80143a8:	e02b      	b.n	8014402 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2241      	movs	r2, #65	@ 0x41
 80143ae:	5c9b      	ldrb	r3, [r3, r2]
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	2b22      	cmp	r3, #34	@ 0x22
 80143b4:	d125      	bne.n	8014402 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2241      	movs	r2, #65	@ 0x41
 80143ba:	2120      	movs	r1, #32
 80143bc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2242      	movs	r2, #66	@ 0x42
 80143c8:	5c9b      	ldrb	r3, [r3, r2]
 80143ca:	b2db      	uxtb	r3, r3
 80143cc:	2b40      	cmp	r3, #64	@ 0x40
 80143ce:	d10c      	bne.n	80143ea <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2242      	movs	r2, #66	@ 0x42
 80143d4:	2100      	movs	r1, #0
 80143d6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2240      	movs	r2, #64	@ 0x40
 80143dc:	2100      	movs	r1, #0
 80143de:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	0018      	movs	r0, r3
 80143e4:	f7ff f85b 	bl	801349e <HAL_I2C_MemRxCpltCallback>
}
 80143e8:	e00b      	b.n	8014402 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2242      	movs	r2, #66	@ 0x42
 80143ee:	2100      	movs	r1, #0
 80143f0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2240      	movs	r2, #64	@ 0x40
 80143f6:	2100      	movs	r1, #0
 80143f8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	0018      	movs	r0, r3
 80143fe:	f7ff f816 	bl	801342e <HAL_I2C_MasterRxCpltCallback>
}
 8014402:	46c0      	nop			@ (mov r8, r8)
 8014404:	46bd      	mov	sp, r7
 8014406:	b006      	add	sp, #24
 8014408:	bd80      	pop	{r7, pc}
 801440a:	46c0      	nop			@ (mov r8, r8)
 801440c:	fe00e800 	.word	0xfe00e800
 8014410:	ffff0000 	.word	0xffff0000

08014414 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b086      	sub	sp, #24
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801442a:	200f      	movs	r0, #15
 801442c:	183b      	adds	r3, r7, r0
 801442e:	687a      	ldr	r2, [r7, #4]
 8014430:	2141      	movs	r1, #65	@ 0x41
 8014432:	5c52      	ldrb	r2, [r2, r1]
 8014434:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2220      	movs	r2, #32
 801443c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801443e:	183b      	adds	r3, r7, r0
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	2b21      	cmp	r3, #33	@ 0x21
 8014444:	d003      	beq.n	801444e <I2C_ITSlaveCplt+0x3a>
 8014446:	183b      	adds	r3, r7, r0
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	2b29      	cmp	r3, #41	@ 0x29
 801444c:	d109      	bne.n	8014462 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801444e:	4a7b      	ldr	r2, [pc, #492]	@ (801463c <I2C_ITSlaveCplt+0x228>)
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	0011      	movs	r1, r2
 8014454:	0018      	movs	r0, r3
 8014456:	f000 fe95 	bl	8015184 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2221      	movs	r2, #33	@ 0x21
 801445e:	631a      	str	r2, [r3, #48]	@ 0x30
 8014460:	e011      	b.n	8014486 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014462:	220f      	movs	r2, #15
 8014464:	18bb      	adds	r3, r7, r2
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	2b22      	cmp	r3, #34	@ 0x22
 801446a:	d003      	beq.n	8014474 <I2C_ITSlaveCplt+0x60>
 801446c:	18bb      	adds	r3, r7, r2
 801446e:	781b      	ldrb	r3, [r3, #0]
 8014470:	2b2a      	cmp	r3, #42	@ 0x2a
 8014472:	d108      	bne.n	8014486 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8014474:	4a72      	ldr	r2, [pc, #456]	@ (8014640 <I2C_ITSlaveCplt+0x22c>)
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	0011      	movs	r1, r2
 801447a:	0018      	movs	r0, r3
 801447c:	f000 fe82 	bl	8015184 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2222      	movs	r2, #34	@ 0x22
 8014484:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	685a      	ldr	r2, [r3, #4]
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	2180      	movs	r1, #128	@ 0x80
 8014492:	0209      	lsls	r1, r1, #8
 8014494:	430a      	orrs	r2, r1
 8014496:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	685a      	ldr	r2, [r3, #4]
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	4968      	ldr	r1, [pc, #416]	@ (8014644 <I2C_ITSlaveCplt+0x230>)
 80144a4:	400a      	ands	r2, r1
 80144a6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	0018      	movs	r0, r3
 80144ac:	f000 fa55 	bl	801495a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80144b0:	693a      	ldr	r2, [r7, #16]
 80144b2:	2380      	movs	r3, #128	@ 0x80
 80144b4:	01db      	lsls	r3, r3, #7
 80144b6:	4013      	ands	r3, r2
 80144b8:	d013      	beq.n	80144e2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	4960      	ldr	r1, [pc, #384]	@ (8014648 <I2C_ITSlaveCplt+0x234>)
 80144c6:	400a      	ands	r2, r1
 80144c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d01f      	beq.n	8014512 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	b29a      	uxth	r2, r3
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80144e0:	e017      	b.n	8014512 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80144e2:	693a      	ldr	r2, [r7, #16]
 80144e4:	2380      	movs	r3, #128	@ 0x80
 80144e6:	021b      	lsls	r3, r3, #8
 80144e8:	4013      	ands	r3, r2
 80144ea:	d012      	beq.n	8014512 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	681a      	ldr	r2, [r3, #0]
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	4955      	ldr	r1, [pc, #340]	@ (801464c <I2C_ITSlaveCplt+0x238>)
 80144f8:	400a      	ands	r2, r1
 80144fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014500:	2b00      	cmp	r3, #0
 8014502:	d006      	beq.n	8014512 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	b29a      	uxth	r2, r3
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	2204      	movs	r2, #4
 8014516:	4013      	ands	r3, r2
 8014518:	d020      	beq.n	801455c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	2204      	movs	r2, #4
 801451e:	4393      	bics	r3, r2
 8014520:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801452c:	b2d2      	uxtb	r2, r2
 801452e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014534:	1c5a      	adds	r2, r3, #1
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00c      	beq.n	801455c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014546:	3b01      	subs	r3, #1
 8014548:	b29a      	uxth	r2, r3
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014552:	b29b      	uxth	r3, r3
 8014554:	3b01      	subs	r3, #1
 8014556:	b29a      	uxth	r2, r3
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014560:	b29b      	uxth	r3, r3
 8014562:	2b00      	cmp	r3, #0
 8014564:	d005      	beq.n	8014572 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801456a:	2204      	movs	r2, #4
 801456c:	431a      	orrs	r2, r3
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2242      	movs	r2, #66	@ 0x42
 8014576:	2100      	movs	r1, #0
 8014578:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2200      	movs	r2, #0
 801457e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014584:	2b00      	cmp	r3, #0
 8014586:	d013      	beq.n	80145b0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	0011      	movs	r1, r2
 8014590:	0018      	movs	r0, r3
 8014592:	f000 f8b7 	bl	8014704 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2241      	movs	r2, #65	@ 0x41
 801459a:	5c9b      	ldrb	r3, [r3, r2]
 801459c:	b2db      	uxtb	r3, r3
 801459e:	2b28      	cmp	r3, #40	@ 0x28
 80145a0:	d147      	bne.n	8014632 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80145a2:	697a      	ldr	r2, [r7, #20]
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	0011      	movs	r1, r2
 80145a8:	0018      	movs	r0, r3
 80145aa:	f000 f853 	bl	8014654 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80145ae:	e040      	b.n	8014632 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145b4:	4a26      	ldr	r2, [pc, #152]	@ (8014650 <I2C_ITSlaveCplt+0x23c>)
 80145b6:	4293      	cmp	r3, r2
 80145b8:	d016      	beq.n	80145e8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	0018      	movs	r0, r3
 80145be:	f7ff fdf7 	bl	80141b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	4a22      	ldr	r2, [pc, #136]	@ (8014650 <I2C_ITSlaveCplt+0x23c>)
 80145c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2241      	movs	r2, #65	@ 0x41
 80145cc:	2120      	movs	r1, #32
 80145ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2200      	movs	r2, #0
 80145d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2240      	movs	r2, #64	@ 0x40
 80145da:	2100      	movs	r1, #0
 80145dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	0018      	movs	r0, r3
 80145e2:	f7fe ff4c 	bl	801347e <HAL_I2C_ListenCpltCallback>
}
 80145e6:	e024      	b.n	8014632 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2241      	movs	r2, #65	@ 0x41
 80145ec:	5c9b      	ldrb	r3, [r3, r2]
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	2b22      	cmp	r3, #34	@ 0x22
 80145f2:	d10f      	bne.n	8014614 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2241      	movs	r2, #65	@ 0x41
 80145f8:	2120      	movs	r1, #32
 80145fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2200      	movs	r2, #0
 8014600:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	2240      	movs	r2, #64	@ 0x40
 8014606:	2100      	movs	r1, #0
 8014608:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	0018      	movs	r0, r3
 801460e:	f7fe ff1e 	bl	801344e <HAL_I2C_SlaveRxCpltCallback>
}
 8014612:	e00e      	b.n	8014632 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2241      	movs	r2, #65	@ 0x41
 8014618:	2120      	movs	r1, #32
 801461a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2200      	movs	r2, #0
 8014620:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	2240      	movs	r2, #64	@ 0x40
 8014626:	2100      	movs	r1, #0
 8014628:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	0018      	movs	r0, r3
 801462e:	f7fe ff06 	bl	801343e <HAL_I2C_SlaveTxCpltCallback>
}
 8014632:	46c0      	nop			@ (mov r8, r8)
 8014634:	46bd      	mov	sp, r7
 8014636:	b006      	add	sp, #24
 8014638:	bd80      	pop	{r7, pc}
 801463a:	46c0      	nop			@ (mov r8, r8)
 801463c:	00008001 	.word	0x00008001
 8014640:	00008002 	.word	0x00008002
 8014644:	fe00e800 	.word	0xfe00e800
 8014648:	ffffbfff 	.word	0xffffbfff
 801464c:	ffff7fff 	.word	0xffff7fff
 8014650:	ffff0000 	.word	0xffff0000

08014654 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	4a26      	ldr	r2, [pc, #152]	@ (80146fc <I2C_ITListenCplt+0xa8>)
 8014662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2200      	movs	r2, #0
 8014668:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2241      	movs	r2, #65	@ 0x41
 801466e:	2120      	movs	r1, #32
 8014670:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2242      	movs	r2, #66	@ 0x42
 8014676:	2100      	movs	r1, #0
 8014678:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2200      	movs	r2, #0
 801467e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	2204      	movs	r2, #4
 8014684:	4013      	ands	r3, r2
 8014686:	d022      	beq.n	80146ce <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014692:	b2d2      	uxtb	r2, r2
 8014694:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801469a:	1c5a      	adds	r2, r3, #1
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d012      	beq.n	80146ce <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146ac:	3b01      	subs	r3, #1
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	3b01      	subs	r3, #1
 80146bc:	b29a      	uxth	r2, r3
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146c6:	2204      	movs	r2, #4
 80146c8:	431a      	orrs	r2, r3
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80146ce:	4a0c      	ldr	r2, [pc, #48]	@ (8014700 <I2C_ITListenCplt+0xac>)
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	0011      	movs	r1, r2
 80146d4:	0018      	movs	r0, r3
 80146d6:	f000 fd55 	bl	8015184 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	2210      	movs	r2, #16
 80146e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2240      	movs	r2, #64	@ 0x40
 80146e6:	2100      	movs	r1, #0
 80146e8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	0018      	movs	r0, r3
 80146ee:	f7fe fec6 	bl	801347e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80146f2:	46c0      	nop			@ (mov r8, r8)
 80146f4:	46bd      	mov	sp, r7
 80146f6:	b002      	add	sp, #8
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	46c0      	nop			@ (mov r8, r8)
 80146fc:	ffff0000 	.word	0xffff0000
 8014700:	00008003 	.word	0x00008003

08014704 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801470e:	200f      	movs	r0, #15
 8014710:	183b      	adds	r3, r7, r0
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	2141      	movs	r1, #65	@ 0x41
 8014716:	5c52      	ldrb	r2, [r2, r1]
 8014718:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2242      	movs	r2, #66	@ 0x42
 801471e:	2100      	movs	r1, #0
 8014720:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	4a72      	ldr	r2, [pc, #456]	@ (80148f0 <I2C_ITError+0x1ec>)
 8014726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2200      	movs	r2, #0
 801472c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	431a      	orrs	r2, r3
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801473a:	183b      	adds	r3, r7, r0
 801473c:	781b      	ldrb	r3, [r3, #0]
 801473e:	2b28      	cmp	r3, #40	@ 0x28
 8014740:	d007      	beq.n	8014752 <I2C_ITError+0x4e>
 8014742:	183b      	adds	r3, r7, r0
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	2b29      	cmp	r3, #41	@ 0x29
 8014748:	d003      	beq.n	8014752 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801474a:	183b      	adds	r3, r7, r0
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014750:	d10c      	bne.n	801476c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2103      	movs	r1, #3
 8014756:	0018      	movs	r0, r3
 8014758:	f000 fd14 	bl	8015184 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2241      	movs	r2, #65	@ 0x41
 8014760:	2128      	movs	r1, #40	@ 0x28
 8014762:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	4a63      	ldr	r2, [pc, #396]	@ (80148f4 <I2C_ITError+0x1f0>)
 8014768:	635a      	str	r2, [r3, #52]	@ 0x34
 801476a:	e032      	b.n	80147d2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801476c:	4a62      	ldr	r2, [pc, #392]	@ (80148f8 <I2C_ITError+0x1f4>)
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	0011      	movs	r1, r2
 8014772:	0018      	movs	r0, r3
 8014774:	f000 fd06 	bl	8015184 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	0018      	movs	r0, r3
 801477c:	f000 f8ed 	bl	801495a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2241      	movs	r2, #65	@ 0x41
 8014784:	5c9b      	ldrb	r3, [r3, r2]
 8014786:	b2db      	uxtb	r3, r3
 8014788:	2b60      	cmp	r3, #96	@ 0x60
 801478a:	d01f      	beq.n	80147cc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2241      	movs	r2, #65	@ 0x41
 8014790:	2120      	movs	r1, #32
 8014792:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	699b      	ldr	r3, [r3, #24]
 801479a:	2220      	movs	r2, #32
 801479c:	4013      	ands	r3, r2
 801479e:	2b20      	cmp	r3, #32
 80147a0:	d114      	bne.n	80147cc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	699b      	ldr	r3, [r3, #24]
 80147a8:	2210      	movs	r2, #16
 80147aa:	4013      	ands	r3, r2
 80147ac:	2b10      	cmp	r3, #16
 80147ae:	d109      	bne.n	80147c4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	2210      	movs	r2, #16
 80147b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147bc:	2204      	movs	r2, #4
 80147be:	431a      	orrs	r2, r3
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	2220      	movs	r2, #32
 80147ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	2200      	movs	r2, #0
 80147d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80147d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d03b      	beq.n	8014858 <I2C_ITError+0x154>
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	2b11      	cmp	r3, #17
 80147e4:	d002      	beq.n	80147ec <I2C_ITError+0xe8>
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	2b21      	cmp	r3, #33	@ 0x21
 80147ea:	d135      	bne.n	8014858 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	681a      	ldr	r2, [r3, #0]
 80147f2:	2380      	movs	r3, #128	@ 0x80
 80147f4:	01db      	lsls	r3, r3, #7
 80147f6:	401a      	ands	r2, r3
 80147f8:	2380      	movs	r3, #128	@ 0x80
 80147fa:	01db      	lsls	r3, r3, #7
 80147fc:	429a      	cmp	r2, r3
 80147fe:	d107      	bne.n	8014810 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	493c      	ldr	r1, [pc, #240]	@ (80148fc <I2C_ITError+0x1f8>)
 801480c:	400a      	ands	r2, r1
 801480e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014814:	0018      	movs	r0, r3
 8014816:	f7fd faca 	bl	8011dae <HAL_DMA_GetState>
 801481a:	0003      	movs	r3, r0
 801481c:	2b01      	cmp	r3, #1
 801481e:	d016      	beq.n	801484e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014824:	4a36      	ldr	r2, [pc, #216]	@ (8014900 <I2C_ITError+0x1fc>)
 8014826:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2240      	movs	r2, #64	@ 0x40
 801482c:	2100      	movs	r1, #0
 801482e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014834:	0018      	movs	r0, r3
 8014836:	f7fd f9c5 	bl	8011bc4 <HAL_DMA_Abort_IT>
 801483a:	1e03      	subs	r3, r0, #0
 801483c:	d051      	beq.n	80148e2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014848:	0018      	movs	r0, r3
 801484a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801484c:	e049      	b.n	80148e2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	0018      	movs	r0, r3
 8014852:	f000 f859 	bl	8014908 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014856:	e044      	b.n	80148e2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801485c:	2b00      	cmp	r3, #0
 801485e:	d03b      	beq.n	80148d8 <I2C_ITError+0x1d4>
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	2b12      	cmp	r3, #18
 8014864:	d002      	beq.n	801486c <I2C_ITError+0x168>
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	2b22      	cmp	r3, #34	@ 0x22
 801486a:	d135      	bne.n	80148d8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	2380      	movs	r3, #128	@ 0x80
 8014874:	021b      	lsls	r3, r3, #8
 8014876:	401a      	ands	r2, r3
 8014878:	2380      	movs	r3, #128	@ 0x80
 801487a:	021b      	lsls	r3, r3, #8
 801487c:	429a      	cmp	r2, r3
 801487e:	d107      	bne.n	8014890 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	681a      	ldr	r2, [r3, #0]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	491e      	ldr	r1, [pc, #120]	@ (8014904 <I2C_ITError+0x200>)
 801488c:	400a      	ands	r2, r1
 801488e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014894:	0018      	movs	r0, r3
 8014896:	f7fd fa8a 	bl	8011dae <HAL_DMA_GetState>
 801489a:	0003      	movs	r3, r0
 801489c:	2b01      	cmp	r3, #1
 801489e:	d016      	beq.n	80148ce <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148a4:	4a16      	ldr	r2, [pc, #88]	@ (8014900 <I2C_ITError+0x1fc>)
 80148a6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2240      	movs	r2, #64	@ 0x40
 80148ac:	2100      	movs	r1, #0
 80148ae:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148b4:	0018      	movs	r0, r3
 80148b6:	f7fd f985 	bl	8011bc4 <HAL_DMA_Abort_IT>
 80148ba:	1e03      	subs	r3, r0, #0
 80148bc:	d013      	beq.n	80148e6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148c8:	0018      	movs	r0, r3
 80148ca:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80148cc:	e00b      	b.n	80148e6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	0018      	movs	r0, r3
 80148d2:	f000 f819 	bl	8014908 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80148d6:	e006      	b.n	80148e6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	0018      	movs	r0, r3
 80148dc:	f000 f814 	bl	8014908 <I2C_TreatErrorCallback>
  }
}
 80148e0:	e002      	b.n	80148e8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80148e2:	46c0      	nop			@ (mov r8, r8)
 80148e4:	e000      	b.n	80148e8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80148e6:	46c0      	nop			@ (mov r8, r8)
}
 80148e8:	46c0      	nop			@ (mov r8, r8)
 80148ea:	46bd      	mov	sp, r7
 80148ec:	b004      	add	sp, #16
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	ffff0000 	.word	0xffff0000
 80148f4:	08013725 	.word	0x08013725
 80148f8:	00008003 	.word	0x00008003
 80148fc:	ffffbfff 	.word	0xffffbfff
 8014900:	08014b13 	.word	0x08014b13
 8014904:	ffff7fff 	.word	0xffff7fff

08014908 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2241      	movs	r2, #65	@ 0x41
 8014914:	5c9b      	ldrb	r3, [r3, r2]
 8014916:	b2db      	uxtb	r3, r3
 8014918:	2b60      	cmp	r3, #96	@ 0x60
 801491a:	d10f      	bne.n	801493c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2241      	movs	r2, #65	@ 0x41
 8014920:	2120      	movs	r1, #32
 8014922:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2200      	movs	r2, #0
 8014928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2240      	movs	r2, #64	@ 0x40
 801492e:	2100      	movs	r1, #0
 8014930:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	0018      	movs	r0, r3
 8014936:	f7fe fdc2 	bl	80134be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801493a:	e00a      	b.n	8014952 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2200      	movs	r2, #0
 8014940:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2240      	movs	r2, #64	@ 0x40
 8014946:	2100      	movs	r1, #0
 8014948:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	0018      	movs	r0, r3
 801494e:	f7fe fdae 	bl	80134ae <HAL_I2C_ErrorCallback>
}
 8014952:	46c0      	nop			@ (mov r8, r8)
 8014954:	46bd      	mov	sp, r7
 8014956:	b002      	add	sp, #8
 8014958:	bd80      	pop	{r7, pc}

0801495a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801495a:	b580      	push	{r7, lr}
 801495c:	b082      	sub	sp, #8
 801495e:	af00      	add	r7, sp, #0
 8014960:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	699b      	ldr	r3, [r3, #24]
 8014968:	2202      	movs	r2, #2
 801496a:	4013      	ands	r3, r2
 801496c:	2b02      	cmp	r3, #2
 801496e:	d103      	bne.n	8014978 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	2200      	movs	r2, #0
 8014976:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	699b      	ldr	r3, [r3, #24]
 801497e:	2201      	movs	r2, #1
 8014980:	4013      	ands	r3, r2
 8014982:	2b01      	cmp	r3, #1
 8014984:	d007      	beq.n	8014996 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	699a      	ldr	r2, [r3, #24]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	2101      	movs	r1, #1
 8014992:	430a      	orrs	r2, r1
 8014994:	619a      	str	r2, [r3, #24]
  }
}
 8014996:	46c0      	nop			@ (mov r8, r8)
 8014998:	46bd      	mov	sp, r7
 801499a:	b002      	add	sp, #8
 801499c:	bd80      	pop	{r7, pc}
	...

080149a0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149ac:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	4920      	ldr	r1, [pc, #128]	@ (8014a3c <I2C_DMAMasterTransmitCplt+0x9c>)
 80149ba:	400a      	ands	r2, r1
 80149bc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d105      	bne.n	80149d4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2120      	movs	r1, #32
 80149cc:	0018      	movs	r0, r3
 80149ce:	f000 fb4b 	bl	8015068 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80149d2:	e02e      	b.n	8014a32 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149d8:	68fa      	ldr	r2, [r7, #12]
 80149da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80149dc:	189a      	adds	r2, r3, r2
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	2bff      	cmp	r3, #255	@ 0xff
 80149ea:	d903      	bls.n	80149f4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	22ff      	movs	r2, #255	@ 0xff
 80149f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80149f2:	e004      	b.n	80149fe <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80149f8:	b29a      	uxth	r2, r3
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a06:	0019      	movs	r1, r3
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	3328      	adds	r3, #40	@ 0x28
 8014a0e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8014a14:	f7fd f830 	bl	8011a78 <HAL_DMA_Start_IT>
 8014a18:	1e03      	subs	r3, r0, #0
 8014a1a:	d005      	beq.n	8014a28 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2110      	movs	r1, #16
 8014a20:	0018      	movs	r0, r3
 8014a22:	f7ff fe6f 	bl	8014704 <I2C_ITError>
}
 8014a26:	e004      	b.n	8014a32 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2140      	movs	r1, #64	@ 0x40
 8014a2c:	0018      	movs	r0, r3
 8014a2e:	f000 fb1b 	bl	8015068 <I2C_Enable_IRQ>
}
 8014a32:	46c0      	nop			@ (mov r8, r8)
 8014a34:	46bd      	mov	sp, r7
 8014a36:	b004      	add	sp, #16
 8014a38:	bd80      	pop	{r7, pc}
 8014a3a:	46c0      	nop			@ (mov r8, r8)
 8014a3c:	ffffbfff 	.word	0xffffbfff

08014a40 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b084      	sub	sp, #16
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a4c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	681a      	ldr	r2, [r3, #0]
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4920      	ldr	r1, [pc, #128]	@ (8014adc <I2C_DMAMasterReceiveCplt+0x9c>)
 8014a5a:	400a      	ands	r2, r1
 8014a5c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d105      	bne.n	8014a74 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2120      	movs	r1, #32
 8014a6c:	0018      	movs	r0, r3
 8014a6e:	f000 fafb 	bl	8015068 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8014a72:	e02e      	b.n	8014ad2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a78:	68fa      	ldr	r2, [r7, #12]
 8014a7a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014a7c:	189a      	adds	r2, r3, r2
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a86:	b29b      	uxth	r3, r3
 8014a88:	2bff      	cmp	r3, #255	@ 0xff
 8014a8a:	d903      	bls.n	8014a94 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	22ff      	movs	r2, #255	@ 0xff
 8014a90:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014a92:	e004      	b.n	8014a9e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014a98:	b29a      	uxth	r2, r3
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	3324      	adds	r3, #36	@ 0x24
 8014aa8:	0019      	movs	r1, r3
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aae:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8014ab4:	f7fc ffe0 	bl	8011a78 <HAL_DMA_Start_IT>
 8014ab8:	1e03      	subs	r3, r0, #0
 8014aba:	d005      	beq.n	8014ac8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	2110      	movs	r1, #16
 8014ac0:	0018      	movs	r0, r3
 8014ac2:	f7ff fe1f 	bl	8014704 <I2C_ITError>
}
 8014ac6:	e004      	b.n	8014ad2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	2140      	movs	r1, #64	@ 0x40
 8014acc:	0018      	movs	r0, r3
 8014ace:	f000 facb 	bl	8015068 <I2C_Enable_IRQ>
}
 8014ad2:	46c0      	nop			@ (mov r8, r8)
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	b004      	add	sp, #16
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	46c0      	nop			@ (mov r8, r8)
 8014adc:	ffff7fff 	.word	0xffff7fff

08014ae0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b084      	sub	sp, #16
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014aec:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	685a      	ldr	r2, [r3, #4]
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	2180      	movs	r1, #128	@ 0x80
 8014afa:	0209      	lsls	r1, r1, #8
 8014afc:	430a      	orrs	r2, r1
 8014afe:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2110      	movs	r1, #16
 8014b04:	0018      	movs	r0, r3
 8014b06:	f7ff fdfd 	bl	8014704 <I2C_ITError>
}
 8014b0a:	46c0      	nop			@ (mov r8, r8)
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	b004      	add	sp, #16
 8014b10:	bd80      	pop	{r7, pc}

08014b12 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8014b12:	b580      	push	{r7, lr}
 8014b14:	b084      	sub	sp, #16
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b1e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d003      	beq.n	8014b30 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d003      	beq.n	8014b40 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	0018      	movs	r0, r3
 8014b44:	f7ff fee0 	bl	8014908 <I2C_TreatErrorCallback>
}
 8014b48:	46c0      	nop			@ (mov r8, r8)
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	b004      	add	sp, #16
 8014b4e:	bd80      	pop	{r7, pc}

08014b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	603b      	str	r3, [r7, #0]
 8014b5c:	1dfb      	adds	r3, r7, #7
 8014b5e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014b60:	e030      	b.n	8014bc4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	3301      	adds	r3, #1
 8014b66:	d02d      	beq.n	8014bc4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014b68:	f7fc fa34 	bl	8010fd4 <HAL_GetTick>
 8014b6c:	0002      	movs	r2, r0
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	1ad3      	subs	r3, r2, r3
 8014b72:	683a      	ldr	r2, [r7, #0]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d302      	bcc.n	8014b7e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d122      	bne.n	8014bc4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	699b      	ldr	r3, [r3, #24]
 8014b84:	68ba      	ldr	r2, [r7, #8]
 8014b86:	4013      	ands	r3, r2
 8014b88:	68ba      	ldr	r2, [r7, #8]
 8014b8a:	1ad3      	subs	r3, r2, r3
 8014b8c:	425a      	negs	r2, r3
 8014b8e:	4153      	adcs	r3, r2
 8014b90:	b2db      	uxtb	r3, r3
 8014b92:	001a      	movs	r2, r3
 8014b94:	1dfb      	adds	r3, r7, #7
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d113      	bne.n	8014bc4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ba0:	2220      	movs	r2, #32
 8014ba2:	431a      	orrs	r2, r3
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	2241      	movs	r2, #65	@ 0x41
 8014bac:	2120      	movs	r1, #32
 8014bae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2242      	movs	r2, #66	@ 0x42
 8014bb4:	2100      	movs	r1, #0
 8014bb6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	2240      	movs	r2, #64	@ 0x40
 8014bbc:	2100      	movs	r1, #0
 8014bbe:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8014bc0:	2301      	movs	r3, #1
 8014bc2:	e00f      	b.n	8014be4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	699b      	ldr	r3, [r3, #24]
 8014bca:	68ba      	ldr	r2, [r7, #8]
 8014bcc:	4013      	ands	r3, r2
 8014bce:	68ba      	ldr	r2, [r7, #8]
 8014bd0:	1ad3      	subs	r3, r2, r3
 8014bd2:	425a      	negs	r2, r3
 8014bd4:	4153      	adcs	r3, r2
 8014bd6:	b2db      	uxtb	r3, r3
 8014bd8:	001a      	movs	r2, r3
 8014bda:	1dfb      	adds	r3, r7, #7
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d0bf      	beq.n	8014b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014be2:	2300      	movs	r3, #0
}
 8014be4:	0018      	movs	r0, r3
 8014be6:	46bd      	mov	sp, r7
 8014be8:	b004      	add	sp, #16
 8014bea:	bd80      	pop	{r7, pc}

08014bec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b084      	sub	sp, #16
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014bf8:	e032      	b.n	8014c60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014bfa:	687a      	ldr	r2, [r7, #4]
 8014bfc:	68b9      	ldr	r1, [r7, #8]
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	0018      	movs	r0, r3
 8014c02:	f000 f8ff 	bl	8014e04 <I2C_IsErrorOccurred>
 8014c06:	1e03      	subs	r3, r0, #0
 8014c08:	d001      	beq.n	8014c0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	e030      	b.n	8014c70 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	3301      	adds	r3, #1
 8014c12:	d025      	beq.n	8014c60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014c14:	f7fc f9de 	bl	8010fd4 <HAL_GetTick>
 8014c18:	0002      	movs	r2, r0
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	1ad3      	subs	r3, r2, r3
 8014c1e:	68ba      	ldr	r2, [r7, #8]
 8014c20:	429a      	cmp	r2, r3
 8014c22:	d302      	bcc.n	8014c2a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d11a      	bne.n	8014c60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	699b      	ldr	r3, [r3, #24]
 8014c30:	2202      	movs	r2, #2
 8014c32:	4013      	ands	r3, r2
 8014c34:	2b02      	cmp	r3, #2
 8014c36:	d013      	beq.n	8014c60 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c3c:	2220      	movs	r2, #32
 8014c3e:	431a      	orrs	r2, r3
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	2241      	movs	r2, #65	@ 0x41
 8014c48:	2120      	movs	r1, #32
 8014c4a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2242      	movs	r2, #66	@ 0x42
 8014c50:	2100      	movs	r1, #0
 8014c52:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	2240      	movs	r2, #64	@ 0x40
 8014c58:	2100      	movs	r1, #0
 8014c5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	e007      	b.n	8014c70 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	699b      	ldr	r3, [r3, #24]
 8014c66:	2202      	movs	r2, #2
 8014c68:	4013      	ands	r3, r2
 8014c6a:	2b02      	cmp	r3, #2
 8014c6c:	d1c5      	bne.n	8014bfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8014c6e:	2300      	movs	r3, #0
}
 8014c70:	0018      	movs	r0, r3
 8014c72:	46bd      	mov	sp, r7
 8014c74:	b004      	add	sp, #16
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	60b9      	str	r1, [r7, #8]
 8014c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014c84:	e02f      	b.n	8014ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	68b9      	ldr	r1, [r7, #8]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	0018      	movs	r0, r3
 8014c8e:	f000 f8b9 	bl	8014e04 <I2C_IsErrorOccurred>
 8014c92:	1e03      	subs	r3, r0, #0
 8014c94:	d001      	beq.n	8014c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014c96:	2301      	movs	r3, #1
 8014c98:	e02d      	b.n	8014cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014c9a:	f7fc f99b 	bl	8010fd4 <HAL_GetTick>
 8014c9e:	0002      	movs	r2, r0
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	1ad3      	subs	r3, r2, r3
 8014ca4:	68ba      	ldr	r2, [r7, #8]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d302      	bcc.n	8014cb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d11a      	bne.n	8014ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	699b      	ldr	r3, [r3, #24]
 8014cb6:	2220      	movs	r2, #32
 8014cb8:	4013      	ands	r3, r2
 8014cba:	2b20      	cmp	r3, #32
 8014cbc:	d013      	beq.n	8014ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cc2:	2220      	movs	r2, #32
 8014cc4:	431a      	orrs	r2, r3
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2241      	movs	r2, #65	@ 0x41
 8014cce:	2120      	movs	r1, #32
 8014cd0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2242      	movs	r2, #66	@ 0x42
 8014cd6:	2100      	movs	r1, #0
 8014cd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2240      	movs	r2, #64	@ 0x40
 8014cde:	2100      	movs	r1, #0
 8014ce0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	e007      	b.n	8014cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	699b      	ldr	r3, [r3, #24]
 8014cec:	2220      	movs	r2, #32
 8014cee:	4013      	ands	r3, r2
 8014cf0:	2b20      	cmp	r3, #32
 8014cf2:	d1c8      	bne.n	8014c86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014cf4:	2300      	movs	r3, #0
}
 8014cf6:	0018      	movs	r0, r3
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	b004      	add	sp, #16
 8014cfc:	bd80      	pop	{r7, pc}
	...

08014d00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	60f8      	str	r0, [r7, #12]
 8014d08:	60b9      	str	r1, [r7, #8]
 8014d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014d0c:	e06b      	b.n	8014de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	68b9      	ldr	r1, [r7, #8]
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	0018      	movs	r0, r3
 8014d16:	f000 f875 	bl	8014e04 <I2C_IsErrorOccurred>
 8014d1a:	1e03      	subs	r3, r0, #0
 8014d1c:	d001      	beq.n	8014d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014d1e:	2301      	movs	r3, #1
 8014d20:	e069      	b.n	8014df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	699b      	ldr	r3, [r3, #24]
 8014d28:	2220      	movs	r2, #32
 8014d2a:	4013      	ands	r3, r2
 8014d2c:	2b20      	cmp	r3, #32
 8014d2e:	d138      	bne.n	8014da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	699b      	ldr	r3, [r3, #24]
 8014d36:	2204      	movs	r2, #4
 8014d38:	4013      	ands	r3, r2
 8014d3a:	2b04      	cmp	r3, #4
 8014d3c:	d105      	bne.n	8014d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d001      	beq.n	8014d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8014d46:	2300      	movs	r3, #0
 8014d48:	e055      	b.n	8014df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	699b      	ldr	r3, [r3, #24]
 8014d50:	2210      	movs	r2, #16
 8014d52:	4013      	ands	r3, r2
 8014d54:	2b10      	cmp	r3, #16
 8014d56:	d107      	bne.n	8014d68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	2210      	movs	r2, #16
 8014d5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2204      	movs	r2, #4
 8014d64:	645a      	str	r2, [r3, #68]	@ 0x44
 8014d66:	e002      	b.n	8014d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2220      	movs	r2, #32
 8014d74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	685a      	ldr	r2, [r3, #4]
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	491f      	ldr	r1, [pc, #124]	@ (8014e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8014d82:	400a      	ands	r2, r1
 8014d84:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	2241      	movs	r2, #65	@ 0x41
 8014d8a:	2120      	movs	r1, #32
 8014d8c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	2242      	movs	r2, #66	@ 0x42
 8014d92:	2100      	movs	r1, #0
 8014d94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	2240      	movs	r2, #64	@ 0x40
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	e029      	b.n	8014df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014da2:	f7fc f917 	bl	8010fd4 <HAL_GetTick>
 8014da6:	0002      	movs	r2, r0
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	1ad3      	subs	r3, r2, r3
 8014dac:	68ba      	ldr	r2, [r7, #8]
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d302      	bcc.n	8014db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d116      	bne.n	8014de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	699b      	ldr	r3, [r3, #24]
 8014dbe:	2204      	movs	r2, #4
 8014dc0:	4013      	ands	r3, r2
 8014dc2:	2b04      	cmp	r3, #4
 8014dc4:	d00f      	beq.n	8014de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014dca:	2220      	movs	r2, #32
 8014dcc:	431a      	orrs	r2, r3
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2241      	movs	r2, #65	@ 0x41
 8014dd6:	2120      	movs	r1, #32
 8014dd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2240      	movs	r2, #64	@ 0x40
 8014dde:	2100      	movs	r1, #0
 8014de0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014de2:	2301      	movs	r3, #1
 8014de4:	e007      	b.n	8014df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	699b      	ldr	r3, [r3, #24]
 8014dec:	2204      	movs	r2, #4
 8014dee:	4013      	ands	r3, r2
 8014df0:	2b04      	cmp	r3, #4
 8014df2:	d18c      	bne.n	8014d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014df4:	2300      	movs	r3, #0
}
 8014df6:	0018      	movs	r0, r3
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	b004      	add	sp, #16
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	46c0      	nop			@ (mov r8, r8)
 8014e00:	fe00e800 	.word	0xfe00e800

08014e04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b08a      	sub	sp, #40	@ 0x28
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	60b9      	str	r1, [r7, #8]
 8014e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014e10:	2327      	movs	r3, #39	@ 0x27
 8014e12:	18fb      	adds	r3, r7, r3
 8014e14:	2200      	movs	r2, #0
 8014e16:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	699b      	ldr	r3, [r3, #24]
 8014e1e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8014e20:	2300      	movs	r3, #0
 8014e22:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8014e28:	69bb      	ldr	r3, [r7, #24]
 8014e2a:	2210      	movs	r2, #16
 8014e2c:	4013      	ands	r3, r2
 8014e2e:	d100      	bne.n	8014e32 <I2C_IsErrorOccurred+0x2e>
 8014e30:	e079      	b.n	8014f26 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2210      	movs	r2, #16
 8014e38:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014e3a:	e057      	b.n	8014eec <I2C_IsErrorOccurred+0xe8>
 8014e3c:	2227      	movs	r2, #39	@ 0x27
 8014e3e:	18bb      	adds	r3, r7, r2
 8014e40:	18ba      	adds	r2, r7, r2
 8014e42:	7812      	ldrb	r2, [r2, #0]
 8014e44:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8014e46:	68bb      	ldr	r3, [r7, #8]
 8014e48:	3301      	adds	r3, #1
 8014e4a:	d04f      	beq.n	8014eec <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8014e4c:	f7fc f8c2 	bl	8010fd4 <HAL_GetTick>
 8014e50:	0002      	movs	r2, r0
 8014e52:	69fb      	ldr	r3, [r7, #28]
 8014e54:	1ad3      	subs	r3, r2, r3
 8014e56:	68ba      	ldr	r2, [r7, #8]
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d302      	bcc.n	8014e62 <I2C_IsErrorOccurred+0x5e>
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d144      	bne.n	8014eec <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	685a      	ldr	r2, [r3, #4]
 8014e68:	2380      	movs	r3, #128	@ 0x80
 8014e6a:	01db      	lsls	r3, r3, #7
 8014e6c:	4013      	ands	r3, r2
 8014e6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8014e70:	2013      	movs	r0, #19
 8014e72:	183b      	adds	r3, r7, r0
 8014e74:	68fa      	ldr	r2, [r7, #12]
 8014e76:	2142      	movs	r1, #66	@ 0x42
 8014e78:	5c52      	ldrb	r2, [r2, r1]
 8014e7a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	699a      	ldr	r2, [r3, #24]
 8014e82:	2380      	movs	r3, #128	@ 0x80
 8014e84:	021b      	lsls	r3, r3, #8
 8014e86:	401a      	ands	r2, r3
 8014e88:	2380      	movs	r3, #128	@ 0x80
 8014e8a:	021b      	lsls	r3, r3, #8
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d126      	bne.n	8014ede <I2C_IsErrorOccurred+0xda>
 8014e90:	697a      	ldr	r2, [r7, #20]
 8014e92:	2380      	movs	r3, #128	@ 0x80
 8014e94:	01db      	lsls	r3, r3, #7
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d021      	beq.n	8014ede <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8014e9a:	183b      	adds	r3, r7, r0
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	2b20      	cmp	r3, #32
 8014ea0:	d01d      	beq.n	8014ede <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	685a      	ldr	r2, [r3, #4]
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	2180      	movs	r1, #128	@ 0x80
 8014eae:	01c9      	lsls	r1, r1, #7
 8014eb0:	430a      	orrs	r2, r1
 8014eb2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8014eb4:	f7fc f88e 	bl	8010fd4 <HAL_GetTick>
 8014eb8:	0003      	movs	r3, r0
 8014eba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014ebc:	e00f      	b.n	8014ede <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8014ebe:	f7fc f889 	bl	8010fd4 <HAL_GetTick>
 8014ec2:	0002      	movs	r2, r0
 8014ec4:	69fb      	ldr	r3, [r7, #28]
 8014ec6:	1ad3      	subs	r3, r2, r3
 8014ec8:	2b19      	cmp	r3, #25
 8014eca:	d908      	bls.n	8014ede <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8014ecc:	6a3b      	ldr	r3, [r7, #32]
 8014ece:	2220      	movs	r2, #32
 8014ed0:	4313      	orrs	r3, r2
 8014ed2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8014ed4:	2327      	movs	r3, #39	@ 0x27
 8014ed6:	18fb      	adds	r3, r7, r3
 8014ed8:	2201      	movs	r2, #1
 8014eda:	701a      	strb	r2, [r3, #0]

              break;
 8014edc:	e006      	b.n	8014eec <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	699b      	ldr	r3, [r3, #24]
 8014ee4:	2220      	movs	r2, #32
 8014ee6:	4013      	ands	r3, r2
 8014ee8:	2b20      	cmp	r3, #32
 8014eea:	d1e8      	bne.n	8014ebe <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	699b      	ldr	r3, [r3, #24]
 8014ef2:	2220      	movs	r2, #32
 8014ef4:	4013      	ands	r3, r2
 8014ef6:	2b20      	cmp	r3, #32
 8014ef8:	d004      	beq.n	8014f04 <I2C_IsErrorOccurred+0x100>
 8014efa:	2327      	movs	r3, #39	@ 0x27
 8014efc:	18fb      	adds	r3, r7, r3
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d09b      	beq.n	8014e3c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8014f04:	2327      	movs	r3, #39	@ 0x27
 8014f06:	18fb      	adds	r3, r7, r3
 8014f08:	781b      	ldrb	r3, [r3, #0]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d103      	bne.n	8014f16 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2220      	movs	r2, #32
 8014f14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8014f16:	6a3b      	ldr	r3, [r7, #32]
 8014f18:	2204      	movs	r2, #4
 8014f1a:	4313      	orrs	r3, r2
 8014f1c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8014f1e:	2327      	movs	r3, #39	@ 0x27
 8014f20:	18fb      	adds	r3, r7, r3
 8014f22:	2201      	movs	r2, #1
 8014f24:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	699b      	ldr	r3, [r3, #24]
 8014f2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8014f2e:	69ba      	ldr	r2, [r7, #24]
 8014f30:	2380      	movs	r3, #128	@ 0x80
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	4013      	ands	r3, r2
 8014f36:	d00c      	beq.n	8014f52 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8014f38:	6a3b      	ldr	r3, [r7, #32]
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	4313      	orrs	r3, r2
 8014f3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2280      	movs	r2, #128	@ 0x80
 8014f46:	0052      	lsls	r2, r2, #1
 8014f48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014f4a:	2327      	movs	r3, #39	@ 0x27
 8014f4c:	18fb      	adds	r3, r7, r3
 8014f4e:	2201      	movs	r2, #1
 8014f50:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8014f52:	69ba      	ldr	r2, [r7, #24]
 8014f54:	2380      	movs	r3, #128	@ 0x80
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	4013      	ands	r3, r2
 8014f5a:	d00c      	beq.n	8014f76 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8014f5c:	6a3b      	ldr	r3, [r7, #32]
 8014f5e:	2208      	movs	r2, #8
 8014f60:	4313      	orrs	r3, r2
 8014f62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2280      	movs	r2, #128	@ 0x80
 8014f6a:	00d2      	lsls	r2, r2, #3
 8014f6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014f6e:	2327      	movs	r3, #39	@ 0x27
 8014f70:	18fb      	adds	r3, r7, r3
 8014f72:	2201      	movs	r2, #1
 8014f74:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8014f76:	69ba      	ldr	r2, [r7, #24]
 8014f78:	2380      	movs	r3, #128	@ 0x80
 8014f7a:	009b      	lsls	r3, r3, #2
 8014f7c:	4013      	ands	r3, r2
 8014f7e:	d00c      	beq.n	8014f9a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8014f80:	6a3b      	ldr	r3, [r7, #32]
 8014f82:	2202      	movs	r2, #2
 8014f84:	4313      	orrs	r3, r2
 8014f86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	2280      	movs	r2, #128	@ 0x80
 8014f8e:	0092      	lsls	r2, r2, #2
 8014f90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014f92:	2327      	movs	r3, #39	@ 0x27
 8014f94:	18fb      	adds	r3, r7, r3
 8014f96:	2201      	movs	r2, #1
 8014f98:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8014f9a:	2327      	movs	r3, #39	@ 0x27
 8014f9c:	18fb      	adds	r3, r7, r3
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d01d      	beq.n	8014fe0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	0018      	movs	r0, r3
 8014fa8:	f7ff fcd7 	bl	801495a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	685a      	ldr	r2, [r3, #4]
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	490e      	ldr	r1, [pc, #56]	@ (8014ff0 <I2C_IsErrorOccurred+0x1ec>)
 8014fb8:	400a      	ands	r2, r1
 8014fba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014fc0:	6a3b      	ldr	r3, [r7, #32]
 8014fc2:	431a      	orrs	r2, r3
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2241      	movs	r2, #65	@ 0x41
 8014fcc:	2120      	movs	r1, #32
 8014fce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	2242      	movs	r2, #66	@ 0x42
 8014fd4:	2100      	movs	r1, #0
 8014fd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2240      	movs	r2, #64	@ 0x40
 8014fdc:	2100      	movs	r1, #0
 8014fde:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8014fe0:	2327      	movs	r3, #39	@ 0x27
 8014fe2:	18fb      	adds	r3, r7, r3
 8014fe4:	781b      	ldrb	r3, [r3, #0]
}
 8014fe6:	0018      	movs	r0, r3
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	b00a      	add	sp, #40	@ 0x28
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	46c0      	nop			@ (mov r8, r8)
 8014ff0:	fe00e800 	.word	0xfe00e800

08014ff4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8014ff4:	b590      	push	{r4, r7, lr}
 8014ff6:	b087      	sub	sp, #28
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	0008      	movs	r0, r1
 8014ffe:	0011      	movs	r1, r2
 8015000:	607b      	str	r3, [r7, #4]
 8015002:	240a      	movs	r4, #10
 8015004:	193b      	adds	r3, r7, r4
 8015006:	1c02      	adds	r2, r0, #0
 8015008:	801a      	strh	r2, [r3, #0]
 801500a:	2009      	movs	r0, #9
 801500c:	183b      	adds	r3, r7, r0
 801500e:	1c0a      	adds	r2, r1, #0
 8015010:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015012:	193b      	adds	r3, r7, r4
 8015014:	881b      	ldrh	r3, [r3, #0]
 8015016:	059b      	lsls	r3, r3, #22
 8015018:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801501a:	183b      	adds	r3, r7, r0
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	0419      	lsls	r1, r3, #16
 8015020:	23ff      	movs	r3, #255	@ 0xff
 8015022:	041b      	lsls	r3, r3, #16
 8015024:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015026:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801502e:	4313      	orrs	r3, r2
 8015030:	005b      	lsls	r3, r3, #1
 8015032:	085b      	lsrs	r3, r3, #1
 8015034:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801503e:	0d51      	lsrs	r1, r2, #21
 8015040:	2280      	movs	r2, #128	@ 0x80
 8015042:	00d2      	lsls	r2, r2, #3
 8015044:	400a      	ands	r2, r1
 8015046:	4907      	ldr	r1, [pc, #28]	@ (8015064 <I2C_TransferConfig+0x70>)
 8015048:	430a      	orrs	r2, r1
 801504a:	43d2      	mvns	r2, r2
 801504c:	401a      	ands	r2, r3
 801504e:	0011      	movs	r1, r2
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	697a      	ldr	r2, [r7, #20]
 8015056:	430a      	orrs	r2, r1
 8015058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801505a:	46c0      	nop			@ (mov r8, r8)
 801505c:	46bd      	mov	sp, r7
 801505e:	b007      	add	sp, #28
 8015060:	bd90      	pop	{r4, r7, pc}
 8015062:	46c0      	nop			@ (mov r8, r8)
 8015064:	03ff63ff 	.word	0x03ff63ff

08015068 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	000a      	movs	r2, r1
 8015072:	1cbb      	adds	r3, r7, #2
 8015074:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8015076:	2300      	movs	r3, #0
 8015078:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801507e:	4b3e      	ldr	r3, [pc, #248]	@ (8015178 <I2C_Enable_IRQ+0x110>)
 8015080:	429a      	cmp	r2, r3
 8015082:	d035      	beq.n	80150f0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8015088:	4b3c      	ldr	r3, [pc, #240]	@ (801517c <I2C_Enable_IRQ+0x114>)
 801508a:	429a      	cmp	r2, r3
 801508c:	d030      	beq.n	80150f0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8015092:	4b3b      	ldr	r3, [pc, #236]	@ (8015180 <I2C_Enable_IRQ+0x118>)
 8015094:	429a      	cmp	r2, r3
 8015096:	d02b      	beq.n	80150f0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8015098:	1cbb      	adds	r3, r7, #2
 801509a:	2200      	movs	r2, #0
 801509c:	5e9b      	ldrsh	r3, [r3, r2]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	da03      	bge.n	80150aa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	22b8      	movs	r2, #184	@ 0xb8
 80150a6:	4313      	orrs	r3, r2
 80150a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80150aa:	1cbb      	adds	r3, r7, #2
 80150ac:	881b      	ldrh	r3, [r3, #0]
 80150ae:	2201      	movs	r2, #1
 80150b0:	4013      	ands	r3, r2
 80150b2:	d003      	beq.n	80150bc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	22f2      	movs	r2, #242	@ 0xf2
 80150b8:	4313      	orrs	r3, r2
 80150ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80150bc:	1cbb      	adds	r3, r7, #2
 80150be:	881b      	ldrh	r3, [r3, #0]
 80150c0:	2202      	movs	r2, #2
 80150c2:	4013      	ands	r3, r2
 80150c4:	d003      	beq.n	80150ce <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	22f4      	movs	r2, #244	@ 0xf4
 80150ca:	4313      	orrs	r3, r2
 80150cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80150ce:	1cbb      	adds	r3, r7, #2
 80150d0:	881b      	ldrh	r3, [r3, #0]
 80150d2:	2b10      	cmp	r3, #16
 80150d4:	d103      	bne.n	80150de <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	2290      	movs	r2, #144	@ 0x90
 80150da:	4313      	orrs	r3, r2
 80150dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80150de:	1cbb      	adds	r3, r7, #2
 80150e0:	881b      	ldrh	r3, [r3, #0]
 80150e2:	2b20      	cmp	r3, #32
 80150e4:	d13c      	bne.n	8015160 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	2220      	movs	r2, #32
 80150ea:	4313      	orrs	r3, r2
 80150ec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80150ee:	e037      	b.n	8015160 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80150f0:	1cbb      	adds	r3, r7, #2
 80150f2:	2200      	movs	r2, #0
 80150f4:	5e9b      	ldrsh	r3, [r3, r2]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	da03      	bge.n	8015102 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	22b8      	movs	r2, #184	@ 0xb8
 80150fe:	4313      	orrs	r3, r2
 8015100:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8015102:	1cbb      	adds	r3, r7, #2
 8015104:	881b      	ldrh	r3, [r3, #0]
 8015106:	2201      	movs	r2, #1
 8015108:	4013      	ands	r3, r2
 801510a:	d003      	beq.n	8015114 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	22f2      	movs	r2, #242	@ 0xf2
 8015110:	4313      	orrs	r3, r2
 8015112:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8015114:	1cbb      	adds	r3, r7, #2
 8015116:	881b      	ldrh	r3, [r3, #0]
 8015118:	2202      	movs	r2, #2
 801511a:	4013      	ands	r3, r2
 801511c:	d003      	beq.n	8015126 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	22f4      	movs	r2, #244	@ 0xf4
 8015122:	4313      	orrs	r3, r2
 8015124:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8015126:	1cbb      	adds	r3, r7, #2
 8015128:	881b      	ldrh	r3, [r3, #0]
 801512a:	2b10      	cmp	r3, #16
 801512c:	d103      	bne.n	8015136 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2290      	movs	r2, #144	@ 0x90
 8015132:	4313      	orrs	r3, r2
 8015134:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015136:	1cbb      	adds	r3, r7, #2
 8015138:	881b      	ldrh	r3, [r3, #0]
 801513a:	2b20      	cmp	r3, #32
 801513c:	d103      	bne.n	8015146 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	2260      	movs	r2, #96	@ 0x60
 8015142:	4313      	orrs	r3, r2
 8015144:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801514a:	4b0d      	ldr	r3, [pc, #52]	@ (8015180 <I2C_Enable_IRQ+0x118>)
 801514c:	429a      	cmp	r2, r3
 801514e:	d007      	beq.n	8015160 <I2C_Enable_IRQ+0xf8>
 8015150:	1cbb      	adds	r3, r7, #2
 8015152:	881b      	ldrh	r3, [r3, #0]
 8015154:	2b40      	cmp	r3, #64	@ 0x40
 8015156:	d103      	bne.n	8015160 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2240      	movs	r2, #64	@ 0x40
 801515c:	4313      	orrs	r3, r2
 801515e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	6819      	ldr	r1, [r3, #0]
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	68fa      	ldr	r2, [r7, #12]
 801516c:	430a      	orrs	r2, r1
 801516e:	601a      	str	r2, [r3, #0]
}
 8015170:	46c0      	nop			@ (mov r8, r8)
 8015172:	46bd      	mov	sp, r7
 8015174:	b004      	add	sp, #16
 8015176:	bd80      	pop	{r7, pc}
 8015178:	08013925 	.word	0x08013925
 801517c:	08013d55 	.word	0x08013d55
 8015180:	08013b1d 	.word	0x08013b1d

08015184 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b084      	sub	sp, #16
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	000a      	movs	r2, r1
 801518e:	1cbb      	adds	r3, r7, #2
 8015190:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8015192:	2300      	movs	r3, #0
 8015194:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8015196:	1cbb      	adds	r3, r7, #2
 8015198:	881b      	ldrh	r3, [r3, #0]
 801519a:	2201      	movs	r2, #1
 801519c:	4013      	ands	r3, r2
 801519e:	d010      	beq.n	80151c2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2242      	movs	r2, #66	@ 0x42
 80151a4:	4313      	orrs	r3, r2
 80151a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2241      	movs	r2, #65	@ 0x41
 80151ac:	5c9b      	ldrb	r3, [r3, r2]
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	001a      	movs	r2, r3
 80151b2:	2328      	movs	r3, #40	@ 0x28
 80151b4:	4013      	ands	r3, r2
 80151b6:	2b28      	cmp	r3, #40	@ 0x28
 80151b8:	d003      	beq.n	80151c2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	22b0      	movs	r2, #176	@ 0xb0
 80151be:	4313      	orrs	r3, r2
 80151c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80151c2:	1cbb      	adds	r3, r7, #2
 80151c4:	881b      	ldrh	r3, [r3, #0]
 80151c6:	2202      	movs	r2, #2
 80151c8:	4013      	ands	r3, r2
 80151ca:	d010      	beq.n	80151ee <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2244      	movs	r2, #68	@ 0x44
 80151d0:	4313      	orrs	r3, r2
 80151d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2241      	movs	r2, #65	@ 0x41
 80151d8:	5c9b      	ldrb	r3, [r3, r2]
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	001a      	movs	r2, r3
 80151de:	2328      	movs	r3, #40	@ 0x28
 80151e0:	4013      	ands	r3, r2
 80151e2:	2b28      	cmp	r3, #40	@ 0x28
 80151e4:	d003      	beq.n	80151ee <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	22b0      	movs	r2, #176	@ 0xb0
 80151ea:	4313      	orrs	r3, r2
 80151ec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80151ee:	1cbb      	adds	r3, r7, #2
 80151f0:	2200      	movs	r2, #0
 80151f2:	5e9b      	ldrsh	r3, [r3, r2]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	da03      	bge.n	8015200 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	22b8      	movs	r2, #184	@ 0xb8
 80151fc:	4313      	orrs	r3, r2
 80151fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8015200:	1cbb      	adds	r3, r7, #2
 8015202:	881b      	ldrh	r3, [r3, #0]
 8015204:	2b10      	cmp	r3, #16
 8015206:	d103      	bne.n	8015210 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	2290      	movs	r2, #144	@ 0x90
 801520c:	4313      	orrs	r3, r2
 801520e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015210:	1cbb      	adds	r3, r7, #2
 8015212:	881b      	ldrh	r3, [r3, #0]
 8015214:	2b20      	cmp	r3, #32
 8015216:	d103      	bne.n	8015220 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2220      	movs	r2, #32
 801521c:	4313      	orrs	r3, r2
 801521e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8015220:	1cbb      	adds	r3, r7, #2
 8015222:	881b      	ldrh	r3, [r3, #0]
 8015224:	2b40      	cmp	r3, #64	@ 0x40
 8015226:	d103      	bne.n	8015230 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2240      	movs	r2, #64	@ 0x40
 801522c:	4313      	orrs	r3, r2
 801522e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	681a      	ldr	r2, [r3, #0]
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	43d9      	mvns	r1, r3
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	400a      	ands	r2, r1
 8015240:	601a      	str	r2, [r3, #0]
}
 8015242:	46c0      	nop			@ (mov r8, r8)
 8015244:	46bd      	mov	sp, r7
 8015246:	b004      	add	sp, #16
 8015248:	bd80      	pop	{r7, pc}
	...

0801524c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2241      	movs	r2, #65	@ 0x41
 801525a:	5c9b      	ldrb	r3, [r3, r2]
 801525c:	b2db      	uxtb	r3, r3
 801525e:	2b20      	cmp	r3, #32
 8015260:	d138      	bne.n	80152d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2240      	movs	r2, #64	@ 0x40
 8015266:	5c9b      	ldrb	r3, [r3, r2]
 8015268:	2b01      	cmp	r3, #1
 801526a:	d101      	bne.n	8015270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801526c:	2302      	movs	r3, #2
 801526e:	e032      	b.n	80152d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2240      	movs	r2, #64	@ 0x40
 8015274:	2101      	movs	r1, #1
 8015276:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2241      	movs	r2, #65	@ 0x41
 801527c:	2124      	movs	r1, #36	@ 0x24
 801527e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	2101      	movs	r1, #1
 801528c:	438a      	bics	r2, r1
 801528e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	4911      	ldr	r1, [pc, #68]	@ (80152e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 801529c:	400a      	ands	r2, r1
 801529e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	6819      	ldr	r1, [r3, #0]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	683a      	ldr	r2, [r7, #0]
 80152ac:	430a      	orrs	r2, r1
 80152ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	2101      	movs	r1, #1
 80152bc:	430a      	orrs	r2, r1
 80152be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2241      	movs	r2, #65	@ 0x41
 80152c4:	2120      	movs	r1, #32
 80152c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2240      	movs	r2, #64	@ 0x40
 80152cc:	2100      	movs	r1, #0
 80152ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80152d0:	2300      	movs	r3, #0
 80152d2:	e000      	b.n	80152d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80152d4:	2302      	movs	r3, #2
  }
}
 80152d6:	0018      	movs	r0, r3
 80152d8:	46bd      	mov	sp, r7
 80152da:	b002      	add	sp, #8
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	46c0      	nop			@ (mov r8, r8)
 80152e0:	ffffefff 	.word	0xffffefff

080152e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b084      	sub	sp, #16
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	2241      	movs	r2, #65	@ 0x41
 80152f2:	5c9b      	ldrb	r3, [r3, r2]
 80152f4:	b2db      	uxtb	r3, r3
 80152f6:	2b20      	cmp	r3, #32
 80152f8:	d139      	bne.n	801536e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	2240      	movs	r2, #64	@ 0x40
 80152fe:	5c9b      	ldrb	r3, [r3, r2]
 8015300:	2b01      	cmp	r3, #1
 8015302:	d101      	bne.n	8015308 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8015304:	2302      	movs	r3, #2
 8015306:	e033      	b.n	8015370 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2240      	movs	r2, #64	@ 0x40
 801530c:	2101      	movs	r1, #1
 801530e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2241      	movs	r2, #65	@ 0x41
 8015314:	2124      	movs	r1, #36	@ 0x24
 8015316:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	681a      	ldr	r2, [r3, #0]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2101      	movs	r1, #1
 8015324:	438a      	bics	r2, r1
 8015326:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	4a11      	ldr	r2, [pc, #68]	@ (8015378 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8015334:	4013      	ands	r3, r2
 8015336:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	021b      	lsls	r3, r3, #8
 801533c:	68fa      	ldr	r2, [r7, #12]
 801533e:	4313      	orrs	r3, r2
 8015340:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	68fa      	ldr	r2, [r7, #12]
 8015348:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	2101      	movs	r1, #1
 8015356:	430a      	orrs	r2, r1
 8015358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	2241      	movs	r2, #65	@ 0x41
 801535e:	2120      	movs	r1, #32
 8015360:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2240      	movs	r2, #64	@ 0x40
 8015366:	2100      	movs	r1, #0
 8015368:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801536a:	2300      	movs	r3, #0
 801536c:	e000      	b.n	8015370 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801536e:	2302      	movs	r3, #2
  }
}
 8015370:	0018      	movs	r0, r3
 8015372:	46bd      	mov	sp, r7
 8015374:	b004      	add	sp, #16
 8015376:	bd80      	pop	{r7, pc}
 8015378:	fffff0ff 	.word	0xfffff0ff

0801537c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b088      	sub	sp, #32
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d101      	bne.n	801538e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801538a:	2301      	movs	r3, #1
 801538c:	e0e1      	b.n	8015552 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	2235      	movs	r2, #53	@ 0x35
 8015392:	5c9b      	ldrb	r3, [r3, r2]
 8015394:	b2db      	uxtb	r3, r3
 8015396:	2b00      	cmp	r3, #0
 8015398:	d107      	bne.n	80153aa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	2234      	movs	r2, #52	@ 0x34
 801539e:	2100      	movs	r1, #0
 80153a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	0018      	movs	r0, r3
 80153a6:	f7f4 fb3d 	bl	8009a24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2235      	movs	r2, #53	@ 0x35
 80153ae:	2102      	movs	r1, #2
 80153b0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	69da      	ldr	r2, [r3, #28]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	4967      	ldr	r1, [pc, #412]	@ (801555c <HAL_I2S_Init+0x1e0>)
 80153be:	400a      	ands	r2, r1
 80153c0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	2202      	movs	r2, #2
 80153c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	695b      	ldr	r3, [r3, #20]
 80153ce:	2b02      	cmp	r3, #2
 80153d0:	d073      	beq.n	80154ba <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	68db      	ldr	r3, [r3, #12]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d102      	bne.n	80153e0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80153da:	2310      	movs	r3, #16
 80153dc:	617b      	str	r3, [r7, #20]
 80153de:	e001      	b.n	80153e4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80153e0:	2320      	movs	r3, #32
 80153e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	689b      	ldr	r3, [r3, #8]
 80153e8:	2b20      	cmp	r3, #32
 80153ea:	d802      	bhi.n	80153f2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	005b      	lsls	r3, r3, #1
 80153f0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80153f2:	f002 fed3 	bl	801819c <HAL_RCC_GetSysClockFreq>
 80153f6:	0003      	movs	r3, r0
 80153f8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	691a      	ldr	r2, [r3, #16]
 80153fe:	2380      	movs	r3, #128	@ 0x80
 8015400:	009b      	lsls	r3, r3, #2
 8015402:	429a      	cmp	r2, r3
 8015404:	d131      	bne.n	801546a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	68db      	ldr	r3, [r3, #12]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d016      	beq.n	801543c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	009b      	lsls	r3, r3, #2
 8015412:	0019      	movs	r1, r3
 8015414:	68f8      	ldr	r0, [r7, #12]
 8015416:	f7ea fec5 	bl	80001a4 <__udivsi3>
 801541a:	0003      	movs	r3, r0
 801541c:	001a      	movs	r2, r3
 801541e:	0013      	movs	r3, r2
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	189b      	adds	r3, r3, r2
 8015424:	005b      	lsls	r3, r3, #1
 8015426:	001a      	movs	r2, r3
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	695b      	ldr	r3, [r3, #20]
 801542c:	0019      	movs	r1, r3
 801542e:	0010      	movs	r0, r2
 8015430:	f7ea feb8 	bl	80001a4 <__udivsi3>
 8015434:	0003      	movs	r3, r0
 8015436:	3305      	adds	r3, #5
 8015438:	613b      	str	r3, [r7, #16]
 801543a:	e02a      	b.n	8015492 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	00db      	lsls	r3, r3, #3
 8015440:	0019      	movs	r1, r3
 8015442:	68f8      	ldr	r0, [r7, #12]
 8015444:	f7ea feae 	bl	80001a4 <__udivsi3>
 8015448:	0003      	movs	r3, r0
 801544a:	001a      	movs	r2, r3
 801544c:	0013      	movs	r3, r2
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	189b      	adds	r3, r3, r2
 8015452:	005b      	lsls	r3, r3, #1
 8015454:	001a      	movs	r2, r3
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	695b      	ldr	r3, [r3, #20]
 801545a:	0019      	movs	r1, r3
 801545c:	0010      	movs	r0, r2
 801545e:	f7ea fea1 	bl	80001a4 <__udivsi3>
 8015462:	0003      	movs	r3, r0
 8015464:	3305      	adds	r3, #5
 8015466:	613b      	str	r3, [r7, #16]
 8015468:	e013      	b.n	8015492 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801546a:	6979      	ldr	r1, [r7, #20]
 801546c:	68f8      	ldr	r0, [r7, #12]
 801546e:	f7ea fe99 	bl	80001a4 <__udivsi3>
 8015472:	0003      	movs	r3, r0
 8015474:	001a      	movs	r2, r3
 8015476:	0013      	movs	r3, r2
 8015478:	009b      	lsls	r3, r3, #2
 801547a:	189b      	adds	r3, r3, r2
 801547c:	005b      	lsls	r3, r3, #1
 801547e:	001a      	movs	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	695b      	ldr	r3, [r3, #20]
 8015484:	0019      	movs	r1, r3
 8015486:	0010      	movs	r0, r2
 8015488:	f7ea fe8c 	bl	80001a4 <__udivsi3>
 801548c:	0003      	movs	r3, r0
 801548e:	3305      	adds	r3, #5
 8015490:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	210a      	movs	r1, #10
 8015496:	0018      	movs	r0, r3
 8015498:	f7ea fe84 	bl	80001a4 <__udivsi3>
 801549c:	0003      	movs	r3, r0
 801549e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	2201      	movs	r2, #1
 80154a4:	4013      	ands	r3, r2
 80154a6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80154a8:	693a      	ldr	r2, [r7, #16]
 80154aa:	69bb      	ldr	r3, [r7, #24]
 80154ac:	1ad3      	subs	r3, r2, r3
 80154ae:	085b      	lsrs	r3, r3, #1
 80154b0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80154b2:	69bb      	ldr	r3, [r7, #24]
 80154b4:	021b      	lsls	r3, r3, #8
 80154b6:	61bb      	str	r3, [r7, #24]
 80154b8:	e003      	b.n	80154c2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80154ba:	2302      	movs	r3, #2
 80154bc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80154be:	2300      	movs	r3, #0
 80154c0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	2b01      	cmp	r3, #1
 80154c6:	d902      	bls.n	80154ce <HAL_I2S_Init+0x152>
 80154c8:	69fb      	ldr	r3, [r7, #28]
 80154ca:	2bff      	cmp	r3, #255	@ 0xff
 80154cc:	d907      	bls.n	80154de <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154d2:	2210      	movs	r2, #16
 80154d4:	431a      	orrs	r2, r3
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80154da:	2301      	movs	r3, #1
 80154dc:	e039      	b.n	8015552 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	691a      	ldr	r2, [r3, #16]
 80154e2:	69bb      	ldr	r3, [r7, #24]
 80154e4:	431a      	orrs	r2, r3
 80154e6:	0011      	movs	r1, r2
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	69fa      	ldr	r2, [r7, #28]
 80154ee:	430a      	orrs	r2, r1
 80154f0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	69db      	ldr	r3, [r3, #28]
 80154f8:	4a18      	ldr	r2, [pc, #96]	@ (801555c <HAL_I2S_Init+0x1e0>)
 80154fa:	401a      	ands	r2, r3
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6859      	ldr	r1, [r3, #4]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	689b      	ldr	r3, [r3, #8]
 8015504:	4319      	orrs	r1, r3
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	68db      	ldr	r3, [r3, #12]
 801550a:	4319      	orrs	r1, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	699b      	ldr	r3, [r3, #24]
 8015510:	430b      	orrs	r3, r1
 8015512:	431a      	orrs	r2, r3
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	2180      	movs	r1, #128	@ 0x80
 801551a:	0109      	lsls	r1, r1, #4
 801551c:	430a      	orrs	r2, r1
 801551e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	689b      	ldr	r3, [r3, #8]
 8015524:	2b30      	cmp	r3, #48	@ 0x30
 8015526:	d003      	beq.n	8015530 <HAL_I2S_Init+0x1b4>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	689b      	ldr	r3, [r3, #8]
 801552c:	2bb0      	cmp	r3, #176	@ 0xb0
 801552e:	d108      	bne.n	8015542 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	69da      	ldr	r2, [r3, #28]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	2180      	movs	r1, #128	@ 0x80
 801553c:	0149      	lsls	r1, r1, #5
 801553e:	430a      	orrs	r2, r1
 8015540:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2200      	movs	r2, #0
 8015546:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2235      	movs	r2, #53	@ 0x35
 801554c:	2101      	movs	r1, #1
 801554e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015550:	2300      	movs	r3, #0
}
 8015552:	0018      	movs	r0, r3
 8015554:	46bd      	mov	sp, r7
 8015556:	b008      	add	sp, #32
 8015558:	bd80      	pop	{r7, pc}
 801555a:	46c0      	nop			@ (mov r8, r8)
 801555c:	fffff040 	.word	0xfffff040

08015560 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b086      	sub	sp, #24
 8015564:	af00      	add	r7, sp, #0
 8015566:	60f8      	str	r0, [r7, #12]
 8015568:	60b9      	str	r1, [r7, #8]
 801556a:	1dbb      	adds	r3, r7, #6
 801556c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d003      	beq.n	801557c <HAL_I2S_Receive_DMA+0x1c>
 8015574:	1dbb      	adds	r3, r7, #6
 8015576:	881b      	ldrh	r3, [r3, #0]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d101      	bne.n	8015580 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 801557c:	2301      	movs	r3, #1
 801557e:	e0a6      	b.n	80156ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2234      	movs	r2, #52	@ 0x34
 8015584:	5c9b      	ldrb	r3, [r3, r2]
 8015586:	b2db      	uxtb	r3, r3
 8015588:	2b01      	cmp	r3, #1
 801558a:	d101      	bne.n	8015590 <HAL_I2S_Receive_DMA+0x30>
 801558c:	2302      	movs	r3, #2
 801558e:	e09e      	b.n	80156ce <HAL_I2S_Receive_DMA+0x16e>
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	2234      	movs	r2, #52	@ 0x34
 8015594:	2101      	movs	r1, #1
 8015596:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	2235      	movs	r2, #53	@ 0x35
 801559c:	5c9b      	ldrb	r3, [r3, r2]
 801559e:	b2db      	uxtb	r3, r3
 80155a0:	2b01      	cmp	r3, #1
 80155a2:	d005      	beq.n	80155b0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2234      	movs	r2, #52	@ 0x34
 80155a8:	2100      	movs	r1, #0
 80155aa:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80155ac:	2302      	movs	r3, #2
 80155ae:	e08e      	b.n	80156ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2235      	movs	r2, #53	@ 0x35
 80155b4:	2104      	movs	r1, #4
 80155b6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	2200      	movs	r2, #0
 80155bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	68ba      	ldr	r2, [r7, #8]
 80155c2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	69db      	ldr	r3, [r3, #28]
 80155ca:	2207      	movs	r2, #7
 80155cc:	4013      	ands	r3, r2
 80155ce:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	2b03      	cmp	r3, #3
 80155d4:	d002      	beq.n	80155dc <HAL_I2S_Receive_DMA+0x7c>
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	2b05      	cmp	r3, #5
 80155da:	d10c      	bne.n	80155f6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80155dc:	1dbb      	adds	r3, r7, #6
 80155de:	881b      	ldrh	r3, [r3, #0]
 80155e0:	18db      	adds	r3, r3, r3
 80155e2:	b29a      	uxth	r2, r3
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80155e8:	1dbb      	adds	r3, r7, #6
 80155ea:	881b      	ldrh	r3, [r3, #0]
 80155ec:	18db      	adds	r3, r3, r3
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80155f4:	e007      	b.n	8015606 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	1dba      	adds	r2, r7, #6
 80155fa:	8812      	ldrh	r2, [r2, #0]
 80155fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	1dba      	adds	r2, r7, #6
 8015602:	8812      	ldrh	r2, [r2, #0]
 8015604:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801560a:	4a33      	ldr	r2, [pc, #204]	@ (80156d8 <HAL_I2S_Receive_DMA+0x178>)
 801560c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015612:	4a32      	ldr	r2, [pc, #200]	@ (80156dc <HAL_I2S_Receive_DMA+0x17c>)
 8015614:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801561a:	4a31      	ldr	r2, [pc, #196]	@ (80156e0 <HAL_I2S_Receive_DMA+0x180>)
 801561c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	69da      	ldr	r2, [r3, #28]
 8015624:	23c0      	movs	r3, #192	@ 0xc0
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	401a      	ands	r2, r3
 801562a:	23c0      	movs	r3, #192	@ 0xc0
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	429a      	cmp	r2, r3
 8015630:	d10a      	bne.n	8015648 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8015632:	2300      	movs	r3, #0
 8015634:	613b      	str	r3, [r7, #16]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	68db      	ldr	r3, [r3, #12]
 801563c:	613b      	str	r3, [r7, #16]
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	689b      	ldr	r3, [r3, #8]
 8015644:	613b      	str	r3, [r7, #16]
 8015646:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	330c      	adds	r3, #12
 8015652:	0019      	movs	r1, r3
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015658:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801565e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8015660:	f7fc fa0a 	bl	8011a78 <HAL_DMA_Start_IT>
 8015664:	1e03      	subs	r3, r0, #0
 8015666:	d00f      	beq.n	8015688 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801566c:	2208      	movs	r2, #8
 801566e:	431a      	orrs	r2, r3
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2235      	movs	r2, #53	@ 0x35
 8015678:	2101      	movs	r1, #1
 801567a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2234      	movs	r2, #52	@ 0x34
 8015680:	2100      	movs	r1, #0
 8015682:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8015684:	2301      	movs	r3, #1
 8015686:	e022      	b.n	80156ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	69da      	ldr	r2, [r3, #28]
 801568e:	2380      	movs	r3, #128	@ 0x80
 8015690:	00db      	lsls	r3, r3, #3
 8015692:	4013      	ands	r3, r2
 8015694:	d108      	bne.n	80156a8 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	69da      	ldr	r2, [r3, #28]
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	2180      	movs	r1, #128	@ 0x80
 80156a2:	00c9      	lsls	r1, r1, #3
 80156a4:	430a      	orrs	r2, r1
 80156a6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	685b      	ldr	r3, [r3, #4]
 80156ae:	2201      	movs	r2, #1
 80156b0:	4013      	ands	r3, r2
 80156b2:	d107      	bne.n	80156c4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	685a      	ldr	r2, [r3, #4]
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	2101      	movs	r1, #1
 80156c0:	430a      	orrs	r2, r1
 80156c2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2234      	movs	r2, #52	@ 0x34
 80156c8:	2100      	movs	r1, #0
 80156ca:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80156cc:	2300      	movs	r3, #0
}
 80156ce:	0018      	movs	r0, r3
 80156d0:	46bd      	mov	sp, r7
 80156d2:	b006      	add	sp, #24
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	46c0      	nop			@ (mov r8, r8)
 80156d8:	080158c1 	.word	0x080158c1
 80156dc:	0801587d 	.word	0x0801587d
 80156e0:	080158df 	.word	0x080158df

080156e4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b086      	sub	sp, #24
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80156ec:	2317      	movs	r3, #23
 80156ee:	18fb      	adds	r3, r7, r3
 80156f0:	2200      	movs	r2, #0
 80156f2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	685a      	ldr	r2, [r3, #4]
 80156f8:	2380      	movs	r3, #128	@ 0x80
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d003      	beq.n	8015708 <HAL_I2S_DMAStop+0x24>
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	685b      	ldr	r3, [r3, #4]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d158      	bne.n	80157ba <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801570c:	2b00      	cmp	r3, #0
 801570e:	d010      	beq.n	8015732 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015714:	0018      	movs	r0, r3
 8015716:	f7fc fa15 	bl	8011b44 <HAL_DMA_Abort>
 801571a:	1e03      	subs	r3, r0, #0
 801571c:	d009      	beq.n	8015732 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015722:	2208      	movs	r2, #8
 8015724:	431a      	orrs	r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801572a:	2317      	movs	r3, #23
 801572c:	18fb      	adds	r3, r7, r3
 801572e:	2201      	movs	r2, #1
 8015730:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	2364      	movs	r3, #100	@ 0x64
 8015736:	2201      	movs	r2, #1
 8015738:	2102      	movs	r1, #2
 801573a:	f000 f8f7 	bl	801592c <I2S_WaitFlagStateUntilTimeout>
 801573e:	1e03      	subs	r3, r0, #0
 8015740:	d00d      	beq.n	801575e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015746:	2201      	movs	r2, #1
 8015748:	431a      	orrs	r2, r3
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2235      	movs	r2, #53	@ 0x35
 8015752:	2101      	movs	r1, #1
 8015754:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8015756:	2317      	movs	r3, #23
 8015758:	18fb      	adds	r3, r7, r3
 801575a:	2201      	movs	r2, #1
 801575c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	2364      	movs	r3, #100	@ 0x64
 8015762:	2200      	movs	r2, #0
 8015764:	2180      	movs	r1, #128	@ 0x80
 8015766:	f000 f8e1 	bl	801592c <I2S_WaitFlagStateUntilTimeout>
 801576a:	1e03      	subs	r3, r0, #0
 801576c:	d00d      	beq.n	801578a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015772:	2201      	movs	r2, #1
 8015774:	431a      	orrs	r2, r3
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2235      	movs	r2, #53	@ 0x35
 801577e:	2101      	movs	r1, #1
 8015780:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8015782:	2317      	movs	r3, #23
 8015784:	18fb      	adds	r3, r7, r3
 8015786:	2201      	movs	r2, #1
 8015788:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	69da      	ldr	r2, [r3, #28]
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4938      	ldr	r1, [pc, #224]	@ (8015878 <HAL_I2S_DMAStop+0x194>)
 8015796:	400a      	ands	r2, r1
 8015798:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801579a:	2300      	movs	r3, #0
 801579c:	613b      	str	r3, [r7, #16]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	613b      	str	r3, [r7, #16]
 80157a6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	685a      	ldr	r2, [r3, #4]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2102      	movs	r1, #2
 80157b4:	438a      	bics	r2, r1
 80157b6:	605a      	str	r2, [r3, #4]
 80157b8:	e053      	b.n	8015862 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	685a      	ldr	r2, [r3, #4]
 80157be:	23c0      	movs	r3, #192	@ 0xc0
 80157c0:	009b      	lsls	r3, r3, #2
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d005      	beq.n	80157d2 <HAL_I2S_DMAStop+0xee>
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	685a      	ldr	r2, [r3, #4]
 80157ca:	2380      	movs	r3, #128	@ 0x80
 80157cc:	005b      	lsls	r3, r3, #1
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d147      	bne.n	8015862 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d010      	beq.n	80157fc <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157de:	0018      	movs	r0, r3
 80157e0:	f7fc f9b0 	bl	8011b44 <HAL_DMA_Abort>
 80157e4:	1e03      	subs	r3, r0, #0
 80157e6:	d009      	beq.n	80157fc <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157ec:	2208      	movs	r2, #8
 80157ee:	431a      	orrs	r2, r3
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80157f4:	2317      	movs	r3, #23
 80157f6:	18fb      	adds	r3, r7, r3
 80157f8:	2201      	movs	r2, #1
 80157fa:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	69da      	ldr	r2, [r3, #28]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	491c      	ldr	r1, [pc, #112]	@ (8015878 <HAL_I2S_DMAStop+0x194>)
 8015808:	400a      	ands	r2, r1
 801580a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801580c:	2300      	movs	r3, #0
 801580e:	60fb      	str	r3, [r7, #12]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	60fb      	str	r3, [r7, #12]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	689b      	ldr	r3, [r3, #8]
 801581e:	60fb      	str	r3, [r7, #12]
 8015820:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	685a      	ldr	r2, [r3, #4]
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	2101      	movs	r1, #1
 801582e:	438a      	bics	r2, r1
 8015830:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	685a      	ldr	r2, [r3, #4]
 8015836:	2380      	movs	r3, #128	@ 0x80
 8015838:	005b      	lsls	r3, r3, #1
 801583a:	429a      	cmp	r2, r3
 801583c:	d10e      	bne.n	801585c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015842:	2240      	movs	r2, #64	@ 0x40
 8015844:	431a      	orrs	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2235      	movs	r2, #53	@ 0x35
 801584e:	2101      	movs	r1, #1
 8015850:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8015852:	2317      	movs	r3, #23
 8015854:	18fb      	adds	r3, r7, r3
 8015856:	2201      	movs	r2, #1
 8015858:	701a      	strb	r2, [r3, #0]
 801585a:	e002      	b.n	8015862 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	2235      	movs	r2, #53	@ 0x35
 8015866:	2101      	movs	r1, #1
 8015868:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801586a:	2317      	movs	r3, #23
 801586c:	18fb      	adds	r3, r7, r3
 801586e:	781b      	ldrb	r3, [r3, #0]
}
 8015870:	0018      	movs	r0, r3
 8015872:	46bd      	mov	sp, r7
 8015874:	b006      	add	sp, #24
 8015876:	bd80      	pop	{r7, pc}
 8015878:	fffffbff 	.word	0xfffffbff

0801587c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801587c:	b580      	push	{r7, lr}
 801587e:	b084      	sub	sp, #16
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015888:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	69db      	ldr	r3, [r3, #28]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d10e      	bne.n	80158b0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	685a      	ldr	r2, [r3, #4]
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	2101      	movs	r1, #1
 801589e:	438a      	bics	r2, r1
 80158a0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	2200      	movs	r2, #0
 80158a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2235      	movs	r2, #53	@ 0x35
 80158ac:	2101      	movs	r1, #1
 80158ae:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	0018      	movs	r0, r3
 80158b4:	f7f8 fea8 	bl	800e608 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80158b8:	46c0      	nop			@ (mov r8, r8)
 80158ba:	46bd      	mov	sp, r7
 80158bc:	b004      	add	sp, #16
 80158be:	bd80      	pop	{r7, pc}

080158c0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b084      	sub	sp, #16
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158cc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	0018      	movs	r0, r3
 80158d2:	f7f8 fe87 	bl	800e5e4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80158d6:	46c0      	nop			@ (mov r8, r8)
 80158d8:	46bd      	mov	sp, r7
 80158da:	b004      	add	sp, #16
 80158dc:	bd80      	pop	{r7, pc}

080158de <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80158de:	b580      	push	{r7, lr}
 80158e0:	b084      	sub	sp, #16
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158ea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	685a      	ldr	r2, [r3, #4]
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	2103      	movs	r1, #3
 80158f8:	438a      	bics	r2, r1
 80158fa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2200      	movs	r2, #0
 8015900:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2200      	movs	r2, #0
 8015906:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	2235      	movs	r2, #53	@ 0x35
 801590c:	2101      	movs	r1, #1
 801590e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015914:	2208      	movs	r2, #8
 8015916:	431a      	orrs	r2, r3
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	0018      	movs	r0, r3
 8015920:	f7f8 fec0 	bl	800e6a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8015924:	46c0      	nop			@ (mov r8, r8)
 8015926:	46bd      	mov	sp, r7
 8015928:	b004      	add	sp, #16
 801592a:	bd80      	pop	{r7, pc}

0801592c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b086      	sub	sp, #24
 8015930:	af00      	add	r7, sp, #0
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	603b      	str	r3, [r7, #0]
 8015938:	1dfb      	adds	r3, r7, #7
 801593a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801593c:	f7fb fb4a 	bl	8010fd4 <HAL_GetTick>
 8015940:	0003      	movs	r3, r0
 8015942:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8015944:	e017      	b.n	8015976 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	3301      	adds	r3, #1
 801594a:	d014      	beq.n	8015976 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801594c:	f7fb fb42 	bl	8010fd4 <HAL_GetTick>
 8015950:	0002      	movs	r2, r0
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	1ad3      	subs	r3, r2, r3
 8015956:	683a      	ldr	r2, [r7, #0]
 8015958:	429a      	cmp	r2, r3
 801595a:	d902      	bls.n	8015962 <I2S_WaitFlagStateUntilTimeout+0x36>
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d109      	bne.n	8015976 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	2235      	movs	r2, #53	@ 0x35
 8015966:	2101      	movs	r1, #1
 8015968:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	2234      	movs	r2, #52	@ 0x34
 801596e:	2100      	movs	r1, #0
 8015970:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015972:	2303      	movs	r3, #3
 8015974:	e00f      	b.n	8015996 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	689b      	ldr	r3, [r3, #8]
 801597c:	68ba      	ldr	r2, [r7, #8]
 801597e:	4013      	ands	r3, r2
 8015980:	68ba      	ldr	r2, [r7, #8]
 8015982:	1ad3      	subs	r3, r2, r3
 8015984:	425a      	negs	r2, r3
 8015986:	4153      	adcs	r3, r2
 8015988:	b2db      	uxtb	r3, r3
 801598a:	001a      	movs	r2, r3
 801598c:	1dfb      	adds	r3, r7, #7
 801598e:	781b      	ldrb	r3, [r3, #0]
 8015990:	429a      	cmp	r2, r3
 8015992:	d1d8      	bne.n	8015946 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8015994:	2300      	movs	r3, #0
}
 8015996:	0018      	movs	r0, r3
 8015998:	46bd      	mov	sp, r7
 801599a:	b006      	add	sp, #24
 801599c:	bd80      	pop	{r7, pc}
	...

080159a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80159a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159a2:	b08b      	sub	sp, #44	@ 0x2c
 80159a4:	af06      	add	r7, sp, #24
 80159a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d101      	bne.n	80159b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80159ae:	2301      	movs	r3, #1
 80159b0:	e0f0      	b.n	8015b94 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	4a79      	ldr	r2, [pc, #484]	@ (8015b9c <HAL_PCD_Init+0x1fc>)
 80159b6:	5c9b      	ldrb	r3, [r3, r2]
 80159b8:	b2db      	uxtb	r3, r3
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d108      	bne.n	80159d0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	23aa      	movs	r3, #170	@ 0xaa
 80159c2:	009b      	lsls	r3, r3, #2
 80159c4:	2100      	movs	r1, #0
 80159c6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	0018      	movs	r0, r3
 80159cc:	f009 ff4a 	bl	801f864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	4a72      	ldr	r2, [pc, #456]	@ (8015b9c <HAL_PCD_Init+0x1fc>)
 80159d4:	2103      	movs	r1, #3
 80159d6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	0018      	movs	r0, r3
 80159de:	f005 fefd 	bl	801b7dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80159e2:	230f      	movs	r3, #15
 80159e4:	18fb      	adds	r3, r7, r3
 80159e6:	2200      	movs	r2, #0
 80159e8:	701a      	strb	r2, [r3, #0]
 80159ea:	e049      	b.n	8015a80 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80159ec:	200f      	movs	r0, #15
 80159ee:	183b      	adds	r3, r7, r0
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	6879      	ldr	r1, [r7, #4]
 80159f4:	1c5a      	adds	r2, r3, #1
 80159f6:	0013      	movs	r3, r2
 80159f8:	009b      	lsls	r3, r3, #2
 80159fa:	189b      	adds	r3, r3, r2
 80159fc:	00db      	lsls	r3, r3, #3
 80159fe:	18cb      	adds	r3, r1, r3
 8015a00:	3301      	adds	r3, #1
 8015a02:	2201      	movs	r2, #1
 8015a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8015a06:	183b      	adds	r3, r7, r0
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	6879      	ldr	r1, [r7, #4]
 8015a0c:	1c5a      	adds	r2, r3, #1
 8015a0e:	0013      	movs	r3, r2
 8015a10:	009b      	lsls	r3, r3, #2
 8015a12:	189b      	adds	r3, r3, r2
 8015a14:	00db      	lsls	r3, r3, #3
 8015a16:	183a      	adds	r2, r7, r0
 8015a18:	7812      	ldrb	r2, [r2, #0]
 8015a1a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8015a1c:	183b      	adds	r3, r7, r0
 8015a1e:	781b      	ldrb	r3, [r3, #0]
 8015a20:	6879      	ldr	r1, [r7, #4]
 8015a22:	1c5a      	adds	r2, r3, #1
 8015a24:	0013      	movs	r3, r2
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	189b      	adds	r3, r3, r2
 8015a2a:	00db      	lsls	r3, r3, #3
 8015a2c:	18cb      	adds	r3, r1, r3
 8015a2e:	3303      	adds	r3, #3
 8015a30:	2200      	movs	r2, #0
 8015a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8015a34:	183b      	adds	r3, r7, r0
 8015a36:	781a      	ldrb	r2, [r3, #0]
 8015a38:	6879      	ldr	r1, [r7, #4]
 8015a3a:	0013      	movs	r3, r2
 8015a3c:	009b      	lsls	r3, r3, #2
 8015a3e:	189b      	adds	r3, r3, r2
 8015a40:	00db      	lsls	r3, r3, #3
 8015a42:	18cb      	adds	r3, r1, r3
 8015a44:	3338      	adds	r3, #56	@ 0x38
 8015a46:	2200      	movs	r2, #0
 8015a48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8015a4a:	183b      	adds	r3, r7, r0
 8015a4c:	781a      	ldrb	r2, [r3, #0]
 8015a4e:	6879      	ldr	r1, [r7, #4]
 8015a50:	0013      	movs	r3, r2
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	189b      	adds	r3, r3, r2
 8015a56:	00db      	lsls	r3, r3, #3
 8015a58:	18cb      	adds	r3, r1, r3
 8015a5a:	333c      	adds	r3, #60	@ 0x3c
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8015a60:	183b      	adds	r3, r7, r0
 8015a62:	781a      	ldrb	r2, [r3, #0]
 8015a64:	6879      	ldr	r1, [r7, #4]
 8015a66:	0013      	movs	r3, r2
 8015a68:	009b      	lsls	r3, r3, #2
 8015a6a:	189b      	adds	r3, r3, r2
 8015a6c:	00db      	lsls	r3, r3, #3
 8015a6e:	18cb      	adds	r3, r1, r3
 8015a70:	3340      	adds	r3, #64	@ 0x40
 8015a72:	2200      	movs	r2, #0
 8015a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015a76:	183b      	adds	r3, r7, r0
 8015a78:	781a      	ldrb	r2, [r3, #0]
 8015a7a:	183b      	adds	r3, r7, r0
 8015a7c:	3201      	adds	r2, #1
 8015a7e:	701a      	strb	r2, [r3, #0]
 8015a80:	210f      	movs	r1, #15
 8015a82:	187b      	adds	r3, r7, r1
 8015a84:	781a      	ldrb	r2, [r3, #0]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d3ae      	bcc.n	80159ec <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015a8e:	187b      	adds	r3, r7, r1
 8015a90:	2200      	movs	r2, #0
 8015a92:	701a      	strb	r2, [r3, #0]
 8015a94:	e056      	b.n	8015b44 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8015a96:	240f      	movs	r4, #15
 8015a98:	193b      	adds	r3, r7, r4
 8015a9a:	781a      	ldrb	r2, [r3, #0]
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	236a      	movs	r3, #106	@ 0x6a
 8015aa0:	33ff      	adds	r3, #255	@ 0xff
 8015aa2:	0019      	movs	r1, r3
 8015aa4:	0013      	movs	r3, r2
 8015aa6:	009b      	lsls	r3, r3, #2
 8015aa8:	189b      	adds	r3, r3, r2
 8015aaa:	00db      	lsls	r3, r3, #3
 8015aac:	18c3      	adds	r3, r0, r3
 8015aae:	185b      	adds	r3, r3, r1
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8015ab4:	193b      	adds	r3, r7, r4
 8015ab6:	781a      	ldrb	r2, [r3, #0]
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	23b4      	movs	r3, #180	@ 0xb4
 8015abc:	0059      	lsls	r1, r3, #1
 8015abe:	0013      	movs	r3, r2
 8015ac0:	009b      	lsls	r3, r3, #2
 8015ac2:	189b      	adds	r3, r3, r2
 8015ac4:	00db      	lsls	r3, r3, #3
 8015ac6:	18c3      	adds	r3, r0, r3
 8015ac8:	185b      	adds	r3, r3, r1
 8015aca:	193a      	adds	r2, r7, r4
 8015acc:	7812      	ldrb	r2, [r2, #0]
 8015ace:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8015ad0:	193b      	adds	r3, r7, r4
 8015ad2:	781a      	ldrb	r2, [r3, #0]
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	236c      	movs	r3, #108	@ 0x6c
 8015ad8:	33ff      	adds	r3, #255	@ 0xff
 8015ada:	0019      	movs	r1, r3
 8015adc:	0013      	movs	r3, r2
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	189b      	adds	r3, r3, r2
 8015ae2:	00db      	lsls	r3, r3, #3
 8015ae4:	18c3      	adds	r3, r0, r3
 8015ae6:	185b      	adds	r3, r3, r1
 8015ae8:	2200      	movs	r2, #0
 8015aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8015aec:	193b      	adds	r3, r7, r4
 8015aee:	781a      	ldrb	r2, [r3, #0]
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	23bc      	movs	r3, #188	@ 0xbc
 8015af4:	0059      	lsls	r1, r3, #1
 8015af6:	0013      	movs	r3, r2
 8015af8:	009b      	lsls	r3, r3, #2
 8015afa:	189b      	adds	r3, r3, r2
 8015afc:	00db      	lsls	r3, r3, #3
 8015afe:	18c3      	adds	r3, r0, r3
 8015b00:	185b      	adds	r3, r3, r1
 8015b02:	2200      	movs	r2, #0
 8015b04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8015b06:	193b      	adds	r3, r7, r4
 8015b08:	781a      	ldrb	r2, [r3, #0]
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	23be      	movs	r3, #190	@ 0xbe
 8015b0e:	0059      	lsls	r1, r3, #1
 8015b10:	0013      	movs	r3, r2
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	189b      	adds	r3, r3, r2
 8015b16:	00db      	lsls	r3, r3, #3
 8015b18:	18c3      	adds	r3, r0, r3
 8015b1a:	185b      	adds	r3, r3, r1
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8015b20:	193b      	adds	r3, r7, r4
 8015b22:	781a      	ldrb	r2, [r3, #0]
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	23c0      	movs	r3, #192	@ 0xc0
 8015b28:	0059      	lsls	r1, r3, #1
 8015b2a:	0013      	movs	r3, r2
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	189b      	adds	r3, r3, r2
 8015b30:	00db      	lsls	r3, r3, #3
 8015b32:	18c3      	adds	r3, r0, r3
 8015b34:	185b      	adds	r3, r3, r1
 8015b36:	2200      	movs	r2, #0
 8015b38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015b3a:	193b      	adds	r3, r7, r4
 8015b3c:	781a      	ldrb	r2, [r3, #0]
 8015b3e:	193b      	adds	r3, r7, r4
 8015b40:	3201      	adds	r2, #1
 8015b42:	701a      	strb	r2, [r3, #0]
 8015b44:	230f      	movs	r3, #15
 8015b46:	18fb      	adds	r3, r7, r3
 8015b48:	781a      	ldrb	r2, [r3, #0]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d3a1      	bcc.n	8015a96 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	6818      	ldr	r0, [r3, #0]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	466a      	mov	r2, sp
 8015b5a:	0011      	movs	r1, r2
 8015b5c:	001a      	movs	r2, r3
 8015b5e:	3210      	adds	r2, #16
 8015b60:	ca70      	ldmia	r2!, {r4, r5, r6}
 8015b62:	c170      	stmia	r1!, {r4, r5, r6}
 8015b64:	ca30      	ldmia	r2!, {r4, r5}
 8015b66:	c130      	stmia	r1!, {r4, r5}
 8015b68:	6859      	ldr	r1, [r3, #4]
 8015b6a:	689a      	ldr	r2, [r3, #8]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	f005 fe4f 	bl	801b810 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2224      	movs	r2, #36	@ 0x24
 8015b76:	2100      	movs	r1, #0
 8015b78:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	4a07      	ldr	r2, [pc, #28]	@ (8015b9c <HAL_PCD_Init+0x1fc>)
 8015b7e:	2101      	movs	r1, #1
 8015b80:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	69db      	ldr	r3, [r3, #28]
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d103      	bne.n	8015b92 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	0018      	movs	r0, r3
 8015b8e:	f001 fd23 	bl	80175d8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8015b92:	2300      	movs	r3, #0
}
 8015b94:	0018      	movs	r0, r3
 8015b96:	46bd      	mov	sp, r7
 8015b98:	b005      	add	sp, #20
 8015b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b9c:	000002a9 	.word	0x000002a9

08015ba0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8015ba8:	687a      	ldr	r2, [r7, #4]
 8015baa:	23aa      	movs	r3, #170	@ 0xaa
 8015bac:	009b      	lsls	r3, r3, #2
 8015bae:	5cd3      	ldrb	r3, [r2, r3]
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	d101      	bne.n	8015bb8 <HAL_PCD_Start+0x18>
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	e014      	b.n	8015be2 <HAL_PCD_Start+0x42>
 8015bb8:	687a      	ldr	r2, [r7, #4]
 8015bba:	23aa      	movs	r3, #170	@ 0xaa
 8015bbc:	009b      	lsls	r3, r3, #2
 8015bbe:	2101      	movs	r1, #1
 8015bc0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	0018      	movs	r0, r3
 8015bc8:	f005 fdf2 	bl	801b7b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	0018      	movs	r0, r3
 8015bd2:	f007 fdf5 	bl	801d7c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8015bd6:	687a      	ldr	r2, [r7, #4]
 8015bd8:	23aa      	movs	r3, #170	@ 0xaa
 8015bda:	009b      	lsls	r3, r3, #2
 8015bdc:	2100      	movs	r1, #0
 8015bde:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8015be0:	2300      	movs	r3, #0
}
 8015be2:	0018      	movs	r0, r3
 8015be4:	46bd      	mov	sp, r7
 8015be6:	b002      	add	sp, #8
 8015be8:	bd80      	pop	{r7, pc}
	...

08015bec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	0018      	movs	r0, r3
 8015bfa:	f007 fdf7 	bl	801d7ec <USB_ReadInterrupts>
 8015bfe:	0003      	movs	r3, r0
 8015c00:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8015c02:	68fa      	ldr	r2, [r7, #12]
 8015c04:	2380      	movs	r3, #128	@ 0x80
 8015c06:	021b      	lsls	r3, r3, #8
 8015c08:	4013      	ands	r3, r2
 8015c0a:	d004      	beq.n	8015c16 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	0018      	movs	r0, r3
 8015c10:	f000 fb62 	bl	80162d8 <PCD_EP_ISR_Handler>

    return;
 8015c14:	e11d      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8015c16:	68fa      	ldr	r2, [r7, #12]
 8015c18:	2380      	movs	r3, #128	@ 0x80
 8015c1a:	00db      	lsls	r3, r3, #3
 8015c1c:	4013      	ands	r3, r2
 8015c1e:	d015      	beq.n	8015c4c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	2244      	movs	r2, #68	@ 0x44
 8015c26:	5a9b      	ldrh	r3, [r3, r2]
 8015c28:	b29a      	uxth	r2, r3
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	498a      	ldr	r1, [pc, #552]	@ (8015e58 <HAL_PCD_IRQHandler+0x26c>)
 8015c30:	400a      	ands	r2, r1
 8015c32:	b291      	uxth	r1, r2
 8015c34:	2244      	movs	r2, #68	@ 0x44
 8015c36:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	0018      	movs	r0, r3
 8015c3c:	f009 fe95 	bl	801f96a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2100      	movs	r1, #0
 8015c44:	0018      	movs	r0, r3
 8015c46:	f000 f915 	bl	8015e74 <HAL_PCD_SetAddress>

    return;
 8015c4a:	e102      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8015c4c:	68fa      	ldr	r2, [r7, #12]
 8015c4e:	2380      	movs	r3, #128	@ 0x80
 8015c50:	01db      	lsls	r3, r3, #7
 8015c52:	4013      	ands	r3, r2
 8015c54:	d00c      	beq.n	8015c70 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2244      	movs	r2, #68	@ 0x44
 8015c5c:	5a9b      	ldrh	r3, [r3, r2]
 8015c5e:	b29a      	uxth	r2, r3
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	497d      	ldr	r1, [pc, #500]	@ (8015e5c <HAL_PCD_IRQHandler+0x270>)
 8015c66:	400a      	ands	r2, r1
 8015c68:	b291      	uxth	r1, r2
 8015c6a:	2244      	movs	r2, #68	@ 0x44
 8015c6c:	5299      	strh	r1, [r3, r2]

    return;
 8015c6e:	e0f0      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8015c70:	68fa      	ldr	r2, [r7, #12]
 8015c72:	2380      	movs	r3, #128	@ 0x80
 8015c74:	019b      	lsls	r3, r3, #6
 8015c76:	4013      	ands	r3, r2
 8015c78:	d00c      	beq.n	8015c94 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	2244      	movs	r2, #68	@ 0x44
 8015c80:	5a9b      	ldrh	r3, [r3, r2]
 8015c82:	b29a      	uxth	r2, r3
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	4975      	ldr	r1, [pc, #468]	@ (8015e60 <HAL_PCD_IRQHandler+0x274>)
 8015c8a:	400a      	ands	r2, r1
 8015c8c:	b291      	uxth	r1, r2
 8015c8e:	2244      	movs	r2, #68	@ 0x44
 8015c90:	5299      	strh	r1, [r3, r2]

    return;
 8015c92:	e0de      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8015c94:	68fa      	ldr	r2, [r7, #12]
 8015c96:	2380      	movs	r3, #128	@ 0x80
 8015c98:	015b      	lsls	r3, r3, #5
 8015c9a:	4013      	ands	r3, r2
 8015c9c:	d038      	beq.n	8015d10 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	2240      	movs	r2, #64	@ 0x40
 8015ca4:	5a9b      	ldrh	r3, [r3, r2]
 8015ca6:	b29a      	uxth	r2, r3
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	2104      	movs	r1, #4
 8015cae:	438a      	bics	r2, r1
 8015cb0:	b291      	uxth	r1, r2
 8015cb2:	2240      	movs	r2, #64	@ 0x40
 8015cb4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	2240      	movs	r2, #64	@ 0x40
 8015cbc:	5a9b      	ldrh	r3, [r3, r2]
 8015cbe:	b29a      	uxth	r2, r3
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	2108      	movs	r1, #8
 8015cc6:	438a      	bics	r2, r1
 8015cc8:	b291      	uxth	r1, r2
 8015cca:	2240      	movs	r2, #64	@ 0x40
 8015ccc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8015cce:	687a      	ldr	r2, [r7, #4]
 8015cd0:	23b8      	movs	r3, #184	@ 0xb8
 8015cd2:	009b      	lsls	r3, r3, #2
 8015cd4:	5cd3      	ldrb	r3, [r2, r3]
 8015cd6:	2b01      	cmp	r3, #1
 8015cd8:	d109      	bne.n	8015cee <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8015cda:	687a      	ldr	r2, [r7, #4]
 8015cdc:	23b8      	movs	r3, #184	@ 0xb8
 8015cde:	009b      	lsls	r3, r3, #2
 8015ce0:	2100      	movs	r1, #0
 8015ce2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2100      	movs	r1, #0
 8015ce8:	0018      	movs	r0, r3
 8015cea:	f001 fc9f 	bl	801762c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	0018      	movs	r0, r3
 8015cf2:	f009 fe7b 	bl	801f9ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	2244      	movs	r2, #68	@ 0x44
 8015cfc:	5a9b      	ldrh	r3, [r3, r2]
 8015cfe:	b29a      	uxth	r2, r3
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	4957      	ldr	r1, [pc, #348]	@ (8015e64 <HAL_PCD_IRQHandler+0x278>)
 8015d06:	400a      	ands	r2, r1
 8015d08:	b291      	uxth	r1, r2
 8015d0a:	2244      	movs	r2, #68	@ 0x44
 8015d0c:	5299      	strh	r1, [r3, r2]

    return;
 8015d0e:	e0a0      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8015d10:	68fa      	ldr	r2, [r7, #12]
 8015d12:	2380      	movs	r3, #128	@ 0x80
 8015d14:	011b      	lsls	r3, r3, #4
 8015d16:	4013      	ands	r3, r2
 8015d18:	d028      	beq.n	8015d6c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	2240      	movs	r2, #64	@ 0x40
 8015d20:	5a9b      	ldrh	r3, [r3, r2]
 8015d22:	b29a      	uxth	r2, r3
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	2108      	movs	r1, #8
 8015d2a:	430a      	orrs	r2, r1
 8015d2c:	b291      	uxth	r1, r2
 8015d2e:	2240      	movs	r2, #64	@ 0x40
 8015d30:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	2244      	movs	r2, #68	@ 0x44
 8015d38:	5a9b      	ldrh	r3, [r3, r2]
 8015d3a:	b29a      	uxth	r2, r3
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	4949      	ldr	r1, [pc, #292]	@ (8015e68 <HAL_PCD_IRQHandler+0x27c>)
 8015d42:	400a      	ands	r2, r1
 8015d44:	b291      	uxth	r1, r2
 8015d46:	2244      	movs	r2, #68	@ 0x44
 8015d48:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	2240      	movs	r2, #64	@ 0x40
 8015d50:	5a9b      	ldrh	r3, [r3, r2]
 8015d52:	b29a      	uxth	r2, r3
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2104      	movs	r1, #4
 8015d5a:	430a      	orrs	r2, r1
 8015d5c:	b291      	uxth	r1, r2
 8015d5e:	2240      	movs	r2, #64	@ 0x40
 8015d60:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	0018      	movs	r0, r3
 8015d66:	f009 fe25 	bl	801f9b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8015d6a:	e072      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	2280      	movs	r2, #128	@ 0x80
 8015d70:	4013      	ands	r3, r2
 8015d72:	d046      	beq.n	8015e02 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2244      	movs	r2, #68	@ 0x44
 8015d7a:	5a9b      	ldrh	r3, [r3, r2]
 8015d7c:	b29a      	uxth	r2, r3
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	2180      	movs	r1, #128	@ 0x80
 8015d84:	438a      	bics	r2, r1
 8015d86:	b291      	uxth	r1, r2
 8015d88:	2244      	movs	r2, #68	@ 0x44
 8015d8a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	23b8      	movs	r3, #184	@ 0xb8
 8015d90:	009b      	lsls	r3, r3, #2
 8015d92:	5cd3      	ldrb	r3, [r2, r3]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d12f      	bne.n	8015df8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	2240      	movs	r2, #64	@ 0x40
 8015d9e:	5a9b      	ldrh	r3, [r3, r2]
 8015da0:	b29a      	uxth	r2, r3
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	2104      	movs	r1, #4
 8015da8:	430a      	orrs	r2, r1
 8015daa:	b291      	uxth	r1, r2
 8015dac:	2240      	movs	r2, #64	@ 0x40
 8015dae:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	2240      	movs	r2, #64	@ 0x40
 8015db6:	5a9b      	ldrh	r3, [r3, r2]
 8015db8:	b29a      	uxth	r2, r3
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	2108      	movs	r1, #8
 8015dc0:	430a      	orrs	r2, r1
 8015dc2:	b291      	uxth	r1, r2
 8015dc4:	2240      	movs	r2, #64	@ 0x40
 8015dc6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8015dc8:	687a      	ldr	r2, [r7, #4]
 8015dca:	23b8      	movs	r3, #184	@ 0xb8
 8015dcc:	009b      	lsls	r3, r3, #2
 8015dce:	2101      	movs	r1, #1
 8015dd0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	2254      	movs	r2, #84	@ 0x54
 8015dd8:	5a9b      	ldrh	r3, [r3, r2]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	089b      	lsrs	r3, r3, #2
 8015dde:	223c      	movs	r2, #60	@ 0x3c
 8015de0:	4013      	ands	r3, r2
 8015de2:	0019      	movs	r1, r3
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	23b9      	movs	r3, #185	@ 0xb9
 8015de8:	009b      	lsls	r3, r3, #2
 8015dea:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2101      	movs	r1, #1
 8015df0:	0018      	movs	r0, r3
 8015df2:	f001 fc1b 	bl	801762c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8015df6:	e02c      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	0018      	movs	r0, r3
 8015dfc:	f009 fdda 	bl	801f9b4 <HAL_PCD_SuspendCallback>
    return;
 8015e00:	e027      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8015e02:	68fa      	ldr	r2, [r7, #12]
 8015e04:	2380      	movs	r3, #128	@ 0x80
 8015e06:	009b      	lsls	r3, r3, #2
 8015e08:	4013      	ands	r3, r2
 8015e0a:	d010      	beq.n	8015e2e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	2244      	movs	r2, #68	@ 0x44
 8015e12:	5a9b      	ldrh	r3, [r3, r2]
 8015e14:	b29a      	uxth	r2, r3
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	4914      	ldr	r1, [pc, #80]	@ (8015e6c <HAL_PCD_IRQHandler+0x280>)
 8015e1c:	400a      	ands	r2, r1
 8015e1e:	b291      	uxth	r1, r2
 8015e20:	2244      	movs	r2, #68	@ 0x44
 8015e22:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	0018      	movs	r0, r3
 8015e28:	f009 fd90 	bl	801f94c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8015e2c:	e011      	b.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8015e2e:	68fa      	ldr	r2, [r7, #12]
 8015e30:	2380      	movs	r3, #128	@ 0x80
 8015e32:	005b      	lsls	r3, r3, #1
 8015e34:	4013      	ands	r3, r2
 8015e36:	d00c      	beq.n	8015e52 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	2244      	movs	r2, #68	@ 0x44
 8015e3e:	5a9b      	ldrh	r3, [r3, r2]
 8015e40:	b29a      	uxth	r2, r3
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	490a      	ldr	r1, [pc, #40]	@ (8015e70 <HAL_PCD_IRQHandler+0x284>)
 8015e48:	400a      	ands	r2, r1
 8015e4a:	b291      	uxth	r1, r2
 8015e4c:	2244      	movs	r2, #68	@ 0x44
 8015e4e:	5299      	strh	r1, [r3, r2]

    return;
 8015e50:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015e52:	46bd      	mov	sp, r7
 8015e54:	b004      	add	sp, #16
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	fffffbff 	.word	0xfffffbff
 8015e5c:	ffffbfff 	.word	0xffffbfff
 8015e60:	ffffdfff 	.word	0xffffdfff
 8015e64:	ffffefff 	.word	0xffffefff
 8015e68:	fffff7ff 	.word	0xfffff7ff
 8015e6c:	fffffdff 	.word	0xfffffdff
 8015e70:	fffffeff 	.word	0xfffffeff

08015e74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b082      	sub	sp, #8
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	000a      	movs	r2, r1
 8015e7e:	1cfb      	adds	r3, r7, #3
 8015e80:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8015e82:	687a      	ldr	r2, [r7, #4]
 8015e84:	23aa      	movs	r3, #170	@ 0xaa
 8015e86:	009b      	lsls	r3, r3, #2
 8015e88:	5cd3      	ldrb	r3, [r2, r3]
 8015e8a:	2b01      	cmp	r3, #1
 8015e8c:	d101      	bne.n	8015e92 <HAL_PCD_SetAddress+0x1e>
 8015e8e:	2302      	movs	r3, #2
 8015e90:	e017      	b.n	8015ec2 <HAL_PCD_SetAddress+0x4e>
 8015e92:	687a      	ldr	r2, [r7, #4]
 8015e94:	23aa      	movs	r3, #170	@ 0xaa
 8015e96:	009b      	lsls	r3, r3, #2
 8015e98:	2101      	movs	r1, #1
 8015e9a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	1cfa      	adds	r2, r7, #3
 8015ea0:	2124      	movs	r1, #36	@ 0x24
 8015ea2:	7812      	ldrb	r2, [r2, #0]
 8015ea4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	1cfb      	adds	r3, r7, #3
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	0019      	movs	r1, r3
 8015eb0:	0010      	movs	r0, r2
 8015eb2:	f007 fc71 	bl	801d798 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	23aa      	movs	r3, #170	@ 0xaa
 8015eba:	009b      	lsls	r3, r3, #2
 8015ebc:	2100      	movs	r1, #0
 8015ebe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8015ec0:	2300      	movs	r3, #0
}
 8015ec2:	0018      	movs	r0, r3
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	b002      	add	sp, #8
 8015ec8:	bd80      	pop	{r7, pc}

08015eca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8015eca:	b590      	push	{r4, r7, lr}
 8015ecc:	b085      	sub	sp, #20
 8015ece:	af00      	add	r7, sp, #0
 8015ed0:	6078      	str	r0, [r7, #4]
 8015ed2:	000c      	movs	r4, r1
 8015ed4:	0010      	movs	r0, r2
 8015ed6:	0019      	movs	r1, r3
 8015ed8:	1cfb      	adds	r3, r7, #3
 8015eda:	1c22      	adds	r2, r4, #0
 8015edc:	701a      	strb	r2, [r3, #0]
 8015ede:	003b      	movs	r3, r7
 8015ee0:	1c02      	adds	r2, r0, #0
 8015ee2:	801a      	strh	r2, [r3, #0]
 8015ee4:	1cbb      	adds	r3, r7, #2
 8015ee6:	1c0a      	adds	r2, r1, #0
 8015ee8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8015eea:	230b      	movs	r3, #11
 8015eec:	18fb      	adds	r3, r7, r3
 8015eee:	2200      	movs	r2, #0
 8015ef0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8015ef2:	1cfb      	adds	r3, r7, #3
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	b25b      	sxtb	r3, r3
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	da0f      	bge.n	8015f1c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015efc:	1cfb      	adds	r3, r7, #3
 8015efe:	781b      	ldrb	r3, [r3, #0]
 8015f00:	2207      	movs	r2, #7
 8015f02:	4013      	ands	r3, r2
 8015f04:	1c5a      	adds	r2, r3, #1
 8015f06:	0013      	movs	r3, r2
 8015f08:	009b      	lsls	r3, r3, #2
 8015f0a:	189b      	adds	r3, r3, r2
 8015f0c:	00db      	lsls	r3, r3, #3
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	18d3      	adds	r3, r2, r3
 8015f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	2201      	movs	r2, #1
 8015f18:	705a      	strb	r2, [r3, #1]
 8015f1a:	e00f      	b.n	8015f3c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8015f1c:	1cfb      	adds	r3, r7, #3
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	2207      	movs	r2, #7
 8015f22:	401a      	ands	r2, r3
 8015f24:	0013      	movs	r3, r2
 8015f26:	009b      	lsls	r3, r3, #2
 8015f28:	189b      	adds	r3, r3, r2
 8015f2a:	00db      	lsls	r3, r3, #3
 8015f2c:	3369      	adds	r3, #105	@ 0x69
 8015f2e:	33ff      	adds	r3, #255	@ 0xff
 8015f30:	687a      	ldr	r2, [r7, #4]
 8015f32:	18d3      	adds	r3, r2, r3
 8015f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	2200      	movs	r2, #0
 8015f3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8015f3c:	1cfb      	adds	r3, r7, #3
 8015f3e:	781b      	ldrb	r3, [r3, #0]
 8015f40:	2207      	movs	r2, #7
 8015f42:	4013      	ands	r3, r2
 8015f44:	b2da      	uxtb	r2, r3
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8015f4a:	003b      	movs	r3, r7
 8015f4c:	881a      	ldrh	r2, [r3, #0]
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	1cba      	adds	r2, r7, #2
 8015f56:	7812      	ldrb	r2, [r2, #0]
 8015f58:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8015f5a:	1cbb      	adds	r3, r7, #2
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	2b02      	cmp	r3, #2
 8015f60:	d102      	bne.n	8015f68 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	2200      	movs	r2, #0
 8015f66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8015f68:	687a      	ldr	r2, [r7, #4]
 8015f6a:	23aa      	movs	r3, #170	@ 0xaa
 8015f6c:	009b      	lsls	r3, r3, #2
 8015f6e:	5cd3      	ldrb	r3, [r2, r3]
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	d101      	bne.n	8015f78 <HAL_PCD_EP_Open+0xae>
 8015f74:	2302      	movs	r3, #2
 8015f76:	e013      	b.n	8015fa0 <HAL_PCD_EP_Open+0xd6>
 8015f78:	687a      	ldr	r2, [r7, #4]
 8015f7a:	23aa      	movs	r3, #170	@ 0xaa
 8015f7c:	009b      	lsls	r3, r3, #2
 8015f7e:	2101      	movs	r1, #1
 8015f80:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	68fa      	ldr	r2, [r7, #12]
 8015f88:	0011      	movs	r1, r2
 8015f8a:	0018      	movs	r0, r3
 8015f8c:	f005 fc68 	bl	801b860 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8015f90:	687a      	ldr	r2, [r7, #4]
 8015f92:	23aa      	movs	r3, #170	@ 0xaa
 8015f94:	009b      	lsls	r3, r3, #2
 8015f96:	2100      	movs	r1, #0
 8015f98:	54d1      	strb	r1, [r2, r3]

  return ret;
 8015f9a:	230b      	movs	r3, #11
 8015f9c:	18fb      	adds	r3, r7, r3
 8015f9e:	781b      	ldrb	r3, [r3, #0]
}
 8015fa0:	0018      	movs	r0, r3
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	b005      	add	sp, #20
 8015fa6:	bd90      	pop	{r4, r7, pc}

08015fa8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b084      	sub	sp, #16
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	000a      	movs	r2, r1
 8015fb2:	1cfb      	adds	r3, r7, #3
 8015fb4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8015fb6:	1cfb      	adds	r3, r7, #3
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	b25b      	sxtb	r3, r3
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	da0f      	bge.n	8015fe0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8015fc0:	1cfb      	adds	r3, r7, #3
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	2207      	movs	r2, #7
 8015fc6:	4013      	ands	r3, r2
 8015fc8:	1c5a      	adds	r2, r3, #1
 8015fca:	0013      	movs	r3, r2
 8015fcc:	009b      	lsls	r3, r3, #2
 8015fce:	189b      	adds	r3, r3, r2
 8015fd0:	00db      	lsls	r3, r3, #3
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	18d3      	adds	r3, r2, r3
 8015fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2201      	movs	r2, #1
 8015fdc:	705a      	strb	r2, [r3, #1]
 8015fde:	e00f      	b.n	8016000 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8015fe0:	1cfb      	adds	r3, r7, #3
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	2207      	movs	r2, #7
 8015fe6:	401a      	ands	r2, r3
 8015fe8:	0013      	movs	r3, r2
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	189b      	adds	r3, r3, r2
 8015fee:	00db      	lsls	r3, r3, #3
 8015ff0:	3369      	adds	r3, #105	@ 0x69
 8015ff2:	33ff      	adds	r3, #255	@ 0xff
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	18d3      	adds	r3, r2, r3
 8015ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8016000:	1cfb      	adds	r3, r7, #3
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	2207      	movs	r2, #7
 8016006:	4013      	ands	r3, r2
 8016008:	b2da      	uxtb	r2, r3
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801600e:	687a      	ldr	r2, [r7, #4]
 8016010:	23aa      	movs	r3, #170	@ 0xaa
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	5cd3      	ldrb	r3, [r2, r3]
 8016016:	2b01      	cmp	r3, #1
 8016018:	d101      	bne.n	801601e <HAL_PCD_EP_Close+0x76>
 801601a:	2302      	movs	r3, #2
 801601c:	e011      	b.n	8016042 <HAL_PCD_EP_Close+0x9a>
 801601e:	687a      	ldr	r2, [r7, #4]
 8016020:	23aa      	movs	r3, #170	@ 0xaa
 8016022:	009b      	lsls	r3, r3, #2
 8016024:	2101      	movs	r1, #1
 8016026:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	68fa      	ldr	r2, [r7, #12]
 801602e:	0011      	movs	r1, r2
 8016030:	0018      	movs	r0, r3
 8016032:	f005 ffb7 	bl	801bfa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8016036:	687a      	ldr	r2, [r7, #4]
 8016038:	23aa      	movs	r3, #170	@ 0xaa
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	2100      	movs	r1, #0
 801603e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8016040:	2300      	movs	r3, #0
}
 8016042:	0018      	movs	r0, r3
 8016044:	46bd      	mov	sp, r7
 8016046:	b004      	add	sp, #16
 8016048:	bd80      	pop	{r7, pc}

0801604a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801604a:	b580      	push	{r7, lr}
 801604c:	b086      	sub	sp, #24
 801604e:	af00      	add	r7, sp, #0
 8016050:	60f8      	str	r0, [r7, #12]
 8016052:	607a      	str	r2, [r7, #4]
 8016054:	603b      	str	r3, [r7, #0]
 8016056:	200b      	movs	r0, #11
 8016058:	183b      	adds	r3, r7, r0
 801605a:	1c0a      	adds	r2, r1, #0
 801605c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801605e:	0001      	movs	r1, r0
 8016060:	187b      	adds	r3, r7, r1
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	2207      	movs	r2, #7
 8016066:	401a      	ands	r2, r3
 8016068:	0013      	movs	r3, r2
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	189b      	adds	r3, r3, r2
 801606e:	00db      	lsls	r3, r3, #3
 8016070:	3369      	adds	r3, #105	@ 0x69
 8016072:	33ff      	adds	r3, #255	@ 0xff
 8016074:	68fa      	ldr	r2, [r7, #12]
 8016076:	18d3      	adds	r3, r2, r3
 8016078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801607a:	697b      	ldr	r3, [r7, #20]
 801607c:	687a      	ldr	r2, [r7, #4]
 801607e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	683a      	ldr	r2, [r7, #0]
 8016084:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	2200      	movs	r2, #0
 801608a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	2200      	movs	r2, #0
 8016090:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016092:	187b      	adds	r3, r7, r1
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	2207      	movs	r2, #7
 8016098:	4013      	ands	r3, r2
 801609a:	b2da      	uxtb	r2, r3
 801609c:	697b      	ldr	r3, [r7, #20]
 801609e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	697a      	ldr	r2, [r7, #20]
 80160a6:	0011      	movs	r1, r2
 80160a8:	0018      	movs	r0, r3
 80160aa:	f006 f93b 	bl	801c324 <USB_EPStartXfer>

  return HAL_OK;
 80160ae:	2300      	movs	r3, #0
}
 80160b0:	0018      	movs	r0, r3
 80160b2:	46bd      	mov	sp, r7
 80160b4:	b006      	add	sp, #24
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b082      	sub	sp, #8
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	000a      	movs	r2, r1
 80160c2:	1cfb      	adds	r3, r7, #3
 80160c4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80160c6:	1cfb      	adds	r3, r7, #3
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	2207      	movs	r2, #7
 80160cc:	401a      	ands	r2, r3
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	23c2      	movs	r3, #194	@ 0xc2
 80160d2:	0059      	lsls	r1, r3, #1
 80160d4:	0013      	movs	r3, r2
 80160d6:	009b      	lsls	r3, r3, #2
 80160d8:	189b      	adds	r3, r3, r2
 80160da:	00db      	lsls	r3, r3, #3
 80160dc:	18c3      	adds	r3, r0, r3
 80160de:	185b      	adds	r3, r3, r1
 80160e0:	681b      	ldr	r3, [r3, #0]
}
 80160e2:	0018      	movs	r0, r3
 80160e4:	46bd      	mov	sp, r7
 80160e6:	b002      	add	sp, #8
 80160e8:	bd80      	pop	{r7, pc}

080160ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80160ea:	b580      	push	{r7, lr}
 80160ec:	b086      	sub	sp, #24
 80160ee:	af00      	add	r7, sp, #0
 80160f0:	60f8      	str	r0, [r7, #12]
 80160f2:	607a      	str	r2, [r7, #4]
 80160f4:	603b      	str	r3, [r7, #0]
 80160f6:	200b      	movs	r0, #11
 80160f8:	183b      	adds	r3, r7, r0
 80160fa:	1c0a      	adds	r2, r1, #0
 80160fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80160fe:	183b      	adds	r3, r7, r0
 8016100:	781b      	ldrb	r3, [r3, #0]
 8016102:	2207      	movs	r2, #7
 8016104:	4013      	ands	r3, r2
 8016106:	1c5a      	adds	r2, r3, #1
 8016108:	0013      	movs	r3, r2
 801610a:	009b      	lsls	r3, r3, #2
 801610c:	189b      	adds	r3, r3, r2
 801610e:	00db      	lsls	r3, r3, #3
 8016110:	68fa      	ldr	r2, [r7, #12]
 8016112:	18d3      	adds	r3, r2, r3
 8016114:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8016116:	697b      	ldr	r3, [r7, #20]
 8016118:	687a      	ldr	r2, [r7, #4]
 801611a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	683a      	ldr	r2, [r7, #0]
 8016120:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8016122:	697b      	ldr	r3, [r7, #20]
 8016124:	2224      	movs	r2, #36	@ 0x24
 8016126:	2101      	movs	r1, #1
 8016128:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801612a:	697b      	ldr	r3, [r7, #20]
 801612c:	683a      	ldr	r2, [r7, #0]
 801612e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	2200      	movs	r2, #0
 8016134:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8016136:	697b      	ldr	r3, [r7, #20]
 8016138:	2201      	movs	r2, #1
 801613a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801613c:	183b      	adds	r3, r7, r0
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	2207      	movs	r2, #7
 8016142:	4013      	ands	r3, r2
 8016144:	b2da      	uxtb	r2, r3
 8016146:	697b      	ldr	r3, [r7, #20]
 8016148:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	697a      	ldr	r2, [r7, #20]
 8016150:	0011      	movs	r1, r2
 8016152:	0018      	movs	r0, r3
 8016154:	f006 f8e6 	bl	801c324 <USB_EPStartXfer>

  return HAL_OK;
 8016158:	2300      	movs	r3, #0
}
 801615a:	0018      	movs	r0, r3
 801615c:	46bd      	mov	sp, r7
 801615e:	b006      	add	sp, #24
 8016160:	bd80      	pop	{r7, pc}

08016162 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016162:	b580      	push	{r7, lr}
 8016164:	b084      	sub	sp, #16
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
 801616a:	000a      	movs	r2, r1
 801616c:	1cfb      	adds	r3, r7, #3
 801616e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8016170:	1cfb      	adds	r3, r7, #3
 8016172:	781b      	ldrb	r3, [r3, #0]
 8016174:	2207      	movs	r2, #7
 8016176:	401a      	ands	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	685b      	ldr	r3, [r3, #4]
 801617c:	429a      	cmp	r2, r3
 801617e:	d901      	bls.n	8016184 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8016180:	2301      	movs	r3, #1
 8016182:	e046      	b.n	8016212 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8016184:	1cfb      	adds	r3, r7, #3
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	b25b      	sxtb	r3, r3
 801618a:	2b00      	cmp	r3, #0
 801618c:	da0f      	bge.n	80161ae <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801618e:	1cfb      	adds	r3, r7, #3
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	2207      	movs	r2, #7
 8016194:	4013      	ands	r3, r2
 8016196:	1c5a      	adds	r2, r3, #1
 8016198:	0013      	movs	r3, r2
 801619a:	009b      	lsls	r3, r3, #2
 801619c:	189b      	adds	r3, r3, r2
 801619e:	00db      	lsls	r3, r3, #3
 80161a0:	687a      	ldr	r2, [r7, #4]
 80161a2:	18d3      	adds	r3, r2, r3
 80161a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	2201      	movs	r2, #1
 80161aa:	705a      	strb	r2, [r3, #1]
 80161ac:	e00d      	b.n	80161ca <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80161ae:	1cfb      	adds	r3, r7, #3
 80161b0:	781a      	ldrb	r2, [r3, #0]
 80161b2:	0013      	movs	r3, r2
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	189b      	adds	r3, r3, r2
 80161b8:	00db      	lsls	r3, r3, #3
 80161ba:	3369      	adds	r3, #105	@ 0x69
 80161bc:	33ff      	adds	r3, #255	@ 0xff
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	18d3      	adds	r3, r2, r3
 80161c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2200      	movs	r2, #0
 80161c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2201      	movs	r2, #1
 80161ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80161d0:	1cfb      	adds	r3, r7, #3
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	2207      	movs	r2, #7
 80161d6:	4013      	ands	r3, r2
 80161d8:	b2da      	uxtb	r2, r3
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	23aa      	movs	r3, #170	@ 0xaa
 80161e2:	009b      	lsls	r3, r3, #2
 80161e4:	5cd3      	ldrb	r3, [r2, r3]
 80161e6:	2b01      	cmp	r3, #1
 80161e8:	d101      	bne.n	80161ee <HAL_PCD_EP_SetStall+0x8c>
 80161ea:	2302      	movs	r3, #2
 80161ec:	e011      	b.n	8016212 <HAL_PCD_EP_SetStall+0xb0>
 80161ee:	687a      	ldr	r2, [r7, #4]
 80161f0:	23aa      	movs	r3, #170	@ 0xaa
 80161f2:	009b      	lsls	r3, r3, #2
 80161f4:	2101      	movs	r1, #1
 80161f6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	68fa      	ldr	r2, [r7, #12]
 80161fe:	0011      	movs	r1, r2
 8016200:	0018      	movs	r0, r3
 8016202:	f007 f9c7 	bl	801d594 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8016206:	687a      	ldr	r2, [r7, #4]
 8016208:	23aa      	movs	r3, #170	@ 0xaa
 801620a:	009b      	lsls	r3, r3, #2
 801620c:	2100      	movs	r1, #0
 801620e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016210:	2300      	movs	r3, #0
}
 8016212:	0018      	movs	r0, r3
 8016214:	46bd      	mov	sp, r7
 8016216:	b004      	add	sp, #16
 8016218:	bd80      	pop	{r7, pc}

0801621a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801621a:	b580      	push	{r7, lr}
 801621c:	b084      	sub	sp, #16
 801621e:	af00      	add	r7, sp, #0
 8016220:	6078      	str	r0, [r7, #4]
 8016222:	000a      	movs	r2, r1
 8016224:	1cfb      	adds	r3, r7, #3
 8016226:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8016228:	1cfb      	adds	r3, r7, #3
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	220f      	movs	r2, #15
 801622e:	401a      	ands	r2, r3
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	429a      	cmp	r2, r3
 8016236:	d901      	bls.n	801623c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8016238:	2301      	movs	r3, #1
 801623a:	e048      	b.n	80162ce <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801623c:	1cfb      	adds	r3, r7, #3
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	b25b      	sxtb	r3, r3
 8016242:	2b00      	cmp	r3, #0
 8016244:	da0f      	bge.n	8016266 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016246:	1cfb      	adds	r3, r7, #3
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	2207      	movs	r2, #7
 801624c:	4013      	ands	r3, r2
 801624e:	1c5a      	adds	r2, r3, #1
 8016250:	0013      	movs	r3, r2
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	189b      	adds	r3, r3, r2
 8016256:	00db      	lsls	r3, r3, #3
 8016258:	687a      	ldr	r2, [r7, #4]
 801625a:	18d3      	adds	r3, r2, r3
 801625c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	2201      	movs	r2, #1
 8016262:	705a      	strb	r2, [r3, #1]
 8016264:	e00f      	b.n	8016286 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016266:	1cfb      	adds	r3, r7, #3
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	2207      	movs	r2, #7
 801626c:	401a      	ands	r2, r3
 801626e:	0013      	movs	r3, r2
 8016270:	009b      	lsls	r3, r3, #2
 8016272:	189b      	adds	r3, r3, r2
 8016274:	00db      	lsls	r3, r3, #3
 8016276:	3369      	adds	r3, #105	@ 0x69
 8016278:	33ff      	adds	r3, #255	@ 0xff
 801627a:	687a      	ldr	r2, [r7, #4]
 801627c:	18d3      	adds	r3, r2, r3
 801627e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2200      	movs	r2, #0
 8016284:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2200      	movs	r2, #0
 801628a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801628c:	1cfb      	adds	r3, r7, #3
 801628e:	781b      	ldrb	r3, [r3, #0]
 8016290:	2207      	movs	r2, #7
 8016292:	4013      	ands	r3, r2
 8016294:	b2da      	uxtb	r2, r3
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	23aa      	movs	r3, #170	@ 0xaa
 801629e:	009b      	lsls	r3, r3, #2
 80162a0:	5cd3      	ldrb	r3, [r2, r3]
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d101      	bne.n	80162aa <HAL_PCD_EP_ClrStall+0x90>
 80162a6:	2302      	movs	r3, #2
 80162a8:	e011      	b.n	80162ce <HAL_PCD_EP_ClrStall+0xb4>
 80162aa:	687a      	ldr	r2, [r7, #4]
 80162ac:	23aa      	movs	r3, #170	@ 0xaa
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	2101      	movs	r1, #1
 80162b2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	68fa      	ldr	r2, [r7, #12]
 80162ba:	0011      	movs	r1, r2
 80162bc:	0018      	movs	r0, r3
 80162be:	f007 f9b9 	bl	801d634 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	23aa      	movs	r3, #170	@ 0xaa
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	2100      	movs	r1, #0
 80162ca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80162cc:	2300      	movs	r3, #0
}
 80162ce:	0018      	movs	r0, r3
 80162d0:	46bd      	mov	sp, r7
 80162d2:	b004      	add	sp, #16
 80162d4:	bd80      	pop	{r7, pc}
	...

080162d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80162d8:	b5b0      	push	{r4, r5, r7, lr}
 80162da:	b096      	sub	sp, #88	@ 0x58
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80162e0:	f000 fbec 	bl	8016abc <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	681a      	ldr	r2, [r3, #0]
 80162e8:	204e      	movs	r0, #78	@ 0x4e
 80162ea:	183b      	adds	r3, r7, r0
 80162ec:	2144      	movs	r1, #68	@ 0x44
 80162ee:	5a52      	ldrh	r2, [r2, r1]
 80162f0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80162f2:	183b      	adds	r3, r7, r0
 80162f4:	881b      	ldrh	r3, [r3, #0]
 80162f6:	b2da      	uxtb	r2, r3
 80162f8:	244d      	movs	r4, #77	@ 0x4d
 80162fa:	193b      	adds	r3, r7, r4
 80162fc:	210f      	movs	r1, #15
 80162fe:	400a      	ands	r2, r1
 8016300:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8016302:	193b      	adds	r3, r7, r4
 8016304:	781b      	ldrb	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d000      	beq.n	801630c <PCD_EP_ISR_Handler+0x34>
 801630a:	e18f      	b.n	801662c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 801630c:	183b      	adds	r3, r7, r0
 801630e:	881b      	ldrh	r3, [r3, #0]
 8016310:	2210      	movs	r2, #16
 8016312:	4013      	ands	r3, r2
 8016314:	d155      	bne.n	80163c2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	881b      	ldrh	r3, [r3, #0]
 801631c:	b29a      	uxth	r2, r3
 801631e:	200e      	movs	r0, #14
 8016320:	183b      	adds	r3, r7, r0
 8016322:	49bb      	ldr	r1, [pc, #748]	@ (8016610 <PCD_EP_ISR_Handler+0x338>)
 8016324:	400a      	ands	r2, r1
 8016326:	801a      	strh	r2, [r3, #0]
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	183a      	adds	r2, r7, r0
 801632e:	8812      	ldrh	r2, [r2, #0]
 8016330:	49b8      	ldr	r1, [pc, #736]	@ (8016614 <PCD_EP_ISR_Handler+0x33c>)
 8016332:	430a      	orrs	r2, r1
 8016334:	b292      	uxth	r2, r2
 8016336:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	3328      	adds	r3, #40	@ 0x28
 801633c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	2250      	movs	r2, #80	@ 0x50
 8016344:	5a9b      	ldrh	r3, [r3, r2]
 8016346:	b29b      	uxth	r3, r3
 8016348:	001a      	movs	r2, r3
 801634a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	00db      	lsls	r3, r3, #3
 8016350:	18d2      	adds	r2, r2, r3
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	18d3      	adds	r3, r2, r3
 8016358:	4aaf      	ldr	r2, [pc, #700]	@ (8016618 <PCD_EP_ISR_Handler+0x340>)
 801635a:	4694      	mov	ip, r2
 801635c:	4463      	add	r3, ip
 801635e:	881b      	ldrh	r3, [r3, #0]
 8016360:	059b      	lsls	r3, r3, #22
 8016362:	0d9a      	lsrs	r2, r3, #22
 8016364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016366:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8016368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801636a:	695a      	ldr	r2, [r3, #20]
 801636c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801636e:	69db      	ldr	r3, [r3, #28]
 8016370:	18d2      	adds	r2, r2, r3
 8016372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016374:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2100      	movs	r1, #0
 801637a:	0018      	movs	r0, r3
 801637c:	f009 fac8 	bl	801f910 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2224      	movs	r2, #36	@ 0x24
 8016384:	5c9b      	ldrb	r3, [r3, r2]
 8016386:	b2db      	uxtb	r3, r3
 8016388:	2b00      	cmp	r3, #0
 801638a:	d101      	bne.n	8016390 <PCD_EP_ISR_Handler+0xb8>
 801638c:	f000 fb96 	bl	8016abc <PCD_EP_ISR_Handler+0x7e4>
 8016390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016392:	699b      	ldr	r3, [r3, #24]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d001      	beq.n	801639c <PCD_EP_ISR_Handler+0xc4>
 8016398:	f000 fb90 	bl	8016abc <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2224      	movs	r2, #36	@ 0x24
 80163a0:	5c9b      	ldrb	r3, [r3, r2]
 80163a2:	b2db      	uxtb	r3, r3
 80163a4:	2280      	movs	r2, #128	@ 0x80
 80163a6:	4252      	negs	r2, r2
 80163a8:	4313      	orrs	r3, r2
 80163aa:	b2da      	uxtb	r2, r3
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	0011      	movs	r1, r2
 80163b2:	224c      	movs	r2, #76	@ 0x4c
 80163b4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	2224      	movs	r2, #36	@ 0x24
 80163ba:	2100      	movs	r1, #0
 80163bc:	5499      	strb	r1, [r3, r2]
 80163be:	f000 fb7d 	bl	8016abc <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	3369      	adds	r3, #105	@ 0x69
 80163c6:	33ff      	adds	r3, #255	@ 0xff
 80163c8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681a      	ldr	r2, [r3, #0]
 80163ce:	214a      	movs	r1, #74	@ 0x4a
 80163d0:	187b      	adds	r3, r7, r1
 80163d2:	8812      	ldrh	r2, [r2, #0]
 80163d4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80163d6:	187b      	adds	r3, r7, r1
 80163d8:	881a      	ldrh	r2, [r3, #0]
 80163da:	2380      	movs	r3, #128	@ 0x80
 80163dc:	011b      	lsls	r3, r3, #4
 80163de:	4013      	ands	r3, r2
 80163e0:	d037      	beq.n	8016452 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2250      	movs	r2, #80	@ 0x50
 80163e8:	5a9b      	ldrh	r3, [r3, r2]
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	001a      	movs	r2, r3
 80163ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	00db      	lsls	r3, r3, #3
 80163f4:	18d2      	adds	r2, r2, r3
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	18d3      	adds	r3, r2, r3
 80163fc:	4a87      	ldr	r2, [pc, #540]	@ (801661c <PCD_EP_ISR_Handler+0x344>)
 80163fe:	4694      	mov	ip, r2
 8016400:	4463      	add	r3, ip
 8016402:	881b      	ldrh	r3, [r3, #0]
 8016404:	059b      	lsls	r3, r3, #22
 8016406:	0d9a      	lsrs	r2, r3, #22
 8016408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801640a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	6818      	ldr	r0, [r3, #0]
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	22ac      	movs	r2, #172	@ 0xac
 8016414:	0092      	lsls	r2, r2, #2
 8016416:	1899      	adds	r1, r3, r2
 8016418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801641a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801641c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801641e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8016420:	b29b      	uxth	r3, r3
 8016422:	f007 fa3a 	bl	801d89a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	881b      	ldrh	r3, [r3, #0]
 801642c:	b29a      	uxth	r2, r3
 801642e:	2010      	movs	r0, #16
 8016430:	183b      	adds	r3, r7, r0
 8016432:	497b      	ldr	r1, [pc, #492]	@ (8016620 <PCD_EP_ISR_Handler+0x348>)
 8016434:	400a      	ands	r2, r1
 8016436:	801a      	strh	r2, [r3, #0]
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	183a      	adds	r2, r7, r0
 801643e:	8812      	ldrh	r2, [r2, #0]
 8016440:	2180      	movs	r1, #128	@ 0x80
 8016442:	430a      	orrs	r2, r1
 8016444:	b292      	uxth	r2, r2
 8016446:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	0018      	movs	r0, r3
 801644c:	f009 fa2a 	bl	801f8a4 <HAL_PCD_SetupStageCallback>
 8016450:	e334      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8016452:	234a      	movs	r3, #74	@ 0x4a
 8016454:	18fb      	adds	r3, r7, r3
 8016456:	2200      	movs	r2, #0
 8016458:	5e9b      	ldrsh	r3, [r3, r2]
 801645a:	2b00      	cmp	r3, #0
 801645c:	db00      	blt.n	8016460 <PCD_EP_ISR_Handler+0x188>
 801645e:	e32d      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	881b      	ldrh	r3, [r3, #0]
 8016466:	b29a      	uxth	r2, r3
 8016468:	201e      	movs	r0, #30
 801646a:	183b      	adds	r3, r7, r0
 801646c:	496c      	ldr	r1, [pc, #432]	@ (8016620 <PCD_EP_ISR_Handler+0x348>)
 801646e:	400a      	ands	r2, r1
 8016470:	801a      	strh	r2, [r3, #0]
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	183a      	adds	r2, r7, r0
 8016478:	8812      	ldrh	r2, [r2, #0]
 801647a:	2180      	movs	r1, #128	@ 0x80
 801647c:	430a      	orrs	r2, r1
 801647e:	b292      	uxth	r2, r2
 8016480:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	2250      	movs	r2, #80	@ 0x50
 8016488:	5a9b      	ldrh	r3, [r3, r2]
 801648a:	b29b      	uxth	r3, r3
 801648c:	001a      	movs	r2, r3
 801648e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	00db      	lsls	r3, r3, #3
 8016494:	18d2      	adds	r2, r2, r3
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	18d3      	adds	r3, r2, r3
 801649c:	4a5f      	ldr	r2, [pc, #380]	@ (801661c <PCD_EP_ISR_Handler+0x344>)
 801649e:	4694      	mov	ip, r2
 80164a0:	4463      	add	r3, ip
 80164a2:	881b      	ldrh	r3, [r3, #0]
 80164a4:	059b      	lsls	r3, r3, #22
 80164a6:	0d9a      	lsrs	r2, r3, #22
 80164a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80164ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164ae:	69db      	ldr	r3, [r3, #28]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d01a      	beq.n	80164ea <PCD_EP_ISR_Handler+0x212>
 80164b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164b6:	695b      	ldr	r3, [r3, #20]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d016      	beq.n	80164ea <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6818      	ldr	r0, [r3, #0]
 80164c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164c2:	6959      	ldr	r1, [r3, #20]
 80164c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80164c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80164cc:	b29b      	uxth	r3, r3
 80164ce:	f007 f9e4 	bl	801d89a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80164d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164d4:	695a      	ldr	r2, [r3, #20]
 80164d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164d8:	69db      	ldr	r3, [r3, #28]
 80164da:	18d2      	adds	r2, r2, r3
 80164dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2100      	movs	r1, #0
 80164e4:	0018      	movs	r0, r3
 80164e6:	f009 f9f2 	bl	801f8ce <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	681a      	ldr	r2, [r3, #0]
 80164ee:	214a      	movs	r1, #74	@ 0x4a
 80164f0:	187b      	adds	r3, r7, r1
 80164f2:	8812      	ldrh	r2, [r2, #0]
 80164f4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80164f6:	187b      	adds	r3, r7, r1
 80164f8:	881a      	ldrh	r2, [r3, #0]
 80164fa:	2380      	movs	r3, #128	@ 0x80
 80164fc:	011b      	lsls	r3, r3, #4
 80164fe:	4013      	ands	r3, r2
 8016500:	d000      	beq.n	8016504 <PCD_EP_ISR_Handler+0x22c>
 8016502:	e2db      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
 8016504:	187b      	adds	r3, r7, r1
 8016506:	881a      	ldrh	r2, [r3, #0]
 8016508:	23c0      	movs	r3, #192	@ 0xc0
 801650a:	019b      	lsls	r3, r3, #6
 801650c:	401a      	ands	r2, r3
 801650e:	23c0      	movs	r3, #192	@ 0xc0
 8016510:	019b      	lsls	r3, r3, #6
 8016512:	429a      	cmp	r2, r3
 8016514:	d100      	bne.n	8016518 <PCD_EP_ISR_Handler+0x240>
 8016516:	e2d1      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	61bb      	str	r3, [r7, #24]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	2250      	movs	r2, #80	@ 0x50
 8016524:	5a9b      	ldrh	r3, [r3, r2]
 8016526:	b29b      	uxth	r3, r3
 8016528:	001a      	movs	r2, r3
 801652a:	69bb      	ldr	r3, [r7, #24]
 801652c:	189b      	adds	r3, r3, r2
 801652e:	61bb      	str	r3, [r7, #24]
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	4a3a      	ldr	r2, [pc, #232]	@ (801661c <PCD_EP_ISR_Handler+0x344>)
 8016534:	4694      	mov	ip, r2
 8016536:	4463      	add	r3, ip
 8016538:	617b      	str	r3, [r7, #20]
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	881b      	ldrh	r3, [r3, #0]
 801653e:	b29b      	uxth	r3, r3
 8016540:	059b      	lsls	r3, r3, #22
 8016542:	0d9b      	lsrs	r3, r3, #22
 8016544:	b29a      	uxth	r2, r3
 8016546:	697b      	ldr	r3, [r7, #20]
 8016548:	801a      	strh	r2, [r3, #0]
 801654a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801654c:	691b      	ldr	r3, [r3, #16]
 801654e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016550:	d91a      	bls.n	8016588 <PCD_EP_ISR_Handler+0x2b0>
 8016552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016554:	691b      	ldr	r3, [r3, #16]
 8016556:	095b      	lsrs	r3, r3, #5
 8016558:	647b      	str	r3, [r7, #68]	@ 0x44
 801655a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801655c:	691b      	ldr	r3, [r3, #16]
 801655e:	221f      	movs	r2, #31
 8016560:	4013      	ands	r3, r2
 8016562:	d102      	bne.n	801656a <PCD_EP_ISR_Handler+0x292>
 8016564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016566:	3b01      	subs	r3, #1
 8016568:	647b      	str	r3, [r7, #68]	@ 0x44
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	881b      	ldrh	r3, [r3, #0]
 801656e:	b29a      	uxth	r2, r3
 8016570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016572:	b29b      	uxth	r3, r3
 8016574:	029b      	lsls	r3, r3, #10
 8016576:	b29b      	uxth	r3, r3
 8016578:	4313      	orrs	r3, r2
 801657a:	b29b      	uxth	r3, r3
 801657c:	4a25      	ldr	r2, [pc, #148]	@ (8016614 <PCD_EP_ISR_Handler+0x33c>)
 801657e:	4313      	orrs	r3, r2
 8016580:	b29a      	uxth	r2, r3
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	801a      	strh	r2, [r3, #0]
 8016586:	e023      	b.n	80165d0 <PCD_EP_ISR_Handler+0x2f8>
 8016588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801658a:	691b      	ldr	r3, [r3, #16]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d108      	bne.n	80165a2 <PCD_EP_ISR_Handler+0x2ca>
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	881b      	ldrh	r3, [r3, #0]
 8016594:	b29b      	uxth	r3, r3
 8016596:	4a1f      	ldr	r2, [pc, #124]	@ (8016614 <PCD_EP_ISR_Handler+0x33c>)
 8016598:	4313      	orrs	r3, r2
 801659a:	b29a      	uxth	r2, r3
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	801a      	strh	r2, [r3, #0]
 80165a0:	e016      	b.n	80165d0 <PCD_EP_ISR_Handler+0x2f8>
 80165a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165a4:	691b      	ldr	r3, [r3, #16]
 80165a6:	085b      	lsrs	r3, r3, #1
 80165a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80165aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165ac:	691b      	ldr	r3, [r3, #16]
 80165ae:	2201      	movs	r2, #1
 80165b0:	4013      	ands	r3, r2
 80165b2:	d002      	beq.n	80165ba <PCD_EP_ISR_Handler+0x2e2>
 80165b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80165b6:	3301      	adds	r3, #1
 80165b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	881b      	ldrh	r3, [r3, #0]
 80165be:	b29a      	uxth	r2, r3
 80165c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80165c2:	b29b      	uxth	r3, r3
 80165c4:	029b      	lsls	r3, r3, #10
 80165c6:	b29b      	uxth	r3, r3
 80165c8:	4313      	orrs	r3, r2
 80165ca:	b29a      	uxth	r2, r3
 80165cc:	697b      	ldr	r3, [r7, #20]
 80165ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	881b      	ldrh	r3, [r3, #0]
 80165d6:	b29a      	uxth	r2, r3
 80165d8:	2012      	movs	r0, #18
 80165da:	183b      	adds	r3, r7, r0
 80165dc:	4911      	ldr	r1, [pc, #68]	@ (8016624 <PCD_EP_ISR_Handler+0x34c>)
 80165de:	400a      	ands	r2, r1
 80165e0:	801a      	strh	r2, [r3, #0]
 80165e2:	183b      	adds	r3, r7, r0
 80165e4:	183a      	adds	r2, r7, r0
 80165e6:	8812      	ldrh	r2, [r2, #0]
 80165e8:	2180      	movs	r1, #128	@ 0x80
 80165ea:	0149      	lsls	r1, r1, #5
 80165ec:	404a      	eors	r2, r1
 80165ee:	801a      	strh	r2, [r3, #0]
 80165f0:	183b      	adds	r3, r7, r0
 80165f2:	183a      	adds	r2, r7, r0
 80165f4:	8812      	ldrh	r2, [r2, #0]
 80165f6:	2180      	movs	r1, #128	@ 0x80
 80165f8:	0189      	lsls	r1, r1, #6
 80165fa:	404a      	eors	r2, r1
 80165fc:	801a      	strh	r2, [r3, #0]
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	183a      	adds	r2, r7, r0
 8016604:	8812      	ldrh	r2, [r2, #0]
 8016606:	4908      	ldr	r1, [pc, #32]	@ (8016628 <PCD_EP_ISR_Handler+0x350>)
 8016608:	430a      	orrs	r2, r1
 801660a:	b292      	uxth	r2, r2
 801660c:	801a      	strh	r2, [r3, #0]
 801660e:	e255      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
 8016610:	ffff8f0f 	.word	0xffff8f0f
 8016614:	ffff8000 	.word	0xffff8000
 8016618:	00000402 	.word	0x00000402
 801661c:	00000406 	.word	0x00000406
 8016620:	00000f8f 	.word	0x00000f8f
 8016624:	ffffbf8f 	.word	0xffffbf8f
 8016628:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	001a      	movs	r2, r3
 8016632:	204d      	movs	r0, #77	@ 0x4d
 8016634:	183b      	adds	r3, r7, r0
 8016636:	781b      	ldrb	r3, [r3, #0]
 8016638:	009b      	lsls	r3, r3, #2
 801663a:	18d2      	adds	r2, r2, r3
 801663c:	214a      	movs	r1, #74	@ 0x4a
 801663e:	187b      	adds	r3, r7, r1
 8016640:	8812      	ldrh	r2, [r2, #0]
 8016642:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8016644:	187b      	adds	r3, r7, r1
 8016646:	2200      	movs	r2, #0
 8016648:	5e9b      	ldrsh	r3, [r3, r2]
 801664a:	2b00      	cmp	r3, #0
 801664c:	db00      	blt.n	8016650 <PCD_EP_ISR_Handler+0x378>
 801664e:	e0fa      	b.n	8016846 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	001a      	movs	r2, r3
 8016656:	183b      	adds	r3, r7, r0
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	009b      	lsls	r3, r3, #2
 801665c:	18d3      	adds	r3, r2, r3
 801665e:	881b      	ldrh	r3, [r3, #0]
 8016660:	b29a      	uxth	r2, r3
 8016662:	2448      	movs	r4, #72	@ 0x48
 8016664:	193b      	adds	r3, r7, r4
 8016666:	49d1      	ldr	r1, [pc, #836]	@ (80169ac <PCD_EP_ISR_Handler+0x6d4>)
 8016668:	400a      	ands	r2, r1
 801666a:	801a      	strh	r2, [r3, #0]
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	001a      	movs	r2, r3
 8016672:	183b      	adds	r3, r7, r0
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	18d3      	adds	r3, r2, r3
 801667a:	193a      	adds	r2, r7, r4
 801667c:	8812      	ldrh	r2, [r2, #0]
 801667e:	2180      	movs	r1, #128	@ 0x80
 8016680:	430a      	orrs	r2, r1
 8016682:	b292      	uxth	r2, r2
 8016684:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8016686:	183b      	adds	r3, r7, r0
 8016688:	781a      	ldrb	r2, [r3, #0]
 801668a:	0013      	movs	r3, r2
 801668c:	009b      	lsls	r3, r3, #2
 801668e:	189b      	adds	r3, r3, r2
 8016690:	00db      	lsls	r3, r3, #3
 8016692:	3369      	adds	r3, #105	@ 0x69
 8016694:	33ff      	adds	r3, #255	@ 0xff
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	18d3      	adds	r3, r2, r3
 801669a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801669c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801669e:	7b1b      	ldrb	r3, [r3, #12]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d125      	bne.n	80166f0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	2250      	movs	r2, #80	@ 0x50
 80166aa:	5a9b      	ldrh	r3, [r3, r2]
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	001a      	movs	r2, r3
 80166b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166b2:	781b      	ldrb	r3, [r3, #0]
 80166b4:	00db      	lsls	r3, r3, #3
 80166b6:	18d2      	adds	r2, r2, r3
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	18d3      	adds	r3, r2, r3
 80166be:	4abc      	ldr	r2, [pc, #752]	@ (80169b0 <PCD_EP_ISR_Handler+0x6d8>)
 80166c0:	4694      	mov	ip, r2
 80166c2:	4463      	add	r3, ip
 80166c4:	881a      	ldrh	r2, [r3, #0]
 80166c6:	2450      	movs	r4, #80	@ 0x50
 80166c8:	193b      	adds	r3, r7, r4
 80166ca:	0592      	lsls	r2, r2, #22
 80166cc:	0d92      	lsrs	r2, r2, #22
 80166ce:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80166d0:	193b      	adds	r3, r7, r4
 80166d2:	881b      	ldrh	r3, [r3, #0]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d100      	bne.n	80166da <PCD_EP_ISR_Handler+0x402>
 80166d8:	e08d      	b.n	80167f6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6818      	ldr	r0, [r3, #0]
 80166de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166e0:	6959      	ldr	r1, [r3, #20]
 80166e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166e4:	88da      	ldrh	r2, [r3, #6]
 80166e6:	193b      	adds	r3, r7, r4
 80166e8:	881b      	ldrh	r3, [r3, #0]
 80166ea:	f007 f8d6 	bl	801d89a <USB_ReadPMA>
 80166ee:	e082      	b.n	80167f6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80166f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166f2:	78db      	ldrb	r3, [r3, #3]
 80166f4:	2b02      	cmp	r3, #2
 80166f6:	d10c      	bne.n	8016712 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80166f8:	2350      	movs	r3, #80	@ 0x50
 80166fa:	18fc      	adds	r4, r7, r3
 80166fc:	234a      	movs	r3, #74	@ 0x4a
 80166fe:	18fb      	adds	r3, r7, r3
 8016700:	881a      	ldrh	r2, [r3, #0]
 8016702:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	0018      	movs	r0, r3
 8016708:	f000 f9ec 	bl	8016ae4 <HAL_PCD_EP_DB_Receive>
 801670c:	0003      	movs	r3, r0
 801670e:	8023      	strh	r3, [r4, #0]
 8016710:	e071      	b.n	80167f6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	001a      	movs	r2, r3
 8016718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	009b      	lsls	r3, r3, #2
 801671e:	18d3      	adds	r3, r2, r3
 8016720:	881b      	ldrh	r3, [r3, #0]
 8016722:	b29a      	uxth	r2, r3
 8016724:	2052      	movs	r0, #82	@ 0x52
 8016726:	183b      	adds	r3, r7, r0
 8016728:	49a2      	ldr	r1, [pc, #648]	@ (80169b4 <PCD_EP_ISR_Handler+0x6dc>)
 801672a:	400a      	ands	r2, r1
 801672c:	801a      	strh	r2, [r3, #0]
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	001a      	movs	r2, r3
 8016734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	009b      	lsls	r3, r3, #2
 801673a:	18d3      	adds	r3, r2, r3
 801673c:	183a      	adds	r2, r7, r0
 801673e:	8812      	ldrh	r2, [r2, #0]
 8016740:	499d      	ldr	r1, [pc, #628]	@ (80169b8 <PCD_EP_ISR_Handler+0x6e0>)
 8016742:	430a      	orrs	r2, r1
 8016744:	b292      	uxth	r2, r2
 8016746:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	001a      	movs	r2, r3
 801674e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016750:	781b      	ldrb	r3, [r3, #0]
 8016752:	009b      	lsls	r3, r3, #2
 8016754:	18d3      	adds	r3, r2, r3
 8016756:	881b      	ldrh	r3, [r3, #0]
 8016758:	b29b      	uxth	r3, r3
 801675a:	001a      	movs	r2, r3
 801675c:	2380      	movs	r3, #128	@ 0x80
 801675e:	01db      	lsls	r3, r3, #7
 8016760:	4013      	ands	r3, r2
 8016762:	d024      	beq.n	80167ae <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	2250      	movs	r2, #80	@ 0x50
 801676a:	5a9b      	ldrh	r3, [r3, r2]
 801676c:	b29b      	uxth	r3, r3
 801676e:	001a      	movs	r2, r3
 8016770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	00db      	lsls	r3, r3, #3
 8016776:	18d2      	adds	r2, r2, r3
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	18d3      	adds	r3, r2, r3
 801677e:	4a8f      	ldr	r2, [pc, #572]	@ (80169bc <PCD_EP_ISR_Handler+0x6e4>)
 8016780:	4694      	mov	ip, r2
 8016782:	4463      	add	r3, ip
 8016784:	881a      	ldrh	r2, [r3, #0]
 8016786:	2450      	movs	r4, #80	@ 0x50
 8016788:	193b      	adds	r3, r7, r4
 801678a:	0592      	lsls	r2, r2, #22
 801678c:	0d92      	lsrs	r2, r2, #22
 801678e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8016790:	193b      	adds	r3, r7, r4
 8016792:	881b      	ldrh	r3, [r3, #0]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d02e      	beq.n	80167f6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6818      	ldr	r0, [r3, #0]
 801679c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801679e:	6959      	ldr	r1, [r3, #20]
 80167a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167a2:	891a      	ldrh	r2, [r3, #8]
 80167a4:	193b      	adds	r3, r7, r4
 80167a6:	881b      	ldrh	r3, [r3, #0]
 80167a8:	f007 f877 	bl	801d89a <USB_ReadPMA>
 80167ac:	e023      	b.n	80167f6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2250      	movs	r2, #80	@ 0x50
 80167b4:	5a9b      	ldrh	r3, [r3, r2]
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	001a      	movs	r2, r3
 80167ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167bc:	781b      	ldrb	r3, [r3, #0]
 80167be:	00db      	lsls	r3, r3, #3
 80167c0:	18d2      	adds	r2, r2, r3
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	18d3      	adds	r3, r2, r3
 80167c8:	4a79      	ldr	r2, [pc, #484]	@ (80169b0 <PCD_EP_ISR_Handler+0x6d8>)
 80167ca:	4694      	mov	ip, r2
 80167cc:	4463      	add	r3, ip
 80167ce:	881a      	ldrh	r2, [r3, #0]
 80167d0:	2450      	movs	r4, #80	@ 0x50
 80167d2:	193b      	adds	r3, r7, r4
 80167d4:	0592      	lsls	r2, r2, #22
 80167d6:	0d92      	lsrs	r2, r2, #22
 80167d8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80167da:	193b      	adds	r3, r7, r4
 80167dc:	881b      	ldrh	r3, [r3, #0]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d009      	beq.n	80167f6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	6818      	ldr	r0, [r3, #0]
 80167e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167e8:	6959      	ldr	r1, [r3, #20]
 80167ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167ec:	895a      	ldrh	r2, [r3, #10]
 80167ee:	193b      	adds	r3, r7, r4
 80167f0:	881b      	ldrh	r3, [r3, #0]
 80167f2:	f007 f852 	bl	801d89a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80167f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167f8:	69da      	ldr	r2, [r3, #28]
 80167fa:	2150      	movs	r1, #80	@ 0x50
 80167fc:	187b      	adds	r3, r7, r1
 80167fe:	881b      	ldrh	r3, [r3, #0]
 8016800:	18d2      	adds	r2, r2, r3
 8016802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016804:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8016806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016808:	695a      	ldr	r2, [r3, #20]
 801680a:	187b      	adds	r3, r7, r1
 801680c:	881b      	ldrh	r3, [r3, #0]
 801680e:	18d2      	adds	r2, r2, r3
 8016810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016812:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8016814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016816:	699b      	ldr	r3, [r3, #24]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d005      	beq.n	8016828 <PCD_EP_ISR_Handler+0x550>
 801681c:	187b      	adds	r3, r7, r1
 801681e:	881a      	ldrh	r2, [r3, #0]
 8016820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016822:	691b      	ldr	r3, [r3, #16]
 8016824:	429a      	cmp	r2, r3
 8016826:	d207      	bcs.n	8016838 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8016828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801682a:	781a      	ldrb	r2, [r3, #0]
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	0011      	movs	r1, r2
 8016830:	0018      	movs	r0, r3
 8016832:	f009 f84c 	bl	801f8ce <HAL_PCD_DataOutStageCallback>
 8016836:	e006      	b.n	8016846 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801683e:	0011      	movs	r1, r2
 8016840:	0018      	movs	r0, r3
 8016842:	f005 fd6f 	bl	801c324 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8016846:	244a      	movs	r4, #74	@ 0x4a
 8016848:	193b      	adds	r3, r7, r4
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	2280      	movs	r2, #128	@ 0x80
 801684e:	4013      	ands	r3, r2
 8016850:	d100      	bne.n	8016854 <PCD_EP_ISR_Handler+0x57c>
 8016852:	e133      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8016854:	204d      	movs	r0, #77	@ 0x4d
 8016856:	183b      	adds	r3, r7, r0
 8016858:	781b      	ldrb	r3, [r3, #0]
 801685a:	1c5a      	adds	r2, r3, #1
 801685c:	0013      	movs	r3, r2
 801685e:	009b      	lsls	r3, r3, #2
 8016860:	189b      	adds	r3, r3, r2
 8016862:	00db      	lsls	r3, r3, #3
 8016864:	687a      	ldr	r2, [r7, #4]
 8016866:	18d3      	adds	r3, r2, r3
 8016868:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	001a      	movs	r2, r3
 8016870:	183b      	adds	r3, r7, r0
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	009b      	lsls	r3, r3, #2
 8016876:	18d3      	adds	r3, r2, r3
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	b29a      	uxth	r2, r3
 801687c:	2542      	movs	r5, #66	@ 0x42
 801687e:	197b      	adds	r3, r7, r5
 8016880:	494f      	ldr	r1, [pc, #316]	@ (80169c0 <PCD_EP_ISR_Handler+0x6e8>)
 8016882:	400a      	ands	r2, r1
 8016884:	801a      	strh	r2, [r3, #0]
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	001a      	movs	r2, r3
 801688c:	183b      	adds	r3, r7, r0
 801688e:	781b      	ldrb	r3, [r3, #0]
 8016890:	009b      	lsls	r3, r3, #2
 8016892:	18d3      	adds	r3, r2, r3
 8016894:	197a      	adds	r2, r7, r5
 8016896:	8812      	ldrh	r2, [r2, #0]
 8016898:	494a      	ldr	r1, [pc, #296]	@ (80169c4 <PCD_EP_ISR_Handler+0x6ec>)
 801689a:	430a      	orrs	r2, r1
 801689c:	b292      	uxth	r2, r2
 801689e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80168a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168a2:	78db      	ldrb	r3, [r3, #3]
 80168a4:	2b01      	cmp	r3, #1
 80168a6:	d000      	beq.n	80168aa <PCD_EP_ISR_Handler+0x5d2>
 80168a8:	e0af      	b.n	8016a0a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80168aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168ac:	2200      	movs	r2, #0
 80168ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80168b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168b2:	7b1b      	ldrb	r3, [r3, #12]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d100      	bne.n	80168ba <PCD_EP_ISR_Handler+0x5e2>
 80168b8:	e09f      	b.n	80169fa <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80168ba:	193b      	adds	r3, r7, r4
 80168bc:	881b      	ldrh	r3, [r3, #0]
 80168be:	2240      	movs	r2, #64	@ 0x40
 80168c0:	4013      	ands	r3, r2
 80168c2:	d046      	beq.n	8016952 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80168c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168c6:	785b      	ldrb	r3, [r3, #1]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d125      	bne.n	8016918 <PCD_EP_ISR_Handler+0x640>
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	2250      	movs	r2, #80	@ 0x50
 80168d8:	5a9b      	ldrh	r3, [r3, r2]
 80168da:	b29b      	uxth	r3, r3
 80168dc:	001a      	movs	r2, r3
 80168de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168e0:	189b      	adds	r3, r3, r2
 80168e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80168e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	00da      	lsls	r2, r3, #3
 80168ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168ec:	18d3      	adds	r3, r2, r3
 80168ee:	4a33      	ldr	r2, [pc, #204]	@ (80169bc <PCD_EP_ISR_Handler+0x6e4>)
 80168f0:	4694      	mov	ip, r2
 80168f2:	4463      	add	r3, ip
 80168f4:	623b      	str	r3, [r7, #32]
 80168f6:	6a3b      	ldr	r3, [r7, #32]
 80168f8:	881b      	ldrh	r3, [r3, #0]
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	059b      	lsls	r3, r3, #22
 80168fe:	0d9b      	lsrs	r3, r3, #22
 8016900:	b29a      	uxth	r2, r3
 8016902:	6a3b      	ldr	r3, [r7, #32]
 8016904:	801a      	strh	r2, [r3, #0]
 8016906:	6a3b      	ldr	r3, [r7, #32]
 8016908:	881b      	ldrh	r3, [r3, #0]
 801690a:	b29b      	uxth	r3, r3
 801690c:	4a2d      	ldr	r2, [pc, #180]	@ (80169c4 <PCD_EP_ISR_Handler+0x6ec>)
 801690e:	4313      	orrs	r3, r2
 8016910:	b29a      	uxth	r2, r3
 8016912:	6a3b      	ldr	r3, [r7, #32]
 8016914:	801a      	strh	r2, [r3, #0]
 8016916:	e070      	b.n	80169fa <PCD_EP_ISR_Handler+0x722>
 8016918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801691a:	785b      	ldrb	r3, [r3, #1]
 801691c:	2b01      	cmp	r3, #1
 801691e:	d16c      	bne.n	80169fa <PCD_EP_ISR_Handler+0x722>
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2250      	movs	r2, #80	@ 0x50
 801692c:	5a9b      	ldrh	r3, [r3, r2]
 801692e:	b29b      	uxth	r3, r3
 8016930:	001a      	movs	r2, r3
 8016932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016934:	189b      	adds	r3, r3, r2
 8016936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	00da      	lsls	r2, r3, #3
 801693e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016940:	18d3      	adds	r3, r2, r3
 8016942:	4a1e      	ldr	r2, [pc, #120]	@ (80169bc <PCD_EP_ISR_Handler+0x6e4>)
 8016944:	4694      	mov	ip, r2
 8016946:	4463      	add	r3, ip
 8016948:	62bb      	str	r3, [r7, #40]	@ 0x28
 801694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801694c:	2200      	movs	r2, #0
 801694e:	801a      	strh	r2, [r3, #0]
 8016950:	e053      	b.n	80169fa <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801695a:	785b      	ldrb	r3, [r3, #1]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d133      	bne.n	80169c8 <PCD_EP_ISR_Handler+0x6f0>
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	637b      	str	r3, [r7, #52]	@ 0x34
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	2250      	movs	r2, #80	@ 0x50
 801696c:	5a9b      	ldrh	r3, [r3, r2]
 801696e:	b29b      	uxth	r3, r3
 8016970:	001a      	movs	r2, r3
 8016972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016974:	189b      	adds	r3, r3, r2
 8016976:	637b      	str	r3, [r7, #52]	@ 0x34
 8016978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	00da      	lsls	r2, r3, #3
 801697e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016980:	18d3      	adds	r3, r2, r3
 8016982:	4a0b      	ldr	r2, [pc, #44]	@ (80169b0 <PCD_EP_ISR_Handler+0x6d8>)
 8016984:	4694      	mov	ip, r2
 8016986:	4463      	add	r3, ip
 8016988:	633b      	str	r3, [r7, #48]	@ 0x30
 801698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801698c:	881b      	ldrh	r3, [r3, #0]
 801698e:	b29b      	uxth	r3, r3
 8016990:	059b      	lsls	r3, r3, #22
 8016992:	0d9b      	lsrs	r3, r3, #22
 8016994:	b29a      	uxth	r2, r3
 8016996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016998:	801a      	strh	r2, [r3, #0]
 801699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801699c:	881b      	ldrh	r3, [r3, #0]
 801699e:	b29b      	uxth	r3, r3
 80169a0:	4a08      	ldr	r2, [pc, #32]	@ (80169c4 <PCD_EP_ISR_Handler+0x6ec>)
 80169a2:	4313      	orrs	r3, r2
 80169a4:	b29a      	uxth	r2, r3
 80169a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169a8:	801a      	strh	r2, [r3, #0]
 80169aa:	e026      	b.n	80169fa <PCD_EP_ISR_Handler+0x722>
 80169ac:	00000f8f 	.word	0x00000f8f
 80169b0:	00000406 	.word	0x00000406
 80169b4:	ffff8f8f 	.word	0xffff8f8f
 80169b8:	ffff80c0 	.word	0xffff80c0
 80169bc:	00000402 	.word	0x00000402
 80169c0:	ffff8f0f 	.word	0xffff8f0f
 80169c4:	ffff8000 	.word	0xffff8000
 80169c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169ca:	785b      	ldrb	r3, [r3, #1]
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d114      	bne.n	80169fa <PCD_EP_ISR_Handler+0x722>
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	2250      	movs	r2, #80	@ 0x50
 80169d6:	5a9b      	ldrh	r3, [r3, r2]
 80169d8:	b29b      	uxth	r3, r3
 80169da:	001a      	movs	r2, r3
 80169dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80169de:	189b      	adds	r3, r3, r2
 80169e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80169e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	00da      	lsls	r2, r3, #3
 80169e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80169ea:	18d3      	adds	r3, r2, r3
 80169ec:	4a3b      	ldr	r2, [pc, #236]	@ (8016adc <PCD_EP_ISR_Handler+0x804>)
 80169ee:	4694      	mov	ip, r2
 80169f0:	4463      	add	r3, ip
 80169f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80169f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169f6:	2200      	movs	r2, #0
 80169f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80169fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169fc:	781a      	ldrb	r2, [r3, #0]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	0011      	movs	r1, r2
 8016a02:	0018      	movs	r0, r3
 8016a04:	f008 ff84 	bl	801f910 <HAL_PCD_DataInStageCallback>
 8016a08:	e058      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8016a0a:	234a      	movs	r3, #74	@ 0x4a
 8016a0c:	18fb      	adds	r3, r7, r3
 8016a0e:	881a      	ldrh	r2, [r3, #0]
 8016a10:	2380      	movs	r3, #128	@ 0x80
 8016a12:	005b      	lsls	r3, r3, #1
 8016a14:	4013      	ands	r3, r2
 8016a16:	d149      	bne.n	8016aac <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2250      	movs	r2, #80	@ 0x50
 8016a1e:	5a9b      	ldrh	r3, [r3, r2]
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	001a      	movs	r2, r3
 8016a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	00db      	lsls	r3, r3, #3
 8016a2a:	18d2      	adds	r2, r2, r3
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	18d3      	adds	r3, r2, r3
 8016a32:	4a2b      	ldr	r2, [pc, #172]	@ (8016ae0 <PCD_EP_ISR_Handler+0x808>)
 8016a34:	4694      	mov	ip, r2
 8016a36:	4463      	add	r3, ip
 8016a38:	881a      	ldrh	r2, [r3, #0]
 8016a3a:	2140      	movs	r1, #64	@ 0x40
 8016a3c:	187b      	adds	r3, r7, r1
 8016a3e:	0592      	lsls	r2, r2, #22
 8016a40:	0d92      	lsrs	r2, r2, #22
 8016a42:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8016a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a46:	699a      	ldr	r2, [r3, #24]
 8016a48:	187b      	adds	r3, r7, r1
 8016a4a:	881b      	ldrh	r3, [r3, #0]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d907      	bls.n	8016a60 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8016a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a52:	699a      	ldr	r2, [r3, #24]
 8016a54:	187b      	adds	r3, r7, r1
 8016a56:	881b      	ldrh	r3, [r3, #0]
 8016a58:	1ad2      	subs	r2, r2, r3
 8016a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a5c:	619a      	str	r2, [r3, #24]
 8016a5e:	e002      	b.n	8016a66 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8016a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a62:	2200      	movs	r2, #0
 8016a64:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8016a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a68:	699b      	ldr	r3, [r3, #24]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d107      	bne.n	8016a7e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8016a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a70:	781a      	ldrb	r2, [r3, #0]
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	0011      	movs	r1, r2
 8016a76:	0018      	movs	r0, r3
 8016a78:	f008 ff4a 	bl	801f910 <HAL_PCD_DataInStageCallback>
 8016a7c:	e01e      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8016a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a80:	695a      	ldr	r2, [r3, #20]
 8016a82:	2140      	movs	r1, #64	@ 0x40
 8016a84:	187b      	adds	r3, r7, r1
 8016a86:	881b      	ldrh	r3, [r3, #0]
 8016a88:	18d2      	adds	r2, r2, r3
 8016a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a8c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8016a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a90:	69da      	ldr	r2, [r3, #28]
 8016a92:	187b      	adds	r3, r7, r1
 8016a94:	881b      	ldrh	r3, [r3, #0]
 8016a96:	18d2      	adds	r2, r2, r3
 8016a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a9a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016aa2:	0011      	movs	r1, r2
 8016aa4:	0018      	movs	r0, r3
 8016aa6:	f005 fc3d 	bl	801c324 <USB_EPStartXfer>
 8016aaa:	e007      	b.n	8016abc <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8016aac:	234a      	movs	r3, #74	@ 0x4a
 8016aae:	18fb      	adds	r3, r7, r3
 8016ab0:	881a      	ldrh	r2, [r3, #0]
 8016ab2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	0018      	movs	r0, r3
 8016ab8:	f000 f930 	bl	8016d1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2244      	movs	r2, #68	@ 0x44
 8016ac2:	5a9b      	ldrh	r3, [r3, r2]
 8016ac4:	b29b      	uxth	r3, r3
 8016ac6:	b21b      	sxth	r3, r3
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	da01      	bge.n	8016ad0 <PCD_EP_ISR_Handler+0x7f8>
 8016acc:	f7ff fc0a 	bl	80162e4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8016ad0:	2300      	movs	r3, #0
}
 8016ad2:	0018      	movs	r0, r3
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	b016      	add	sp, #88	@ 0x58
 8016ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8016ada:	46c0      	nop			@ (mov r8, r8)
 8016adc:	00000406 	.word	0x00000406
 8016ae0:	00000402 	.word	0x00000402

08016ae4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8016ae4:	b590      	push	{r4, r7, lr}
 8016ae6:	b089      	sub	sp, #36	@ 0x24
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	60f8      	str	r0, [r7, #12]
 8016aec:	60b9      	str	r1, [r7, #8]
 8016aee:	1dbb      	adds	r3, r7, #6
 8016af0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016af2:	1dbb      	adds	r3, r7, #6
 8016af4:	881a      	ldrh	r2, [r3, #0]
 8016af6:	2380      	movs	r3, #128	@ 0x80
 8016af8:	01db      	lsls	r3, r3, #7
 8016afa:	4013      	ands	r3, r2
 8016afc:	d100      	bne.n	8016b00 <HAL_PCD_EP_DB_Receive+0x1c>
 8016afe:	e07d      	b.n	8016bfc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	2250      	movs	r2, #80	@ 0x50
 8016b06:	5a9b      	ldrh	r3, [r3, r2]
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	001a      	movs	r2, r3
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	00db      	lsls	r3, r3, #3
 8016b12:	18d2      	adds	r2, r2, r3
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	18d3      	adds	r3, r2, r3
 8016b1a:	4a7a      	ldr	r2, [pc, #488]	@ (8016d04 <HAL_PCD_EP_DB_Receive+0x220>)
 8016b1c:	4694      	mov	ip, r2
 8016b1e:	4463      	add	r3, ip
 8016b20:	881a      	ldrh	r2, [r3, #0]
 8016b22:	211a      	movs	r1, #26
 8016b24:	187b      	adds	r3, r7, r1
 8016b26:	0592      	lsls	r2, r2, #22
 8016b28:	0d92      	lsrs	r2, r2, #22
 8016b2a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	699a      	ldr	r2, [r3, #24]
 8016b30:	187b      	adds	r3, r7, r1
 8016b32:	881b      	ldrh	r3, [r3, #0]
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d307      	bcc.n	8016b48 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8016b38:	68bb      	ldr	r3, [r7, #8]
 8016b3a:	699a      	ldr	r2, [r3, #24]
 8016b3c:	187b      	adds	r3, r7, r1
 8016b3e:	881b      	ldrh	r3, [r3, #0]
 8016b40:	1ad2      	subs	r2, r2, r3
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	619a      	str	r2, [r3, #24]
 8016b46:	e002      	b.n	8016b4e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	699b      	ldr	r3, [r3, #24]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d121      	bne.n	8016b9a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	001a      	movs	r2, r3
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	009b      	lsls	r3, r3, #2
 8016b62:	18d3      	adds	r3, r2, r3
 8016b64:	881b      	ldrh	r3, [r3, #0]
 8016b66:	b29a      	uxth	r2, r3
 8016b68:	2018      	movs	r0, #24
 8016b6a:	183b      	adds	r3, r7, r0
 8016b6c:	4966      	ldr	r1, [pc, #408]	@ (8016d08 <HAL_PCD_EP_DB_Receive+0x224>)
 8016b6e:	400a      	ands	r2, r1
 8016b70:	801a      	strh	r2, [r3, #0]
 8016b72:	183b      	adds	r3, r7, r0
 8016b74:	183a      	adds	r2, r7, r0
 8016b76:	8812      	ldrh	r2, [r2, #0]
 8016b78:	2180      	movs	r1, #128	@ 0x80
 8016b7a:	0189      	lsls	r1, r1, #6
 8016b7c:	404a      	eors	r2, r1
 8016b7e:	801a      	strh	r2, [r3, #0]
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	001a      	movs	r2, r3
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	009b      	lsls	r3, r3, #2
 8016b8c:	18d3      	adds	r3, r2, r3
 8016b8e:	183a      	adds	r2, r7, r0
 8016b90:	8812      	ldrh	r2, [r2, #0]
 8016b92:	495e      	ldr	r1, [pc, #376]	@ (8016d0c <HAL_PCD_EP_DB_Receive+0x228>)
 8016b94:	430a      	orrs	r2, r1
 8016b96:	b292      	uxth	r2, r2
 8016b98:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8016b9a:	1dbb      	adds	r3, r7, #6
 8016b9c:	881b      	ldrh	r3, [r3, #0]
 8016b9e:	2240      	movs	r2, #64	@ 0x40
 8016ba0:	4013      	ands	r3, r2
 8016ba2:	d01a      	beq.n	8016bda <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	001a      	movs	r2, r3
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	009b      	lsls	r3, r3, #2
 8016bb0:	18d3      	adds	r3, r2, r3
 8016bb2:	881b      	ldrh	r3, [r3, #0]
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	2016      	movs	r0, #22
 8016bb8:	183b      	adds	r3, r7, r0
 8016bba:	4955      	ldr	r1, [pc, #340]	@ (8016d10 <HAL_PCD_EP_DB_Receive+0x22c>)
 8016bbc:	400a      	ands	r2, r1
 8016bbe:	801a      	strh	r2, [r3, #0]
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	001a      	movs	r2, r3
 8016bc6:	68bb      	ldr	r3, [r7, #8]
 8016bc8:	781b      	ldrb	r3, [r3, #0]
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	18d3      	adds	r3, r2, r3
 8016bce:	183a      	adds	r2, r7, r0
 8016bd0:	8812      	ldrh	r2, [r2, #0]
 8016bd2:	4950      	ldr	r1, [pc, #320]	@ (8016d14 <HAL_PCD_EP_DB_Receive+0x230>)
 8016bd4:	430a      	orrs	r2, r1
 8016bd6:	b292      	uxth	r2, r2
 8016bd8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8016bda:	241a      	movs	r4, #26
 8016bdc:	193b      	adds	r3, r7, r4
 8016bde:	881b      	ldrh	r3, [r3, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d100      	bne.n	8016be6 <HAL_PCD_EP_DB_Receive+0x102>
 8016be4:	e086      	b.n	8016cf4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	6818      	ldr	r0, [r3, #0]
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	6959      	ldr	r1, [r3, #20]
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	891a      	ldrh	r2, [r3, #8]
 8016bf2:	193b      	adds	r3, r7, r4
 8016bf4:	881b      	ldrh	r3, [r3, #0]
 8016bf6:	f006 fe50 	bl	801d89a <USB_ReadPMA>
 8016bfa:	e07b      	b.n	8016cf4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	2250      	movs	r2, #80	@ 0x50
 8016c02:	5a9b      	ldrh	r3, [r3, r2]
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	001a      	movs	r2, r3
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	00db      	lsls	r3, r3, #3
 8016c0e:	18d2      	adds	r2, r2, r3
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	18d3      	adds	r3, r2, r3
 8016c16:	4a40      	ldr	r2, [pc, #256]	@ (8016d18 <HAL_PCD_EP_DB_Receive+0x234>)
 8016c18:	4694      	mov	ip, r2
 8016c1a:	4463      	add	r3, ip
 8016c1c:	881a      	ldrh	r2, [r3, #0]
 8016c1e:	211a      	movs	r1, #26
 8016c20:	187b      	adds	r3, r7, r1
 8016c22:	0592      	lsls	r2, r2, #22
 8016c24:	0d92      	lsrs	r2, r2, #22
 8016c26:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	699a      	ldr	r2, [r3, #24]
 8016c2c:	187b      	adds	r3, r7, r1
 8016c2e:	881b      	ldrh	r3, [r3, #0]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d307      	bcc.n	8016c44 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8016c34:	68bb      	ldr	r3, [r7, #8]
 8016c36:	699a      	ldr	r2, [r3, #24]
 8016c38:	187b      	adds	r3, r7, r1
 8016c3a:	881b      	ldrh	r3, [r3, #0]
 8016c3c:	1ad2      	subs	r2, r2, r3
 8016c3e:	68bb      	ldr	r3, [r7, #8]
 8016c40:	619a      	str	r2, [r3, #24]
 8016c42:	e002      	b.n	8016c4a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	2200      	movs	r2, #0
 8016c48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	699b      	ldr	r3, [r3, #24]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d121      	bne.n	8016c96 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	001a      	movs	r2, r3
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	009b      	lsls	r3, r3, #2
 8016c5e:	18d3      	adds	r3, r2, r3
 8016c60:	881b      	ldrh	r3, [r3, #0]
 8016c62:	b29a      	uxth	r2, r3
 8016c64:	201e      	movs	r0, #30
 8016c66:	183b      	adds	r3, r7, r0
 8016c68:	4927      	ldr	r1, [pc, #156]	@ (8016d08 <HAL_PCD_EP_DB_Receive+0x224>)
 8016c6a:	400a      	ands	r2, r1
 8016c6c:	801a      	strh	r2, [r3, #0]
 8016c6e:	183b      	adds	r3, r7, r0
 8016c70:	183a      	adds	r2, r7, r0
 8016c72:	8812      	ldrh	r2, [r2, #0]
 8016c74:	2180      	movs	r1, #128	@ 0x80
 8016c76:	0189      	lsls	r1, r1, #6
 8016c78:	404a      	eors	r2, r1
 8016c7a:	801a      	strh	r2, [r3, #0]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	001a      	movs	r2, r3
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	009b      	lsls	r3, r3, #2
 8016c88:	18d3      	adds	r3, r2, r3
 8016c8a:	183a      	adds	r2, r7, r0
 8016c8c:	8812      	ldrh	r2, [r2, #0]
 8016c8e:	491f      	ldr	r1, [pc, #124]	@ (8016d0c <HAL_PCD_EP_DB_Receive+0x228>)
 8016c90:	430a      	orrs	r2, r1
 8016c92:	b292      	uxth	r2, r2
 8016c94:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8016c96:	1dbb      	adds	r3, r7, #6
 8016c98:	881b      	ldrh	r3, [r3, #0]
 8016c9a:	2240      	movs	r2, #64	@ 0x40
 8016c9c:	4013      	ands	r3, r2
 8016c9e:	d11a      	bne.n	8016cd6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	001a      	movs	r2, r3
 8016ca6:	68bb      	ldr	r3, [r7, #8]
 8016ca8:	781b      	ldrb	r3, [r3, #0]
 8016caa:	009b      	lsls	r3, r3, #2
 8016cac:	18d3      	adds	r3, r2, r3
 8016cae:	881b      	ldrh	r3, [r3, #0]
 8016cb0:	b29a      	uxth	r2, r3
 8016cb2:	201c      	movs	r0, #28
 8016cb4:	183b      	adds	r3, r7, r0
 8016cb6:	4916      	ldr	r1, [pc, #88]	@ (8016d10 <HAL_PCD_EP_DB_Receive+0x22c>)
 8016cb8:	400a      	ands	r2, r1
 8016cba:	801a      	strh	r2, [r3, #0]
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	001a      	movs	r2, r3
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	781b      	ldrb	r3, [r3, #0]
 8016cc6:	009b      	lsls	r3, r3, #2
 8016cc8:	18d3      	adds	r3, r2, r3
 8016cca:	183a      	adds	r2, r7, r0
 8016ccc:	8812      	ldrh	r2, [r2, #0]
 8016cce:	4911      	ldr	r1, [pc, #68]	@ (8016d14 <HAL_PCD_EP_DB_Receive+0x230>)
 8016cd0:	430a      	orrs	r2, r1
 8016cd2:	b292      	uxth	r2, r2
 8016cd4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8016cd6:	241a      	movs	r4, #26
 8016cd8:	193b      	adds	r3, r7, r4
 8016cda:	881b      	ldrh	r3, [r3, #0]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d009      	beq.n	8016cf4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	6818      	ldr	r0, [r3, #0]
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	6959      	ldr	r1, [r3, #20]
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	895a      	ldrh	r2, [r3, #10]
 8016cec:	193b      	adds	r3, r7, r4
 8016cee:	881b      	ldrh	r3, [r3, #0]
 8016cf0:	f006 fdd3 	bl	801d89a <USB_ReadPMA>
    }
  }

  return count;
 8016cf4:	231a      	movs	r3, #26
 8016cf6:	18fb      	adds	r3, r7, r3
 8016cf8:	881b      	ldrh	r3, [r3, #0]
}
 8016cfa:	0018      	movs	r0, r3
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	b009      	add	sp, #36	@ 0x24
 8016d00:	bd90      	pop	{r4, r7, pc}
 8016d02:	46c0      	nop			@ (mov r8, r8)
 8016d04:	00000402 	.word	0x00000402
 8016d08:	ffffbf8f 	.word	0xffffbf8f
 8016d0c:	ffff8080 	.word	0xffff8080
 8016d10:	ffff8f8f 	.word	0xffff8f8f
 8016d14:	ffff80c0 	.word	0xffff80c0
 8016d18:	00000406 	.word	0x00000406

08016d1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b0a4      	sub	sp, #144	@ 0x90
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	1dbb      	adds	r3, r7, #6
 8016d28:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8016d2a:	1dbb      	adds	r3, r7, #6
 8016d2c:	881b      	ldrh	r3, [r3, #0]
 8016d2e:	2240      	movs	r2, #64	@ 0x40
 8016d30:	4013      	ands	r3, r2
 8016d32:	d100      	bne.n	8016d36 <HAL_PCD_EP_DB_Transmit+0x1a>
 8016d34:	e1e4      	b.n	8017100 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	2250      	movs	r2, #80	@ 0x50
 8016d3c:	5a9b      	ldrh	r3, [r3, r2]
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	001a      	movs	r2, r3
 8016d42:	68bb      	ldr	r3, [r7, #8]
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	00db      	lsls	r3, r3, #3
 8016d48:	18d2      	adds	r2, r2, r3
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	18d3      	adds	r3, r2, r3
 8016d50:	4ad0      	ldr	r2, [pc, #832]	@ (8017094 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016d52:	4694      	mov	ip, r2
 8016d54:	4463      	add	r3, ip
 8016d56:	881a      	ldrh	r2, [r3, #0]
 8016d58:	2186      	movs	r1, #134	@ 0x86
 8016d5a:	187b      	adds	r3, r7, r1
 8016d5c:	0592      	lsls	r2, r2, #22
 8016d5e:	0d92      	lsrs	r2, r2, #22
 8016d60:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8016d62:	68bb      	ldr	r3, [r7, #8]
 8016d64:	699a      	ldr	r2, [r3, #24]
 8016d66:	187b      	adds	r3, r7, r1
 8016d68:	881b      	ldrh	r3, [r3, #0]
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d907      	bls.n	8016d7e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8016d6e:	68bb      	ldr	r3, [r7, #8]
 8016d70:	699a      	ldr	r2, [r3, #24]
 8016d72:	187b      	adds	r3, r7, r1
 8016d74:	881b      	ldrh	r3, [r3, #0]
 8016d76:	1ad2      	subs	r2, r2, r3
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	619a      	str	r2, [r3, #24]
 8016d7c:	e002      	b.n	8016d84 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8016d7e:	68bb      	ldr	r3, [r7, #8]
 8016d80:	2200      	movs	r2, #0
 8016d82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	699b      	ldr	r3, [r3, #24]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d000      	beq.n	8016d8e <HAL_PCD_EP_DB_Transmit+0x72>
 8016d8c:	e0b5      	b.n	8016efa <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	785b      	ldrb	r3, [r3, #1]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d125      	bne.n	8016de2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	2250      	movs	r2, #80	@ 0x50
 8016da2:	5a9b      	ldrh	r3, [r3, r2]
 8016da4:	b29b      	uxth	r3, r3
 8016da6:	001a      	movs	r2, r3
 8016da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016daa:	189b      	adds	r3, r3, r2
 8016dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016dae:	68bb      	ldr	r3, [r7, #8]
 8016db0:	781b      	ldrb	r3, [r3, #0]
 8016db2:	00da      	lsls	r2, r3, #3
 8016db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016db6:	18d3      	adds	r3, r2, r3
 8016db8:	4ab6      	ldr	r2, [pc, #728]	@ (8017094 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016dba:	4694      	mov	ip, r2
 8016dbc:	4463      	add	r3, ip
 8016dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dc2:	881b      	ldrh	r3, [r3, #0]
 8016dc4:	b29b      	uxth	r3, r3
 8016dc6:	059b      	lsls	r3, r3, #22
 8016dc8:	0d9b      	lsrs	r3, r3, #22
 8016dca:	b29a      	uxth	r2, r3
 8016dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dce:	801a      	strh	r2, [r3, #0]
 8016dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dd2:	881b      	ldrh	r3, [r3, #0]
 8016dd4:	b29b      	uxth	r3, r3
 8016dd6:	4ab0      	ldr	r2, [pc, #704]	@ (8017098 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8016dd8:	4313      	orrs	r3, r2
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dde:	801a      	strh	r2, [r3, #0]
 8016de0:	e01b      	b.n	8016e1a <HAL_PCD_EP_DB_Transmit+0xfe>
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	785b      	ldrb	r3, [r3, #1]
 8016de6:	2b01      	cmp	r3, #1
 8016de8:	d117      	bne.n	8016e1a <HAL_PCD_EP_DB_Transmit+0xfe>
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	2250      	movs	r2, #80	@ 0x50
 8016df6:	5a9b      	ldrh	r3, [r3, r2]
 8016df8:	b29b      	uxth	r3, r3
 8016dfa:	001a      	movs	r2, r3
 8016dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016dfe:	189b      	adds	r3, r3, r2
 8016e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8016e02:	68bb      	ldr	r3, [r7, #8]
 8016e04:	781b      	ldrb	r3, [r3, #0]
 8016e06:	00da      	lsls	r2, r3, #3
 8016e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e0a:	18d3      	adds	r3, r2, r3
 8016e0c:	4aa1      	ldr	r2, [pc, #644]	@ (8017094 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016e0e:	4694      	mov	ip, r2
 8016e10:	4463      	add	r3, ip
 8016e12:	633b      	str	r3, [r7, #48]	@ 0x30
 8016e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e16:	2200      	movs	r2, #0
 8016e18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	785b      	ldrb	r3, [r3, #1]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d125      	bne.n	8016e74 <HAL_PCD_EP_DB_Transmit+0x158>
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	61fb      	str	r3, [r7, #28]
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	2250      	movs	r2, #80	@ 0x50
 8016e34:	5a9b      	ldrh	r3, [r3, r2]
 8016e36:	b29b      	uxth	r3, r3
 8016e38:	001a      	movs	r2, r3
 8016e3a:	69fb      	ldr	r3, [r7, #28]
 8016e3c:	189b      	adds	r3, r3, r2
 8016e3e:	61fb      	str	r3, [r7, #28]
 8016e40:	68bb      	ldr	r3, [r7, #8]
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	00da      	lsls	r2, r3, #3
 8016e46:	69fb      	ldr	r3, [r7, #28]
 8016e48:	18d3      	adds	r3, r2, r3
 8016e4a:	4a94      	ldr	r2, [pc, #592]	@ (801709c <HAL_PCD_EP_DB_Transmit+0x380>)
 8016e4c:	4694      	mov	ip, r2
 8016e4e:	4463      	add	r3, ip
 8016e50:	61bb      	str	r3, [r7, #24]
 8016e52:	69bb      	ldr	r3, [r7, #24]
 8016e54:	881b      	ldrh	r3, [r3, #0]
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	059b      	lsls	r3, r3, #22
 8016e5a:	0d9b      	lsrs	r3, r3, #22
 8016e5c:	b29a      	uxth	r2, r3
 8016e5e:	69bb      	ldr	r3, [r7, #24]
 8016e60:	801a      	strh	r2, [r3, #0]
 8016e62:	69bb      	ldr	r3, [r7, #24]
 8016e64:	881b      	ldrh	r3, [r3, #0]
 8016e66:	b29b      	uxth	r3, r3
 8016e68:	4a8b      	ldr	r2, [pc, #556]	@ (8017098 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8016e6a:	4313      	orrs	r3, r2
 8016e6c:	b29a      	uxth	r2, r3
 8016e6e:	69bb      	ldr	r3, [r7, #24]
 8016e70:	801a      	strh	r2, [r3, #0]
 8016e72:	e018      	b.n	8016ea6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	785b      	ldrb	r3, [r3, #1]
 8016e78:	2b01      	cmp	r3, #1
 8016e7a:	d114      	bne.n	8016ea6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	2250      	movs	r2, #80	@ 0x50
 8016e82:	5a9b      	ldrh	r3, [r3, r2]
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	001a      	movs	r2, r3
 8016e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e8a:	189b      	adds	r3, r3, r2
 8016e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	781b      	ldrb	r3, [r3, #0]
 8016e92:	00da      	lsls	r2, r3, #3
 8016e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e96:	18d3      	adds	r3, r2, r3
 8016e98:	4a80      	ldr	r2, [pc, #512]	@ (801709c <HAL_PCD_EP_DB_Transmit+0x380>)
 8016e9a:	4694      	mov	ip, r2
 8016e9c:	4463      	add	r3, ip
 8016e9e:	623b      	str	r3, [r7, #32]
 8016ea0:	6a3b      	ldr	r3, [r7, #32]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	781a      	ldrb	r2, [r3, #0]
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	0011      	movs	r1, r2
 8016eae:	0018      	movs	r0, r3
 8016eb0:	f008 fd2e 	bl	801f910 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016eb4:	1dbb      	adds	r3, r7, #6
 8016eb6:	881a      	ldrh	r2, [r3, #0]
 8016eb8:	2380      	movs	r3, #128	@ 0x80
 8016eba:	01db      	lsls	r3, r3, #7
 8016ebc:	4013      	ands	r3, r2
 8016ebe:	d100      	bne.n	8016ec2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8016ec0:	e309      	b.n	80174d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	001a      	movs	r2, r3
 8016ec8:	68bb      	ldr	r3, [r7, #8]
 8016eca:	781b      	ldrb	r3, [r3, #0]
 8016ecc:	009b      	lsls	r3, r3, #2
 8016ece:	18d3      	adds	r3, r2, r3
 8016ed0:	881b      	ldrh	r3, [r3, #0]
 8016ed2:	b29a      	uxth	r2, r3
 8016ed4:	2016      	movs	r0, #22
 8016ed6:	183b      	adds	r3, r7, r0
 8016ed8:	4971      	ldr	r1, [pc, #452]	@ (80170a0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8016eda:	400a      	ands	r2, r1
 8016edc:	801a      	strh	r2, [r3, #0]
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	001a      	movs	r2, r3
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	009b      	lsls	r3, r3, #2
 8016eea:	18d3      	adds	r3, r2, r3
 8016eec:	183a      	adds	r2, r7, r0
 8016eee:	8812      	ldrh	r2, [r2, #0]
 8016ef0:	496c      	ldr	r1, [pc, #432]	@ (80170a4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8016ef2:	430a      	orrs	r2, r1
 8016ef4:	b292      	uxth	r2, r2
 8016ef6:	801a      	strh	r2, [r3, #0]
 8016ef8:	e2ed      	b.n	80174d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016efa:	1dbb      	adds	r3, r7, #6
 8016efc:	881a      	ldrh	r2, [r3, #0]
 8016efe:	2380      	movs	r3, #128	@ 0x80
 8016f00:	01db      	lsls	r3, r3, #7
 8016f02:	4013      	ands	r3, r2
 8016f04:	d01a      	beq.n	8016f3c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	001a      	movs	r2, r3
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	781b      	ldrb	r3, [r3, #0]
 8016f10:	009b      	lsls	r3, r3, #2
 8016f12:	18d3      	adds	r3, r2, r3
 8016f14:	881b      	ldrh	r3, [r3, #0]
 8016f16:	b29a      	uxth	r2, r3
 8016f18:	208a      	movs	r0, #138	@ 0x8a
 8016f1a:	183b      	adds	r3, r7, r0
 8016f1c:	4960      	ldr	r1, [pc, #384]	@ (80170a0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8016f1e:	400a      	ands	r2, r1
 8016f20:	801a      	strh	r2, [r3, #0]
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	001a      	movs	r2, r3
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	781b      	ldrb	r3, [r3, #0]
 8016f2c:	009b      	lsls	r3, r3, #2
 8016f2e:	18d3      	adds	r3, r2, r3
 8016f30:	183a      	adds	r2, r7, r0
 8016f32:	8812      	ldrh	r2, [r2, #0]
 8016f34:	495b      	ldr	r1, [pc, #364]	@ (80170a4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8016f36:	430a      	orrs	r2, r1
 8016f38:	b292      	uxth	r2, r2
 8016f3a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	2224      	movs	r2, #36	@ 0x24
 8016f40:	5c9b      	ldrb	r3, [r3, r2]
 8016f42:	2b01      	cmp	r3, #1
 8016f44:	d000      	beq.n	8016f48 <HAL_PCD_EP_DB_Transmit+0x22c>
 8016f46:	e2c6      	b.n	80174d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	695a      	ldr	r2, [r3, #20]
 8016f4c:	2186      	movs	r1, #134	@ 0x86
 8016f4e:	187b      	adds	r3, r7, r1
 8016f50:	881b      	ldrh	r3, [r3, #0]
 8016f52:	18d2      	adds	r2, r2, r3
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	69da      	ldr	r2, [r3, #28]
 8016f5c:	187b      	adds	r3, r7, r1
 8016f5e:	881b      	ldrh	r3, [r3, #0]
 8016f60:	18d2      	adds	r2, r2, r3
 8016f62:	68bb      	ldr	r3, [r7, #8]
 8016f64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	6a1a      	ldr	r2, [r3, #32]
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	691b      	ldr	r3, [r3, #16]
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	d30c      	bcc.n	8016f8c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	691b      	ldr	r3, [r3, #16]
 8016f76:	218c      	movs	r1, #140	@ 0x8c
 8016f78:	187a      	adds	r2, r7, r1
 8016f7a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	6a1a      	ldr	r2, [r3, #32]
 8016f80:	187b      	adds	r3, r7, r1
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	1ad2      	subs	r2, r2, r3
 8016f86:	68bb      	ldr	r3, [r7, #8]
 8016f88:	621a      	str	r2, [r3, #32]
 8016f8a:	e01a      	b.n	8016fc2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	6a1b      	ldr	r3, [r3, #32]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d10a      	bne.n	8016faa <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8016f94:	2386      	movs	r3, #134	@ 0x86
 8016f96:	18fb      	adds	r3, r7, r3
 8016f98:	881b      	ldrh	r3, [r3, #0]
 8016f9a:	228c      	movs	r2, #140	@ 0x8c
 8016f9c:	18ba      	adds	r2, r7, r2
 8016f9e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	2224      	movs	r2, #36	@ 0x24
 8016fa4:	2100      	movs	r1, #0
 8016fa6:	5499      	strb	r1, [r3, r2]
 8016fa8:	e00b      	b.n	8016fc2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	2224      	movs	r2, #36	@ 0x24
 8016fae:	2100      	movs	r1, #0
 8016fb0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	6a1b      	ldr	r3, [r3, #32]
 8016fb6:	228c      	movs	r2, #140	@ 0x8c
 8016fb8:	18ba      	adds	r2, r7, r2
 8016fba:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	785b      	ldrb	r3, [r3, #1]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d000      	beq.n	8016fcc <HAL_PCD_EP_DB_Transmit+0x2b0>
 8016fca:	e06d      	b.n	80170a8 <HAL_PCD_EP_DB_Transmit+0x38c>
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	2250      	movs	r2, #80	@ 0x50
 8016fd8:	5a9b      	ldrh	r3, [r3, r2]
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	001a      	movs	r2, r3
 8016fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fe0:	189b      	adds	r3, r3, r2
 8016fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	00da      	lsls	r2, r3, #3
 8016fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fec:	18d3      	adds	r3, r2, r3
 8016fee:	4a29      	ldr	r2, [pc, #164]	@ (8017094 <HAL_PCD_EP_DB_Transmit+0x378>)
 8016ff0:	4694      	mov	ip, r2
 8016ff2:	4463      	add	r3, ip
 8016ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ff8:	881b      	ldrh	r3, [r3, #0]
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	059b      	lsls	r3, r3, #22
 8016ffe:	0d9b      	lsrs	r3, r3, #22
 8017000:	b29a      	uxth	r2, r3
 8017002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017004:	801a      	strh	r2, [r3, #0]
 8017006:	228c      	movs	r2, #140	@ 0x8c
 8017008:	18bb      	adds	r3, r7, r2
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	2b3e      	cmp	r3, #62	@ 0x3e
 801700e:	d91a      	bls.n	8017046 <HAL_PCD_EP_DB_Transmit+0x32a>
 8017010:	18bb      	adds	r3, r7, r2
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	095b      	lsrs	r3, r3, #5
 8017016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017018:	18bb      	adds	r3, r7, r2
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	221f      	movs	r2, #31
 801701e:	4013      	ands	r3, r2
 8017020:	d102      	bne.n	8017028 <HAL_PCD_EP_DB_Transmit+0x30c>
 8017022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017024:	3b01      	subs	r3, #1
 8017026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801702a:	881b      	ldrh	r3, [r3, #0]
 801702c:	b29a      	uxth	r2, r3
 801702e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017030:	b29b      	uxth	r3, r3
 8017032:	029b      	lsls	r3, r3, #10
 8017034:	b29b      	uxth	r3, r3
 8017036:	4313      	orrs	r3, r2
 8017038:	b29b      	uxth	r3, r3
 801703a:	4a17      	ldr	r2, [pc, #92]	@ (8017098 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801703c:	4313      	orrs	r3, r2
 801703e:	b29a      	uxth	r2, r3
 8017040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017042:	801a      	strh	r2, [r3, #0]
 8017044:	e04f      	b.n	80170e6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8017046:	238c      	movs	r3, #140	@ 0x8c
 8017048:	18fb      	adds	r3, r7, r3
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d108      	bne.n	8017062 <HAL_PCD_EP_DB_Transmit+0x346>
 8017050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017052:	881b      	ldrh	r3, [r3, #0]
 8017054:	b29b      	uxth	r3, r3
 8017056:	4a10      	ldr	r2, [pc, #64]	@ (8017098 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017058:	4313      	orrs	r3, r2
 801705a:	b29a      	uxth	r2, r3
 801705c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801705e:	801a      	strh	r2, [r3, #0]
 8017060:	e041      	b.n	80170e6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8017062:	228c      	movs	r2, #140	@ 0x8c
 8017064:	18bb      	adds	r3, r7, r2
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	085b      	lsrs	r3, r3, #1
 801706a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801706c:	18bb      	adds	r3, r7, r2
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	2201      	movs	r2, #1
 8017072:	4013      	ands	r3, r2
 8017074:	d002      	beq.n	801707c <HAL_PCD_EP_DB_Transmit+0x360>
 8017076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017078:	3301      	adds	r3, #1
 801707a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801707c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801707e:	881b      	ldrh	r3, [r3, #0]
 8017080:	b29a      	uxth	r2, r3
 8017082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017084:	b29b      	uxth	r3, r3
 8017086:	029b      	lsls	r3, r3, #10
 8017088:	b29b      	uxth	r3, r3
 801708a:	4313      	orrs	r3, r2
 801708c:	b29a      	uxth	r2, r3
 801708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017090:	801a      	strh	r2, [r3, #0]
 8017092:	e028      	b.n	80170e6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8017094:	00000402 	.word	0x00000402
 8017098:	ffff8000 	.word	0xffff8000
 801709c:	00000406 	.word	0x00000406
 80170a0:	ffff8f8f 	.word	0xffff8f8f
 80170a4:	ffffc080 	.word	0xffffc080
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	785b      	ldrb	r3, [r3, #1]
 80170ac:	2b01      	cmp	r3, #1
 80170ae:	d11a      	bne.n	80170e6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	2250      	movs	r2, #80	@ 0x50
 80170bc:	5a9b      	ldrh	r3, [r3, r2]
 80170be:	b29b      	uxth	r3, r3
 80170c0:	001a      	movs	r2, r3
 80170c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170c4:	189b      	adds	r3, r3, r2
 80170c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	781b      	ldrb	r3, [r3, #0]
 80170cc:	00da      	lsls	r2, r3, #3
 80170ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170d0:	18d3      	adds	r3, r2, r3
 80170d2:	4adb      	ldr	r2, [pc, #876]	@ (8017440 <HAL_PCD_EP_DB_Transmit+0x724>)
 80170d4:	4694      	mov	ip, r2
 80170d6:	4463      	add	r3, ip
 80170d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80170da:	238c      	movs	r3, #140	@ 0x8c
 80170dc:	18fb      	adds	r3, r7, r3
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	b29a      	uxth	r2, r3
 80170e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80170e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	6818      	ldr	r0, [r3, #0]
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	6959      	ldr	r1, [r3, #20]
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	891a      	ldrh	r2, [r3, #8]
 80170f2:	238c      	movs	r3, #140	@ 0x8c
 80170f4:	18fb      	adds	r3, r7, r3
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	b29b      	uxth	r3, r3
 80170fa:	f006 fb85 	bl	801d808 <USB_WritePMA>
 80170fe:	e1ea      	b.n	80174d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	2250      	movs	r2, #80	@ 0x50
 8017106:	5a9b      	ldrh	r3, [r3, r2]
 8017108:	b29b      	uxth	r3, r3
 801710a:	001a      	movs	r2, r3
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	781b      	ldrb	r3, [r3, #0]
 8017110:	00db      	lsls	r3, r3, #3
 8017112:	18d2      	adds	r2, r2, r3
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	18d3      	adds	r3, r2, r3
 801711a:	4aca      	ldr	r2, [pc, #808]	@ (8017444 <HAL_PCD_EP_DB_Transmit+0x728>)
 801711c:	4694      	mov	ip, r2
 801711e:	4463      	add	r3, ip
 8017120:	881a      	ldrh	r2, [r3, #0]
 8017122:	2186      	movs	r1, #134	@ 0x86
 8017124:	187b      	adds	r3, r7, r1
 8017126:	0592      	lsls	r2, r2, #22
 8017128:	0d92      	lsrs	r2, r2, #22
 801712a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	699a      	ldr	r2, [r3, #24]
 8017130:	187b      	adds	r3, r7, r1
 8017132:	881b      	ldrh	r3, [r3, #0]
 8017134:	429a      	cmp	r2, r3
 8017136:	d307      	bcc.n	8017148 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8017138:	68bb      	ldr	r3, [r7, #8]
 801713a:	699a      	ldr	r2, [r3, #24]
 801713c:	187b      	adds	r3, r7, r1
 801713e:	881b      	ldrh	r3, [r3, #0]
 8017140:	1ad2      	subs	r2, r2, r3
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	619a      	str	r2, [r3, #24]
 8017146:	e002      	b.n	801714e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	2200      	movs	r2, #0
 801714c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801714e:	68bb      	ldr	r3, [r7, #8]
 8017150:	699b      	ldr	r3, [r3, #24]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d000      	beq.n	8017158 <HAL_PCD_EP_DB_Transmit+0x43c>
 8017156:	e0bb      	b.n	80172d0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	785b      	ldrb	r3, [r3, #1]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d125      	bne.n	80171ac <HAL_PCD_EP_DB_Transmit+0x490>
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	2250      	movs	r2, #80	@ 0x50
 801716c:	5a9b      	ldrh	r3, [r3, r2]
 801716e:	b29b      	uxth	r3, r3
 8017170:	001a      	movs	r2, r3
 8017172:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017174:	189b      	adds	r3, r3, r2
 8017176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	781b      	ldrb	r3, [r3, #0]
 801717c:	00da      	lsls	r2, r3, #3
 801717e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017180:	18d3      	adds	r3, r2, r3
 8017182:	4aaf      	ldr	r2, [pc, #700]	@ (8017440 <HAL_PCD_EP_DB_Transmit+0x724>)
 8017184:	4694      	mov	ip, r2
 8017186:	4463      	add	r3, ip
 8017188:	67bb      	str	r3, [r7, #120]	@ 0x78
 801718a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801718c:	881b      	ldrh	r3, [r3, #0]
 801718e:	b29b      	uxth	r3, r3
 8017190:	059b      	lsls	r3, r3, #22
 8017192:	0d9b      	lsrs	r3, r3, #22
 8017194:	b29a      	uxth	r2, r3
 8017196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017198:	801a      	strh	r2, [r3, #0]
 801719a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801719c:	881b      	ldrh	r3, [r3, #0]
 801719e:	b29b      	uxth	r3, r3
 80171a0:	4aa9      	ldr	r2, [pc, #676]	@ (8017448 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80171a2:	4313      	orrs	r3, r2
 80171a4:	b29a      	uxth	r2, r3
 80171a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80171a8:	801a      	strh	r2, [r3, #0]
 80171aa:	e01b      	b.n	80171e4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	785b      	ldrb	r3, [r3, #1]
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	d117      	bne.n	80171e4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	2250      	movs	r2, #80	@ 0x50
 80171c0:	5a9b      	ldrh	r3, [r3, r2]
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	001a      	movs	r2, r3
 80171c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80171c8:	189b      	adds	r3, r3, r2
 80171ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80171cc:	68bb      	ldr	r3, [r7, #8]
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	00da      	lsls	r2, r3, #3
 80171d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80171d4:	18d3      	adds	r3, r2, r3
 80171d6:	4a9a      	ldr	r2, [pc, #616]	@ (8017440 <HAL_PCD_EP_DB_Transmit+0x724>)
 80171d8:	4694      	mov	ip, r2
 80171da:	4463      	add	r3, ip
 80171dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80171de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80171e0:	2200      	movs	r2, #0
 80171e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	785b      	ldrb	r3, [r3, #1]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d12b      	bne.n	801724a <HAL_PCD_EP_DB_Transmit+0x52e>
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	2250      	movs	r2, #80	@ 0x50
 80171fe:	5a9b      	ldrh	r3, [r3, r2]
 8017200:	b29b      	uxth	r3, r3
 8017202:	001a      	movs	r2, r3
 8017204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017206:	189b      	adds	r3, r3, r2
 8017208:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	00da      	lsls	r2, r3, #3
 8017210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017212:	18d3      	adds	r3, r2, r3
 8017214:	4a8b      	ldr	r2, [pc, #556]	@ (8017444 <HAL_PCD_EP_DB_Transmit+0x728>)
 8017216:	4694      	mov	ip, r2
 8017218:	4463      	add	r3, ip
 801721a:	2180      	movs	r1, #128	@ 0x80
 801721c:	187a      	adds	r2, r7, r1
 801721e:	6013      	str	r3, [r2, #0]
 8017220:	187b      	adds	r3, r7, r1
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	881b      	ldrh	r3, [r3, #0]
 8017226:	b29b      	uxth	r3, r3
 8017228:	059b      	lsls	r3, r3, #22
 801722a:	0d9b      	lsrs	r3, r3, #22
 801722c:	b29a      	uxth	r2, r3
 801722e:	187b      	adds	r3, r7, r1
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	801a      	strh	r2, [r3, #0]
 8017234:	187b      	adds	r3, r7, r1
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	881b      	ldrh	r3, [r3, #0]
 801723a:	b29b      	uxth	r3, r3
 801723c:	4a82      	ldr	r2, [pc, #520]	@ (8017448 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801723e:	4313      	orrs	r3, r2
 8017240:	b29a      	uxth	r2, r3
 8017242:	187b      	adds	r3, r7, r1
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	801a      	strh	r2, [r3, #0]
 8017248:	e018      	b.n	801727c <HAL_PCD_EP_DB_Transmit+0x560>
 801724a:	68bb      	ldr	r3, [r7, #8]
 801724c:	785b      	ldrb	r3, [r3, #1]
 801724e:	2b01      	cmp	r3, #1
 8017250:	d114      	bne.n	801727c <HAL_PCD_EP_DB_Transmit+0x560>
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	2250      	movs	r2, #80	@ 0x50
 8017258:	5a9b      	ldrh	r3, [r3, r2]
 801725a:	b29b      	uxth	r3, r3
 801725c:	001a      	movs	r2, r3
 801725e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017260:	189b      	adds	r3, r3, r2
 8017262:	677b      	str	r3, [r7, #116]	@ 0x74
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	781b      	ldrb	r3, [r3, #0]
 8017268:	00da      	lsls	r2, r3, #3
 801726a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801726c:	18d3      	adds	r3, r2, r3
 801726e:	4a75      	ldr	r2, [pc, #468]	@ (8017444 <HAL_PCD_EP_DB_Transmit+0x728>)
 8017270:	4694      	mov	ip, r2
 8017272:	4463      	add	r3, ip
 8017274:	673b      	str	r3, [r7, #112]	@ 0x70
 8017276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017278:	2200      	movs	r2, #0
 801727a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801727c:	68bb      	ldr	r3, [r7, #8]
 801727e:	781a      	ldrb	r2, [r3, #0]
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	0011      	movs	r1, r2
 8017284:	0018      	movs	r0, r3
 8017286:	f008 fb43 	bl	801f910 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801728a:	1dbb      	adds	r3, r7, #6
 801728c:	881a      	ldrh	r2, [r3, #0]
 801728e:	2380      	movs	r3, #128	@ 0x80
 8017290:	01db      	lsls	r3, r3, #7
 8017292:	4013      	ands	r3, r2
 8017294:	d000      	beq.n	8017298 <HAL_PCD_EP_DB_Transmit+0x57c>
 8017296:	e11e      	b.n	80174d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	001a      	movs	r2, r3
 801729e:	68bb      	ldr	r3, [r7, #8]
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	009b      	lsls	r3, r3, #2
 80172a4:	18d3      	adds	r3, r2, r3
 80172a6:	881b      	ldrh	r3, [r3, #0]
 80172a8:	b29a      	uxth	r2, r3
 80172aa:	2088      	movs	r0, #136	@ 0x88
 80172ac:	183b      	adds	r3, r7, r0
 80172ae:	4967      	ldr	r1, [pc, #412]	@ (801744c <HAL_PCD_EP_DB_Transmit+0x730>)
 80172b0:	400a      	ands	r2, r1
 80172b2:	801a      	strh	r2, [r3, #0]
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	001a      	movs	r2, r3
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	781b      	ldrb	r3, [r3, #0]
 80172be:	009b      	lsls	r3, r3, #2
 80172c0:	18d3      	adds	r3, r2, r3
 80172c2:	183a      	adds	r2, r7, r0
 80172c4:	8812      	ldrh	r2, [r2, #0]
 80172c6:	4962      	ldr	r1, [pc, #392]	@ (8017450 <HAL_PCD_EP_DB_Transmit+0x734>)
 80172c8:	430a      	orrs	r2, r1
 80172ca:	b292      	uxth	r2, r2
 80172cc:	801a      	strh	r2, [r3, #0]
 80172ce:	e102      	b.n	80174d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80172d0:	1dbb      	adds	r3, r7, #6
 80172d2:	881a      	ldrh	r2, [r3, #0]
 80172d4:	2380      	movs	r3, #128	@ 0x80
 80172d6:	01db      	lsls	r3, r3, #7
 80172d8:	4013      	ands	r3, r2
 80172da:	d11a      	bne.n	8017312 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	001a      	movs	r2, r3
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	009b      	lsls	r3, r3, #2
 80172e8:	18d3      	adds	r3, r2, r3
 80172ea:	881b      	ldrh	r3, [r3, #0]
 80172ec:	b29a      	uxth	r2, r3
 80172ee:	204e      	movs	r0, #78	@ 0x4e
 80172f0:	183b      	adds	r3, r7, r0
 80172f2:	4956      	ldr	r1, [pc, #344]	@ (801744c <HAL_PCD_EP_DB_Transmit+0x730>)
 80172f4:	400a      	ands	r2, r1
 80172f6:	801a      	strh	r2, [r3, #0]
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	001a      	movs	r2, r3
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	009b      	lsls	r3, r3, #2
 8017304:	18d3      	adds	r3, r2, r3
 8017306:	183a      	adds	r2, r7, r0
 8017308:	8812      	ldrh	r2, [r2, #0]
 801730a:	4951      	ldr	r1, [pc, #324]	@ (8017450 <HAL_PCD_EP_DB_Transmit+0x734>)
 801730c:	430a      	orrs	r2, r1
 801730e:	b292      	uxth	r2, r2
 8017310:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	2224      	movs	r2, #36	@ 0x24
 8017316:	5c9b      	ldrb	r3, [r3, r2]
 8017318:	2b01      	cmp	r3, #1
 801731a:	d000      	beq.n	801731e <HAL_PCD_EP_DB_Transmit+0x602>
 801731c:	e0db      	b.n	80174d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	695a      	ldr	r2, [r3, #20]
 8017322:	2186      	movs	r1, #134	@ 0x86
 8017324:	187b      	adds	r3, r7, r1
 8017326:	881b      	ldrh	r3, [r3, #0]
 8017328:	18d2      	adds	r2, r2, r3
 801732a:	68bb      	ldr	r3, [r7, #8]
 801732c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801732e:	68bb      	ldr	r3, [r7, #8]
 8017330:	69da      	ldr	r2, [r3, #28]
 8017332:	187b      	adds	r3, r7, r1
 8017334:	881b      	ldrh	r3, [r3, #0]
 8017336:	18d2      	adds	r2, r2, r3
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	6a1a      	ldr	r2, [r3, #32]
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	691b      	ldr	r3, [r3, #16]
 8017344:	429a      	cmp	r2, r3
 8017346:	d30c      	bcc.n	8017362 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8017348:	68bb      	ldr	r3, [r7, #8]
 801734a:	691b      	ldr	r3, [r3, #16]
 801734c:	218c      	movs	r1, #140	@ 0x8c
 801734e:	187a      	adds	r2, r7, r1
 8017350:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	6a1a      	ldr	r2, [r3, #32]
 8017356:	187b      	adds	r3, r7, r1
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	1ad2      	subs	r2, r2, r3
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	621a      	str	r2, [r3, #32]
 8017360:	e01a      	b.n	8017398 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	6a1b      	ldr	r3, [r3, #32]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d10a      	bne.n	8017380 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801736a:	2386      	movs	r3, #134	@ 0x86
 801736c:	18fb      	adds	r3, r7, r3
 801736e:	881b      	ldrh	r3, [r3, #0]
 8017370:	228c      	movs	r2, #140	@ 0x8c
 8017372:	18ba      	adds	r2, r7, r2
 8017374:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	2224      	movs	r2, #36	@ 0x24
 801737a:	2100      	movs	r1, #0
 801737c:	5499      	strb	r1, [r3, r2]
 801737e:	e00b      	b.n	8017398 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	6a1b      	ldr	r3, [r3, #32]
 8017384:	228c      	movs	r2, #140	@ 0x8c
 8017386:	18ba      	adds	r2, r7, r2
 8017388:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	2200      	movs	r2, #0
 801738e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	2224      	movs	r2, #36	@ 0x24
 8017394:	2100      	movs	r1, #0
 8017396:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	657b      	str	r3, [r7, #84]	@ 0x54
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	785b      	ldrb	r3, [r3, #1]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d000      	beq.n	80173a8 <HAL_PCD_EP_DB_Transmit+0x68c>
 80173a6:	e06e      	b.n	8017486 <HAL_PCD_EP_DB_Transmit+0x76a>
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	2250      	movs	r2, #80	@ 0x50
 80173b4:	5a9b      	ldrh	r3, [r3, r2]
 80173b6:	b29b      	uxth	r3, r3
 80173b8:	001a      	movs	r2, r3
 80173ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80173bc:	189b      	adds	r3, r3, r2
 80173be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	781b      	ldrb	r3, [r3, #0]
 80173c4:	00da      	lsls	r2, r3, #3
 80173c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80173c8:	18d3      	adds	r3, r2, r3
 80173ca:	4a1e      	ldr	r2, [pc, #120]	@ (8017444 <HAL_PCD_EP_DB_Transmit+0x728>)
 80173cc:	4694      	mov	ip, r2
 80173ce:	4463      	add	r3, ip
 80173d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80173d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80173d4:	881b      	ldrh	r3, [r3, #0]
 80173d6:	b29b      	uxth	r3, r3
 80173d8:	059b      	lsls	r3, r3, #22
 80173da:	0d9b      	lsrs	r3, r3, #22
 80173dc:	b29a      	uxth	r2, r3
 80173de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80173e0:	801a      	strh	r2, [r3, #0]
 80173e2:	228c      	movs	r2, #140	@ 0x8c
 80173e4:	18bb      	adds	r3, r7, r2
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80173ea:	d91a      	bls.n	8017422 <HAL_PCD_EP_DB_Transmit+0x706>
 80173ec:	18bb      	adds	r3, r7, r2
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	095b      	lsrs	r3, r3, #5
 80173f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80173f4:	18bb      	adds	r3, r7, r2
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	221f      	movs	r2, #31
 80173fa:	4013      	ands	r3, r2
 80173fc:	d102      	bne.n	8017404 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80173fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017400:	3b01      	subs	r3, #1
 8017402:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017406:	881b      	ldrh	r3, [r3, #0]
 8017408:	b29a      	uxth	r2, r3
 801740a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801740c:	b29b      	uxth	r3, r3
 801740e:	029b      	lsls	r3, r3, #10
 8017410:	b29b      	uxth	r3, r3
 8017412:	4313      	orrs	r3, r2
 8017414:	b29b      	uxth	r3, r3
 8017416:	4a0c      	ldr	r2, [pc, #48]	@ (8017448 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017418:	4313      	orrs	r3, r2
 801741a:	b29a      	uxth	r2, r3
 801741c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801741e:	801a      	strh	r2, [r3, #0]
 8017420:	e04d      	b.n	80174be <HAL_PCD_EP_DB_Transmit+0x7a2>
 8017422:	238c      	movs	r3, #140	@ 0x8c
 8017424:	18fb      	adds	r3, r7, r3
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d113      	bne.n	8017454 <HAL_PCD_EP_DB_Transmit+0x738>
 801742c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801742e:	881b      	ldrh	r3, [r3, #0]
 8017430:	b29b      	uxth	r3, r3
 8017432:	4a05      	ldr	r2, [pc, #20]	@ (8017448 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017434:	4313      	orrs	r3, r2
 8017436:	b29a      	uxth	r2, r3
 8017438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801743a:	801a      	strh	r2, [r3, #0]
 801743c:	e03f      	b.n	80174be <HAL_PCD_EP_DB_Transmit+0x7a2>
 801743e:	46c0      	nop			@ (mov r8, r8)
 8017440:	00000402 	.word	0x00000402
 8017444:	00000406 	.word	0x00000406
 8017448:	ffff8000 	.word	0xffff8000
 801744c:	ffff8f8f 	.word	0xffff8f8f
 8017450:	ffffc080 	.word	0xffffc080
 8017454:	228c      	movs	r2, #140	@ 0x8c
 8017456:	18bb      	adds	r3, r7, r2
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	085b      	lsrs	r3, r3, #1
 801745c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801745e:	18bb      	adds	r3, r7, r2
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2201      	movs	r2, #1
 8017464:	4013      	ands	r3, r2
 8017466:	d002      	beq.n	801746e <HAL_PCD_EP_DB_Transmit+0x752>
 8017468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801746a:	3301      	adds	r3, #1
 801746c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801746e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017470:	881b      	ldrh	r3, [r3, #0]
 8017472:	b29a      	uxth	r2, r3
 8017474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017476:	b29b      	uxth	r3, r3
 8017478:	029b      	lsls	r3, r3, #10
 801747a:	b29b      	uxth	r3, r3
 801747c:	4313      	orrs	r3, r2
 801747e:	b29a      	uxth	r2, r3
 8017480:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017482:	801a      	strh	r2, [r3, #0]
 8017484:	e01b      	b.n	80174be <HAL_PCD_EP_DB_Transmit+0x7a2>
 8017486:	68bb      	ldr	r3, [r7, #8]
 8017488:	785b      	ldrb	r3, [r3, #1]
 801748a:	2b01      	cmp	r3, #1
 801748c:	d117      	bne.n	80174be <HAL_PCD_EP_DB_Transmit+0x7a2>
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	2250      	movs	r2, #80	@ 0x50
 8017494:	5a9b      	ldrh	r3, [r3, r2]
 8017496:	b29b      	uxth	r3, r3
 8017498:	001a      	movs	r2, r3
 801749a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801749c:	189b      	adds	r3, r3, r2
 801749e:	657b      	str	r3, [r7, #84]	@ 0x54
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	781b      	ldrb	r3, [r3, #0]
 80174a4:	00da      	lsls	r2, r3, #3
 80174a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174a8:	18d3      	adds	r3, r2, r3
 80174aa:	4a21      	ldr	r2, [pc, #132]	@ (8017530 <HAL_PCD_EP_DB_Transmit+0x814>)
 80174ac:	4694      	mov	ip, r2
 80174ae:	4463      	add	r3, ip
 80174b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80174b2:	238c      	movs	r3, #140	@ 0x8c
 80174b4:	18fb      	adds	r3, r7, r3
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	b29a      	uxth	r2, r3
 80174ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80174bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	6818      	ldr	r0, [r3, #0]
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	6959      	ldr	r1, [r3, #20]
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	895a      	ldrh	r2, [r3, #10]
 80174ca:	238c      	movs	r3, #140	@ 0x8c
 80174cc:	18fb      	adds	r3, r7, r3
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	b29b      	uxth	r3, r3
 80174d2:	f006 f999 	bl	801d808 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	001a      	movs	r2, r3
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	781b      	ldrb	r3, [r3, #0]
 80174e0:	009b      	lsls	r3, r3, #2
 80174e2:	18d3      	adds	r3, r2, r3
 80174e4:	881b      	ldrh	r3, [r3, #0]
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	2014      	movs	r0, #20
 80174ea:	183b      	adds	r3, r7, r0
 80174ec:	4911      	ldr	r1, [pc, #68]	@ (8017534 <HAL_PCD_EP_DB_Transmit+0x818>)
 80174ee:	400a      	ands	r2, r1
 80174f0:	801a      	strh	r2, [r3, #0]
 80174f2:	183b      	adds	r3, r7, r0
 80174f4:	183a      	adds	r2, r7, r0
 80174f6:	8812      	ldrh	r2, [r2, #0]
 80174f8:	2110      	movs	r1, #16
 80174fa:	404a      	eors	r2, r1
 80174fc:	801a      	strh	r2, [r3, #0]
 80174fe:	183b      	adds	r3, r7, r0
 8017500:	183a      	adds	r2, r7, r0
 8017502:	8812      	ldrh	r2, [r2, #0]
 8017504:	2120      	movs	r1, #32
 8017506:	404a      	eors	r2, r1
 8017508:	801a      	strh	r2, [r3, #0]
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	001a      	movs	r2, r3
 8017510:	68bb      	ldr	r3, [r7, #8]
 8017512:	781b      	ldrb	r3, [r3, #0]
 8017514:	009b      	lsls	r3, r3, #2
 8017516:	18d3      	adds	r3, r2, r3
 8017518:	183a      	adds	r2, r7, r0
 801751a:	8812      	ldrh	r2, [r2, #0]
 801751c:	4906      	ldr	r1, [pc, #24]	@ (8017538 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801751e:	430a      	orrs	r2, r1
 8017520:	b292      	uxth	r2, r2
 8017522:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8017524:	2300      	movs	r3, #0
}
 8017526:	0018      	movs	r0, r3
 8017528:	46bd      	mov	sp, r7
 801752a:	b024      	add	sp, #144	@ 0x90
 801752c:	bd80      	pop	{r7, pc}
 801752e:	46c0      	nop			@ (mov r8, r8)
 8017530:	00000406 	.word	0x00000406
 8017534:	ffff8fbf 	.word	0xffff8fbf
 8017538:	ffff8080 	.word	0xffff8080

0801753c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801753c:	b590      	push	{r4, r7, lr}
 801753e:	b087      	sub	sp, #28
 8017540:	af00      	add	r7, sp, #0
 8017542:	60f8      	str	r0, [r7, #12]
 8017544:	0008      	movs	r0, r1
 8017546:	0011      	movs	r1, r2
 8017548:	607b      	str	r3, [r7, #4]
 801754a:	240a      	movs	r4, #10
 801754c:	193b      	adds	r3, r7, r4
 801754e:	1c02      	adds	r2, r0, #0
 8017550:	801a      	strh	r2, [r3, #0]
 8017552:	2308      	movs	r3, #8
 8017554:	18fb      	adds	r3, r7, r3
 8017556:	1c0a      	adds	r2, r1, #0
 8017558:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801755a:	0021      	movs	r1, r4
 801755c:	187b      	adds	r3, r7, r1
 801755e:	881b      	ldrh	r3, [r3, #0]
 8017560:	2280      	movs	r2, #128	@ 0x80
 8017562:	4013      	ands	r3, r2
 8017564:	b29b      	uxth	r3, r3
 8017566:	2b00      	cmp	r3, #0
 8017568:	d00c      	beq.n	8017584 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801756a:	187b      	adds	r3, r7, r1
 801756c:	881b      	ldrh	r3, [r3, #0]
 801756e:	2207      	movs	r2, #7
 8017570:	4013      	ands	r3, r2
 8017572:	1c5a      	adds	r2, r3, #1
 8017574:	0013      	movs	r3, r2
 8017576:	009b      	lsls	r3, r3, #2
 8017578:	189b      	adds	r3, r3, r2
 801757a:	00db      	lsls	r3, r3, #3
 801757c:	68fa      	ldr	r2, [r7, #12]
 801757e:	18d3      	adds	r3, r2, r3
 8017580:	617b      	str	r3, [r7, #20]
 8017582:	e00b      	b.n	801759c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8017584:	230a      	movs	r3, #10
 8017586:	18fb      	adds	r3, r7, r3
 8017588:	881a      	ldrh	r2, [r3, #0]
 801758a:	0013      	movs	r3, r2
 801758c:	009b      	lsls	r3, r3, #2
 801758e:	189b      	adds	r3, r3, r2
 8017590:	00db      	lsls	r3, r3, #3
 8017592:	3369      	adds	r3, #105	@ 0x69
 8017594:	33ff      	adds	r3, #255	@ 0xff
 8017596:	68fa      	ldr	r2, [r7, #12]
 8017598:	18d3      	adds	r3, r2, r3
 801759a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801759c:	2308      	movs	r3, #8
 801759e:	18fb      	adds	r3, r7, r3
 80175a0:	881b      	ldrh	r3, [r3, #0]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d107      	bne.n	80175b6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80175a6:	697b      	ldr	r3, [r7, #20]
 80175a8:	2200      	movs	r2, #0
 80175aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	b29a      	uxth	r2, r3
 80175b0:	697b      	ldr	r3, [r7, #20]
 80175b2:	80da      	strh	r2, [r3, #6]
 80175b4:	e00b      	b.n	80175ce <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80175b6:	697b      	ldr	r3, [r7, #20]
 80175b8:	2201      	movs	r2, #1
 80175ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	b29a      	uxth	r2, r3
 80175c0:	697b      	ldr	r3, [r7, #20]
 80175c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	0c1b      	lsrs	r3, r3, #16
 80175c8:	b29a      	uxth	r2, r3
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80175ce:	2300      	movs	r3, #0
}
 80175d0:	0018      	movs	r0, r3
 80175d2:	46bd      	mov	sp, r7
 80175d4:	b007      	add	sp, #28
 80175d6:	bd90      	pop	{r4, r7, pc}

080175d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b084      	sub	sp, #16
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	23ba      	movs	r3, #186	@ 0xba
 80175ea:	009b      	lsls	r3, r3, #2
 80175ec:	2101      	movs	r1, #1
 80175ee:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80175f0:	687a      	ldr	r2, [r7, #4]
 80175f2:	23b8      	movs	r3, #184	@ 0xb8
 80175f4:	009b      	lsls	r3, r3, #2
 80175f6:	2100      	movs	r1, #0
 80175f8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	2254      	movs	r2, #84	@ 0x54
 80175fe:	5a9b      	ldrh	r3, [r3, r2]
 8017600:	b29b      	uxth	r3, r3
 8017602:	2201      	movs	r2, #1
 8017604:	4313      	orrs	r3, r2
 8017606:	b299      	uxth	r1, r3
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	2254      	movs	r2, #84	@ 0x54
 801760c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	2254      	movs	r2, #84	@ 0x54
 8017612:	5a9b      	ldrh	r3, [r3, r2]
 8017614:	b29b      	uxth	r3, r3
 8017616:	2202      	movs	r2, #2
 8017618:	4313      	orrs	r3, r2
 801761a:	b299      	uxth	r1, r3
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	2254      	movs	r2, #84	@ 0x54
 8017620:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017622:	2300      	movs	r3, #0
}
 8017624:	0018      	movs	r0, r3
 8017626:	46bd      	mov	sp, r7
 8017628:	b004      	add	sp, #16
 801762a:	bd80      	pop	{r7, pc}

0801762c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b082      	sub	sp, #8
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	000a      	movs	r2, r1
 8017636:	1cfb      	adds	r3, r7, #3
 8017638:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801763a:	46c0      	nop			@ (mov r8, r8)
 801763c:	46bd      	mov	sp, r7
 801763e:	b002      	add	sp, #8
 8017640:	bd80      	pop	{r7, pc}
	...

08017644 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8017648:	4b04      	ldr	r3, [pc, #16]	@ (801765c <HAL_PWR_EnableBkUpAccess+0x18>)
 801764a:	681a      	ldr	r2, [r3, #0]
 801764c:	4b03      	ldr	r3, [pc, #12]	@ (801765c <HAL_PWR_EnableBkUpAccess+0x18>)
 801764e:	2180      	movs	r1, #128	@ 0x80
 8017650:	0049      	lsls	r1, r1, #1
 8017652:	430a      	orrs	r2, r1
 8017654:	601a      	str	r2, [r3, #0]
}
 8017656:	46c0      	nop			@ (mov r8, r8)
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	40007000 	.word	0x40007000

08017660 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8017664:	4b04      	ldr	r3, [pc, #16]	@ (8017678 <HAL_PWR_DisableBkUpAccess+0x18>)
 8017666:	681a      	ldr	r2, [r3, #0]
 8017668:	4b03      	ldr	r3, [pc, #12]	@ (8017678 <HAL_PWR_DisableBkUpAccess+0x18>)
 801766a:	4904      	ldr	r1, [pc, #16]	@ (801767c <HAL_PWR_DisableBkUpAccess+0x1c>)
 801766c:	400a      	ands	r2, r1
 801766e:	601a      	str	r2, [r3, #0]
}
 8017670:	46c0      	nop			@ (mov r8, r8)
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
 8017676:	46c0      	nop			@ (mov r8, r8)
 8017678:	40007000 	.word	0x40007000
 801767c:	fffffeff 	.word	0xfffffeff

08017680 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b086      	sub	sp, #24
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	000a      	movs	r2, r1
 801768a:	1cfb      	adds	r3, r7, #3
 801768c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801768e:	2300      	movs	r3, #0
 8017690:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8017692:	4b25      	ldr	r3, [pc, #148]	@ (8017728 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017694:	681a      	ldr	r2, [r3, #0]
 8017696:	2380      	movs	r3, #128	@ 0x80
 8017698:	009b      	lsls	r3, r3, #2
 801769a:	4013      	ands	r3, r2
 801769c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801769e:	4b23      	ldr	r3, [pc, #140]	@ (801772c <HAL_PWR_EnterSTOPMode+0xac>)
 80176a0:	6a1b      	ldr	r3, [r3, #32]
 80176a2:	2201      	movs	r2, #1
 80176a4:	4013      	ands	r3, r2
 80176a6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d008      	beq.n	80176c0 <HAL_PWR_EnterSTOPMode+0x40>
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d005      	beq.n	80176c0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80176b4:	4b1c      	ldr	r3, [pc, #112]	@ (8017728 <HAL_PWR_EnterSTOPMode+0xa8>)
 80176b6:	681a      	ldr	r2, [r3, #0]
 80176b8:	4b1b      	ldr	r3, [pc, #108]	@ (8017728 <HAL_PWR_EnterSTOPMode+0xa8>)
 80176ba:	491d      	ldr	r1, [pc, #116]	@ (8017730 <HAL_PWR_EnterSTOPMode+0xb0>)
 80176bc:	400a      	ands	r2, r1
 80176be:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80176c0:	4b19      	ldr	r3, [pc, #100]	@ (8017728 <HAL_PWR_EnterSTOPMode+0xa8>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80176c6:	697b      	ldr	r3, [r7, #20]
 80176c8:	2203      	movs	r2, #3
 80176ca:	4393      	bics	r3, r2
 80176cc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80176ce:	697a      	ldr	r2, [r7, #20]
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	4313      	orrs	r3, r2
 80176d4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80176d6:	4b14      	ldr	r3, [pc, #80]	@ (8017728 <HAL_PWR_EnterSTOPMode+0xa8>)
 80176d8:	697a      	ldr	r2, [r7, #20]
 80176da:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80176dc:	4b15      	ldr	r3, [pc, #84]	@ (8017734 <HAL_PWR_EnterSTOPMode+0xb4>)
 80176de:	691a      	ldr	r2, [r3, #16]
 80176e0:	4b14      	ldr	r3, [pc, #80]	@ (8017734 <HAL_PWR_EnterSTOPMode+0xb4>)
 80176e2:	2104      	movs	r1, #4
 80176e4:	430a      	orrs	r2, r1
 80176e6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80176e8:	1cfb      	adds	r3, r7, #3
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	2b01      	cmp	r3, #1
 80176ee:	d101      	bne.n	80176f4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80176f0:	bf30      	wfi
 80176f2:	e002      	b.n	80176fa <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80176f4:	bf40      	sev
    __WFE();
 80176f6:	bf20      	wfe
    __WFE();
 80176f8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80176fa:	4b0e      	ldr	r3, [pc, #56]	@ (8017734 <HAL_PWR_EnterSTOPMode+0xb4>)
 80176fc:	691a      	ldr	r2, [r3, #16]
 80176fe:	4b0d      	ldr	r3, [pc, #52]	@ (8017734 <HAL_PWR_EnterSTOPMode+0xb4>)
 8017700:	2104      	movs	r1, #4
 8017702:	438a      	bics	r2, r1
 8017704:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d009      	beq.n	8017720 <HAL_PWR_EnterSTOPMode+0xa0>
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d006      	beq.n	8017720 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8017712:	4b05      	ldr	r3, [pc, #20]	@ (8017728 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017714:	681a      	ldr	r2, [r3, #0]
 8017716:	4b04      	ldr	r3, [pc, #16]	@ (8017728 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017718:	2180      	movs	r1, #128	@ 0x80
 801771a:	0089      	lsls	r1, r1, #2
 801771c:	430a      	orrs	r2, r1
 801771e:	601a      	str	r2, [r3, #0]
  }
}
 8017720:	46c0      	nop			@ (mov r8, r8)
 8017722:	46bd      	mov	sp, r7
 8017724:	b006      	add	sp, #24
 8017726:	bd80      	pop	{r7, pc}
 8017728:	40007000 	.word	0x40007000
 801772c:	40010000 	.word	0x40010000
 8017730:	fffffdff 	.word	0xfffffdff
 8017734:	e000ed00 	.word	0xe000ed00

08017738 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801773c:	4b07      	ldr	r3, [pc, #28]	@ (801775c <HAL_PWR_EnterSTANDBYMode+0x24>)
 801773e:	681a      	ldr	r2, [r3, #0]
 8017740:	4b06      	ldr	r3, [pc, #24]	@ (801775c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8017742:	2102      	movs	r1, #2
 8017744:	430a      	orrs	r2, r1
 8017746:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8017748:	4b05      	ldr	r3, [pc, #20]	@ (8017760 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801774a:	691a      	ldr	r2, [r3, #16]
 801774c:	4b04      	ldr	r3, [pc, #16]	@ (8017760 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801774e:	2104      	movs	r1, #4
 8017750:	430a      	orrs	r2, r1
 8017752:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8017754:	bf30      	wfi
}
 8017756:	46c0      	nop			@ (mov r8, r8)
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}
 801775c:	40007000 	.word	0x40007000
 8017760:	e000ed00 	.word	0xe000ed00

08017764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017764:	b5b0      	push	{r4, r5, r7, lr}
 8017766:	b08a      	sub	sp, #40	@ 0x28
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d102      	bne.n	8017778 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8017772:	2301      	movs	r3, #1
 8017774:	f000 fbbf 	bl	8017ef6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017778:	4bc9      	ldr	r3, [pc, #804]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 801777a:	68db      	ldr	r3, [r3, #12]
 801777c:	220c      	movs	r2, #12
 801777e:	4013      	ands	r3, r2
 8017780:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017782:	4bc7      	ldr	r3, [pc, #796]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017784:	68da      	ldr	r2, [r3, #12]
 8017786:	2380      	movs	r3, #128	@ 0x80
 8017788:	025b      	lsls	r3, r3, #9
 801778a:	4013      	ands	r3, r2
 801778c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	2201      	movs	r2, #1
 8017794:	4013      	ands	r3, r2
 8017796:	d100      	bne.n	801779a <HAL_RCC_OscConfig+0x36>
 8017798:	e07e      	b.n	8017898 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801779a:	69fb      	ldr	r3, [r7, #28]
 801779c:	2b08      	cmp	r3, #8
 801779e:	d007      	beq.n	80177b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80177a0:	69fb      	ldr	r3, [r7, #28]
 80177a2:	2b0c      	cmp	r3, #12
 80177a4:	d112      	bne.n	80177cc <HAL_RCC_OscConfig+0x68>
 80177a6:	69ba      	ldr	r2, [r7, #24]
 80177a8:	2380      	movs	r3, #128	@ 0x80
 80177aa:	025b      	lsls	r3, r3, #9
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d10d      	bne.n	80177cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80177b0:	4bbb      	ldr	r3, [pc, #748]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80177b2:	681a      	ldr	r2, [r3, #0]
 80177b4:	2380      	movs	r3, #128	@ 0x80
 80177b6:	029b      	lsls	r3, r3, #10
 80177b8:	4013      	ands	r3, r2
 80177ba:	d100      	bne.n	80177be <HAL_RCC_OscConfig+0x5a>
 80177bc:	e06b      	b.n	8017896 <HAL_RCC_OscConfig+0x132>
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d167      	bne.n	8017896 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80177c6:	2301      	movs	r3, #1
 80177c8:	f000 fb95 	bl	8017ef6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	685a      	ldr	r2, [r3, #4]
 80177d0:	2380      	movs	r3, #128	@ 0x80
 80177d2:	025b      	lsls	r3, r3, #9
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d107      	bne.n	80177e8 <HAL_RCC_OscConfig+0x84>
 80177d8:	4bb1      	ldr	r3, [pc, #708]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80177da:	681a      	ldr	r2, [r3, #0]
 80177dc:	4bb0      	ldr	r3, [pc, #704]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80177de:	2180      	movs	r1, #128	@ 0x80
 80177e0:	0249      	lsls	r1, r1, #9
 80177e2:	430a      	orrs	r2, r1
 80177e4:	601a      	str	r2, [r3, #0]
 80177e6:	e027      	b.n	8017838 <HAL_RCC_OscConfig+0xd4>
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	685a      	ldr	r2, [r3, #4]
 80177ec:	23a0      	movs	r3, #160	@ 0xa0
 80177ee:	02db      	lsls	r3, r3, #11
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d10e      	bne.n	8017812 <HAL_RCC_OscConfig+0xae>
 80177f4:	4baa      	ldr	r3, [pc, #680]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80177f6:	681a      	ldr	r2, [r3, #0]
 80177f8:	4ba9      	ldr	r3, [pc, #676]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80177fa:	2180      	movs	r1, #128	@ 0x80
 80177fc:	02c9      	lsls	r1, r1, #11
 80177fe:	430a      	orrs	r2, r1
 8017800:	601a      	str	r2, [r3, #0]
 8017802:	4ba7      	ldr	r3, [pc, #668]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017804:	681a      	ldr	r2, [r3, #0]
 8017806:	4ba6      	ldr	r3, [pc, #664]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017808:	2180      	movs	r1, #128	@ 0x80
 801780a:	0249      	lsls	r1, r1, #9
 801780c:	430a      	orrs	r2, r1
 801780e:	601a      	str	r2, [r3, #0]
 8017810:	e012      	b.n	8017838 <HAL_RCC_OscConfig+0xd4>
 8017812:	4ba3      	ldr	r3, [pc, #652]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017814:	681a      	ldr	r2, [r3, #0]
 8017816:	4ba2      	ldr	r3, [pc, #648]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017818:	49a2      	ldr	r1, [pc, #648]	@ (8017aa4 <HAL_RCC_OscConfig+0x340>)
 801781a:	400a      	ands	r2, r1
 801781c:	601a      	str	r2, [r3, #0]
 801781e:	4ba0      	ldr	r3, [pc, #640]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017820:	681a      	ldr	r2, [r3, #0]
 8017822:	2380      	movs	r3, #128	@ 0x80
 8017824:	025b      	lsls	r3, r3, #9
 8017826:	4013      	ands	r3, r2
 8017828:	60fb      	str	r3, [r7, #12]
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	4b9c      	ldr	r3, [pc, #624]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 801782e:	681a      	ldr	r2, [r3, #0]
 8017830:	4b9b      	ldr	r3, [pc, #620]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017832:	499d      	ldr	r1, [pc, #628]	@ (8017aa8 <HAL_RCC_OscConfig+0x344>)
 8017834:	400a      	ands	r2, r1
 8017836:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	685b      	ldr	r3, [r3, #4]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d015      	beq.n	801786c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017840:	f7f9 fbc8 	bl	8010fd4 <HAL_GetTick>
 8017844:	0003      	movs	r3, r0
 8017846:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8017848:	e009      	b.n	801785e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801784a:	f7f9 fbc3 	bl	8010fd4 <HAL_GetTick>
 801784e:	0002      	movs	r2, r0
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	1ad3      	subs	r3, r2, r3
 8017854:	2b64      	cmp	r3, #100	@ 0x64
 8017856:	d902      	bls.n	801785e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8017858:	2303      	movs	r3, #3
 801785a:	f000 fb4c 	bl	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801785e:	4b90      	ldr	r3, [pc, #576]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017860:	681a      	ldr	r2, [r3, #0]
 8017862:	2380      	movs	r3, #128	@ 0x80
 8017864:	029b      	lsls	r3, r3, #10
 8017866:	4013      	ands	r3, r2
 8017868:	d0ef      	beq.n	801784a <HAL_RCC_OscConfig+0xe6>
 801786a:	e015      	b.n	8017898 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801786c:	f7f9 fbb2 	bl	8010fd4 <HAL_GetTick>
 8017870:	0003      	movs	r3, r0
 8017872:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8017874:	e008      	b.n	8017888 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017876:	f7f9 fbad 	bl	8010fd4 <HAL_GetTick>
 801787a:	0002      	movs	r2, r0
 801787c:	697b      	ldr	r3, [r7, #20]
 801787e:	1ad3      	subs	r3, r2, r3
 8017880:	2b64      	cmp	r3, #100	@ 0x64
 8017882:	d901      	bls.n	8017888 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8017884:	2303      	movs	r3, #3
 8017886:	e336      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8017888:	4b85      	ldr	r3, [pc, #532]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 801788a:	681a      	ldr	r2, [r3, #0]
 801788c:	2380      	movs	r3, #128	@ 0x80
 801788e:	029b      	lsls	r3, r3, #10
 8017890:	4013      	ands	r3, r2
 8017892:	d1f0      	bne.n	8017876 <HAL_RCC_OscConfig+0x112>
 8017894:	e000      	b.n	8017898 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017896:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	2202      	movs	r2, #2
 801789e:	4013      	ands	r3, r2
 80178a0:	d100      	bne.n	80178a4 <HAL_RCC_OscConfig+0x140>
 80178a2:	e099      	b.n	80179d8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	68db      	ldr	r3, [r3, #12]
 80178a8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80178aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ac:	2220      	movs	r2, #32
 80178ae:	4013      	ands	r3, r2
 80178b0:	d009      	beq.n	80178c6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80178b2:	4b7b      	ldr	r3, [pc, #492]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80178b4:	681a      	ldr	r2, [r3, #0]
 80178b6:	4b7a      	ldr	r3, [pc, #488]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80178b8:	2120      	movs	r1, #32
 80178ba:	430a      	orrs	r2, r1
 80178bc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80178be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c0:	2220      	movs	r2, #32
 80178c2:	4393      	bics	r3, r2
 80178c4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80178c6:	69fb      	ldr	r3, [r7, #28]
 80178c8:	2b04      	cmp	r3, #4
 80178ca:	d005      	beq.n	80178d8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80178cc:	69fb      	ldr	r3, [r7, #28]
 80178ce:	2b0c      	cmp	r3, #12
 80178d0:	d13e      	bne.n	8017950 <HAL_RCC_OscConfig+0x1ec>
 80178d2:	69bb      	ldr	r3, [r7, #24]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d13b      	bne.n	8017950 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80178d8:	4b71      	ldr	r3, [pc, #452]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	2204      	movs	r2, #4
 80178de:	4013      	ands	r3, r2
 80178e0:	d004      	beq.n	80178ec <HAL_RCC_OscConfig+0x188>
 80178e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d101      	bne.n	80178ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80178e8:	2301      	movs	r3, #1
 80178ea:	e304      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80178ec:	4b6c      	ldr	r3, [pc, #432]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80178ee:	685b      	ldr	r3, [r3, #4]
 80178f0:	4a6e      	ldr	r2, [pc, #440]	@ (8017aac <HAL_RCC_OscConfig+0x348>)
 80178f2:	4013      	ands	r3, r2
 80178f4:	0019      	movs	r1, r3
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	691b      	ldr	r3, [r3, #16]
 80178fa:	021a      	lsls	r2, r3, #8
 80178fc:	4b68      	ldr	r3, [pc, #416]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80178fe:	430a      	orrs	r2, r1
 8017900:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8017902:	4b67      	ldr	r3, [pc, #412]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	2209      	movs	r2, #9
 8017908:	4393      	bics	r3, r2
 801790a:	0019      	movs	r1, r3
 801790c:	4b64      	ldr	r3, [pc, #400]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 801790e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017910:	430a      	orrs	r2, r1
 8017912:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017914:	f000 fc42 	bl	801819c <HAL_RCC_GetSysClockFreq>
 8017918:	0001      	movs	r1, r0
 801791a:	4b61      	ldr	r3, [pc, #388]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 801791c:	68db      	ldr	r3, [r3, #12]
 801791e:	091b      	lsrs	r3, r3, #4
 8017920:	220f      	movs	r2, #15
 8017922:	4013      	ands	r3, r2
 8017924:	4a62      	ldr	r2, [pc, #392]	@ (8017ab0 <HAL_RCC_OscConfig+0x34c>)
 8017926:	5cd3      	ldrb	r3, [r2, r3]
 8017928:	000a      	movs	r2, r1
 801792a:	40da      	lsrs	r2, r3
 801792c:	4b61      	ldr	r3, [pc, #388]	@ (8017ab4 <HAL_RCC_OscConfig+0x350>)
 801792e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8017930:	4b61      	ldr	r3, [pc, #388]	@ (8017ab8 <HAL_RCC_OscConfig+0x354>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	2513      	movs	r5, #19
 8017936:	197c      	adds	r4, r7, r5
 8017938:	0018      	movs	r0, r3
 801793a:	f7f9 fb05 	bl	8010f48 <HAL_InitTick>
 801793e:	0003      	movs	r3, r0
 8017940:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8017942:	197b      	adds	r3, r7, r5
 8017944:	781b      	ldrb	r3, [r3, #0]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d046      	beq.n	80179d8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801794a:	197b      	adds	r3, r7, r5
 801794c:	781b      	ldrb	r3, [r3, #0]
 801794e:	e2d2      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8017950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017952:	2b00      	cmp	r3, #0
 8017954:	d027      	beq.n	80179a6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8017956:	4b52      	ldr	r3, [pc, #328]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	2209      	movs	r2, #9
 801795c:	4393      	bics	r3, r2
 801795e:	0019      	movs	r1, r3
 8017960:	4b4f      	ldr	r3, [pc, #316]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017964:	430a      	orrs	r2, r1
 8017966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017968:	f7f9 fb34 	bl	8010fd4 <HAL_GetTick>
 801796c:	0003      	movs	r3, r0
 801796e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017970:	e008      	b.n	8017984 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017972:	f7f9 fb2f 	bl	8010fd4 <HAL_GetTick>
 8017976:	0002      	movs	r2, r0
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	1ad3      	subs	r3, r2, r3
 801797c:	2b02      	cmp	r3, #2
 801797e:	d901      	bls.n	8017984 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8017980:	2303      	movs	r3, #3
 8017982:	e2b8      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017984:	4b46      	ldr	r3, [pc, #280]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	2204      	movs	r2, #4
 801798a:	4013      	ands	r3, r2
 801798c:	d0f1      	beq.n	8017972 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801798e:	4b44      	ldr	r3, [pc, #272]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017990:	685b      	ldr	r3, [r3, #4]
 8017992:	4a46      	ldr	r2, [pc, #280]	@ (8017aac <HAL_RCC_OscConfig+0x348>)
 8017994:	4013      	ands	r3, r2
 8017996:	0019      	movs	r1, r3
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	691b      	ldr	r3, [r3, #16]
 801799c:	021a      	lsls	r2, r3, #8
 801799e:	4b40      	ldr	r3, [pc, #256]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80179a0:	430a      	orrs	r2, r1
 80179a2:	605a      	str	r2, [r3, #4]
 80179a4:	e018      	b.n	80179d8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80179a6:	4b3e      	ldr	r3, [pc, #248]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80179a8:	681a      	ldr	r2, [r3, #0]
 80179aa:	4b3d      	ldr	r3, [pc, #244]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80179ac:	2101      	movs	r1, #1
 80179ae:	438a      	bics	r2, r1
 80179b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80179b2:	f7f9 fb0f 	bl	8010fd4 <HAL_GetTick>
 80179b6:	0003      	movs	r3, r0
 80179b8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80179ba:	e008      	b.n	80179ce <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80179bc:	f7f9 fb0a 	bl	8010fd4 <HAL_GetTick>
 80179c0:	0002      	movs	r2, r0
 80179c2:	697b      	ldr	r3, [r7, #20]
 80179c4:	1ad3      	subs	r3, r2, r3
 80179c6:	2b02      	cmp	r3, #2
 80179c8:	d901      	bls.n	80179ce <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80179ca:	2303      	movs	r3, #3
 80179cc:	e293      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80179ce:	4b34      	ldr	r3, [pc, #208]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	2204      	movs	r2, #4
 80179d4:	4013      	ands	r3, r2
 80179d6:	d1f1      	bne.n	80179bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	2210      	movs	r2, #16
 80179de:	4013      	ands	r3, r2
 80179e0:	d100      	bne.n	80179e4 <HAL_RCC_OscConfig+0x280>
 80179e2:	e0a2      	b.n	8017b2a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80179e4:	69fb      	ldr	r3, [r7, #28]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d140      	bne.n	8017a6c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80179ea:	4b2d      	ldr	r3, [pc, #180]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 80179ec:	681a      	ldr	r2, [r3, #0]
 80179ee:	2380      	movs	r3, #128	@ 0x80
 80179f0:	009b      	lsls	r3, r3, #2
 80179f2:	4013      	ands	r3, r2
 80179f4:	d005      	beq.n	8017a02 <HAL_RCC_OscConfig+0x29e>
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	69db      	ldr	r3, [r3, #28]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d101      	bne.n	8017a02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80179fe:	2301      	movs	r3, #1
 8017a00:	e279      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017a02:	4b27      	ldr	r3, [pc, #156]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017a04:	685b      	ldr	r3, [r3, #4]
 8017a06:	4a2d      	ldr	r2, [pc, #180]	@ (8017abc <HAL_RCC_OscConfig+0x358>)
 8017a08:	4013      	ands	r3, r2
 8017a0a:	0019      	movs	r1, r3
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a10:	4b23      	ldr	r3, [pc, #140]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017a12:	430a      	orrs	r2, r1
 8017a14:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017a16:	4b22      	ldr	r3, [pc, #136]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017a18:	685b      	ldr	r3, [r3, #4]
 8017a1a:	021b      	lsls	r3, r3, #8
 8017a1c:	0a19      	lsrs	r1, r3, #8
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	6a1b      	ldr	r3, [r3, #32]
 8017a22:	061a      	lsls	r2, r3, #24
 8017a24:	4b1e      	ldr	r3, [pc, #120]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017a26:	430a      	orrs	r2, r1
 8017a28:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a2e:	0b5b      	lsrs	r3, r3, #13
 8017a30:	3301      	adds	r3, #1
 8017a32:	2280      	movs	r2, #128	@ 0x80
 8017a34:	0212      	lsls	r2, r2, #8
 8017a36:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8017a38:	4b19      	ldr	r3, [pc, #100]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017a3a:	68db      	ldr	r3, [r3, #12]
 8017a3c:	091b      	lsrs	r3, r3, #4
 8017a3e:	210f      	movs	r1, #15
 8017a40:	400b      	ands	r3, r1
 8017a42:	491b      	ldr	r1, [pc, #108]	@ (8017ab0 <HAL_RCC_OscConfig+0x34c>)
 8017a44:	5ccb      	ldrb	r3, [r1, r3]
 8017a46:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8017a48:	4b1a      	ldr	r3, [pc, #104]	@ (8017ab4 <HAL_RCC_OscConfig+0x350>)
 8017a4a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8017a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8017ab8 <HAL_RCC_OscConfig+0x354>)
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	2513      	movs	r5, #19
 8017a52:	197c      	adds	r4, r7, r5
 8017a54:	0018      	movs	r0, r3
 8017a56:	f7f9 fa77 	bl	8010f48 <HAL_InitTick>
 8017a5a:	0003      	movs	r3, r0
 8017a5c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8017a5e:	197b      	adds	r3, r7, r5
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d061      	beq.n	8017b2a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8017a66:	197b      	adds	r3, r7, r5
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	e244      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	69db      	ldr	r3, [r3, #28]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d040      	beq.n	8017af6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017a74:	4b0a      	ldr	r3, [pc, #40]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017a76:	681a      	ldr	r2, [r3, #0]
 8017a78:	4b09      	ldr	r3, [pc, #36]	@ (8017aa0 <HAL_RCC_OscConfig+0x33c>)
 8017a7a:	2180      	movs	r1, #128	@ 0x80
 8017a7c:	0049      	lsls	r1, r1, #1
 8017a7e:	430a      	orrs	r2, r1
 8017a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017a82:	f7f9 faa7 	bl	8010fd4 <HAL_GetTick>
 8017a86:	0003      	movs	r3, r0
 8017a88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017a8a:	e019      	b.n	8017ac0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017a8c:	f7f9 faa2 	bl	8010fd4 <HAL_GetTick>
 8017a90:	0002      	movs	r2, r0
 8017a92:	697b      	ldr	r3, [r7, #20]
 8017a94:	1ad3      	subs	r3, r2, r3
 8017a96:	2b02      	cmp	r3, #2
 8017a98:	d912      	bls.n	8017ac0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8017a9a:	2303      	movs	r3, #3
 8017a9c:	e22b      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
 8017a9e:	46c0      	nop			@ (mov r8, r8)
 8017aa0:	40021000 	.word	0x40021000
 8017aa4:	fffeffff 	.word	0xfffeffff
 8017aa8:	fffbffff 	.word	0xfffbffff
 8017aac:	ffffe0ff 	.word	0xffffe0ff
 8017ab0:	08028d98 	.word	0x08028d98
 8017ab4:	200000dc 	.word	0x200000dc
 8017ab8:	200000ec 	.word	0x200000ec
 8017abc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017ac0:	4bca      	ldr	r3, [pc, #808]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017ac2:	681a      	ldr	r2, [r3, #0]
 8017ac4:	2380      	movs	r3, #128	@ 0x80
 8017ac6:	009b      	lsls	r3, r3, #2
 8017ac8:	4013      	ands	r3, r2
 8017aca:	d0df      	beq.n	8017a8c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017acc:	4bc7      	ldr	r3, [pc, #796]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017ace:	685b      	ldr	r3, [r3, #4]
 8017ad0:	4ac7      	ldr	r2, [pc, #796]	@ (8017df0 <HAL_RCC_OscConfig+0x68c>)
 8017ad2:	4013      	ands	r3, r2
 8017ad4:	0019      	movs	r1, r3
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017ada:	4bc4      	ldr	r3, [pc, #784]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017adc:	430a      	orrs	r2, r1
 8017ade:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017ae0:	4bc2      	ldr	r3, [pc, #776]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017ae2:	685b      	ldr	r3, [r3, #4]
 8017ae4:	021b      	lsls	r3, r3, #8
 8017ae6:	0a19      	lsrs	r1, r3, #8
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	6a1b      	ldr	r3, [r3, #32]
 8017aec:	061a      	lsls	r2, r3, #24
 8017aee:	4bbf      	ldr	r3, [pc, #764]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017af0:	430a      	orrs	r2, r1
 8017af2:	605a      	str	r2, [r3, #4]
 8017af4:	e019      	b.n	8017b2a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017af6:	4bbd      	ldr	r3, [pc, #756]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017af8:	681a      	ldr	r2, [r3, #0]
 8017afa:	4bbc      	ldr	r3, [pc, #752]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017afc:	49bd      	ldr	r1, [pc, #756]	@ (8017df4 <HAL_RCC_OscConfig+0x690>)
 8017afe:	400a      	ands	r2, r1
 8017b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017b02:	f7f9 fa67 	bl	8010fd4 <HAL_GetTick>
 8017b06:	0003      	movs	r3, r0
 8017b08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8017b0a:	e008      	b.n	8017b1e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017b0c:	f7f9 fa62 	bl	8010fd4 <HAL_GetTick>
 8017b10:	0002      	movs	r2, r0
 8017b12:	697b      	ldr	r3, [r7, #20]
 8017b14:	1ad3      	subs	r3, r2, r3
 8017b16:	2b02      	cmp	r3, #2
 8017b18:	d901      	bls.n	8017b1e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8017b1a:	2303      	movs	r3, #3
 8017b1c:	e1eb      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8017b1e:	4bb3      	ldr	r3, [pc, #716]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017b20:	681a      	ldr	r2, [r3, #0]
 8017b22:	2380      	movs	r3, #128	@ 0x80
 8017b24:	009b      	lsls	r3, r3, #2
 8017b26:	4013      	ands	r3, r2
 8017b28:	d1f0      	bne.n	8017b0c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	2208      	movs	r2, #8
 8017b30:	4013      	ands	r3, r2
 8017b32:	d036      	beq.n	8017ba2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	695b      	ldr	r3, [r3, #20]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d019      	beq.n	8017b70 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017b3c:	4bab      	ldr	r3, [pc, #684]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017b3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017b40:	4baa      	ldr	r3, [pc, #680]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017b42:	2101      	movs	r1, #1
 8017b44:	430a      	orrs	r2, r1
 8017b46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017b48:	f7f9 fa44 	bl	8010fd4 <HAL_GetTick>
 8017b4c:	0003      	movs	r3, r0
 8017b4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017b50:	e008      	b.n	8017b64 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017b52:	f7f9 fa3f 	bl	8010fd4 <HAL_GetTick>
 8017b56:	0002      	movs	r2, r0
 8017b58:	697b      	ldr	r3, [r7, #20]
 8017b5a:	1ad3      	subs	r3, r2, r3
 8017b5c:	2b02      	cmp	r3, #2
 8017b5e:	d901      	bls.n	8017b64 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8017b60:	2303      	movs	r3, #3
 8017b62:	e1c8      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017b64:	4ba1      	ldr	r3, [pc, #644]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b68:	2202      	movs	r2, #2
 8017b6a:	4013      	ands	r3, r2
 8017b6c:	d0f1      	beq.n	8017b52 <HAL_RCC_OscConfig+0x3ee>
 8017b6e:	e018      	b.n	8017ba2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017b70:	4b9e      	ldr	r3, [pc, #632]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017b72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017b74:	4b9d      	ldr	r3, [pc, #628]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017b76:	2101      	movs	r1, #1
 8017b78:	438a      	bics	r2, r1
 8017b7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017b7c:	f7f9 fa2a 	bl	8010fd4 <HAL_GetTick>
 8017b80:	0003      	movs	r3, r0
 8017b82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017b84:	e008      	b.n	8017b98 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017b86:	f7f9 fa25 	bl	8010fd4 <HAL_GetTick>
 8017b8a:	0002      	movs	r2, r0
 8017b8c:	697b      	ldr	r3, [r7, #20]
 8017b8e:	1ad3      	subs	r3, r2, r3
 8017b90:	2b02      	cmp	r3, #2
 8017b92:	d901      	bls.n	8017b98 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8017b94:	2303      	movs	r3, #3
 8017b96:	e1ae      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017b98:	4b94      	ldr	r3, [pc, #592]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b9c:	2202      	movs	r2, #2
 8017b9e:	4013      	ands	r3, r2
 8017ba0:	d1f1      	bne.n	8017b86 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	2204      	movs	r2, #4
 8017ba8:	4013      	ands	r3, r2
 8017baa:	d100      	bne.n	8017bae <HAL_RCC_OscConfig+0x44a>
 8017bac:	e0ae      	b.n	8017d0c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017bae:	2023      	movs	r0, #35	@ 0x23
 8017bb0:	183b      	adds	r3, r7, r0
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017bba:	2380      	movs	r3, #128	@ 0x80
 8017bbc:	055b      	lsls	r3, r3, #21
 8017bbe:	4013      	ands	r3, r2
 8017bc0:	d109      	bne.n	8017bd6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017bc2:	4b8a      	ldr	r3, [pc, #552]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017bc6:	4b89      	ldr	r3, [pc, #548]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017bc8:	2180      	movs	r1, #128	@ 0x80
 8017bca:	0549      	lsls	r1, r1, #21
 8017bcc:	430a      	orrs	r2, r1
 8017bce:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8017bd0:	183b      	adds	r3, r7, r0
 8017bd2:	2201      	movs	r2, #1
 8017bd4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017bd6:	4b88      	ldr	r3, [pc, #544]	@ (8017df8 <HAL_RCC_OscConfig+0x694>)
 8017bd8:	681a      	ldr	r2, [r3, #0]
 8017bda:	2380      	movs	r3, #128	@ 0x80
 8017bdc:	005b      	lsls	r3, r3, #1
 8017bde:	4013      	ands	r3, r2
 8017be0:	d11a      	bne.n	8017c18 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017be2:	4b85      	ldr	r3, [pc, #532]	@ (8017df8 <HAL_RCC_OscConfig+0x694>)
 8017be4:	681a      	ldr	r2, [r3, #0]
 8017be6:	4b84      	ldr	r3, [pc, #528]	@ (8017df8 <HAL_RCC_OscConfig+0x694>)
 8017be8:	2180      	movs	r1, #128	@ 0x80
 8017bea:	0049      	lsls	r1, r1, #1
 8017bec:	430a      	orrs	r2, r1
 8017bee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017bf0:	f7f9 f9f0 	bl	8010fd4 <HAL_GetTick>
 8017bf4:	0003      	movs	r3, r0
 8017bf6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017bf8:	e008      	b.n	8017c0c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017bfa:	f7f9 f9eb 	bl	8010fd4 <HAL_GetTick>
 8017bfe:	0002      	movs	r2, r0
 8017c00:	697b      	ldr	r3, [r7, #20]
 8017c02:	1ad3      	subs	r3, r2, r3
 8017c04:	2b64      	cmp	r3, #100	@ 0x64
 8017c06:	d901      	bls.n	8017c0c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8017c08:	2303      	movs	r3, #3
 8017c0a:	e174      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017c0c:	4b7a      	ldr	r3, [pc, #488]	@ (8017df8 <HAL_RCC_OscConfig+0x694>)
 8017c0e:	681a      	ldr	r2, [r3, #0]
 8017c10:	2380      	movs	r3, #128	@ 0x80
 8017c12:	005b      	lsls	r3, r3, #1
 8017c14:	4013      	ands	r3, r2
 8017c16:	d0f0      	beq.n	8017bfa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	689a      	ldr	r2, [r3, #8]
 8017c1c:	2380      	movs	r3, #128	@ 0x80
 8017c1e:	005b      	lsls	r3, r3, #1
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d107      	bne.n	8017c34 <HAL_RCC_OscConfig+0x4d0>
 8017c24:	4b71      	ldr	r3, [pc, #452]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c28:	4b70      	ldr	r3, [pc, #448]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c2a:	2180      	movs	r1, #128	@ 0x80
 8017c2c:	0049      	lsls	r1, r1, #1
 8017c2e:	430a      	orrs	r2, r1
 8017c30:	651a      	str	r2, [r3, #80]	@ 0x50
 8017c32:	e031      	b.n	8017c98 <HAL_RCC_OscConfig+0x534>
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	689b      	ldr	r3, [r3, #8]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d10c      	bne.n	8017c56 <HAL_RCC_OscConfig+0x4f2>
 8017c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c40:	4b6a      	ldr	r3, [pc, #424]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c42:	496c      	ldr	r1, [pc, #432]	@ (8017df4 <HAL_RCC_OscConfig+0x690>)
 8017c44:	400a      	ands	r2, r1
 8017c46:	651a      	str	r2, [r3, #80]	@ 0x50
 8017c48:	4b68      	ldr	r3, [pc, #416]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c4c:	4b67      	ldr	r3, [pc, #412]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c4e:	496b      	ldr	r1, [pc, #428]	@ (8017dfc <HAL_RCC_OscConfig+0x698>)
 8017c50:	400a      	ands	r2, r1
 8017c52:	651a      	str	r2, [r3, #80]	@ 0x50
 8017c54:	e020      	b.n	8017c98 <HAL_RCC_OscConfig+0x534>
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	689a      	ldr	r2, [r3, #8]
 8017c5a:	23a0      	movs	r3, #160	@ 0xa0
 8017c5c:	00db      	lsls	r3, r3, #3
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d10e      	bne.n	8017c80 <HAL_RCC_OscConfig+0x51c>
 8017c62:	4b62      	ldr	r3, [pc, #392]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c66:	4b61      	ldr	r3, [pc, #388]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c68:	2180      	movs	r1, #128	@ 0x80
 8017c6a:	00c9      	lsls	r1, r1, #3
 8017c6c:	430a      	orrs	r2, r1
 8017c6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8017c70:	4b5e      	ldr	r3, [pc, #376]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c74:	4b5d      	ldr	r3, [pc, #372]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c76:	2180      	movs	r1, #128	@ 0x80
 8017c78:	0049      	lsls	r1, r1, #1
 8017c7a:	430a      	orrs	r2, r1
 8017c7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8017c7e:	e00b      	b.n	8017c98 <HAL_RCC_OscConfig+0x534>
 8017c80:	4b5a      	ldr	r3, [pc, #360]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c84:	4b59      	ldr	r3, [pc, #356]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c86:	495b      	ldr	r1, [pc, #364]	@ (8017df4 <HAL_RCC_OscConfig+0x690>)
 8017c88:	400a      	ands	r2, r1
 8017c8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8017c8c:	4b57      	ldr	r3, [pc, #348]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c90:	4b56      	ldr	r3, [pc, #344]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017c92:	495a      	ldr	r1, [pc, #360]	@ (8017dfc <HAL_RCC_OscConfig+0x698>)
 8017c94:	400a      	ands	r2, r1
 8017c96:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	689b      	ldr	r3, [r3, #8]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d015      	beq.n	8017ccc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017ca0:	f7f9 f998 	bl	8010fd4 <HAL_GetTick>
 8017ca4:	0003      	movs	r3, r0
 8017ca6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017ca8:	e009      	b.n	8017cbe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017caa:	f7f9 f993 	bl	8010fd4 <HAL_GetTick>
 8017cae:	0002      	movs	r2, r0
 8017cb0:	697b      	ldr	r3, [r7, #20]
 8017cb2:	1ad3      	subs	r3, r2, r3
 8017cb4:	4a52      	ldr	r2, [pc, #328]	@ (8017e00 <HAL_RCC_OscConfig+0x69c>)
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	d901      	bls.n	8017cbe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8017cba:	2303      	movs	r3, #3
 8017cbc:	e11b      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017cc2:	2380      	movs	r3, #128	@ 0x80
 8017cc4:	009b      	lsls	r3, r3, #2
 8017cc6:	4013      	ands	r3, r2
 8017cc8:	d0ef      	beq.n	8017caa <HAL_RCC_OscConfig+0x546>
 8017cca:	e014      	b.n	8017cf6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017ccc:	f7f9 f982 	bl	8010fd4 <HAL_GetTick>
 8017cd0:	0003      	movs	r3, r0
 8017cd2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017cd4:	e009      	b.n	8017cea <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017cd6:	f7f9 f97d 	bl	8010fd4 <HAL_GetTick>
 8017cda:	0002      	movs	r2, r0
 8017cdc:	697b      	ldr	r3, [r7, #20]
 8017cde:	1ad3      	subs	r3, r2, r3
 8017ce0:	4a47      	ldr	r2, [pc, #284]	@ (8017e00 <HAL_RCC_OscConfig+0x69c>)
 8017ce2:	4293      	cmp	r3, r2
 8017ce4:	d901      	bls.n	8017cea <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8017ce6:	2303      	movs	r3, #3
 8017ce8:	e105      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017cea:	4b40      	ldr	r3, [pc, #256]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017cec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017cee:	2380      	movs	r3, #128	@ 0x80
 8017cf0:	009b      	lsls	r3, r3, #2
 8017cf2:	4013      	ands	r3, r2
 8017cf4:	d1ef      	bne.n	8017cd6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8017cf6:	2323      	movs	r3, #35	@ 0x23
 8017cf8:	18fb      	adds	r3, r7, r3
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	2b01      	cmp	r3, #1
 8017cfe:	d105      	bne.n	8017d0c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017d00:	4b3a      	ldr	r3, [pc, #232]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017d04:	4b39      	ldr	r3, [pc, #228]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d06:	493f      	ldr	r1, [pc, #252]	@ (8017e04 <HAL_RCC_OscConfig+0x6a0>)
 8017d08:	400a      	ands	r2, r1
 8017d0a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	2220      	movs	r2, #32
 8017d12:	4013      	ands	r3, r2
 8017d14:	d049      	beq.n	8017daa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	699b      	ldr	r3, [r3, #24]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d026      	beq.n	8017d6c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8017d1e:	4b33      	ldr	r3, [pc, #204]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d20:	689a      	ldr	r2, [r3, #8]
 8017d22:	4b32      	ldr	r3, [pc, #200]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d24:	2101      	movs	r1, #1
 8017d26:	430a      	orrs	r2, r1
 8017d28:	609a      	str	r2, [r3, #8]
 8017d2a:	4b30      	ldr	r3, [pc, #192]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d30:	2101      	movs	r1, #1
 8017d32:	430a      	orrs	r2, r1
 8017d34:	635a      	str	r2, [r3, #52]	@ 0x34
 8017d36:	4b34      	ldr	r3, [pc, #208]	@ (8017e08 <HAL_RCC_OscConfig+0x6a4>)
 8017d38:	6a1a      	ldr	r2, [r3, #32]
 8017d3a:	4b33      	ldr	r3, [pc, #204]	@ (8017e08 <HAL_RCC_OscConfig+0x6a4>)
 8017d3c:	2180      	movs	r1, #128	@ 0x80
 8017d3e:	0189      	lsls	r1, r1, #6
 8017d40:	430a      	orrs	r2, r1
 8017d42:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017d44:	f7f9 f946 	bl	8010fd4 <HAL_GetTick>
 8017d48:	0003      	movs	r3, r0
 8017d4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017d4c:	e008      	b.n	8017d60 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017d4e:	f7f9 f941 	bl	8010fd4 <HAL_GetTick>
 8017d52:	0002      	movs	r2, r0
 8017d54:	697b      	ldr	r3, [r7, #20]
 8017d56:	1ad3      	subs	r3, r2, r3
 8017d58:	2b02      	cmp	r3, #2
 8017d5a:	d901      	bls.n	8017d60 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8017d5c:	2303      	movs	r3, #3
 8017d5e:	e0ca      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017d60:	4b22      	ldr	r3, [pc, #136]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d62:	689b      	ldr	r3, [r3, #8]
 8017d64:	2202      	movs	r2, #2
 8017d66:	4013      	ands	r3, r2
 8017d68:	d0f1      	beq.n	8017d4e <HAL_RCC_OscConfig+0x5ea>
 8017d6a:	e01e      	b.n	8017daa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8017d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d6e:	689a      	ldr	r2, [r3, #8]
 8017d70:	4b1e      	ldr	r3, [pc, #120]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017d72:	2101      	movs	r1, #1
 8017d74:	438a      	bics	r2, r1
 8017d76:	609a      	str	r2, [r3, #8]
 8017d78:	4b23      	ldr	r3, [pc, #140]	@ (8017e08 <HAL_RCC_OscConfig+0x6a4>)
 8017d7a:	6a1a      	ldr	r2, [r3, #32]
 8017d7c:	4b22      	ldr	r3, [pc, #136]	@ (8017e08 <HAL_RCC_OscConfig+0x6a4>)
 8017d7e:	4923      	ldr	r1, [pc, #140]	@ (8017e0c <HAL_RCC_OscConfig+0x6a8>)
 8017d80:	400a      	ands	r2, r1
 8017d82:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017d84:	f7f9 f926 	bl	8010fd4 <HAL_GetTick>
 8017d88:	0003      	movs	r3, r0
 8017d8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017d8c:	e008      	b.n	8017da0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017d8e:	f7f9 f921 	bl	8010fd4 <HAL_GetTick>
 8017d92:	0002      	movs	r2, r0
 8017d94:	697b      	ldr	r3, [r7, #20]
 8017d96:	1ad3      	subs	r3, r2, r3
 8017d98:	2b02      	cmp	r3, #2
 8017d9a:	d901      	bls.n	8017da0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8017d9c:	2303      	movs	r3, #3
 8017d9e:	e0aa      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017da0:	4b12      	ldr	r3, [pc, #72]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017da2:	689b      	ldr	r3, [r3, #8]
 8017da4:	2202      	movs	r2, #2
 8017da6:	4013      	ands	r3, r2
 8017da8:	d1f1      	bne.n	8017d8e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d100      	bne.n	8017db4 <HAL_RCC_OscConfig+0x650>
 8017db2:	e09f      	b.n	8017ef4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017db4:	69fb      	ldr	r3, [r7, #28]
 8017db6:	2b0c      	cmp	r3, #12
 8017db8:	d100      	bne.n	8017dbc <HAL_RCC_OscConfig+0x658>
 8017dba:	e078      	b.n	8017eae <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dc0:	2b02      	cmp	r3, #2
 8017dc2:	d159      	bne.n	8017e78 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017dc4:	4b09      	ldr	r3, [pc, #36]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017dc6:	681a      	ldr	r2, [r3, #0]
 8017dc8:	4b08      	ldr	r3, [pc, #32]	@ (8017dec <HAL_RCC_OscConfig+0x688>)
 8017dca:	4911      	ldr	r1, [pc, #68]	@ (8017e10 <HAL_RCC_OscConfig+0x6ac>)
 8017dcc:	400a      	ands	r2, r1
 8017dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017dd0:	f7f9 f900 	bl	8010fd4 <HAL_GetTick>
 8017dd4:	0003      	movs	r3, r0
 8017dd6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017dd8:	e01c      	b.n	8017e14 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017dda:	f7f9 f8fb 	bl	8010fd4 <HAL_GetTick>
 8017dde:	0002      	movs	r2, r0
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	1ad3      	subs	r3, r2, r3
 8017de4:	2b02      	cmp	r3, #2
 8017de6:	d915      	bls.n	8017e14 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8017de8:	2303      	movs	r3, #3
 8017dea:	e084      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
 8017dec:	40021000 	.word	0x40021000
 8017df0:	ffff1fff 	.word	0xffff1fff
 8017df4:	fffffeff 	.word	0xfffffeff
 8017df8:	40007000 	.word	0x40007000
 8017dfc:	fffffbff 	.word	0xfffffbff
 8017e00:	00001388 	.word	0x00001388
 8017e04:	efffffff 	.word	0xefffffff
 8017e08:	40010000 	.word	0x40010000
 8017e0c:	ffffdfff 	.word	0xffffdfff
 8017e10:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017e14:	4b3a      	ldr	r3, [pc, #232]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017e16:	681a      	ldr	r2, [r3, #0]
 8017e18:	2380      	movs	r3, #128	@ 0x80
 8017e1a:	049b      	lsls	r3, r3, #18
 8017e1c:	4013      	ands	r3, r2
 8017e1e:	d1dc      	bne.n	8017dda <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017e20:	4b37      	ldr	r3, [pc, #220]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017e22:	68db      	ldr	r3, [r3, #12]
 8017e24:	4a37      	ldr	r2, [pc, #220]	@ (8017f04 <HAL_RCC_OscConfig+0x7a0>)
 8017e26:	4013      	ands	r3, r2
 8017e28:	0019      	movs	r1, r3
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e32:	431a      	orrs	r2, r3
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017e38:	431a      	orrs	r2, r3
 8017e3a:	4b31      	ldr	r3, [pc, #196]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017e3c:	430a      	orrs	r2, r1
 8017e3e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017e40:	4b2f      	ldr	r3, [pc, #188]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017e42:	681a      	ldr	r2, [r3, #0]
 8017e44:	4b2e      	ldr	r3, [pc, #184]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017e46:	2180      	movs	r1, #128	@ 0x80
 8017e48:	0449      	lsls	r1, r1, #17
 8017e4a:	430a      	orrs	r2, r1
 8017e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017e4e:	f7f9 f8c1 	bl	8010fd4 <HAL_GetTick>
 8017e52:	0003      	movs	r3, r0
 8017e54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8017e56:	e008      	b.n	8017e6a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017e58:	f7f9 f8bc 	bl	8010fd4 <HAL_GetTick>
 8017e5c:	0002      	movs	r2, r0
 8017e5e:	697b      	ldr	r3, [r7, #20]
 8017e60:	1ad3      	subs	r3, r2, r3
 8017e62:	2b02      	cmp	r3, #2
 8017e64:	d901      	bls.n	8017e6a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8017e66:	2303      	movs	r3, #3
 8017e68:	e045      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8017e6a:	4b25      	ldr	r3, [pc, #148]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	2380      	movs	r3, #128	@ 0x80
 8017e70:	049b      	lsls	r3, r3, #18
 8017e72:	4013      	ands	r3, r2
 8017e74:	d0f0      	beq.n	8017e58 <HAL_RCC_OscConfig+0x6f4>
 8017e76:	e03d      	b.n	8017ef4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017e78:	4b21      	ldr	r3, [pc, #132]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017e7a:	681a      	ldr	r2, [r3, #0]
 8017e7c:	4b20      	ldr	r3, [pc, #128]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017e7e:	4922      	ldr	r1, [pc, #136]	@ (8017f08 <HAL_RCC_OscConfig+0x7a4>)
 8017e80:	400a      	ands	r2, r1
 8017e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017e84:	f7f9 f8a6 	bl	8010fd4 <HAL_GetTick>
 8017e88:	0003      	movs	r3, r0
 8017e8a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017e8c:	e008      	b.n	8017ea0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017e8e:	f7f9 f8a1 	bl	8010fd4 <HAL_GetTick>
 8017e92:	0002      	movs	r2, r0
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	1ad3      	subs	r3, r2, r3
 8017e98:	2b02      	cmp	r3, #2
 8017e9a:	d901      	bls.n	8017ea0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8017e9c:	2303      	movs	r3, #3
 8017e9e:	e02a      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8017ea0:	4b17      	ldr	r3, [pc, #92]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017ea2:	681a      	ldr	r2, [r3, #0]
 8017ea4:	2380      	movs	r3, #128	@ 0x80
 8017ea6:	049b      	lsls	r3, r3, #18
 8017ea8:	4013      	ands	r3, r2
 8017eaa:	d1f0      	bne.n	8017e8e <HAL_RCC_OscConfig+0x72a>
 8017eac:	e022      	b.n	8017ef4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017eb2:	2b01      	cmp	r3, #1
 8017eb4:	d101      	bne.n	8017eba <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8017eb6:	2301      	movs	r3, #1
 8017eb8:	e01d      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8017eba:	4b11      	ldr	r3, [pc, #68]	@ (8017f00 <HAL_RCC_OscConfig+0x79c>)
 8017ebc:	68db      	ldr	r3, [r3, #12]
 8017ebe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017ec0:	69ba      	ldr	r2, [r7, #24]
 8017ec2:	2380      	movs	r3, #128	@ 0x80
 8017ec4:	025b      	lsls	r3, r3, #9
 8017ec6:	401a      	ands	r2, r3
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d10f      	bne.n	8017ef0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017ed0:	69ba      	ldr	r2, [r7, #24]
 8017ed2:	23f0      	movs	r3, #240	@ 0xf0
 8017ed4:	039b      	lsls	r3, r3, #14
 8017ed6:	401a      	ands	r2, r3
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d107      	bne.n	8017ef0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8017ee0:	69ba      	ldr	r2, [r7, #24]
 8017ee2:	23c0      	movs	r3, #192	@ 0xc0
 8017ee4:	041b      	lsls	r3, r3, #16
 8017ee6:	401a      	ands	r2, r3
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8017eec:	429a      	cmp	r2, r3
 8017eee:	d001      	beq.n	8017ef4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	e000      	b.n	8017ef6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8017ef4:	2300      	movs	r3, #0
}
 8017ef6:	0018      	movs	r0, r3
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	b00a      	add	sp, #40	@ 0x28
 8017efc:	bdb0      	pop	{r4, r5, r7, pc}
 8017efe:	46c0      	nop			@ (mov r8, r8)
 8017f00:	40021000 	.word	0x40021000
 8017f04:	ff02ffff 	.word	0xff02ffff
 8017f08:	feffffff 	.word	0xfeffffff

08017f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017f0c:	b5b0      	push	{r4, r5, r7, lr}
 8017f0e:	b084      	sub	sp, #16
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
 8017f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d101      	bne.n	8017f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017f1c:	2301      	movs	r3, #1
 8017f1e:	e128      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8017f20:	4b96      	ldr	r3, [pc, #600]	@ (801817c <HAL_RCC_ClockConfig+0x270>)
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	2201      	movs	r2, #1
 8017f26:	4013      	ands	r3, r2
 8017f28:	683a      	ldr	r2, [r7, #0]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d91e      	bls.n	8017f6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017f2e:	4b93      	ldr	r3, [pc, #588]	@ (801817c <HAL_RCC_ClockConfig+0x270>)
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	2201      	movs	r2, #1
 8017f34:	4393      	bics	r3, r2
 8017f36:	0019      	movs	r1, r3
 8017f38:	4b90      	ldr	r3, [pc, #576]	@ (801817c <HAL_RCC_ClockConfig+0x270>)
 8017f3a:	683a      	ldr	r2, [r7, #0]
 8017f3c:	430a      	orrs	r2, r1
 8017f3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8017f40:	f7f9 f848 	bl	8010fd4 <HAL_GetTick>
 8017f44:	0003      	movs	r3, r0
 8017f46:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017f48:	e009      	b.n	8017f5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017f4a:	f7f9 f843 	bl	8010fd4 <HAL_GetTick>
 8017f4e:	0002      	movs	r2, r0
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	1ad3      	subs	r3, r2, r3
 8017f54:	4a8a      	ldr	r2, [pc, #552]	@ (8018180 <HAL_RCC_ClockConfig+0x274>)
 8017f56:	4293      	cmp	r3, r2
 8017f58:	d901      	bls.n	8017f5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8017f5a:	2303      	movs	r3, #3
 8017f5c:	e109      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017f5e:	4b87      	ldr	r3, [pc, #540]	@ (801817c <HAL_RCC_ClockConfig+0x270>)
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	2201      	movs	r2, #1
 8017f64:	4013      	ands	r3, r2
 8017f66:	683a      	ldr	r2, [r7, #0]
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d1ee      	bne.n	8017f4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	2202      	movs	r2, #2
 8017f72:	4013      	ands	r3, r2
 8017f74:	d009      	beq.n	8017f8a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017f76:	4b83      	ldr	r3, [pc, #524]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8017f78:	68db      	ldr	r3, [r3, #12]
 8017f7a:	22f0      	movs	r2, #240	@ 0xf0
 8017f7c:	4393      	bics	r3, r2
 8017f7e:	0019      	movs	r1, r3
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	689a      	ldr	r2, [r3, #8]
 8017f84:	4b7f      	ldr	r3, [pc, #508]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8017f86:	430a      	orrs	r2, r1
 8017f88:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	2201      	movs	r2, #1
 8017f90:	4013      	ands	r3, r2
 8017f92:	d100      	bne.n	8017f96 <HAL_RCC_ClockConfig+0x8a>
 8017f94:	e089      	b.n	80180aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	685b      	ldr	r3, [r3, #4]
 8017f9a:	2b02      	cmp	r3, #2
 8017f9c:	d107      	bne.n	8017fae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8017f9e:	4b79      	ldr	r3, [pc, #484]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	2380      	movs	r3, #128	@ 0x80
 8017fa4:	029b      	lsls	r3, r3, #10
 8017fa6:	4013      	ands	r3, r2
 8017fa8:	d120      	bne.n	8017fec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8017faa:	2301      	movs	r3, #1
 8017fac:	e0e1      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	2b03      	cmp	r3, #3
 8017fb4:	d107      	bne.n	8017fc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8017fb6:	4b73      	ldr	r3, [pc, #460]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8017fb8:	681a      	ldr	r2, [r3, #0]
 8017fba:	2380      	movs	r3, #128	@ 0x80
 8017fbc:	049b      	lsls	r3, r3, #18
 8017fbe:	4013      	ands	r3, r2
 8017fc0:	d114      	bne.n	8017fec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8017fc2:	2301      	movs	r3, #1
 8017fc4:	e0d5      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	685b      	ldr	r3, [r3, #4]
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d106      	bne.n	8017fdc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017fce:	4b6d      	ldr	r3, [pc, #436]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	2204      	movs	r2, #4
 8017fd4:	4013      	ands	r3, r2
 8017fd6:	d109      	bne.n	8017fec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8017fd8:	2301      	movs	r3, #1
 8017fda:	e0ca      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017fdc:	4b69      	ldr	r3, [pc, #420]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8017fde:	681a      	ldr	r2, [r3, #0]
 8017fe0:	2380      	movs	r3, #128	@ 0x80
 8017fe2:	009b      	lsls	r3, r3, #2
 8017fe4:	4013      	ands	r3, r2
 8017fe6:	d101      	bne.n	8017fec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8017fe8:	2301      	movs	r3, #1
 8017fea:	e0c2      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8017fec:	4b65      	ldr	r3, [pc, #404]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	2203      	movs	r2, #3
 8017ff2:	4393      	bics	r3, r2
 8017ff4:	0019      	movs	r1, r3
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	685a      	ldr	r2, [r3, #4]
 8017ffa:	4b62      	ldr	r3, [pc, #392]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8017ffc:	430a      	orrs	r2, r1
 8017ffe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8018000:	f7f8 ffe8 	bl	8010fd4 <HAL_GetTick>
 8018004:	0003      	movs	r3, r0
 8018006:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	685b      	ldr	r3, [r3, #4]
 801800c:	2b02      	cmp	r3, #2
 801800e:	d111      	bne.n	8018034 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8018010:	e009      	b.n	8018026 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018012:	f7f8 ffdf 	bl	8010fd4 <HAL_GetTick>
 8018016:	0002      	movs	r2, r0
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	1ad3      	subs	r3, r2, r3
 801801c:	4a58      	ldr	r2, [pc, #352]	@ (8018180 <HAL_RCC_ClockConfig+0x274>)
 801801e:	4293      	cmp	r3, r2
 8018020:	d901      	bls.n	8018026 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8018022:	2303      	movs	r3, #3
 8018024:	e0a5      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8018026:	4b57      	ldr	r3, [pc, #348]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8018028:	68db      	ldr	r3, [r3, #12]
 801802a:	220c      	movs	r2, #12
 801802c:	4013      	ands	r3, r2
 801802e:	2b08      	cmp	r3, #8
 8018030:	d1ef      	bne.n	8018012 <HAL_RCC_ClockConfig+0x106>
 8018032:	e03a      	b.n	80180aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	685b      	ldr	r3, [r3, #4]
 8018038:	2b03      	cmp	r3, #3
 801803a:	d111      	bne.n	8018060 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801803c:	e009      	b.n	8018052 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801803e:	f7f8 ffc9 	bl	8010fd4 <HAL_GetTick>
 8018042:	0002      	movs	r2, r0
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	1ad3      	subs	r3, r2, r3
 8018048:	4a4d      	ldr	r2, [pc, #308]	@ (8018180 <HAL_RCC_ClockConfig+0x274>)
 801804a:	4293      	cmp	r3, r2
 801804c:	d901      	bls.n	8018052 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801804e:	2303      	movs	r3, #3
 8018050:	e08f      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018052:	4b4c      	ldr	r3, [pc, #304]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8018054:	68db      	ldr	r3, [r3, #12]
 8018056:	220c      	movs	r2, #12
 8018058:	4013      	ands	r3, r2
 801805a:	2b0c      	cmp	r3, #12
 801805c:	d1ef      	bne.n	801803e <HAL_RCC_ClockConfig+0x132>
 801805e:	e024      	b.n	80180aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	685b      	ldr	r3, [r3, #4]
 8018064:	2b01      	cmp	r3, #1
 8018066:	d11b      	bne.n	80180a0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8018068:	e009      	b.n	801807e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801806a:	f7f8 ffb3 	bl	8010fd4 <HAL_GetTick>
 801806e:	0002      	movs	r2, r0
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	1ad3      	subs	r3, r2, r3
 8018074:	4a42      	ldr	r2, [pc, #264]	@ (8018180 <HAL_RCC_ClockConfig+0x274>)
 8018076:	4293      	cmp	r3, r2
 8018078:	d901      	bls.n	801807e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801807a:	2303      	movs	r3, #3
 801807c:	e079      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801807e:	4b41      	ldr	r3, [pc, #260]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8018080:	68db      	ldr	r3, [r3, #12]
 8018082:	220c      	movs	r2, #12
 8018084:	4013      	ands	r3, r2
 8018086:	2b04      	cmp	r3, #4
 8018088:	d1ef      	bne.n	801806a <HAL_RCC_ClockConfig+0x15e>
 801808a:	e00e      	b.n	80180aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801808c:	f7f8 ffa2 	bl	8010fd4 <HAL_GetTick>
 8018090:	0002      	movs	r2, r0
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	1ad3      	subs	r3, r2, r3
 8018096:	4a3a      	ldr	r2, [pc, #232]	@ (8018180 <HAL_RCC_ClockConfig+0x274>)
 8018098:	4293      	cmp	r3, r2
 801809a:	d901      	bls.n	80180a0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801809c:	2303      	movs	r3, #3
 801809e:	e068      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80180a0:	4b38      	ldr	r3, [pc, #224]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 80180a2:	68db      	ldr	r3, [r3, #12]
 80180a4:	220c      	movs	r2, #12
 80180a6:	4013      	ands	r3, r2
 80180a8:	d1f0      	bne.n	801808c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80180aa:	4b34      	ldr	r3, [pc, #208]	@ (801817c <HAL_RCC_ClockConfig+0x270>)
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	2201      	movs	r2, #1
 80180b0:	4013      	ands	r3, r2
 80180b2:	683a      	ldr	r2, [r7, #0]
 80180b4:	429a      	cmp	r2, r3
 80180b6:	d21e      	bcs.n	80180f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80180b8:	4b30      	ldr	r3, [pc, #192]	@ (801817c <HAL_RCC_ClockConfig+0x270>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	2201      	movs	r2, #1
 80180be:	4393      	bics	r3, r2
 80180c0:	0019      	movs	r1, r3
 80180c2:	4b2e      	ldr	r3, [pc, #184]	@ (801817c <HAL_RCC_ClockConfig+0x270>)
 80180c4:	683a      	ldr	r2, [r7, #0]
 80180c6:	430a      	orrs	r2, r1
 80180c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80180ca:	f7f8 ff83 	bl	8010fd4 <HAL_GetTick>
 80180ce:	0003      	movs	r3, r0
 80180d0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80180d2:	e009      	b.n	80180e8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80180d4:	f7f8 ff7e 	bl	8010fd4 <HAL_GetTick>
 80180d8:	0002      	movs	r2, r0
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	1ad3      	subs	r3, r2, r3
 80180de:	4a28      	ldr	r2, [pc, #160]	@ (8018180 <HAL_RCC_ClockConfig+0x274>)
 80180e0:	4293      	cmp	r3, r2
 80180e2:	d901      	bls.n	80180e8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80180e4:	2303      	movs	r3, #3
 80180e6:	e044      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80180e8:	4b24      	ldr	r3, [pc, #144]	@ (801817c <HAL_RCC_ClockConfig+0x270>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	2201      	movs	r2, #1
 80180ee:	4013      	ands	r3, r2
 80180f0:	683a      	ldr	r2, [r7, #0]
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d1ee      	bne.n	80180d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	2204      	movs	r2, #4
 80180fc:	4013      	ands	r3, r2
 80180fe:	d009      	beq.n	8018114 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018100:	4b20      	ldr	r3, [pc, #128]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8018102:	68db      	ldr	r3, [r3, #12]
 8018104:	4a20      	ldr	r2, [pc, #128]	@ (8018188 <HAL_RCC_ClockConfig+0x27c>)
 8018106:	4013      	ands	r3, r2
 8018108:	0019      	movs	r1, r3
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	68da      	ldr	r2, [r3, #12]
 801810e:	4b1d      	ldr	r3, [pc, #116]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8018110:	430a      	orrs	r2, r1
 8018112:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	2208      	movs	r2, #8
 801811a:	4013      	ands	r3, r2
 801811c:	d00a      	beq.n	8018134 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801811e:	4b19      	ldr	r3, [pc, #100]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8018120:	68db      	ldr	r3, [r3, #12]
 8018122:	4a1a      	ldr	r2, [pc, #104]	@ (801818c <HAL_RCC_ClockConfig+0x280>)
 8018124:	4013      	ands	r3, r2
 8018126:	0019      	movs	r1, r3
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	691b      	ldr	r3, [r3, #16]
 801812c:	00da      	lsls	r2, r3, #3
 801812e:	4b15      	ldr	r3, [pc, #84]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 8018130:	430a      	orrs	r2, r1
 8018132:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8018134:	f000 f832 	bl	801819c <HAL_RCC_GetSysClockFreq>
 8018138:	0001      	movs	r1, r0
 801813a:	4b12      	ldr	r3, [pc, #72]	@ (8018184 <HAL_RCC_ClockConfig+0x278>)
 801813c:	68db      	ldr	r3, [r3, #12]
 801813e:	091b      	lsrs	r3, r3, #4
 8018140:	220f      	movs	r2, #15
 8018142:	4013      	ands	r3, r2
 8018144:	4a12      	ldr	r2, [pc, #72]	@ (8018190 <HAL_RCC_ClockConfig+0x284>)
 8018146:	5cd3      	ldrb	r3, [r2, r3]
 8018148:	000a      	movs	r2, r1
 801814a:	40da      	lsrs	r2, r3
 801814c:	4b11      	ldr	r3, [pc, #68]	@ (8018194 <HAL_RCC_ClockConfig+0x288>)
 801814e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8018150:	4b11      	ldr	r3, [pc, #68]	@ (8018198 <HAL_RCC_ClockConfig+0x28c>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	250b      	movs	r5, #11
 8018156:	197c      	adds	r4, r7, r5
 8018158:	0018      	movs	r0, r3
 801815a:	f7f8 fef5 	bl	8010f48 <HAL_InitTick>
 801815e:	0003      	movs	r3, r0
 8018160:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8018162:	197b      	adds	r3, r7, r5
 8018164:	781b      	ldrb	r3, [r3, #0]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d002      	beq.n	8018170 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801816a:	197b      	adds	r3, r7, r5
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	e000      	b.n	8018172 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8018170:	2300      	movs	r3, #0
}
 8018172:	0018      	movs	r0, r3
 8018174:	46bd      	mov	sp, r7
 8018176:	b004      	add	sp, #16
 8018178:	bdb0      	pop	{r4, r5, r7, pc}
 801817a:	46c0      	nop			@ (mov r8, r8)
 801817c:	40022000 	.word	0x40022000
 8018180:	00001388 	.word	0x00001388
 8018184:	40021000 	.word	0x40021000
 8018188:	fffff8ff 	.word	0xfffff8ff
 801818c:	ffffc7ff 	.word	0xffffc7ff
 8018190:	08028d98 	.word	0x08028d98
 8018194:	200000dc 	.word	0x200000dc
 8018198:	200000ec 	.word	0x200000ec

0801819c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801819c:	b5b0      	push	{r4, r5, r7, lr}
 801819e:	b08e      	sub	sp, #56	@ 0x38
 80181a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80181a2:	4b4c      	ldr	r3, [pc, #304]	@ (80182d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80181a4:	68db      	ldr	r3, [r3, #12]
 80181a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80181a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80181aa:	230c      	movs	r3, #12
 80181ac:	4013      	ands	r3, r2
 80181ae:	2b0c      	cmp	r3, #12
 80181b0:	d014      	beq.n	80181dc <HAL_RCC_GetSysClockFreq+0x40>
 80181b2:	d900      	bls.n	80181b6 <HAL_RCC_GetSysClockFreq+0x1a>
 80181b4:	e07b      	b.n	80182ae <HAL_RCC_GetSysClockFreq+0x112>
 80181b6:	2b04      	cmp	r3, #4
 80181b8:	d002      	beq.n	80181c0 <HAL_RCC_GetSysClockFreq+0x24>
 80181ba:	2b08      	cmp	r3, #8
 80181bc:	d00b      	beq.n	80181d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80181be:	e076      	b.n	80182ae <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80181c0:	4b44      	ldr	r3, [pc, #272]	@ (80182d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2210      	movs	r2, #16
 80181c6:	4013      	ands	r3, r2
 80181c8:	d002      	beq.n	80181d0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80181ca:	4b43      	ldr	r3, [pc, #268]	@ (80182d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80181cc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80181ce:	e07c      	b.n	80182ca <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80181d0:	4b42      	ldr	r3, [pc, #264]	@ (80182dc <HAL_RCC_GetSysClockFreq+0x140>)
 80181d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80181d4:	e079      	b.n	80182ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80181d6:	4b42      	ldr	r3, [pc, #264]	@ (80182e0 <HAL_RCC_GetSysClockFreq+0x144>)
 80181d8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80181da:	e076      	b.n	80182ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80181dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181de:	0c9a      	lsrs	r2, r3, #18
 80181e0:	230f      	movs	r3, #15
 80181e2:	401a      	ands	r2, r3
 80181e4:	4b3f      	ldr	r3, [pc, #252]	@ (80182e4 <HAL_RCC_GetSysClockFreq+0x148>)
 80181e6:	5c9b      	ldrb	r3, [r3, r2]
 80181e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80181ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181ec:	0d9a      	lsrs	r2, r3, #22
 80181ee:	2303      	movs	r3, #3
 80181f0:	4013      	ands	r3, r2
 80181f2:	3301      	adds	r3, #1
 80181f4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80181f6:	4b37      	ldr	r3, [pc, #220]	@ (80182d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80181f8:	68da      	ldr	r2, [r3, #12]
 80181fa:	2380      	movs	r3, #128	@ 0x80
 80181fc:	025b      	lsls	r3, r3, #9
 80181fe:	4013      	ands	r3, r2
 8018200:	d01a      	beq.n	8018238 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8018202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018204:	61bb      	str	r3, [r7, #24]
 8018206:	2300      	movs	r3, #0
 8018208:	61fb      	str	r3, [r7, #28]
 801820a:	4a35      	ldr	r2, [pc, #212]	@ (80182e0 <HAL_RCC_GetSysClockFreq+0x144>)
 801820c:	2300      	movs	r3, #0
 801820e:	69b8      	ldr	r0, [r7, #24]
 8018210:	69f9      	ldr	r1, [r7, #28]
 8018212:	f7e8 f9d5 	bl	80005c0 <__aeabi_lmul>
 8018216:	0002      	movs	r2, r0
 8018218:	000b      	movs	r3, r1
 801821a:	0010      	movs	r0, r2
 801821c:	0019      	movs	r1, r3
 801821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018220:	613b      	str	r3, [r7, #16]
 8018222:	2300      	movs	r3, #0
 8018224:	617b      	str	r3, [r7, #20]
 8018226:	693a      	ldr	r2, [r7, #16]
 8018228:	697b      	ldr	r3, [r7, #20]
 801822a:	f7e8 f9a9 	bl	8000580 <__aeabi_uldivmod>
 801822e:	0002      	movs	r2, r0
 8018230:	000b      	movs	r3, r1
 8018232:	0013      	movs	r3, r2
 8018234:	637b      	str	r3, [r7, #52]	@ 0x34
 8018236:	e037      	b.n	80182a8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8018238:	4b26      	ldr	r3, [pc, #152]	@ (80182d4 <HAL_RCC_GetSysClockFreq+0x138>)
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	2210      	movs	r2, #16
 801823e:	4013      	ands	r3, r2
 8018240:	d01a      	beq.n	8018278 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8018242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018244:	60bb      	str	r3, [r7, #8]
 8018246:	2300      	movs	r3, #0
 8018248:	60fb      	str	r3, [r7, #12]
 801824a:	4a23      	ldr	r2, [pc, #140]	@ (80182d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801824c:	2300      	movs	r3, #0
 801824e:	68b8      	ldr	r0, [r7, #8]
 8018250:	68f9      	ldr	r1, [r7, #12]
 8018252:	f7e8 f9b5 	bl	80005c0 <__aeabi_lmul>
 8018256:	0002      	movs	r2, r0
 8018258:	000b      	movs	r3, r1
 801825a:	0010      	movs	r0, r2
 801825c:	0019      	movs	r1, r3
 801825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018260:	603b      	str	r3, [r7, #0]
 8018262:	2300      	movs	r3, #0
 8018264:	607b      	str	r3, [r7, #4]
 8018266:	683a      	ldr	r2, [r7, #0]
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	f7e8 f989 	bl	8000580 <__aeabi_uldivmod>
 801826e:	0002      	movs	r2, r0
 8018270:	000b      	movs	r3, r1
 8018272:	0013      	movs	r3, r2
 8018274:	637b      	str	r3, [r7, #52]	@ 0x34
 8018276:	e017      	b.n	80182a8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8018278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801827a:	0018      	movs	r0, r3
 801827c:	2300      	movs	r3, #0
 801827e:	0019      	movs	r1, r3
 8018280:	4a16      	ldr	r2, [pc, #88]	@ (80182dc <HAL_RCC_GetSysClockFreq+0x140>)
 8018282:	2300      	movs	r3, #0
 8018284:	f7e8 f99c 	bl	80005c0 <__aeabi_lmul>
 8018288:	0002      	movs	r2, r0
 801828a:	000b      	movs	r3, r1
 801828c:	0010      	movs	r0, r2
 801828e:	0019      	movs	r1, r3
 8018290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018292:	001c      	movs	r4, r3
 8018294:	2300      	movs	r3, #0
 8018296:	001d      	movs	r5, r3
 8018298:	0022      	movs	r2, r4
 801829a:	002b      	movs	r3, r5
 801829c:	f7e8 f970 	bl	8000580 <__aeabi_uldivmod>
 80182a0:	0002      	movs	r2, r0
 80182a2:	000b      	movs	r3, r1
 80182a4:	0013      	movs	r3, r2
 80182a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80182a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182aa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80182ac:	e00d      	b.n	80182ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80182ae:	4b09      	ldr	r3, [pc, #36]	@ (80182d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80182b0:	685b      	ldr	r3, [r3, #4]
 80182b2:	0b5b      	lsrs	r3, r3, #13
 80182b4:	2207      	movs	r2, #7
 80182b6:	4013      	ands	r3, r2
 80182b8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80182ba:	6a3b      	ldr	r3, [r7, #32]
 80182bc:	3301      	adds	r3, #1
 80182be:	2280      	movs	r2, #128	@ 0x80
 80182c0:	0212      	lsls	r2, r2, #8
 80182c2:	409a      	lsls	r2, r3
 80182c4:	0013      	movs	r3, r2
 80182c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80182c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80182ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80182cc:	0018      	movs	r0, r3
 80182ce:	46bd      	mov	sp, r7
 80182d0:	b00e      	add	sp, #56	@ 0x38
 80182d2:	bdb0      	pop	{r4, r5, r7, pc}
 80182d4:	40021000 	.word	0x40021000
 80182d8:	003d0900 	.word	0x003d0900
 80182dc:	00f42400 	.word	0x00f42400
 80182e0:	007a1200 	.word	0x007a1200
 80182e4:	08028db0 	.word	0x08028db0

080182e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80182ec:	4b02      	ldr	r3, [pc, #8]	@ (80182f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80182ee:	681b      	ldr	r3, [r3, #0]
}
 80182f0:	0018      	movs	r0, r3
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}
 80182f6:	46c0      	nop			@ (mov r8, r8)
 80182f8:	200000dc 	.word	0x200000dc

080182fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8018300:	f7ff fff2 	bl	80182e8 <HAL_RCC_GetHCLKFreq>
 8018304:	0001      	movs	r1, r0
 8018306:	4b06      	ldr	r3, [pc, #24]	@ (8018320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8018308:	68db      	ldr	r3, [r3, #12]
 801830a:	0a1b      	lsrs	r3, r3, #8
 801830c:	2207      	movs	r2, #7
 801830e:	4013      	ands	r3, r2
 8018310:	4a04      	ldr	r2, [pc, #16]	@ (8018324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8018312:	5cd3      	ldrb	r3, [r2, r3]
 8018314:	40d9      	lsrs	r1, r3
 8018316:	000b      	movs	r3, r1
}
 8018318:	0018      	movs	r0, r3
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}
 801831e:	46c0      	nop			@ (mov r8, r8)
 8018320:	40021000 	.word	0x40021000
 8018324:	08028da8 	.word	0x08028da8

08018328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801832c:	f7ff ffdc 	bl	80182e8 <HAL_RCC_GetHCLKFreq>
 8018330:	0001      	movs	r1, r0
 8018332:	4b06      	ldr	r3, [pc, #24]	@ (801834c <HAL_RCC_GetPCLK2Freq+0x24>)
 8018334:	68db      	ldr	r3, [r3, #12]
 8018336:	0adb      	lsrs	r3, r3, #11
 8018338:	2207      	movs	r2, #7
 801833a:	4013      	ands	r3, r2
 801833c:	4a04      	ldr	r2, [pc, #16]	@ (8018350 <HAL_RCC_GetPCLK2Freq+0x28>)
 801833e:	5cd3      	ldrb	r3, [r2, r3]
 8018340:	40d9      	lsrs	r1, r3
 8018342:	000b      	movs	r3, r1
}
 8018344:	0018      	movs	r0, r3
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}
 801834a:	46c0      	nop			@ (mov r8, r8)
 801834c:	40021000 	.word	0x40021000
 8018350:	08028da8 	.word	0x08028da8

08018354 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b086      	sub	sp, #24
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801835c:	2017      	movs	r0, #23
 801835e:	183b      	adds	r3, r7, r0
 8018360:	2200      	movs	r2, #0
 8018362:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	2220      	movs	r2, #32
 801836a:	4013      	ands	r3, r2
 801836c:	d100      	bne.n	8018370 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801836e:	e0c7      	b.n	8018500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018370:	4b9b      	ldr	r3, [pc, #620]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018374:	2380      	movs	r3, #128	@ 0x80
 8018376:	055b      	lsls	r3, r3, #21
 8018378:	4013      	ands	r3, r2
 801837a:	d109      	bne.n	8018390 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801837c:	4b98      	ldr	r3, [pc, #608]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801837e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018380:	4b97      	ldr	r3, [pc, #604]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018382:	2180      	movs	r1, #128	@ 0x80
 8018384:	0549      	lsls	r1, r1, #21
 8018386:	430a      	orrs	r2, r1
 8018388:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801838a:	183b      	adds	r3, r7, r0
 801838c:	2201      	movs	r2, #1
 801838e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018390:	4b94      	ldr	r3, [pc, #592]	@ (80185e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8018392:	681a      	ldr	r2, [r3, #0]
 8018394:	2380      	movs	r3, #128	@ 0x80
 8018396:	005b      	lsls	r3, r3, #1
 8018398:	4013      	ands	r3, r2
 801839a:	d11a      	bne.n	80183d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801839c:	4b91      	ldr	r3, [pc, #580]	@ (80185e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801839e:	681a      	ldr	r2, [r3, #0]
 80183a0:	4b90      	ldr	r3, [pc, #576]	@ (80185e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80183a2:	2180      	movs	r1, #128	@ 0x80
 80183a4:	0049      	lsls	r1, r1, #1
 80183a6:	430a      	orrs	r2, r1
 80183a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80183aa:	f7f8 fe13 	bl	8010fd4 <HAL_GetTick>
 80183ae:	0003      	movs	r3, r0
 80183b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80183b2:	e008      	b.n	80183c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80183b4:	f7f8 fe0e 	bl	8010fd4 <HAL_GetTick>
 80183b8:	0002      	movs	r2, r0
 80183ba:	693b      	ldr	r3, [r7, #16]
 80183bc:	1ad3      	subs	r3, r2, r3
 80183be:	2b64      	cmp	r3, #100	@ 0x64
 80183c0:	d901      	bls.n	80183c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80183c2:	2303      	movs	r3, #3
 80183c4:	e107      	b.n	80185d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80183c6:	4b87      	ldr	r3, [pc, #540]	@ (80185e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80183c8:	681a      	ldr	r2, [r3, #0]
 80183ca:	2380      	movs	r3, #128	@ 0x80
 80183cc:	005b      	lsls	r3, r3, #1
 80183ce:	4013      	ands	r3, r2
 80183d0:	d0f0      	beq.n	80183b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80183d2:	4b83      	ldr	r3, [pc, #524]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80183d4:	681a      	ldr	r2, [r3, #0]
 80183d6:	23c0      	movs	r3, #192	@ 0xc0
 80183d8:	039b      	lsls	r3, r3, #14
 80183da:	4013      	ands	r3, r2
 80183dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	685a      	ldr	r2, [r3, #4]
 80183e2:	23c0      	movs	r3, #192	@ 0xc0
 80183e4:	039b      	lsls	r3, r3, #14
 80183e6:	4013      	ands	r3, r2
 80183e8:	68fa      	ldr	r2, [r7, #12]
 80183ea:	429a      	cmp	r2, r3
 80183ec:	d013      	beq.n	8018416 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	685a      	ldr	r2, [r3, #4]
 80183f2:	23c0      	movs	r3, #192	@ 0xc0
 80183f4:	029b      	lsls	r3, r3, #10
 80183f6:	401a      	ands	r2, r3
 80183f8:	23c0      	movs	r3, #192	@ 0xc0
 80183fa:	029b      	lsls	r3, r3, #10
 80183fc:	429a      	cmp	r2, r3
 80183fe:	d10a      	bne.n	8018416 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8018400:	4b77      	ldr	r3, [pc, #476]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018402:	681a      	ldr	r2, [r3, #0]
 8018404:	2380      	movs	r3, #128	@ 0x80
 8018406:	029b      	lsls	r3, r3, #10
 8018408:	401a      	ands	r2, r3
 801840a:	2380      	movs	r3, #128	@ 0x80
 801840c:	029b      	lsls	r3, r3, #10
 801840e:	429a      	cmp	r2, r3
 8018410:	d101      	bne.n	8018416 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8018412:	2301      	movs	r3, #1
 8018414:	e0df      	b.n	80185d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8018416:	4b72      	ldr	r3, [pc, #456]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018418:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801841a:	23c0      	movs	r3, #192	@ 0xc0
 801841c:	029b      	lsls	r3, r3, #10
 801841e:	4013      	ands	r3, r2
 8018420:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d03b      	beq.n	80184a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	685a      	ldr	r2, [r3, #4]
 801842c:	23c0      	movs	r3, #192	@ 0xc0
 801842e:	029b      	lsls	r3, r3, #10
 8018430:	4013      	ands	r3, r2
 8018432:	68fa      	ldr	r2, [r7, #12]
 8018434:	429a      	cmp	r2, r3
 8018436:	d033      	beq.n	80184a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	2220      	movs	r2, #32
 801843e:	4013      	ands	r3, r2
 8018440:	d02e      	beq.n	80184a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8018442:	4b67      	ldr	r3, [pc, #412]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018446:	4a68      	ldr	r2, [pc, #416]	@ (80185e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8018448:	4013      	ands	r3, r2
 801844a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801844c:	4b64      	ldr	r3, [pc, #400]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801844e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018450:	4b63      	ldr	r3, [pc, #396]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018452:	2180      	movs	r1, #128	@ 0x80
 8018454:	0309      	lsls	r1, r1, #12
 8018456:	430a      	orrs	r2, r1
 8018458:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801845a:	4b61      	ldr	r3, [pc, #388]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801845c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801845e:	4b60      	ldr	r3, [pc, #384]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018460:	4962      	ldr	r1, [pc, #392]	@ (80185ec <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8018462:	400a      	ands	r2, r1
 8018464:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8018466:	4b5e      	ldr	r3, [pc, #376]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018468:	68fa      	ldr	r2, [r7, #12]
 801846a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801846c:	68fa      	ldr	r2, [r7, #12]
 801846e:	2380      	movs	r3, #128	@ 0x80
 8018470:	005b      	lsls	r3, r3, #1
 8018472:	4013      	ands	r3, r2
 8018474:	d014      	beq.n	80184a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018476:	f7f8 fdad 	bl	8010fd4 <HAL_GetTick>
 801847a:	0003      	movs	r3, r0
 801847c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801847e:	e009      	b.n	8018494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018480:	f7f8 fda8 	bl	8010fd4 <HAL_GetTick>
 8018484:	0002      	movs	r2, r0
 8018486:	693b      	ldr	r3, [r7, #16]
 8018488:	1ad3      	subs	r3, r2, r3
 801848a:	4a59      	ldr	r2, [pc, #356]	@ (80185f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801848c:	4293      	cmp	r3, r2
 801848e:	d901      	bls.n	8018494 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8018490:	2303      	movs	r3, #3
 8018492:	e0a0      	b.n	80185d6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018494:	4b52      	ldr	r3, [pc, #328]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018496:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018498:	2380      	movs	r3, #128	@ 0x80
 801849a:	009b      	lsls	r3, r3, #2
 801849c:	4013      	ands	r3, r2
 801849e:	d0ef      	beq.n	8018480 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	2220      	movs	r2, #32
 80184a6:	4013      	ands	r3, r2
 80184a8:	d01f      	beq.n	80184ea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	685a      	ldr	r2, [r3, #4]
 80184ae:	23c0      	movs	r3, #192	@ 0xc0
 80184b0:	029b      	lsls	r3, r3, #10
 80184b2:	401a      	ands	r2, r3
 80184b4:	23c0      	movs	r3, #192	@ 0xc0
 80184b6:	029b      	lsls	r3, r3, #10
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d10c      	bne.n	80184d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80184bc:	4b48      	ldr	r3, [pc, #288]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	4a4c      	ldr	r2, [pc, #304]	@ (80185f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80184c2:	4013      	ands	r3, r2
 80184c4:	0019      	movs	r1, r3
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	685a      	ldr	r2, [r3, #4]
 80184ca:	23c0      	movs	r3, #192	@ 0xc0
 80184cc:	039b      	lsls	r3, r3, #14
 80184ce:	401a      	ands	r2, r3
 80184d0:	4b43      	ldr	r3, [pc, #268]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184d2:	430a      	orrs	r2, r1
 80184d4:	601a      	str	r2, [r3, #0]
 80184d6:	4b42      	ldr	r3, [pc, #264]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	685a      	ldr	r2, [r3, #4]
 80184de:	23c0      	movs	r3, #192	@ 0xc0
 80184e0:	029b      	lsls	r3, r3, #10
 80184e2:	401a      	ands	r2, r3
 80184e4:	4b3e      	ldr	r3, [pc, #248]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184e6:	430a      	orrs	r2, r1
 80184e8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80184ea:	2317      	movs	r3, #23
 80184ec:	18fb      	adds	r3, r7, r3
 80184ee:	781b      	ldrb	r3, [r3, #0]
 80184f0:	2b01      	cmp	r3, #1
 80184f2:	d105      	bne.n	8018500 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80184f4:	4b3a      	ldr	r3, [pc, #232]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80184f8:	4b39      	ldr	r3, [pc, #228]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80184fa:	493f      	ldr	r1, [pc, #252]	@ (80185f8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80184fc:	400a      	ands	r2, r1
 80184fe:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	2201      	movs	r2, #1
 8018506:	4013      	ands	r3, r2
 8018508:	d009      	beq.n	801851e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801850a:	4b35      	ldr	r3, [pc, #212]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801850c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801850e:	2203      	movs	r2, #3
 8018510:	4393      	bics	r3, r2
 8018512:	0019      	movs	r1, r3
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	689a      	ldr	r2, [r3, #8]
 8018518:	4b31      	ldr	r3, [pc, #196]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801851a:	430a      	orrs	r2, r1
 801851c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	2202      	movs	r2, #2
 8018524:	4013      	ands	r3, r2
 8018526:	d009      	beq.n	801853c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8018528:	4b2d      	ldr	r3, [pc, #180]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801852a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801852c:	220c      	movs	r2, #12
 801852e:	4393      	bics	r3, r2
 8018530:	0019      	movs	r1, r3
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	68da      	ldr	r2, [r3, #12]
 8018536:	4b2a      	ldr	r3, [pc, #168]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018538:	430a      	orrs	r2, r1
 801853a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	2204      	movs	r2, #4
 8018542:	4013      	ands	r3, r2
 8018544:	d009      	beq.n	801855a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8018546:	4b26      	ldr	r3, [pc, #152]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801854a:	4a2c      	ldr	r2, [pc, #176]	@ (80185fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801854c:	4013      	ands	r3, r2
 801854e:	0019      	movs	r1, r3
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	691a      	ldr	r2, [r3, #16]
 8018554:	4b22      	ldr	r3, [pc, #136]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018556:	430a      	orrs	r2, r1
 8018558:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	2208      	movs	r2, #8
 8018560:	4013      	ands	r3, r2
 8018562:	d009      	beq.n	8018578 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8018564:	4b1e      	ldr	r3, [pc, #120]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018568:	4a25      	ldr	r2, [pc, #148]	@ (8018600 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801856a:	4013      	ands	r3, r2
 801856c:	0019      	movs	r1, r3
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	695a      	ldr	r2, [r3, #20]
 8018572:	4b1b      	ldr	r3, [pc, #108]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018574:	430a      	orrs	r2, r1
 8018576:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	681a      	ldr	r2, [r3, #0]
 801857c:	2380      	movs	r3, #128	@ 0x80
 801857e:	005b      	lsls	r3, r3, #1
 8018580:	4013      	ands	r3, r2
 8018582:	d009      	beq.n	8018598 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018584:	4b16      	ldr	r3, [pc, #88]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018588:	4a17      	ldr	r2, [pc, #92]	@ (80185e8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801858a:	4013      	ands	r3, r2
 801858c:	0019      	movs	r1, r3
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	699a      	ldr	r2, [r3, #24]
 8018592:	4b13      	ldr	r3, [pc, #76]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018594:	430a      	orrs	r2, r1
 8018596:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	2240      	movs	r2, #64	@ 0x40
 801859e:	4013      	ands	r3, r2
 80185a0:	d009      	beq.n	80185b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80185a2:	4b0f      	ldr	r3, [pc, #60]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80185a6:	4a17      	ldr	r2, [pc, #92]	@ (8018604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80185a8:	4013      	ands	r3, r2
 80185aa:	0019      	movs	r1, r3
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	6a1a      	ldr	r2, [r3, #32]
 80185b0:	4b0b      	ldr	r3, [pc, #44]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185b2:	430a      	orrs	r2, r1
 80185b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	2280      	movs	r2, #128	@ 0x80
 80185bc:	4013      	ands	r3, r2
 80185be:	d009      	beq.n	80185d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80185c0:	4b07      	ldr	r3, [pc, #28]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80185c4:	4a10      	ldr	r2, [pc, #64]	@ (8018608 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80185c6:	4013      	ands	r3, r2
 80185c8:	0019      	movs	r1, r3
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	69da      	ldr	r2, [r3, #28]
 80185ce:	4b04      	ldr	r3, [pc, #16]	@ (80185e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185d0:	430a      	orrs	r2, r1
 80185d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80185d4:	2300      	movs	r3, #0
}
 80185d6:	0018      	movs	r0, r3
 80185d8:	46bd      	mov	sp, r7
 80185da:	b006      	add	sp, #24
 80185dc:	bd80      	pop	{r7, pc}
 80185de:	46c0      	nop			@ (mov r8, r8)
 80185e0:	40021000 	.word	0x40021000
 80185e4:	40007000 	.word	0x40007000
 80185e8:	fffcffff 	.word	0xfffcffff
 80185ec:	fff7ffff 	.word	0xfff7ffff
 80185f0:	00001388 	.word	0x00001388
 80185f4:	ffcfffff 	.word	0xffcfffff
 80185f8:	efffffff 	.word	0xefffffff
 80185fc:	fffff3ff 	.word	0xfffff3ff
 8018600:	ffffcfff 	.word	0xffffcfff
 8018604:	fbffffff 	.word	0xfbffffff
 8018608:	fff3ffff 	.word	0xfff3ffff

0801860c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801860c:	b5b0      	push	{r4, r5, r7, lr}
 801860e:	b084      	sub	sp, #16
 8018610:	af00      	add	r7, sp, #0
 8018612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018614:	230f      	movs	r3, #15
 8018616:	18fb      	adds	r3, r7, r3
 8018618:	2201      	movs	r2, #1
 801861a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d101      	bne.n	8018626 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8018622:	2301      	movs	r3, #1
 8018624:	e088      	b.n	8018738 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	2221      	movs	r2, #33	@ 0x21
 801862a:	5c9b      	ldrb	r3, [r3, r2]
 801862c:	b2db      	uxtb	r3, r3
 801862e:	2b00      	cmp	r3, #0
 8018630:	d107      	bne.n	8018642 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	2220      	movs	r2, #32
 8018636:	2100      	movs	r1, #0
 8018638:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	0018      	movs	r0, r3
 801863e:	f7f2 fd7f 	bl	800b140 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	2221      	movs	r2, #33	@ 0x21
 8018646:	2102      	movs	r1, #2
 8018648:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	68db      	ldr	r3, [r3, #12]
 8018650:	2210      	movs	r2, #16
 8018652:	4013      	ands	r3, r2
 8018654:	2b10      	cmp	r3, #16
 8018656:	d05f      	beq.n	8018718 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	22ca      	movs	r2, #202	@ 0xca
 801865e:	625a      	str	r2, [r3, #36]	@ 0x24
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2253      	movs	r2, #83	@ 0x53
 8018666:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8018668:	250f      	movs	r5, #15
 801866a:	197c      	adds	r4, r7, r5
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	0018      	movs	r0, r3
 8018670:	f000 fa7c 	bl	8018b6c <RTC_EnterInitMode>
 8018674:	0003      	movs	r3, r0
 8018676:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8018678:	0028      	movs	r0, r5
 801867a:	183b      	adds	r3, r7, r0
 801867c:	781b      	ldrb	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d12c      	bne.n	80186dc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	689a      	ldr	r2, [r3, #8]
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	492c      	ldr	r1, [pc, #176]	@ (8018740 <HAL_RTC_Init+0x134>)
 801868e:	400a      	ands	r2, r1
 8018690:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	6899      	ldr	r1, [r3, #8]
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	685a      	ldr	r2, [r3, #4]
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	691b      	ldr	r3, [r3, #16]
 80186a0:	431a      	orrs	r2, r3
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	699b      	ldr	r3, [r3, #24]
 80186a6:	431a      	orrs	r2, r3
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	430a      	orrs	r2, r1
 80186ae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	687a      	ldr	r2, [r7, #4]
 80186b6:	68d2      	ldr	r2, [r2, #12]
 80186b8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	6919      	ldr	r1, [r3, #16]
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	689b      	ldr	r3, [r3, #8]
 80186c4:	041a      	lsls	r2, r3, #16
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	430a      	orrs	r2, r1
 80186cc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80186ce:	183c      	adds	r4, r7, r0
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	0018      	movs	r0, r3
 80186d4:	f000 fa8e 	bl	8018bf4 <RTC_ExitInitMode>
 80186d8:	0003      	movs	r3, r0
 80186da:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80186dc:	230f      	movs	r3, #15
 80186de:	18fb      	adds	r3, r7, r3
 80186e0:	781b      	ldrb	r3, [r3, #0]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d113      	bne.n	801870e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	2103      	movs	r1, #3
 80186f2:	438a      	bics	r2, r1
 80186f4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	69da      	ldr	r2, [r3, #28]
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	695b      	ldr	r3, [r3, #20]
 8018704:	431a      	orrs	r2, r3
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	430a      	orrs	r2, r1
 801870c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	22ff      	movs	r2, #255	@ 0xff
 8018714:	625a      	str	r2, [r3, #36]	@ 0x24
 8018716:	e003      	b.n	8018720 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8018718:	230f      	movs	r3, #15
 801871a:	18fb      	adds	r3, r7, r3
 801871c:	2200      	movs	r2, #0
 801871e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8018720:	230f      	movs	r3, #15
 8018722:	18fb      	adds	r3, r7, r3
 8018724:	781b      	ldrb	r3, [r3, #0]
 8018726:	2b00      	cmp	r3, #0
 8018728:	d103      	bne.n	8018732 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2221      	movs	r2, #33	@ 0x21
 801872e:	2101      	movs	r1, #1
 8018730:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018732:	230f      	movs	r3, #15
 8018734:	18fb      	adds	r3, r7, r3
 8018736:	781b      	ldrb	r3, [r3, #0]
}
 8018738:	0018      	movs	r0, r3
 801873a:	46bd      	mov	sp, r7
 801873c:	b004      	add	sp, #16
 801873e:	bdb0      	pop	{r4, r5, r7, pc}
 8018740:	ff8fffbf 	.word	0xff8fffbf

08018744 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018744:	b5b0      	push	{r4, r5, r7, lr}
 8018746:	b086      	sub	sp, #24
 8018748:	af00      	add	r7, sp, #0
 801874a:	60f8      	str	r0, [r7, #12]
 801874c:	60b9      	str	r1, [r7, #8]
 801874e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8018750:	2300      	movs	r3, #0
 8018752:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	2220      	movs	r2, #32
 8018758:	5c9b      	ldrb	r3, [r3, r2]
 801875a:	2b01      	cmp	r3, #1
 801875c:	d101      	bne.n	8018762 <HAL_RTC_SetTime+0x1e>
 801875e:	2302      	movs	r3, #2
 8018760:	e092      	b.n	8018888 <HAL_RTC_SetTime+0x144>
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	2220      	movs	r2, #32
 8018766:	2101      	movs	r1, #1
 8018768:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	2221      	movs	r2, #33	@ 0x21
 801876e:	2102      	movs	r1, #2
 8018770:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d125      	bne.n	80187c4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	689b      	ldr	r3, [r3, #8]
 801877e:	2240      	movs	r2, #64	@ 0x40
 8018780:	4013      	ands	r3, r2
 8018782:	d102      	bne.n	801878a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8018784:	68bb      	ldr	r3, [r7, #8]
 8018786:	2200      	movs	r2, #0
 8018788:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801878a:	68bb      	ldr	r3, [r7, #8]
 801878c:	781b      	ldrb	r3, [r3, #0]
 801878e:	0018      	movs	r0, r3
 8018790:	f000 fa5a 	bl	8018c48 <RTC_ByteToBcd2>
 8018794:	0003      	movs	r3, r0
 8018796:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8018798:	68bb      	ldr	r3, [r7, #8]
 801879a:	785b      	ldrb	r3, [r3, #1]
 801879c:	0018      	movs	r0, r3
 801879e:	f000 fa53 	bl	8018c48 <RTC_ByteToBcd2>
 80187a2:	0003      	movs	r3, r0
 80187a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80187a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80187a8:	68bb      	ldr	r3, [r7, #8]
 80187aa:	789b      	ldrb	r3, [r3, #2]
 80187ac:	0018      	movs	r0, r3
 80187ae:	f000 fa4b 	bl	8018c48 <RTC_ByteToBcd2>
 80187b2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80187b4:	0022      	movs	r2, r4
 80187b6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80187b8:	68bb      	ldr	r3, [r7, #8]
 80187ba:	78db      	ldrb	r3, [r3, #3]
 80187bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80187be:	4313      	orrs	r3, r2
 80187c0:	617b      	str	r3, [r7, #20]
 80187c2:	e017      	b.n	80187f4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	689b      	ldr	r3, [r3, #8]
 80187ca:	2240      	movs	r2, #64	@ 0x40
 80187cc:	4013      	ands	r3, r2
 80187ce:	d102      	bne.n	80187d6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80187d0:	68bb      	ldr	r3, [r7, #8]
 80187d2:	2200      	movs	r2, #0
 80187d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80187d6:	68bb      	ldr	r3, [r7, #8]
 80187d8:	781b      	ldrb	r3, [r3, #0]
 80187da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80187dc:	68bb      	ldr	r3, [r7, #8]
 80187de:	785b      	ldrb	r3, [r3, #1]
 80187e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80187e2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80187e4:	68ba      	ldr	r2, [r7, #8]
 80187e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80187e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	78db      	ldrb	r3, [r3, #3]
 80187ee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80187f0:	4313      	orrs	r3, r2
 80187f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	22ca      	movs	r2, #202	@ 0xca
 80187fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	2253      	movs	r2, #83	@ 0x53
 8018802:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8018804:	2513      	movs	r5, #19
 8018806:	197c      	adds	r4, r7, r5
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	0018      	movs	r0, r3
 801880c:	f000 f9ae 	bl	8018b6c <RTC_EnterInitMode>
 8018810:	0003      	movs	r3, r0
 8018812:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8018814:	0028      	movs	r0, r5
 8018816:	183b      	adds	r3, r7, r0
 8018818:	781b      	ldrb	r3, [r3, #0]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d120      	bne.n	8018860 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	697a      	ldr	r2, [r7, #20]
 8018824:	491a      	ldr	r1, [pc, #104]	@ (8018890 <HAL_RTC_SetTime+0x14c>)
 8018826:	400a      	ands	r2, r1
 8018828:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	689a      	ldr	r2, [r3, #8]
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	4917      	ldr	r1, [pc, #92]	@ (8018894 <HAL_RTC_SetTime+0x150>)
 8018836:	400a      	ands	r2, r1
 8018838:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	6899      	ldr	r1, [r3, #8]
 8018840:	68bb      	ldr	r3, [r7, #8]
 8018842:	68da      	ldr	r2, [r3, #12]
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	691b      	ldr	r3, [r3, #16]
 8018848:	431a      	orrs	r2, r3
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	430a      	orrs	r2, r1
 8018850:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018852:	183c      	adds	r4, r7, r0
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	0018      	movs	r0, r3
 8018858:	f000 f9cc 	bl	8018bf4 <RTC_ExitInitMode>
 801885c:	0003      	movs	r3, r0
 801885e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8018860:	2313      	movs	r3, #19
 8018862:	18fb      	adds	r3, r7, r3
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d103      	bne.n	8018872 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	2221      	movs	r2, #33	@ 0x21
 801886e:	2101      	movs	r1, #1
 8018870:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	22ff      	movs	r2, #255	@ 0xff
 8018878:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	2220      	movs	r2, #32
 801887e:	2100      	movs	r1, #0
 8018880:	5499      	strb	r1, [r3, r2]

  return status;
 8018882:	2313      	movs	r3, #19
 8018884:	18fb      	adds	r3, r7, r3
 8018886:	781b      	ldrb	r3, [r3, #0]
}
 8018888:	0018      	movs	r0, r3
 801888a:	46bd      	mov	sp, r7
 801888c:	b006      	add	sp, #24
 801888e:	bdb0      	pop	{r4, r5, r7, pc}
 8018890:	007f7f7f 	.word	0x007f7f7f
 8018894:	fffbffff 	.word	0xfffbffff

08018898 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b086      	sub	sp, #24
 801889c:	af00      	add	r7, sp, #0
 801889e:	60f8      	str	r0, [r7, #12]
 80188a0:	60b9      	str	r1, [r7, #8]
 80188a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80188a4:	2300      	movs	r3, #0
 80188a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	691b      	ldr	r3, [r3, #16]
 80188b8:	045b      	lsls	r3, r3, #17
 80188ba:	0c5a      	lsrs	r2, r3, #17
 80188bc:	68bb      	ldr	r3, [r7, #8]
 80188be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	4a22      	ldr	r2, [pc, #136]	@ (8018950 <HAL_RTC_GetTime+0xb8>)
 80188c8:	4013      	ands	r3, r2
 80188ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80188cc:	697b      	ldr	r3, [r7, #20]
 80188ce:	0c1b      	lsrs	r3, r3, #16
 80188d0:	b2db      	uxtb	r3, r3
 80188d2:	223f      	movs	r2, #63	@ 0x3f
 80188d4:	4013      	ands	r3, r2
 80188d6:	b2da      	uxtb	r2, r3
 80188d8:	68bb      	ldr	r3, [r7, #8]
 80188da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80188dc:	697b      	ldr	r3, [r7, #20]
 80188de:	0a1b      	lsrs	r3, r3, #8
 80188e0:	b2db      	uxtb	r3, r3
 80188e2:	227f      	movs	r2, #127	@ 0x7f
 80188e4:	4013      	ands	r3, r2
 80188e6:	b2da      	uxtb	r2, r3
 80188e8:	68bb      	ldr	r3, [r7, #8]
 80188ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	b2db      	uxtb	r3, r3
 80188f0:	227f      	movs	r2, #127	@ 0x7f
 80188f2:	4013      	ands	r3, r2
 80188f4:	b2da      	uxtb	r2, r3
 80188f6:	68bb      	ldr	r3, [r7, #8]
 80188f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	0d9b      	lsrs	r3, r3, #22
 80188fe:	b2db      	uxtb	r3, r3
 8018900:	2201      	movs	r2, #1
 8018902:	4013      	ands	r3, r2
 8018904:	b2da      	uxtb	r2, r3
 8018906:	68bb      	ldr	r3, [r7, #8]
 8018908:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d11a      	bne.n	8018946 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8018910:	68bb      	ldr	r3, [r7, #8]
 8018912:	781b      	ldrb	r3, [r3, #0]
 8018914:	0018      	movs	r0, r3
 8018916:	f000 f9b8 	bl	8018c8a <RTC_Bcd2ToByte>
 801891a:	0003      	movs	r3, r0
 801891c:	001a      	movs	r2, r3
 801891e:	68bb      	ldr	r3, [r7, #8]
 8018920:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	785b      	ldrb	r3, [r3, #1]
 8018926:	0018      	movs	r0, r3
 8018928:	f000 f9af 	bl	8018c8a <RTC_Bcd2ToByte>
 801892c:	0003      	movs	r3, r0
 801892e:	001a      	movs	r2, r3
 8018930:	68bb      	ldr	r3, [r7, #8]
 8018932:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018934:	68bb      	ldr	r3, [r7, #8]
 8018936:	789b      	ldrb	r3, [r3, #2]
 8018938:	0018      	movs	r0, r3
 801893a:	f000 f9a6 	bl	8018c8a <RTC_Bcd2ToByte>
 801893e:	0003      	movs	r3, r0
 8018940:	001a      	movs	r2, r3
 8018942:	68bb      	ldr	r3, [r7, #8]
 8018944:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8018946:	2300      	movs	r3, #0
}
 8018948:	0018      	movs	r0, r3
 801894a:	46bd      	mov	sp, r7
 801894c:	b006      	add	sp, #24
 801894e:	bd80      	pop	{r7, pc}
 8018950:	007f7f7f 	.word	0x007f7f7f

08018954 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018954:	b5b0      	push	{r4, r5, r7, lr}
 8018956:	b086      	sub	sp, #24
 8018958:	af00      	add	r7, sp, #0
 801895a:	60f8      	str	r0, [r7, #12]
 801895c:	60b9      	str	r1, [r7, #8]
 801895e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8018960:	2300      	movs	r3, #0
 8018962:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	2220      	movs	r2, #32
 8018968:	5c9b      	ldrb	r3, [r3, r2]
 801896a:	2b01      	cmp	r3, #1
 801896c:	d101      	bne.n	8018972 <HAL_RTC_SetDate+0x1e>
 801896e:	2302      	movs	r3, #2
 8018970:	e07e      	b.n	8018a70 <HAL_RTC_SetDate+0x11c>
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	2220      	movs	r2, #32
 8018976:	2101      	movs	r1, #1
 8018978:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2221      	movs	r2, #33	@ 0x21
 801897e:	2102      	movs	r1, #2
 8018980:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d10e      	bne.n	80189a6 <HAL_RTC_SetDate+0x52>
 8018988:	68bb      	ldr	r3, [r7, #8]
 801898a:	785b      	ldrb	r3, [r3, #1]
 801898c:	001a      	movs	r2, r3
 801898e:	2310      	movs	r3, #16
 8018990:	4013      	ands	r3, r2
 8018992:	d008      	beq.n	80189a6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018994:	68bb      	ldr	r3, [r7, #8]
 8018996:	785b      	ldrb	r3, [r3, #1]
 8018998:	2210      	movs	r2, #16
 801899a:	4393      	bics	r3, r2
 801899c:	b2db      	uxtb	r3, r3
 801899e:	330a      	adds	r3, #10
 80189a0:	b2da      	uxtb	r2, r3
 80189a2:	68bb      	ldr	r3, [r7, #8]
 80189a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d11c      	bne.n	80189e6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	78db      	ldrb	r3, [r3, #3]
 80189b0:	0018      	movs	r0, r3
 80189b2:	f000 f949 	bl	8018c48 <RTC_ByteToBcd2>
 80189b6:	0003      	movs	r3, r0
 80189b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80189ba:	68bb      	ldr	r3, [r7, #8]
 80189bc:	785b      	ldrb	r3, [r3, #1]
 80189be:	0018      	movs	r0, r3
 80189c0:	f000 f942 	bl	8018c48 <RTC_ByteToBcd2>
 80189c4:	0003      	movs	r3, r0
 80189c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80189c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80189ca:	68bb      	ldr	r3, [r7, #8]
 80189cc:	789b      	ldrb	r3, [r3, #2]
 80189ce:	0018      	movs	r0, r3
 80189d0:	f000 f93a 	bl	8018c48 <RTC_ByteToBcd2>
 80189d4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80189d6:	0022      	movs	r2, r4
 80189d8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80189da:	68bb      	ldr	r3, [r7, #8]
 80189dc:	781b      	ldrb	r3, [r3, #0]
 80189de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80189e0:	4313      	orrs	r3, r2
 80189e2:	617b      	str	r3, [r7, #20]
 80189e4:	e00e      	b.n	8018a04 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	78db      	ldrb	r3, [r3, #3]
 80189ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80189ec:	68bb      	ldr	r3, [r7, #8]
 80189ee:	785b      	ldrb	r3, [r3, #1]
 80189f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80189f2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80189f4:	68ba      	ldr	r2, [r7, #8]
 80189f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80189f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	781b      	ldrb	r3, [r3, #0]
 80189fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018a00:	4313      	orrs	r3, r2
 8018a02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	22ca      	movs	r2, #202	@ 0xca
 8018a0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	2253      	movs	r2, #83	@ 0x53
 8018a12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8018a14:	2513      	movs	r5, #19
 8018a16:	197c      	adds	r4, r7, r5
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	0018      	movs	r0, r3
 8018a1c:	f000 f8a6 	bl	8018b6c <RTC_EnterInitMode>
 8018a20:	0003      	movs	r3, r0
 8018a22:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8018a24:	0028      	movs	r0, r5
 8018a26:	183b      	adds	r3, r7, r0
 8018a28:	781b      	ldrb	r3, [r3, #0]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d10c      	bne.n	8018a48 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	697a      	ldr	r2, [r7, #20]
 8018a34:	4910      	ldr	r1, [pc, #64]	@ (8018a78 <HAL_RTC_SetDate+0x124>)
 8018a36:	400a      	ands	r2, r1
 8018a38:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018a3a:	183c      	adds	r4, r7, r0
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	0018      	movs	r0, r3
 8018a40:	f000 f8d8 	bl	8018bf4 <RTC_ExitInitMode>
 8018a44:	0003      	movs	r3, r0
 8018a46:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8018a48:	2313      	movs	r3, #19
 8018a4a:	18fb      	adds	r3, r7, r3
 8018a4c:	781b      	ldrb	r3, [r3, #0]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d103      	bne.n	8018a5a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	2221      	movs	r2, #33	@ 0x21
 8018a56:	2101      	movs	r1, #1
 8018a58:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	22ff      	movs	r2, #255	@ 0xff
 8018a60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	2220      	movs	r2, #32
 8018a66:	2100      	movs	r1, #0
 8018a68:	5499      	strb	r1, [r3, r2]

  return status;
 8018a6a:	2313      	movs	r3, #19
 8018a6c:	18fb      	adds	r3, r7, r3
 8018a6e:	781b      	ldrb	r3, [r3, #0]
}
 8018a70:	0018      	movs	r0, r3
 8018a72:	46bd      	mov	sp, r7
 8018a74:	b006      	add	sp, #24
 8018a76:	bdb0      	pop	{r4, r5, r7, pc}
 8018a78:	00ffff3f 	.word	0x00ffff3f

08018a7c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b086      	sub	sp, #24
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	60f8      	str	r0, [r7, #12]
 8018a84:	60b9      	str	r1, [r7, #8]
 8018a86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8018a88:	2300      	movs	r3, #0
 8018a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	685b      	ldr	r3, [r3, #4]
 8018a92:	4a21      	ldr	r2, [pc, #132]	@ (8018b18 <HAL_RTC_GetDate+0x9c>)
 8018a94:	4013      	ands	r3, r2
 8018a96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	0c1b      	lsrs	r3, r3, #16
 8018a9c:	b2da      	uxtb	r2, r3
 8018a9e:	68bb      	ldr	r3, [r7, #8]
 8018aa0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	0a1b      	lsrs	r3, r3, #8
 8018aa6:	b2db      	uxtb	r3, r3
 8018aa8:	221f      	movs	r2, #31
 8018aaa:	4013      	ands	r3, r2
 8018aac:	b2da      	uxtb	r2, r3
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8018ab2:	697b      	ldr	r3, [r7, #20]
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	223f      	movs	r2, #63	@ 0x3f
 8018ab8:	4013      	ands	r3, r2
 8018aba:	b2da      	uxtb	r2, r3
 8018abc:	68bb      	ldr	r3, [r7, #8]
 8018abe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8018ac0:	697b      	ldr	r3, [r7, #20]
 8018ac2:	0b5b      	lsrs	r3, r3, #13
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	2207      	movs	r2, #7
 8018ac8:	4013      	ands	r3, r2
 8018aca:	b2da      	uxtb	r2, r3
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d11a      	bne.n	8018b0c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	78db      	ldrb	r3, [r3, #3]
 8018ada:	0018      	movs	r0, r3
 8018adc:	f000 f8d5 	bl	8018c8a <RTC_Bcd2ToByte>
 8018ae0:	0003      	movs	r3, r0
 8018ae2:	001a      	movs	r2, r3
 8018ae4:	68bb      	ldr	r3, [r7, #8]
 8018ae6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018ae8:	68bb      	ldr	r3, [r7, #8]
 8018aea:	785b      	ldrb	r3, [r3, #1]
 8018aec:	0018      	movs	r0, r3
 8018aee:	f000 f8cc 	bl	8018c8a <RTC_Bcd2ToByte>
 8018af2:	0003      	movs	r3, r0
 8018af4:	001a      	movs	r2, r3
 8018af6:	68bb      	ldr	r3, [r7, #8]
 8018af8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8018afa:	68bb      	ldr	r3, [r7, #8]
 8018afc:	789b      	ldrb	r3, [r3, #2]
 8018afe:	0018      	movs	r0, r3
 8018b00:	f000 f8c3 	bl	8018c8a <RTC_Bcd2ToByte>
 8018b04:	0003      	movs	r3, r0
 8018b06:	001a      	movs	r2, r3
 8018b08:	68bb      	ldr	r3, [r7, #8]
 8018b0a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8018b0c:	2300      	movs	r3, #0
}
 8018b0e:	0018      	movs	r0, r3
 8018b10:	46bd      	mov	sp, r7
 8018b12:	b006      	add	sp, #24
 8018b14:	bd80      	pop	{r7, pc}
 8018b16:	46c0      	nop			@ (mov r8, r8)
 8018b18:	00ffff3f 	.word	0x00ffff3f

08018b1c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b084      	sub	sp, #16
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018b24:	2300      	movs	r3, #0
 8018b26:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8018b68 <HAL_RTC_WaitForSynchro+0x4c>)
 8018b2e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018b30:	f7f8 fa50 	bl	8010fd4 <HAL_GetTick>
 8018b34:	0003      	movs	r3, r0
 8018b36:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018b38:	e00a      	b.n	8018b50 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018b3a:	f7f8 fa4b 	bl	8010fd4 <HAL_GetTick>
 8018b3e:	0002      	movs	r2, r0
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	1ad2      	subs	r2, r2, r3
 8018b44:	23fa      	movs	r3, #250	@ 0xfa
 8018b46:	009b      	lsls	r3, r3, #2
 8018b48:	429a      	cmp	r2, r3
 8018b4a:	d901      	bls.n	8018b50 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8018b4c:	2303      	movs	r3, #3
 8018b4e:	e006      	b.n	8018b5e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	68db      	ldr	r3, [r3, #12]
 8018b56:	2220      	movs	r2, #32
 8018b58:	4013      	ands	r3, r2
 8018b5a:	d0ee      	beq.n	8018b3a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8018b5c:	2300      	movs	r3, #0
}
 8018b5e:	0018      	movs	r0, r3
 8018b60:	46bd      	mov	sp, r7
 8018b62:	b004      	add	sp, #16
 8018b64:	bd80      	pop	{r7, pc}
 8018b66:	46c0      	nop			@ (mov r8, r8)
 8018b68:	0001ff5f 	.word	0x0001ff5f

08018b6c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b084      	sub	sp, #16
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018b74:	2300      	movs	r3, #0
 8018b76:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8018b78:	230f      	movs	r3, #15
 8018b7a:	18fb      	adds	r3, r7, r3
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	68db      	ldr	r3, [r3, #12]
 8018b86:	2240      	movs	r2, #64	@ 0x40
 8018b88:	4013      	ands	r3, r2
 8018b8a:	d12c      	bne.n	8018be6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	68da      	ldr	r2, [r3, #12]
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	2180      	movs	r1, #128	@ 0x80
 8018b98:	430a      	orrs	r2, r1
 8018b9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8018b9c:	f7f8 fa1a 	bl	8010fd4 <HAL_GetTick>
 8018ba0:	0003      	movs	r3, r0
 8018ba2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8018ba4:	e014      	b.n	8018bd0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018ba6:	f7f8 fa15 	bl	8010fd4 <HAL_GetTick>
 8018baa:	0002      	movs	r2, r0
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	1ad2      	subs	r2, r2, r3
 8018bb0:	200f      	movs	r0, #15
 8018bb2:	183b      	adds	r3, r7, r0
 8018bb4:	1839      	adds	r1, r7, r0
 8018bb6:	7809      	ldrb	r1, [r1, #0]
 8018bb8:	7019      	strb	r1, [r3, #0]
 8018bba:	23fa      	movs	r3, #250	@ 0xfa
 8018bbc:	009b      	lsls	r3, r3, #2
 8018bbe:	429a      	cmp	r2, r3
 8018bc0:	d906      	bls.n	8018bd0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	2221      	movs	r2, #33	@ 0x21
 8018bc6:	2104      	movs	r1, #4
 8018bc8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8018bca:	183b      	adds	r3, r7, r0
 8018bcc:	2201      	movs	r2, #1
 8018bce:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	68db      	ldr	r3, [r3, #12]
 8018bd6:	2240      	movs	r2, #64	@ 0x40
 8018bd8:	4013      	ands	r3, r2
 8018bda:	d104      	bne.n	8018be6 <RTC_EnterInitMode+0x7a>
 8018bdc:	230f      	movs	r3, #15
 8018bde:	18fb      	adds	r3, r7, r3
 8018be0:	781b      	ldrb	r3, [r3, #0]
 8018be2:	2b01      	cmp	r3, #1
 8018be4:	d1df      	bne.n	8018ba6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8018be6:	230f      	movs	r3, #15
 8018be8:	18fb      	adds	r3, r7, r3
 8018bea:	781b      	ldrb	r3, [r3, #0]
}
 8018bec:	0018      	movs	r0, r3
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	b004      	add	sp, #16
 8018bf2:	bd80      	pop	{r7, pc}

08018bf4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8018bf4:	b590      	push	{r4, r7, lr}
 8018bf6:	b085      	sub	sp, #20
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018bfc:	240f      	movs	r4, #15
 8018bfe:	193b      	adds	r3, r7, r4
 8018c00:	2200      	movs	r2, #0
 8018c02:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	68da      	ldr	r2, [r3, #12]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	2180      	movs	r1, #128	@ 0x80
 8018c10:	438a      	bics	r2, r1
 8018c12:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	689b      	ldr	r3, [r3, #8]
 8018c1a:	2220      	movs	r2, #32
 8018c1c:	4013      	ands	r3, r2
 8018c1e:	d10c      	bne.n	8018c3a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	0018      	movs	r0, r3
 8018c24:	f7ff ff7a 	bl	8018b1c <HAL_RTC_WaitForSynchro>
 8018c28:	1e03      	subs	r3, r0, #0
 8018c2a:	d006      	beq.n	8018c3a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	2221      	movs	r2, #33	@ 0x21
 8018c30:	2104      	movs	r1, #4
 8018c32:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8018c34:	193b      	adds	r3, r7, r4
 8018c36:	2201      	movs	r2, #1
 8018c38:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8018c3a:	230f      	movs	r3, #15
 8018c3c:	18fb      	adds	r3, r7, r3
 8018c3e:	781b      	ldrb	r3, [r3, #0]
}
 8018c40:	0018      	movs	r0, r3
 8018c42:	46bd      	mov	sp, r7
 8018c44:	b005      	add	sp, #20
 8018c46:	bd90      	pop	{r4, r7, pc}

08018c48 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	0002      	movs	r2, r0
 8018c50:	1dfb      	adds	r3, r7, #7
 8018c52:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8018c54:	2300      	movs	r3, #0
 8018c56:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8018c58:	e007      	b.n	8018c6a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8018c60:	1dfb      	adds	r3, r7, #7
 8018c62:	1dfa      	adds	r2, r7, #7
 8018c64:	7812      	ldrb	r2, [r2, #0]
 8018c66:	3a0a      	subs	r2, #10
 8018c68:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8018c6a:	1dfb      	adds	r3, r7, #7
 8018c6c:	781b      	ldrb	r3, [r3, #0]
 8018c6e:	2b09      	cmp	r3, #9
 8018c70:	d8f3      	bhi.n	8018c5a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	011b      	lsls	r3, r3, #4
 8018c78:	b2da      	uxtb	r2, r3
 8018c7a:	1dfb      	adds	r3, r7, #7
 8018c7c:	781b      	ldrb	r3, [r3, #0]
 8018c7e:	4313      	orrs	r3, r2
 8018c80:	b2db      	uxtb	r3, r3
}
 8018c82:	0018      	movs	r0, r3
 8018c84:	46bd      	mov	sp, r7
 8018c86:	b004      	add	sp, #16
 8018c88:	bd80      	pop	{r7, pc}

08018c8a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8018c8a:	b580      	push	{r7, lr}
 8018c8c:	b084      	sub	sp, #16
 8018c8e:	af00      	add	r7, sp, #0
 8018c90:	0002      	movs	r2, r0
 8018c92:	1dfb      	adds	r3, r7, #7
 8018c94:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8018c96:	2300      	movs	r3, #0
 8018c98:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8018c9a:	1dfb      	adds	r3, r7, #7
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	091b      	lsrs	r3, r3, #4
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	001a      	movs	r2, r3
 8018ca4:	0013      	movs	r3, r2
 8018ca6:	009b      	lsls	r3, r3, #2
 8018ca8:	189b      	adds	r3, r3, r2
 8018caa:	005b      	lsls	r3, r3, #1
 8018cac:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	b2da      	uxtb	r2, r3
 8018cb2:	1dfb      	adds	r3, r7, #7
 8018cb4:	781b      	ldrb	r3, [r3, #0]
 8018cb6:	210f      	movs	r1, #15
 8018cb8:	400b      	ands	r3, r1
 8018cba:	b2db      	uxtb	r3, r3
 8018cbc:	18d3      	adds	r3, r2, r3
 8018cbe:	b2db      	uxtb	r3, r3
}
 8018cc0:	0018      	movs	r0, r3
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	b004      	add	sp, #16
 8018cc6:	bd80      	pop	{r7, pc}

08018cc8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b086      	sub	sp, #24
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	60f8      	str	r0, [r7, #12]
 8018cd0:	60b9      	str	r1, [r7, #8]
 8018cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8018cd4:	4b64      	ldr	r3, [pc, #400]	@ (8018e68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	22fa      	movs	r2, #250	@ 0xfa
 8018cda:	01d1      	lsls	r1, r2, #7
 8018cdc:	0018      	movs	r0, r3
 8018cde:	f7e7 fa61 	bl	80001a4 <__udivsi3>
 8018ce2:	0003      	movs	r3, r0
 8018ce4:	001a      	movs	r2, r3
 8018ce6:	0013      	movs	r3, r2
 8018ce8:	015b      	lsls	r3, r3, #5
 8018cea:	1a9b      	subs	r3, r3, r2
 8018cec:	009b      	lsls	r3, r3, #2
 8018cee:	189b      	adds	r3, r3, r2
 8018cf0:	00db      	lsls	r3, r3, #3
 8018cf2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	2220      	movs	r2, #32
 8018cf8:	5c9b      	ldrb	r3, [r3, r2]
 8018cfa:	2b01      	cmp	r3, #1
 8018cfc:	d101      	bne.n	8018d02 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8018cfe:	2302      	movs	r3, #2
 8018d00:	e0ad      	b.n	8018e5e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	2220      	movs	r2, #32
 8018d06:	2101      	movs	r1, #1
 8018d08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	2221      	movs	r2, #33	@ 0x21
 8018d0e:	2102      	movs	r1, #2
 8018d10:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	22ca      	movs	r2, #202	@ 0xca
 8018d18:	625a      	str	r2, [r3, #36]	@ 0x24
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	2253      	movs	r2, #83	@ 0x53
 8018d20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	689a      	ldr	r2, [r3, #8]
 8018d28:	2380      	movs	r3, #128	@ 0x80
 8018d2a:	00db      	lsls	r3, r3, #3
 8018d2c:	4013      	ands	r3, r2
 8018d2e:	d019      	beq.n	8018d64 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	3b01      	subs	r3, #1
 8018d34:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d10d      	bne.n	8018d58 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	22ff      	movs	r2, #255	@ 0xff
 8018d42:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	2221      	movs	r2, #33	@ 0x21
 8018d48:	2103      	movs	r1, #3
 8018d4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	2220      	movs	r2, #32
 8018d50:	2100      	movs	r1, #0
 8018d52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018d54:	2303      	movs	r3, #3
 8018d56:	e082      	b.n	8018e5e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	68db      	ldr	r3, [r3, #12]
 8018d5e:	2204      	movs	r2, #4
 8018d60:	4013      	ands	r3, r2
 8018d62:	d1e5      	bne.n	8018d30 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	689a      	ldr	r2, [r3, #8]
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	493f      	ldr	r1, [pc, #252]	@ (8018e6c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8018d70:	400a      	ands	r2, r1
 8018d72:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	68db      	ldr	r3, [r3, #12]
 8018d7a:	22ff      	movs	r2, #255	@ 0xff
 8018d7c:	401a      	ands	r2, r3
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	493b      	ldr	r1, [pc, #236]	@ (8018e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8018d84:	430a      	orrs	r2, r1
 8018d86:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8018d88:	4b37      	ldr	r3, [pc, #220]	@ (8018e68 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	22fa      	movs	r2, #250	@ 0xfa
 8018d8e:	01d1      	lsls	r1, r2, #7
 8018d90:	0018      	movs	r0, r3
 8018d92:	f7e7 fa07 	bl	80001a4 <__udivsi3>
 8018d96:	0003      	movs	r3, r0
 8018d98:	001a      	movs	r2, r3
 8018d9a:	0013      	movs	r3, r2
 8018d9c:	015b      	lsls	r3, r3, #5
 8018d9e:	1a9b      	subs	r3, r3, r2
 8018da0:	009b      	lsls	r3, r3, #2
 8018da2:	189b      	adds	r3, r3, r2
 8018da4:	00db      	lsls	r3, r3, #3
 8018da6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	3b01      	subs	r3, #1
 8018dac:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d10d      	bne.n	8018dd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	22ff      	movs	r2, #255	@ 0xff
 8018dba:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	2221      	movs	r2, #33	@ 0x21
 8018dc0:	2103      	movs	r1, #3
 8018dc2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	2220      	movs	r2, #32
 8018dc8:	2100      	movs	r1, #0
 8018dca:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018dcc:	2303      	movs	r3, #3
 8018dce:	e046      	b.n	8018e5e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	68db      	ldr	r3, [r3, #12]
 8018dd6:	2204      	movs	r2, #4
 8018dd8:	4013      	ands	r3, r2
 8018dda:	d0e5      	beq.n	8018da8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	689a      	ldr	r2, [r3, #8]
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	2107      	movs	r1, #7
 8018de8:	438a      	bics	r2, r1
 8018dea:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	6899      	ldr	r1, [r3, #8]
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	687a      	ldr	r2, [r7, #4]
 8018df8:	430a      	orrs	r2, r1
 8018dfa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	68ba      	ldr	r2, [r7, #8]
 8018e02:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8018e04:	4b1b      	ldr	r3, [pc, #108]	@ (8018e74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018e06:	681a      	ldr	r2, [r3, #0]
 8018e08:	4b1a      	ldr	r3, [pc, #104]	@ (8018e74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018e0a:	2180      	movs	r1, #128	@ 0x80
 8018e0c:	0349      	lsls	r1, r1, #13
 8018e0e:	430a      	orrs	r2, r1
 8018e10:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8018e12:	4b18      	ldr	r3, [pc, #96]	@ (8018e74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018e14:	689a      	ldr	r2, [r3, #8]
 8018e16:	4b17      	ldr	r3, [pc, #92]	@ (8018e74 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8018e18:	2180      	movs	r1, #128	@ 0x80
 8018e1a:	0349      	lsls	r1, r1, #13
 8018e1c:	430a      	orrs	r2, r1
 8018e1e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	689a      	ldr	r2, [r3, #8]
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	2180      	movs	r1, #128	@ 0x80
 8018e2c:	01c9      	lsls	r1, r1, #7
 8018e2e:	430a      	orrs	r2, r1
 8018e30:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	689a      	ldr	r2, [r3, #8]
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	2180      	movs	r1, #128	@ 0x80
 8018e3e:	00c9      	lsls	r1, r1, #3
 8018e40:	430a      	orrs	r2, r1
 8018e42:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	22ff      	movs	r2, #255	@ 0xff
 8018e4a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	2221      	movs	r2, #33	@ 0x21
 8018e50:	2101      	movs	r1, #1
 8018e52:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	2220      	movs	r2, #32
 8018e58:	2100      	movs	r1, #0
 8018e5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018e5c:	2300      	movs	r3, #0
}
 8018e5e:	0018      	movs	r0, r3
 8018e60:	46bd      	mov	sp, r7
 8018e62:	b006      	add	sp, #24
 8018e64:	bd80      	pop	{r7, pc}
 8018e66:	46c0      	nop			@ (mov r8, r8)
 8018e68:	200000dc 	.word	0x200000dc
 8018e6c:	fffffbff 	.word	0xfffffbff
 8018e70:	fffffb7f 	.word	0xfffffb7f
 8018e74:	40010400 	.word	0x40010400

08018e78 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b084      	sub	sp, #16
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018e80:	2300      	movs	r3, #0
 8018e82:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	2220      	movs	r2, #32
 8018e88:	5c9b      	ldrb	r3, [r3, r2]
 8018e8a:	2b01      	cmp	r3, #1
 8018e8c:	d101      	bne.n	8018e92 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8018e8e:	2302      	movs	r3, #2
 8018e90:	e04e      	b.n	8018f30 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	2220      	movs	r2, #32
 8018e96:	2101      	movs	r1, #1
 8018e98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	2221      	movs	r2, #33	@ 0x21
 8018e9e:	2102      	movs	r1, #2
 8018ea0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	22ca      	movs	r2, #202	@ 0xca
 8018ea8:	625a      	str	r2, [r3, #36]	@ 0x24
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	2253      	movs	r2, #83	@ 0x53
 8018eb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	689a      	ldr	r2, [r3, #8]
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	491e      	ldr	r1, [pc, #120]	@ (8018f38 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8018ebe:	400a      	ands	r2, r1
 8018ec0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	689a      	ldr	r2, [r3, #8]
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	491b      	ldr	r1, [pc, #108]	@ (8018f3c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8018ece:	400a      	ands	r2, r1
 8018ed0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018ed2:	f7f8 f87f 	bl	8010fd4 <HAL_GetTick>
 8018ed6:	0003      	movs	r3, r0
 8018ed8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8018eda:	e016      	b.n	8018f0a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018edc:	f7f8 f87a 	bl	8010fd4 <HAL_GetTick>
 8018ee0:	0002      	movs	r2, r0
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	1ad2      	subs	r2, r2, r3
 8018ee6:	23fa      	movs	r3, #250	@ 0xfa
 8018ee8:	009b      	lsls	r3, r3, #2
 8018eea:	429a      	cmp	r2, r3
 8018eec:	d90d      	bls.n	8018f0a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	22ff      	movs	r2, #255	@ 0xff
 8018ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2221      	movs	r2, #33	@ 0x21
 8018efa:	2103      	movs	r1, #3
 8018efc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	2220      	movs	r2, #32
 8018f02:	2100      	movs	r1, #0
 8018f04:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8018f06:	2303      	movs	r3, #3
 8018f08:	e012      	b.n	8018f30 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	68db      	ldr	r3, [r3, #12]
 8018f10:	2204      	movs	r2, #4
 8018f12:	4013      	ands	r3, r2
 8018f14:	d0e2      	beq.n	8018edc <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	22ff      	movs	r2, #255	@ 0xff
 8018f1c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2221      	movs	r2, #33	@ 0x21
 8018f22:	2101      	movs	r1, #1
 8018f24:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	2220      	movs	r2, #32
 8018f2a:	2100      	movs	r1, #0
 8018f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018f2e:	2300      	movs	r3, #0
}
 8018f30:	0018      	movs	r0, r3
 8018f32:	46bd      	mov	sp, r7
 8018f34:	b004      	add	sp, #16
 8018f36:	bd80      	pop	{r7, pc}
 8018f38:	fffffbff 	.word	0xfffffbff
 8018f3c:	ffffbfff 	.word	0xffffbfff

08018f40 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b082      	sub	sp, #8
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8018f48:	4b13      	ldr	r3, [pc, #76]	@ (8018f98 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8018f4a:	2280      	movs	r2, #128	@ 0x80
 8018f4c:	0352      	lsls	r2, r2, #13
 8018f4e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	689a      	ldr	r2, [r3, #8]
 8018f56:	2380      	movs	r3, #128	@ 0x80
 8018f58:	01db      	lsls	r3, r3, #7
 8018f5a:	4013      	ands	r3, r2
 8018f5c:	d014      	beq.n	8018f88 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	68da      	ldr	r2, [r3, #12]
 8018f64:	2380      	movs	r3, #128	@ 0x80
 8018f66:	00db      	lsls	r3, r3, #3
 8018f68:	4013      	ands	r3, r2
 8018f6a:	d00d      	beq.n	8018f88 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	68db      	ldr	r3, [r3, #12]
 8018f72:	22ff      	movs	r2, #255	@ 0xff
 8018f74:	401a      	ands	r2, r3
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	4908      	ldr	r1, [pc, #32]	@ (8018f9c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8018f7c:	430a      	orrs	r2, r1
 8018f7e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	0018      	movs	r0, r3
 8018f84:	f000 f80c 	bl	8018fa0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2221      	movs	r2, #33	@ 0x21
 8018f8c:	2101      	movs	r1, #1
 8018f8e:	5499      	strb	r1, [r3, r2]
}
 8018f90:	46c0      	nop			@ (mov r8, r8)
 8018f92:	46bd      	mov	sp, r7
 8018f94:	b002      	add	sp, #8
 8018f96:	bd80      	pop	{r7, pc}
 8018f98:	40010400 	.word	0x40010400
 8018f9c:	fffffb7f 	.word	0xfffffb7f

08018fa0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b082      	sub	sp, #8
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8018fa8:	46c0      	nop			@ (mov r8, r8)
 8018faa:	46bd      	mov	sp, r7
 8018fac:	b002      	add	sp, #8
 8018fae:	bd80      	pop	{r7, pc}

08018fb0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b086      	sub	sp, #24
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	60f8      	str	r0, [r7, #12]
 8018fb8:	60b9      	str	r1, [r7, #8]
 8018fba:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	3350      	adds	r3, #80	@ 0x50
 8018fc6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	009b      	lsls	r3, r3, #2
 8018fcc:	697a      	ldr	r2, [r7, #20]
 8018fce:	18d3      	adds	r3, r2, r3
 8018fd0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	601a      	str	r2, [r3, #0]
}
 8018fd8:	46c0      	nop			@ (mov r8, r8)
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	b006      	add	sp, #24
 8018fde:	bd80      	pop	{r7, pc}

08018fe0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b084      	sub	sp, #16
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8018fea:	2300      	movs	r3, #0
 8018fec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	3350      	adds	r3, #80	@ 0x50
 8018ff4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8018ff6:	683b      	ldr	r3, [r7, #0]
 8018ff8:	009b      	lsls	r3, r3, #2
 8018ffa:	68fa      	ldr	r2, [r7, #12]
 8018ffc:	18d3      	adds	r3, r2, r3
 8018ffe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	681b      	ldr	r3, [r3, #0]
}
 8019004:	0018      	movs	r0, r3
 8019006:	46bd      	mov	sp, r7
 8019008:	b004      	add	sp, #16
 801900a:	bd80      	pop	{r7, pc}

0801900c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b082      	sub	sp, #8
 8019010:	af00      	add	r7, sp, #0
 8019012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d101      	bne.n	801901e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801901a:	2301      	movs	r3, #1
 801901c:	e032      	b.n	8019084 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	2239      	movs	r2, #57	@ 0x39
 8019022:	5c9b      	ldrb	r3, [r3, r2]
 8019024:	b2db      	uxtb	r3, r3
 8019026:	2b00      	cmp	r3, #0
 8019028:	d107      	bne.n	801903a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	2238      	movs	r2, #56	@ 0x38
 801902e:	2100      	movs	r1, #0
 8019030:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	0018      	movs	r0, r3
 8019036:	f7f7 f8dd 	bl	80101f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	2239      	movs	r2, #57	@ 0x39
 801903e:	2102      	movs	r1, #2
 8019040:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681a      	ldr	r2, [r3, #0]
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	3304      	adds	r3, #4
 801904a:	0019      	movs	r1, r3
 801904c:	0010      	movs	r0, r2
 801904e:	f000 fa1d 	bl	801948c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	223e      	movs	r2, #62	@ 0x3e
 8019056:	2101      	movs	r1, #1
 8019058:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	223a      	movs	r2, #58	@ 0x3a
 801905e:	2101      	movs	r1, #1
 8019060:	5499      	strb	r1, [r3, r2]
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	223b      	movs	r2, #59	@ 0x3b
 8019066:	2101      	movs	r1, #1
 8019068:	5499      	strb	r1, [r3, r2]
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	223c      	movs	r2, #60	@ 0x3c
 801906e:	2101      	movs	r1, #1
 8019070:	5499      	strb	r1, [r3, r2]
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	223d      	movs	r2, #61	@ 0x3d
 8019076:	2101      	movs	r1, #1
 8019078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	2239      	movs	r2, #57	@ 0x39
 801907e:	2101      	movs	r1, #1
 8019080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019082:	2300      	movs	r3, #0
}
 8019084:	0018      	movs	r0, r3
 8019086:	46bd      	mov	sp, r7
 8019088:	b002      	add	sp, #8
 801908a:	bd80      	pop	{r7, pc}

0801908c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b084      	sub	sp, #16
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	2239      	movs	r2, #57	@ 0x39
 8019098:	5c9b      	ldrb	r3, [r3, r2]
 801909a:	b2db      	uxtb	r3, r3
 801909c:	2b01      	cmp	r3, #1
 801909e:	d001      	beq.n	80190a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80190a0:	2301      	movs	r3, #1
 80190a2:	e033      	b.n	801910c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	2239      	movs	r2, #57	@ 0x39
 80190a8:	2102      	movs	r1, #2
 80190aa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681a      	ldr	r2, [r3, #0]
 80190b0:	2380      	movs	r3, #128	@ 0x80
 80190b2:	05db      	lsls	r3, r3, #23
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d00e      	beq.n	80190d6 <HAL_TIM_Base_Start+0x4a>
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	4a15      	ldr	r2, [pc, #84]	@ (8019114 <HAL_TIM_Base_Start+0x88>)
 80190be:	4293      	cmp	r3, r2
 80190c0:	d009      	beq.n	80190d6 <HAL_TIM_Base_Start+0x4a>
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	4a14      	ldr	r2, [pc, #80]	@ (8019118 <HAL_TIM_Base_Start+0x8c>)
 80190c8:	4293      	cmp	r3, r2
 80190ca:	d004      	beq.n	80190d6 <HAL_TIM_Base_Start+0x4a>
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	4a12      	ldr	r2, [pc, #72]	@ (801911c <HAL_TIM_Base_Start+0x90>)
 80190d2:	4293      	cmp	r3, r2
 80190d4:	d111      	bne.n	80190fa <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	689b      	ldr	r3, [r3, #8]
 80190dc:	2207      	movs	r2, #7
 80190de:	4013      	ands	r3, r2
 80190e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	2b06      	cmp	r3, #6
 80190e6:	d010      	beq.n	801910a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	681a      	ldr	r2, [r3, #0]
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	2101      	movs	r1, #1
 80190f4:	430a      	orrs	r2, r1
 80190f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80190f8:	e007      	b.n	801910a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	2101      	movs	r1, #1
 8019106:	430a      	orrs	r2, r1
 8019108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801910a:	2300      	movs	r3, #0
}
 801910c:	0018      	movs	r0, r3
 801910e:	46bd      	mov	sp, r7
 8019110:	b004      	add	sp, #16
 8019112:	bd80      	pop	{r7, pc}
 8019114:	40000400 	.word	0x40000400
 8019118:	40010800 	.word	0x40010800
 801911c:	40011400 	.word	0x40011400

08019120 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b082      	sub	sp, #8
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	6a1b      	ldr	r3, [r3, #32]
 801912e:	4a0a      	ldr	r2, [pc, #40]	@ (8019158 <HAL_TIM_Base_Stop+0x38>)
 8019130:	4013      	ands	r3, r2
 8019132:	d107      	bne.n	8019144 <HAL_TIM_Base_Stop+0x24>
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	681a      	ldr	r2, [r3, #0]
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	2101      	movs	r1, #1
 8019140:	438a      	bics	r2, r1
 8019142:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	2239      	movs	r2, #57	@ 0x39
 8019148:	2101      	movs	r1, #1
 801914a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801914c:	2300      	movs	r3, #0
}
 801914e:	0018      	movs	r0, r3
 8019150:	46bd      	mov	sp, r7
 8019152:	b002      	add	sp, #8
 8019154:	bd80      	pop	{r7, pc}
 8019156:	46c0      	nop			@ (mov r8, r8)
 8019158:	00001111 	.word	0x00001111

0801915c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b082      	sub	sp, #8
 8019160:	af00      	add	r7, sp, #0
 8019162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d101      	bne.n	801916e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801916a:	2301      	movs	r3, #1
 801916c:	e032      	b.n	80191d4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	2239      	movs	r2, #57	@ 0x39
 8019172:	5c9b      	ldrb	r3, [r3, r2]
 8019174:	b2db      	uxtb	r3, r3
 8019176:	2b00      	cmp	r3, #0
 8019178:	d107      	bne.n	801918a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	2238      	movs	r2, #56	@ 0x38
 801917e:	2100      	movs	r1, #0
 8019180:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	0018      	movs	r0, r3
 8019186:	f7f7 f811 	bl	80101ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	2239      	movs	r2, #57	@ 0x39
 801918e:	2102      	movs	r1, #2
 8019190:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	681a      	ldr	r2, [r3, #0]
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	3304      	adds	r3, #4
 801919a:	0019      	movs	r1, r3
 801919c:	0010      	movs	r0, r2
 801919e:	f000 f975 	bl	801948c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	223e      	movs	r2, #62	@ 0x3e
 80191a6:	2101      	movs	r1, #1
 80191a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	223a      	movs	r2, #58	@ 0x3a
 80191ae:	2101      	movs	r1, #1
 80191b0:	5499      	strb	r1, [r3, r2]
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	223b      	movs	r2, #59	@ 0x3b
 80191b6:	2101      	movs	r1, #1
 80191b8:	5499      	strb	r1, [r3, r2]
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	223c      	movs	r2, #60	@ 0x3c
 80191be:	2101      	movs	r1, #1
 80191c0:	5499      	strb	r1, [r3, r2]
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	223d      	movs	r2, #61	@ 0x3d
 80191c6:	2101      	movs	r1, #1
 80191c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	2239      	movs	r2, #57	@ 0x39
 80191ce:	2101      	movs	r1, #1
 80191d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80191d2:	2300      	movs	r3, #0
}
 80191d4:	0018      	movs	r0, r3
 80191d6:	46bd      	mov	sp, r7
 80191d8:	b002      	add	sp, #8
 80191da:	bd80      	pop	{r7, pc}

080191dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b084      	sub	sp, #16
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
 80191e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d108      	bne.n	80191fe <HAL_TIM_PWM_Start+0x22>
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	223a      	movs	r2, #58	@ 0x3a
 80191f0:	5c9b      	ldrb	r3, [r3, r2]
 80191f2:	b2db      	uxtb	r3, r3
 80191f4:	3b01      	subs	r3, #1
 80191f6:	1e5a      	subs	r2, r3, #1
 80191f8:	4193      	sbcs	r3, r2
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	e01f      	b.n	801923e <HAL_TIM_PWM_Start+0x62>
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	2b04      	cmp	r3, #4
 8019202:	d108      	bne.n	8019216 <HAL_TIM_PWM_Start+0x3a>
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	223b      	movs	r2, #59	@ 0x3b
 8019208:	5c9b      	ldrb	r3, [r3, r2]
 801920a:	b2db      	uxtb	r3, r3
 801920c:	3b01      	subs	r3, #1
 801920e:	1e5a      	subs	r2, r3, #1
 8019210:	4193      	sbcs	r3, r2
 8019212:	b2db      	uxtb	r3, r3
 8019214:	e013      	b.n	801923e <HAL_TIM_PWM_Start+0x62>
 8019216:	683b      	ldr	r3, [r7, #0]
 8019218:	2b08      	cmp	r3, #8
 801921a:	d108      	bne.n	801922e <HAL_TIM_PWM_Start+0x52>
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	223c      	movs	r2, #60	@ 0x3c
 8019220:	5c9b      	ldrb	r3, [r3, r2]
 8019222:	b2db      	uxtb	r3, r3
 8019224:	3b01      	subs	r3, #1
 8019226:	1e5a      	subs	r2, r3, #1
 8019228:	4193      	sbcs	r3, r2
 801922a:	b2db      	uxtb	r3, r3
 801922c:	e007      	b.n	801923e <HAL_TIM_PWM_Start+0x62>
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	223d      	movs	r2, #61	@ 0x3d
 8019232:	5c9b      	ldrb	r3, [r3, r2]
 8019234:	b2db      	uxtb	r3, r3
 8019236:	3b01      	subs	r3, #1
 8019238:	1e5a      	subs	r2, r3, #1
 801923a:	4193      	sbcs	r3, r2
 801923c:	b2db      	uxtb	r3, r3
 801923e:	2b00      	cmp	r3, #0
 8019240:	d001      	beq.n	8019246 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8019242:	2301      	movs	r3, #1
 8019244:	e052      	b.n	80192ec <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d104      	bne.n	8019256 <HAL_TIM_PWM_Start+0x7a>
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	223a      	movs	r2, #58	@ 0x3a
 8019250:	2102      	movs	r1, #2
 8019252:	5499      	strb	r1, [r3, r2]
 8019254:	e013      	b.n	801927e <HAL_TIM_PWM_Start+0xa2>
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	2b04      	cmp	r3, #4
 801925a:	d104      	bne.n	8019266 <HAL_TIM_PWM_Start+0x8a>
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	223b      	movs	r2, #59	@ 0x3b
 8019260:	2102      	movs	r1, #2
 8019262:	5499      	strb	r1, [r3, r2]
 8019264:	e00b      	b.n	801927e <HAL_TIM_PWM_Start+0xa2>
 8019266:	683b      	ldr	r3, [r7, #0]
 8019268:	2b08      	cmp	r3, #8
 801926a:	d104      	bne.n	8019276 <HAL_TIM_PWM_Start+0x9a>
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	223c      	movs	r2, #60	@ 0x3c
 8019270:	2102      	movs	r1, #2
 8019272:	5499      	strb	r1, [r3, r2]
 8019274:	e003      	b.n	801927e <HAL_TIM_PWM_Start+0xa2>
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	223d      	movs	r2, #61	@ 0x3d
 801927a:	2102      	movs	r1, #2
 801927c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	6839      	ldr	r1, [r7, #0]
 8019284:	2201      	movs	r2, #1
 8019286:	0018      	movs	r0, r3
 8019288:	f000 fa62 	bl	8019750 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681a      	ldr	r2, [r3, #0]
 8019290:	2380      	movs	r3, #128	@ 0x80
 8019292:	05db      	lsls	r3, r3, #23
 8019294:	429a      	cmp	r2, r3
 8019296:	d00e      	beq.n	80192b6 <HAL_TIM_PWM_Start+0xda>
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	4a15      	ldr	r2, [pc, #84]	@ (80192f4 <HAL_TIM_PWM_Start+0x118>)
 801929e:	4293      	cmp	r3, r2
 80192a0:	d009      	beq.n	80192b6 <HAL_TIM_PWM_Start+0xda>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	4a14      	ldr	r2, [pc, #80]	@ (80192f8 <HAL_TIM_PWM_Start+0x11c>)
 80192a8:	4293      	cmp	r3, r2
 80192aa:	d004      	beq.n	80192b6 <HAL_TIM_PWM_Start+0xda>
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	4a12      	ldr	r2, [pc, #72]	@ (80192fc <HAL_TIM_PWM_Start+0x120>)
 80192b2:	4293      	cmp	r3, r2
 80192b4:	d111      	bne.n	80192da <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	689b      	ldr	r3, [r3, #8]
 80192bc:	2207      	movs	r2, #7
 80192be:	4013      	ands	r3, r2
 80192c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	2b06      	cmp	r3, #6
 80192c6:	d010      	beq.n	80192ea <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	681a      	ldr	r2, [r3, #0]
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	2101      	movs	r1, #1
 80192d4:	430a      	orrs	r2, r1
 80192d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80192d8:	e007      	b.n	80192ea <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	681a      	ldr	r2, [r3, #0]
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	2101      	movs	r1, #1
 80192e6:	430a      	orrs	r2, r1
 80192e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80192ea:	2300      	movs	r3, #0
}
 80192ec:	0018      	movs	r0, r3
 80192ee:	46bd      	mov	sp, r7
 80192f0:	b004      	add	sp, #16
 80192f2:	bd80      	pop	{r7, pc}
 80192f4:	40000400 	.word	0x40000400
 80192f8:	40010800 	.word	0x40010800
 80192fc:	40011400 	.word	0x40011400

08019300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8019300:	b580      	push	{r7, lr}
 8019302:	b086      	sub	sp, #24
 8019304:	af00      	add	r7, sp, #0
 8019306:	60f8      	str	r0, [r7, #12]
 8019308:	60b9      	str	r1, [r7, #8]
 801930a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801930c:	2317      	movs	r3, #23
 801930e:	18fb      	adds	r3, r7, r3
 8019310:	2200      	movs	r2, #0
 8019312:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	2238      	movs	r2, #56	@ 0x38
 8019318:	5c9b      	ldrb	r3, [r3, r2]
 801931a:	2b01      	cmp	r3, #1
 801931c:	d101      	bne.n	8019322 <HAL_TIM_PWM_ConfigChannel+0x22>
 801931e:	2302      	movs	r3, #2
 8019320:	e0ad      	b.n	801947e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	2238      	movs	r2, #56	@ 0x38
 8019326:	2101      	movs	r1, #1
 8019328:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2b0c      	cmp	r3, #12
 801932e:	d100      	bne.n	8019332 <HAL_TIM_PWM_ConfigChannel+0x32>
 8019330:	e076      	b.n	8019420 <HAL_TIM_PWM_ConfigChannel+0x120>
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	2b0c      	cmp	r3, #12
 8019336:	d900      	bls.n	801933a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8019338:	e095      	b.n	8019466 <HAL_TIM_PWM_ConfigChannel+0x166>
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2b08      	cmp	r3, #8
 801933e:	d04e      	beq.n	80193de <HAL_TIM_PWM_ConfigChannel+0xde>
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	2b08      	cmp	r3, #8
 8019344:	d900      	bls.n	8019348 <HAL_TIM_PWM_ConfigChannel+0x48>
 8019346:	e08e      	b.n	8019466 <HAL_TIM_PWM_ConfigChannel+0x166>
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d003      	beq.n	8019356 <HAL_TIM_PWM_ConfigChannel+0x56>
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	2b04      	cmp	r3, #4
 8019352:	d021      	beq.n	8019398 <HAL_TIM_PWM_ConfigChannel+0x98>
 8019354:	e087      	b.n	8019466 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	68ba      	ldr	r2, [r7, #8]
 801935c:	0011      	movs	r1, r2
 801935e:	0018      	movs	r0, r3
 8019360:	f000 f8f2 	bl	8019548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	699a      	ldr	r2, [r3, #24]
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	2108      	movs	r1, #8
 8019370:	430a      	orrs	r2, r1
 8019372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	699a      	ldr	r2, [r3, #24]
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	2104      	movs	r1, #4
 8019380:	438a      	bics	r2, r1
 8019382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	6999      	ldr	r1, [r3, #24]
 801938a:	68bb      	ldr	r3, [r7, #8]
 801938c:	68da      	ldr	r2, [r3, #12]
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	430a      	orrs	r2, r1
 8019394:	619a      	str	r2, [r3, #24]
      break;
 8019396:	e06b      	b.n	8019470 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	68ba      	ldr	r2, [r7, #8]
 801939e:	0011      	movs	r1, r2
 80193a0:	0018      	movs	r0, r3
 80193a2:	f000 f90d 	bl	80195c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	699a      	ldr	r2, [r3, #24]
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	2180      	movs	r1, #128	@ 0x80
 80193b2:	0109      	lsls	r1, r1, #4
 80193b4:	430a      	orrs	r2, r1
 80193b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	699a      	ldr	r2, [r3, #24]
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	4931      	ldr	r1, [pc, #196]	@ (8019488 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80193c4:	400a      	ands	r2, r1
 80193c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	6999      	ldr	r1, [r3, #24]
 80193ce:	68bb      	ldr	r3, [r7, #8]
 80193d0:	68db      	ldr	r3, [r3, #12]
 80193d2:	021a      	lsls	r2, r3, #8
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	430a      	orrs	r2, r1
 80193da:	619a      	str	r2, [r3, #24]
      break;
 80193dc:	e048      	b.n	8019470 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	68ba      	ldr	r2, [r7, #8]
 80193e4:	0011      	movs	r1, r2
 80193e6:	0018      	movs	r0, r3
 80193e8:	f000 f92c 	bl	8019644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	69da      	ldr	r2, [r3, #28]
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	2108      	movs	r1, #8
 80193f8:	430a      	orrs	r2, r1
 80193fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	69da      	ldr	r2, [r3, #28]
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	2104      	movs	r1, #4
 8019408:	438a      	bics	r2, r1
 801940a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	69d9      	ldr	r1, [r3, #28]
 8019412:	68bb      	ldr	r3, [r7, #8]
 8019414:	68da      	ldr	r2, [r3, #12]
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	430a      	orrs	r2, r1
 801941c:	61da      	str	r2, [r3, #28]
      break;
 801941e:	e027      	b.n	8019470 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	68ba      	ldr	r2, [r7, #8]
 8019426:	0011      	movs	r1, r2
 8019428:	0018      	movs	r0, r3
 801942a:	f000 f94b 	bl	80196c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	69da      	ldr	r2, [r3, #28]
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	2180      	movs	r1, #128	@ 0x80
 801943a:	0109      	lsls	r1, r1, #4
 801943c:	430a      	orrs	r2, r1
 801943e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	69da      	ldr	r2, [r3, #28]
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	490f      	ldr	r1, [pc, #60]	@ (8019488 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801944c:	400a      	ands	r2, r1
 801944e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	69d9      	ldr	r1, [r3, #28]
 8019456:	68bb      	ldr	r3, [r7, #8]
 8019458:	68db      	ldr	r3, [r3, #12]
 801945a:	021a      	lsls	r2, r3, #8
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	430a      	orrs	r2, r1
 8019462:	61da      	str	r2, [r3, #28]
      break;
 8019464:	e004      	b.n	8019470 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8019466:	2317      	movs	r3, #23
 8019468:	18fb      	adds	r3, r7, r3
 801946a:	2201      	movs	r2, #1
 801946c:	701a      	strb	r2, [r3, #0]
      break;
 801946e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	2238      	movs	r2, #56	@ 0x38
 8019474:	2100      	movs	r1, #0
 8019476:	5499      	strb	r1, [r3, r2]

  return status;
 8019478:	2317      	movs	r3, #23
 801947a:	18fb      	adds	r3, r7, r3
 801947c:	781b      	ldrb	r3, [r3, #0]
}
 801947e:	0018      	movs	r0, r3
 8019480:	46bd      	mov	sp, r7
 8019482:	b006      	add	sp, #24
 8019484:	bd80      	pop	{r7, pc}
 8019486:	46c0      	nop			@ (mov r8, r8)
 8019488:	fffffbff 	.word	0xfffffbff

0801948c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b084      	sub	sp, #16
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
 8019494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801949c:	687a      	ldr	r2, [r7, #4]
 801949e:	2380      	movs	r3, #128	@ 0x80
 80194a0:	05db      	lsls	r3, r3, #23
 80194a2:	429a      	cmp	r2, r3
 80194a4:	d00b      	beq.n	80194be <TIM_Base_SetConfig+0x32>
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	4a23      	ldr	r2, [pc, #140]	@ (8019538 <TIM_Base_SetConfig+0xac>)
 80194aa:	4293      	cmp	r3, r2
 80194ac:	d007      	beq.n	80194be <TIM_Base_SetConfig+0x32>
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	4a22      	ldr	r2, [pc, #136]	@ (801953c <TIM_Base_SetConfig+0xb0>)
 80194b2:	4293      	cmp	r3, r2
 80194b4:	d003      	beq.n	80194be <TIM_Base_SetConfig+0x32>
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	4a21      	ldr	r2, [pc, #132]	@ (8019540 <TIM_Base_SetConfig+0xb4>)
 80194ba:	4293      	cmp	r3, r2
 80194bc:	d108      	bne.n	80194d0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	2270      	movs	r2, #112	@ 0x70
 80194c2:	4393      	bics	r3, r2
 80194c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	685b      	ldr	r3, [r3, #4]
 80194ca:	68fa      	ldr	r2, [r7, #12]
 80194cc:	4313      	orrs	r3, r2
 80194ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80194d0:	687a      	ldr	r2, [r7, #4]
 80194d2:	2380      	movs	r3, #128	@ 0x80
 80194d4:	05db      	lsls	r3, r3, #23
 80194d6:	429a      	cmp	r2, r3
 80194d8:	d00b      	beq.n	80194f2 <TIM_Base_SetConfig+0x66>
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	4a16      	ldr	r2, [pc, #88]	@ (8019538 <TIM_Base_SetConfig+0xac>)
 80194de:	4293      	cmp	r3, r2
 80194e0:	d007      	beq.n	80194f2 <TIM_Base_SetConfig+0x66>
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	4a15      	ldr	r2, [pc, #84]	@ (801953c <TIM_Base_SetConfig+0xb0>)
 80194e6:	4293      	cmp	r3, r2
 80194e8:	d003      	beq.n	80194f2 <TIM_Base_SetConfig+0x66>
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	4a14      	ldr	r2, [pc, #80]	@ (8019540 <TIM_Base_SetConfig+0xb4>)
 80194ee:	4293      	cmp	r3, r2
 80194f0:	d108      	bne.n	8019504 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	4a13      	ldr	r2, [pc, #76]	@ (8019544 <TIM_Base_SetConfig+0xb8>)
 80194f6:	4013      	ands	r3, r2
 80194f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80194fa:	683b      	ldr	r3, [r7, #0]
 80194fc:	68db      	ldr	r3, [r3, #12]
 80194fe:	68fa      	ldr	r2, [r7, #12]
 8019500:	4313      	orrs	r3, r2
 8019502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	2280      	movs	r2, #128	@ 0x80
 8019508:	4393      	bics	r3, r2
 801950a:	001a      	movs	r2, r3
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	691b      	ldr	r3, [r3, #16]
 8019510:	4313      	orrs	r3, r2
 8019512:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	68fa      	ldr	r2, [r7, #12]
 8019518:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	689a      	ldr	r2, [r3, #8]
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019522:	683b      	ldr	r3, [r7, #0]
 8019524:	681a      	ldr	r2, [r3, #0]
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	2201      	movs	r2, #1
 801952e:	615a      	str	r2, [r3, #20]
}
 8019530:	46c0      	nop			@ (mov r8, r8)
 8019532:	46bd      	mov	sp, r7
 8019534:	b004      	add	sp, #16
 8019536:	bd80      	pop	{r7, pc}
 8019538:	40000400 	.word	0x40000400
 801953c:	40010800 	.word	0x40010800
 8019540:	40011400 	.word	0x40011400
 8019544:	fffffcff 	.word	0xfffffcff

08019548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b086      	sub	sp, #24
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
 8019550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6a1b      	ldr	r3, [r3, #32]
 8019556:	2201      	movs	r2, #1
 8019558:	4393      	bics	r3, r2
 801955a:	001a      	movs	r2, r3
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	6a1b      	ldr	r3, [r3, #32]
 8019564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	699b      	ldr	r3, [r3, #24]
 8019570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	2270      	movs	r2, #112	@ 0x70
 8019576:	4393      	bics	r3, r2
 8019578:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	2203      	movs	r2, #3
 801957e:	4393      	bics	r3, r2
 8019580:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	68fa      	ldr	r2, [r7, #12]
 8019588:	4313      	orrs	r3, r2
 801958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801958c:	697b      	ldr	r3, [r7, #20]
 801958e:	2202      	movs	r2, #2
 8019590:	4393      	bics	r3, r2
 8019592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	689b      	ldr	r3, [r3, #8]
 8019598:	697a      	ldr	r2, [r7, #20]
 801959a:	4313      	orrs	r3, r2
 801959c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	693a      	ldr	r2, [r7, #16]
 80195a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	68fa      	ldr	r2, [r7, #12]
 80195a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	685a      	ldr	r2, [r3, #4]
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	697a      	ldr	r2, [r7, #20]
 80195b6:	621a      	str	r2, [r3, #32]
}
 80195b8:	46c0      	nop			@ (mov r8, r8)
 80195ba:	46bd      	mov	sp, r7
 80195bc:	b006      	add	sp, #24
 80195be:	bd80      	pop	{r7, pc}

080195c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b086      	sub	sp, #24
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	6a1b      	ldr	r3, [r3, #32]
 80195ce:	2210      	movs	r2, #16
 80195d0:	4393      	bics	r3, r2
 80195d2:	001a      	movs	r2, r3
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6a1b      	ldr	r3, [r3, #32]
 80195dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	685b      	ldr	r3, [r3, #4]
 80195e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	699b      	ldr	r3, [r3, #24]
 80195e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	4a13      	ldr	r2, [pc, #76]	@ (801963c <TIM_OC2_SetConfig+0x7c>)
 80195ee:	4013      	ands	r3, r2
 80195f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	4a12      	ldr	r2, [pc, #72]	@ (8019640 <TIM_OC2_SetConfig+0x80>)
 80195f6:	4013      	ands	r3, r2
 80195f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	021b      	lsls	r3, r3, #8
 8019600:	68fa      	ldr	r2, [r7, #12]
 8019602:	4313      	orrs	r3, r2
 8019604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019606:	697b      	ldr	r3, [r7, #20]
 8019608:	2220      	movs	r2, #32
 801960a:	4393      	bics	r3, r2
 801960c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801960e:	683b      	ldr	r3, [r7, #0]
 8019610:	689b      	ldr	r3, [r3, #8]
 8019612:	011b      	lsls	r3, r3, #4
 8019614:	697a      	ldr	r2, [r7, #20]
 8019616:	4313      	orrs	r3, r2
 8019618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	693a      	ldr	r2, [r7, #16]
 801961e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	68fa      	ldr	r2, [r7, #12]
 8019624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	685a      	ldr	r2, [r3, #4]
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	697a      	ldr	r2, [r7, #20]
 8019632:	621a      	str	r2, [r3, #32]
}
 8019634:	46c0      	nop			@ (mov r8, r8)
 8019636:	46bd      	mov	sp, r7
 8019638:	b006      	add	sp, #24
 801963a:	bd80      	pop	{r7, pc}
 801963c:	ffff8fff 	.word	0xffff8fff
 8019640:	fffffcff 	.word	0xfffffcff

08019644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b086      	sub	sp, #24
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
 801964c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	6a1b      	ldr	r3, [r3, #32]
 8019652:	4a1a      	ldr	r2, [pc, #104]	@ (80196bc <TIM_OC3_SetConfig+0x78>)
 8019654:	401a      	ands	r2, r3
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	6a1b      	ldr	r3, [r3, #32]
 801965e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	685b      	ldr	r3, [r3, #4]
 8019664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	69db      	ldr	r3, [r3, #28]
 801966a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	2270      	movs	r2, #112	@ 0x70
 8019670:	4393      	bics	r3, r2
 8019672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	2203      	movs	r2, #3
 8019678:	4393      	bics	r3, r2
 801967a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801967c:	683b      	ldr	r3, [r7, #0]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	68fa      	ldr	r2, [r7, #12]
 8019682:	4313      	orrs	r3, r2
 8019684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	4a0d      	ldr	r2, [pc, #52]	@ (80196c0 <TIM_OC3_SetConfig+0x7c>)
 801968a:	4013      	ands	r3, r2
 801968c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	689b      	ldr	r3, [r3, #8]
 8019692:	021b      	lsls	r3, r3, #8
 8019694:	697a      	ldr	r2, [r7, #20]
 8019696:	4313      	orrs	r3, r2
 8019698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	693a      	ldr	r2, [r7, #16]
 801969e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	68fa      	ldr	r2, [r7, #12]
 80196a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80196a6:	683b      	ldr	r3, [r7, #0]
 80196a8:	685a      	ldr	r2, [r3, #4]
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	697a      	ldr	r2, [r7, #20]
 80196b2:	621a      	str	r2, [r3, #32]
}
 80196b4:	46c0      	nop			@ (mov r8, r8)
 80196b6:	46bd      	mov	sp, r7
 80196b8:	b006      	add	sp, #24
 80196ba:	bd80      	pop	{r7, pc}
 80196bc:	fffffeff 	.word	0xfffffeff
 80196c0:	fffffdff 	.word	0xfffffdff

080196c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b086      	sub	sp, #24
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
 80196cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6a1b      	ldr	r3, [r3, #32]
 80196d2:	4a1b      	ldr	r2, [pc, #108]	@ (8019740 <TIM_OC4_SetConfig+0x7c>)
 80196d4:	401a      	ands	r2, r3
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	6a1b      	ldr	r3, [r3, #32]
 80196de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	685b      	ldr	r3, [r3, #4]
 80196e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	69db      	ldr	r3, [r3, #28]
 80196ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	4a15      	ldr	r2, [pc, #84]	@ (8019744 <TIM_OC4_SetConfig+0x80>)
 80196f0:	4013      	ands	r3, r2
 80196f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	4a14      	ldr	r2, [pc, #80]	@ (8019748 <TIM_OC4_SetConfig+0x84>)
 80196f8:	4013      	ands	r3, r2
 80196fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80196fc:	683b      	ldr	r3, [r7, #0]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	021b      	lsls	r3, r3, #8
 8019702:	68fa      	ldr	r2, [r7, #12]
 8019704:	4313      	orrs	r3, r2
 8019706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019708:	697b      	ldr	r3, [r7, #20]
 801970a:	4a10      	ldr	r2, [pc, #64]	@ (801974c <TIM_OC4_SetConfig+0x88>)
 801970c:	4013      	ands	r3, r2
 801970e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	689b      	ldr	r3, [r3, #8]
 8019714:	031b      	lsls	r3, r3, #12
 8019716:	697a      	ldr	r2, [r7, #20]
 8019718:	4313      	orrs	r3, r2
 801971a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	693a      	ldr	r2, [r7, #16]
 8019720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	68fa      	ldr	r2, [r7, #12]
 8019726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	685a      	ldr	r2, [r3, #4]
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	697a      	ldr	r2, [r7, #20]
 8019734:	621a      	str	r2, [r3, #32]
}
 8019736:	46c0      	nop			@ (mov r8, r8)
 8019738:	46bd      	mov	sp, r7
 801973a:	b006      	add	sp, #24
 801973c:	bd80      	pop	{r7, pc}
 801973e:	46c0      	nop			@ (mov r8, r8)
 8019740:	ffffefff 	.word	0xffffefff
 8019744:	ffff8fff 	.word	0xffff8fff
 8019748:	fffffcff 	.word	0xfffffcff
 801974c:	ffffdfff 	.word	0xffffdfff

08019750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b086      	sub	sp, #24
 8019754:	af00      	add	r7, sp, #0
 8019756:	60f8      	str	r0, [r7, #12]
 8019758:	60b9      	str	r1, [r7, #8]
 801975a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801975c:	68bb      	ldr	r3, [r7, #8]
 801975e:	221f      	movs	r2, #31
 8019760:	4013      	ands	r3, r2
 8019762:	2201      	movs	r2, #1
 8019764:	409a      	lsls	r2, r3
 8019766:	0013      	movs	r3, r2
 8019768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	6a1b      	ldr	r3, [r3, #32]
 801976e:	697a      	ldr	r2, [r7, #20]
 8019770:	43d2      	mvns	r2, r2
 8019772:	401a      	ands	r2, r3
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	6a1a      	ldr	r2, [r3, #32]
 801977c:	68bb      	ldr	r3, [r7, #8]
 801977e:	211f      	movs	r1, #31
 8019780:	400b      	ands	r3, r1
 8019782:	6879      	ldr	r1, [r7, #4]
 8019784:	4099      	lsls	r1, r3
 8019786:	000b      	movs	r3, r1
 8019788:	431a      	orrs	r2, r3
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	621a      	str	r2, [r3, #32]
}
 801978e:	46c0      	nop			@ (mov r8, r8)
 8019790:	46bd      	mov	sp, r7
 8019792:	b006      	add	sp, #24
 8019794:	bd80      	pop	{r7, pc}
	...

08019798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b084      	sub	sp, #16
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
 80197a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	2238      	movs	r2, #56	@ 0x38
 80197a6:	5c9b      	ldrb	r3, [r3, r2]
 80197a8:	2b01      	cmp	r3, #1
 80197aa:	d101      	bne.n	80197b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80197ac:	2302      	movs	r3, #2
 80197ae:	e047      	b.n	8019840 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	2238      	movs	r2, #56	@ 0x38
 80197b4:	2101      	movs	r1, #1
 80197b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2239      	movs	r2, #57	@ 0x39
 80197bc:	2102      	movs	r1, #2
 80197be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	685b      	ldr	r3, [r3, #4]
 80197c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	689b      	ldr	r3, [r3, #8]
 80197ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	2270      	movs	r2, #112	@ 0x70
 80197d4:	4393      	bics	r3, r2
 80197d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80197d8:	683b      	ldr	r3, [r7, #0]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	68fa      	ldr	r2, [r7, #12]
 80197de:	4313      	orrs	r3, r2
 80197e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	68fa      	ldr	r2, [r7, #12]
 80197e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681a      	ldr	r2, [r3, #0]
 80197ee:	2380      	movs	r3, #128	@ 0x80
 80197f0:	05db      	lsls	r3, r3, #23
 80197f2:	429a      	cmp	r2, r3
 80197f4:	d00e      	beq.n	8019814 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	4a13      	ldr	r2, [pc, #76]	@ (8019848 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80197fc:	4293      	cmp	r3, r2
 80197fe:	d009      	beq.n	8019814 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	4a11      	ldr	r2, [pc, #68]	@ (801984c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8019806:	4293      	cmp	r3, r2
 8019808:	d004      	beq.n	8019814 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	4a10      	ldr	r2, [pc, #64]	@ (8019850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8019810:	4293      	cmp	r3, r2
 8019812:	d10c      	bne.n	801982e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8019814:	68bb      	ldr	r3, [r7, #8]
 8019816:	2280      	movs	r2, #128	@ 0x80
 8019818:	4393      	bics	r3, r2
 801981a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	685b      	ldr	r3, [r3, #4]
 8019820:	68ba      	ldr	r2, [r7, #8]
 8019822:	4313      	orrs	r3, r2
 8019824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	68ba      	ldr	r2, [r7, #8]
 801982c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	2239      	movs	r2, #57	@ 0x39
 8019832:	2101      	movs	r1, #1
 8019834:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	2238      	movs	r2, #56	@ 0x38
 801983a:	2100      	movs	r1, #0
 801983c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801983e:	2300      	movs	r3, #0
}
 8019840:	0018      	movs	r0, r3
 8019842:	46bd      	mov	sp, r7
 8019844:	b004      	add	sp, #16
 8019846:	bd80      	pop	{r7, pc}
 8019848:	40000400 	.word	0x40000400
 801984c:	40010800 	.word	0x40010800
 8019850:	40011400 	.word	0x40011400

08019854 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b082      	sub	sp, #8
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
 801985c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	2238      	movs	r2, #56	@ 0x38
 8019862:	5c9b      	ldrb	r3, [r3, r2]
 8019864:	2b01      	cmp	r3, #1
 8019866:	d101      	bne.n	801986c <HAL_TIMEx_RemapConfig+0x18>
 8019868:	2302      	movs	r3, #2
 801986a:	e00c      	b.n	8019886 <HAL_TIMEx_RemapConfig+0x32>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	2238      	movs	r2, #56	@ 0x38
 8019870:	2101      	movs	r1, #1
 8019872:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	683a      	ldr	r2, [r7, #0]
 801987a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	2238      	movs	r2, #56	@ 0x38
 8019880:	2100      	movs	r1, #0
 8019882:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019884:	2300      	movs	r3, #0
}
 8019886:	0018      	movs	r0, r3
 8019888:	46bd      	mov	sp, r7
 801988a:	b002      	add	sp, #8
 801988c:	bd80      	pop	{r7, pc}
	...

08019890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b082      	sub	sp, #8
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d101      	bne.n	80198a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801989e:	2301      	movs	r3, #1
 80198a0:	e053      	b.n	801994a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d116      	bne.n	80198d8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	2278      	movs	r2, #120	@ 0x78
 80198ae:	2100      	movs	r1, #0
 80198b0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	0018      	movs	r0, r3
 80198b6:	f000 fd65 	bl	801a384 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	22b0      	movs	r2, #176	@ 0xb0
 80198be:	589b      	ldr	r3, [r3, r2]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d103      	bne.n	80198cc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	21b0      	movs	r1, #176	@ 0xb0
 80198c8:	4a22      	ldr	r2, [pc, #136]	@ (8019954 <HAL_UART_Init+0xc4>)
 80198ca:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	22b0      	movs	r2, #176	@ 0xb0
 80198d0:	589b      	ldr	r3, [r3, r2]
 80198d2:	687a      	ldr	r2, [r7, #4]
 80198d4:	0010      	movs	r0, r2
 80198d6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2224      	movs	r2, #36	@ 0x24
 80198dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	681a      	ldr	r2, [r3, #0]
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	2101      	movs	r1, #1
 80198ea:	438a      	bics	r2, r1
 80198ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	0018      	movs	r0, r3
 80198f2:	f000 fd8b 	bl	801a40c <UART_SetConfig>
 80198f6:	0003      	movs	r3, r0
 80198f8:	2b01      	cmp	r3, #1
 80198fa:	d101      	bne.n	8019900 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80198fc:	2301      	movs	r3, #1
 80198fe:	e024      	b.n	801994a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019904:	2b00      	cmp	r3, #0
 8019906:	d003      	beq.n	8019910 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	0018      	movs	r0, r3
 801990c:	f001 f81c 	bl	801a948 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	685a      	ldr	r2, [r3, #4]
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	490f      	ldr	r1, [pc, #60]	@ (8019958 <HAL_UART_Init+0xc8>)
 801991c:	400a      	ands	r2, r1
 801991e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	689a      	ldr	r2, [r3, #8]
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	212a      	movs	r1, #42	@ 0x2a
 801992c:	438a      	bics	r2, r1
 801992e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	681a      	ldr	r2, [r3, #0]
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	2101      	movs	r1, #1
 801993c:	430a      	orrs	r2, r1
 801993e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	0018      	movs	r0, r3
 8019944:	f001 f8b4 	bl	801aab0 <UART_CheckIdleState>
 8019948:	0003      	movs	r3, r0
}
 801994a:	0018      	movs	r0, r3
 801994c:	46bd      	mov	sp, r7
 801994e:	b002      	add	sp, #8
 8019950:	bd80      	pop	{r7, pc}
 8019952:	46c0      	nop			@ (mov r8, r8)
 8019954:	08010421 	.word	0x08010421
 8019958:	ffffb7ff 	.word	0xffffb7ff

0801995c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b08a      	sub	sp, #40	@ 0x28
 8019960:	af02      	add	r7, sp, #8
 8019962:	60f8      	str	r0, [r7, #12]
 8019964:	60b9      	str	r1, [r7, #8]
 8019966:	603b      	str	r3, [r7, #0]
 8019968:	1dbb      	adds	r3, r7, #6
 801996a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019970:	2b20      	cmp	r3, #32
 8019972:	d000      	beq.n	8019976 <HAL_UART_Transmit+0x1a>
 8019974:	e08c      	b.n	8019a90 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8019976:	68bb      	ldr	r3, [r7, #8]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d003      	beq.n	8019984 <HAL_UART_Transmit+0x28>
 801997c:	1dbb      	adds	r3, r7, #6
 801997e:	881b      	ldrh	r3, [r3, #0]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d101      	bne.n	8019988 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8019984:	2301      	movs	r3, #1
 8019986:	e084      	b.n	8019a92 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	689a      	ldr	r2, [r3, #8]
 801998c:	2380      	movs	r3, #128	@ 0x80
 801998e:	015b      	lsls	r3, r3, #5
 8019990:	429a      	cmp	r2, r3
 8019992:	d109      	bne.n	80199a8 <HAL_UART_Transmit+0x4c>
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	691b      	ldr	r3, [r3, #16]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d105      	bne.n	80199a8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	2201      	movs	r2, #1
 80199a0:	4013      	ands	r3, r2
 80199a2:	d001      	beq.n	80199a8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80199a4:	2301      	movs	r3, #1
 80199a6:	e074      	b.n	8019a92 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	2284      	movs	r2, #132	@ 0x84
 80199ac:	2100      	movs	r1, #0
 80199ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	2221      	movs	r2, #33	@ 0x21
 80199b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80199b6:	f7f7 fb0d 	bl	8010fd4 <HAL_GetTick>
 80199ba:	0003      	movs	r3, r0
 80199bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	1dba      	adds	r2, r7, #6
 80199c2:	2150      	movs	r1, #80	@ 0x50
 80199c4:	8812      	ldrh	r2, [r2, #0]
 80199c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	1dba      	adds	r2, r7, #6
 80199cc:	2152      	movs	r1, #82	@ 0x52
 80199ce:	8812      	ldrh	r2, [r2, #0]
 80199d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	689a      	ldr	r2, [r3, #8]
 80199d6:	2380      	movs	r3, #128	@ 0x80
 80199d8:	015b      	lsls	r3, r3, #5
 80199da:	429a      	cmp	r2, r3
 80199dc:	d108      	bne.n	80199f0 <HAL_UART_Transmit+0x94>
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	691b      	ldr	r3, [r3, #16]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d104      	bne.n	80199f0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80199e6:	2300      	movs	r3, #0
 80199e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	61bb      	str	r3, [r7, #24]
 80199ee:	e003      	b.n	80199f8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80199f0:	68bb      	ldr	r3, [r7, #8]
 80199f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80199f4:	2300      	movs	r3, #0
 80199f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80199f8:	e02f      	b.n	8019a5a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80199fa:	697a      	ldr	r2, [r7, #20]
 80199fc:	68f8      	ldr	r0, [r7, #12]
 80199fe:	683b      	ldr	r3, [r7, #0]
 8019a00:	9300      	str	r3, [sp, #0]
 8019a02:	0013      	movs	r3, r2
 8019a04:	2200      	movs	r2, #0
 8019a06:	2180      	movs	r1, #128	@ 0x80
 8019a08:	f001 f8fa 	bl	801ac00 <UART_WaitOnFlagUntilTimeout>
 8019a0c:	1e03      	subs	r3, r0, #0
 8019a0e:	d004      	beq.n	8019a1a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	2220      	movs	r2, #32
 8019a14:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8019a16:	2303      	movs	r3, #3
 8019a18:	e03b      	b.n	8019a92 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8019a1a:	69fb      	ldr	r3, [r7, #28]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d10b      	bne.n	8019a38 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019a20:	69bb      	ldr	r3, [r7, #24]
 8019a22:	881b      	ldrh	r3, [r3, #0]
 8019a24:	001a      	movs	r2, r3
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	05d2      	lsls	r2, r2, #23
 8019a2c:	0dd2      	lsrs	r2, r2, #23
 8019a2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8019a30:	69bb      	ldr	r3, [r7, #24]
 8019a32:	3302      	adds	r3, #2
 8019a34:	61bb      	str	r3, [r7, #24]
 8019a36:	e007      	b.n	8019a48 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019a38:	69fb      	ldr	r3, [r7, #28]
 8019a3a:	781a      	ldrb	r2, [r3, #0]
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8019a42:	69fb      	ldr	r3, [r7, #28]
 8019a44:	3301      	adds	r3, #1
 8019a46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	2252      	movs	r2, #82	@ 0x52
 8019a4c:	5a9b      	ldrh	r3, [r3, r2]
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	3b01      	subs	r3, #1
 8019a52:	b299      	uxth	r1, r3
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	2252      	movs	r2, #82	@ 0x52
 8019a58:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	2252      	movs	r2, #82	@ 0x52
 8019a5e:	5a9b      	ldrh	r3, [r3, r2]
 8019a60:	b29b      	uxth	r3, r3
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d1c9      	bne.n	80199fa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019a66:	697a      	ldr	r2, [r7, #20]
 8019a68:	68f8      	ldr	r0, [r7, #12]
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	9300      	str	r3, [sp, #0]
 8019a6e:	0013      	movs	r3, r2
 8019a70:	2200      	movs	r2, #0
 8019a72:	2140      	movs	r1, #64	@ 0x40
 8019a74:	f001 f8c4 	bl	801ac00 <UART_WaitOnFlagUntilTimeout>
 8019a78:	1e03      	subs	r3, r0, #0
 8019a7a:	d004      	beq.n	8019a86 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2220      	movs	r2, #32
 8019a80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8019a82:	2303      	movs	r3, #3
 8019a84:	e005      	b.n	8019a92 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	2220      	movs	r2, #32
 8019a8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	e000      	b.n	8019a92 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8019a90:	2302      	movs	r3, #2
  }
}
 8019a92:	0018      	movs	r0, r3
 8019a94:	46bd      	mov	sp, r7
 8019a96:	b008      	add	sp, #32
 8019a98:	bd80      	pop	{r7, pc}
	...

08019a9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b088      	sub	sp, #32
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	60f8      	str	r0, [r7, #12]
 8019aa4:	60b9      	str	r1, [r7, #8]
 8019aa6:	1dbb      	adds	r3, r7, #6
 8019aa8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	2280      	movs	r2, #128	@ 0x80
 8019aae:	589b      	ldr	r3, [r3, r2]
 8019ab0:	2b20      	cmp	r3, #32
 8019ab2:	d14a      	bne.n	8019b4a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8019ab4:	68bb      	ldr	r3, [r7, #8]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d003      	beq.n	8019ac2 <HAL_UART_Receive_IT+0x26>
 8019aba:	1dbb      	adds	r3, r7, #6
 8019abc:	881b      	ldrh	r3, [r3, #0]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d101      	bne.n	8019ac6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	e042      	b.n	8019b4c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	689a      	ldr	r2, [r3, #8]
 8019aca:	2380      	movs	r3, #128	@ 0x80
 8019acc:	015b      	lsls	r3, r3, #5
 8019ace:	429a      	cmp	r2, r3
 8019ad0:	d109      	bne.n	8019ae6 <HAL_UART_Receive_IT+0x4a>
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	691b      	ldr	r3, [r3, #16]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d105      	bne.n	8019ae6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	2201      	movs	r2, #1
 8019ade:	4013      	ands	r3, r2
 8019ae0:	d001      	beq.n	8019ae6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8019ae2:	2301      	movs	r3, #1
 8019ae4:	e032      	b.n	8019b4c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	2200      	movs	r2, #0
 8019aea:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	4a18      	ldr	r2, [pc, #96]	@ (8019b54 <HAL_UART_Receive_IT+0xb8>)
 8019af2:	4293      	cmp	r3, r2
 8019af4:	d020      	beq.n	8019b38 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	685a      	ldr	r2, [r3, #4]
 8019afc:	2380      	movs	r3, #128	@ 0x80
 8019afe:	041b      	lsls	r3, r3, #16
 8019b00:	4013      	ands	r3, r2
 8019b02:	d019      	beq.n	8019b38 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b04:	f3ef 8310 	mrs	r3, PRIMASK
 8019b08:	613b      	str	r3, [r7, #16]
  return(result);
 8019b0a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019b0c:	61fb      	str	r3, [r7, #28]
 8019b0e:	2301      	movs	r3, #1
 8019b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b12:	697b      	ldr	r3, [r7, #20]
 8019b14:	f383 8810 	msr	PRIMASK, r3
}
 8019b18:	46c0      	nop			@ (mov r8, r8)
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	681a      	ldr	r2, [r3, #0]
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	2180      	movs	r1, #128	@ 0x80
 8019b26:	04c9      	lsls	r1, r1, #19
 8019b28:	430a      	orrs	r2, r1
 8019b2a:	601a      	str	r2, [r3, #0]
 8019b2c:	69fb      	ldr	r3, [r7, #28]
 8019b2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b30:	69bb      	ldr	r3, [r7, #24]
 8019b32:	f383 8810 	msr	PRIMASK, r3
}
 8019b36:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8019b38:	1dbb      	adds	r3, r7, #6
 8019b3a:	881a      	ldrh	r2, [r3, #0]
 8019b3c:	68b9      	ldr	r1, [r7, #8]
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	0018      	movs	r0, r3
 8019b42:	f001 f8c7 	bl	801acd4 <UART_Start_Receive_IT>
 8019b46:	0003      	movs	r3, r0
 8019b48:	e000      	b.n	8019b4c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8019b4a:	2302      	movs	r3, #2
  }
}
 8019b4c:	0018      	movs	r0, r3
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	b008      	add	sp, #32
 8019b52:	bd80      	pop	{r7, pc}
 8019b54:	40004800 	.word	0x40004800

08019b58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b088      	sub	sp, #32
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	60f8      	str	r0, [r7, #12]
 8019b60:	60b9      	str	r1, [r7, #8]
 8019b62:	1dbb      	adds	r3, r7, #6
 8019b64:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019b6a:	2b20      	cmp	r3, #32
 8019b6c:	d000      	beq.n	8019b70 <HAL_UART_Transmit_DMA+0x18>
 8019b6e:	e077      	b.n	8019c60 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d003      	beq.n	8019b7e <HAL_UART_Transmit_DMA+0x26>
 8019b76:	1dbb      	adds	r3, r7, #6
 8019b78:	881b      	ldrh	r3, [r3, #0]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d101      	bne.n	8019b82 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8019b7e:	2301      	movs	r3, #1
 8019b80:	e06f      	b.n	8019c62 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	689a      	ldr	r2, [r3, #8]
 8019b86:	2380      	movs	r3, #128	@ 0x80
 8019b88:	015b      	lsls	r3, r3, #5
 8019b8a:	429a      	cmp	r2, r3
 8019b8c:	d109      	bne.n	8019ba2 <HAL_UART_Transmit_DMA+0x4a>
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	691b      	ldr	r3, [r3, #16]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d105      	bne.n	8019ba2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019b96:	68bb      	ldr	r3, [r7, #8]
 8019b98:	2201      	movs	r2, #1
 8019b9a:	4013      	ands	r3, r2
 8019b9c:	d001      	beq.n	8019ba2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019b9e:	2301      	movs	r3, #1
 8019ba0:	e05f      	b.n	8019c62 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	68ba      	ldr	r2, [r7, #8]
 8019ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	1dba      	adds	r2, r7, #6
 8019bac:	2150      	movs	r1, #80	@ 0x50
 8019bae:	8812      	ldrh	r2, [r2, #0]
 8019bb0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	1dba      	adds	r2, r7, #6
 8019bb6:	2152      	movs	r1, #82	@ 0x52
 8019bb8:	8812      	ldrh	r2, [r2, #0]
 8019bba:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	2284      	movs	r2, #132	@ 0x84
 8019bc0:	2100      	movs	r1, #0
 8019bc2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	2221      	movs	r2, #33	@ 0x21
 8019bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d027      	beq.n	8019c22 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019bd6:	4a25      	ldr	r2, [pc, #148]	@ (8019c6c <HAL_UART_Transmit_DMA+0x114>)
 8019bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019bde:	4a24      	ldr	r2, [pc, #144]	@ (8019c70 <HAL_UART_Transmit_DMA+0x118>)
 8019be0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019be6:	4a23      	ldr	r2, [pc, #140]	@ (8019c74 <HAL_UART_Transmit_DMA+0x11c>)
 8019be8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019bee:	2200      	movs	r2, #0
 8019bf0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019bfa:	0019      	movs	r1, r3
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	3328      	adds	r3, #40	@ 0x28
 8019c02:	001a      	movs	r2, r3
 8019c04:	1dbb      	adds	r3, r7, #6
 8019c06:	881b      	ldrh	r3, [r3, #0]
 8019c08:	f7f7 ff36 	bl	8011a78 <HAL_DMA_Start_IT>
 8019c0c:	1e03      	subs	r3, r0, #0
 8019c0e:	d008      	beq.n	8019c22 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	2284      	movs	r2, #132	@ 0x84
 8019c14:	2110      	movs	r1, #16
 8019c16:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	2220      	movs	r2, #32
 8019c1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8019c1e:	2301      	movs	r3, #1
 8019c20:	e01f      	b.n	8019c62 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	2240      	movs	r2, #64	@ 0x40
 8019c28:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8019c2e:	613b      	str	r3, [r7, #16]
  return(result);
 8019c30:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019c32:	61fb      	str	r3, [r7, #28]
 8019c34:	2301      	movs	r3, #1
 8019c36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	f383 8810 	msr	PRIMASK, r3
}
 8019c3e:	46c0      	nop			@ (mov r8, r8)
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	689a      	ldr	r2, [r3, #8]
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	2180      	movs	r1, #128	@ 0x80
 8019c4c:	430a      	orrs	r2, r1
 8019c4e:	609a      	str	r2, [r3, #8]
 8019c50:	69fb      	ldr	r3, [r7, #28]
 8019c52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c54:	69bb      	ldr	r3, [r7, #24]
 8019c56:	f383 8810 	msr	PRIMASK, r3
}
 8019c5a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	e000      	b.n	8019c62 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8019c60:	2302      	movs	r3, #2
  }
}
 8019c62:	0018      	movs	r0, r3
 8019c64:	46bd      	mov	sp, r7
 8019c66:	b008      	add	sp, #32
 8019c68:	bd80      	pop	{r7, pc}
 8019c6a:	46c0      	nop			@ (mov r8, r8)
 8019c6c:	0801b0b9 	.word	0x0801b0b9
 8019c70:	0801b155 	.word	0x0801b155
 8019c74:	0801b2f5 	.word	0x0801b2f5

08019c78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b088      	sub	sp, #32
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	60f8      	str	r0, [r7, #12]
 8019c80:	60b9      	str	r1, [r7, #8]
 8019c82:	1dbb      	adds	r3, r7, #6
 8019c84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	2280      	movs	r2, #128	@ 0x80
 8019c8a:	589b      	ldr	r3, [r3, r2]
 8019c8c:	2b20      	cmp	r3, #32
 8019c8e:	d14a      	bne.n	8019d26 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d003      	beq.n	8019c9e <HAL_UART_Receive_DMA+0x26>
 8019c96:	1dbb      	adds	r3, r7, #6
 8019c98:	881b      	ldrh	r3, [r3, #0]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d101      	bne.n	8019ca2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	e042      	b.n	8019d28 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	689a      	ldr	r2, [r3, #8]
 8019ca6:	2380      	movs	r3, #128	@ 0x80
 8019ca8:	015b      	lsls	r3, r3, #5
 8019caa:	429a      	cmp	r2, r3
 8019cac:	d109      	bne.n	8019cc2 <HAL_UART_Receive_DMA+0x4a>
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	691b      	ldr	r3, [r3, #16]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d105      	bne.n	8019cc2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019cb6:	68bb      	ldr	r3, [r7, #8]
 8019cb8:	2201      	movs	r2, #1
 8019cba:	4013      	ands	r3, r2
 8019cbc:	d001      	beq.n	8019cc2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019cbe:	2301      	movs	r3, #1
 8019cc0:	e032      	b.n	8019d28 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	4a18      	ldr	r2, [pc, #96]	@ (8019d30 <HAL_UART_Receive_DMA+0xb8>)
 8019cce:	4293      	cmp	r3, r2
 8019cd0:	d020      	beq.n	8019d14 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	685a      	ldr	r2, [r3, #4]
 8019cd8:	2380      	movs	r3, #128	@ 0x80
 8019cda:	041b      	lsls	r3, r3, #16
 8019cdc:	4013      	ands	r3, r2
 8019cde:	d019      	beq.n	8019d14 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8019ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8019ce6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019ce8:	61fb      	str	r3, [r7, #28]
 8019cea:	2301      	movs	r3, #1
 8019cec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019cee:	697b      	ldr	r3, [r7, #20]
 8019cf0:	f383 8810 	msr	PRIMASK, r3
}
 8019cf4:	46c0      	nop			@ (mov r8, r8)
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	681a      	ldr	r2, [r3, #0]
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	2180      	movs	r1, #128	@ 0x80
 8019d02:	04c9      	lsls	r1, r1, #19
 8019d04:	430a      	orrs	r2, r1
 8019d06:	601a      	str	r2, [r3, #0]
 8019d08:	69fb      	ldr	r3, [r7, #28]
 8019d0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d0c:	69bb      	ldr	r3, [r7, #24]
 8019d0e:	f383 8810 	msr	PRIMASK, r3
}
 8019d12:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8019d14:	1dbb      	adds	r3, r7, #6
 8019d16:	881a      	ldrh	r2, [r3, #0]
 8019d18:	68b9      	ldr	r1, [r7, #8]
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	0018      	movs	r0, r3
 8019d1e:	f001 f8a3 	bl	801ae68 <UART_Start_Receive_DMA>
 8019d22:	0003      	movs	r3, r0
 8019d24:	e000      	b.n	8019d28 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8019d26:	2302      	movs	r3, #2
  }
}
 8019d28:	0018      	movs	r0, r3
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	b008      	add	sp, #32
 8019d2e:	bd80      	pop	{r7, pc}
 8019d30:	40004800 	.word	0x40004800

08019d34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019d34:	b590      	push	{r4, r7, lr}
 8019d36:	b0ab      	sub	sp, #172	@ 0xac
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	69db      	ldr	r3, [r3, #28]
 8019d42:	22a4      	movs	r2, #164	@ 0xa4
 8019d44:	18b9      	adds	r1, r7, r2
 8019d46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	20a0      	movs	r0, #160	@ 0xa0
 8019d50:	1839      	adds	r1, r7, r0
 8019d52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	689b      	ldr	r3, [r3, #8]
 8019d5a:	219c      	movs	r1, #156	@ 0x9c
 8019d5c:	1879      	adds	r1, r7, r1
 8019d5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019d60:	0011      	movs	r1, r2
 8019d62:	18bb      	adds	r3, r7, r2
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	4a9c      	ldr	r2, [pc, #624]	@ (8019fd8 <HAL_UART_IRQHandler+0x2a4>)
 8019d68:	4013      	ands	r3, r2
 8019d6a:	2298      	movs	r2, #152	@ 0x98
 8019d6c:	18bc      	adds	r4, r7, r2
 8019d6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8019d70:	18bb      	adds	r3, r7, r2
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d114      	bne.n	8019da2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8019d78:	187b      	adds	r3, r7, r1
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	2220      	movs	r2, #32
 8019d7e:	4013      	ands	r3, r2
 8019d80:	d00f      	beq.n	8019da2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019d82:	183b      	adds	r3, r7, r0
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	2220      	movs	r2, #32
 8019d88:	4013      	ands	r3, r2
 8019d8a:	d00a      	beq.n	8019da2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d100      	bne.n	8019d96 <HAL_UART_IRQHandler+0x62>
 8019d94:	e2aa      	b.n	801a2ec <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019d9a:	687a      	ldr	r2, [r7, #4]
 8019d9c:	0010      	movs	r0, r2
 8019d9e:	4798      	blx	r3
      }
      return;
 8019da0:	e2a4      	b.n	801a2ec <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8019da2:	2398      	movs	r3, #152	@ 0x98
 8019da4:	18fb      	adds	r3, r7, r3
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d100      	bne.n	8019dae <HAL_UART_IRQHandler+0x7a>
 8019dac:	e11a      	b.n	8019fe4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8019dae:	239c      	movs	r3, #156	@ 0x9c
 8019db0:	18fb      	adds	r3, r7, r3
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	2201      	movs	r2, #1
 8019db6:	4013      	ands	r3, r2
 8019db8:	d106      	bne.n	8019dc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8019dba:	23a0      	movs	r3, #160	@ 0xa0
 8019dbc:	18fb      	adds	r3, r7, r3
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	4a86      	ldr	r2, [pc, #536]	@ (8019fdc <HAL_UART_IRQHandler+0x2a8>)
 8019dc2:	4013      	ands	r3, r2
 8019dc4:	d100      	bne.n	8019dc8 <HAL_UART_IRQHandler+0x94>
 8019dc6:	e10d      	b.n	8019fe4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019dc8:	23a4      	movs	r3, #164	@ 0xa4
 8019dca:	18fb      	adds	r3, r7, r3
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	2201      	movs	r2, #1
 8019dd0:	4013      	ands	r3, r2
 8019dd2:	d012      	beq.n	8019dfa <HAL_UART_IRQHandler+0xc6>
 8019dd4:	23a0      	movs	r3, #160	@ 0xa0
 8019dd6:	18fb      	adds	r3, r7, r3
 8019dd8:	681a      	ldr	r2, [r3, #0]
 8019dda:	2380      	movs	r3, #128	@ 0x80
 8019ddc:	005b      	lsls	r3, r3, #1
 8019dde:	4013      	ands	r3, r2
 8019de0:	d00b      	beq.n	8019dfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	2201      	movs	r2, #1
 8019de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	2284      	movs	r2, #132	@ 0x84
 8019dee:	589b      	ldr	r3, [r3, r2]
 8019df0:	2201      	movs	r2, #1
 8019df2:	431a      	orrs	r2, r3
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	2184      	movs	r1, #132	@ 0x84
 8019df8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019dfa:	23a4      	movs	r3, #164	@ 0xa4
 8019dfc:	18fb      	adds	r3, r7, r3
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	2202      	movs	r2, #2
 8019e02:	4013      	ands	r3, r2
 8019e04:	d011      	beq.n	8019e2a <HAL_UART_IRQHandler+0xf6>
 8019e06:	239c      	movs	r3, #156	@ 0x9c
 8019e08:	18fb      	adds	r3, r7, r3
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2201      	movs	r2, #1
 8019e0e:	4013      	ands	r3, r2
 8019e10:	d00b      	beq.n	8019e2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	2202      	movs	r2, #2
 8019e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	2284      	movs	r2, #132	@ 0x84
 8019e1e:	589b      	ldr	r3, [r3, r2]
 8019e20:	2204      	movs	r2, #4
 8019e22:	431a      	orrs	r2, r3
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	2184      	movs	r1, #132	@ 0x84
 8019e28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019e2a:	23a4      	movs	r3, #164	@ 0xa4
 8019e2c:	18fb      	adds	r3, r7, r3
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	2204      	movs	r2, #4
 8019e32:	4013      	ands	r3, r2
 8019e34:	d011      	beq.n	8019e5a <HAL_UART_IRQHandler+0x126>
 8019e36:	239c      	movs	r3, #156	@ 0x9c
 8019e38:	18fb      	adds	r3, r7, r3
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	2201      	movs	r2, #1
 8019e3e:	4013      	ands	r3, r2
 8019e40:	d00b      	beq.n	8019e5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	2204      	movs	r2, #4
 8019e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	2284      	movs	r2, #132	@ 0x84
 8019e4e:	589b      	ldr	r3, [r3, r2]
 8019e50:	2202      	movs	r2, #2
 8019e52:	431a      	orrs	r2, r3
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2184      	movs	r1, #132	@ 0x84
 8019e58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8019e5a:	23a4      	movs	r3, #164	@ 0xa4
 8019e5c:	18fb      	adds	r3, r7, r3
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	2208      	movs	r2, #8
 8019e62:	4013      	ands	r3, r2
 8019e64:	d017      	beq.n	8019e96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8019e66:	23a0      	movs	r3, #160	@ 0xa0
 8019e68:	18fb      	adds	r3, r7, r3
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	2220      	movs	r2, #32
 8019e6e:	4013      	ands	r3, r2
 8019e70:	d105      	bne.n	8019e7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8019e72:	239c      	movs	r3, #156	@ 0x9c
 8019e74:	18fb      	adds	r3, r7, r3
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	2201      	movs	r2, #1
 8019e7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8019e7c:	d00b      	beq.n	8019e96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	2208      	movs	r2, #8
 8019e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2284      	movs	r2, #132	@ 0x84
 8019e8a:	589b      	ldr	r3, [r3, r2]
 8019e8c:	2208      	movs	r2, #8
 8019e8e:	431a      	orrs	r2, r3
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	2184      	movs	r1, #132	@ 0x84
 8019e94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8019e96:	23a4      	movs	r3, #164	@ 0xa4
 8019e98:	18fb      	adds	r3, r7, r3
 8019e9a:	681a      	ldr	r2, [r3, #0]
 8019e9c:	2380      	movs	r3, #128	@ 0x80
 8019e9e:	011b      	lsls	r3, r3, #4
 8019ea0:	4013      	ands	r3, r2
 8019ea2:	d013      	beq.n	8019ecc <HAL_UART_IRQHandler+0x198>
 8019ea4:	23a0      	movs	r3, #160	@ 0xa0
 8019ea6:	18fb      	adds	r3, r7, r3
 8019ea8:	681a      	ldr	r2, [r3, #0]
 8019eaa:	2380      	movs	r3, #128	@ 0x80
 8019eac:	04db      	lsls	r3, r3, #19
 8019eae:	4013      	ands	r3, r2
 8019eb0:	d00c      	beq.n	8019ecc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	2280      	movs	r2, #128	@ 0x80
 8019eb8:	0112      	lsls	r2, r2, #4
 8019eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2284      	movs	r2, #132	@ 0x84
 8019ec0:	589b      	ldr	r3, [r3, r2]
 8019ec2:	2220      	movs	r2, #32
 8019ec4:	431a      	orrs	r2, r3
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2184      	movs	r1, #132	@ 0x84
 8019eca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2284      	movs	r2, #132	@ 0x84
 8019ed0:	589b      	ldr	r3, [r3, r2]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d100      	bne.n	8019ed8 <HAL_UART_IRQHandler+0x1a4>
 8019ed6:	e20b      	b.n	801a2f0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8019ed8:	23a4      	movs	r3, #164	@ 0xa4
 8019eda:	18fb      	adds	r3, r7, r3
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	2220      	movs	r2, #32
 8019ee0:	4013      	ands	r3, r2
 8019ee2:	d00e      	beq.n	8019f02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019ee4:	23a0      	movs	r3, #160	@ 0xa0
 8019ee6:	18fb      	adds	r3, r7, r3
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	2220      	movs	r2, #32
 8019eec:	4013      	ands	r3, r2
 8019eee:	d008      	beq.n	8019f02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d004      	beq.n	8019f02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019efc:	687a      	ldr	r2, [r7, #4]
 8019efe:	0010      	movs	r0, r2
 8019f00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	2284      	movs	r2, #132	@ 0x84
 8019f06:	589b      	ldr	r3, [r3, r2]
 8019f08:	2194      	movs	r1, #148	@ 0x94
 8019f0a:	187a      	adds	r2, r7, r1
 8019f0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	689b      	ldr	r3, [r3, #8]
 8019f14:	2240      	movs	r2, #64	@ 0x40
 8019f16:	4013      	ands	r3, r2
 8019f18:	2b40      	cmp	r3, #64	@ 0x40
 8019f1a:	d004      	beq.n	8019f26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8019f1c:	187b      	adds	r3, r7, r1
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	2228      	movs	r2, #40	@ 0x28
 8019f22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019f24:	d04b      	beq.n	8019fbe <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	0018      	movs	r0, r3
 8019f2a:	f001 f861 	bl	801aff0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	689b      	ldr	r3, [r3, #8]
 8019f34:	2240      	movs	r2, #64	@ 0x40
 8019f36:	4013      	ands	r3, r2
 8019f38:	2b40      	cmp	r3, #64	@ 0x40
 8019f3a:	d139      	bne.n	8019fb0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8019f40:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8019f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019f44:	2090      	movs	r0, #144	@ 0x90
 8019f46:	183a      	adds	r2, r7, r0
 8019f48:	6013      	str	r3, [r2, #0]
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019f50:	f383 8810 	msr	PRIMASK, r3
}
 8019f54:	46c0      	nop			@ (mov r8, r8)
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	689a      	ldr	r2, [r3, #8]
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	2140      	movs	r1, #64	@ 0x40
 8019f62:	438a      	bics	r2, r1
 8019f64:	609a      	str	r2, [r3, #8]
 8019f66:	183b      	adds	r3, r7, r0
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019f6e:	f383 8810 	msr	PRIMASK, r3
}
 8019f72:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d012      	beq.n	8019fa2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f80:	4a17      	ldr	r2, [pc, #92]	@ (8019fe0 <HAL_UART_IRQHandler+0x2ac>)
 8019f82:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f88:	0018      	movs	r0, r3
 8019f8a:	f7f7 fe1b 	bl	8011bc4 <HAL_DMA_Abort_IT>
 8019f8e:	1e03      	subs	r3, r0, #0
 8019f90:	d020      	beq.n	8019fd4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f9c:	0018      	movs	r0, r3
 8019f9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019fa0:	e018      	b.n	8019fd4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	2298      	movs	r2, #152	@ 0x98
 8019fa6:	589b      	ldr	r3, [r3, r2]
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	0010      	movs	r0, r2
 8019fac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019fae:	e011      	b.n	8019fd4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	2298      	movs	r2, #152	@ 0x98
 8019fb4:	589b      	ldr	r3, [r3, r2]
 8019fb6:	687a      	ldr	r2, [r7, #4]
 8019fb8:	0010      	movs	r0, r2
 8019fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019fbc:	e00a      	b.n	8019fd4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	2298      	movs	r2, #152	@ 0x98
 8019fc2:	589b      	ldr	r3, [r3, r2]
 8019fc4:	687a      	ldr	r2, [r7, #4]
 8019fc6:	0010      	movs	r0, r2
 8019fc8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	2284      	movs	r2, #132	@ 0x84
 8019fce:	2100      	movs	r1, #0
 8019fd0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8019fd2:	e18d      	b.n	801a2f0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019fd4:	46c0      	nop			@ (mov r8, r8)
    return;
 8019fd6:	e18b      	b.n	801a2f0 <HAL_UART_IRQHandler+0x5bc>
 8019fd8:	0000080f 	.word	0x0000080f
 8019fdc:	04000120 	.word	0x04000120
 8019fe0:	0801b37d 	.word	0x0801b37d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019fe8:	2b01      	cmp	r3, #1
 8019fea:	d000      	beq.n	8019fee <HAL_UART_IRQHandler+0x2ba>
 8019fec:	e13d      	b.n	801a26a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019fee:	23a4      	movs	r3, #164	@ 0xa4
 8019ff0:	18fb      	adds	r3, r7, r3
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	2210      	movs	r2, #16
 8019ff6:	4013      	ands	r3, r2
 8019ff8:	d100      	bne.n	8019ffc <HAL_UART_IRQHandler+0x2c8>
 8019ffa:	e136      	b.n	801a26a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019ffc:	23a0      	movs	r3, #160	@ 0xa0
 8019ffe:	18fb      	adds	r3, r7, r3
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	2210      	movs	r2, #16
 801a004:	4013      	ands	r3, r2
 801a006:	d100      	bne.n	801a00a <HAL_UART_IRQHandler+0x2d6>
 801a008:	e12f      	b.n	801a26a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	2210      	movs	r2, #16
 801a010:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	689b      	ldr	r3, [r3, #8]
 801a018:	2240      	movs	r2, #64	@ 0x40
 801a01a:	4013      	ands	r3, r2
 801a01c:	2b40      	cmp	r3, #64	@ 0x40
 801a01e:	d000      	beq.n	801a022 <HAL_UART_IRQHandler+0x2ee>
 801a020:	e0a2      	b.n	801a168 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	685a      	ldr	r2, [r3, #4]
 801a02a:	217e      	movs	r1, #126	@ 0x7e
 801a02c:	187b      	adds	r3, r7, r1
 801a02e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801a030:	187b      	adds	r3, r7, r1
 801a032:	881b      	ldrh	r3, [r3, #0]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d100      	bne.n	801a03a <HAL_UART_IRQHandler+0x306>
 801a038:	e15c      	b.n	801a2f4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2258      	movs	r2, #88	@ 0x58
 801a03e:	5a9b      	ldrh	r3, [r3, r2]
 801a040:	187a      	adds	r2, r7, r1
 801a042:	8812      	ldrh	r2, [r2, #0]
 801a044:	429a      	cmp	r2, r3
 801a046:	d300      	bcc.n	801a04a <HAL_UART_IRQHandler+0x316>
 801a048:	e154      	b.n	801a2f4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	187a      	adds	r2, r7, r1
 801a04e:	215a      	movs	r1, #90	@ 0x5a
 801a050:	8812      	ldrh	r2, [r2, #0]
 801a052:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	2220      	movs	r2, #32
 801a05e:	4013      	ands	r3, r2
 801a060:	d16f      	bne.n	801a142 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a062:	f3ef 8310 	mrs	r3, PRIMASK
 801a066:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801a068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a06a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a06c:	2301      	movs	r3, #1
 801a06e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a072:	f383 8810 	msr	PRIMASK, r3
}
 801a076:	46c0      	nop			@ (mov r8, r8)
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	681a      	ldr	r2, [r3, #0]
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	49a0      	ldr	r1, [pc, #640]	@ (801a304 <HAL_UART_IRQHandler+0x5d0>)
 801a084:	400a      	ands	r2, r1
 801a086:	601a      	str	r2, [r3, #0]
 801a088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a08a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a08e:	f383 8810 	msr	PRIMASK, r3
}
 801a092:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a094:	f3ef 8310 	mrs	r3, PRIMASK
 801a098:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801a09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a09c:	677b      	str	r3, [r7, #116]	@ 0x74
 801a09e:	2301      	movs	r3, #1
 801a0a0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a0a4:	f383 8810 	msr	PRIMASK, r3
}
 801a0a8:	46c0      	nop			@ (mov r8, r8)
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	689a      	ldr	r2, [r3, #8]
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	2101      	movs	r1, #1
 801a0b6:	438a      	bics	r2, r1
 801a0b8:	609a      	str	r2, [r3, #8]
 801a0ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a0bc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0c0:	f383 8810 	msr	PRIMASK, r3
}
 801a0c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0c6:	f3ef 8310 	mrs	r3, PRIMASK
 801a0ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801a0cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a0ce:	673b      	str	r3, [r7, #112]	@ 0x70
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a0d6:	f383 8810 	msr	PRIMASK, r3
}
 801a0da:	46c0      	nop			@ (mov r8, r8)
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	689a      	ldr	r2, [r3, #8]
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	2140      	movs	r1, #64	@ 0x40
 801a0e8:	438a      	bics	r2, r1
 801a0ea:	609a      	str	r2, [r3, #8]
 801a0ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0ee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a0f2:	f383 8810 	msr	PRIMASK, r3
}
 801a0f6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	2280      	movs	r2, #128	@ 0x80
 801a0fc:	2120      	movs	r1, #32
 801a0fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	2200      	movs	r2, #0
 801a104:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a106:	f3ef 8310 	mrs	r3, PRIMASK
 801a10a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801a10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a10e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a110:	2301      	movs	r3, #1
 801a112:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a116:	f383 8810 	msr	PRIMASK, r3
}
 801a11a:	46c0      	nop			@ (mov r8, r8)
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	681a      	ldr	r2, [r3, #0]
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	2110      	movs	r1, #16
 801a128:	438a      	bics	r2, r1
 801a12a:	601a      	str	r2, [r3, #0]
 801a12c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a12e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a132:	f383 8810 	msr	PRIMASK, r3
}
 801a136:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a13c:	0018      	movs	r0, r3
 801a13e:	f7f7 fd01 	bl	8011b44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	2202      	movs	r2, #2
 801a146:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	22ac      	movs	r2, #172	@ 0xac
 801a14c:	589b      	ldr	r3, [r3, r2]
 801a14e:	687a      	ldr	r2, [r7, #4]
 801a150:	2158      	movs	r1, #88	@ 0x58
 801a152:	5a51      	ldrh	r1, [r2, r1]
 801a154:	687a      	ldr	r2, [r7, #4]
 801a156:	205a      	movs	r0, #90	@ 0x5a
 801a158:	5a12      	ldrh	r2, [r2, r0]
 801a15a:	b292      	uxth	r2, r2
 801a15c:	1a8a      	subs	r2, r1, r2
 801a15e:	b291      	uxth	r1, r2
 801a160:	687a      	ldr	r2, [r7, #4]
 801a162:	0010      	movs	r0, r2
 801a164:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a166:	e0c5      	b.n	801a2f4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	2258      	movs	r2, #88	@ 0x58
 801a16c:	5a99      	ldrh	r1, [r3, r2]
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	225a      	movs	r2, #90	@ 0x5a
 801a172:	5a9b      	ldrh	r3, [r3, r2]
 801a174:	b29a      	uxth	r2, r3
 801a176:	208e      	movs	r0, #142	@ 0x8e
 801a178:	183b      	adds	r3, r7, r0
 801a17a:	1a8a      	subs	r2, r1, r2
 801a17c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	225a      	movs	r2, #90	@ 0x5a
 801a182:	5a9b      	ldrh	r3, [r3, r2]
 801a184:	b29b      	uxth	r3, r3
 801a186:	2b00      	cmp	r3, #0
 801a188:	d100      	bne.n	801a18c <HAL_UART_IRQHandler+0x458>
 801a18a:	e0b5      	b.n	801a2f8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801a18c:	183b      	adds	r3, r7, r0
 801a18e:	881b      	ldrh	r3, [r3, #0]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d100      	bne.n	801a196 <HAL_UART_IRQHandler+0x462>
 801a194:	e0b0      	b.n	801a2f8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a196:	f3ef 8310 	mrs	r3, PRIMASK
 801a19a:	60fb      	str	r3, [r7, #12]
  return(result);
 801a19c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a19e:	2488      	movs	r4, #136	@ 0x88
 801a1a0:	193a      	adds	r2, r7, r4
 801a1a2:	6013      	str	r3, [r2, #0]
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1a8:	693b      	ldr	r3, [r7, #16]
 801a1aa:	f383 8810 	msr	PRIMASK, r3
}
 801a1ae:	46c0      	nop			@ (mov r8, r8)
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	681a      	ldr	r2, [r3, #0]
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	4953      	ldr	r1, [pc, #332]	@ (801a308 <HAL_UART_IRQHandler+0x5d4>)
 801a1bc:	400a      	ands	r2, r1
 801a1be:	601a      	str	r2, [r3, #0]
 801a1c0:	193b      	adds	r3, r7, r4
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1c6:	697b      	ldr	r3, [r7, #20]
 801a1c8:	f383 8810 	msr	PRIMASK, r3
}
 801a1cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1ce:	f3ef 8310 	mrs	r3, PRIMASK
 801a1d2:	61bb      	str	r3, [r7, #24]
  return(result);
 801a1d4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a1d6:	2484      	movs	r4, #132	@ 0x84
 801a1d8:	193a      	adds	r2, r7, r4
 801a1da:	6013      	str	r3, [r2, #0]
 801a1dc:	2301      	movs	r3, #1
 801a1de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1e0:	69fb      	ldr	r3, [r7, #28]
 801a1e2:	f383 8810 	msr	PRIMASK, r3
}
 801a1e6:	46c0      	nop			@ (mov r8, r8)
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	689a      	ldr	r2, [r3, #8]
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	2101      	movs	r1, #1
 801a1f4:	438a      	bics	r2, r1
 801a1f6:	609a      	str	r2, [r3, #8]
 801a1f8:	193b      	adds	r3, r7, r4
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1fe:	6a3b      	ldr	r3, [r7, #32]
 801a200:	f383 8810 	msr	PRIMASK, r3
}
 801a204:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2280      	movs	r2, #128	@ 0x80
 801a20a:	2120      	movs	r1, #32
 801a20c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	2200      	movs	r2, #0
 801a212:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	2200      	movs	r2, #0
 801a218:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a21a:	f3ef 8310 	mrs	r3, PRIMASK
 801a21e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a222:	2480      	movs	r4, #128	@ 0x80
 801a224:	193a      	adds	r2, r7, r4
 801a226:	6013      	str	r3, [r2, #0]
 801a228:	2301      	movs	r3, #1
 801a22a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a22e:	f383 8810 	msr	PRIMASK, r3
}
 801a232:	46c0      	nop			@ (mov r8, r8)
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681b      	ldr	r3, [r3, #0]
 801a238:	681a      	ldr	r2, [r3, #0]
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	2110      	movs	r1, #16
 801a240:	438a      	bics	r2, r1
 801a242:	601a      	str	r2, [r3, #0]
 801a244:	193b      	adds	r3, r7, r4
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a24c:	f383 8810 	msr	PRIMASK, r3
}
 801a250:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	2202      	movs	r2, #2
 801a256:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	22ac      	movs	r2, #172	@ 0xac
 801a25c:	589b      	ldr	r3, [r3, r2]
 801a25e:	183a      	adds	r2, r7, r0
 801a260:	8811      	ldrh	r1, [r2, #0]
 801a262:	687a      	ldr	r2, [r7, #4]
 801a264:	0010      	movs	r0, r2
 801a266:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a268:	e046      	b.n	801a2f8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801a26a:	23a4      	movs	r3, #164	@ 0xa4
 801a26c:	18fb      	adds	r3, r7, r3
 801a26e:	681a      	ldr	r2, [r3, #0]
 801a270:	2380      	movs	r3, #128	@ 0x80
 801a272:	035b      	lsls	r3, r3, #13
 801a274:	4013      	ands	r3, r2
 801a276:	d012      	beq.n	801a29e <HAL_UART_IRQHandler+0x56a>
 801a278:	239c      	movs	r3, #156	@ 0x9c
 801a27a:	18fb      	adds	r3, r7, r3
 801a27c:	681a      	ldr	r2, [r3, #0]
 801a27e:	2380      	movs	r3, #128	@ 0x80
 801a280:	03db      	lsls	r3, r3, #15
 801a282:	4013      	ands	r3, r2
 801a284:	d00b      	beq.n	801a29e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	2280      	movs	r2, #128	@ 0x80
 801a28c:	0352      	lsls	r2, r2, #13
 801a28e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	22a8      	movs	r2, #168	@ 0xa8
 801a294:	589b      	ldr	r3, [r3, r2]
 801a296:	687a      	ldr	r2, [r7, #4]
 801a298:	0010      	movs	r0, r2
 801a29a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a29c:	e02f      	b.n	801a2fe <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801a29e:	23a4      	movs	r3, #164	@ 0xa4
 801a2a0:	18fb      	adds	r3, r7, r3
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	2280      	movs	r2, #128	@ 0x80
 801a2a6:	4013      	ands	r3, r2
 801a2a8:	d00f      	beq.n	801a2ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801a2aa:	23a0      	movs	r3, #160	@ 0xa0
 801a2ac:	18fb      	adds	r3, r7, r3
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	2280      	movs	r2, #128	@ 0x80
 801a2b2:	4013      	ands	r3, r2
 801a2b4:	d009      	beq.n	801a2ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d01e      	beq.n	801a2fc <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a2c2:	687a      	ldr	r2, [r7, #4]
 801a2c4:	0010      	movs	r0, r2
 801a2c6:	4798      	blx	r3
    }
    return;
 801a2c8:	e018      	b.n	801a2fc <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801a2ca:	23a4      	movs	r3, #164	@ 0xa4
 801a2cc:	18fb      	adds	r3, r7, r3
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	2240      	movs	r2, #64	@ 0x40
 801a2d2:	4013      	ands	r3, r2
 801a2d4:	d013      	beq.n	801a2fe <HAL_UART_IRQHandler+0x5ca>
 801a2d6:	23a0      	movs	r3, #160	@ 0xa0
 801a2d8:	18fb      	adds	r3, r7, r3
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	2240      	movs	r2, #64	@ 0x40
 801a2de:	4013      	ands	r3, r2
 801a2e0:	d00d      	beq.n	801a2fe <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	0018      	movs	r0, r3
 801a2e6:	f001 f862 	bl	801b3ae <UART_EndTransmit_IT>
    return;
 801a2ea:	e008      	b.n	801a2fe <HAL_UART_IRQHandler+0x5ca>
      return;
 801a2ec:	46c0      	nop			@ (mov r8, r8)
 801a2ee:	e006      	b.n	801a2fe <HAL_UART_IRQHandler+0x5ca>
    return;
 801a2f0:	46c0      	nop			@ (mov r8, r8)
 801a2f2:	e004      	b.n	801a2fe <HAL_UART_IRQHandler+0x5ca>
      return;
 801a2f4:	46c0      	nop			@ (mov r8, r8)
 801a2f6:	e002      	b.n	801a2fe <HAL_UART_IRQHandler+0x5ca>
      return;
 801a2f8:	46c0      	nop			@ (mov r8, r8)
 801a2fa:	e000      	b.n	801a2fe <HAL_UART_IRQHandler+0x5ca>
    return;
 801a2fc:	46c0      	nop			@ (mov r8, r8)
  }

}
 801a2fe:	46bd      	mov	sp, r7
 801a300:	b02b      	add	sp, #172	@ 0xac
 801a302:	bd90      	pop	{r4, r7, pc}
 801a304:	fffffeff 	.word	0xfffffeff
 801a308:	fffffedf 	.word	0xfffffedf

0801a30c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b082      	sub	sp, #8
 801a310:	af00      	add	r7, sp, #0
 801a312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801a314:	46c0      	nop			@ (mov r8, r8)
 801a316:	46bd      	mov	sp, r7
 801a318:	b002      	add	sp, #8
 801a31a:	bd80      	pop	{r7, pc}

0801a31c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b082      	sub	sp, #8
 801a320:	af00      	add	r7, sp, #0
 801a322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801a324:	46c0      	nop			@ (mov r8, r8)
 801a326:	46bd      	mov	sp, r7
 801a328:	b002      	add	sp, #8
 801a32a:	bd80      	pop	{r7, pc}

0801a32c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b082      	sub	sp, #8
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801a334:	46c0      	nop			@ (mov r8, r8)
 801a336:	46bd      	mov	sp, r7
 801a338:	b002      	add	sp, #8
 801a33a:	bd80      	pop	{r7, pc}

0801a33c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801a344:	46c0      	nop			@ (mov r8, r8)
 801a346:	46bd      	mov	sp, r7
 801a348:	b002      	add	sp, #8
 801a34a:	bd80      	pop	{r7, pc}

0801a34c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b082      	sub	sp, #8
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801a354:	46c0      	nop			@ (mov r8, r8)
 801a356:	46bd      	mov	sp, r7
 801a358:	b002      	add	sp, #8
 801a35a:	bd80      	pop	{r7, pc}

0801a35c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b082      	sub	sp, #8
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801a364:	46c0      	nop			@ (mov r8, r8)
 801a366:	46bd      	mov	sp, r7
 801a368:	b002      	add	sp, #8
 801a36a:	bd80      	pop	{r7, pc}

0801a36c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b082      	sub	sp, #8
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
 801a374:	000a      	movs	r2, r1
 801a376:	1cbb      	adds	r3, r7, #2
 801a378:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a37a:	46c0      	nop			@ (mov r8, r8)
 801a37c:	46bd      	mov	sp, r7
 801a37e:	b002      	add	sp, #8
 801a380:	bd80      	pop	{r7, pc}
	...

0801a384 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801a384:	b580      	push	{r7, lr}
 801a386:	b082      	sub	sp, #8
 801a388:	af00      	add	r7, sp, #0
 801a38a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	2188      	movs	r1, #136	@ 0x88
 801a390:	4a14      	ldr	r2, [pc, #80]	@ (801a3e4 <UART_InitCallbacksToDefault+0x60>)
 801a392:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	218c      	movs	r1, #140	@ 0x8c
 801a398:	4a13      	ldr	r2, [pc, #76]	@ (801a3e8 <UART_InitCallbacksToDefault+0x64>)
 801a39a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	2190      	movs	r1, #144	@ 0x90
 801a3a0:	4a12      	ldr	r2, [pc, #72]	@ (801a3ec <UART_InitCallbacksToDefault+0x68>)
 801a3a2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	2194      	movs	r1, #148	@ 0x94
 801a3a8:	4a11      	ldr	r2, [pc, #68]	@ (801a3f0 <UART_InitCallbacksToDefault+0x6c>)
 801a3aa:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	2198      	movs	r1, #152	@ 0x98
 801a3b0:	4a10      	ldr	r2, [pc, #64]	@ (801a3f4 <UART_InitCallbacksToDefault+0x70>)
 801a3b2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	219c      	movs	r1, #156	@ 0x9c
 801a3b8:	4a0f      	ldr	r2, [pc, #60]	@ (801a3f8 <UART_InitCallbacksToDefault+0x74>)
 801a3ba:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	21a0      	movs	r1, #160	@ 0xa0
 801a3c0:	4a0e      	ldr	r2, [pc, #56]	@ (801a3fc <UART_InitCallbacksToDefault+0x78>)
 801a3c2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	21a4      	movs	r1, #164	@ 0xa4
 801a3c8:	4a0d      	ldr	r2, [pc, #52]	@ (801a400 <UART_InitCallbacksToDefault+0x7c>)
 801a3ca:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	21a8      	movs	r1, #168	@ 0xa8
 801a3d0:	4a0c      	ldr	r2, [pc, #48]	@ (801a404 <UART_InitCallbacksToDefault+0x80>)
 801a3d2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	21ac      	movs	r1, #172	@ 0xac
 801a3d8:	4a0b      	ldr	r2, [pc, #44]	@ (801a408 <UART_InitCallbacksToDefault+0x84>)
 801a3da:	505a      	str	r2, [r3, r1]

}
 801a3dc:	46c0      	nop			@ (mov r8, r8)
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	b002      	add	sp, #8
 801a3e2:	bd80      	pop	{r7, pc}
 801a3e4:	0801a31d 	.word	0x0801a31d
 801a3e8:	0801a30d 	.word	0x0801a30d
 801a3ec:	0801a32d 	.word	0x0801a32d
 801a3f0:	0800a205 	.word	0x0800a205
 801a3f4:	08003c1d 	.word	0x08003c1d
 801a3f8:	0801a33d 	.word	0x0801a33d
 801a3fc:	0801a34d 	.word	0x0801a34d
 801a400:	0801a35d 	.word	0x0801a35d
 801a404:	0801b7a1 	.word	0x0801b7a1
 801a408:	0801a36d 	.word	0x0801a36d

0801a40c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a40c:	b5b0      	push	{r4, r5, r7, lr}
 801a40e:	b08e      	sub	sp, #56	@ 0x38
 801a410:	af00      	add	r7, sp, #0
 801a412:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a414:	231a      	movs	r3, #26
 801a416:	2218      	movs	r2, #24
 801a418:	189b      	adds	r3, r3, r2
 801a41a:	19db      	adds	r3, r3, r7
 801a41c:	2200      	movs	r2, #0
 801a41e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a420:	69fb      	ldr	r3, [r7, #28]
 801a422:	689a      	ldr	r2, [r3, #8]
 801a424:	69fb      	ldr	r3, [r7, #28]
 801a426:	691b      	ldr	r3, [r3, #16]
 801a428:	431a      	orrs	r2, r3
 801a42a:	69fb      	ldr	r3, [r7, #28]
 801a42c:	695b      	ldr	r3, [r3, #20]
 801a42e:	431a      	orrs	r2, r3
 801a430:	69fb      	ldr	r3, [r7, #28]
 801a432:	69db      	ldr	r3, [r3, #28]
 801a434:	4313      	orrs	r3, r2
 801a436:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a438:	69fb      	ldr	r3, [r7, #28]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	4ac3      	ldr	r2, [pc, #780]	@ (801a74c <UART_SetConfig+0x340>)
 801a440:	4013      	ands	r3, r2
 801a442:	0019      	movs	r1, r3
 801a444:	69fb      	ldr	r3, [r7, #28]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a44a:	430a      	orrs	r2, r1
 801a44c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a44e:	69fb      	ldr	r3, [r7, #28]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	685b      	ldr	r3, [r3, #4]
 801a454:	4abe      	ldr	r2, [pc, #760]	@ (801a750 <UART_SetConfig+0x344>)
 801a456:	4013      	ands	r3, r2
 801a458:	0019      	movs	r1, r3
 801a45a:	69fb      	ldr	r3, [r7, #28]
 801a45c:	68da      	ldr	r2, [r3, #12]
 801a45e:	69fb      	ldr	r3, [r7, #28]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	430a      	orrs	r2, r1
 801a464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a466:	69fb      	ldr	r3, [r7, #28]
 801a468:	699b      	ldr	r3, [r3, #24]
 801a46a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a46c:	69fb      	ldr	r3, [r7, #28]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	4ab8      	ldr	r2, [pc, #736]	@ (801a754 <UART_SetConfig+0x348>)
 801a472:	4293      	cmp	r3, r2
 801a474:	d004      	beq.n	801a480 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a476:	69fb      	ldr	r3, [r7, #28]
 801a478:	6a1b      	ldr	r3, [r3, #32]
 801a47a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a47c:	4313      	orrs	r3, r2
 801a47e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a480:	69fb      	ldr	r3, [r7, #28]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	689b      	ldr	r3, [r3, #8]
 801a486:	4ab4      	ldr	r2, [pc, #720]	@ (801a758 <UART_SetConfig+0x34c>)
 801a488:	4013      	ands	r3, r2
 801a48a:	0019      	movs	r1, r3
 801a48c:	69fb      	ldr	r3, [r7, #28]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a492:	430a      	orrs	r2, r1
 801a494:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a496:	69fb      	ldr	r3, [r7, #28]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	4ab0      	ldr	r2, [pc, #704]	@ (801a75c <UART_SetConfig+0x350>)
 801a49c:	4293      	cmp	r3, r2
 801a49e:	d131      	bne.n	801a504 <UART_SetConfig+0xf8>
 801a4a0:	4baf      	ldr	r3, [pc, #700]	@ (801a760 <UART_SetConfig+0x354>)
 801a4a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a4a4:	2203      	movs	r2, #3
 801a4a6:	4013      	ands	r3, r2
 801a4a8:	2b03      	cmp	r3, #3
 801a4aa:	d01d      	beq.n	801a4e8 <UART_SetConfig+0xdc>
 801a4ac:	d823      	bhi.n	801a4f6 <UART_SetConfig+0xea>
 801a4ae:	2b02      	cmp	r3, #2
 801a4b0:	d00c      	beq.n	801a4cc <UART_SetConfig+0xc0>
 801a4b2:	d820      	bhi.n	801a4f6 <UART_SetConfig+0xea>
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d002      	beq.n	801a4be <UART_SetConfig+0xb2>
 801a4b8:	2b01      	cmp	r3, #1
 801a4ba:	d00e      	beq.n	801a4da <UART_SetConfig+0xce>
 801a4bc:	e01b      	b.n	801a4f6 <UART_SetConfig+0xea>
 801a4be:	231b      	movs	r3, #27
 801a4c0:	2218      	movs	r2, #24
 801a4c2:	189b      	adds	r3, r3, r2
 801a4c4:	19db      	adds	r3, r3, r7
 801a4c6:	2201      	movs	r2, #1
 801a4c8:	701a      	strb	r2, [r3, #0]
 801a4ca:	e0b4      	b.n	801a636 <UART_SetConfig+0x22a>
 801a4cc:	231b      	movs	r3, #27
 801a4ce:	2218      	movs	r2, #24
 801a4d0:	189b      	adds	r3, r3, r2
 801a4d2:	19db      	adds	r3, r3, r7
 801a4d4:	2202      	movs	r2, #2
 801a4d6:	701a      	strb	r2, [r3, #0]
 801a4d8:	e0ad      	b.n	801a636 <UART_SetConfig+0x22a>
 801a4da:	231b      	movs	r3, #27
 801a4dc:	2218      	movs	r2, #24
 801a4de:	189b      	adds	r3, r3, r2
 801a4e0:	19db      	adds	r3, r3, r7
 801a4e2:	2204      	movs	r2, #4
 801a4e4:	701a      	strb	r2, [r3, #0]
 801a4e6:	e0a6      	b.n	801a636 <UART_SetConfig+0x22a>
 801a4e8:	231b      	movs	r3, #27
 801a4ea:	2218      	movs	r2, #24
 801a4ec:	189b      	adds	r3, r3, r2
 801a4ee:	19db      	adds	r3, r3, r7
 801a4f0:	2208      	movs	r2, #8
 801a4f2:	701a      	strb	r2, [r3, #0]
 801a4f4:	e09f      	b.n	801a636 <UART_SetConfig+0x22a>
 801a4f6:	231b      	movs	r3, #27
 801a4f8:	2218      	movs	r2, #24
 801a4fa:	189b      	adds	r3, r3, r2
 801a4fc:	19db      	adds	r3, r3, r7
 801a4fe:	2210      	movs	r2, #16
 801a500:	701a      	strb	r2, [r3, #0]
 801a502:	e098      	b.n	801a636 <UART_SetConfig+0x22a>
 801a504:	69fb      	ldr	r3, [r7, #28]
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	4a96      	ldr	r2, [pc, #600]	@ (801a764 <UART_SetConfig+0x358>)
 801a50a:	4293      	cmp	r3, r2
 801a50c:	d131      	bne.n	801a572 <UART_SetConfig+0x166>
 801a50e:	4b94      	ldr	r3, [pc, #592]	@ (801a760 <UART_SetConfig+0x354>)
 801a510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a512:	220c      	movs	r2, #12
 801a514:	4013      	ands	r3, r2
 801a516:	2b0c      	cmp	r3, #12
 801a518:	d01d      	beq.n	801a556 <UART_SetConfig+0x14a>
 801a51a:	d823      	bhi.n	801a564 <UART_SetConfig+0x158>
 801a51c:	2b08      	cmp	r3, #8
 801a51e:	d00c      	beq.n	801a53a <UART_SetConfig+0x12e>
 801a520:	d820      	bhi.n	801a564 <UART_SetConfig+0x158>
 801a522:	2b00      	cmp	r3, #0
 801a524:	d002      	beq.n	801a52c <UART_SetConfig+0x120>
 801a526:	2b04      	cmp	r3, #4
 801a528:	d00e      	beq.n	801a548 <UART_SetConfig+0x13c>
 801a52a:	e01b      	b.n	801a564 <UART_SetConfig+0x158>
 801a52c:	231b      	movs	r3, #27
 801a52e:	2218      	movs	r2, #24
 801a530:	189b      	adds	r3, r3, r2
 801a532:	19db      	adds	r3, r3, r7
 801a534:	2200      	movs	r2, #0
 801a536:	701a      	strb	r2, [r3, #0]
 801a538:	e07d      	b.n	801a636 <UART_SetConfig+0x22a>
 801a53a:	231b      	movs	r3, #27
 801a53c:	2218      	movs	r2, #24
 801a53e:	189b      	adds	r3, r3, r2
 801a540:	19db      	adds	r3, r3, r7
 801a542:	2202      	movs	r2, #2
 801a544:	701a      	strb	r2, [r3, #0]
 801a546:	e076      	b.n	801a636 <UART_SetConfig+0x22a>
 801a548:	231b      	movs	r3, #27
 801a54a:	2218      	movs	r2, #24
 801a54c:	189b      	adds	r3, r3, r2
 801a54e:	19db      	adds	r3, r3, r7
 801a550:	2204      	movs	r2, #4
 801a552:	701a      	strb	r2, [r3, #0]
 801a554:	e06f      	b.n	801a636 <UART_SetConfig+0x22a>
 801a556:	231b      	movs	r3, #27
 801a558:	2218      	movs	r2, #24
 801a55a:	189b      	adds	r3, r3, r2
 801a55c:	19db      	adds	r3, r3, r7
 801a55e:	2208      	movs	r2, #8
 801a560:	701a      	strb	r2, [r3, #0]
 801a562:	e068      	b.n	801a636 <UART_SetConfig+0x22a>
 801a564:	231b      	movs	r3, #27
 801a566:	2218      	movs	r2, #24
 801a568:	189b      	adds	r3, r3, r2
 801a56a:	19db      	adds	r3, r3, r7
 801a56c:	2210      	movs	r2, #16
 801a56e:	701a      	strb	r2, [r3, #0]
 801a570:	e061      	b.n	801a636 <UART_SetConfig+0x22a>
 801a572:	69fb      	ldr	r3, [r7, #28]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	4a7c      	ldr	r2, [pc, #496]	@ (801a768 <UART_SetConfig+0x35c>)
 801a578:	4293      	cmp	r3, r2
 801a57a:	d106      	bne.n	801a58a <UART_SetConfig+0x17e>
 801a57c:	231b      	movs	r3, #27
 801a57e:	2218      	movs	r2, #24
 801a580:	189b      	adds	r3, r3, r2
 801a582:	19db      	adds	r3, r3, r7
 801a584:	2200      	movs	r2, #0
 801a586:	701a      	strb	r2, [r3, #0]
 801a588:	e055      	b.n	801a636 <UART_SetConfig+0x22a>
 801a58a:	69fb      	ldr	r3, [r7, #28]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	4a77      	ldr	r2, [pc, #476]	@ (801a76c <UART_SetConfig+0x360>)
 801a590:	4293      	cmp	r3, r2
 801a592:	d106      	bne.n	801a5a2 <UART_SetConfig+0x196>
 801a594:	231b      	movs	r3, #27
 801a596:	2218      	movs	r2, #24
 801a598:	189b      	adds	r3, r3, r2
 801a59a:	19db      	adds	r3, r3, r7
 801a59c:	2200      	movs	r2, #0
 801a59e:	701a      	strb	r2, [r3, #0]
 801a5a0:	e049      	b.n	801a636 <UART_SetConfig+0x22a>
 801a5a2:	69fb      	ldr	r3, [r7, #28]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	4a6b      	ldr	r2, [pc, #428]	@ (801a754 <UART_SetConfig+0x348>)
 801a5a8:	4293      	cmp	r3, r2
 801a5aa:	d13e      	bne.n	801a62a <UART_SetConfig+0x21e>
 801a5ac:	4b6c      	ldr	r3, [pc, #432]	@ (801a760 <UART_SetConfig+0x354>)
 801a5ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a5b0:	23c0      	movs	r3, #192	@ 0xc0
 801a5b2:	011b      	lsls	r3, r3, #4
 801a5b4:	4013      	ands	r3, r2
 801a5b6:	22c0      	movs	r2, #192	@ 0xc0
 801a5b8:	0112      	lsls	r2, r2, #4
 801a5ba:	4293      	cmp	r3, r2
 801a5bc:	d027      	beq.n	801a60e <UART_SetConfig+0x202>
 801a5be:	22c0      	movs	r2, #192	@ 0xc0
 801a5c0:	0112      	lsls	r2, r2, #4
 801a5c2:	4293      	cmp	r3, r2
 801a5c4:	d82a      	bhi.n	801a61c <UART_SetConfig+0x210>
 801a5c6:	2280      	movs	r2, #128	@ 0x80
 801a5c8:	0112      	lsls	r2, r2, #4
 801a5ca:	4293      	cmp	r3, r2
 801a5cc:	d011      	beq.n	801a5f2 <UART_SetConfig+0x1e6>
 801a5ce:	2280      	movs	r2, #128	@ 0x80
 801a5d0:	0112      	lsls	r2, r2, #4
 801a5d2:	4293      	cmp	r3, r2
 801a5d4:	d822      	bhi.n	801a61c <UART_SetConfig+0x210>
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d004      	beq.n	801a5e4 <UART_SetConfig+0x1d8>
 801a5da:	2280      	movs	r2, #128	@ 0x80
 801a5dc:	00d2      	lsls	r2, r2, #3
 801a5de:	4293      	cmp	r3, r2
 801a5e0:	d00e      	beq.n	801a600 <UART_SetConfig+0x1f4>
 801a5e2:	e01b      	b.n	801a61c <UART_SetConfig+0x210>
 801a5e4:	231b      	movs	r3, #27
 801a5e6:	2218      	movs	r2, #24
 801a5e8:	189b      	adds	r3, r3, r2
 801a5ea:	19db      	adds	r3, r3, r7
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	701a      	strb	r2, [r3, #0]
 801a5f0:	e021      	b.n	801a636 <UART_SetConfig+0x22a>
 801a5f2:	231b      	movs	r3, #27
 801a5f4:	2218      	movs	r2, #24
 801a5f6:	189b      	adds	r3, r3, r2
 801a5f8:	19db      	adds	r3, r3, r7
 801a5fa:	2202      	movs	r2, #2
 801a5fc:	701a      	strb	r2, [r3, #0]
 801a5fe:	e01a      	b.n	801a636 <UART_SetConfig+0x22a>
 801a600:	231b      	movs	r3, #27
 801a602:	2218      	movs	r2, #24
 801a604:	189b      	adds	r3, r3, r2
 801a606:	19db      	adds	r3, r3, r7
 801a608:	2204      	movs	r2, #4
 801a60a:	701a      	strb	r2, [r3, #0]
 801a60c:	e013      	b.n	801a636 <UART_SetConfig+0x22a>
 801a60e:	231b      	movs	r3, #27
 801a610:	2218      	movs	r2, #24
 801a612:	189b      	adds	r3, r3, r2
 801a614:	19db      	adds	r3, r3, r7
 801a616:	2208      	movs	r2, #8
 801a618:	701a      	strb	r2, [r3, #0]
 801a61a:	e00c      	b.n	801a636 <UART_SetConfig+0x22a>
 801a61c:	231b      	movs	r3, #27
 801a61e:	2218      	movs	r2, #24
 801a620:	189b      	adds	r3, r3, r2
 801a622:	19db      	adds	r3, r3, r7
 801a624:	2210      	movs	r2, #16
 801a626:	701a      	strb	r2, [r3, #0]
 801a628:	e005      	b.n	801a636 <UART_SetConfig+0x22a>
 801a62a:	231b      	movs	r3, #27
 801a62c:	2218      	movs	r2, #24
 801a62e:	189b      	adds	r3, r3, r2
 801a630:	19db      	adds	r3, r3, r7
 801a632:	2210      	movs	r2, #16
 801a634:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a636:	69fb      	ldr	r3, [r7, #28]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	4a46      	ldr	r2, [pc, #280]	@ (801a754 <UART_SetConfig+0x348>)
 801a63c:	4293      	cmp	r3, r2
 801a63e:	d000      	beq.n	801a642 <UART_SetConfig+0x236>
 801a640:	e09a      	b.n	801a778 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a642:	231b      	movs	r3, #27
 801a644:	2218      	movs	r2, #24
 801a646:	189b      	adds	r3, r3, r2
 801a648:	19db      	adds	r3, r3, r7
 801a64a:	781b      	ldrb	r3, [r3, #0]
 801a64c:	2b08      	cmp	r3, #8
 801a64e:	d01d      	beq.n	801a68c <UART_SetConfig+0x280>
 801a650:	dc20      	bgt.n	801a694 <UART_SetConfig+0x288>
 801a652:	2b04      	cmp	r3, #4
 801a654:	d015      	beq.n	801a682 <UART_SetConfig+0x276>
 801a656:	dc1d      	bgt.n	801a694 <UART_SetConfig+0x288>
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d002      	beq.n	801a662 <UART_SetConfig+0x256>
 801a65c:	2b02      	cmp	r3, #2
 801a65e:	d005      	beq.n	801a66c <UART_SetConfig+0x260>
 801a660:	e018      	b.n	801a694 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a662:	f7fd fe4b 	bl	80182fc <HAL_RCC_GetPCLK1Freq>
 801a666:	0003      	movs	r3, r0
 801a668:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a66a:	e01c      	b.n	801a6a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a66c:	4b3c      	ldr	r3, [pc, #240]	@ (801a760 <UART_SetConfig+0x354>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	2210      	movs	r2, #16
 801a672:	4013      	ands	r3, r2
 801a674:	d002      	beq.n	801a67c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a676:	4b3e      	ldr	r3, [pc, #248]	@ (801a770 <UART_SetConfig+0x364>)
 801a678:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a67a:	e014      	b.n	801a6a6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801a67c:	4b3d      	ldr	r3, [pc, #244]	@ (801a774 <UART_SetConfig+0x368>)
 801a67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a680:	e011      	b.n	801a6a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a682:	f7fd fd8b 	bl	801819c <HAL_RCC_GetSysClockFreq>
 801a686:	0003      	movs	r3, r0
 801a688:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a68a:	e00c      	b.n	801a6a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a68c:	2380      	movs	r3, #128	@ 0x80
 801a68e:	021b      	lsls	r3, r3, #8
 801a690:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a692:	e008      	b.n	801a6a6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801a694:	2300      	movs	r3, #0
 801a696:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a698:	231a      	movs	r3, #26
 801a69a:	2218      	movs	r2, #24
 801a69c:	189b      	adds	r3, r3, r2
 801a69e:	19db      	adds	r3, r3, r7
 801a6a0:	2201      	movs	r2, #1
 801a6a2:	701a      	strb	r2, [r3, #0]
        break;
 801a6a4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d100      	bne.n	801a6ae <UART_SetConfig+0x2a2>
 801a6ac:	e133      	b.n	801a916 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a6ae:	69fb      	ldr	r3, [r7, #28]
 801a6b0:	685a      	ldr	r2, [r3, #4]
 801a6b2:	0013      	movs	r3, r2
 801a6b4:	005b      	lsls	r3, r3, #1
 801a6b6:	189b      	adds	r3, r3, r2
 801a6b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a6ba:	429a      	cmp	r2, r3
 801a6bc:	d305      	bcc.n	801a6ca <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801a6be:	69fb      	ldr	r3, [r7, #28]
 801a6c0:	685b      	ldr	r3, [r3, #4]
 801a6c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a6c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a6c6:	429a      	cmp	r2, r3
 801a6c8:	d906      	bls.n	801a6d8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801a6ca:	231a      	movs	r3, #26
 801a6cc:	2218      	movs	r2, #24
 801a6ce:	189b      	adds	r3, r3, r2
 801a6d0:	19db      	adds	r3, r3, r7
 801a6d2:	2201      	movs	r2, #1
 801a6d4:	701a      	strb	r2, [r3, #0]
 801a6d6:	e11e      	b.n	801a916 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801a6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6da:	613b      	str	r3, [r7, #16]
 801a6dc:	2300      	movs	r3, #0
 801a6de:	617b      	str	r3, [r7, #20]
 801a6e0:	6939      	ldr	r1, [r7, #16]
 801a6e2:	697a      	ldr	r2, [r7, #20]
 801a6e4:	000b      	movs	r3, r1
 801a6e6:	0e1b      	lsrs	r3, r3, #24
 801a6e8:	0010      	movs	r0, r2
 801a6ea:	0205      	lsls	r5, r0, #8
 801a6ec:	431d      	orrs	r5, r3
 801a6ee:	000b      	movs	r3, r1
 801a6f0:	021c      	lsls	r4, r3, #8
 801a6f2:	69fb      	ldr	r3, [r7, #28]
 801a6f4:	685b      	ldr	r3, [r3, #4]
 801a6f6:	085b      	lsrs	r3, r3, #1
 801a6f8:	60bb      	str	r3, [r7, #8]
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	60fb      	str	r3, [r7, #12]
 801a6fe:	68b8      	ldr	r0, [r7, #8]
 801a700:	68f9      	ldr	r1, [r7, #12]
 801a702:	1900      	adds	r0, r0, r4
 801a704:	4169      	adcs	r1, r5
 801a706:	69fb      	ldr	r3, [r7, #28]
 801a708:	685b      	ldr	r3, [r3, #4]
 801a70a:	603b      	str	r3, [r7, #0]
 801a70c:	2300      	movs	r3, #0
 801a70e:	607b      	str	r3, [r7, #4]
 801a710:	683a      	ldr	r2, [r7, #0]
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	f7e5 ff34 	bl	8000580 <__aeabi_uldivmod>
 801a718:	0002      	movs	r2, r0
 801a71a:	000b      	movs	r3, r1
 801a71c:	0013      	movs	r3, r2
 801a71e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a722:	23c0      	movs	r3, #192	@ 0xc0
 801a724:	009b      	lsls	r3, r3, #2
 801a726:	429a      	cmp	r2, r3
 801a728:	d309      	bcc.n	801a73e <UART_SetConfig+0x332>
 801a72a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a72c:	2380      	movs	r3, #128	@ 0x80
 801a72e:	035b      	lsls	r3, r3, #13
 801a730:	429a      	cmp	r2, r3
 801a732:	d204      	bcs.n	801a73e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801a734:	69fb      	ldr	r3, [r7, #28]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a73a:	60da      	str	r2, [r3, #12]
 801a73c:	e0eb      	b.n	801a916 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801a73e:	231a      	movs	r3, #26
 801a740:	2218      	movs	r2, #24
 801a742:	189b      	adds	r3, r3, r2
 801a744:	19db      	adds	r3, r3, r7
 801a746:	2201      	movs	r2, #1
 801a748:	701a      	strb	r2, [r3, #0]
 801a74a:	e0e4      	b.n	801a916 <UART_SetConfig+0x50a>
 801a74c:	efff69f3 	.word	0xefff69f3
 801a750:	ffffcfff 	.word	0xffffcfff
 801a754:	40004800 	.word	0x40004800
 801a758:	fffff4ff 	.word	0xfffff4ff
 801a75c:	40013800 	.word	0x40013800
 801a760:	40021000 	.word	0x40021000
 801a764:	40004400 	.word	0x40004400
 801a768:	40004c00 	.word	0x40004c00
 801a76c:	40005000 	.word	0x40005000
 801a770:	003d0900 	.word	0x003d0900
 801a774:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a778:	69fb      	ldr	r3, [r7, #28]
 801a77a:	69da      	ldr	r2, [r3, #28]
 801a77c:	2380      	movs	r3, #128	@ 0x80
 801a77e:	021b      	lsls	r3, r3, #8
 801a780:	429a      	cmp	r2, r3
 801a782:	d000      	beq.n	801a786 <UART_SetConfig+0x37a>
 801a784:	e070      	b.n	801a868 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801a786:	231b      	movs	r3, #27
 801a788:	2218      	movs	r2, #24
 801a78a:	189b      	adds	r3, r3, r2
 801a78c:	19db      	adds	r3, r3, r7
 801a78e:	781b      	ldrb	r3, [r3, #0]
 801a790:	2b08      	cmp	r3, #8
 801a792:	d822      	bhi.n	801a7da <UART_SetConfig+0x3ce>
 801a794:	009a      	lsls	r2, r3, #2
 801a796:	4b67      	ldr	r3, [pc, #412]	@ (801a934 <UART_SetConfig+0x528>)
 801a798:	18d3      	adds	r3, r2, r3
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a79e:	f7fd fdad 	bl	80182fc <HAL_RCC_GetPCLK1Freq>
 801a7a2:	0003      	movs	r3, r0
 801a7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a7a6:	e021      	b.n	801a7ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a7a8:	f7fd fdbe 	bl	8018328 <HAL_RCC_GetPCLK2Freq>
 801a7ac:	0003      	movs	r3, r0
 801a7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a7b0:	e01c      	b.n	801a7ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a7b2:	4b61      	ldr	r3, [pc, #388]	@ (801a938 <UART_SetConfig+0x52c>)
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	2210      	movs	r2, #16
 801a7b8:	4013      	ands	r3, r2
 801a7ba:	d002      	beq.n	801a7c2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a7bc:	4b5f      	ldr	r3, [pc, #380]	@ (801a93c <UART_SetConfig+0x530>)
 801a7be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a7c0:	e014      	b.n	801a7ec <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801a7c2:	4b5f      	ldr	r3, [pc, #380]	@ (801a940 <UART_SetConfig+0x534>)
 801a7c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a7c6:	e011      	b.n	801a7ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a7c8:	f7fd fce8 	bl	801819c <HAL_RCC_GetSysClockFreq>
 801a7cc:	0003      	movs	r3, r0
 801a7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a7d0:	e00c      	b.n	801a7ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a7d2:	2380      	movs	r3, #128	@ 0x80
 801a7d4:	021b      	lsls	r3, r3, #8
 801a7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a7d8:	e008      	b.n	801a7ec <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801a7da:	2300      	movs	r3, #0
 801a7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a7de:	231a      	movs	r3, #26
 801a7e0:	2218      	movs	r2, #24
 801a7e2:	189b      	adds	r3, r3, r2
 801a7e4:	19db      	adds	r3, r3, r7
 801a7e6:	2201      	movs	r2, #1
 801a7e8:	701a      	strb	r2, [r3, #0]
        break;
 801a7ea:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d100      	bne.n	801a7f4 <UART_SetConfig+0x3e8>
 801a7f2:	e090      	b.n	801a916 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801a7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7f6:	005a      	lsls	r2, r3, #1
 801a7f8:	69fb      	ldr	r3, [r7, #28]
 801a7fa:	685b      	ldr	r3, [r3, #4]
 801a7fc:	085b      	lsrs	r3, r3, #1
 801a7fe:	18d2      	adds	r2, r2, r3
 801a800:	69fb      	ldr	r3, [r7, #28]
 801a802:	685b      	ldr	r3, [r3, #4]
 801a804:	0019      	movs	r1, r3
 801a806:	0010      	movs	r0, r2
 801a808:	f7e5 fccc 	bl	80001a4 <__udivsi3>
 801a80c:	0003      	movs	r3, r0
 801a80e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a812:	2b0f      	cmp	r3, #15
 801a814:	d921      	bls.n	801a85a <UART_SetConfig+0x44e>
 801a816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a818:	2380      	movs	r3, #128	@ 0x80
 801a81a:	025b      	lsls	r3, r3, #9
 801a81c:	429a      	cmp	r2, r3
 801a81e:	d21c      	bcs.n	801a85a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a822:	b29a      	uxth	r2, r3
 801a824:	200e      	movs	r0, #14
 801a826:	2418      	movs	r4, #24
 801a828:	1903      	adds	r3, r0, r4
 801a82a:	19db      	adds	r3, r3, r7
 801a82c:	210f      	movs	r1, #15
 801a82e:	438a      	bics	r2, r1
 801a830:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a834:	085b      	lsrs	r3, r3, #1
 801a836:	b29b      	uxth	r3, r3
 801a838:	2207      	movs	r2, #7
 801a83a:	4013      	ands	r3, r2
 801a83c:	b299      	uxth	r1, r3
 801a83e:	1903      	adds	r3, r0, r4
 801a840:	19db      	adds	r3, r3, r7
 801a842:	1902      	adds	r2, r0, r4
 801a844:	19d2      	adds	r2, r2, r7
 801a846:	8812      	ldrh	r2, [r2, #0]
 801a848:	430a      	orrs	r2, r1
 801a84a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801a84c:	69fb      	ldr	r3, [r7, #28]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	1902      	adds	r2, r0, r4
 801a852:	19d2      	adds	r2, r2, r7
 801a854:	8812      	ldrh	r2, [r2, #0]
 801a856:	60da      	str	r2, [r3, #12]
 801a858:	e05d      	b.n	801a916 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801a85a:	231a      	movs	r3, #26
 801a85c:	2218      	movs	r2, #24
 801a85e:	189b      	adds	r3, r3, r2
 801a860:	19db      	adds	r3, r3, r7
 801a862:	2201      	movs	r2, #1
 801a864:	701a      	strb	r2, [r3, #0]
 801a866:	e056      	b.n	801a916 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801a868:	231b      	movs	r3, #27
 801a86a:	2218      	movs	r2, #24
 801a86c:	189b      	adds	r3, r3, r2
 801a86e:	19db      	adds	r3, r3, r7
 801a870:	781b      	ldrb	r3, [r3, #0]
 801a872:	2b08      	cmp	r3, #8
 801a874:	d822      	bhi.n	801a8bc <UART_SetConfig+0x4b0>
 801a876:	009a      	lsls	r2, r3, #2
 801a878:	4b32      	ldr	r3, [pc, #200]	@ (801a944 <UART_SetConfig+0x538>)
 801a87a:	18d3      	adds	r3, r2, r3
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a880:	f7fd fd3c 	bl	80182fc <HAL_RCC_GetPCLK1Freq>
 801a884:	0003      	movs	r3, r0
 801a886:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a888:	e021      	b.n	801a8ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a88a:	f7fd fd4d 	bl	8018328 <HAL_RCC_GetPCLK2Freq>
 801a88e:	0003      	movs	r3, r0
 801a890:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a892:	e01c      	b.n	801a8ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a894:	4b28      	ldr	r3, [pc, #160]	@ (801a938 <UART_SetConfig+0x52c>)
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	2210      	movs	r2, #16
 801a89a:	4013      	ands	r3, r2
 801a89c:	d002      	beq.n	801a8a4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a89e:	4b27      	ldr	r3, [pc, #156]	@ (801a93c <UART_SetConfig+0x530>)
 801a8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a8a2:	e014      	b.n	801a8ce <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801a8a4:	4b26      	ldr	r3, [pc, #152]	@ (801a940 <UART_SetConfig+0x534>)
 801a8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8a8:	e011      	b.n	801a8ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a8aa:	f7fd fc77 	bl	801819c <HAL_RCC_GetSysClockFreq>
 801a8ae:	0003      	movs	r3, r0
 801a8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8b2:	e00c      	b.n	801a8ce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a8b4:	2380      	movs	r3, #128	@ 0x80
 801a8b6:	021b      	lsls	r3, r3, #8
 801a8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8ba:	e008      	b.n	801a8ce <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801a8bc:	2300      	movs	r3, #0
 801a8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a8c0:	231a      	movs	r3, #26
 801a8c2:	2218      	movs	r2, #24
 801a8c4:	189b      	adds	r3, r3, r2
 801a8c6:	19db      	adds	r3, r3, r7
 801a8c8:	2201      	movs	r2, #1
 801a8ca:	701a      	strb	r2, [r3, #0]
        break;
 801a8cc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d020      	beq.n	801a916 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801a8d4:	69fb      	ldr	r3, [r7, #28]
 801a8d6:	685b      	ldr	r3, [r3, #4]
 801a8d8:	085a      	lsrs	r2, r3, #1
 801a8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8dc:	18d2      	adds	r2, r2, r3
 801a8de:	69fb      	ldr	r3, [r7, #28]
 801a8e0:	685b      	ldr	r3, [r3, #4]
 801a8e2:	0019      	movs	r1, r3
 801a8e4:	0010      	movs	r0, r2
 801a8e6:	f7e5 fc5d 	bl	80001a4 <__udivsi3>
 801a8ea:	0003      	movs	r3, r0
 801a8ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8f0:	2b0f      	cmp	r3, #15
 801a8f2:	d90a      	bls.n	801a90a <UART_SetConfig+0x4fe>
 801a8f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a8f6:	2380      	movs	r3, #128	@ 0x80
 801a8f8:	025b      	lsls	r3, r3, #9
 801a8fa:	429a      	cmp	r2, r3
 801a8fc:	d205      	bcs.n	801a90a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a900:	b29a      	uxth	r2, r3
 801a902:	69fb      	ldr	r3, [r7, #28]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	60da      	str	r2, [r3, #12]
 801a908:	e005      	b.n	801a916 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801a90a:	231a      	movs	r3, #26
 801a90c:	2218      	movs	r2, #24
 801a90e:	189b      	adds	r3, r3, r2
 801a910:	19db      	adds	r3, r3, r7
 801a912:	2201      	movs	r2, #1
 801a914:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a916:	69fb      	ldr	r3, [r7, #28]
 801a918:	2200      	movs	r2, #0
 801a91a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801a91c:	69fb      	ldr	r3, [r7, #28]
 801a91e:	2200      	movs	r2, #0
 801a920:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801a922:	231a      	movs	r3, #26
 801a924:	2218      	movs	r2, #24
 801a926:	189b      	adds	r3, r3, r2
 801a928:	19db      	adds	r3, r3, r7
 801a92a:	781b      	ldrb	r3, [r3, #0]
}
 801a92c:	0018      	movs	r0, r3
 801a92e:	46bd      	mov	sp, r7
 801a930:	b00e      	add	sp, #56	@ 0x38
 801a932:	bdb0      	pop	{r4, r5, r7, pc}
 801a934:	08028de4 	.word	0x08028de4
 801a938:	40021000 	.word	0x40021000
 801a93c:	003d0900 	.word	0x003d0900
 801a940:	00f42400 	.word	0x00f42400
 801a944:	08028e08 	.word	0x08028e08

0801a948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b082      	sub	sp, #8
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a954:	2201      	movs	r2, #1
 801a956:	4013      	ands	r3, r2
 801a958:	d00b      	beq.n	801a972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	685b      	ldr	r3, [r3, #4]
 801a960:	4a4a      	ldr	r2, [pc, #296]	@ (801aa8c <UART_AdvFeatureConfig+0x144>)
 801a962:	4013      	ands	r3, r2
 801a964:	0019      	movs	r1, r3
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	430a      	orrs	r2, r1
 801a970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a976:	2202      	movs	r2, #2
 801a978:	4013      	ands	r3, r2
 801a97a:	d00b      	beq.n	801a994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	685b      	ldr	r3, [r3, #4]
 801a982:	4a43      	ldr	r2, [pc, #268]	@ (801aa90 <UART_AdvFeatureConfig+0x148>)
 801a984:	4013      	ands	r3, r2
 801a986:	0019      	movs	r1, r3
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	430a      	orrs	r2, r1
 801a992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a998:	2204      	movs	r2, #4
 801a99a:	4013      	ands	r3, r2
 801a99c:	d00b      	beq.n	801a9b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	685b      	ldr	r3, [r3, #4]
 801a9a4:	4a3b      	ldr	r2, [pc, #236]	@ (801aa94 <UART_AdvFeatureConfig+0x14c>)
 801a9a6:	4013      	ands	r3, r2
 801a9a8:	0019      	movs	r1, r3
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	430a      	orrs	r2, r1
 801a9b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9ba:	2208      	movs	r2, #8
 801a9bc:	4013      	ands	r3, r2
 801a9be:	d00b      	beq.n	801a9d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	685b      	ldr	r3, [r3, #4]
 801a9c6:	4a34      	ldr	r2, [pc, #208]	@ (801aa98 <UART_AdvFeatureConfig+0x150>)
 801a9c8:	4013      	ands	r3, r2
 801a9ca:	0019      	movs	r1, r3
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	430a      	orrs	r2, r1
 801a9d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9dc:	2210      	movs	r2, #16
 801a9de:	4013      	ands	r3, r2
 801a9e0:	d00b      	beq.n	801a9fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	689b      	ldr	r3, [r3, #8]
 801a9e8:	4a2c      	ldr	r2, [pc, #176]	@ (801aa9c <UART_AdvFeatureConfig+0x154>)
 801a9ea:	4013      	ands	r3, r2
 801a9ec:	0019      	movs	r1, r3
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	430a      	orrs	r2, r1
 801a9f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9fe:	2220      	movs	r2, #32
 801aa00:	4013      	ands	r3, r2
 801aa02:	d00b      	beq.n	801aa1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	689b      	ldr	r3, [r3, #8]
 801aa0a:	4a25      	ldr	r2, [pc, #148]	@ (801aaa0 <UART_AdvFeatureConfig+0x158>)
 801aa0c:	4013      	ands	r3, r2
 801aa0e:	0019      	movs	r1, r3
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	430a      	orrs	r2, r1
 801aa1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa20:	2240      	movs	r2, #64	@ 0x40
 801aa22:	4013      	ands	r3, r2
 801aa24:	d01d      	beq.n	801aa62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	685b      	ldr	r3, [r3, #4]
 801aa2c:	4a1d      	ldr	r2, [pc, #116]	@ (801aaa4 <UART_AdvFeatureConfig+0x15c>)
 801aa2e:	4013      	ands	r3, r2
 801aa30:	0019      	movs	r1, r3
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	430a      	orrs	r2, r1
 801aa3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801aa42:	2380      	movs	r3, #128	@ 0x80
 801aa44:	035b      	lsls	r3, r3, #13
 801aa46:	429a      	cmp	r2, r3
 801aa48:	d10b      	bne.n	801aa62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	685b      	ldr	r3, [r3, #4]
 801aa50:	4a15      	ldr	r2, [pc, #84]	@ (801aaa8 <UART_AdvFeatureConfig+0x160>)
 801aa52:	4013      	ands	r3, r2
 801aa54:	0019      	movs	r1, r3
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	430a      	orrs	r2, r1
 801aa60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa66:	2280      	movs	r2, #128	@ 0x80
 801aa68:	4013      	ands	r3, r2
 801aa6a:	d00b      	beq.n	801aa84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	685b      	ldr	r3, [r3, #4]
 801aa72:	4a0e      	ldr	r2, [pc, #56]	@ (801aaac <UART_AdvFeatureConfig+0x164>)
 801aa74:	4013      	ands	r3, r2
 801aa76:	0019      	movs	r1, r3
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	430a      	orrs	r2, r1
 801aa82:	605a      	str	r2, [r3, #4]
  }
}
 801aa84:	46c0      	nop			@ (mov r8, r8)
 801aa86:	46bd      	mov	sp, r7
 801aa88:	b002      	add	sp, #8
 801aa8a:	bd80      	pop	{r7, pc}
 801aa8c:	fffdffff 	.word	0xfffdffff
 801aa90:	fffeffff 	.word	0xfffeffff
 801aa94:	fffbffff 	.word	0xfffbffff
 801aa98:	ffff7fff 	.word	0xffff7fff
 801aa9c:	ffffefff 	.word	0xffffefff
 801aaa0:	ffffdfff 	.word	0xffffdfff
 801aaa4:	ffefffff 	.word	0xffefffff
 801aaa8:	ff9fffff 	.word	0xff9fffff
 801aaac:	fff7ffff 	.word	0xfff7ffff

0801aab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b092      	sub	sp, #72	@ 0x48
 801aab4:	af02      	add	r7, sp, #8
 801aab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	2284      	movs	r2, #132	@ 0x84
 801aabc:	2100      	movs	r1, #0
 801aabe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801aac0:	f7f6 fa88 	bl	8010fd4 <HAL_GetTick>
 801aac4:	0003      	movs	r3, r0
 801aac6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	2208      	movs	r2, #8
 801aad0:	4013      	ands	r3, r2
 801aad2:	2b08      	cmp	r3, #8
 801aad4:	d12c      	bne.n	801ab30 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801aad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aad8:	2280      	movs	r2, #128	@ 0x80
 801aada:	0391      	lsls	r1, r2, #14
 801aadc:	6878      	ldr	r0, [r7, #4]
 801aade:	4a46      	ldr	r2, [pc, #280]	@ (801abf8 <UART_CheckIdleState+0x148>)
 801aae0:	9200      	str	r2, [sp, #0]
 801aae2:	2200      	movs	r2, #0
 801aae4:	f000 f88c 	bl	801ac00 <UART_WaitOnFlagUntilTimeout>
 801aae8:	1e03      	subs	r3, r0, #0
 801aaea:	d021      	beq.n	801ab30 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aaec:	f3ef 8310 	mrs	r3, PRIMASK
 801aaf0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801aaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801aaf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aaf6:	2301      	movs	r3, #1
 801aaf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aafc:	f383 8810 	msr	PRIMASK, r3
}
 801ab00:	46c0      	nop			@ (mov r8, r8)
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	681a      	ldr	r2, [r3, #0]
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	2180      	movs	r1, #128	@ 0x80
 801ab0e:	438a      	bics	r2, r1
 801ab10:	601a      	str	r2, [r3, #0]
 801ab12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab18:	f383 8810 	msr	PRIMASK, r3
}
 801ab1c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	2220      	movs	r2, #32
 801ab22:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	2278      	movs	r2, #120	@ 0x78
 801ab28:	2100      	movs	r1, #0
 801ab2a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ab2c:	2303      	movs	r3, #3
 801ab2e:	e05f      	b.n	801abf0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	2204      	movs	r2, #4
 801ab38:	4013      	ands	r3, r2
 801ab3a:	2b04      	cmp	r3, #4
 801ab3c:	d146      	bne.n	801abcc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ab3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ab40:	2280      	movs	r2, #128	@ 0x80
 801ab42:	03d1      	lsls	r1, r2, #15
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	4a2c      	ldr	r2, [pc, #176]	@ (801abf8 <UART_CheckIdleState+0x148>)
 801ab48:	9200      	str	r2, [sp, #0]
 801ab4a:	2200      	movs	r2, #0
 801ab4c:	f000 f858 	bl	801ac00 <UART_WaitOnFlagUntilTimeout>
 801ab50:	1e03      	subs	r3, r0, #0
 801ab52:	d03b      	beq.n	801abcc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab54:	f3ef 8310 	mrs	r3, PRIMASK
 801ab58:	60fb      	str	r3, [r7, #12]
  return(result);
 801ab5a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ab5e:	2301      	movs	r3, #1
 801ab60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab62:	693b      	ldr	r3, [r7, #16]
 801ab64:	f383 8810 	msr	PRIMASK, r3
}
 801ab68:	46c0      	nop			@ (mov r8, r8)
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	681a      	ldr	r2, [r3, #0]
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	4921      	ldr	r1, [pc, #132]	@ (801abfc <UART_CheckIdleState+0x14c>)
 801ab76:	400a      	ands	r2, r1
 801ab78:	601a      	str	r2, [r3, #0]
 801ab7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab7e:	697b      	ldr	r3, [r7, #20]
 801ab80:	f383 8810 	msr	PRIMASK, r3
}
 801ab84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab86:	f3ef 8310 	mrs	r3, PRIMASK
 801ab8a:	61bb      	str	r3, [r7, #24]
  return(result);
 801ab8c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ab8e:	633b      	str	r3, [r7, #48]	@ 0x30
 801ab90:	2301      	movs	r3, #1
 801ab92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab94:	69fb      	ldr	r3, [r7, #28]
 801ab96:	f383 8810 	msr	PRIMASK, r3
}
 801ab9a:	46c0      	nop			@ (mov r8, r8)
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	689a      	ldr	r2, [r3, #8]
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	2101      	movs	r1, #1
 801aba8:	438a      	bics	r2, r1
 801abaa:	609a      	str	r2, [r3, #8]
 801abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abb0:	6a3b      	ldr	r3, [r7, #32]
 801abb2:	f383 8810 	msr	PRIMASK, r3
}
 801abb6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	2280      	movs	r2, #128	@ 0x80
 801abbc:	2120      	movs	r1, #32
 801abbe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	2278      	movs	r2, #120	@ 0x78
 801abc4:	2100      	movs	r1, #0
 801abc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801abc8:	2303      	movs	r3, #3
 801abca:	e011      	b.n	801abf0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	2220      	movs	r2, #32
 801abd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	2280      	movs	r2, #128	@ 0x80
 801abd6:	2120      	movs	r1, #32
 801abd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	2200      	movs	r2, #0
 801abde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	2200      	movs	r2, #0
 801abe4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	2278      	movs	r2, #120	@ 0x78
 801abea:	2100      	movs	r1, #0
 801abec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801abee:	2300      	movs	r3, #0
}
 801abf0:	0018      	movs	r0, r3
 801abf2:	46bd      	mov	sp, r7
 801abf4:	b010      	add	sp, #64	@ 0x40
 801abf6:	bd80      	pop	{r7, pc}
 801abf8:	01ffffff 	.word	0x01ffffff
 801abfc:	fffffedf 	.word	0xfffffedf

0801ac00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ac00:	b580      	push	{r7, lr}
 801ac02:	b084      	sub	sp, #16
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	60f8      	str	r0, [r7, #12]
 801ac08:	60b9      	str	r1, [r7, #8]
 801ac0a:	603b      	str	r3, [r7, #0]
 801ac0c:	1dfb      	adds	r3, r7, #7
 801ac0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ac10:	e04b      	b.n	801acaa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ac12:	69bb      	ldr	r3, [r7, #24]
 801ac14:	3301      	adds	r3, #1
 801ac16:	d048      	beq.n	801acaa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ac18:	f7f6 f9dc 	bl	8010fd4 <HAL_GetTick>
 801ac1c:	0002      	movs	r2, r0
 801ac1e:	683b      	ldr	r3, [r7, #0]
 801ac20:	1ad3      	subs	r3, r2, r3
 801ac22:	69ba      	ldr	r2, [r7, #24]
 801ac24:	429a      	cmp	r2, r3
 801ac26:	d302      	bcc.n	801ac2e <UART_WaitOnFlagUntilTimeout+0x2e>
 801ac28:	69bb      	ldr	r3, [r7, #24]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d101      	bne.n	801ac32 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801ac2e:	2303      	movs	r3, #3
 801ac30:	e04b      	b.n	801acca <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	2204      	movs	r2, #4
 801ac3a:	4013      	ands	r3, r2
 801ac3c:	d035      	beq.n	801acaa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	69db      	ldr	r3, [r3, #28]
 801ac44:	2208      	movs	r2, #8
 801ac46:	4013      	ands	r3, r2
 801ac48:	2b08      	cmp	r3, #8
 801ac4a:	d111      	bne.n	801ac70 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	2208      	movs	r2, #8
 801ac52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	0018      	movs	r0, r3
 801ac58:	f000 f9ca 	bl	801aff0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	2284      	movs	r2, #132	@ 0x84
 801ac60:	2108      	movs	r1, #8
 801ac62:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	2278      	movs	r2, #120	@ 0x78
 801ac68:	2100      	movs	r1, #0
 801ac6a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801ac6c:	2301      	movs	r3, #1
 801ac6e:	e02c      	b.n	801acca <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	69da      	ldr	r2, [r3, #28]
 801ac76:	2380      	movs	r3, #128	@ 0x80
 801ac78:	011b      	lsls	r3, r3, #4
 801ac7a:	401a      	ands	r2, r3
 801ac7c:	2380      	movs	r3, #128	@ 0x80
 801ac7e:	011b      	lsls	r3, r3, #4
 801ac80:	429a      	cmp	r2, r3
 801ac82:	d112      	bne.n	801acaa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	2280      	movs	r2, #128	@ 0x80
 801ac8a:	0112      	lsls	r2, r2, #4
 801ac8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	0018      	movs	r0, r3
 801ac92:	f000 f9ad 	bl	801aff0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	2284      	movs	r2, #132	@ 0x84
 801ac9a:	2120      	movs	r1, #32
 801ac9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	2278      	movs	r2, #120	@ 0x78
 801aca2:	2100      	movs	r1, #0
 801aca4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801aca6:	2303      	movs	r3, #3
 801aca8:	e00f      	b.n	801acca <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	69db      	ldr	r3, [r3, #28]
 801acb0:	68ba      	ldr	r2, [r7, #8]
 801acb2:	4013      	ands	r3, r2
 801acb4:	68ba      	ldr	r2, [r7, #8]
 801acb6:	1ad3      	subs	r3, r2, r3
 801acb8:	425a      	negs	r2, r3
 801acba:	4153      	adcs	r3, r2
 801acbc:	b2db      	uxtb	r3, r3
 801acbe:	001a      	movs	r2, r3
 801acc0:	1dfb      	adds	r3, r7, #7
 801acc2:	781b      	ldrb	r3, [r3, #0]
 801acc4:	429a      	cmp	r2, r3
 801acc6:	d0a4      	beq.n	801ac12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801acc8:	2300      	movs	r3, #0
}
 801acca:	0018      	movs	r0, r3
 801accc:	46bd      	mov	sp, r7
 801acce:	b004      	add	sp, #16
 801acd0:	bd80      	pop	{r7, pc}
	...

0801acd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b090      	sub	sp, #64	@ 0x40
 801acd8:	af00      	add	r7, sp, #0
 801acda:	60f8      	str	r0, [r7, #12]
 801acdc:	60b9      	str	r1, [r7, #8]
 801acde:	1dbb      	adds	r3, r7, #6
 801ace0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801ace2:	68fb      	ldr	r3, [r7, #12]
 801ace4:	68ba      	ldr	r2, [r7, #8]
 801ace6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	1dba      	adds	r2, r7, #6
 801acec:	2158      	movs	r1, #88	@ 0x58
 801acee:	8812      	ldrh	r2, [r2, #0]
 801acf0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	1dba      	adds	r2, r7, #6
 801acf6:	215a      	movs	r1, #90	@ 0x5a
 801acf8:	8812      	ldrh	r2, [r2, #0]
 801acfa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	2200      	movs	r2, #0
 801ad00:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	689a      	ldr	r2, [r3, #8]
 801ad06:	2380      	movs	r3, #128	@ 0x80
 801ad08:	015b      	lsls	r3, r3, #5
 801ad0a:	429a      	cmp	r2, r3
 801ad0c:	d10d      	bne.n	801ad2a <UART_Start_Receive_IT+0x56>
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	691b      	ldr	r3, [r3, #16]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d104      	bne.n	801ad20 <UART_Start_Receive_IT+0x4c>
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	225c      	movs	r2, #92	@ 0x5c
 801ad1a:	4950      	ldr	r1, [pc, #320]	@ (801ae5c <UART_Start_Receive_IT+0x188>)
 801ad1c:	5299      	strh	r1, [r3, r2]
 801ad1e:	e02e      	b.n	801ad7e <UART_Start_Receive_IT+0xaa>
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	225c      	movs	r2, #92	@ 0x5c
 801ad24:	21ff      	movs	r1, #255	@ 0xff
 801ad26:	5299      	strh	r1, [r3, r2]
 801ad28:	e029      	b.n	801ad7e <UART_Start_Receive_IT+0xaa>
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	689b      	ldr	r3, [r3, #8]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d10d      	bne.n	801ad4e <UART_Start_Receive_IT+0x7a>
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	691b      	ldr	r3, [r3, #16]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d104      	bne.n	801ad44 <UART_Start_Receive_IT+0x70>
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	225c      	movs	r2, #92	@ 0x5c
 801ad3e:	21ff      	movs	r1, #255	@ 0xff
 801ad40:	5299      	strh	r1, [r3, r2]
 801ad42:	e01c      	b.n	801ad7e <UART_Start_Receive_IT+0xaa>
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	225c      	movs	r2, #92	@ 0x5c
 801ad48:	217f      	movs	r1, #127	@ 0x7f
 801ad4a:	5299      	strh	r1, [r3, r2]
 801ad4c:	e017      	b.n	801ad7e <UART_Start_Receive_IT+0xaa>
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	689a      	ldr	r2, [r3, #8]
 801ad52:	2380      	movs	r3, #128	@ 0x80
 801ad54:	055b      	lsls	r3, r3, #21
 801ad56:	429a      	cmp	r2, r3
 801ad58:	d10d      	bne.n	801ad76 <UART_Start_Receive_IT+0xa2>
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	691b      	ldr	r3, [r3, #16]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d104      	bne.n	801ad6c <UART_Start_Receive_IT+0x98>
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	225c      	movs	r2, #92	@ 0x5c
 801ad66:	217f      	movs	r1, #127	@ 0x7f
 801ad68:	5299      	strh	r1, [r3, r2]
 801ad6a:	e008      	b.n	801ad7e <UART_Start_Receive_IT+0xaa>
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	225c      	movs	r2, #92	@ 0x5c
 801ad70:	213f      	movs	r1, #63	@ 0x3f
 801ad72:	5299      	strh	r1, [r3, r2]
 801ad74:	e003      	b.n	801ad7e <UART_Start_Receive_IT+0xaa>
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	225c      	movs	r2, #92	@ 0x5c
 801ad7a:	2100      	movs	r1, #0
 801ad7c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	2284      	movs	r2, #132	@ 0x84
 801ad82:	2100      	movs	r1, #0
 801ad84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	2280      	movs	r2, #128	@ 0x80
 801ad8a:	2122      	movs	r1, #34	@ 0x22
 801ad8c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad8e:	f3ef 8310 	mrs	r3, PRIMASK
 801ad92:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ad94:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ad98:	2301      	movs	r3, #1
 801ad9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad9e:	f383 8810 	msr	PRIMASK, r3
}
 801ada2:	46c0      	nop			@ (mov r8, r8)
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	689a      	ldr	r2, [r3, #8]
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	2101      	movs	r1, #1
 801adb0:	430a      	orrs	r2, r1
 801adb2:	609a      	str	r2, [r3, #8]
 801adb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801adb6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adba:	f383 8810 	msr	PRIMASK, r3
}
 801adbe:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	689a      	ldr	r2, [r3, #8]
 801adc4:	2380      	movs	r3, #128	@ 0x80
 801adc6:	015b      	lsls	r3, r3, #5
 801adc8:	429a      	cmp	r2, r3
 801adca:	d107      	bne.n	801addc <UART_Start_Receive_IT+0x108>
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	691b      	ldr	r3, [r3, #16]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d103      	bne.n	801addc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	4a22      	ldr	r2, [pc, #136]	@ (801ae60 <UART_Start_Receive_IT+0x18c>)
 801add8:	669a      	str	r2, [r3, #104]	@ 0x68
 801adda:	e002      	b.n	801ade2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	4a21      	ldr	r2, [pc, #132]	@ (801ae64 <UART_Start_Receive_IT+0x190>)
 801ade0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	691b      	ldr	r3, [r3, #16]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d019      	beq.n	801ae1e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adea:	f3ef 8310 	mrs	r3, PRIMASK
 801adee:	61fb      	str	r3, [r7, #28]
  return(result);
 801adf0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801adf2:	637b      	str	r3, [r7, #52]	@ 0x34
 801adf4:	2301      	movs	r3, #1
 801adf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adf8:	6a3b      	ldr	r3, [r7, #32]
 801adfa:	f383 8810 	msr	PRIMASK, r3
}
 801adfe:	46c0      	nop			@ (mov r8, r8)
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	681a      	ldr	r2, [r3, #0]
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	2190      	movs	r1, #144	@ 0x90
 801ae0c:	0049      	lsls	r1, r1, #1
 801ae0e:	430a      	orrs	r2, r1
 801ae10:	601a      	str	r2, [r3, #0]
 801ae12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ae14:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae18:	f383 8810 	msr	PRIMASK, r3
}
 801ae1c:	e018      	b.n	801ae50 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae1e:	f3ef 8310 	mrs	r3, PRIMASK
 801ae22:	613b      	str	r3, [r7, #16]
  return(result);
 801ae24:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801ae26:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ae28:	2301      	movs	r3, #1
 801ae2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae2c:	697b      	ldr	r3, [r7, #20]
 801ae2e:	f383 8810 	msr	PRIMASK, r3
}
 801ae32:	46c0      	nop			@ (mov r8, r8)
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	681a      	ldr	r2, [r3, #0]
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	2120      	movs	r1, #32
 801ae40:	430a      	orrs	r2, r1
 801ae42:	601a      	str	r2, [r3, #0]
 801ae44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae48:	69bb      	ldr	r3, [r7, #24]
 801ae4a:	f383 8810 	msr	PRIMASK, r3
}
 801ae4e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801ae50:	2300      	movs	r3, #0
}
 801ae52:	0018      	movs	r0, r3
 801ae54:	46bd      	mov	sp, r7
 801ae56:	b010      	add	sp, #64	@ 0x40
 801ae58:	bd80      	pop	{r7, pc}
 801ae5a:	46c0      	nop			@ (mov r8, r8)
 801ae5c:	000001ff 	.word	0x000001ff
 801ae60:	0801b5d5 	.word	0x0801b5d5
 801ae64:	0801b409 	.word	0x0801b409

0801ae68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b090      	sub	sp, #64	@ 0x40
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	60f8      	str	r0, [r7, #12]
 801ae70:	60b9      	str	r1, [r7, #8]
 801ae72:	1dbb      	adds	r3, r7, #6
 801ae74:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	68ba      	ldr	r2, [r7, #8]
 801ae7a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	1dba      	adds	r2, r7, #6
 801ae80:	2158      	movs	r1, #88	@ 0x58
 801ae82:	8812      	ldrh	r2, [r2, #0]
 801ae84:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	2284      	movs	r2, #132	@ 0x84
 801ae8a:	2100      	movs	r1, #0
 801ae8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	2280      	movs	r2, #128	@ 0x80
 801ae92:	2122      	movs	r1, #34	@ 0x22
 801ae94:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d028      	beq.n	801aef0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801aea2:	4a3e      	ldr	r2, [pc, #248]	@ (801af9c <UART_Start_Receive_DMA+0x134>)
 801aea4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801aeaa:	4a3d      	ldr	r2, [pc, #244]	@ (801afa0 <UART_Start_Receive_DMA+0x138>)
 801aeac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801aeb2:	4a3c      	ldr	r2, [pc, #240]	@ (801afa4 <UART_Start_Receive_DMA+0x13c>)
 801aeb4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801aeba:	2200      	movs	r2, #0
 801aebc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	3324      	adds	r3, #36	@ 0x24
 801aec8:	0019      	movs	r1, r3
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aece:	001a      	movs	r2, r3
 801aed0:	1dbb      	adds	r3, r7, #6
 801aed2:	881b      	ldrh	r3, [r3, #0]
 801aed4:	f7f6 fdd0 	bl	8011a78 <HAL_DMA_Start_IT>
 801aed8:	1e03      	subs	r3, r0, #0
 801aeda:	d009      	beq.n	801aef0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	2284      	movs	r2, #132	@ 0x84
 801aee0:	2110      	movs	r1, #16
 801aee2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	2280      	movs	r2, #128	@ 0x80
 801aee8:	2120      	movs	r1, #32
 801aeea:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801aeec:	2301      	movs	r3, #1
 801aeee:	e050      	b.n	801af92 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	691b      	ldr	r3, [r3, #16]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d019      	beq.n	801af2c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aef8:	f3ef 8310 	mrs	r3, PRIMASK
 801aefc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801af02:	2301      	movs	r3, #1
 801af04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af08:	f383 8810 	msr	PRIMASK, r3
}
 801af0c:	46c0      	nop			@ (mov r8, r8)
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	681a      	ldr	r2, [r3, #0]
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	2180      	movs	r1, #128	@ 0x80
 801af1a:	0049      	lsls	r1, r1, #1
 801af1c:	430a      	orrs	r2, r1
 801af1e:	601a      	str	r2, [r3, #0]
 801af20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af22:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af26:	f383 8810 	msr	PRIMASK, r3
}
 801af2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af2c:	f3ef 8310 	mrs	r3, PRIMASK
 801af30:	613b      	str	r3, [r7, #16]
  return(result);
 801af32:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801af34:	63bb      	str	r3, [r7, #56]	@ 0x38
 801af36:	2301      	movs	r3, #1
 801af38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af3a:	697b      	ldr	r3, [r7, #20]
 801af3c:	f383 8810 	msr	PRIMASK, r3
}
 801af40:	46c0      	nop			@ (mov r8, r8)
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	689a      	ldr	r2, [r3, #8]
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	2101      	movs	r1, #1
 801af4e:	430a      	orrs	r2, r1
 801af50:	609a      	str	r2, [r3, #8]
 801af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af56:	69bb      	ldr	r3, [r7, #24]
 801af58:	f383 8810 	msr	PRIMASK, r3
}
 801af5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af5e:	f3ef 8310 	mrs	r3, PRIMASK
 801af62:	61fb      	str	r3, [r7, #28]
  return(result);
 801af64:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801af66:	637b      	str	r3, [r7, #52]	@ 0x34
 801af68:	2301      	movs	r3, #1
 801af6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af6c:	6a3b      	ldr	r3, [r7, #32]
 801af6e:	f383 8810 	msr	PRIMASK, r3
}
 801af72:	46c0      	nop			@ (mov r8, r8)
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	689a      	ldr	r2, [r3, #8]
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	2140      	movs	r1, #64	@ 0x40
 801af80:	430a      	orrs	r2, r1
 801af82:	609a      	str	r2, [r3, #8]
 801af84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af8a:	f383 8810 	msr	PRIMASK, r3
}
 801af8e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801af90:	2300      	movs	r3, #0
}
 801af92:	0018      	movs	r0, r3
 801af94:	46bd      	mov	sp, r7
 801af96:	b010      	add	sp, #64	@ 0x40
 801af98:	bd80      	pop	{r7, pc}
 801af9a:	46c0      	nop			@ (mov r8, r8)
 801af9c:	0801b179 	.word	0x0801b179
 801afa0:	0801b2ad 	.word	0x0801b2ad
 801afa4:	0801b2f5 	.word	0x0801b2f5

0801afa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b086      	sub	sp, #24
 801afac:	af00      	add	r7, sp, #0
 801afae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afb0:	f3ef 8310 	mrs	r3, PRIMASK
 801afb4:	60bb      	str	r3, [r7, #8]
  return(result);
 801afb6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801afb8:	617b      	str	r3, [r7, #20]
 801afba:	2301      	movs	r3, #1
 801afbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	f383 8810 	msr	PRIMASK, r3
}
 801afc4:	46c0      	nop			@ (mov r8, r8)
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	681a      	ldr	r2, [r3, #0]
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	21c0      	movs	r1, #192	@ 0xc0
 801afd2:	438a      	bics	r2, r1
 801afd4:	601a      	str	r2, [r3, #0]
 801afd6:	697b      	ldr	r3, [r7, #20]
 801afd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afda:	693b      	ldr	r3, [r7, #16]
 801afdc:	f383 8810 	msr	PRIMASK, r3
}
 801afe0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	2220      	movs	r2, #32
 801afe6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801afe8:	46c0      	nop			@ (mov r8, r8)
 801afea:	46bd      	mov	sp, r7
 801afec:	b006      	add	sp, #24
 801afee:	bd80      	pop	{r7, pc}

0801aff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b08e      	sub	sp, #56	@ 0x38
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aff8:	f3ef 8310 	mrs	r3, PRIMASK
 801affc:	617b      	str	r3, [r7, #20]
  return(result);
 801affe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b000:	637b      	str	r3, [r7, #52]	@ 0x34
 801b002:	2301      	movs	r3, #1
 801b004:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b006:	69bb      	ldr	r3, [r7, #24]
 801b008:	f383 8810 	msr	PRIMASK, r3
}
 801b00c:	46c0      	nop			@ (mov r8, r8)
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	681a      	ldr	r2, [r3, #0]
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	4926      	ldr	r1, [pc, #152]	@ (801b0b4 <UART_EndRxTransfer+0xc4>)
 801b01a:	400a      	ands	r2, r1
 801b01c:	601a      	str	r2, [r3, #0]
 801b01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b022:	69fb      	ldr	r3, [r7, #28]
 801b024:	f383 8810 	msr	PRIMASK, r3
}
 801b028:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b02a:	f3ef 8310 	mrs	r3, PRIMASK
 801b02e:	623b      	str	r3, [r7, #32]
  return(result);
 801b030:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b032:	633b      	str	r3, [r7, #48]	@ 0x30
 801b034:	2301      	movs	r3, #1
 801b036:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b03a:	f383 8810 	msr	PRIMASK, r3
}
 801b03e:	46c0      	nop			@ (mov r8, r8)
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	689a      	ldr	r2, [r3, #8]
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	2101      	movs	r1, #1
 801b04c:	438a      	bics	r2, r1
 801b04e:	609a      	str	r2, [r3, #8]
 801b050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b052:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b056:	f383 8810 	msr	PRIMASK, r3
}
 801b05a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b060:	2b01      	cmp	r3, #1
 801b062:	d118      	bne.n	801b096 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b064:	f3ef 8310 	mrs	r3, PRIMASK
 801b068:	60bb      	str	r3, [r7, #8]
  return(result);
 801b06a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b06e:	2301      	movs	r3, #1
 801b070:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	f383 8810 	msr	PRIMASK, r3
}
 801b078:	46c0      	nop			@ (mov r8, r8)
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	681a      	ldr	r2, [r3, #0]
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	2110      	movs	r1, #16
 801b086:	438a      	bics	r2, r1
 801b088:	601a      	str	r2, [r3, #0]
 801b08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b08c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b08e:	693b      	ldr	r3, [r7, #16]
 801b090:	f383 8810 	msr	PRIMASK, r3
}
 801b094:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	2280      	movs	r2, #128	@ 0x80
 801b09a:	2120      	movs	r1, #32
 801b09c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b0aa:	46c0      	nop			@ (mov r8, r8)
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	b00e      	add	sp, #56	@ 0x38
 801b0b0:	bd80      	pop	{r7, pc}
 801b0b2:	46c0      	nop			@ (mov r8, r8)
 801b0b4:	fffffedf 	.word	0xfffffedf

0801b0b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b08c      	sub	sp, #48	@ 0x30
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	2220      	movs	r2, #32
 801b0ce:	4013      	ands	r3, r2
 801b0d0:	d135      	bne.n	801b13e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801b0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0d4:	2252      	movs	r2, #82	@ 0x52
 801b0d6:	2100      	movs	r1, #0
 801b0d8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0da:	f3ef 8310 	mrs	r3, PRIMASK
 801b0de:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0e0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801b0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b0e4:	2301      	movs	r3, #1
 801b0e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0e8:	693b      	ldr	r3, [r7, #16]
 801b0ea:	f383 8810 	msr	PRIMASK, r3
}
 801b0ee:	46c0      	nop			@ (mov r8, r8)
 801b0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	689a      	ldr	r2, [r3, #8]
 801b0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	2180      	movs	r1, #128	@ 0x80
 801b0fc:	438a      	bics	r2, r1
 801b0fe:	609a      	str	r2, [r3, #8]
 801b100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b104:	697b      	ldr	r3, [r7, #20]
 801b106:	f383 8810 	msr	PRIMASK, r3
}
 801b10a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b10c:	f3ef 8310 	mrs	r3, PRIMASK
 801b110:	61bb      	str	r3, [r7, #24]
  return(result);
 801b112:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b114:	627b      	str	r3, [r7, #36]	@ 0x24
 801b116:	2301      	movs	r3, #1
 801b118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b11a:	69fb      	ldr	r3, [r7, #28]
 801b11c:	f383 8810 	msr	PRIMASK, r3
}
 801b120:	46c0      	nop			@ (mov r8, r8)
 801b122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	681a      	ldr	r2, [r3, #0]
 801b128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	2140      	movs	r1, #64	@ 0x40
 801b12e:	430a      	orrs	r2, r1
 801b130:	601a      	str	r2, [r3, #0]
 801b132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b134:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b136:	6a3b      	ldr	r3, [r7, #32]
 801b138:	f383 8810 	msr	PRIMASK, r3
}
 801b13c:	e006      	b.n	801b14c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801b13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b140:	228c      	movs	r2, #140	@ 0x8c
 801b142:	589b      	ldr	r3, [r3, r2]
 801b144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b146:	0010      	movs	r0, r2
 801b148:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b14a:	46c0      	nop			@ (mov r8, r8)
 801b14c:	46c0      	nop			@ (mov r8, r8)
 801b14e:	46bd      	mov	sp, r7
 801b150:	b00c      	add	sp, #48	@ 0x30
 801b152:	bd80      	pop	{r7, pc}

0801b154 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b154:	b580      	push	{r7, lr}
 801b156:	b084      	sub	sp, #16
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b160:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	2288      	movs	r2, #136	@ 0x88
 801b166:	589b      	ldr	r3, [r3, r2]
 801b168:	68fa      	ldr	r2, [r7, #12]
 801b16a:	0010      	movs	r0, r2
 801b16c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b16e:	46c0      	nop			@ (mov r8, r8)
 801b170:	46bd      	mov	sp, r7
 801b172:	b004      	add	sp, #16
 801b174:	bd80      	pop	{r7, pc}
	...

0801b178 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b094      	sub	sp, #80	@ 0x50
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b184:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	2220      	movs	r2, #32
 801b18e:	4013      	ands	r3, r2
 801b190:	d16f      	bne.n	801b272 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801b192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b194:	225a      	movs	r2, #90	@ 0x5a
 801b196:	2100      	movs	r1, #0
 801b198:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b19a:	f3ef 8310 	mrs	r3, PRIMASK
 801b19e:	61bb      	str	r3, [r7, #24]
  return(result);
 801b1a0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b1a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b1a4:	2301      	movs	r3, #1
 801b1a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1a8:	69fb      	ldr	r3, [r7, #28]
 801b1aa:	f383 8810 	msr	PRIMASK, r3
}
 801b1ae:	46c0      	nop			@ (mov r8, r8)
 801b1b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	681a      	ldr	r2, [r3, #0]
 801b1b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	493b      	ldr	r1, [pc, #236]	@ (801b2a8 <UART_DMAReceiveCplt+0x130>)
 801b1bc:	400a      	ands	r2, r1
 801b1be:	601a      	str	r2, [r3, #0]
 801b1c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b1c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1c4:	6a3b      	ldr	r3, [r7, #32]
 801b1c6:	f383 8810 	msr	PRIMASK, r3
}
 801b1ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1cc:	f3ef 8310 	mrs	r3, PRIMASK
 801b1d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b1d4:	647b      	str	r3, [r7, #68]	@ 0x44
 801b1d6:	2301      	movs	r3, #1
 801b1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1dc:	f383 8810 	msr	PRIMASK, r3
}
 801b1e0:	46c0      	nop			@ (mov r8, r8)
 801b1e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	689a      	ldr	r2, [r3, #8]
 801b1e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	2101      	movs	r1, #1
 801b1ee:	438a      	bics	r2, r1
 801b1f0:	609a      	str	r2, [r3, #8]
 801b1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1f8:	f383 8810 	msr	PRIMASK, r3
}
 801b1fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1fe:	f3ef 8310 	mrs	r3, PRIMASK
 801b202:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b206:	643b      	str	r3, [r7, #64]	@ 0x40
 801b208:	2301      	movs	r3, #1
 801b20a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b20e:	f383 8810 	msr	PRIMASK, r3
}
 801b212:	46c0      	nop			@ (mov r8, r8)
 801b214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	689a      	ldr	r2, [r3, #8]
 801b21a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	2140      	movs	r1, #64	@ 0x40
 801b220:	438a      	bics	r2, r1
 801b222:	609a      	str	r2, [r3, #8]
 801b224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b226:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b22a:	f383 8810 	msr	PRIMASK, r3
}
 801b22e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801b230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b232:	2280      	movs	r2, #128	@ 0x80
 801b234:	2120      	movs	r1, #32
 801b236:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b23a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b23c:	2b01      	cmp	r3, #1
 801b23e:	d118      	bne.n	801b272 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b240:	f3ef 8310 	mrs	r3, PRIMASK
 801b244:	60fb      	str	r3, [r7, #12]
  return(result);
 801b246:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b24a:	2301      	movs	r3, #1
 801b24c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b24e:	693b      	ldr	r3, [r7, #16]
 801b250:	f383 8810 	msr	PRIMASK, r3
}
 801b254:	46c0      	nop			@ (mov r8, r8)
 801b256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	681a      	ldr	r2, [r3, #0]
 801b25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	2110      	movs	r1, #16
 801b262:	438a      	bics	r2, r1
 801b264:	601a      	str	r2, [r3, #0]
 801b266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b268:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b26a:	697b      	ldr	r3, [r7, #20]
 801b26c:	f383 8810 	msr	PRIMASK, r3
}
 801b270:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b274:	2200      	movs	r2, #0
 801b276:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b27a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b27c:	2b01      	cmp	r3, #1
 801b27e:	d109      	bne.n	801b294 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801b280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b282:	22ac      	movs	r2, #172	@ 0xac
 801b284:	589b      	ldr	r3, [r3, r2]
 801b286:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b288:	2158      	movs	r1, #88	@ 0x58
 801b28a:	5a51      	ldrh	r1, [r2, r1]
 801b28c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b28e:	0010      	movs	r0, r2
 801b290:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b292:	e005      	b.n	801b2a0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801b294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b296:	2294      	movs	r2, #148	@ 0x94
 801b298:	589b      	ldr	r3, [r3, r2]
 801b29a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b29c:	0010      	movs	r0, r2
 801b29e:	4798      	blx	r3
}
 801b2a0:	46c0      	nop			@ (mov r8, r8)
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	b014      	add	sp, #80	@ 0x50
 801b2a6:	bd80      	pop	{r7, pc}
 801b2a8:	fffffeff 	.word	0xfffffeff

0801b2ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b084      	sub	sp, #16
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b2b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	2201      	movs	r2, #1
 801b2be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b2c4:	2b01      	cmp	r3, #1
 801b2c6:	d10b      	bne.n	801b2e0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	22ac      	movs	r2, #172	@ 0xac
 801b2cc:	589b      	ldr	r3, [r3, r2]
 801b2ce:	68fa      	ldr	r2, [r7, #12]
 801b2d0:	2158      	movs	r1, #88	@ 0x58
 801b2d2:	5a52      	ldrh	r2, [r2, r1]
 801b2d4:	0852      	lsrs	r2, r2, #1
 801b2d6:	b291      	uxth	r1, r2
 801b2d8:	68fa      	ldr	r2, [r7, #12]
 801b2da:	0010      	movs	r0, r2
 801b2dc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b2de:	e005      	b.n	801b2ec <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	2290      	movs	r2, #144	@ 0x90
 801b2e4:	589b      	ldr	r3, [r3, r2]
 801b2e6:	68fa      	ldr	r2, [r7, #12]
 801b2e8:	0010      	movs	r0, r2
 801b2ea:	4798      	blx	r3
}
 801b2ec:	46c0      	nop			@ (mov r8, r8)
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	b004      	add	sp, #16
 801b2f2:	bd80      	pop	{r7, pc}

0801b2f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b086      	sub	sp, #24
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b300:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801b302:	697b      	ldr	r3, [r7, #20]
 801b304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b306:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	2280      	movs	r2, #128	@ 0x80
 801b30c:	589b      	ldr	r3, [r3, r2]
 801b30e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801b310:	697b      	ldr	r3, [r7, #20]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	689b      	ldr	r3, [r3, #8]
 801b316:	2280      	movs	r2, #128	@ 0x80
 801b318:	4013      	ands	r3, r2
 801b31a:	2b80      	cmp	r3, #128	@ 0x80
 801b31c:	d10a      	bne.n	801b334 <UART_DMAError+0x40>
 801b31e:	693b      	ldr	r3, [r7, #16]
 801b320:	2b21      	cmp	r3, #33	@ 0x21
 801b322:	d107      	bne.n	801b334 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801b324:	697b      	ldr	r3, [r7, #20]
 801b326:	2252      	movs	r2, #82	@ 0x52
 801b328:	2100      	movs	r1, #0
 801b32a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801b32c:	697b      	ldr	r3, [r7, #20]
 801b32e:	0018      	movs	r0, r3
 801b330:	f7ff fe3a 	bl	801afa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801b334:	697b      	ldr	r3, [r7, #20]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	689b      	ldr	r3, [r3, #8]
 801b33a:	2240      	movs	r2, #64	@ 0x40
 801b33c:	4013      	ands	r3, r2
 801b33e:	2b40      	cmp	r3, #64	@ 0x40
 801b340:	d10a      	bne.n	801b358 <UART_DMAError+0x64>
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	2b22      	cmp	r3, #34	@ 0x22
 801b346:	d107      	bne.n	801b358 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801b348:	697b      	ldr	r3, [r7, #20]
 801b34a:	225a      	movs	r2, #90	@ 0x5a
 801b34c:	2100      	movs	r1, #0
 801b34e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801b350:	697b      	ldr	r3, [r7, #20]
 801b352:	0018      	movs	r0, r3
 801b354:	f7ff fe4c 	bl	801aff0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801b358:	697b      	ldr	r3, [r7, #20]
 801b35a:	2284      	movs	r2, #132	@ 0x84
 801b35c:	589b      	ldr	r3, [r3, r2]
 801b35e:	2210      	movs	r2, #16
 801b360:	431a      	orrs	r2, r3
 801b362:	697b      	ldr	r3, [r7, #20]
 801b364:	2184      	movs	r1, #132	@ 0x84
 801b366:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b368:	697b      	ldr	r3, [r7, #20]
 801b36a:	2298      	movs	r2, #152	@ 0x98
 801b36c:	589b      	ldr	r3, [r3, r2]
 801b36e:	697a      	ldr	r2, [r7, #20]
 801b370:	0010      	movs	r0, r2
 801b372:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b374:	46c0      	nop			@ (mov r8, r8)
 801b376:	46bd      	mov	sp, r7
 801b378:	b006      	add	sp, #24
 801b37a:	bd80      	pop	{r7, pc}

0801b37c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b084      	sub	sp, #16
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	225a      	movs	r2, #90	@ 0x5a
 801b38e:	2100      	movs	r1, #0
 801b390:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	2252      	movs	r2, #82	@ 0x52
 801b396:	2100      	movs	r1, #0
 801b398:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	2298      	movs	r2, #152	@ 0x98
 801b39e:	589b      	ldr	r3, [r3, r2]
 801b3a0:	68fa      	ldr	r2, [r7, #12]
 801b3a2:	0010      	movs	r0, r2
 801b3a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b3a6:	46c0      	nop			@ (mov r8, r8)
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	b004      	add	sp, #16
 801b3ac:	bd80      	pop	{r7, pc}

0801b3ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b3ae:	b580      	push	{r7, lr}
 801b3b0:	b086      	sub	sp, #24
 801b3b2:	af00      	add	r7, sp, #0
 801b3b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3b6:	f3ef 8310 	mrs	r3, PRIMASK
 801b3ba:	60bb      	str	r3, [r7, #8]
  return(result);
 801b3bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b3be:	617b      	str	r3, [r7, #20]
 801b3c0:	2301      	movs	r3, #1
 801b3c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	f383 8810 	msr	PRIMASK, r3
}
 801b3ca:	46c0      	nop			@ (mov r8, r8)
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	681a      	ldr	r2, [r3, #0]
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	2140      	movs	r1, #64	@ 0x40
 801b3d8:	438a      	bics	r2, r1
 801b3da:	601a      	str	r2, [r3, #0]
 801b3dc:	697b      	ldr	r3, [r7, #20]
 801b3de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3e0:	693b      	ldr	r3, [r7, #16]
 801b3e2:	f383 8810 	msr	PRIMASK, r3
}
 801b3e6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	2220      	movs	r2, #32
 801b3ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	228c      	movs	r2, #140	@ 0x8c
 801b3f8:	589b      	ldr	r3, [r3, r2]
 801b3fa:	687a      	ldr	r2, [r7, #4]
 801b3fc:	0010      	movs	r0, r2
 801b3fe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b400:	46c0      	nop			@ (mov r8, r8)
 801b402:	46bd      	mov	sp, r7
 801b404:	b006      	add	sp, #24
 801b406:	bd80      	pop	{r7, pc}

0801b408 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b094      	sub	sp, #80	@ 0x50
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801b410:	204e      	movs	r0, #78	@ 0x4e
 801b412:	183b      	adds	r3, r7, r0
 801b414:	687a      	ldr	r2, [r7, #4]
 801b416:	215c      	movs	r1, #92	@ 0x5c
 801b418:	5a52      	ldrh	r2, [r2, r1]
 801b41a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	2280      	movs	r2, #128	@ 0x80
 801b420:	589b      	ldr	r3, [r3, r2]
 801b422:	2b22      	cmp	r3, #34	@ 0x22
 801b424:	d000      	beq.n	801b428 <UART_RxISR_8BIT+0x20>
 801b426:	e0c2      	b.n	801b5ae <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b42e:	214c      	movs	r1, #76	@ 0x4c
 801b430:	187b      	adds	r3, r7, r1
 801b432:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b434:	187b      	adds	r3, r7, r1
 801b436:	881b      	ldrh	r3, [r3, #0]
 801b438:	b2da      	uxtb	r2, r3
 801b43a:	183b      	adds	r3, r7, r0
 801b43c:	881b      	ldrh	r3, [r3, #0]
 801b43e:	b2d9      	uxtb	r1, r3
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b444:	400a      	ands	r2, r1
 801b446:	b2d2      	uxtb	r2, r2
 801b448:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b44e:	1c5a      	adds	r2, r3, #1
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	225a      	movs	r2, #90	@ 0x5a
 801b458:	5a9b      	ldrh	r3, [r3, r2]
 801b45a:	b29b      	uxth	r3, r3
 801b45c:	3b01      	subs	r3, #1
 801b45e:	b299      	uxth	r1, r3
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	225a      	movs	r2, #90	@ 0x5a
 801b464:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	225a      	movs	r2, #90	@ 0x5a
 801b46a:	5a9b      	ldrh	r3, [r3, r2]
 801b46c:	b29b      	uxth	r3, r3
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d000      	beq.n	801b474 <UART_RxISR_8BIT+0x6c>
 801b472:	e0a4      	b.n	801b5be <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b474:	f3ef 8310 	mrs	r3, PRIMASK
 801b478:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b47c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b47e:	2301      	movs	r3, #1
 801b480:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b484:	f383 8810 	msr	PRIMASK, r3
}
 801b488:	46c0      	nop			@ (mov r8, r8)
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	681a      	ldr	r2, [r3, #0]
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	494c      	ldr	r1, [pc, #304]	@ (801b5c8 <UART_RxISR_8BIT+0x1c0>)
 801b496:	400a      	ands	r2, r1
 801b498:	601a      	str	r2, [r3, #0]
 801b49a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4a0:	f383 8810 	msr	PRIMASK, r3
}
 801b4a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4a6:	f3ef 8310 	mrs	r3, PRIMASK
 801b4aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b4ae:	647b      	str	r3, [r7, #68]	@ 0x44
 801b4b0:	2301      	movs	r3, #1
 801b4b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b4b6:	f383 8810 	msr	PRIMASK, r3
}
 801b4ba:	46c0      	nop			@ (mov r8, r8)
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	689a      	ldr	r2, [r3, #8]
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	2101      	movs	r1, #1
 801b4c8:	438a      	bics	r2, r1
 801b4ca:	609a      	str	r2, [r3, #8]
 801b4cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b4ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4d2:	f383 8810 	msr	PRIMASK, r3
}
 801b4d6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	2280      	movs	r2, #128	@ 0x80
 801b4dc:	2120      	movs	r1, #32
 801b4de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	2200      	movs	r2, #0
 801b4e4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	4a36      	ldr	r2, [pc, #216]	@ (801b5cc <UART_RxISR_8BIT+0x1c4>)
 801b4f2:	4293      	cmp	r3, r2
 801b4f4:	d01f      	beq.n	801b536 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	685a      	ldr	r2, [r3, #4]
 801b4fc:	2380      	movs	r3, #128	@ 0x80
 801b4fe:	041b      	lsls	r3, r3, #16
 801b500:	4013      	ands	r3, r2
 801b502:	d018      	beq.n	801b536 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b504:	f3ef 8310 	mrs	r3, PRIMASK
 801b508:	61bb      	str	r3, [r7, #24]
  return(result);
 801b50a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b50c:	643b      	str	r3, [r7, #64]	@ 0x40
 801b50e:	2301      	movs	r3, #1
 801b510:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b512:	69fb      	ldr	r3, [r7, #28]
 801b514:	f383 8810 	msr	PRIMASK, r3
}
 801b518:	46c0      	nop			@ (mov r8, r8)
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	681a      	ldr	r2, [r3, #0]
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	492a      	ldr	r1, [pc, #168]	@ (801b5d0 <UART_RxISR_8BIT+0x1c8>)
 801b526:	400a      	ands	r2, r1
 801b528:	601a      	str	r2, [r3, #0]
 801b52a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b52c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b52e:	6a3b      	ldr	r3, [r7, #32]
 801b530:	f383 8810 	msr	PRIMASK, r3
}
 801b534:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b53a:	2b01      	cmp	r3, #1
 801b53c:	d130      	bne.n	801b5a0 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	2200      	movs	r2, #0
 801b542:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b544:	f3ef 8310 	mrs	r3, PRIMASK
 801b548:	60fb      	str	r3, [r7, #12]
  return(result);
 801b54a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b54e:	2301      	movs	r3, #1
 801b550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b552:	693b      	ldr	r3, [r7, #16]
 801b554:	f383 8810 	msr	PRIMASK, r3
}
 801b558:	46c0      	nop			@ (mov r8, r8)
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	681a      	ldr	r2, [r3, #0]
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	2110      	movs	r1, #16
 801b566:	438a      	bics	r2, r1
 801b568:	601a      	str	r2, [r3, #0]
 801b56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b56c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b56e:	697b      	ldr	r3, [r7, #20]
 801b570:	f383 8810 	msr	PRIMASK, r3
}
 801b574:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	69db      	ldr	r3, [r3, #28]
 801b57c:	2210      	movs	r2, #16
 801b57e:	4013      	ands	r3, r2
 801b580:	2b10      	cmp	r3, #16
 801b582:	d103      	bne.n	801b58c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	2210      	movs	r2, #16
 801b58a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	22ac      	movs	r2, #172	@ 0xac
 801b590:	589b      	ldr	r3, [r3, r2]
 801b592:	687a      	ldr	r2, [r7, #4]
 801b594:	2158      	movs	r1, #88	@ 0x58
 801b596:	5a51      	ldrh	r1, [r2, r1]
 801b598:	687a      	ldr	r2, [r7, #4]
 801b59a:	0010      	movs	r0, r2
 801b59c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b59e:	e00e      	b.n	801b5be <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	2294      	movs	r2, #148	@ 0x94
 801b5a4:	589b      	ldr	r3, [r3, r2]
 801b5a6:	687a      	ldr	r2, [r7, #4]
 801b5a8:	0010      	movs	r0, r2
 801b5aa:	4798      	blx	r3
}
 801b5ac:	e007      	b.n	801b5be <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	699a      	ldr	r2, [r3, #24]
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	2108      	movs	r1, #8
 801b5ba:	430a      	orrs	r2, r1
 801b5bc:	619a      	str	r2, [r3, #24]
}
 801b5be:	46c0      	nop			@ (mov r8, r8)
 801b5c0:	46bd      	mov	sp, r7
 801b5c2:	b014      	add	sp, #80	@ 0x50
 801b5c4:	bd80      	pop	{r7, pc}
 801b5c6:	46c0      	nop			@ (mov r8, r8)
 801b5c8:	fffffedf 	.word	0xfffffedf
 801b5cc:	40004800 	.word	0x40004800
 801b5d0:	fbffffff 	.word	0xfbffffff

0801b5d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b094      	sub	sp, #80	@ 0x50
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801b5dc:	204e      	movs	r0, #78	@ 0x4e
 801b5de:	183b      	adds	r3, r7, r0
 801b5e0:	687a      	ldr	r2, [r7, #4]
 801b5e2:	215c      	movs	r1, #92	@ 0x5c
 801b5e4:	5a52      	ldrh	r2, [r2, r1]
 801b5e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	2280      	movs	r2, #128	@ 0x80
 801b5ec:	589b      	ldr	r3, [r3, r2]
 801b5ee:	2b22      	cmp	r3, #34	@ 0x22
 801b5f0:	d000      	beq.n	801b5f4 <UART_RxISR_16BIT+0x20>
 801b5f2:	e0c2      	b.n	801b77a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b5fa:	214c      	movs	r1, #76	@ 0x4c
 801b5fc:	187b      	adds	r3, r7, r1
 801b5fe:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b604:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801b606:	187b      	adds	r3, r7, r1
 801b608:	183a      	adds	r2, r7, r0
 801b60a:	881b      	ldrh	r3, [r3, #0]
 801b60c:	8812      	ldrh	r2, [r2, #0]
 801b60e:	4013      	ands	r3, r2
 801b610:	b29a      	uxth	r2, r3
 801b612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b614:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b61a:	1c9a      	adds	r2, r3, #2
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	225a      	movs	r2, #90	@ 0x5a
 801b624:	5a9b      	ldrh	r3, [r3, r2]
 801b626:	b29b      	uxth	r3, r3
 801b628:	3b01      	subs	r3, #1
 801b62a:	b299      	uxth	r1, r3
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	225a      	movs	r2, #90	@ 0x5a
 801b630:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	225a      	movs	r2, #90	@ 0x5a
 801b636:	5a9b      	ldrh	r3, [r3, r2]
 801b638:	b29b      	uxth	r3, r3
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d000      	beq.n	801b640 <UART_RxISR_16BIT+0x6c>
 801b63e:	e0a4      	b.n	801b78a <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b640:	f3ef 8310 	mrs	r3, PRIMASK
 801b644:	623b      	str	r3, [r7, #32]
  return(result);
 801b646:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b648:	647b      	str	r3, [r7, #68]	@ 0x44
 801b64a:	2301      	movs	r3, #1
 801b64c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b650:	f383 8810 	msr	PRIMASK, r3
}
 801b654:	46c0      	nop			@ (mov r8, r8)
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	681a      	ldr	r2, [r3, #0]
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	494c      	ldr	r1, [pc, #304]	@ (801b794 <UART_RxISR_16BIT+0x1c0>)
 801b662:	400a      	ands	r2, r1
 801b664:	601a      	str	r2, [r3, #0]
 801b666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b668:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b66c:	f383 8810 	msr	PRIMASK, r3
}
 801b670:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b672:	f3ef 8310 	mrs	r3, PRIMASK
 801b676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801b678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b67a:	643b      	str	r3, [r7, #64]	@ 0x40
 801b67c:	2301      	movs	r3, #1
 801b67e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b682:	f383 8810 	msr	PRIMASK, r3
}
 801b686:	46c0      	nop			@ (mov r8, r8)
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	689a      	ldr	r2, [r3, #8]
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	2101      	movs	r1, #1
 801b694:	438a      	bics	r2, r1
 801b696:	609a      	str	r2, [r3, #8]
 801b698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b69a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b69e:	f383 8810 	msr	PRIMASK, r3
}
 801b6a2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	2280      	movs	r2, #128	@ 0x80
 801b6a8:	2120      	movs	r1, #32
 801b6aa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	4a36      	ldr	r2, [pc, #216]	@ (801b798 <UART_RxISR_16BIT+0x1c4>)
 801b6be:	4293      	cmp	r3, r2
 801b6c0:	d01f      	beq.n	801b702 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	685a      	ldr	r2, [r3, #4]
 801b6c8:	2380      	movs	r3, #128	@ 0x80
 801b6ca:	041b      	lsls	r3, r3, #16
 801b6cc:	4013      	ands	r3, r2
 801b6ce:	d018      	beq.n	801b702 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6d0:	f3ef 8310 	mrs	r3, PRIMASK
 801b6d4:	617b      	str	r3, [r7, #20]
  return(result);
 801b6d6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b6da:	2301      	movs	r3, #1
 801b6dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6de:	69bb      	ldr	r3, [r7, #24]
 801b6e0:	f383 8810 	msr	PRIMASK, r3
}
 801b6e4:	46c0      	nop			@ (mov r8, r8)
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	681a      	ldr	r2, [r3, #0]
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	492a      	ldr	r1, [pc, #168]	@ (801b79c <UART_RxISR_16BIT+0x1c8>)
 801b6f2:	400a      	ands	r2, r1
 801b6f4:	601a      	str	r2, [r3, #0]
 801b6f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b6f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6fa:	69fb      	ldr	r3, [r7, #28]
 801b6fc:	f383 8810 	msr	PRIMASK, r3
}
 801b700:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b706:	2b01      	cmp	r3, #1
 801b708:	d130      	bne.n	801b76c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	2200      	movs	r2, #0
 801b70e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b710:	f3ef 8310 	mrs	r3, PRIMASK
 801b714:	60bb      	str	r3, [r7, #8]
  return(result);
 801b716:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b718:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b71a:	2301      	movs	r3, #1
 801b71c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	f383 8810 	msr	PRIMASK, r3
}
 801b724:	46c0      	nop			@ (mov r8, r8)
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	681a      	ldr	r2, [r3, #0]
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	2110      	movs	r1, #16
 801b732:	438a      	bics	r2, r1
 801b734:	601a      	str	r2, [r3, #0]
 801b736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b73a:	693b      	ldr	r3, [r7, #16]
 801b73c:	f383 8810 	msr	PRIMASK, r3
}
 801b740:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	69db      	ldr	r3, [r3, #28]
 801b748:	2210      	movs	r2, #16
 801b74a:	4013      	ands	r3, r2
 801b74c:	2b10      	cmp	r3, #16
 801b74e:	d103      	bne.n	801b758 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	2210      	movs	r2, #16
 801b756:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	22ac      	movs	r2, #172	@ 0xac
 801b75c:	589b      	ldr	r3, [r3, r2]
 801b75e:	687a      	ldr	r2, [r7, #4]
 801b760:	2158      	movs	r1, #88	@ 0x58
 801b762:	5a51      	ldrh	r1, [r2, r1]
 801b764:	687a      	ldr	r2, [r7, #4]
 801b766:	0010      	movs	r0, r2
 801b768:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b76a:	e00e      	b.n	801b78a <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	2294      	movs	r2, #148	@ 0x94
 801b770:	589b      	ldr	r3, [r3, r2]
 801b772:	687a      	ldr	r2, [r7, #4]
 801b774:	0010      	movs	r0, r2
 801b776:	4798      	blx	r3
}
 801b778:	e007      	b.n	801b78a <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	699a      	ldr	r2, [r3, #24]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	2108      	movs	r1, #8
 801b786:	430a      	orrs	r2, r1
 801b788:	619a      	str	r2, [r3, #24]
}
 801b78a:	46c0      	nop			@ (mov r8, r8)
 801b78c:	46bd      	mov	sp, r7
 801b78e:	b014      	add	sp, #80	@ 0x50
 801b790:	bd80      	pop	{r7, pc}
 801b792:	46c0      	nop			@ (mov r8, r8)
 801b794:	fffffedf 	.word	0xfffffedf
 801b798:	40004800 	.word	0x40004800
 801b79c:	fbffffff 	.word	0xfbffffff

0801b7a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b082      	sub	sp, #8
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b7a8:	46c0      	nop			@ (mov r8, r8)
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	b002      	add	sp, #8
 801b7ae:	bd80      	pop	{r7, pc}

0801b7b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b084      	sub	sp, #16
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	2244      	movs	r2, #68	@ 0x44
 801b7bc:	2100      	movs	r1, #0
 801b7be:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801b7c0:	4b05      	ldr	r3, [pc, #20]	@ (801b7d8 <USB_EnableGlobalInt+0x28>)
 801b7c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	b299      	uxth	r1, r3
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	2240      	movs	r2, #64	@ 0x40
 801b7cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b7ce:	2300      	movs	r3, #0
}
 801b7d0:	0018      	movs	r0, r3
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	b004      	add	sp, #16
 801b7d6:	bd80      	pop	{r7, pc}
 801b7d8:	0000bf80 	.word	0x0000bf80

0801b7dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801b7dc:	b580      	push	{r7, lr}
 801b7de:	b084      	sub	sp, #16
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801b7e4:	4b09      	ldr	r3, [pc, #36]	@ (801b80c <USB_DisableGlobalInt+0x30>)
 801b7e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	2240      	movs	r2, #64	@ 0x40
 801b7ec:	5a9b      	ldrh	r3, [r3, r2]
 801b7ee:	b29b      	uxth	r3, r3
 801b7f0:	68fa      	ldr	r2, [r7, #12]
 801b7f2:	b292      	uxth	r2, r2
 801b7f4:	43d2      	mvns	r2, r2
 801b7f6:	b292      	uxth	r2, r2
 801b7f8:	4013      	ands	r3, r2
 801b7fa:	b299      	uxth	r1, r3
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2240      	movs	r2, #64	@ 0x40
 801b800:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b802:	2300      	movs	r3, #0
}
 801b804:	0018      	movs	r0, r3
 801b806:	46bd      	mov	sp, r7
 801b808:	b004      	add	sp, #16
 801b80a:	bd80      	pop	{r7, pc}
 801b80c:	0000bf80 	.word	0x0000bf80

0801b810 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801b810:	b084      	sub	sp, #16
 801b812:	b590      	push	{r4, r7, lr}
 801b814:	b083      	sub	sp, #12
 801b816:	af00      	add	r7, sp, #0
 801b818:	6078      	str	r0, [r7, #4]
 801b81a:	2004      	movs	r0, #4
 801b81c:	2410      	movs	r4, #16
 801b81e:	1900      	adds	r0, r0, r4
 801b820:	2408      	movs	r4, #8
 801b822:	46a4      	mov	ip, r4
 801b824:	44bc      	add	ip, r7
 801b826:	4460      	add	r0, ip
 801b828:	6001      	str	r1, [r0, #0]
 801b82a:	6042      	str	r2, [r0, #4]
 801b82c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	2240      	movs	r2, #64	@ 0x40
 801b832:	2101      	movs	r1, #1
 801b834:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	2240      	movs	r2, #64	@ 0x40
 801b83a:	2100      	movs	r1, #0
 801b83c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	2244      	movs	r2, #68	@ 0x44
 801b842:	2100      	movs	r1, #0
 801b844:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	2250      	movs	r2, #80	@ 0x50
 801b84a:	2100      	movs	r1, #0
 801b84c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b84e:	2300      	movs	r3, #0
}
 801b850:	0018      	movs	r0, r3
 801b852:	46bd      	mov	sp, r7
 801b854:	b003      	add	sp, #12
 801b856:	bc90      	pop	{r4, r7}
 801b858:	bc08      	pop	{r3}
 801b85a:	b004      	add	sp, #16
 801b85c:	4718      	bx	r3
	...

0801b860 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b860:	b580      	push	{r7, lr}
 801b862:	b09c      	sub	sp, #112	@ 0x70
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
 801b868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801b86a:	236f      	movs	r3, #111	@ 0x6f
 801b86c:	18fb      	adds	r3, r7, r3
 801b86e:	2200      	movs	r2, #0
 801b870:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801b872:	687a      	ldr	r2, [r7, #4]
 801b874:	683b      	ldr	r3, [r7, #0]
 801b876:	781b      	ldrb	r3, [r3, #0]
 801b878:	009b      	lsls	r3, r3, #2
 801b87a:	18d3      	adds	r3, r2, r3
 801b87c:	881b      	ldrh	r3, [r3, #0]
 801b87e:	b29a      	uxth	r2, r3
 801b880:	236c      	movs	r3, #108	@ 0x6c
 801b882:	18fb      	adds	r3, r7, r3
 801b884:	49a3      	ldr	r1, [pc, #652]	@ (801bb14 <USB_ActivateEndpoint+0x2b4>)
 801b886:	400a      	ands	r2, r1
 801b888:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801b88a:	683b      	ldr	r3, [r7, #0]
 801b88c:	78db      	ldrb	r3, [r3, #3]
 801b88e:	2b03      	cmp	r3, #3
 801b890:	d017      	beq.n	801b8c2 <USB_ActivateEndpoint+0x62>
 801b892:	dc28      	bgt.n	801b8e6 <USB_ActivateEndpoint+0x86>
 801b894:	2b02      	cmp	r3, #2
 801b896:	d00e      	beq.n	801b8b6 <USB_ActivateEndpoint+0x56>
 801b898:	dc25      	bgt.n	801b8e6 <USB_ActivateEndpoint+0x86>
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d002      	beq.n	801b8a4 <USB_ActivateEndpoint+0x44>
 801b89e:	2b01      	cmp	r3, #1
 801b8a0:	d018      	beq.n	801b8d4 <USB_ActivateEndpoint+0x74>
 801b8a2:	e020      	b.n	801b8e6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801b8a4:	226c      	movs	r2, #108	@ 0x6c
 801b8a6:	18bb      	adds	r3, r7, r2
 801b8a8:	18ba      	adds	r2, r7, r2
 801b8aa:	8812      	ldrh	r2, [r2, #0]
 801b8ac:	2180      	movs	r1, #128	@ 0x80
 801b8ae:	0089      	lsls	r1, r1, #2
 801b8b0:	430a      	orrs	r2, r1
 801b8b2:	801a      	strh	r2, [r3, #0]
      break;
 801b8b4:	e01c      	b.n	801b8f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801b8b6:	226c      	movs	r2, #108	@ 0x6c
 801b8b8:	18bb      	adds	r3, r7, r2
 801b8ba:	18ba      	adds	r2, r7, r2
 801b8bc:	8812      	ldrh	r2, [r2, #0]
 801b8be:	801a      	strh	r2, [r3, #0]
      break;
 801b8c0:	e016      	b.n	801b8f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801b8c2:	226c      	movs	r2, #108	@ 0x6c
 801b8c4:	18bb      	adds	r3, r7, r2
 801b8c6:	18ba      	adds	r2, r7, r2
 801b8c8:	8812      	ldrh	r2, [r2, #0]
 801b8ca:	21c0      	movs	r1, #192	@ 0xc0
 801b8cc:	00c9      	lsls	r1, r1, #3
 801b8ce:	430a      	orrs	r2, r1
 801b8d0:	801a      	strh	r2, [r3, #0]
      break;
 801b8d2:	e00d      	b.n	801b8f0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801b8d4:	226c      	movs	r2, #108	@ 0x6c
 801b8d6:	18bb      	adds	r3, r7, r2
 801b8d8:	18ba      	adds	r2, r7, r2
 801b8da:	8812      	ldrh	r2, [r2, #0]
 801b8dc:	2180      	movs	r1, #128	@ 0x80
 801b8de:	00c9      	lsls	r1, r1, #3
 801b8e0:	430a      	orrs	r2, r1
 801b8e2:	801a      	strh	r2, [r3, #0]
      break;
 801b8e4:	e004      	b.n	801b8f0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801b8e6:	236f      	movs	r3, #111	@ 0x6f
 801b8e8:	18fb      	adds	r3, r7, r3
 801b8ea:	2201      	movs	r2, #1
 801b8ec:	701a      	strb	r2, [r3, #0]
      break;
 801b8ee:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801b8f0:	687a      	ldr	r2, [r7, #4]
 801b8f2:	683b      	ldr	r3, [r7, #0]
 801b8f4:	781b      	ldrb	r3, [r3, #0]
 801b8f6:	009b      	lsls	r3, r3, #2
 801b8f8:	18d3      	adds	r3, r2, r3
 801b8fa:	226c      	movs	r2, #108	@ 0x6c
 801b8fc:	18ba      	adds	r2, r7, r2
 801b8fe:	8812      	ldrh	r2, [r2, #0]
 801b900:	4985      	ldr	r1, [pc, #532]	@ (801bb18 <USB_ActivateEndpoint+0x2b8>)
 801b902:	430a      	orrs	r2, r1
 801b904:	b292      	uxth	r2, r2
 801b906:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801b908:	687a      	ldr	r2, [r7, #4]
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	781b      	ldrb	r3, [r3, #0]
 801b90e:	009b      	lsls	r3, r3, #2
 801b910:	18d3      	adds	r3, r2, r3
 801b912:	881b      	ldrh	r3, [r3, #0]
 801b914:	b29b      	uxth	r3, r3
 801b916:	b21b      	sxth	r3, r3
 801b918:	4a80      	ldr	r2, [pc, #512]	@ (801bb1c <USB_ActivateEndpoint+0x2bc>)
 801b91a:	4013      	ands	r3, r2
 801b91c:	b21a      	sxth	r2, r3
 801b91e:	683b      	ldr	r3, [r7, #0]
 801b920:	781b      	ldrb	r3, [r3, #0]
 801b922:	b21b      	sxth	r3, r3
 801b924:	4313      	orrs	r3, r2
 801b926:	b21a      	sxth	r2, r3
 801b928:	2166      	movs	r1, #102	@ 0x66
 801b92a:	187b      	adds	r3, r7, r1
 801b92c:	801a      	strh	r2, [r3, #0]
 801b92e:	687a      	ldr	r2, [r7, #4]
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	781b      	ldrb	r3, [r3, #0]
 801b934:	009b      	lsls	r3, r3, #2
 801b936:	18d3      	adds	r3, r2, r3
 801b938:	187a      	adds	r2, r7, r1
 801b93a:	8812      	ldrh	r2, [r2, #0]
 801b93c:	4976      	ldr	r1, [pc, #472]	@ (801bb18 <USB_ActivateEndpoint+0x2b8>)
 801b93e:	430a      	orrs	r2, r1
 801b940:	b292      	uxth	r2, r2
 801b942:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801b944:	683b      	ldr	r3, [r7, #0]
 801b946:	7b1b      	ldrb	r3, [r3, #12]
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d000      	beq.n	801b94e <USB_ActivateEndpoint+0xee>
 801b94c:	e178      	b.n	801bc40 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801b94e:	683b      	ldr	r3, [r7, #0]
 801b950:	785b      	ldrb	r3, [r3, #1]
 801b952:	2b00      	cmp	r3, #0
 801b954:	d100      	bne.n	801b958 <USB_ActivateEndpoint+0xf8>
 801b956:	e07a      	b.n	801ba4e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	61bb      	str	r3, [r7, #24]
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	2250      	movs	r2, #80	@ 0x50
 801b960:	5a9b      	ldrh	r3, [r3, r2]
 801b962:	b29b      	uxth	r3, r3
 801b964:	001a      	movs	r2, r3
 801b966:	69bb      	ldr	r3, [r7, #24]
 801b968:	189b      	adds	r3, r3, r2
 801b96a:	61bb      	str	r3, [r7, #24]
 801b96c:	683b      	ldr	r3, [r7, #0]
 801b96e:	781b      	ldrb	r3, [r3, #0]
 801b970:	00da      	lsls	r2, r3, #3
 801b972:	69bb      	ldr	r3, [r7, #24]
 801b974:	18d3      	adds	r3, r2, r3
 801b976:	2280      	movs	r2, #128	@ 0x80
 801b978:	00d2      	lsls	r2, r2, #3
 801b97a:	4694      	mov	ip, r2
 801b97c:	4463      	add	r3, ip
 801b97e:	617b      	str	r3, [r7, #20]
 801b980:	683b      	ldr	r3, [r7, #0]
 801b982:	88db      	ldrh	r3, [r3, #6]
 801b984:	085b      	lsrs	r3, r3, #1
 801b986:	b29b      	uxth	r3, r3
 801b988:	18db      	adds	r3, r3, r3
 801b98a:	b29a      	uxth	r2, r3
 801b98c:	697b      	ldr	r3, [r7, #20]
 801b98e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801b990:	687a      	ldr	r2, [r7, #4]
 801b992:	683b      	ldr	r3, [r7, #0]
 801b994:	781b      	ldrb	r3, [r3, #0]
 801b996:	009b      	lsls	r3, r3, #2
 801b998:	18d2      	adds	r2, r2, r3
 801b99a:	2112      	movs	r1, #18
 801b99c:	187b      	adds	r3, r7, r1
 801b99e:	8812      	ldrh	r2, [r2, #0]
 801b9a0:	801a      	strh	r2, [r3, #0]
 801b9a2:	187b      	adds	r3, r7, r1
 801b9a4:	881b      	ldrh	r3, [r3, #0]
 801b9a6:	2240      	movs	r2, #64	@ 0x40
 801b9a8:	4013      	ands	r3, r2
 801b9aa:	d016      	beq.n	801b9da <USB_ActivateEndpoint+0x17a>
 801b9ac:	687a      	ldr	r2, [r7, #4]
 801b9ae:	683b      	ldr	r3, [r7, #0]
 801b9b0:	781b      	ldrb	r3, [r3, #0]
 801b9b2:	009b      	lsls	r3, r3, #2
 801b9b4:	18d3      	adds	r3, r2, r3
 801b9b6:	881b      	ldrh	r3, [r3, #0]
 801b9b8:	b29a      	uxth	r2, r3
 801b9ba:	2010      	movs	r0, #16
 801b9bc:	183b      	adds	r3, r7, r0
 801b9be:	4957      	ldr	r1, [pc, #348]	@ (801bb1c <USB_ActivateEndpoint+0x2bc>)
 801b9c0:	400a      	ands	r2, r1
 801b9c2:	801a      	strh	r2, [r3, #0]
 801b9c4:	687a      	ldr	r2, [r7, #4]
 801b9c6:	683b      	ldr	r3, [r7, #0]
 801b9c8:	781b      	ldrb	r3, [r3, #0]
 801b9ca:	009b      	lsls	r3, r3, #2
 801b9cc:	18d3      	adds	r3, r2, r3
 801b9ce:	183a      	adds	r2, r7, r0
 801b9d0:	8812      	ldrh	r2, [r2, #0]
 801b9d2:	4953      	ldr	r1, [pc, #332]	@ (801bb20 <USB_ActivateEndpoint+0x2c0>)
 801b9d4:	430a      	orrs	r2, r1
 801b9d6:	b292      	uxth	r2, r2
 801b9d8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b9da:	683b      	ldr	r3, [r7, #0]
 801b9dc:	78db      	ldrb	r3, [r3, #3]
 801b9de:	2b01      	cmp	r3, #1
 801b9e0:	d01d      	beq.n	801ba1e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b9e2:	687a      	ldr	r2, [r7, #4]
 801b9e4:	683b      	ldr	r3, [r7, #0]
 801b9e6:	781b      	ldrb	r3, [r3, #0]
 801b9e8:	009b      	lsls	r3, r3, #2
 801b9ea:	18d3      	adds	r3, r2, r3
 801b9ec:	881b      	ldrh	r3, [r3, #0]
 801b9ee:	b29a      	uxth	r2, r3
 801b9f0:	200c      	movs	r0, #12
 801b9f2:	183b      	adds	r3, r7, r0
 801b9f4:	494b      	ldr	r1, [pc, #300]	@ (801bb24 <USB_ActivateEndpoint+0x2c4>)
 801b9f6:	400a      	ands	r2, r1
 801b9f8:	801a      	strh	r2, [r3, #0]
 801b9fa:	183b      	adds	r3, r7, r0
 801b9fc:	183a      	adds	r2, r7, r0
 801b9fe:	8812      	ldrh	r2, [r2, #0]
 801ba00:	2120      	movs	r1, #32
 801ba02:	404a      	eors	r2, r1
 801ba04:	801a      	strh	r2, [r3, #0]
 801ba06:	687a      	ldr	r2, [r7, #4]
 801ba08:	683b      	ldr	r3, [r7, #0]
 801ba0a:	781b      	ldrb	r3, [r3, #0]
 801ba0c:	009b      	lsls	r3, r3, #2
 801ba0e:	18d3      	adds	r3, r2, r3
 801ba10:	183a      	adds	r2, r7, r0
 801ba12:	8812      	ldrh	r2, [r2, #0]
 801ba14:	4940      	ldr	r1, [pc, #256]	@ (801bb18 <USB_ActivateEndpoint+0x2b8>)
 801ba16:	430a      	orrs	r2, r1
 801ba18:	b292      	uxth	r2, r2
 801ba1a:	801a      	strh	r2, [r3, #0]
 801ba1c:	e2b4      	b.n	801bf88 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ba1e:	687a      	ldr	r2, [r7, #4]
 801ba20:	683b      	ldr	r3, [r7, #0]
 801ba22:	781b      	ldrb	r3, [r3, #0]
 801ba24:	009b      	lsls	r3, r3, #2
 801ba26:	18d3      	adds	r3, r2, r3
 801ba28:	881b      	ldrh	r3, [r3, #0]
 801ba2a:	b29a      	uxth	r2, r3
 801ba2c:	200e      	movs	r0, #14
 801ba2e:	183b      	adds	r3, r7, r0
 801ba30:	493c      	ldr	r1, [pc, #240]	@ (801bb24 <USB_ActivateEndpoint+0x2c4>)
 801ba32:	400a      	ands	r2, r1
 801ba34:	801a      	strh	r2, [r3, #0]
 801ba36:	687a      	ldr	r2, [r7, #4]
 801ba38:	683b      	ldr	r3, [r7, #0]
 801ba3a:	781b      	ldrb	r3, [r3, #0]
 801ba3c:	009b      	lsls	r3, r3, #2
 801ba3e:	18d3      	adds	r3, r2, r3
 801ba40:	183a      	adds	r2, r7, r0
 801ba42:	8812      	ldrh	r2, [r2, #0]
 801ba44:	4934      	ldr	r1, [pc, #208]	@ (801bb18 <USB_ActivateEndpoint+0x2b8>)
 801ba46:	430a      	orrs	r2, r1
 801ba48:	b292      	uxth	r2, r2
 801ba4a:	801a      	strh	r2, [r3, #0]
 801ba4c:	e29c      	b.n	801bf88 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	633b      	str	r3, [r7, #48]	@ 0x30
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	2250      	movs	r2, #80	@ 0x50
 801ba56:	5a9b      	ldrh	r3, [r3, r2]
 801ba58:	b29b      	uxth	r3, r3
 801ba5a:	001a      	movs	r2, r3
 801ba5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba5e:	189b      	adds	r3, r3, r2
 801ba60:	633b      	str	r3, [r7, #48]	@ 0x30
 801ba62:	683b      	ldr	r3, [r7, #0]
 801ba64:	781b      	ldrb	r3, [r3, #0]
 801ba66:	00da      	lsls	r2, r3, #3
 801ba68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba6a:	18d3      	adds	r3, r2, r3
 801ba6c:	4a2e      	ldr	r2, [pc, #184]	@ (801bb28 <USB_ActivateEndpoint+0x2c8>)
 801ba6e:	4694      	mov	ip, r2
 801ba70:	4463      	add	r3, ip
 801ba72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ba74:	683b      	ldr	r3, [r7, #0]
 801ba76:	88db      	ldrh	r3, [r3, #6]
 801ba78:	085b      	lsrs	r3, r3, #1
 801ba7a:	b29b      	uxth	r3, r3
 801ba7c:	18db      	adds	r3, r3, r3
 801ba7e:	b29a      	uxth	r2, r3
 801ba80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ba82:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	2250      	movs	r2, #80	@ 0x50
 801ba8c:	5a9b      	ldrh	r3, [r3, r2]
 801ba8e:	b29b      	uxth	r3, r3
 801ba90:	001a      	movs	r2, r3
 801ba92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba94:	189b      	adds	r3, r3, r2
 801ba96:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ba98:	683b      	ldr	r3, [r7, #0]
 801ba9a:	781b      	ldrb	r3, [r3, #0]
 801ba9c:	00da      	lsls	r2, r3, #3
 801ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801baa0:	18d3      	adds	r3, r2, r3
 801baa2:	4a22      	ldr	r2, [pc, #136]	@ (801bb2c <USB_ActivateEndpoint+0x2cc>)
 801baa4:	4694      	mov	ip, r2
 801baa6:	4463      	add	r3, ip
 801baa8:	627b      	str	r3, [r7, #36]	@ 0x24
 801baaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baac:	881b      	ldrh	r3, [r3, #0]
 801baae:	b29b      	uxth	r3, r3
 801bab0:	059b      	lsls	r3, r3, #22
 801bab2:	0d9b      	lsrs	r3, r3, #22
 801bab4:	b29a      	uxth	r2, r3
 801bab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bab8:	801a      	strh	r2, [r3, #0]
 801baba:	683b      	ldr	r3, [r7, #0]
 801babc:	691b      	ldr	r3, [r3, #16]
 801babe:	2b3e      	cmp	r3, #62	@ 0x3e
 801bac0:	d91a      	bls.n	801baf8 <USB_ActivateEndpoint+0x298>
 801bac2:	683b      	ldr	r3, [r7, #0]
 801bac4:	691b      	ldr	r3, [r3, #16]
 801bac6:	095b      	lsrs	r3, r3, #5
 801bac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801baca:	683b      	ldr	r3, [r7, #0]
 801bacc:	691b      	ldr	r3, [r3, #16]
 801bace:	221f      	movs	r2, #31
 801bad0:	4013      	ands	r3, r2
 801bad2:	d102      	bne.n	801bada <USB_ActivateEndpoint+0x27a>
 801bad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bad6:	3b01      	subs	r3, #1
 801bad8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801badc:	881b      	ldrh	r3, [r3, #0]
 801bade:	b29a      	uxth	r2, r3
 801bae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bae2:	b29b      	uxth	r3, r3
 801bae4:	029b      	lsls	r3, r3, #10
 801bae6:	b29b      	uxth	r3, r3
 801bae8:	4313      	orrs	r3, r2
 801baea:	b29b      	uxth	r3, r3
 801baec:	4a10      	ldr	r2, [pc, #64]	@ (801bb30 <USB_ActivateEndpoint+0x2d0>)
 801baee:	4313      	orrs	r3, r2
 801baf0:	b29a      	uxth	r2, r3
 801baf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baf4:	801a      	strh	r2, [r3, #0]
 801baf6:	e034      	b.n	801bb62 <USB_ActivateEndpoint+0x302>
 801baf8:	683b      	ldr	r3, [r7, #0]
 801bafa:	691b      	ldr	r3, [r3, #16]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d119      	bne.n	801bb34 <USB_ActivateEndpoint+0x2d4>
 801bb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb02:	881b      	ldrh	r3, [r3, #0]
 801bb04:	b29b      	uxth	r3, r3
 801bb06:	4a0a      	ldr	r2, [pc, #40]	@ (801bb30 <USB_ActivateEndpoint+0x2d0>)
 801bb08:	4313      	orrs	r3, r2
 801bb0a:	b29a      	uxth	r2, r3
 801bb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb0e:	801a      	strh	r2, [r3, #0]
 801bb10:	e027      	b.n	801bb62 <USB_ActivateEndpoint+0x302>
 801bb12:	46c0      	nop			@ (mov r8, r8)
 801bb14:	ffff898f 	.word	0xffff898f
 801bb18:	ffff8080 	.word	0xffff8080
 801bb1c:	ffff8f8f 	.word	0xffff8f8f
 801bb20:	ffff80c0 	.word	0xffff80c0
 801bb24:	ffff8fbf 	.word	0xffff8fbf
 801bb28:	00000404 	.word	0x00000404
 801bb2c:	00000406 	.word	0x00000406
 801bb30:	ffff8000 	.word	0xffff8000
 801bb34:	683b      	ldr	r3, [r7, #0]
 801bb36:	691b      	ldr	r3, [r3, #16]
 801bb38:	085b      	lsrs	r3, r3, #1
 801bb3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bb3c:	683b      	ldr	r3, [r7, #0]
 801bb3e:	691b      	ldr	r3, [r3, #16]
 801bb40:	2201      	movs	r2, #1
 801bb42:	4013      	ands	r3, r2
 801bb44:	d002      	beq.n	801bb4c <USB_ActivateEndpoint+0x2ec>
 801bb46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bb48:	3301      	adds	r3, #1
 801bb4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb4e:	881b      	ldrh	r3, [r3, #0]
 801bb50:	b29a      	uxth	r2, r3
 801bb52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bb54:	b29b      	uxth	r3, r3
 801bb56:	029b      	lsls	r3, r3, #10
 801bb58:	b29b      	uxth	r3, r3
 801bb5a:	4313      	orrs	r3, r2
 801bb5c:	b29a      	uxth	r2, r3
 801bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bb62:	687a      	ldr	r2, [r7, #4]
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	781b      	ldrb	r3, [r3, #0]
 801bb68:	009b      	lsls	r3, r3, #2
 801bb6a:	18d2      	adds	r2, r2, r3
 801bb6c:	2122      	movs	r1, #34	@ 0x22
 801bb6e:	187b      	adds	r3, r7, r1
 801bb70:	8812      	ldrh	r2, [r2, #0]
 801bb72:	801a      	strh	r2, [r3, #0]
 801bb74:	187b      	adds	r3, r7, r1
 801bb76:	881a      	ldrh	r2, [r3, #0]
 801bb78:	2380      	movs	r3, #128	@ 0x80
 801bb7a:	01db      	lsls	r3, r3, #7
 801bb7c:	4013      	ands	r3, r2
 801bb7e:	d016      	beq.n	801bbae <USB_ActivateEndpoint+0x34e>
 801bb80:	687a      	ldr	r2, [r7, #4]
 801bb82:	683b      	ldr	r3, [r7, #0]
 801bb84:	781b      	ldrb	r3, [r3, #0]
 801bb86:	009b      	lsls	r3, r3, #2
 801bb88:	18d3      	adds	r3, r2, r3
 801bb8a:	881b      	ldrh	r3, [r3, #0]
 801bb8c:	b29a      	uxth	r2, r3
 801bb8e:	2020      	movs	r0, #32
 801bb90:	183b      	adds	r3, r7, r0
 801bb92:	49dd      	ldr	r1, [pc, #884]	@ (801bf08 <USB_ActivateEndpoint+0x6a8>)
 801bb94:	400a      	ands	r2, r1
 801bb96:	801a      	strh	r2, [r3, #0]
 801bb98:	687a      	ldr	r2, [r7, #4]
 801bb9a:	683b      	ldr	r3, [r7, #0]
 801bb9c:	781b      	ldrb	r3, [r3, #0]
 801bb9e:	009b      	lsls	r3, r3, #2
 801bba0:	18d3      	adds	r3, r2, r3
 801bba2:	183a      	adds	r2, r7, r0
 801bba4:	8812      	ldrh	r2, [r2, #0]
 801bba6:	49d9      	ldr	r1, [pc, #868]	@ (801bf0c <USB_ActivateEndpoint+0x6ac>)
 801bba8:	430a      	orrs	r2, r1
 801bbaa:	b292      	uxth	r2, r2
 801bbac:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801bbae:	683b      	ldr	r3, [r7, #0]
 801bbb0:	781b      	ldrb	r3, [r3, #0]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d125      	bne.n	801bc02 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bbb6:	687a      	ldr	r2, [r7, #4]
 801bbb8:	683b      	ldr	r3, [r7, #0]
 801bbba:	781b      	ldrb	r3, [r3, #0]
 801bbbc:	009b      	lsls	r3, r3, #2
 801bbbe:	18d3      	adds	r3, r2, r3
 801bbc0:	881b      	ldrh	r3, [r3, #0]
 801bbc2:	b29a      	uxth	r2, r3
 801bbc4:	201c      	movs	r0, #28
 801bbc6:	183b      	adds	r3, r7, r0
 801bbc8:	49d1      	ldr	r1, [pc, #836]	@ (801bf10 <USB_ActivateEndpoint+0x6b0>)
 801bbca:	400a      	ands	r2, r1
 801bbcc:	801a      	strh	r2, [r3, #0]
 801bbce:	183b      	adds	r3, r7, r0
 801bbd0:	183a      	adds	r2, r7, r0
 801bbd2:	8812      	ldrh	r2, [r2, #0]
 801bbd4:	2180      	movs	r1, #128	@ 0x80
 801bbd6:	0149      	lsls	r1, r1, #5
 801bbd8:	404a      	eors	r2, r1
 801bbda:	801a      	strh	r2, [r3, #0]
 801bbdc:	183b      	adds	r3, r7, r0
 801bbde:	183a      	adds	r2, r7, r0
 801bbe0:	8812      	ldrh	r2, [r2, #0]
 801bbe2:	2180      	movs	r1, #128	@ 0x80
 801bbe4:	0189      	lsls	r1, r1, #6
 801bbe6:	404a      	eors	r2, r1
 801bbe8:	801a      	strh	r2, [r3, #0]
 801bbea:	687a      	ldr	r2, [r7, #4]
 801bbec:	683b      	ldr	r3, [r7, #0]
 801bbee:	781b      	ldrb	r3, [r3, #0]
 801bbf0:	009b      	lsls	r3, r3, #2
 801bbf2:	18d3      	adds	r3, r2, r3
 801bbf4:	183a      	adds	r2, r7, r0
 801bbf6:	8812      	ldrh	r2, [r2, #0]
 801bbf8:	49c6      	ldr	r1, [pc, #792]	@ (801bf14 <USB_ActivateEndpoint+0x6b4>)
 801bbfa:	430a      	orrs	r2, r1
 801bbfc:	b292      	uxth	r2, r2
 801bbfe:	801a      	strh	r2, [r3, #0]
 801bc00:	e1c2      	b.n	801bf88 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801bc02:	687a      	ldr	r2, [r7, #4]
 801bc04:	683b      	ldr	r3, [r7, #0]
 801bc06:	781b      	ldrb	r3, [r3, #0]
 801bc08:	009b      	lsls	r3, r3, #2
 801bc0a:	18d3      	adds	r3, r2, r3
 801bc0c:	881b      	ldrh	r3, [r3, #0]
 801bc0e:	b29a      	uxth	r2, r3
 801bc10:	201e      	movs	r0, #30
 801bc12:	183b      	adds	r3, r7, r0
 801bc14:	49be      	ldr	r1, [pc, #760]	@ (801bf10 <USB_ActivateEndpoint+0x6b0>)
 801bc16:	400a      	ands	r2, r1
 801bc18:	801a      	strh	r2, [r3, #0]
 801bc1a:	183b      	adds	r3, r7, r0
 801bc1c:	183a      	adds	r2, r7, r0
 801bc1e:	8812      	ldrh	r2, [r2, #0]
 801bc20:	2180      	movs	r1, #128	@ 0x80
 801bc22:	0189      	lsls	r1, r1, #6
 801bc24:	404a      	eors	r2, r1
 801bc26:	801a      	strh	r2, [r3, #0]
 801bc28:	687a      	ldr	r2, [r7, #4]
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	781b      	ldrb	r3, [r3, #0]
 801bc2e:	009b      	lsls	r3, r3, #2
 801bc30:	18d3      	adds	r3, r2, r3
 801bc32:	183a      	adds	r2, r7, r0
 801bc34:	8812      	ldrh	r2, [r2, #0]
 801bc36:	49b7      	ldr	r1, [pc, #732]	@ (801bf14 <USB_ActivateEndpoint+0x6b4>)
 801bc38:	430a      	orrs	r2, r1
 801bc3a:	b292      	uxth	r2, r2
 801bc3c:	801a      	strh	r2, [r3, #0]
 801bc3e:	e1a3      	b.n	801bf88 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801bc40:	683b      	ldr	r3, [r7, #0]
 801bc42:	78db      	ldrb	r3, [r3, #3]
 801bc44:	2b02      	cmp	r3, #2
 801bc46:	d117      	bne.n	801bc78 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801bc48:	687a      	ldr	r2, [r7, #4]
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	781b      	ldrb	r3, [r3, #0]
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	18d3      	adds	r3, r2, r3
 801bc52:	881b      	ldrh	r3, [r3, #0]
 801bc54:	b29a      	uxth	r2, r3
 801bc56:	2062      	movs	r0, #98	@ 0x62
 801bc58:	183b      	adds	r3, r7, r0
 801bc5a:	49ab      	ldr	r1, [pc, #684]	@ (801bf08 <USB_ActivateEndpoint+0x6a8>)
 801bc5c:	400a      	ands	r2, r1
 801bc5e:	801a      	strh	r2, [r3, #0]
 801bc60:	687a      	ldr	r2, [r7, #4]
 801bc62:	683b      	ldr	r3, [r7, #0]
 801bc64:	781b      	ldrb	r3, [r3, #0]
 801bc66:	009b      	lsls	r3, r3, #2
 801bc68:	18d3      	adds	r3, r2, r3
 801bc6a:	183a      	adds	r2, r7, r0
 801bc6c:	8812      	ldrh	r2, [r2, #0]
 801bc6e:	49aa      	ldr	r1, [pc, #680]	@ (801bf18 <USB_ActivateEndpoint+0x6b8>)
 801bc70:	430a      	orrs	r2, r1
 801bc72:	b292      	uxth	r2, r2
 801bc74:	801a      	strh	r2, [r3, #0]
 801bc76:	e016      	b.n	801bca6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801bc78:	687a      	ldr	r2, [r7, #4]
 801bc7a:	683b      	ldr	r3, [r7, #0]
 801bc7c:	781b      	ldrb	r3, [r3, #0]
 801bc7e:	009b      	lsls	r3, r3, #2
 801bc80:	18d3      	adds	r3, r2, r3
 801bc82:	881b      	ldrh	r3, [r3, #0]
 801bc84:	b29a      	uxth	r2, r3
 801bc86:	2064      	movs	r0, #100	@ 0x64
 801bc88:	183b      	adds	r3, r7, r0
 801bc8a:	49a4      	ldr	r1, [pc, #656]	@ (801bf1c <USB_ActivateEndpoint+0x6bc>)
 801bc8c:	400a      	ands	r2, r1
 801bc8e:	801a      	strh	r2, [r3, #0]
 801bc90:	687a      	ldr	r2, [r7, #4]
 801bc92:	683b      	ldr	r3, [r7, #0]
 801bc94:	781b      	ldrb	r3, [r3, #0]
 801bc96:	009b      	lsls	r3, r3, #2
 801bc98:	18d3      	adds	r3, r2, r3
 801bc9a:	183a      	adds	r2, r7, r0
 801bc9c:	8812      	ldrh	r2, [r2, #0]
 801bc9e:	499d      	ldr	r1, [pc, #628]	@ (801bf14 <USB_ActivateEndpoint+0x6b4>)
 801bca0:	430a      	orrs	r2, r1
 801bca2:	b292      	uxth	r2, r2
 801bca4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	2250      	movs	r2, #80	@ 0x50
 801bcae:	5a9b      	ldrh	r3, [r3, r2]
 801bcb0:	b29b      	uxth	r3, r3
 801bcb2:	001a      	movs	r2, r3
 801bcb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bcb6:	189b      	adds	r3, r3, r2
 801bcb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801bcba:	683b      	ldr	r3, [r7, #0]
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	00da      	lsls	r2, r3, #3
 801bcc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bcc2:	18d3      	adds	r3, r2, r3
 801bcc4:	2280      	movs	r2, #128	@ 0x80
 801bcc6:	00d2      	lsls	r2, r2, #3
 801bcc8:	4694      	mov	ip, r2
 801bcca:	4463      	add	r3, ip
 801bccc:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	891b      	ldrh	r3, [r3, #8]
 801bcd2:	085b      	lsrs	r3, r3, #1
 801bcd4:	b29b      	uxth	r3, r3
 801bcd6:	18db      	adds	r3, r3, r3
 801bcd8:	b29a      	uxth	r2, r3
 801bcda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bcdc:	801a      	strh	r2, [r3, #0]
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	657b      	str	r3, [r7, #84]	@ 0x54
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	2250      	movs	r2, #80	@ 0x50
 801bce6:	5a9b      	ldrh	r3, [r3, r2]
 801bce8:	b29b      	uxth	r3, r3
 801bcea:	001a      	movs	r2, r3
 801bcec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bcee:	189b      	adds	r3, r3, r2
 801bcf0:	657b      	str	r3, [r7, #84]	@ 0x54
 801bcf2:	683b      	ldr	r3, [r7, #0]
 801bcf4:	781b      	ldrb	r3, [r3, #0]
 801bcf6:	00da      	lsls	r2, r3, #3
 801bcf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bcfa:	18d3      	adds	r3, r2, r3
 801bcfc:	4a88      	ldr	r2, [pc, #544]	@ (801bf20 <USB_ActivateEndpoint+0x6c0>)
 801bcfe:	4694      	mov	ip, r2
 801bd00:	4463      	add	r3, ip
 801bd02:	653b      	str	r3, [r7, #80]	@ 0x50
 801bd04:	683b      	ldr	r3, [r7, #0]
 801bd06:	895b      	ldrh	r3, [r3, #10]
 801bd08:	085b      	lsrs	r3, r3, #1
 801bd0a:	b29b      	uxth	r3, r3
 801bd0c:	18db      	adds	r3, r3, r3
 801bd0e:	b29a      	uxth	r2, r3
 801bd10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bd12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801bd14:	683b      	ldr	r3, [r7, #0]
 801bd16:	785b      	ldrb	r3, [r3, #1]
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d000      	beq.n	801bd1e <USB_ActivateEndpoint+0x4be>
 801bd1c:	e087      	b.n	801be2e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bd1e:	687a      	ldr	r2, [r7, #4]
 801bd20:	683b      	ldr	r3, [r7, #0]
 801bd22:	781b      	ldrb	r3, [r3, #0]
 801bd24:	009b      	lsls	r3, r3, #2
 801bd26:	18d2      	adds	r2, r2, r3
 801bd28:	2140      	movs	r1, #64	@ 0x40
 801bd2a:	187b      	adds	r3, r7, r1
 801bd2c:	8812      	ldrh	r2, [r2, #0]
 801bd2e:	801a      	strh	r2, [r3, #0]
 801bd30:	187b      	adds	r3, r7, r1
 801bd32:	881a      	ldrh	r2, [r3, #0]
 801bd34:	2380      	movs	r3, #128	@ 0x80
 801bd36:	01db      	lsls	r3, r3, #7
 801bd38:	4013      	ands	r3, r2
 801bd3a:	d016      	beq.n	801bd6a <USB_ActivateEndpoint+0x50a>
 801bd3c:	687a      	ldr	r2, [r7, #4]
 801bd3e:	683b      	ldr	r3, [r7, #0]
 801bd40:	781b      	ldrb	r3, [r3, #0]
 801bd42:	009b      	lsls	r3, r3, #2
 801bd44:	18d3      	adds	r3, r2, r3
 801bd46:	881b      	ldrh	r3, [r3, #0]
 801bd48:	b29a      	uxth	r2, r3
 801bd4a:	203e      	movs	r0, #62	@ 0x3e
 801bd4c:	183b      	adds	r3, r7, r0
 801bd4e:	496e      	ldr	r1, [pc, #440]	@ (801bf08 <USB_ActivateEndpoint+0x6a8>)
 801bd50:	400a      	ands	r2, r1
 801bd52:	801a      	strh	r2, [r3, #0]
 801bd54:	687a      	ldr	r2, [r7, #4]
 801bd56:	683b      	ldr	r3, [r7, #0]
 801bd58:	781b      	ldrb	r3, [r3, #0]
 801bd5a:	009b      	lsls	r3, r3, #2
 801bd5c:	18d3      	adds	r3, r2, r3
 801bd5e:	183a      	adds	r2, r7, r0
 801bd60:	8812      	ldrh	r2, [r2, #0]
 801bd62:	496a      	ldr	r1, [pc, #424]	@ (801bf0c <USB_ActivateEndpoint+0x6ac>)
 801bd64:	430a      	orrs	r2, r1
 801bd66:	b292      	uxth	r2, r2
 801bd68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bd6a:	687a      	ldr	r2, [r7, #4]
 801bd6c:	683b      	ldr	r3, [r7, #0]
 801bd6e:	781b      	ldrb	r3, [r3, #0]
 801bd70:	009b      	lsls	r3, r3, #2
 801bd72:	18d2      	adds	r2, r2, r3
 801bd74:	213c      	movs	r1, #60	@ 0x3c
 801bd76:	187b      	adds	r3, r7, r1
 801bd78:	8812      	ldrh	r2, [r2, #0]
 801bd7a:	801a      	strh	r2, [r3, #0]
 801bd7c:	187b      	adds	r3, r7, r1
 801bd7e:	881b      	ldrh	r3, [r3, #0]
 801bd80:	2240      	movs	r2, #64	@ 0x40
 801bd82:	4013      	ands	r3, r2
 801bd84:	d016      	beq.n	801bdb4 <USB_ActivateEndpoint+0x554>
 801bd86:	687a      	ldr	r2, [r7, #4]
 801bd88:	683b      	ldr	r3, [r7, #0]
 801bd8a:	781b      	ldrb	r3, [r3, #0]
 801bd8c:	009b      	lsls	r3, r3, #2
 801bd8e:	18d3      	adds	r3, r2, r3
 801bd90:	881b      	ldrh	r3, [r3, #0]
 801bd92:	b29a      	uxth	r2, r3
 801bd94:	203a      	movs	r0, #58	@ 0x3a
 801bd96:	183b      	adds	r3, r7, r0
 801bd98:	495b      	ldr	r1, [pc, #364]	@ (801bf08 <USB_ActivateEndpoint+0x6a8>)
 801bd9a:	400a      	ands	r2, r1
 801bd9c:	801a      	strh	r2, [r3, #0]
 801bd9e:	687a      	ldr	r2, [r7, #4]
 801bda0:	683b      	ldr	r3, [r7, #0]
 801bda2:	781b      	ldrb	r3, [r3, #0]
 801bda4:	009b      	lsls	r3, r3, #2
 801bda6:	18d3      	adds	r3, r2, r3
 801bda8:	183a      	adds	r2, r7, r0
 801bdaa:	8812      	ldrh	r2, [r2, #0]
 801bdac:	495d      	ldr	r1, [pc, #372]	@ (801bf24 <USB_ActivateEndpoint+0x6c4>)
 801bdae:	430a      	orrs	r2, r1
 801bdb0:	b292      	uxth	r2, r2
 801bdb2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bdb4:	687a      	ldr	r2, [r7, #4]
 801bdb6:	683b      	ldr	r3, [r7, #0]
 801bdb8:	781b      	ldrb	r3, [r3, #0]
 801bdba:	009b      	lsls	r3, r3, #2
 801bdbc:	18d3      	adds	r3, r2, r3
 801bdbe:	881b      	ldrh	r3, [r3, #0]
 801bdc0:	b29a      	uxth	r2, r3
 801bdc2:	2038      	movs	r0, #56	@ 0x38
 801bdc4:	183b      	adds	r3, r7, r0
 801bdc6:	4952      	ldr	r1, [pc, #328]	@ (801bf10 <USB_ActivateEndpoint+0x6b0>)
 801bdc8:	400a      	ands	r2, r1
 801bdca:	801a      	strh	r2, [r3, #0]
 801bdcc:	183b      	adds	r3, r7, r0
 801bdce:	183a      	adds	r2, r7, r0
 801bdd0:	8812      	ldrh	r2, [r2, #0]
 801bdd2:	2180      	movs	r1, #128	@ 0x80
 801bdd4:	0149      	lsls	r1, r1, #5
 801bdd6:	404a      	eors	r2, r1
 801bdd8:	801a      	strh	r2, [r3, #0]
 801bdda:	183b      	adds	r3, r7, r0
 801bddc:	183a      	adds	r2, r7, r0
 801bdde:	8812      	ldrh	r2, [r2, #0]
 801bde0:	2180      	movs	r1, #128	@ 0x80
 801bde2:	0189      	lsls	r1, r1, #6
 801bde4:	404a      	eors	r2, r1
 801bde6:	801a      	strh	r2, [r3, #0]
 801bde8:	687a      	ldr	r2, [r7, #4]
 801bdea:	683b      	ldr	r3, [r7, #0]
 801bdec:	781b      	ldrb	r3, [r3, #0]
 801bdee:	009b      	lsls	r3, r3, #2
 801bdf0:	18d3      	adds	r3, r2, r3
 801bdf2:	183a      	adds	r2, r7, r0
 801bdf4:	8812      	ldrh	r2, [r2, #0]
 801bdf6:	4947      	ldr	r1, [pc, #284]	@ (801bf14 <USB_ActivateEndpoint+0x6b4>)
 801bdf8:	430a      	orrs	r2, r1
 801bdfa:	b292      	uxth	r2, r2
 801bdfc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801bdfe:	687a      	ldr	r2, [r7, #4]
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	781b      	ldrb	r3, [r3, #0]
 801be04:	009b      	lsls	r3, r3, #2
 801be06:	18d3      	adds	r3, r2, r3
 801be08:	881b      	ldrh	r3, [r3, #0]
 801be0a:	b29a      	uxth	r2, r3
 801be0c:	2036      	movs	r0, #54	@ 0x36
 801be0e:	183b      	adds	r3, r7, r0
 801be10:	4945      	ldr	r1, [pc, #276]	@ (801bf28 <USB_ActivateEndpoint+0x6c8>)
 801be12:	400a      	ands	r2, r1
 801be14:	801a      	strh	r2, [r3, #0]
 801be16:	687a      	ldr	r2, [r7, #4]
 801be18:	683b      	ldr	r3, [r7, #0]
 801be1a:	781b      	ldrb	r3, [r3, #0]
 801be1c:	009b      	lsls	r3, r3, #2
 801be1e:	18d3      	adds	r3, r2, r3
 801be20:	183a      	adds	r2, r7, r0
 801be22:	8812      	ldrh	r2, [r2, #0]
 801be24:	493b      	ldr	r1, [pc, #236]	@ (801bf14 <USB_ActivateEndpoint+0x6b4>)
 801be26:	430a      	orrs	r2, r1
 801be28:	b292      	uxth	r2, r2
 801be2a:	801a      	strh	r2, [r3, #0]
 801be2c:	e0ac      	b.n	801bf88 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801be2e:	687a      	ldr	r2, [r7, #4]
 801be30:	683b      	ldr	r3, [r7, #0]
 801be32:	781b      	ldrb	r3, [r3, #0]
 801be34:	009b      	lsls	r3, r3, #2
 801be36:	18d2      	adds	r2, r2, r3
 801be38:	214e      	movs	r1, #78	@ 0x4e
 801be3a:	187b      	adds	r3, r7, r1
 801be3c:	8812      	ldrh	r2, [r2, #0]
 801be3e:	801a      	strh	r2, [r3, #0]
 801be40:	187b      	adds	r3, r7, r1
 801be42:	881a      	ldrh	r2, [r3, #0]
 801be44:	2380      	movs	r3, #128	@ 0x80
 801be46:	01db      	lsls	r3, r3, #7
 801be48:	4013      	ands	r3, r2
 801be4a:	d016      	beq.n	801be7a <USB_ActivateEndpoint+0x61a>
 801be4c:	687a      	ldr	r2, [r7, #4]
 801be4e:	683b      	ldr	r3, [r7, #0]
 801be50:	781b      	ldrb	r3, [r3, #0]
 801be52:	009b      	lsls	r3, r3, #2
 801be54:	18d3      	adds	r3, r2, r3
 801be56:	881b      	ldrh	r3, [r3, #0]
 801be58:	b29a      	uxth	r2, r3
 801be5a:	204c      	movs	r0, #76	@ 0x4c
 801be5c:	183b      	adds	r3, r7, r0
 801be5e:	492a      	ldr	r1, [pc, #168]	@ (801bf08 <USB_ActivateEndpoint+0x6a8>)
 801be60:	400a      	ands	r2, r1
 801be62:	801a      	strh	r2, [r3, #0]
 801be64:	687a      	ldr	r2, [r7, #4]
 801be66:	683b      	ldr	r3, [r7, #0]
 801be68:	781b      	ldrb	r3, [r3, #0]
 801be6a:	009b      	lsls	r3, r3, #2
 801be6c:	18d3      	adds	r3, r2, r3
 801be6e:	183a      	adds	r2, r7, r0
 801be70:	8812      	ldrh	r2, [r2, #0]
 801be72:	4926      	ldr	r1, [pc, #152]	@ (801bf0c <USB_ActivateEndpoint+0x6ac>)
 801be74:	430a      	orrs	r2, r1
 801be76:	b292      	uxth	r2, r2
 801be78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801be7a:	687a      	ldr	r2, [r7, #4]
 801be7c:	683b      	ldr	r3, [r7, #0]
 801be7e:	781b      	ldrb	r3, [r3, #0]
 801be80:	009b      	lsls	r3, r3, #2
 801be82:	18d2      	adds	r2, r2, r3
 801be84:	214a      	movs	r1, #74	@ 0x4a
 801be86:	187b      	adds	r3, r7, r1
 801be88:	8812      	ldrh	r2, [r2, #0]
 801be8a:	801a      	strh	r2, [r3, #0]
 801be8c:	187b      	adds	r3, r7, r1
 801be8e:	881b      	ldrh	r3, [r3, #0]
 801be90:	2240      	movs	r2, #64	@ 0x40
 801be92:	4013      	ands	r3, r2
 801be94:	d016      	beq.n	801bec4 <USB_ActivateEndpoint+0x664>
 801be96:	687a      	ldr	r2, [r7, #4]
 801be98:	683b      	ldr	r3, [r7, #0]
 801be9a:	781b      	ldrb	r3, [r3, #0]
 801be9c:	009b      	lsls	r3, r3, #2
 801be9e:	18d3      	adds	r3, r2, r3
 801bea0:	881b      	ldrh	r3, [r3, #0]
 801bea2:	b29a      	uxth	r2, r3
 801bea4:	2048      	movs	r0, #72	@ 0x48
 801bea6:	183b      	adds	r3, r7, r0
 801bea8:	4917      	ldr	r1, [pc, #92]	@ (801bf08 <USB_ActivateEndpoint+0x6a8>)
 801beaa:	400a      	ands	r2, r1
 801beac:	801a      	strh	r2, [r3, #0]
 801beae:	687a      	ldr	r2, [r7, #4]
 801beb0:	683b      	ldr	r3, [r7, #0]
 801beb2:	781b      	ldrb	r3, [r3, #0]
 801beb4:	009b      	lsls	r3, r3, #2
 801beb6:	18d3      	adds	r3, r2, r3
 801beb8:	183a      	adds	r2, r7, r0
 801beba:	8812      	ldrh	r2, [r2, #0]
 801bebc:	4919      	ldr	r1, [pc, #100]	@ (801bf24 <USB_ActivateEndpoint+0x6c4>)
 801bebe:	430a      	orrs	r2, r1
 801bec0:	b292      	uxth	r2, r2
 801bec2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801bec4:	683b      	ldr	r3, [r7, #0]
 801bec6:	78db      	ldrb	r3, [r3, #3]
 801bec8:	2b01      	cmp	r3, #1
 801beca:	d02f      	beq.n	801bf2c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801becc:	687a      	ldr	r2, [r7, #4]
 801bece:	683b      	ldr	r3, [r7, #0]
 801bed0:	781b      	ldrb	r3, [r3, #0]
 801bed2:	009b      	lsls	r3, r3, #2
 801bed4:	18d3      	adds	r3, r2, r3
 801bed6:	881b      	ldrh	r3, [r3, #0]
 801bed8:	b29a      	uxth	r2, r3
 801beda:	2044      	movs	r0, #68	@ 0x44
 801bedc:	183b      	adds	r3, r7, r0
 801bede:	4912      	ldr	r1, [pc, #72]	@ (801bf28 <USB_ActivateEndpoint+0x6c8>)
 801bee0:	400a      	ands	r2, r1
 801bee2:	801a      	strh	r2, [r3, #0]
 801bee4:	183b      	adds	r3, r7, r0
 801bee6:	183a      	adds	r2, r7, r0
 801bee8:	8812      	ldrh	r2, [r2, #0]
 801beea:	2120      	movs	r1, #32
 801beec:	404a      	eors	r2, r1
 801beee:	801a      	strh	r2, [r3, #0]
 801bef0:	687a      	ldr	r2, [r7, #4]
 801bef2:	683b      	ldr	r3, [r7, #0]
 801bef4:	781b      	ldrb	r3, [r3, #0]
 801bef6:	009b      	lsls	r3, r3, #2
 801bef8:	18d3      	adds	r3, r2, r3
 801befa:	183a      	adds	r2, r7, r0
 801befc:	8812      	ldrh	r2, [r2, #0]
 801befe:	4905      	ldr	r1, [pc, #20]	@ (801bf14 <USB_ActivateEndpoint+0x6b4>)
 801bf00:	430a      	orrs	r2, r1
 801bf02:	b292      	uxth	r2, r2
 801bf04:	801a      	strh	r2, [r3, #0]
 801bf06:	e028      	b.n	801bf5a <USB_ActivateEndpoint+0x6fa>
 801bf08:	ffff8f8f 	.word	0xffff8f8f
 801bf0c:	ffffc080 	.word	0xffffc080
 801bf10:	ffffbf8f 	.word	0xffffbf8f
 801bf14:	ffff8080 	.word	0xffff8080
 801bf18:	ffff8180 	.word	0xffff8180
 801bf1c:	ffff8e8f 	.word	0xffff8e8f
 801bf20:	00000404 	.word	0x00000404
 801bf24:	ffff80c0 	.word	0xffff80c0
 801bf28:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801bf2c:	687a      	ldr	r2, [r7, #4]
 801bf2e:	683b      	ldr	r3, [r7, #0]
 801bf30:	781b      	ldrb	r3, [r3, #0]
 801bf32:	009b      	lsls	r3, r3, #2
 801bf34:	18d3      	adds	r3, r2, r3
 801bf36:	881b      	ldrh	r3, [r3, #0]
 801bf38:	b29a      	uxth	r2, r3
 801bf3a:	2046      	movs	r0, #70	@ 0x46
 801bf3c:	183b      	adds	r3, r7, r0
 801bf3e:	4916      	ldr	r1, [pc, #88]	@ (801bf98 <USB_ActivateEndpoint+0x738>)
 801bf40:	400a      	ands	r2, r1
 801bf42:	801a      	strh	r2, [r3, #0]
 801bf44:	687a      	ldr	r2, [r7, #4]
 801bf46:	683b      	ldr	r3, [r7, #0]
 801bf48:	781b      	ldrb	r3, [r3, #0]
 801bf4a:	009b      	lsls	r3, r3, #2
 801bf4c:	18d3      	adds	r3, r2, r3
 801bf4e:	183a      	adds	r2, r7, r0
 801bf50:	8812      	ldrh	r2, [r2, #0]
 801bf52:	4912      	ldr	r1, [pc, #72]	@ (801bf9c <USB_ActivateEndpoint+0x73c>)
 801bf54:	430a      	orrs	r2, r1
 801bf56:	b292      	uxth	r2, r2
 801bf58:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801bf5a:	687a      	ldr	r2, [r7, #4]
 801bf5c:	683b      	ldr	r3, [r7, #0]
 801bf5e:	781b      	ldrb	r3, [r3, #0]
 801bf60:	009b      	lsls	r3, r3, #2
 801bf62:	18d3      	adds	r3, r2, r3
 801bf64:	881b      	ldrh	r3, [r3, #0]
 801bf66:	b29a      	uxth	r2, r3
 801bf68:	2042      	movs	r0, #66	@ 0x42
 801bf6a:	183b      	adds	r3, r7, r0
 801bf6c:	490c      	ldr	r1, [pc, #48]	@ (801bfa0 <USB_ActivateEndpoint+0x740>)
 801bf6e:	400a      	ands	r2, r1
 801bf70:	801a      	strh	r2, [r3, #0]
 801bf72:	687a      	ldr	r2, [r7, #4]
 801bf74:	683b      	ldr	r3, [r7, #0]
 801bf76:	781b      	ldrb	r3, [r3, #0]
 801bf78:	009b      	lsls	r3, r3, #2
 801bf7a:	18d3      	adds	r3, r2, r3
 801bf7c:	183a      	adds	r2, r7, r0
 801bf7e:	8812      	ldrh	r2, [r2, #0]
 801bf80:	4906      	ldr	r1, [pc, #24]	@ (801bf9c <USB_ActivateEndpoint+0x73c>)
 801bf82:	430a      	orrs	r2, r1
 801bf84:	b292      	uxth	r2, r2
 801bf86:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801bf88:	236f      	movs	r3, #111	@ 0x6f
 801bf8a:	18fb      	adds	r3, r7, r3
 801bf8c:	781b      	ldrb	r3, [r3, #0]
}
 801bf8e:	0018      	movs	r0, r3
 801bf90:	46bd      	mov	sp, r7
 801bf92:	b01c      	add	sp, #112	@ 0x70
 801bf94:	bd80      	pop	{r7, pc}
 801bf96:	46c0      	nop			@ (mov r8, r8)
 801bf98:	ffff8fbf 	.word	0xffff8fbf
 801bf9c:	ffff8080 	.word	0xffff8080
 801bfa0:	ffffbf8f 	.word	0xffffbf8f

0801bfa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b08c      	sub	sp, #48	@ 0x30
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	6078      	str	r0, [r7, #4]
 801bfac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801bfae:	683b      	ldr	r3, [r7, #0]
 801bfb0:	7b1b      	ldrb	r3, [r3, #12]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d000      	beq.n	801bfb8 <USB_DeactivateEndpoint+0x14>
 801bfb6:	e07e      	b.n	801c0b6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	785b      	ldrb	r3, [r3, #1]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d03c      	beq.n	801c03a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bfc0:	687a      	ldr	r2, [r7, #4]
 801bfc2:	683b      	ldr	r3, [r7, #0]
 801bfc4:	781b      	ldrb	r3, [r3, #0]
 801bfc6:	009b      	lsls	r3, r3, #2
 801bfc8:	18d2      	adds	r2, r2, r3
 801bfca:	210c      	movs	r1, #12
 801bfcc:	187b      	adds	r3, r7, r1
 801bfce:	8812      	ldrh	r2, [r2, #0]
 801bfd0:	801a      	strh	r2, [r3, #0]
 801bfd2:	187b      	adds	r3, r7, r1
 801bfd4:	881b      	ldrh	r3, [r3, #0]
 801bfd6:	2240      	movs	r2, #64	@ 0x40
 801bfd8:	4013      	ands	r3, r2
 801bfda:	d016      	beq.n	801c00a <USB_DeactivateEndpoint+0x66>
 801bfdc:	687a      	ldr	r2, [r7, #4]
 801bfde:	683b      	ldr	r3, [r7, #0]
 801bfe0:	781b      	ldrb	r3, [r3, #0]
 801bfe2:	009b      	lsls	r3, r3, #2
 801bfe4:	18d3      	adds	r3, r2, r3
 801bfe6:	881b      	ldrh	r3, [r3, #0]
 801bfe8:	b29a      	uxth	r2, r3
 801bfea:	200a      	movs	r0, #10
 801bfec:	183b      	adds	r3, r7, r0
 801bfee:	49c7      	ldr	r1, [pc, #796]	@ (801c30c <USB_DeactivateEndpoint+0x368>)
 801bff0:	400a      	ands	r2, r1
 801bff2:	801a      	strh	r2, [r3, #0]
 801bff4:	687a      	ldr	r2, [r7, #4]
 801bff6:	683b      	ldr	r3, [r7, #0]
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	009b      	lsls	r3, r3, #2
 801bffc:	18d3      	adds	r3, r2, r3
 801bffe:	183a      	adds	r2, r7, r0
 801c000:	8812      	ldrh	r2, [r2, #0]
 801c002:	49c3      	ldr	r1, [pc, #780]	@ (801c310 <USB_DeactivateEndpoint+0x36c>)
 801c004:	430a      	orrs	r2, r1
 801c006:	b292      	uxth	r2, r2
 801c008:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c00a:	687a      	ldr	r2, [r7, #4]
 801c00c:	683b      	ldr	r3, [r7, #0]
 801c00e:	781b      	ldrb	r3, [r3, #0]
 801c010:	009b      	lsls	r3, r3, #2
 801c012:	18d3      	adds	r3, r2, r3
 801c014:	881b      	ldrh	r3, [r3, #0]
 801c016:	b29a      	uxth	r2, r3
 801c018:	2008      	movs	r0, #8
 801c01a:	183b      	adds	r3, r7, r0
 801c01c:	49bd      	ldr	r1, [pc, #756]	@ (801c314 <USB_DeactivateEndpoint+0x370>)
 801c01e:	400a      	ands	r2, r1
 801c020:	801a      	strh	r2, [r3, #0]
 801c022:	687a      	ldr	r2, [r7, #4]
 801c024:	683b      	ldr	r3, [r7, #0]
 801c026:	781b      	ldrb	r3, [r3, #0]
 801c028:	009b      	lsls	r3, r3, #2
 801c02a:	18d3      	adds	r3, r2, r3
 801c02c:	183a      	adds	r2, r7, r0
 801c02e:	8812      	ldrh	r2, [r2, #0]
 801c030:	49b9      	ldr	r1, [pc, #740]	@ (801c318 <USB_DeactivateEndpoint+0x374>)
 801c032:	430a      	orrs	r2, r1
 801c034:	b292      	uxth	r2, r2
 801c036:	801a      	strh	r2, [r3, #0]
 801c038:	e163      	b.n	801c302 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c03a:	687a      	ldr	r2, [r7, #4]
 801c03c:	683b      	ldr	r3, [r7, #0]
 801c03e:	781b      	ldrb	r3, [r3, #0]
 801c040:	009b      	lsls	r3, r3, #2
 801c042:	18d2      	adds	r2, r2, r3
 801c044:	2112      	movs	r1, #18
 801c046:	187b      	adds	r3, r7, r1
 801c048:	8812      	ldrh	r2, [r2, #0]
 801c04a:	801a      	strh	r2, [r3, #0]
 801c04c:	187b      	adds	r3, r7, r1
 801c04e:	881a      	ldrh	r2, [r3, #0]
 801c050:	2380      	movs	r3, #128	@ 0x80
 801c052:	01db      	lsls	r3, r3, #7
 801c054:	4013      	ands	r3, r2
 801c056:	d016      	beq.n	801c086 <USB_DeactivateEndpoint+0xe2>
 801c058:	687a      	ldr	r2, [r7, #4]
 801c05a:	683b      	ldr	r3, [r7, #0]
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	009b      	lsls	r3, r3, #2
 801c060:	18d3      	adds	r3, r2, r3
 801c062:	881b      	ldrh	r3, [r3, #0]
 801c064:	b29a      	uxth	r2, r3
 801c066:	2010      	movs	r0, #16
 801c068:	183b      	adds	r3, r7, r0
 801c06a:	49a8      	ldr	r1, [pc, #672]	@ (801c30c <USB_DeactivateEndpoint+0x368>)
 801c06c:	400a      	ands	r2, r1
 801c06e:	801a      	strh	r2, [r3, #0]
 801c070:	687a      	ldr	r2, [r7, #4]
 801c072:	683b      	ldr	r3, [r7, #0]
 801c074:	781b      	ldrb	r3, [r3, #0]
 801c076:	009b      	lsls	r3, r3, #2
 801c078:	18d3      	adds	r3, r2, r3
 801c07a:	183a      	adds	r2, r7, r0
 801c07c:	8812      	ldrh	r2, [r2, #0]
 801c07e:	49a7      	ldr	r1, [pc, #668]	@ (801c31c <USB_DeactivateEndpoint+0x378>)
 801c080:	430a      	orrs	r2, r1
 801c082:	b292      	uxth	r2, r2
 801c084:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c086:	687a      	ldr	r2, [r7, #4]
 801c088:	683b      	ldr	r3, [r7, #0]
 801c08a:	781b      	ldrb	r3, [r3, #0]
 801c08c:	009b      	lsls	r3, r3, #2
 801c08e:	18d3      	adds	r3, r2, r3
 801c090:	881b      	ldrh	r3, [r3, #0]
 801c092:	b29a      	uxth	r2, r3
 801c094:	200e      	movs	r0, #14
 801c096:	183b      	adds	r3, r7, r0
 801c098:	49a1      	ldr	r1, [pc, #644]	@ (801c320 <USB_DeactivateEndpoint+0x37c>)
 801c09a:	400a      	ands	r2, r1
 801c09c:	801a      	strh	r2, [r3, #0]
 801c09e:	687a      	ldr	r2, [r7, #4]
 801c0a0:	683b      	ldr	r3, [r7, #0]
 801c0a2:	781b      	ldrb	r3, [r3, #0]
 801c0a4:	009b      	lsls	r3, r3, #2
 801c0a6:	18d3      	adds	r3, r2, r3
 801c0a8:	183a      	adds	r2, r7, r0
 801c0aa:	8812      	ldrh	r2, [r2, #0]
 801c0ac:	499a      	ldr	r1, [pc, #616]	@ (801c318 <USB_DeactivateEndpoint+0x374>)
 801c0ae:	430a      	orrs	r2, r1
 801c0b0:	b292      	uxth	r2, r2
 801c0b2:	801a      	strh	r2, [r3, #0]
 801c0b4:	e125      	b.n	801c302 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	785b      	ldrb	r3, [r3, #1]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d000      	beq.n	801c0c0 <USB_DeactivateEndpoint+0x11c>
 801c0be:	e090      	b.n	801c1e2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c0c0:	687a      	ldr	r2, [r7, #4]
 801c0c2:	683b      	ldr	r3, [r7, #0]
 801c0c4:	781b      	ldrb	r3, [r3, #0]
 801c0c6:	009b      	lsls	r3, r3, #2
 801c0c8:	18d2      	adds	r2, r2, r3
 801c0ca:	2120      	movs	r1, #32
 801c0cc:	187b      	adds	r3, r7, r1
 801c0ce:	8812      	ldrh	r2, [r2, #0]
 801c0d0:	801a      	strh	r2, [r3, #0]
 801c0d2:	187b      	adds	r3, r7, r1
 801c0d4:	881a      	ldrh	r2, [r3, #0]
 801c0d6:	2380      	movs	r3, #128	@ 0x80
 801c0d8:	01db      	lsls	r3, r3, #7
 801c0da:	4013      	ands	r3, r2
 801c0dc:	d016      	beq.n	801c10c <USB_DeactivateEndpoint+0x168>
 801c0de:	687a      	ldr	r2, [r7, #4]
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	781b      	ldrb	r3, [r3, #0]
 801c0e4:	009b      	lsls	r3, r3, #2
 801c0e6:	18d3      	adds	r3, r2, r3
 801c0e8:	881b      	ldrh	r3, [r3, #0]
 801c0ea:	b29a      	uxth	r2, r3
 801c0ec:	201e      	movs	r0, #30
 801c0ee:	183b      	adds	r3, r7, r0
 801c0f0:	4986      	ldr	r1, [pc, #536]	@ (801c30c <USB_DeactivateEndpoint+0x368>)
 801c0f2:	400a      	ands	r2, r1
 801c0f4:	801a      	strh	r2, [r3, #0]
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	683b      	ldr	r3, [r7, #0]
 801c0fa:	781b      	ldrb	r3, [r3, #0]
 801c0fc:	009b      	lsls	r3, r3, #2
 801c0fe:	18d3      	adds	r3, r2, r3
 801c100:	183a      	adds	r2, r7, r0
 801c102:	8812      	ldrh	r2, [r2, #0]
 801c104:	4985      	ldr	r1, [pc, #532]	@ (801c31c <USB_DeactivateEndpoint+0x378>)
 801c106:	430a      	orrs	r2, r1
 801c108:	b292      	uxth	r2, r2
 801c10a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c10c:	687a      	ldr	r2, [r7, #4]
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	781b      	ldrb	r3, [r3, #0]
 801c112:	009b      	lsls	r3, r3, #2
 801c114:	18d2      	adds	r2, r2, r3
 801c116:	211c      	movs	r1, #28
 801c118:	187b      	adds	r3, r7, r1
 801c11a:	8812      	ldrh	r2, [r2, #0]
 801c11c:	801a      	strh	r2, [r3, #0]
 801c11e:	187b      	adds	r3, r7, r1
 801c120:	881b      	ldrh	r3, [r3, #0]
 801c122:	2240      	movs	r2, #64	@ 0x40
 801c124:	4013      	ands	r3, r2
 801c126:	d016      	beq.n	801c156 <USB_DeactivateEndpoint+0x1b2>
 801c128:	687a      	ldr	r2, [r7, #4]
 801c12a:	683b      	ldr	r3, [r7, #0]
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	009b      	lsls	r3, r3, #2
 801c130:	18d3      	adds	r3, r2, r3
 801c132:	881b      	ldrh	r3, [r3, #0]
 801c134:	b29a      	uxth	r2, r3
 801c136:	201a      	movs	r0, #26
 801c138:	183b      	adds	r3, r7, r0
 801c13a:	4974      	ldr	r1, [pc, #464]	@ (801c30c <USB_DeactivateEndpoint+0x368>)
 801c13c:	400a      	ands	r2, r1
 801c13e:	801a      	strh	r2, [r3, #0]
 801c140:	687a      	ldr	r2, [r7, #4]
 801c142:	683b      	ldr	r3, [r7, #0]
 801c144:	781b      	ldrb	r3, [r3, #0]
 801c146:	009b      	lsls	r3, r3, #2
 801c148:	18d3      	adds	r3, r2, r3
 801c14a:	183a      	adds	r2, r7, r0
 801c14c:	8812      	ldrh	r2, [r2, #0]
 801c14e:	4970      	ldr	r1, [pc, #448]	@ (801c310 <USB_DeactivateEndpoint+0x36c>)
 801c150:	430a      	orrs	r2, r1
 801c152:	b292      	uxth	r2, r2
 801c154:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801c156:	687a      	ldr	r2, [r7, #4]
 801c158:	683b      	ldr	r3, [r7, #0]
 801c15a:	781b      	ldrb	r3, [r3, #0]
 801c15c:	009b      	lsls	r3, r3, #2
 801c15e:	18d3      	adds	r3, r2, r3
 801c160:	881b      	ldrh	r3, [r3, #0]
 801c162:	b29a      	uxth	r2, r3
 801c164:	2018      	movs	r0, #24
 801c166:	183b      	adds	r3, r7, r0
 801c168:	4968      	ldr	r1, [pc, #416]	@ (801c30c <USB_DeactivateEndpoint+0x368>)
 801c16a:	400a      	ands	r2, r1
 801c16c:	801a      	strh	r2, [r3, #0]
 801c16e:	687a      	ldr	r2, [r7, #4]
 801c170:	683b      	ldr	r3, [r7, #0]
 801c172:	781b      	ldrb	r3, [r3, #0]
 801c174:	009b      	lsls	r3, r3, #2
 801c176:	18d3      	adds	r3, r2, r3
 801c178:	183a      	adds	r2, r7, r0
 801c17a:	8812      	ldrh	r2, [r2, #0]
 801c17c:	4964      	ldr	r1, [pc, #400]	@ (801c310 <USB_DeactivateEndpoint+0x36c>)
 801c17e:	430a      	orrs	r2, r1
 801c180:	b292      	uxth	r2, r2
 801c182:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c184:	687a      	ldr	r2, [r7, #4]
 801c186:	683b      	ldr	r3, [r7, #0]
 801c188:	781b      	ldrb	r3, [r3, #0]
 801c18a:	009b      	lsls	r3, r3, #2
 801c18c:	18d3      	adds	r3, r2, r3
 801c18e:	881b      	ldrh	r3, [r3, #0]
 801c190:	b29a      	uxth	r2, r3
 801c192:	2016      	movs	r0, #22
 801c194:	183b      	adds	r3, r7, r0
 801c196:	4962      	ldr	r1, [pc, #392]	@ (801c320 <USB_DeactivateEndpoint+0x37c>)
 801c198:	400a      	ands	r2, r1
 801c19a:	801a      	strh	r2, [r3, #0]
 801c19c:	687a      	ldr	r2, [r7, #4]
 801c19e:	683b      	ldr	r3, [r7, #0]
 801c1a0:	781b      	ldrb	r3, [r3, #0]
 801c1a2:	009b      	lsls	r3, r3, #2
 801c1a4:	18d3      	adds	r3, r2, r3
 801c1a6:	183a      	adds	r2, r7, r0
 801c1a8:	8812      	ldrh	r2, [r2, #0]
 801c1aa:	495b      	ldr	r1, [pc, #364]	@ (801c318 <USB_DeactivateEndpoint+0x374>)
 801c1ac:	430a      	orrs	r2, r1
 801c1ae:	b292      	uxth	r2, r2
 801c1b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c1b2:	687a      	ldr	r2, [r7, #4]
 801c1b4:	683b      	ldr	r3, [r7, #0]
 801c1b6:	781b      	ldrb	r3, [r3, #0]
 801c1b8:	009b      	lsls	r3, r3, #2
 801c1ba:	18d3      	adds	r3, r2, r3
 801c1bc:	881b      	ldrh	r3, [r3, #0]
 801c1be:	b29a      	uxth	r2, r3
 801c1c0:	2014      	movs	r0, #20
 801c1c2:	183b      	adds	r3, r7, r0
 801c1c4:	4953      	ldr	r1, [pc, #332]	@ (801c314 <USB_DeactivateEndpoint+0x370>)
 801c1c6:	400a      	ands	r2, r1
 801c1c8:	801a      	strh	r2, [r3, #0]
 801c1ca:	687a      	ldr	r2, [r7, #4]
 801c1cc:	683b      	ldr	r3, [r7, #0]
 801c1ce:	781b      	ldrb	r3, [r3, #0]
 801c1d0:	009b      	lsls	r3, r3, #2
 801c1d2:	18d3      	adds	r3, r2, r3
 801c1d4:	183a      	adds	r2, r7, r0
 801c1d6:	8812      	ldrh	r2, [r2, #0]
 801c1d8:	494f      	ldr	r1, [pc, #316]	@ (801c318 <USB_DeactivateEndpoint+0x374>)
 801c1da:	430a      	orrs	r2, r1
 801c1dc:	b292      	uxth	r2, r2
 801c1de:	801a      	strh	r2, [r3, #0]
 801c1e0:	e08f      	b.n	801c302 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c1e2:	687a      	ldr	r2, [r7, #4]
 801c1e4:	683b      	ldr	r3, [r7, #0]
 801c1e6:	781b      	ldrb	r3, [r3, #0]
 801c1e8:	009b      	lsls	r3, r3, #2
 801c1ea:	18d2      	adds	r2, r2, r3
 801c1ec:	212e      	movs	r1, #46	@ 0x2e
 801c1ee:	187b      	adds	r3, r7, r1
 801c1f0:	8812      	ldrh	r2, [r2, #0]
 801c1f2:	801a      	strh	r2, [r3, #0]
 801c1f4:	187b      	adds	r3, r7, r1
 801c1f6:	881a      	ldrh	r2, [r3, #0]
 801c1f8:	2380      	movs	r3, #128	@ 0x80
 801c1fa:	01db      	lsls	r3, r3, #7
 801c1fc:	4013      	ands	r3, r2
 801c1fe:	d016      	beq.n	801c22e <USB_DeactivateEndpoint+0x28a>
 801c200:	687a      	ldr	r2, [r7, #4]
 801c202:	683b      	ldr	r3, [r7, #0]
 801c204:	781b      	ldrb	r3, [r3, #0]
 801c206:	009b      	lsls	r3, r3, #2
 801c208:	18d3      	adds	r3, r2, r3
 801c20a:	881b      	ldrh	r3, [r3, #0]
 801c20c:	b29a      	uxth	r2, r3
 801c20e:	202c      	movs	r0, #44	@ 0x2c
 801c210:	183b      	adds	r3, r7, r0
 801c212:	493e      	ldr	r1, [pc, #248]	@ (801c30c <USB_DeactivateEndpoint+0x368>)
 801c214:	400a      	ands	r2, r1
 801c216:	801a      	strh	r2, [r3, #0]
 801c218:	687a      	ldr	r2, [r7, #4]
 801c21a:	683b      	ldr	r3, [r7, #0]
 801c21c:	781b      	ldrb	r3, [r3, #0]
 801c21e:	009b      	lsls	r3, r3, #2
 801c220:	18d3      	adds	r3, r2, r3
 801c222:	183a      	adds	r2, r7, r0
 801c224:	8812      	ldrh	r2, [r2, #0]
 801c226:	493d      	ldr	r1, [pc, #244]	@ (801c31c <USB_DeactivateEndpoint+0x378>)
 801c228:	430a      	orrs	r2, r1
 801c22a:	b292      	uxth	r2, r2
 801c22c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c22e:	687a      	ldr	r2, [r7, #4]
 801c230:	683b      	ldr	r3, [r7, #0]
 801c232:	781b      	ldrb	r3, [r3, #0]
 801c234:	009b      	lsls	r3, r3, #2
 801c236:	18d2      	adds	r2, r2, r3
 801c238:	212a      	movs	r1, #42	@ 0x2a
 801c23a:	187b      	adds	r3, r7, r1
 801c23c:	8812      	ldrh	r2, [r2, #0]
 801c23e:	801a      	strh	r2, [r3, #0]
 801c240:	187b      	adds	r3, r7, r1
 801c242:	881b      	ldrh	r3, [r3, #0]
 801c244:	2240      	movs	r2, #64	@ 0x40
 801c246:	4013      	ands	r3, r2
 801c248:	d016      	beq.n	801c278 <USB_DeactivateEndpoint+0x2d4>
 801c24a:	687a      	ldr	r2, [r7, #4]
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	781b      	ldrb	r3, [r3, #0]
 801c250:	009b      	lsls	r3, r3, #2
 801c252:	18d3      	adds	r3, r2, r3
 801c254:	881b      	ldrh	r3, [r3, #0]
 801c256:	b29a      	uxth	r2, r3
 801c258:	2028      	movs	r0, #40	@ 0x28
 801c25a:	183b      	adds	r3, r7, r0
 801c25c:	492b      	ldr	r1, [pc, #172]	@ (801c30c <USB_DeactivateEndpoint+0x368>)
 801c25e:	400a      	ands	r2, r1
 801c260:	801a      	strh	r2, [r3, #0]
 801c262:	687a      	ldr	r2, [r7, #4]
 801c264:	683b      	ldr	r3, [r7, #0]
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	009b      	lsls	r3, r3, #2
 801c26a:	18d3      	adds	r3, r2, r3
 801c26c:	183a      	adds	r2, r7, r0
 801c26e:	8812      	ldrh	r2, [r2, #0]
 801c270:	4927      	ldr	r1, [pc, #156]	@ (801c310 <USB_DeactivateEndpoint+0x36c>)
 801c272:	430a      	orrs	r2, r1
 801c274:	b292      	uxth	r2, r2
 801c276:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801c278:	687a      	ldr	r2, [r7, #4]
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	781b      	ldrb	r3, [r3, #0]
 801c27e:	009b      	lsls	r3, r3, #2
 801c280:	18d3      	adds	r3, r2, r3
 801c282:	881b      	ldrh	r3, [r3, #0]
 801c284:	b29a      	uxth	r2, r3
 801c286:	2026      	movs	r0, #38	@ 0x26
 801c288:	183b      	adds	r3, r7, r0
 801c28a:	4920      	ldr	r1, [pc, #128]	@ (801c30c <USB_DeactivateEndpoint+0x368>)
 801c28c:	400a      	ands	r2, r1
 801c28e:	801a      	strh	r2, [r3, #0]
 801c290:	687a      	ldr	r2, [r7, #4]
 801c292:	683b      	ldr	r3, [r7, #0]
 801c294:	781b      	ldrb	r3, [r3, #0]
 801c296:	009b      	lsls	r3, r3, #2
 801c298:	18d3      	adds	r3, r2, r3
 801c29a:	183a      	adds	r2, r7, r0
 801c29c:	8812      	ldrh	r2, [r2, #0]
 801c29e:	491f      	ldr	r1, [pc, #124]	@ (801c31c <USB_DeactivateEndpoint+0x378>)
 801c2a0:	430a      	orrs	r2, r1
 801c2a2:	b292      	uxth	r2, r2
 801c2a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c2a6:	687a      	ldr	r2, [r7, #4]
 801c2a8:	683b      	ldr	r3, [r7, #0]
 801c2aa:	781b      	ldrb	r3, [r3, #0]
 801c2ac:	009b      	lsls	r3, r3, #2
 801c2ae:	18d3      	adds	r3, r2, r3
 801c2b0:	881b      	ldrh	r3, [r3, #0]
 801c2b2:	b29a      	uxth	r2, r3
 801c2b4:	2024      	movs	r0, #36	@ 0x24
 801c2b6:	183b      	adds	r3, r7, r0
 801c2b8:	4916      	ldr	r1, [pc, #88]	@ (801c314 <USB_DeactivateEndpoint+0x370>)
 801c2ba:	400a      	ands	r2, r1
 801c2bc:	801a      	strh	r2, [r3, #0]
 801c2be:	687a      	ldr	r2, [r7, #4]
 801c2c0:	683b      	ldr	r3, [r7, #0]
 801c2c2:	781b      	ldrb	r3, [r3, #0]
 801c2c4:	009b      	lsls	r3, r3, #2
 801c2c6:	18d3      	adds	r3, r2, r3
 801c2c8:	183a      	adds	r2, r7, r0
 801c2ca:	8812      	ldrh	r2, [r2, #0]
 801c2cc:	4912      	ldr	r1, [pc, #72]	@ (801c318 <USB_DeactivateEndpoint+0x374>)
 801c2ce:	430a      	orrs	r2, r1
 801c2d0:	b292      	uxth	r2, r2
 801c2d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c2d4:	687a      	ldr	r2, [r7, #4]
 801c2d6:	683b      	ldr	r3, [r7, #0]
 801c2d8:	781b      	ldrb	r3, [r3, #0]
 801c2da:	009b      	lsls	r3, r3, #2
 801c2dc:	18d3      	adds	r3, r2, r3
 801c2de:	881b      	ldrh	r3, [r3, #0]
 801c2e0:	b29a      	uxth	r2, r3
 801c2e2:	2022      	movs	r0, #34	@ 0x22
 801c2e4:	183b      	adds	r3, r7, r0
 801c2e6:	490e      	ldr	r1, [pc, #56]	@ (801c320 <USB_DeactivateEndpoint+0x37c>)
 801c2e8:	400a      	ands	r2, r1
 801c2ea:	801a      	strh	r2, [r3, #0]
 801c2ec:	687a      	ldr	r2, [r7, #4]
 801c2ee:	683b      	ldr	r3, [r7, #0]
 801c2f0:	781b      	ldrb	r3, [r3, #0]
 801c2f2:	009b      	lsls	r3, r3, #2
 801c2f4:	18d3      	adds	r3, r2, r3
 801c2f6:	183a      	adds	r2, r7, r0
 801c2f8:	8812      	ldrh	r2, [r2, #0]
 801c2fa:	4907      	ldr	r1, [pc, #28]	@ (801c318 <USB_DeactivateEndpoint+0x374>)
 801c2fc:	430a      	orrs	r2, r1
 801c2fe:	b292      	uxth	r2, r2
 801c300:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801c302:	2300      	movs	r3, #0
}
 801c304:	0018      	movs	r0, r3
 801c306:	46bd      	mov	sp, r7
 801c308:	b00c      	add	sp, #48	@ 0x30
 801c30a:	bd80      	pop	{r7, pc}
 801c30c:	ffff8f8f 	.word	0xffff8f8f
 801c310:	ffff80c0 	.word	0xffff80c0
 801c314:	ffff8fbf 	.word	0xffff8fbf
 801c318:	ffff8080 	.word	0xffff8080
 801c31c:	ffffc080 	.word	0xffffc080
 801c320:	ffffbf8f 	.word	0xffffbf8f

0801c324 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c324:	b590      	push	{r4, r7, lr}
 801c326:	b0c3      	sub	sp, #268	@ 0x10c
 801c328:	af00      	add	r7, sp, #0
 801c32a:	6078      	str	r0, [r7, #4]
 801c32c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	785b      	ldrb	r3, [r3, #1]
 801c332:	2b01      	cmp	r3, #1
 801c334:	d001      	beq.n	801c33a <USB_EPStartXfer+0x16>
 801c336:	f000 fd2d 	bl	801cd94 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801c33a:	683b      	ldr	r3, [r7, #0]
 801c33c:	699a      	ldr	r2, [r3, #24]
 801c33e:	683b      	ldr	r3, [r7, #0]
 801c340:	691b      	ldr	r3, [r3, #16]
 801c342:	429a      	cmp	r2, r3
 801c344:	d905      	bls.n	801c352 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801c346:	683b      	ldr	r3, [r7, #0]
 801c348:	691b      	ldr	r3, [r3, #16]
 801c34a:	1d7a      	adds	r2, r7, #5
 801c34c:	32ff      	adds	r2, #255	@ 0xff
 801c34e:	6013      	str	r3, [r2, #0]
 801c350:	e004      	b.n	801c35c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801c352:	683b      	ldr	r3, [r7, #0]
 801c354:	699b      	ldr	r3, [r3, #24]
 801c356:	1d7a      	adds	r2, r7, #5
 801c358:	32ff      	adds	r2, #255	@ 0xff
 801c35a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801c35c:	683b      	ldr	r3, [r7, #0]
 801c35e:	7b1b      	ldrb	r3, [r3, #12]
 801c360:	2b00      	cmp	r3, #0
 801c362:	d125      	bne.n	801c3b0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801c364:	683b      	ldr	r3, [r7, #0]
 801c366:	6959      	ldr	r1, [r3, #20]
 801c368:	683b      	ldr	r3, [r7, #0]
 801c36a:	88da      	ldrh	r2, [r3, #6]
 801c36c:	1d7b      	adds	r3, r7, #5
 801c36e:	33ff      	adds	r3, #255	@ 0xff
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	b29b      	uxth	r3, r3
 801c374:	6878      	ldr	r0, [r7, #4]
 801c376:	f001 fa47 	bl	801d808 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	613b      	str	r3, [r7, #16]
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	2250      	movs	r2, #80	@ 0x50
 801c382:	5a9b      	ldrh	r3, [r3, r2]
 801c384:	b29b      	uxth	r3, r3
 801c386:	001a      	movs	r2, r3
 801c388:	693b      	ldr	r3, [r7, #16]
 801c38a:	189b      	adds	r3, r3, r2
 801c38c:	613b      	str	r3, [r7, #16]
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	781b      	ldrb	r3, [r3, #0]
 801c392:	00da      	lsls	r2, r3, #3
 801c394:	693b      	ldr	r3, [r7, #16]
 801c396:	18d3      	adds	r3, r2, r3
 801c398:	4ad7      	ldr	r2, [pc, #860]	@ (801c6f8 <USB_EPStartXfer+0x3d4>)
 801c39a:	4694      	mov	ip, r2
 801c39c:	4463      	add	r3, ip
 801c39e:	60fb      	str	r3, [r7, #12]
 801c3a0:	1d7b      	adds	r3, r7, #5
 801c3a2:	33ff      	adds	r3, #255	@ 0xff
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	b29a      	uxth	r2, r3
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	801a      	strh	r2, [r3, #0]
 801c3ac:	f000 fccd 	bl	801cd4a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801c3b0:	683b      	ldr	r3, [r7, #0]
 801c3b2:	78db      	ldrb	r3, [r3, #3]
 801c3b4:	2b02      	cmp	r3, #2
 801c3b6:	d000      	beq.n	801c3ba <USB_EPStartXfer+0x96>
 801c3b8:	e362      	b.n	801ca80 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801c3ba:	683b      	ldr	r3, [r7, #0]
 801c3bc:	6a1a      	ldr	r2, [r3, #32]
 801c3be:	683b      	ldr	r3, [r7, #0]
 801c3c0:	691b      	ldr	r3, [r3, #16]
 801c3c2:	429a      	cmp	r2, r3
 801c3c4:	d800      	bhi.n	801c3c8 <USB_EPStartXfer+0xa4>
 801c3c6:	e309      	b.n	801c9dc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801c3c8:	687a      	ldr	r2, [r7, #4]
 801c3ca:	683b      	ldr	r3, [r7, #0]
 801c3cc:	781b      	ldrb	r3, [r3, #0]
 801c3ce:	009b      	lsls	r3, r3, #2
 801c3d0:	18d3      	adds	r3, r2, r3
 801c3d2:	881b      	ldrh	r3, [r3, #0]
 801c3d4:	b29a      	uxth	r2, r3
 801c3d6:	2056      	movs	r0, #86	@ 0x56
 801c3d8:	183b      	adds	r3, r7, r0
 801c3da:	49c8      	ldr	r1, [pc, #800]	@ (801c6fc <USB_EPStartXfer+0x3d8>)
 801c3dc:	400a      	ands	r2, r1
 801c3de:	801a      	strh	r2, [r3, #0]
 801c3e0:	687a      	ldr	r2, [r7, #4]
 801c3e2:	683b      	ldr	r3, [r7, #0]
 801c3e4:	781b      	ldrb	r3, [r3, #0]
 801c3e6:	009b      	lsls	r3, r3, #2
 801c3e8:	18d3      	adds	r3, r2, r3
 801c3ea:	183a      	adds	r2, r7, r0
 801c3ec:	8812      	ldrh	r2, [r2, #0]
 801c3ee:	49c4      	ldr	r1, [pc, #784]	@ (801c700 <USB_EPStartXfer+0x3dc>)
 801c3f0:	430a      	orrs	r2, r1
 801c3f2:	b292      	uxth	r2, r2
 801c3f4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801c3f6:	683b      	ldr	r3, [r7, #0]
 801c3f8:	6a1a      	ldr	r2, [r3, #32]
 801c3fa:	1d7b      	adds	r3, r7, #5
 801c3fc:	33ff      	adds	r3, #255	@ 0xff
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	1ad2      	subs	r2, r2, r3
 801c402:	683b      	ldr	r3, [r7, #0]
 801c404:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801c406:	687a      	ldr	r2, [r7, #4]
 801c408:	683b      	ldr	r3, [r7, #0]
 801c40a:	781b      	ldrb	r3, [r3, #0]
 801c40c:	009b      	lsls	r3, r3, #2
 801c40e:	18d3      	adds	r3, r2, r3
 801c410:	881b      	ldrh	r3, [r3, #0]
 801c412:	b29b      	uxth	r3, r3
 801c414:	001a      	movs	r2, r3
 801c416:	2340      	movs	r3, #64	@ 0x40
 801c418:	4013      	ands	r3, r2
 801c41a:	d100      	bne.n	801c41e <USB_EPStartXfer+0xfa>
 801c41c:	e176      	b.n	801c70c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	633b      	str	r3, [r7, #48]	@ 0x30
 801c422:	683b      	ldr	r3, [r7, #0]
 801c424:	785b      	ldrb	r3, [r3, #1]
 801c426:	2b00      	cmp	r3, #0
 801c428:	d000      	beq.n	801c42c <USB_EPStartXfer+0x108>
 801c42a:	e074      	b.n	801c516 <USB_EPStartXfer+0x1f2>
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	2250      	movs	r2, #80	@ 0x50
 801c434:	5a9b      	ldrh	r3, [r3, r2]
 801c436:	b29b      	uxth	r3, r3
 801c438:	001a      	movs	r2, r3
 801c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c43c:	189b      	adds	r3, r3, r2
 801c43e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c440:	683b      	ldr	r3, [r7, #0]
 801c442:	781b      	ldrb	r3, [r3, #0]
 801c444:	00da      	lsls	r2, r3, #3
 801c446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c448:	18d3      	adds	r3, r2, r3
 801c44a:	4aae      	ldr	r2, [pc, #696]	@ (801c704 <USB_EPStartXfer+0x3e0>)
 801c44c:	4694      	mov	ip, r2
 801c44e:	4463      	add	r3, ip
 801c450:	627b      	str	r3, [r7, #36]	@ 0x24
 801c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c454:	881b      	ldrh	r3, [r3, #0]
 801c456:	b29b      	uxth	r3, r3
 801c458:	059b      	lsls	r3, r3, #22
 801c45a:	0d9b      	lsrs	r3, r3, #22
 801c45c:	b29a      	uxth	r2, r3
 801c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c460:	801a      	strh	r2, [r3, #0]
 801c462:	1d7b      	adds	r3, r7, #5
 801c464:	33ff      	adds	r3, #255	@ 0xff
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	2b3e      	cmp	r3, #62	@ 0x3e
 801c46a:	d924      	bls.n	801c4b6 <USB_EPStartXfer+0x192>
 801c46c:	1d7b      	adds	r3, r7, #5
 801c46e:	33ff      	adds	r3, #255	@ 0xff
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	095b      	lsrs	r3, r3, #5
 801c474:	1c7a      	adds	r2, r7, #1
 801c476:	32ff      	adds	r2, #255	@ 0xff
 801c478:	6013      	str	r3, [r2, #0]
 801c47a:	1d7b      	adds	r3, r7, #5
 801c47c:	33ff      	adds	r3, #255	@ 0xff
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	221f      	movs	r2, #31
 801c482:	4013      	ands	r3, r2
 801c484:	d106      	bne.n	801c494 <USB_EPStartXfer+0x170>
 801c486:	1c7b      	adds	r3, r7, #1
 801c488:	33ff      	adds	r3, #255	@ 0xff
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	3b01      	subs	r3, #1
 801c48e:	1c7a      	adds	r2, r7, #1
 801c490:	32ff      	adds	r2, #255	@ 0xff
 801c492:	6013      	str	r3, [r2, #0]
 801c494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c496:	881b      	ldrh	r3, [r3, #0]
 801c498:	b29a      	uxth	r2, r3
 801c49a:	1c7b      	adds	r3, r7, #1
 801c49c:	33ff      	adds	r3, #255	@ 0xff
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	b29b      	uxth	r3, r3
 801c4a2:	029b      	lsls	r3, r3, #10
 801c4a4:	b29b      	uxth	r3, r3
 801c4a6:	4313      	orrs	r3, r2
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	4a97      	ldr	r2, [pc, #604]	@ (801c708 <USB_EPStartXfer+0x3e4>)
 801c4ac:	4313      	orrs	r3, r2
 801c4ae:	b29a      	uxth	r2, r3
 801c4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4b2:	801a      	strh	r2, [r3, #0]
 801c4b4:	e04a      	b.n	801c54c <USB_EPStartXfer+0x228>
 801c4b6:	1d7b      	adds	r3, r7, #5
 801c4b8:	33ff      	adds	r3, #255	@ 0xff
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d108      	bne.n	801c4d2 <USB_EPStartXfer+0x1ae>
 801c4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c2:	881b      	ldrh	r3, [r3, #0]
 801c4c4:	b29b      	uxth	r3, r3
 801c4c6:	4a90      	ldr	r2, [pc, #576]	@ (801c708 <USB_EPStartXfer+0x3e4>)
 801c4c8:	4313      	orrs	r3, r2
 801c4ca:	b29a      	uxth	r2, r3
 801c4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4ce:	801a      	strh	r2, [r3, #0]
 801c4d0:	e03c      	b.n	801c54c <USB_EPStartXfer+0x228>
 801c4d2:	1d7b      	adds	r3, r7, #5
 801c4d4:	33ff      	adds	r3, #255	@ 0xff
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	085b      	lsrs	r3, r3, #1
 801c4da:	1c7a      	adds	r2, r7, #1
 801c4dc:	32ff      	adds	r2, #255	@ 0xff
 801c4de:	6013      	str	r3, [r2, #0]
 801c4e0:	1d7b      	adds	r3, r7, #5
 801c4e2:	33ff      	adds	r3, #255	@ 0xff
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	2201      	movs	r2, #1
 801c4e8:	4013      	ands	r3, r2
 801c4ea:	d006      	beq.n	801c4fa <USB_EPStartXfer+0x1d6>
 801c4ec:	1c7b      	adds	r3, r7, #1
 801c4ee:	33ff      	adds	r3, #255	@ 0xff
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	3301      	adds	r3, #1
 801c4f4:	1c7a      	adds	r2, r7, #1
 801c4f6:	32ff      	adds	r2, #255	@ 0xff
 801c4f8:	6013      	str	r3, [r2, #0]
 801c4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4fc:	881b      	ldrh	r3, [r3, #0]
 801c4fe:	b29a      	uxth	r2, r3
 801c500:	1c7b      	adds	r3, r7, #1
 801c502:	33ff      	adds	r3, #255	@ 0xff
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	b29b      	uxth	r3, r3
 801c508:	029b      	lsls	r3, r3, #10
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	4313      	orrs	r3, r2
 801c50e:	b29a      	uxth	r2, r3
 801c510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c512:	801a      	strh	r2, [r3, #0]
 801c514:	e01a      	b.n	801c54c <USB_EPStartXfer+0x228>
 801c516:	683b      	ldr	r3, [r7, #0]
 801c518:	785b      	ldrb	r3, [r3, #1]
 801c51a:	2b01      	cmp	r3, #1
 801c51c:	d116      	bne.n	801c54c <USB_EPStartXfer+0x228>
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	2250      	movs	r2, #80	@ 0x50
 801c522:	5a9b      	ldrh	r3, [r3, r2]
 801c524:	b29b      	uxth	r3, r3
 801c526:	001a      	movs	r2, r3
 801c528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c52a:	189b      	adds	r3, r3, r2
 801c52c:	633b      	str	r3, [r7, #48]	@ 0x30
 801c52e:	683b      	ldr	r3, [r7, #0]
 801c530:	781b      	ldrb	r3, [r3, #0]
 801c532:	00da      	lsls	r2, r3, #3
 801c534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c536:	18d3      	adds	r3, r2, r3
 801c538:	4a72      	ldr	r2, [pc, #456]	@ (801c704 <USB_EPStartXfer+0x3e0>)
 801c53a:	4694      	mov	ip, r2
 801c53c:	4463      	add	r3, ip
 801c53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c540:	1d7b      	adds	r3, r7, #5
 801c542:	33ff      	adds	r3, #255	@ 0xff
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	b29a      	uxth	r2, r3
 801c548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c54a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801c54c:	2076      	movs	r0, #118	@ 0x76
 801c54e:	183b      	adds	r3, r7, r0
 801c550:	683a      	ldr	r2, [r7, #0]
 801c552:	8952      	ldrh	r2, [r2, #10]
 801c554:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c556:	683b      	ldr	r3, [r7, #0]
 801c558:	6959      	ldr	r1, [r3, #20]
 801c55a:	1d7b      	adds	r3, r7, #5
 801c55c:	33ff      	adds	r3, #255	@ 0xff
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	b29c      	uxth	r4, r3
 801c562:	183b      	adds	r3, r7, r0
 801c564:	881a      	ldrh	r2, [r3, #0]
 801c566:	6878      	ldr	r0, [r7, #4]
 801c568:	0023      	movs	r3, r4
 801c56a:	f001 f94d 	bl	801d808 <USB_WritePMA>
            ep->xfer_buff += len;
 801c56e:	683b      	ldr	r3, [r7, #0]
 801c570:	695a      	ldr	r2, [r3, #20]
 801c572:	1d7b      	adds	r3, r7, #5
 801c574:	33ff      	adds	r3, #255	@ 0xff
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	18d2      	adds	r2, r2, r3
 801c57a:	683b      	ldr	r3, [r7, #0]
 801c57c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801c57e:	683b      	ldr	r3, [r7, #0]
 801c580:	6a1a      	ldr	r2, [r3, #32]
 801c582:	683b      	ldr	r3, [r7, #0]
 801c584:	691b      	ldr	r3, [r3, #16]
 801c586:	429a      	cmp	r2, r3
 801c588:	d908      	bls.n	801c59c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801c58a:	683b      	ldr	r3, [r7, #0]
 801c58c:	6a1a      	ldr	r2, [r3, #32]
 801c58e:	1d7b      	adds	r3, r7, #5
 801c590:	33ff      	adds	r3, #255	@ 0xff
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	1ad2      	subs	r2, r2, r3
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	621a      	str	r2, [r3, #32]
 801c59a:	e007      	b.n	801c5ac <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801c59c:	683b      	ldr	r3, [r7, #0]
 801c59e:	6a1b      	ldr	r3, [r3, #32]
 801c5a0:	1d7a      	adds	r2, r7, #5
 801c5a2:	32ff      	adds	r2, #255	@ 0xff
 801c5a4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801c5a6:	683b      	ldr	r3, [r7, #0]
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c5ac:	683b      	ldr	r3, [r7, #0]
 801c5ae:	785b      	ldrb	r3, [r3, #1]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d000      	beq.n	801c5b6 <USB_EPStartXfer+0x292>
 801c5b4:	e070      	b.n	801c698 <USB_EPStartXfer+0x374>
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	61bb      	str	r3, [r7, #24]
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	2250      	movs	r2, #80	@ 0x50
 801c5be:	5a9b      	ldrh	r3, [r3, r2]
 801c5c0:	b29b      	uxth	r3, r3
 801c5c2:	001a      	movs	r2, r3
 801c5c4:	69bb      	ldr	r3, [r7, #24]
 801c5c6:	189b      	adds	r3, r3, r2
 801c5c8:	61bb      	str	r3, [r7, #24]
 801c5ca:	683b      	ldr	r3, [r7, #0]
 801c5cc:	781b      	ldrb	r3, [r3, #0]
 801c5ce:	00da      	lsls	r2, r3, #3
 801c5d0:	69bb      	ldr	r3, [r7, #24]
 801c5d2:	18d3      	adds	r3, r2, r3
 801c5d4:	4a48      	ldr	r2, [pc, #288]	@ (801c6f8 <USB_EPStartXfer+0x3d4>)
 801c5d6:	4694      	mov	ip, r2
 801c5d8:	4463      	add	r3, ip
 801c5da:	617b      	str	r3, [r7, #20]
 801c5dc:	697b      	ldr	r3, [r7, #20]
 801c5de:	881b      	ldrh	r3, [r3, #0]
 801c5e0:	b29b      	uxth	r3, r3
 801c5e2:	059b      	lsls	r3, r3, #22
 801c5e4:	0d9b      	lsrs	r3, r3, #22
 801c5e6:	b29a      	uxth	r2, r3
 801c5e8:	697b      	ldr	r3, [r7, #20]
 801c5ea:	801a      	strh	r2, [r3, #0]
 801c5ec:	1d7b      	adds	r3, r7, #5
 801c5ee:	33ff      	adds	r3, #255	@ 0xff
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	2b3e      	cmp	r3, #62	@ 0x3e
 801c5f4:	d922      	bls.n	801c63c <USB_EPStartXfer+0x318>
 801c5f6:	1d7b      	adds	r3, r7, #5
 801c5f8:	33ff      	adds	r3, #255	@ 0xff
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	095b      	lsrs	r3, r3, #5
 801c5fe:	21fc      	movs	r1, #252	@ 0xfc
 801c600:	187a      	adds	r2, r7, r1
 801c602:	6013      	str	r3, [r2, #0]
 801c604:	1d7b      	adds	r3, r7, #5
 801c606:	33ff      	adds	r3, #255	@ 0xff
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	221f      	movs	r2, #31
 801c60c:	4013      	ands	r3, r2
 801c60e:	d104      	bne.n	801c61a <USB_EPStartXfer+0x2f6>
 801c610:	187b      	adds	r3, r7, r1
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	3b01      	subs	r3, #1
 801c616:	187a      	adds	r2, r7, r1
 801c618:	6013      	str	r3, [r2, #0]
 801c61a:	697b      	ldr	r3, [r7, #20]
 801c61c:	881b      	ldrh	r3, [r3, #0]
 801c61e:	b29a      	uxth	r2, r3
 801c620:	23fc      	movs	r3, #252	@ 0xfc
 801c622:	18fb      	adds	r3, r7, r3
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	b29b      	uxth	r3, r3
 801c628:	029b      	lsls	r3, r3, #10
 801c62a:	b29b      	uxth	r3, r3
 801c62c:	4313      	orrs	r3, r2
 801c62e:	b29b      	uxth	r3, r3
 801c630:	4a35      	ldr	r2, [pc, #212]	@ (801c708 <USB_EPStartXfer+0x3e4>)
 801c632:	4313      	orrs	r3, r2
 801c634:	b29a      	uxth	r2, r3
 801c636:	697b      	ldr	r3, [r7, #20]
 801c638:	801a      	strh	r2, [r3, #0]
 801c63a:	e04a      	b.n	801c6d2 <USB_EPStartXfer+0x3ae>
 801c63c:	1d7b      	adds	r3, r7, #5
 801c63e:	33ff      	adds	r3, #255	@ 0xff
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	2b00      	cmp	r3, #0
 801c644:	d108      	bne.n	801c658 <USB_EPStartXfer+0x334>
 801c646:	697b      	ldr	r3, [r7, #20]
 801c648:	881b      	ldrh	r3, [r3, #0]
 801c64a:	b29b      	uxth	r3, r3
 801c64c:	4a2e      	ldr	r2, [pc, #184]	@ (801c708 <USB_EPStartXfer+0x3e4>)
 801c64e:	4313      	orrs	r3, r2
 801c650:	b29a      	uxth	r2, r3
 801c652:	697b      	ldr	r3, [r7, #20]
 801c654:	801a      	strh	r2, [r3, #0]
 801c656:	e03c      	b.n	801c6d2 <USB_EPStartXfer+0x3ae>
 801c658:	1d7b      	adds	r3, r7, #5
 801c65a:	33ff      	adds	r3, #255	@ 0xff
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	085b      	lsrs	r3, r3, #1
 801c660:	21fc      	movs	r1, #252	@ 0xfc
 801c662:	187a      	adds	r2, r7, r1
 801c664:	6013      	str	r3, [r2, #0]
 801c666:	1d7b      	adds	r3, r7, #5
 801c668:	33ff      	adds	r3, #255	@ 0xff
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	2201      	movs	r2, #1
 801c66e:	4013      	ands	r3, r2
 801c670:	d004      	beq.n	801c67c <USB_EPStartXfer+0x358>
 801c672:	187b      	adds	r3, r7, r1
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	3301      	adds	r3, #1
 801c678:	187a      	adds	r2, r7, r1
 801c67a:	6013      	str	r3, [r2, #0]
 801c67c:	697b      	ldr	r3, [r7, #20]
 801c67e:	881b      	ldrh	r3, [r3, #0]
 801c680:	b29a      	uxth	r2, r3
 801c682:	23fc      	movs	r3, #252	@ 0xfc
 801c684:	18fb      	adds	r3, r7, r3
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	b29b      	uxth	r3, r3
 801c68a:	029b      	lsls	r3, r3, #10
 801c68c:	b29b      	uxth	r3, r3
 801c68e:	4313      	orrs	r3, r2
 801c690:	b29a      	uxth	r2, r3
 801c692:	697b      	ldr	r3, [r7, #20]
 801c694:	801a      	strh	r2, [r3, #0]
 801c696:	e01c      	b.n	801c6d2 <USB_EPStartXfer+0x3ae>
 801c698:	683b      	ldr	r3, [r7, #0]
 801c69a:	785b      	ldrb	r3, [r3, #1]
 801c69c:	2b01      	cmp	r3, #1
 801c69e:	d118      	bne.n	801c6d2 <USB_EPStartXfer+0x3ae>
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	623b      	str	r3, [r7, #32]
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	2250      	movs	r2, #80	@ 0x50
 801c6a8:	5a9b      	ldrh	r3, [r3, r2]
 801c6aa:	b29b      	uxth	r3, r3
 801c6ac:	001a      	movs	r2, r3
 801c6ae:	6a3b      	ldr	r3, [r7, #32]
 801c6b0:	189b      	adds	r3, r3, r2
 801c6b2:	623b      	str	r3, [r7, #32]
 801c6b4:	683b      	ldr	r3, [r7, #0]
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	00da      	lsls	r2, r3, #3
 801c6ba:	6a3b      	ldr	r3, [r7, #32]
 801c6bc:	18d3      	adds	r3, r2, r3
 801c6be:	4a0e      	ldr	r2, [pc, #56]	@ (801c6f8 <USB_EPStartXfer+0x3d4>)
 801c6c0:	4694      	mov	ip, r2
 801c6c2:	4463      	add	r3, ip
 801c6c4:	61fb      	str	r3, [r7, #28]
 801c6c6:	1d7b      	adds	r3, r7, #5
 801c6c8:	33ff      	adds	r3, #255	@ 0xff
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	b29a      	uxth	r2, r3
 801c6ce:	69fb      	ldr	r3, [r7, #28]
 801c6d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801c6d2:	2076      	movs	r0, #118	@ 0x76
 801c6d4:	183b      	adds	r3, r7, r0
 801c6d6:	683a      	ldr	r2, [r7, #0]
 801c6d8:	8912      	ldrh	r2, [r2, #8]
 801c6da:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c6dc:	683b      	ldr	r3, [r7, #0]
 801c6de:	6959      	ldr	r1, [r3, #20]
 801c6e0:	1d7b      	adds	r3, r7, #5
 801c6e2:	33ff      	adds	r3, #255	@ 0xff
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	b29c      	uxth	r4, r3
 801c6e8:	183b      	adds	r3, r7, r0
 801c6ea:	881a      	ldrh	r2, [r3, #0]
 801c6ec:	6878      	ldr	r0, [r7, #4]
 801c6ee:	0023      	movs	r3, r4
 801c6f0:	f001 f88a 	bl	801d808 <USB_WritePMA>
 801c6f4:	e329      	b.n	801cd4a <USB_EPStartXfer+0xa26>
 801c6f6:	46c0      	nop			@ (mov r8, r8)
 801c6f8:	00000402 	.word	0x00000402
 801c6fc:	ffff8f8f 	.word	0xffff8f8f
 801c700:	ffff8180 	.word	0xffff8180
 801c704:	00000406 	.word	0x00000406
 801c708:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c70c:	683b      	ldr	r3, [r7, #0]
 801c70e:	785b      	ldrb	r3, [r3, #1]
 801c710:	2b00      	cmp	r3, #0
 801c712:	d000      	beq.n	801c716 <USB_EPStartXfer+0x3f2>
 801c714:	e070      	b.n	801c7f8 <USB_EPStartXfer+0x4d4>
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	2250      	movs	r2, #80	@ 0x50
 801c71e:	5a9b      	ldrh	r3, [r3, r2]
 801c720:	b29b      	uxth	r3, r3
 801c722:	001a      	movs	r2, r3
 801c724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c726:	189b      	adds	r3, r3, r2
 801c728:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c72a:	683b      	ldr	r3, [r7, #0]
 801c72c:	781b      	ldrb	r3, [r3, #0]
 801c72e:	00da      	lsls	r2, r3, #3
 801c730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c732:	18d3      	adds	r3, r2, r3
 801c734:	4acd      	ldr	r2, [pc, #820]	@ (801ca6c <USB_EPStartXfer+0x748>)
 801c736:	4694      	mov	ip, r2
 801c738:	4463      	add	r3, ip
 801c73a:	647b      	str	r3, [r7, #68]	@ 0x44
 801c73c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c73e:	881b      	ldrh	r3, [r3, #0]
 801c740:	b29b      	uxth	r3, r3
 801c742:	059b      	lsls	r3, r3, #22
 801c744:	0d9b      	lsrs	r3, r3, #22
 801c746:	b29a      	uxth	r2, r3
 801c748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c74a:	801a      	strh	r2, [r3, #0]
 801c74c:	1d7b      	adds	r3, r7, #5
 801c74e:	33ff      	adds	r3, #255	@ 0xff
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	2b3e      	cmp	r3, #62	@ 0x3e
 801c754:	d922      	bls.n	801c79c <USB_EPStartXfer+0x478>
 801c756:	1d7b      	adds	r3, r7, #5
 801c758:	33ff      	adds	r3, #255	@ 0xff
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	095b      	lsrs	r3, r3, #5
 801c75e:	21f8      	movs	r1, #248	@ 0xf8
 801c760:	187a      	adds	r2, r7, r1
 801c762:	6013      	str	r3, [r2, #0]
 801c764:	1d7b      	adds	r3, r7, #5
 801c766:	33ff      	adds	r3, #255	@ 0xff
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	221f      	movs	r2, #31
 801c76c:	4013      	ands	r3, r2
 801c76e:	d104      	bne.n	801c77a <USB_EPStartXfer+0x456>
 801c770:	187b      	adds	r3, r7, r1
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	3b01      	subs	r3, #1
 801c776:	187a      	adds	r2, r7, r1
 801c778:	6013      	str	r3, [r2, #0]
 801c77a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c77c:	881b      	ldrh	r3, [r3, #0]
 801c77e:	b29a      	uxth	r2, r3
 801c780:	23f8      	movs	r3, #248	@ 0xf8
 801c782:	18fb      	adds	r3, r7, r3
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	b29b      	uxth	r3, r3
 801c788:	029b      	lsls	r3, r3, #10
 801c78a:	b29b      	uxth	r3, r3
 801c78c:	4313      	orrs	r3, r2
 801c78e:	b29b      	uxth	r3, r3
 801c790:	4ab7      	ldr	r2, [pc, #732]	@ (801ca70 <USB_EPStartXfer+0x74c>)
 801c792:	4313      	orrs	r3, r2
 801c794:	b29a      	uxth	r2, r3
 801c796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c798:	801a      	strh	r2, [r3, #0]
 801c79a:	e04a      	b.n	801c832 <USB_EPStartXfer+0x50e>
 801c79c:	1d7b      	adds	r3, r7, #5
 801c79e:	33ff      	adds	r3, #255	@ 0xff
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d108      	bne.n	801c7b8 <USB_EPStartXfer+0x494>
 801c7a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c7a8:	881b      	ldrh	r3, [r3, #0]
 801c7aa:	b29b      	uxth	r3, r3
 801c7ac:	4ab0      	ldr	r2, [pc, #704]	@ (801ca70 <USB_EPStartXfer+0x74c>)
 801c7ae:	4313      	orrs	r3, r2
 801c7b0:	b29a      	uxth	r2, r3
 801c7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c7b4:	801a      	strh	r2, [r3, #0]
 801c7b6:	e03c      	b.n	801c832 <USB_EPStartXfer+0x50e>
 801c7b8:	1d7b      	adds	r3, r7, #5
 801c7ba:	33ff      	adds	r3, #255	@ 0xff
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	085b      	lsrs	r3, r3, #1
 801c7c0:	21f8      	movs	r1, #248	@ 0xf8
 801c7c2:	187a      	adds	r2, r7, r1
 801c7c4:	6013      	str	r3, [r2, #0]
 801c7c6:	1d7b      	adds	r3, r7, #5
 801c7c8:	33ff      	adds	r3, #255	@ 0xff
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	2201      	movs	r2, #1
 801c7ce:	4013      	ands	r3, r2
 801c7d0:	d004      	beq.n	801c7dc <USB_EPStartXfer+0x4b8>
 801c7d2:	187b      	adds	r3, r7, r1
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	3301      	adds	r3, #1
 801c7d8:	187a      	adds	r2, r7, r1
 801c7da:	6013      	str	r3, [r2, #0]
 801c7dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c7de:	881b      	ldrh	r3, [r3, #0]
 801c7e0:	b29a      	uxth	r2, r3
 801c7e2:	23f8      	movs	r3, #248	@ 0xf8
 801c7e4:	18fb      	adds	r3, r7, r3
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	b29b      	uxth	r3, r3
 801c7ea:	029b      	lsls	r3, r3, #10
 801c7ec:	b29b      	uxth	r3, r3
 801c7ee:	4313      	orrs	r3, r2
 801c7f0:	b29a      	uxth	r2, r3
 801c7f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c7f4:	801a      	strh	r2, [r3, #0]
 801c7f6:	e01c      	b.n	801c832 <USB_EPStartXfer+0x50e>
 801c7f8:	683b      	ldr	r3, [r7, #0]
 801c7fa:	785b      	ldrb	r3, [r3, #1]
 801c7fc:	2b01      	cmp	r3, #1
 801c7fe:	d118      	bne.n	801c832 <USB_EPStartXfer+0x50e>
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	653b      	str	r3, [r7, #80]	@ 0x50
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	2250      	movs	r2, #80	@ 0x50
 801c808:	5a9b      	ldrh	r3, [r3, r2]
 801c80a:	b29b      	uxth	r3, r3
 801c80c:	001a      	movs	r2, r3
 801c80e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c810:	189b      	adds	r3, r3, r2
 801c812:	653b      	str	r3, [r7, #80]	@ 0x50
 801c814:	683b      	ldr	r3, [r7, #0]
 801c816:	781b      	ldrb	r3, [r3, #0]
 801c818:	00da      	lsls	r2, r3, #3
 801c81a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c81c:	18d3      	adds	r3, r2, r3
 801c81e:	4a93      	ldr	r2, [pc, #588]	@ (801ca6c <USB_EPStartXfer+0x748>)
 801c820:	4694      	mov	ip, r2
 801c822:	4463      	add	r3, ip
 801c824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c826:	1d7b      	adds	r3, r7, #5
 801c828:	33ff      	adds	r3, #255	@ 0xff
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	b29a      	uxth	r2, r3
 801c82e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c830:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801c832:	2076      	movs	r0, #118	@ 0x76
 801c834:	183b      	adds	r3, r7, r0
 801c836:	683a      	ldr	r2, [r7, #0]
 801c838:	8912      	ldrh	r2, [r2, #8]
 801c83a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c83c:	683b      	ldr	r3, [r7, #0]
 801c83e:	6959      	ldr	r1, [r3, #20]
 801c840:	1d7b      	adds	r3, r7, #5
 801c842:	33ff      	adds	r3, #255	@ 0xff
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	b29c      	uxth	r4, r3
 801c848:	183b      	adds	r3, r7, r0
 801c84a:	881a      	ldrh	r2, [r3, #0]
 801c84c:	6878      	ldr	r0, [r7, #4]
 801c84e:	0023      	movs	r3, r4
 801c850:	f000 ffda 	bl	801d808 <USB_WritePMA>
            ep->xfer_buff += len;
 801c854:	683b      	ldr	r3, [r7, #0]
 801c856:	695a      	ldr	r2, [r3, #20]
 801c858:	1d7b      	adds	r3, r7, #5
 801c85a:	33ff      	adds	r3, #255	@ 0xff
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	18d2      	adds	r2, r2, r3
 801c860:	683b      	ldr	r3, [r7, #0]
 801c862:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801c864:	683b      	ldr	r3, [r7, #0]
 801c866:	6a1a      	ldr	r2, [r3, #32]
 801c868:	683b      	ldr	r3, [r7, #0]
 801c86a:	691b      	ldr	r3, [r3, #16]
 801c86c:	429a      	cmp	r2, r3
 801c86e:	d908      	bls.n	801c882 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801c870:	683b      	ldr	r3, [r7, #0]
 801c872:	6a1a      	ldr	r2, [r3, #32]
 801c874:	1d7b      	adds	r3, r7, #5
 801c876:	33ff      	adds	r3, #255	@ 0xff
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	1ad2      	subs	r2, r2, r3
 801c87c:	683b      	ldr	r3, [r7, #0]
 801c87e:	621a      	str	r2, [r3, #32]
 801c880:	e007      	b.n	801c892 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801c882:	683b      	ldr	r3, [r7, #0]
 801c884:	6a1b      	ldr	r3, [r3, #32]
 801c886:	1d7a      	adds	r2, r7, #5
 801c888:	32ff      	adds	r2, #255	@ 0xff
 801c88a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	2200      	movs	r2, #0
 801c890:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	643b      	str	r3, [r7, #64]	@ 0x40
 801c896:	683b      	ldr	r3, [r7, #0]
 801c898:	785b      	ldrb	r3, [r3, #1]
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d000      	beq.n	801c8a0 <USB_EPStartXfer+0x57c>
 801c89e:	e070      	b.n	801c982 <USB_EPStartXfer+0x65e>
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	2250      	movs	r2, #80	@ 0x50
 801c8a8:	5a9b      	ldrh	r3, [r3, r2]
 801c8aa:	b29b      	uxth	r3, r3
 801c8ac:	001a      	movs	r2, r3
 801c8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8b0:	189b      	adds	r3, r3, r2
 801c8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c8b4:	683b      	ldr	r3, [r7, #0]
 801c8b6:	781b      	ldrb	r3, [r3, #0]
 801c8b8:	00da      	lsls	r2, r3, #3
 801c8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8bc:	18d3      	adds	r3, r2, r3
 801c8be:	4a6d      	ldr	r2, [pc, #436]	@ (801ca74 <USB_EPStartXfer+0x750>)
 801c8c0:	4694      	mov	ip, r2
 801c8c2:	4463      	add	r3, ip
 801c8c4:	637b      	str	r3, [r7, #52]	@ 0x34
 801c8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c8c8:	881b      	ldrh	r3, [r3, #0]
 801c8ca:	b29b      	uxth	r3, r3
 801c8cc:	059b      	lsls	r3, r3, #22
 801c8ce:	0d9b      	lsrs	r3, r3, #22
 801c8d0:	b29a      	uxth	r2, r3
 801c8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c8d4:	801a      	strh	r2, [r3, #0]
 801c8d6:	1d7b      	adds	r3, r7, #5
 801c8d8:	33ff      	adds	r3, #255	@ 0xff
 801c8da:	681b      	ldr	r3, [r3, #0]
 801c8dc:	2b3e      	cmp	r3, #62	@ 0x3e
 801c8de:	d922      	bls.n	801c926 <USB_EPStartXfer+0x602>
 801c8e0:	1d7b      	adds	r3, r7, #5
 801c8e2:	33ff      	adds	r3, #255	@ 0xff
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	095b      	lsrs	r3, r3, #5
 801c8e8:	21f4      	movs	r1, #244	@ 0xf4
 801c8ea:	187a      	adds	r2, r7, r1
 801c8ec:	6013      	str	r3, [r2, #0]
 801c8ee:	1d7b      	adds	r3, r7, #5
 801c8f0:	33ff      	adds	r3, #255	@ 0xff
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	221f      	movs	r2, #31
 801c8f6:	4013      	ands	r3, r2
 801c8f8:	d104      	bne.n	801c904 <USB_EPStartXfer+0x5e0>
 801c8fa:	187b      	adds	r3, r7, r1
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	3b01      	subs	r3, #1
 801c900:	187a      	adds	r2, r7, r1
 801c902:	6013      	str	r3, [r2, #0]
 801c904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c906:	881b      	ldrh	r3, [r3, #0]
 801c908:	b29a      	uxth	r2, r3
 801c90a:	23f4      	movs	r3, #244	@ 0xf4
 801c90c:	18fb      	adds	r3, r7, r3
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	b29b      	uxth	r3, r3
 801c912:	029b      	lsls	r3, r3, #10
 801c914:	b29b      	uxth	r3, r3
 801c916:	4313      	orrs	r3, r2
 801c918:	b29b      	uxth	r3, r3
 801c91a:	4a55      	ldr	r2, [pc, #340]	@ (801ca70 <USB_EPStartXfer+0x74c>)
 801c91c:	4313      	orrs	r3, r2
 801c91e:	b29a      	uxth	r2, r3
 801c920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c922:	801a      	strh	r2, [r3, #0]
 801c924:	e048      	b.n	801c9b8 <USB_EPStartXfer+0x694>
 801c926:	1d7b      	adds	r3, r7, #5
 801c928:	33ff      	adds	r3, #255	@ 0xff
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d108      	bne.n	801c942 <USB_EPStartXfer+0x61e>
 801c930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c932:	881b      	ldrh	r3, [r3, #0]
 801c934:	b29b      	uxth	r3, r3
 801c936:	4a4e      	ldr	r2, [pc, #312]	@ (801ca70 <USB_EPStartXfer+0x74c>)
 801c938:	4313      	orrs	r3, r2
 801c93a:	b29a      	uxth	r2, r3
 801c93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c93e:	801a      	strh	r2, [r3, #0]
 801c940:	e03a      	b.n	801c9b8 <USB_EPStartXfer+0x694>
 801c942:	1d7b      	adds	r3, r7, #5
 801c944:	33ff      	adds	r3, #255	@ 0xff
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	085b      	lsrs	r3, r3, #1
 801c94a:	21f4      	movs	r1, #244	@ 0xf4
 801c94c:	187a      	adds	r2, r7, r1
 801c94e:	6013      	str	r3, [r2, #0]
 801c950:	1d7b      	adds	r3, r7, #5
 801c952:	33ff      	adds	r3, #255	@ 0xff
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	2201      	movs	r2, #1
 801c958:	4013      	ands	r3, r2
 801c95a:	d004      	beq.n	801c966 <USB_EPStartXfer+0x642>
 801c95c:	187b      	adds	r3, r7, r1
 801c95e:	681b      	ldr	r3, [r3, #0]
 801c960:	3301      	adds	r3, #1
 801c962:	187a      	adds	r2, r7, r1
 801c964:	6013      	str	r3, [r2, #0]
 801c966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c968:	881b      	ldrh	r3, [r3, #0]
 801c96a:	b29a      	uxth	r2, r3
 801c96c:	23f4      	movs	r3, #244	@ 0xf4
 801c96e:	18fb      	adds	r3, r7, r3
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	b29b      	uxth	r3, r3
 801c974:	029b      	lsls	r3, r3, #10
 801c976:	b29b      	uxth	r3, r3
 801c978:	4313      	orrs	r3, r2
 801c97a:	b29a      	uxth	r2, r3
 801c97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c97e:	801a      	strh	r2, [r3, #0]
 801c980:	e01a      	b.n	801c9b8 <USB_EPStartXfer+0x694>
 801c982:	683b      	ldr	r3, [r7, #0]
 801c984:	785b      	ldrb	r3, [r3, #1]
 801c986:	2b01      	cmp	r3, #1
 801c988:	d116      	bne.n	801c9b8 <USB_EPStartXfer+0x694>
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	2250      	movs	r2, #80	@ 0x50
 801c98e:	5a9b      	ldrh	r3, [r3, r2]
 801c990:	b29b      	uxth	r3, r3
 801c992:	001a      	movs	r2, r3
 801c994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c996:	189b      	adds	r3, r3, r2
 801c998:	643b      	str	r3, [r7, #64]	@ 0x40
 801c99a:	683b      	ldr	r3, [r7, #0]
 801c99c:	781b      	ldrb	r3, [r3, #0]
 801c99e:	00da      	lsls	r2, r3, #3
 801c9a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c9a2:	18d3      	adds	r3, r2, r3
 801c9a4:	4a33      	ldr	r2, [pc, #204]	@ (801ca74 <USB_EPStartXfer+0x750>)
 801c9a6:	4694      	mov	ip, r2
 801c9a8:	4463      	add	r3, ip
 801c9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c9ac:	1d7b      	adds	r3, r7, #5
 801c9ae:	33ff      	adds	r3, #255	@ 0xff
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	b29a      	uxth	r2, r3
 801c9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c9b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801c9b8:	2076      	movs	r0, #118	@ 0x76
 801c9ba:	183b      	adds	r3, r7, r0
 801c9bc:	683a      	ldr	r2, [r7, #0]
 801c9be:	8952      	ldrh	r2, [r2, #10]
 801c9c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c9c2:	683b      	ldr	r3, [r7, #0]
 801c9c4:	6959      	ldr	r1, [r3, #20]
 801c9c6:	1d7b      	adds	r3, r7, #5
 801c9c8:	33ff      	adds	r3, #255	@ 0xff
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	b29c      	uxth	r4, r3
 801c9ce:	183b      	adds	r3, r7, r0
 801c9d0:	881a      	ldrh	r2, [r3, #0]
 801c9d2:	6878      	ldr	r0, [r7, #4]
 801c9d4:	0023      	movs	r3, r4
 801c9d6:	f000 ff17 	bl	801d808 <USB_WritePMA>
 801c9da:	e1b6      	b.n	801cd4a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801c9dc:	683b      	ldr	r3, [r7, #0]
 801c9de:	6a1b      	ldr	r3, [r3, #32]
 801c9e0:	1d7a      	adds	r2, r7, #5
 801c9e2:	32ff      	adds	r2, #255	@ 0xff
 801c9e4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801c9e6:	687a      	ldr	r2, [r7, #4]
 801c9e8:	683b      	ldr	r3, [r7, #0]
 801c9ea:	781b      	ldrb	r3, [r3, #0]
 801c9ec:	009b      	lsls	r3, r3, #2
 801c9ee:	18d3      	adds	r3, r2, r3
 801c9f0:	881b      	ldrh	r3, [r3, #0]
 801c9f2:	b29a      	uxth	r2, r3
 801c9f4:	2062      	movs	r0, #98	@ 0x62
 801c9f6:	183b      	adds	r3, r7, r0
 801c9f8:	491f      	ldr	r1, [pc, #124]	@ (801ca78 <USB_EPStartXfer+0x754>)
 801c9fa:	400a      	ands	r2, r1
 801c9fc:	801a      	strh	r2, [r3, #0]
 801c9fe:	687a      	ldr	r2, [r7, #4]
 801ca00:	683b      	ldr	r3, [r7, #0]
 801ca02:	781b      	ldrb	r3, [r3, #0]
 801ca04:	009b      	lsls	r3, r3, #2
 801ca06:	18d3      	adds	r3, r2, r3
 801ca08:	183a      	adds	r2, r7, r0
 801ca0a:	8812      	ldrh	r2, [r2, #0]
 801ca0c:	491b      	ldr	r1, [pc, #108]	@ (801ca7c <USB_EPStartXfer+0x758>)
 801ca0e:	430a      	orrs	r2, r1
 801ca10:	b292      	uxth	r2, r2
 801ca12:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	2250      	movs	r2, #80	@ 0x50
 801ca1c:	5a9b      	ldrh	r3, [r3, r2]
 801ca1e:	b29b      	uxth	r3, r3
 801ca20:	001a      	movs	r2, r3
 801ca22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ca24:	189b      	adds	r3, r3, r2
 801ca26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ca28:	683b      	ldr	r3, [r7, #0]
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	00da      	lsls	r2, r3, #3
 801ca2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ca30:	18d3      	adds	r3, r2, r3
 801ca32:	4a0e      	ldr	r2, [pc, #56]	@ (801ca6c <USB_EPStartXfer+0x748>)
 801ca34:	4694      	mov	ip, r2
 801ca36:	4463      	add	r3, ip
 801ca38:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ca3a:	1d7b      	adds	r3, r7, #5
 801ca3c:	33ff      	adds	r3, #255	@ 0xff
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	b29a      	uxth	r2, r3
 801ca42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ca44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801ca46:	2076      	movs	r0, #118	@ 0x76
 801ca48:	183b      	adds	r3, r7, r0
 801ca4a:	683a      	ldr	r2, [r7, #0]
 801ca4c:	8912      	ldrh	r2, [r2, #8]
 801ca4e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ca50:	683b      	ldr	r3, [r7, #0]
 801ca52:	6959      	ldr	r1, [r3, #20]
 801ca54:	1d7b      	adds	r3, r7, #5
 801ca56:	33ff      	adds	r3, #255	@ 0xff
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	b29c      	uxth	r4, r3
 801ca5c:	183b      	adds	r3, r7, r0
 801ca5e:	881a      	ldrh	r2, [r3, #0]
 801ca60:	6878      	ldr	r0, [r7, #4]
 801ca62:	0023      	movs	r3, r4
 801ca64:	f000 fed0 	bl	801d808 <USB_WritePMA>
 801ca68:	e16f      	b.n	801cd4a <USB_EPStartXfer+0xa26>
 801ca6a:	46c0      	nop			@ (mov r8, r8)
 801ca6c:	00000402 	.word	0x00000402
 801ca70:	ffff8000 	.word	0xffff8000
 801ca74:	00000406 	.word	0x00000406
 801ca78:	ffff8e8f 	.word	0xffff8e8f
 801ca7c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801ca80:	683b      	ldr	r3, [r7, #0]
 801ca82:	6a1a      	ldr	r2, [r3, #32]
 801ca84:	1d7b      	adds	r3, r7, #5
 801ca86:	33ff      	adds	r3, #255	@ 0xff
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	1ad2      	subs	r2, r2, r3
 801ca8c:	683b      	ldr	r3, [r7, #0]
 801ca8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ca90:	687a      	ldr	r2, [r7, #4]
 801ca92:	683b      	ldr	r3, [r7, #0]
 801ca94:	781b      	ldrb	r3, [r3, #0]
 801ca96:	009b      	lsls	r3, r3, #2
 801ca98:	18d3      	adds	r3, r2, r3
 801ca9a:	881b      	ldrh	r3, [r3, #0]
 801ca9c:	b29b      	uxth	r3, r3
 801ca9e:	001a      	movs	r2, r3
 801caa0:	2340      	movs	r3, #64	@ 0x40
 801caa2:	4013      	ands	r3, r2
 801caa4:	d100      	bne.n	801caa8 <USB_EPStartXfer+0x784>
 801caa6:	e0a4      	b.n	801cbf2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	673b      	str	r3, [r7, #112]	@ 0x70
 801caac:	683b      	ldr	r3, [r7, #0]
 801caae:	785b      	ldrb	r3, [r3, #1]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d000      	beq.n	801cab6 <USB_EPStartXfer+0x792>
 801cab4:	e070      	b.n	801cb98 <USB_EPStartXfer+0x874>
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	2250      	movs	r2, #80	@ 0x50
 801cabe:	5a9b      	ldrh	r3, [r3, r2]
 801cac0:	b29b      	uxth	r3, r3
 801cac2:	001a      	movs	r2, r3
 801cac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cac6:	189b      	adds	r3, r3, r2
 801cac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801caca:	683b      	ldr	r3, [r7, #0]
 801cacc:	781b      	ldrb	r3, [r3, #0]
 801cace:	00da      	lsls	r2, r3, #3
 801cad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cad2:	18d3      	adds	r3, r2, r3
 801cad4:	4abc      	ldr	r2, [pc, #752]	@ (801cdc8 <USB_EPStartXfer+0xaa4>)
 801cad6:	4694      	mov	ip, r2
 801cad8:	4463      	add	r3, ip
 801cada:	667b      	str	r3, [r7, #100]	@ 0x64
 801cadc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cade:	881b      	ldrh	r3, [r3, #0]
 801cae0:	b29b      	uxth	r3, r3
 801cae2:	059b      	lsls	r3, r3, #22
 801cae4:	0d9b      	lsrs	r3, r3, #22
 801cae6:	b29a      	uxth	r2, r3
 801cae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801caea:	801a      	strh	r2, [r3, #0]
 801caec:	1d7b      	adds	r3, r7, #5
 801caee:	33ff      	adds	r3, #255	@ 0xff
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	2b3e      	cmp	r3, #62	@ 0x3e
 801caf4:	d922      	bls.n	801cb3c <USB_EPStartXfer+0x818>
 801caf6:	1d7b      	adds	r3, r7, #5
 801caf8:	33ff      	adds	r3, #255	@ 0xff
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	095b      	lsrs	r3, r3, #5
 801cafe:	21f0      	movs	r1, #240	@ 0xf0
 801cb00:	187a      	adds	r2, r7, r1
 801cb02:	6013      	str	r3, [r2, #0]
 801cb04:	1d7b      	adds	r3, r7, #5
 801cb06:	33ff      	adds	r3, #255	@ 0xff
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	221f      	movs	r2, #31
 801cb0c:	4013      	ands	r3, r2
 801cb0e:	d104      	bne.n	801cb1a <USB_EPStartXfer+0x7f6>
 801cb10:	187b      	adds	r3, r7, r1
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	3b01      	subs	r3, #1
 801cb16:	187a      	adds	r2, r7, r1
 801cb18:	6013      	str	r3, [r2, #0]
 801cb1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cb1c:	881b      	ldrh	r3, [r3, #0]
 801cb1e:	b29a      	uxth	r2, r3
 801cb20:	23f0      	movs	r3, #240	@ 0xf0
 801cb22:	18fb      	adds	r3, r7, r3
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	b29b      	uxth	r3, r3
 801cb28:	029b      	lsls	r3, r3, #10
 801cb2a:	b29b      	uxth	r3, r3
 801cb2c:	4313      	orrs	r3, r2
 801cb2e:	b29b      	uxth	r3, r3
 801cb30:	4aa6      	ldr	r2, [pc, #664]	@ (801cdcc <USB_EPStartXfer+0xaa8>)
 801cb32:	4313      	orrs	r3, r2
 801cb34:	b29a      	uxth	r2, r3
 801cb36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cb38:	801a      	strh	r2, [r3, #0]
 801cb3a:	e048      	b.n	801cbce <USB_EPStartXfer+0x8aa>
 801cb3c:	1d7b      	adds	r3, r7, #5
 801cb3e:	33ff      	adds	r3, #255	@ 0xff
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d108      	bne.n	801cb58 <USB_EPStartXfer+0x834>
 801cb46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cb48:	881b      	ldrh	r3, [r3, #0]
 801cb4a:	b29b      	uxth	r3, r3
 801cb4c:	4a9f      	ldr	r2, [pc, #636]	@ (801cdcc <USB_EPStartXfer+0xaa8>)
 801cb4e:	4313      	orrs	r3, r2
 801cb50:	b29a      	uxth	r2, r3
 801cb52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cb54:	801a      	strh	r2, [r3, #0]
 801cb56:	e03a      	b.n	801cbce <USB_EPStartXfer+0x8aa>
 801cb58:	1d7b      	adds	r3, r7, #5
 801cb5a:	33ff      	adds	r3, #255	@ 0xff
 801cb5c:	681b      	ldr	r3, [r3, #0]
 801cb5e:	085b      	lsrs	r3, r3, #1
 801cb60:	21f0      	movs	r1, #240	@ 0xf0
 801cb62:	187a      	adds	r2, r7, r1
 801cb64:	6013      	str	r3, [r2, #0]
 801cb66:	1d7b      	adds	r3, r7, #5
 801cb68:	33ff      	adds	r3, #255	@ 0xff
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	2201      	movs	r2, #1
 801cb6e:	4013      	ands	r3, r2
 801cb70:	d004      	beq.n	801cb7c <USB_EPStartXfer+0x858>
 801cb72:	187b      	adds	r3, r7, r1
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	3301      	adds	r3, #1
 801cb78:	187a      	adds	r2, r7, r1
 801cb7a:	6013      	str	r3, [r2, #0]
 801cb7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cb7e:	881b      	ldrh	r3, [r3, #0]
 801cb80:	b29a      	uxth	r2, r3
 801cb82:	23f0      	movs	r3, #240	@ 0xf0
 801cb84:	18fb      	adds	r3, r7, r3
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	b29b      	uxth	r3, r3
 801cb8a:	029b      	lsls	r3, r3, #10
 801cb8c:	b29b      	uxth	r3, r3
 801cb8e:	4313      	orrs	r3, r2
 801cb90:	b29a      	uxth	r2, r3
 801cb92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cb94:	801a      	strh	r2, [r3, #0]
 801cb96:	e01a      	b.n	801cbce <USB_EPStartXfer+0x8aa>
 801cb98:	683b      	ldr	r3, [r7, #0]
 801cb9a:	785b      	ldrb	r3, [r3, #1]
 801cb9c:	2b01      	cmp	r3, #1
 801cb9e:	d116      	bne.n	801cbce <USB_EPStartXfer+0x8aa>
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	2250      	movs	r2, #80	@ 0x50
 801cba4:	5a9b      	ldrh	r3, [r3, r2]
 801cba6:	b29b      	uxth	r3, r3
 801cba8:	001a      	movs	r2, r3
 801cbaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cbac:	189b      	adds	r3, r3, r2
 801cbae:	673b      	str	r3, [r7, #112]	@ 0x70
 801cbb0:	683b      	ldr	r3, [r7, #0]
 801cbb2:	781b      	ldrb	r3, [r3, #0]
 801cbb4:	00da      	lsls	r2, r3, #3
 801cbb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cbb8:	18d3      	adds	r3, r2, r3
 801cbba:	4a83      	ldr	r2, [pc, #524]	@ (801cdc8 <USB_EPStartXfer+0xaa4>)
 801cbbc:	4694      	mov	ip, r2
 801cbbe:	4463      	add	r3, ip
 801cbc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801cbc2:	1d7b      	adds	r3, r7, #5
 801cbc4:	33ff      	adds	r3, #255	@ 0xff
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	b29a      	uxth	r2, r3
 801cbca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801cbcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801cbce:	2076      	movs	r0, #118	@ 0x76
 801cbd0:	183b      	adds	r3, r7, r0
 801cbd2:	683a      	ldr	r2, [r7, #0]
 801cbd4:	8952      	ldrh	r2, [r2, #10]
 801cbd6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801cbd8:	683b      	ldr	r3, [r7, #0]
 801cbda:	6959      	ldr	r1, [r3, #20]
 801cbdc:	1d7b      	adds	r3, r7, #5
 801cbde:	33ff      	adds	r3, #255	@ 0xff
 801cbe0:	681b      	ldr	r3, [r3, #0]
 801cbe2:	b29c      	uxth	r4, r3
 801cbe4:	183b      	adds	r3, r7, r0
 801cbe6:	881a      	ldrh	r2, [r3, #0]
 801cbe8:	6878      	ldr	r0, [r7, #4]
 801cbea:	0023      	movs	r3, r4
 801cbec:	f000 fe0c 	bl	801d808 <USB_WritePMA>
 801cbf0:	e0ab      	b.n	801cd4a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801cbf2:	683b      	ldr	r3, [r7, #0]
 801cbf4:	785b      	ldrb	r3, [r3, #1]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d000      	beq.n	801cbfc <USB_EPStartXfer+0x8d8>
 801cbfa:	e070      	b.n	801ccde <USB_EPStartXfer+0x9ba>
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	2250      	movs	r2, #80	@ 0x50
 801cc04:	5a9b      	ldrh	r3, [r3, r2]
 801cc06:	b29b      	uxth	r3, r3
 801cc08:	001a      	movs	r2, r3
 801cc0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cc0c:	189b      	adds	r3, r3, r2
 801cc0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801cc10:	683b      	ldr	r3, [r7, #0]
 801cc12:	781b      	ldrb	r3, [r3, #0]
 801cc14:	00da      	lsls	r2, r3, #3
 801cc16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cc18:	18d3      	adds	r3, r2, r3
 801cc1a:	4a6d      	ldr	r2, [pc, #436]	@ (801cdd0 <USB_EPStartXfer+0xaac>)
 801cc1c:	4694      	mov	ip, r2
 801cc1e:	4463      	add	r3, ip
 801cc20:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cc22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cc24:	881b      	ldrh	r3, [r3, #0]
 801cc26:	b29b      	uxth	r3, r3
 801cc28:	059b      	lsls	r3, r3, #22
 801cc2a:	0d9b      	lsrs	r3, r3, #22
 801cc2c:	b29a      	uxth	r2, r3
 801cc2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cc30:	801a      	strh	r2, [r3, #0]
 801cc32:	1d7b      	adds	r3, r7, #5
 801cc34:	33ff      	adds	r3, #255	@ 0xff
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	2b3e      	cmp	r3, #62	@ 0x3e
 801cc3a:	d922      	bls.n	801cc82 <USB_EPStartXfer+0x95e>
 801cc3c:	1d7b      	adds	r3, r7, #5
 801cc3e:	33ff      	adds	r3, #255	@ 0xff
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	095b      	lsrs	r3, r3, #5
 801cc44:	21ec      	movs	r1, #236	@ 0xec
 801cc46:	187a      	adds	r2, r7, r1
 801cc48:	6013      	str	r3, [r2, #0]
 801cc4a:	1d7b      	adds	r3, r7, #5
 801cc4c:	33ff      	adds	r3, #255	@ 0xff
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	221f      	movs	r2, #31
 801cc52:	4013      	ands	r3, r2
 801cc54:	d104      	bne.n	801cc60 <USB_EPStartXfer+0x93c>
 801cc56:	187b      	adds	r3, r7, r1
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	3b01      	subs	r3, #1
 801cc5c:	187a      	adds	r2, r7, r1
 801cc5e:	6013      	str	r3, [r2, #0]
 801cc60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cc62:	881b      	ldrh	r3, [r3, #0]
 801cc64:	b29a      	uxth	r2, r3
 801cc66:	23ec      	movs	r3, #236	@ 0xec
 801cc68:	18fb      	adds	r3, r7, r3
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	b29b      	uxth	r3, r3
 801cc6e:	029b      	lsls	r3, r3, #10
 801cc70:	b29b      	uxth	r3, r3
 801cc72:	4313      	orrs	r3, r2
 801cc74:	b29b      	uxth	r3, r3
 801cc76:	4a55      	ldr	r2, [pc, #340]	@ (801cdcc <USB_EPStartXfer+0xaa8>)
 801cc78:	4313      	orrs	r3, r2
 801cc7a:	b29a      	uxth	r2, r3
 801cc7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cc7e:	801a      	strh	r2, [r3, #0]
 801cc80:	e052      	b.n	801cd28 <USB_EPStartXfer+0xa04>
 801cc82:	1d7b      	adds	r3, r7, #5
 801cc84:	33ff      	adds	r3, #255	@ 0xff
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d108      	bne.n	801cc9e <USB_EPStartXfer+0x97a>
 801cc8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cc8e:	881b      	ldrh	r3, [r3, #0]
 801cc90:	b29b      	uxth	r3, r3
 801cc92:	4a4e      	ldr	r2, [pc, #312]	@ (801cdcc <USB_EPStartXfer+0xaa8>)
 801cc94:	4313      	orrs	r3, r2
 801cc96:	b29a      	uxth	r2, r3
 801cc98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cc9a:	801a      	strh	r2, [r3, #0]
 801cc9c:	e044      	b.n	801cd28 <USB_EPStartXfer+0xa04>
 801cc9e:	1d7b      	adds	r3, r7, #5
 801cca0:	33ff      	adds	r3, #255	@ 0xff
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	085b      	lsrs	r3, r3, #1
 801cca6:	21ec      	movs	r1, #236	@ 0xec
 801cca8:	187a      	adds	r2, r7, r1
 801ccaa:	6013      	str	r3, [r2, #0]
 801ccac:	1d7b      	adds	r3, r7, #5
 801ccae:	33ff      	adds	r3, #255	@ 0xff
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	2201      	movs	r2, #1
 801ccb4:	4013      	ands	r3, r2
 801ccb6:	d004      	beq.n	801ccc2 <USB_EPStartXfer+0x99e>
 801ccb8:	187b      	adds	r3, r7, r1
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	3301      	adds	r3, #1
 801ccbe:	187a      	adds	r2, r7, r1
 801ccc0:	6013      	str	r3, [r2, #0]
 801ccc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ccc4:	881b      	ldrh	r3, [r3, #0]
 801ccc6:	b29a      	uxth	r2, r3
 801ccc8:	23ec      	movs	r3, #236	@ 0xec
 801ccca:	18fb      	adds	r3, r7, r3
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	b29b      	uxth	r3, r3
 801ccd0:	029b      	lsls	r3, r3, #10
 801ccd2:	b29b      	uxth	r3, r3
 801ccd4:	4313      	orrs	r3, r2
 801ccd6:	b29a      	uxth	r2, r3
 801ccd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ccda:	801a      	strh	r2, [r3, #0]
 801ccdc:	e024      	b.n	801cd28 <USB_EPStartXfer+0xa04>
 801ccde:	683b      	ldr	r3, [r7, #0]
 801cce0:	785b      	ldrb	r3, [r3, #1]
 801cce2:	2b01      	cmp	r3, #1
 801cce4:	d120      	bne.n	801cd28 <USB_EPStartXfer+0xa04>
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	2184      	movs	r1, #132	@ 0x84
 801ccea:	187a      	adds	r2, r7, r1
 801ccec:	6013      	str	r3, [r2, #0]
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	2250      	movs	r2, #80	@ 0x50
 801ccf2:	5a9b      	ldrh	r3, [r3, r2]
 801ccf4:	b29b      	uxth	r3, r3
 801ccf6:	001a      	movs	r2, r3
 801ccf8:	187b      	adds	r3, r7, r1
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	189b      	adds	r3, r3, r2
 801ccfe:	187a      	adds	r2, r7, r1
 801cd00:	6013      	str	r3, [r2, #0]
 801cd02:	683b      	ldr	r3, [r7, #0]
 801cd04:	781b      	ldrb	r3, [r3, #0]
 801cd06:	00da      	lsls	r2, r3, #3
 801cd08:	187b      	adds	r3, r7, r1
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	18d3      	adds	r3, r2, r3
 801cd0e:	4a30      	ldr	r2, [pc, #192]	@ (801cdd0 <USB_EPStartXfer+0xaac>)
 801cd10:	4694      	mov	ip, r2
 801cd12:	4463      	add	r3, ip
 801cd14:	2180      	movs	r1, #128	@ 0x80
 801cd16:	187a      	adds	r2, r7, r1
 801cd18:	6013      	str	r3, [r2, #0]
 801cd1a:	1d7b      	adds	r3, r7, #5
 801cd1c:	33ff      	adds	r3, #255	@ 0xff
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	b29a      	uxth	r2, r3
 801cd22:	187b      	adds	r3, r7, r1
 801cd24:	681b      	ldr	r3, [r3, #0]
 801cd26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801cd28:	2076      	movs	r0, #118	@ 0x76
 801cd2a:	183b      	adds	r3, r7, r0
 801cd2c:	683a      	ldr	r2, [r7, #0]
 801cd2e:	8912      	ldrh	r2, [r2, #8]
 801cd30:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801cd32:	683b      	ldr	r3, [r7, #0]
 801cd34:	6959      	ldr	r1, [r3, #20]
 801cd36:	1d7b      	adds	r3, r7, #5
 801cd38:	33ff      	adds	r3, #255	@ 0xff
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	b29c      	uxth	r4, r3
 801cd3e:	183b      	adds	r3, r7, r0
 801cd40:	881a      	ldrh	r2, [r3, #0]
 801cd42:	6878      	ldr	r0, [r7, #4]
 801cd44:	0023      	movs	r3, r4
 801cd46:	f000 fd5f 	bl	801d808 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801cd4a:	687a      	ldr	r2, [r7, #4]
 801cd4c:	683b      	ldr	r3, [r7, #0]
 801cd4e:	781b      	ldrb	r3, [r3, #0]
 801cd50:	009b      	lsls	r3, r3, #2
 801cd52:	18d3      	adds	r3, r2, r3
 801cd54:	881b      	ldrh	r3, [r3, #0]
 801cd56:	b29a      	uxth	r2, r3
 801cd58:	200a      	movs	r0, #10
 801cd5a:	183b      	adds	r3, r7, r0
 801cd5c:	491d      	ldr	r1, [pc, #116]	@ (801cdd4 <USB_EPStartXfer+0xab0>)
 801cd5e:	400a      	ands	r2, r1
 801cd60:	801a      	strh	r2, [r3, #0]
 801cd62:	183b      	adds	r3, r7, r0
 801cd64:	183a      	adds	r2, r7, r0
 801cd66:	8812      	ldrh	r2, [r2, #0]
 801cd68:	2110      	movs	r1, #16
 801cd6a:	404a      	eors	r2, r1
 801cd6c:	801a      	strh	r2, [r3, #0]
 801cd6e:	183b      	adds	r3, r7, r0
 801cd70:	183a      	adds	r2, r7, r0
 801cd72:	8812      	ldrh	r2, [r2, #0]
 801cd74:	2120      	movs	r1, #32
 801cd76:	404a      	eors	r2, r1
 801cd78:	801a      	strh	r2, [r3, #0]
 801cd7a:	687a      	ldr	r2, [r7, #4]
 801cd7c:	683b      	ldr	r3, [r7, #0]
 801cd7e:	781b      	ldrb	r3, [r3, #0]
 801cd80:	009b      	lsls	r3, r3, #2
 801cd82:	18d3      	adds	r3, r2, r3
 801cd84:	183a      	adds	r2, r7, r0
 801cd86:	8812      	ldrh	r2, [r2, #0]
 801cd88:	4913      	ldr	r1, [pc, #76]	@ (801cdd8 <USB_EPStartXfer+0xab4>)
 801cd8a:	430a      	orrs	r2, r1
 801cd8c:	b292      	uxth	r2, r2
 801cd8e:	801a      	strh	r2, [r3, #0]
 801cd90:	f000 fbf4 	bl	801d57c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801cd94:	683b      	ldr	r3, [r7, #0]
 801cd96:	7b1b      	ldrb	r3, [r3, #12]
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d000      	beq.n	801cd9e <USB_EPStartXfer+0xa7a>
 801cd9c:	e0a9      	b.n	801cef2 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801cd9e:	683b      	ldr	r3, [r7, #0]
 801cda0:	699a      	ldr	r2, [r3, #24]
 801cda2:	683b      	ldr	r3, [r7, #0]
 801cda4:	691b      	ldr	r3, [r3, #16]
 801cda6:	429a      	cmp	r2, r3
 801cda8:	d918      	bls.n	801cddc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801cdaa:	683b      	ldr	r3, [r7, #0]
 801cdac:	691b      	ldr	r3, [r3, #16]
 801cdae:	1d7a      	adds	r2, r7, #5
 801cdb0:	32ff      	adds	r2, #255	@ 0xff
 801cdb2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801cdb4:	683b      	ldr	r3, [r7, #0]
 801cdb6:	699a      	ldr	r2, [r3, #24]
 801cdb8:	1d7b      	adds	r3, r7, #5
 801cdba:	33ff      	adds	r3, #255	@ 0xff
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	1ad2      	subs	r2, r2, r3
 801cdc0:	683b      	ldr	r3, [r7, #0]
 801cdc2:	619a      	str	r2, [r3, #24]
 801cdc4:	e012      	b.n	801cdec <USB_EPStartXfer+0xac8>
 801cdc6:	46c0      	nop			@ (mov r8, r8)
 801cdc8:	00000406 	.word	0x00000406
 801cdcc:	ffff8000 	.word	0xffff8000
 801cdd0:	00000402 	.word	0x00000402
 801cdd4:	ffff8fbf 	.word	0xffff8fbf
 801cdd8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801cddc:	683b      	ldr	r3, [r7, #0]
 801cdde:	699b      	ldr	r3, [r3, #24]
 801cde0:	1d7a      	adds	r2, r7, #5
 801cde2:	32ff      	adds	r2, #255	@ 0xff
 801cde4:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801cde6:	683b      	ldr	r3, [r7, #0]
 801cde8:	2200      	movs	r2, #0
 801cdea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	2190      	movs	r1, #144	@ 0x90
 801cdf0:	187a      	adds	r2, r7, r1
 801cdf2:	6013      	str	r3, [r2, #0]
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	2250      	movs	r2, #80	@ 0x50
 801cdf8:	5a9b      	ldrh	r3, [r3, r2]
 801cdfa:	b29b      	uxth	r3, r3
 801cdfc:	001a      	movs	r2, r3
 801cdfe:	187b      	adds	r3, r7, r1
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	189b      	adds	r3, r3, r2
 801ce04:	187a      	adds	r2, r7, r1
 801ce06:	6013      	str	r3, [r2, #0]
 801ce08:	683b      	ldr	r3, [r7, #0]
 801ce0a:	781b      	ldrb	r3, [r3, #0]
 801ce0c:	00da      	lsls	r2, r3, #3
 801ce0e:	187b      	adds	r3, r7, r1
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	18d3      	adds	r3, r2, r3
 801ce14:	4acf      	ldr	r2, [pc, #828]	@ (801d154 <USB_EPStartXfer+0xe30>)
 801ce16:	4694      	mov	ip, r2
 801ce18:	4463      	add	r3, ip
 801ce1a:	218c      	movs	r1, #140	@ 0x8c
 801ce1c:	187a      	adds	r2, r7, r1
 801ce1e:	6013      	str	r3, [r2, #0]
 801ce20:	187b      	adds	r3, r7, r1
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	881b      	ldrh	r3, [r3, #0]
 801ce26:	b29b      	uxth	r3, r3
 801ce28:	059b      	lsls	r3, r3, #22
 801ce2a:	0d9b      	lsrs	r3, r3, #22
 801ce2c:	b29a      	uxth	r2, r3
 801ce2e:	187b      	adds	r3, r7, r1
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	801a      	strh	r2, [r3, #0]
 801ce34:	1d7b      	adds	r3, r7, #5
 801ce36:	33ff      	adds	r3, #255	@ 0xff
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	2b3e      	cmp	r3, #62	@ 0x3e
 801ce3c:	d925      	bls.n	801ce8a <USB_EPStartXfer+0xb66>
 801ce3e:	1d7b      	adds	r3, r7, #5
 801ce40:	33ff      	adds	r3, #255	@ 0xff
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	095b      	lsrs	r3, r3, #5
 801ce46:	21e8      	movs	r1, #232	@ 0xe8
 801ce48:	187a      	adds	r2, r7, r1
 801ce4a:	6013      	str	r3, [r2, #0]
 801ce4c:	1d7b      	adds	r3, r7, #5
 801ce4e:	33ff      	adds	r3, #255	@ 0xff
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	221f      	movs	r2, #31
 801ce54:	4013      	ands	r3, r2
 801ce56:	d104      	bne.n	801ce62 <USB_EPStartXfer+0xb3e>
 801ce58:	187b      	adds	r3, r7, r1
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	3b01      	subs	r3, #1
 801ce5e:	187a      	adds	r2, r7, r1
 801ce60:	6013      	str	r3, [r2, #0]
 801ce62:	218c      	movs	r1, #140	@ 0x8c
 801ce64:	187b      	adds	r3, r7, r1
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	881b      	ldrh	r3, [r3, #0]
 801ce6a:	b29a      	uxth	r2, r3
 801ce6c:	23e8      	movs	r3, #232	@ 0xe8
 801ce6e:	18fb      	adds	r3, r7, r3
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	b29b      	uxth	r3, r3
 801ce74:	029b      	lsls	r3, r3, #10
 801ce76:	b29b      	uxth	r3, r3
 801ce78:	4313      	orrs	r3, r2
 801ce7a:	b29b      	uxth	r3, r3
 801ce7c:	4ab6      	ldr	r2, [pc, #728]	@ (801d158 <USB_EPStartXfer+0xe34>)
 801ce7e:	4313      	orrs	r3, r2
 801ce80:	b29a      	uxth	r2, r3
 801ce82:	187b      	adds	r3, r7, r1
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	801a      	strh	r2, [r3, #0]
 801ce88:	e353      	b.n	801d532 <USB_EPStartXfer+0x120e>
 801ce8a:	1d7b      	adds	r3, r7, #5
 801ce8c:	33ff      	adds	r3, #255	@ 0xff
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d10b      	bne.n	801ceac <USB_EPStartXfer+0xb88>
 801ce94:	218c      	movs	r1, #140	@ 0x8c
 801ce96:	187b      	adds	r3, r7, r1
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	881b      	ldrh	r3, [r3, #0]
 801ce9c:	b29b      	uxth	r3, r3
 801ce9e:	4aae      	ldr	r2, [pc, #696]	@ (801d158 <USB_EPStartXfer+0xe34>)
 801cea0:	4313      	orrs	r3, r2
 801cea2:	b29a      	uxth	r2, r3
 801cea4:	187b      	adds	r3, r7, r1
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	801a      	strh	r2, [r3, #0]
 801ceaa:	e342      	b.n	801d532 <USB_EPStartXfer+0x120e>
 801ceac:	1d7b      	adds	r3, r7, #5
 801ceae:	33ff      	adds	r3, #255	@ 0xff
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	085b      	lsrs	r3, r3, #1
 801ceb4:	21e8      	movs	r1, #232	@ 0xe8
 801ceb6:	187a      	adds	r2, r7, r1
 801ceb8:	6013      	str	r3, [r2, #0]
 801ceba:	1d7b      	adds	r3, r7, #5
 801cebc:	33ff      	adds	r3, #255	@ 0xff
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	2201      	movs	r2, #1
 801cec2:	4013      	ands	r3, r2
 801cec4:	d004      	beq.n	801ced0 <USB_EPStartXfer+0xbac>
 801cec6:	187b      	adds	r3, r7, r1
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	3301      	adds	r3, #1
 801cecc:	187a      	adds	r2, r7, r1
 801cece:	6013      	str	r3, [r2, #0]
 801ced0:	218c      	movs	r1, #140	@ 0x8c
 801ced2:	187b      	adds	r3, r7, r1
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	881b      	ldrh	r3, [r3, #0]
 801ced8:	b29a      	uxth	r2, r3
 801ceda:	23e8      	movs	r3, #232	@ 0xe8
 801cedc:	18fb      	adds	r3, r7, r3
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	b29b      	uxth	r3, r3
 801cee2:	029b      	lsls	r3, r3, #10
 801cee4:	b29b      	uxth	r3, r3
 801cee6:	4313      	orrs	r3, r2
 801cee8:	b29a      	uxth	r2, r3
 801ceea:	187b      	adds	r3, r7, r1
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	801a      	strh	r2, [r3, #0]
 801cef0:	e31f      	b.n	801d532 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	78db      	ldrb	r3, [r3, #3]
 801cef6:	2b02      	cmp	r3, #2
 801cef8:	d000      	beq.n	801cefc <USB_EPStartXfer+0xbd8>
 801cefa:	e191      	b.n	801d220 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801cefc:	683b      	ldr	r3, [r7, #0]
 801cefe:	785b      	ldrb	r3, [r3, #1]
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d000      	beq.n	801cf06 <USB_EPStartXfer+0xbe2>
 801cf04:	e07c      	b.n	801d000 <USB_EPStartXfer+0xcdc>
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	21ac      	movs	r1, #172	@ 0xac
 801cf0a:	187a      	adds	r2, r7, r1
 801cf0c:	6013      	str	r3, [r2, #0]
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	2250      	movs	r2, #80	@ 0x50
 801cf12:	5a9b      	ldrh	r3, [r3, r2]
 801cf14:	b29b      	uxth	r3, r3
 801cf16:	001a      	movs	r2, r3
 801cf18:	187b      	adds	r3, r7, r1
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	189b      	adds	r3, r3, r2
 801cf1e:	187a      	adds	r2, r7, r1
 801cf20:	6013      	str	r3, [r2, #0]
 801cf22:	683b      	ldr	r3, [r7, #0]
 801cf24:	781b      	ldrb	r3, [r3, #0]
 801cf26:	00da      	lsls	r2, r3, #3
 801cf28:	187b      	adds	r3, r7, r1
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	18d3      	adds	r3, r2, r3
 801cf2e:	4a8b      	ldr	r2, [pc, #556]	@ (801d15c <USB_EPStartXfer+0xe38>)
 801cf30:	4694      	mov	ip, r2
 801cf32:	4463      	add	r3, ip
 801cf34:	21a8      	movs	r1, #168	@ 0xa8
 801cf36:	187a      	adds	r2, r7, r1
 801cf38:	6013      	str	r3, [r2, #0]
 801cf3a:	187b      	adds	r3, r7, r1
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	881b      	ldrh	r3, [r3, #0]
 801cf40:	b29b      	uxth	r3, r3
 801cf42:	059b      	lsls	r3, r3, #22
 801cf44:	0d9b      	lsrs	r3, r3, #22
 801cf46:	b29a      	uxth	r2, r3
 801cf48:	187b      	adds	r3, r7, r1
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	801a      	strh	r2, [r3, #0]
 801cf4e:	683b      	ldr	r3, [r7, #0]
 801cf50:	691b      	ldr	r3, [r3, #16]
 801cf52:	2b3e      	cmp	r3, #62	@ 0x3e
 801cf54:	d923      	bls.n	801cf9e <USB_EPStartXfer+0xc7a>
 801cf56:	683b      	ldr	r3, [r7, #0]
 801cf58:	691b      	ldr	r3, [r3, #16]
 801cf5a:	095b      	lsrs	r3, r3, #5
 801cf5c:	21e4      	movs	r1, #228	@ 0xe4
 801cf5e:	187a      	adds	r2, r7, r1
 801cf60:	6013      	str	r3, [r2, #0]
 801cf62:	683b      	ldr	r3, [r7, #0]
 801cf64:	691b      	ldr	r3, [r3, #16]
 801cf66:	221f      	movs	r2, #31
 801cf68:	4013      	ands	r3, r2
 801cf6a:	d104      	bne.n	801cf76 <USB_EPStartXfer+0xc52>
 801cf6c:	187b      	adds	r3, r7, r1
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	3b01      	subs	r3, #1
 801cf72:	187a      	adds	r2, r7, r1
 801cf74:	6013      	str	r3, [r2, #0]
 801cf76:	21a8      	movs	r1, #168	@ 0xa8
 801cf78:	187b      	adds	r3, r7, r1
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	881b      	ldrh	r3, [r3, #0]
 801cf7e:	b29a      	uxth	r2, r3
 801cf80:	23e4      	movs	r3, #228	@ 0xe4
 801cf82:	18fb      	adds	r3, r7, r3
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	b29b      	uxth	r3, r3
 801cf88:	029b      	lsls	r3, r3, #10
 801cf8a:	b29b      	uxth	r3, r3
 801cf8c:	4313      	orrs	r3, r2
 801cf8e:	b29b      	uxth	r3, r3
 801cf90:	4a71      	ldr	r2, [pc, #452]	@ (801d158 <USB_EPStartXfer+0xe34>)
 801cf92:	4313      	orrs	r3, r2
 801cf94:	b29a      	uxth	r2, r3
 801cf96:	187b      	adds	r3, r7, r1
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	801a      	strh	r2, [r3, #0]
 801cf9c:	e054      	b.n	801d048 <USB_EPStartXfer+0xd24>
 801cf9e:	683b      	ldr	r3, [r7, #0]
 801cfa0:	691b      	ldr	r3, [r3, #16]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d10b      	bne.n	801cfbe <USB_EPStartXfer+0xc9a>
 801cfa6:	21a8      	movs	r1, #168	@ 0xa8
 801cfa8:	187b      	adds	r3, r7, r1
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	881b      	ldrh	r3, [r3, #0]
 801cfae:	b29b      	uxth	r3, r3
 801cfb0:	4a69      	ldr	r2, [pc, #420]	@ (801d158 <USB_EPStartXfer+0xe34>)
 801cfb2:	4313      	orrs	r3, r2
 801cfb4:	b29a      	uxth	r2, r3
 801cfb6:	187b      	adds	r3, r7, r1
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	801a      	strh	r2, [r3, #0]
 801cfbc:	e044      	b.n	801d048 <USB_EPStartXfer+0xd24>
 801cfbe:	683b      	ldr	r3, [r7, #0]
 801cfc0:	691b      	ldr	r3, [r3, #16]
 801cfc2:	085b      	lsrs	r3, r3, #1
 801cfc4:	21e4      	movs	r1, #228	@ 0xe4
 801cfc6:	187a      	adds	r2, r7, r1
 801cfc8:	6013      	str	r3, [r2, #0]
 801cfca:	683b      	ldr	r3, [r7, #0]
 801cfcc:	691b      	ldr	r3, [r3, #16]
 801cfce:	2201      	movs	r2, #1
 801cfd0:	4013      	ands	r3, r2
 801cfd2:	d004      	beq.n	801cfde <USB_EPStartXfer+0xcba>
 801cfd4:	187b      	adds	r3, r7, r1
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	3301      	adds	r3, #1
 801cfda:	187a      	adds	r2, r7, r1
 801cfdc:	6013      	str	r3, [r2, #0]
 801cfde:	21a8      	movs	r1, #168	@ 0xa8
 801cfe0:	187b      	adds	r3, r7, r1
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	881b      	ldrh	r3, [r3, #0]
 801cfe6:	b29a      	uxth	r2, r3
 801cfe8:	23e4      	movs	r3, #228	@ 0xe4
 801cfea:	18fb      	adds	r3, r7, r3
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	b29b      	uxth	r3, r3
 801cff0:	029b      	lsls	r3, r3, #10
 801cff2:	b29b      	uxth	r3, r3
 801cff4:	4313      	orrs	r3, r2
 801cff6:	b29a      	uxth	r2, r3
 801cff8:	187b      	adds	r3, r7, r1
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	801a      	strh	r2, [r3, #0]
 801cffe:	e023      	b.n	801d048 <USB_EPStartXfer+0xd24>
 801d000:	683b      	ldr	r3, [r7, #0]
 801d002:	785b      	ldrb	r3, [r3, #1]
 801d004:	2b01      	cmp	r3, #1
 801d006:	d11f      	bne.n	801d048 <USB_EPStartXfer+0xd24>
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	21b4      	movs	r1, #180	@ 0xb4
 801d00c:	187a      	adds	r2, r7, r1
 801d00e:	6013      	str	r3, [r2, #0]
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	2250      	movs	r2, #80	@ 0x50
 801d014:	5a9b      	ldrh	r3, [r3, r2]
 801d016:	b29b      	uxth	r3, r3
 801d018:	001a      	movs	r2, r3
 801d01a:	187b      	adds	r3, r7, r1
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	189b      	adds	r3, r3, r2
 801d020:	187a      	adds	r2, r7, r1
 801d022:	6013      	str	r3, [r2, #0]
 801d024:	683b      	ldr	r3, [r7, #0]
 801d026:	781b      	ldrb	r3, [r3, #0]
 801d028:	00da      	lsls	r2, r3, #3
 801d02a:	187b      	adds	r3, r7, r1
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	18d3      	adds	r3, r2, r3
 801d030:	4a4a      	ldr	r2, [pc, #296]	@ (801d15c <USB_EPStartXfer+0xe38>)
 801d032:	4694      	mov	ip, r2
 801d034:	4463      	add	r3, ip
 801d036:	21b0      	movs	r1, #176	@ 0xb0
 801d038:	187a      	adds	r2, r7, r1
 801d03a:	6013      	str	r3, [r2, #0]
 801d03c:	683b      	ldr	r3, [r7, #0]
 801d03e:	691b      	ldr	r3, [r3, #16]
 801d040:	b29a      	uxth	r2, r3
 801d042:	187b      	adds	r3, r7, r1
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	801a      	strh	r2, [r3, #0]
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	22a4      	movs	r2, #164	@ 0xa4
 801d04c:	18ba      	adds	r2, r7, r2
 801d04e:	6013      	str	r3, [r2, #0]
 801d050:	683b      	ldr	r3, [r7, #0]
 801d052:	785b      	ldrb	r3, [r3, #1]
 801d054:	2b00      	cmp	r3, #0
 801d056:	d000      	beq.n	801d05a <USB_EPStartXfer+0xd36>
 801d058:	e082      	b.n	801d160 <USB_EPStartXfer+0xe3c>
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	219c      	movs	r1, #156	@ 0x9c
 801d05e:	187a      	adds	r2, r7, r1
 801d060:	6013      	str	r3, [r2, #0]
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	2250      	movs	r2, #80	@ 0x50
 801d066:	5a9b      	ldrh	r3, [r3, r2]
 801d068:	b29b      	uxth	r3, r3
 801d06a:	001a      	movs	r2, r3
 801d06c:	187b      	adds	r3, r7, r1
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	189b      	adds	r3, r3, r2
 801d072:	187a      	adds	r2, r7, r1
 801d074:	6013      	str	r3, [r2, #0]
 801d076:	683b      	ldr	r3, [r7, #0]
 801d078:	781b      	ldrb	r3, [r3, #0]
 801d07a:	00da      	lsls	r2, r3, #3
 801d07c:	187b      	adds	r3, r7, r1
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	18d3      	adds	r3, r2, r3
 801d082:	4a34      	ldr	r2, [pc, #208]	@ (801d154 <USB_EPStartXfer+0xe30>)
 801d084:	4694      	mov	ip, r2
 801d086:	4463      	add	r3, ip
 801d088:	2198      	movs	r1, #152	@ 0x98
 801d08a:	187a      	adds	r2, r7, r1
 801d08c:	6013      	str	r3, [r2, #0]
 801d08e:	187b      	adds	r3, r7, r1
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	881b      	ldrh	r3, [r3, #0]
 801d094:	b29b      	uxth	r3, r3
 801d096:	059b      	lsls	r3, r3, #22
 801d098:	0d9b      	lsrs	r3, r3, #22
 801d09a:	b29a      	uxth	r2, r3
 801d09c:	187b      	adds	r3, r7, r1
 801d09e:	681b      	ldr	r3, [r3, #0]
 801d0a0:	801a      	strh	r2, [r3, #0]
 801d0a2:	683b      	ldr	r3, [r7, #0]
 801d0a4:	691b      	ldr	r3, [r3, #16]
 801d0a6:	2b3e      	cmp	r3, #62	@ 0x3e
 801d0a8:	d923      	bls.n	801d0f2 <USB_EPStartXfer+0xdce>
 801d0aa:	683b      	ldr	r3, [r7, #0]
 801d0ac:	691b      	ldr	r3, [r3, #16]
 801d0ae:	095b      	lsrs	r3, r3, #5
 801d0b0:	21e0      	movs	r1, #224	@ 0xe0
 801d0b2:	187a      	adds	r2, r7, r1
 801d0b4:	6013      	str	r3, [r2, #0]
 801d0b6:	683b      	ldr	r3, [r7, #0]
 801d0b8:	691b      	ldr	r3, [r3, #16]
 801d0ba:	221f      	movs	r2, #31
 801d0bc:	4013      	ands	r3, r2
 801d0be:	d104      	bne.n	801d0ca <USB_EPStartXfer+0xda6>
 801d0c0:	187b      	adds	r3, r7, r1
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	3b01      	subs	r3, #1
 801d0c6:	187a      	adds	r2, r7, r1
 801d0c8:	6013      	str	r3, [r2, #0]
 801d0ca:	2198      	movs	r1, #152	@ 0x98
 801d0cc:	187b      	adds	r3, r7, r1
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	881b      	ldrh	r3, [r3, #0]
 801d0d2:	b29a      	uxth	r2, r3
 801d0d4:	23e0      	movs	r3, #224	@ 0xe0
 801d0d6:	18fb      	adds	r3, r7, r3
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	b29b      	uxth	r3, r3
 801d0dc:	029b      	lsls	r3, r3, #10
 801d0de:	b29b      	uxth	r3, r3
 801d0e0:	4313      	orrs	r3, r2
 801d0e2:	b29b      	uxth	r3, r3
 801d0e4:	4a1c      	ldr	r2, [pc, #112]	@ (801d158 <USB_EPStartXfer+0xe34>)
 801d0e6:	4313      	orrs	r3, r2
 801d0e8:	b29a      	uxth	r2, r3
 801d0ea:	187b      	adds	r3, r7, r1
 801d0ec:	681b      	ldr	r3, [r3, #0]
 801d0ee:	801a      	strh	r2, [r3, #0]
 801d0f0:	e057      	b.n	801d1a2 <USB_EPStartXfer+0xe7e>
 801d0f2:	683b      	ldr	r3, [r7, #0]
 801d0f4:	691b      	ldr	r3, [r3, #16]
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	d10b      	bne.n	801d112 <USB_EPStartXfer+0xdee>
 801d0fa:	2198      	movs	r1, #152	@ 0x98
 801d0fc:	187b      	adds	r3, r7, r1
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	881b      	ldrh	r3, [r3, #0]
 801d102:	b29b      	uxth	r3, r3
 801d104:	4a14      	ldr	r2, [pc, #80]	@ (801d158 <USB_EPStartXfer+0xe34>)
 801d106:	4313      	orrs	r3, r2
 801d108:	b29a      	uxth	r2, r3
 801d10a:	187b      	adds	r3, r7, r1
 801d10c:	681b      	ldr	r3, [r3, #0]
 801d10e:	801a      	strh	r2, [r3, #0]
 801d110:	e047      	b.n	801d1a2 <USB_EPStartXfer+0xe7e>
 801d112:	683b      	ldr	r3, [r7, #0]
 801d114:	691b      	ldr	r3, [r3, #16]
 801d116:	085b      	lsrs	r3, r3, #1
 801d118:	21e0      	movs	r1, #224	@ 0xe0
 801d11a:	187a      	adds	r2, r7, r1
 801d11c:	6013      	str	r3, [r2, #0]
 801d11e:	683b      	ldr	r3, [r7, #0]
 801d120:	691b      	ldr	r3, [r3, #16]
 801d122:	2201      	movs	r2, #1
 801d124:	4013      	ands	r3, r2
 801d126:	d004      	beq.n	801d132 <USB_EPStartXfer+0xe0e>
 801d128:	187b      	adds	r3, r7, r1
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	3301      	adds	r3, #1
 801d12e:	187a      	adds	r2, r7, r1
 801d130:	6013      	str	r3, [r2, #0]
 801d132:	2198      	movs	r1, #152	@ 0x98
 801d134:	187b      	adds	r3, r7, r1
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	881b      	ldrh	r3, [r3, #0]
 801d13a:	b29a      	uxth	r2, r3
 801d13c:	23e0      	movs	r3, #224	@ 0xe0
 801d13e:	18fb      	adds	r3, r7, r3
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	b29b      	uxth	r3, r3
 801d144:	029b      	lsls	r3, r3, #10
 801d146:	b29b      	uxth	r3, r3
 801d148:	4313      	orrs	r3, r2
 801d14a:	b29a      	uxth	r2, r3
 801d14c:	187b      	adds	r3, r7, r1
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	801a      	strh	r2, [r3, #0]
 801d152:	e026      	b.n	801d1a2 <USB_EPStartXfer+0xe7e>
 801d154:	00000406 	.word	0x00000406
 801d158:	ffff8000 	.word	0xffff8000
 801d15c:	00000402 	.word	0x00000402
 801d160:	683b      	ldr	r3, [r7, #0]
 801d162:	785b      	ldrb	r3, [r3, #1]
 801d164:	2b01      	cmp	r3, #1
 801d166:	d11c      	bne.n	801d1a2 <USB_EPStartXfer+0xe7e>
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	2250      	movs	r2, #80	@ 0x50
 801d16c:	5a9b      	ldrh	r3, [r3, r2]
 801d16e:	b29b      	uxth	r3, r3
 801d170:	001a      	movs	r2, r3
 801d172:	21a4      	movs	r1, #164	@ 0xa4
 801d174:	187b      	adds	r3, r7, r1
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	189b      	adds	r3, r3, r2
 801d17a:	187a      	adds	r2, r7, r1
 801d17c:	6013      	str	r3, [r2, #0]
 801d17e:	683b      	ldr	r3, [r7, #0]
 801d180:	781b      	ldrb	r3, [r3, #0]
 801d182:	00da      	lsls	r2, r3, #3
 801d184:	187b      	adds	r3, r7, r1
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	18d3      	adds	r3, r2, r3
 801d18a:	4ad2      	ldr	r2, [pc, #840]	@ (801d4d4 <USB_EPStartXfer+0x11b0>)
 801d18c:	4694      	mov	ip, r2
 801d18e:	4463      	add	r3, ip
 801d190:	21a0      	movs	r1, #160	@ 0xa0
 801d192:	187a      	adds	r2, r7, r1
 801d194:	6013      	str	r3, [r2, #0]
 801d196:	683b      	ldr	r3, [r7, #0]
 801d198:	691b      	ldr	r3, [r3, #16]
 801d19a:	b29a      	uxth	r2, r3
 801d19c:	187b      	adds	r3, r7, r1
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801d1a2:	683b      	ldr	r3, [r7, #0]
 801d1a4:	69db      	ldr	r3, [r3, #28]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d100      	bne.n	801d1ac <USB_EPStartXfer+0xe88>
 801d1aa:	e1c2      	b.n	801d532 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801d1ac:	687a      	ldr	r2, [r7, #4]
 801d1ae:	683b      	ldr	r3, [r7, #0]
 801d1b0:	781b      	ldrb	r3, [r3, #0]
 801d1b2:	009b      	lsls	r3, r3, #2
 801d1b4:	18d2      	adds	r2, r2, r3
 801d1b6:	2196      	movs	r1, #150	@ 0x96
 801d1b8:	187b      	adds	r3, r7, r1
 801d1ba:	8812      	ldrh	r2, [r2, #0]
 801d1bc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801d1be:	187b      	adds	r3, r7, r1
 801d1c0:	881a      	ldrh	r2, [r3, #0]
 801d1c2:	2380      	movs	r3, #128	@ 0x80
 801d1c4:	01db      	lsls	r3, r3, #7
 801d1c6:	4013      	ands	r3, r2
 801d1c8:	d004      	beq.n	801d1d4 <USB_EPStartXfer+0xeb0>
 801d1ca:	187b      	adds	r3, r7, r1
 801d1cc:	881b      	ldrh	r3, [r3, #0]
 801d1ce:	2240      	movs	r2, #64	@ 0x40
 801d1d0:	4013      	ands	r3, r2
 801d1d2:	d10d      	bne.n	801d1f0 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801d1d4:	2196      	movs	r1, #150	@ 0x96
 801d1d6:	187b      	adds	r3, r7, r1
 801d1d8:	881a      	ldrh	r2, [r3, #0]
 801d1da:	2380      	movs	r3, #128	@ 0x80
 801d1dc:	01db      	lsls	r3, r3, #7
 801d1de:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801d1e0:	d000      	beq.n	801d1e4 <USB_EPStartXfer+0xec0>
 801d1e2:	e1a6      	b.n	801d532 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801d1e4:	187b      	adds	r3, r7, r1
 801d1e6:	881b      	ldrh	r3, [r3, #0]
 801d1e8:	2240      	movs	r2, #64	@ 0x40
 801d1ea:	4013      	ands	r3, r2
 801d1ec:	d000      	beq.n	801d1f0 <USB_EPStartXfer+0xecc>
 801d1ee:	e1a0      	b.n	801d532 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801d1f0:	687a      	ldr	r2, [r7, #4]
 801d1f2:	683b      	ldr	r3, [r7, #0]
 801d1f4:	781b      	ldrb	r3, [r3, #0]
 801d1f6:	009b      	lsls	r3, r3, #2
 801d1f8:	18d3      	adds	r3, r2, r3
 801d1fa:	881b      	ldrh	r3, [r3, #0]
 801d1fc:	b29a      	uxth	r2, r3
 801d1fe:	2094      	movs	r0, #148	@ 0x94
 801d200:	183b      	adds	r3, r7, r0
 801d202:	49b5      	ldr	r1, [pc, #724]	@ (801d4d8 <USB_EPStartXfer+0x11b4>)
 801d204:	400a      	ands	r2, r1
 801d206:	801a      	strh	r2, [r3, #0]
 801d208:	687a      	ldr	r2, [r7, #4]
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	781b      	ldrb	r3, [r3, #0]
 801d20e:	009b      	lsls	r3, r3, #2
 801d210:	18d3      	adds	r3, r2, r3
 801d212:	183a      	adds	r2, r7, r0
 801d214:	8812      	ldrh	r2, [r2, #0]
 801d216:	49b1      	ldr	r1, [pc, #708]	@ (801d4dc <USB_EPStartXfer+0x11b8>)
 801d218:	430a      	orrs	r2, r1
 801d21a:	b292      	uxth	r2, r2
 801d21c:	801a      	strh	r2, [r3, #0]
 801d21e:	e188      	b.n	801d532 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801d220:	683b      	ldr	r3, [r7, #0]
 801d222:	78db      	ldrb	r3, [r3, #3]
 801d224:	2b01      	cmp	r3, #1
 801d226:	d000      	beq.n	801d22a <USB_EPStartXfer+0xf06>
 801d228:	e181      	b.n	801d52e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801d22a:	683b      	ldr	r3, [r7, #0]
 801d22c:	699a      	ldr	r2, [r3, #24]
 801d22e:	683b      	ldr	r3, [r7, #0]
 801d230:	691b      	ldr	r3, [r3, #16]
 801d232:	429a      	cmp	r2, r3
 801d234:	d90d      	bls.n	801d252 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801d236:	683b      	ldr	r3, [r7, #0]
 801d238:	691b      	ldr	r3, [r3, #16]
 801d23a:	1d7a      	adds	r2, r7, #5
 801d23c:	32ff      	adds	r2, #255	@ 0xff
 801d23e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801d240:	683b      	ldr	r3, [r7, #0]
 801d242:	699a      	ldr	r2, [r3, #24]
 801d244:	1d7b      	adds	r3, r7, #5
 801d246:	33ff      	adds	r3, #255	@ 0xff
 801d248:	681b      	ldr	r3, [r3, #0]
 801d24a:	1ad2      	subs	r2, r2, r3
 801d24c:	683b      	ldr	r3, [r7, #0]
 801d24e:	619a      	str	r2, [r3, #24]
 801d250:	e007      	b.n	801d262 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801d252:	683b      	ldr	r3, [r7, #0]
 801d254:	699b      	ldr	r3, [r3, #24]
 801d256:	1d7a      	adds	r2, r7, #5
 801d258:	32ff      	adds	r2, #255	@ 0xff
 801d25a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801d25c:	683b      	ldr	r3, [r7, #0]
 801d25e:	2200      	movs	r2, #0
 801d260:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801d262:	683b      	ldr	r3, [r7, #0]
 801d264:	785b      	ldrb	r3, [r3, #1]
 801d266:	2b00      	cmp	r3, #0
 801d268:	d000      	beq.n	801d26c <USB_EPStartXfer+0xf48>
 801d26a:	e082      	b.n	801d372 <USB_EPStartXfer+0x104e>
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	21cc      	movs	r1, #204	@ 0xcc
 801d270:	187a      	adds	r2, r7, r1
 801d272:	6013      	str	r3, [r2, #0]
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	2250      	movs	r2, #80	@ 0x50
 801d278:	5a9b      	ldrh	r3, [r3, r2]
 801d27a:	b29b      	uxth	r3, r3
 801d27c:	001a      	movs	r2, r3
 801d27e:	187b      	adds	r3, r7, r1
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	189b      	adds	r3, r3, r2
 801d284:	187a      	adds	r2, r7, r1
 801d286:	6013      	str	r3, [r2, #0]
 801d288:	683b      	ldr	r3, [r7, #0]
 801d28a:	781b      	ldrb	r3, [r3, #0]
 801d28c:	00da      	lsls	r2, r3, #3
 801d28e:	187b      	adds	r3, r7, r1
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	18d3      	adds	r3, r2, r3
 801d294:	4a92      	ldr	r2, [pc, #584]	@ (801d4e0 <USB_EPStartXfer+0x11bc>)
 801d296:	4694      	mov	ip, r2
 801d298:	4463      	add	r3, ip
 801d29a:	21c8      	movs	r1, #200	@ 0xc8
 801d29c:	187a      	adds	r2, r7, r1
 801d29e:	6013      	str	r3, [r2, #0]
 801d2a0:	187b      	adds	r3, r7, r1
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	881b      	ldrh	r3, [r3, #0]
 801d2a6:	b29b      	uxth	r3, r3
 801d2a8:	059b      	lsls	r3, r3, #22
 801d2aa:	0d9b      	lsrs	r3, r3, #22
 801d2ac:	b29a      	uxth	r2, r3
 801d2ae:	187b      	adds	r3, r7, r1
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	801a      	strh	r2, [r3, #0]
 801d2b4:	1d7b      	adds	r3, r7, #5
 801d2b6:	33ff      	adds	r3, #255	@ 0xff
 801d2b8:	681b      	ldr	r3, [r3, #0]
 801d2ba:	2b3e      	cmp	r3, #62	@ 0x3e
 801d2bc:	d925      	bls.n	801d30a <USB_EPStartXfer+0xfe6>
 801d2be:	1d7b      	adds	r3, r7, #5
 801d2c0:	33ff      	adds	r3, #255	@ 0xff
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	095b      	lsrs	r3, r3, #5
 801d2c6:	21dc      	movs	r1, #220	@ 0xdc
 801d2c8:	187a      	adds	r2, r7, r1
 801d2ca:	6013      	str	r3, [r2, #0]
 801d2cc:	1d7b      	adds	r3, r7, #5
 801d2ce:	33ff      	adds	r3, #255	@ 0xff
 801d2d0:	681b      	ldr	r3, [r3, #0]
 801d2d2:	221f      	movs	r2, #31
 801d2d4:	4013      	ands	r3, r2
 801d2d6:	d104      	bne.n	801d2e2 <USB_EPStartXfer+0xfbe>
 801d2d8:	187b      	adds	r3, r7, r1
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	3b01      	subs	r3, #1
 801d2de:	187a      	adds	r2, r7, r1
 801d2e0:	6013      	str	r3, [r2, #0]
 801d2e2:	21c8      	movs	r1, #200	@ 0xc8
 801d2e4:	187b      	adds	r3, r7, r1
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	881b      	ldrh	r3, [r3, #0]
 801d2ea:	b29a      	uxth	r2, r3
 801d2ec:	23dc      	movs	r3, #220	@ 0xdc
 801d2ee:	18fb      	adds	r3, r7, r3
 801d2f0:	681b      	ldr	r3, [r3, #0]
 801d2f2:	b29b      	uxth	r3, r3
 801d2f4:	029b      	lsls	r3, r3, #10
 801d2f6:	b29b      	uxth	r3, r3
 801d2f8:	4313      	orrs	r3, r2
 801d2fa:	b29b      	uxth	r3, r3
 801d2fc:	4a79      	ldr	r2, [pc, #484]	@ (801d4e4 <USB_EPStartXfer+0x11c0>)
 801d2fe:	4313      	orrs	r3, r2
 801d300:	b29a      	uxth	r2, r3
 801d302:	187b      	adds	r3, r7, r1
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	801a      	strh	r2, [r3, #0]
 801d308:	e058      	b.n	801d3bc <USB_EPStartXfer+0x1098>
 801d30a:	1d7b      	adds	r3, r7, #5
 801d30c:	33ff      	adds	r3, #255	@ 0xff
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	2b00      	cmp	r3, #0
 801d312:	d10b      	bne.n	801d32c <USB_EPStartXfer+0x1008>
 801d314:	21c8      	movs	r1, #200	@ 0xc8
 801d316:	187b      	adds	r3, r7, r1
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	881b      	ldrh	r3, [r3, #0]
 801d31c:	b29b      	uxth	r3, r3
 801d31e:	4a71      	ldr	r2, [pc, #452]	@ (801d4e4 <USB_EPStartXfer+0x11c0>)
 801d320:	4313      	orrs	r3, r2
 801d322:	b29a      	uxth	r2, r3
 801d324:	187b      	adds	r3, r7, r1
 801d326:	681b      	ldr	r3, [r3, #0]
 801d328:	801a      	strh	r2, [r3, #0]
 801d32a:	e047      	b.n	801d3bc <USB_EPStartXfer+0x1098>
 801d32c:	1d7b      	adds	r3, r7, #5
 801d32e:	33ff      	adds	r3, #255	@ 0xff
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	085b      	lsrs	r3, r3, #1
 801d334:	21dc      	movs	r1, #220	@ 0xdc
 801d336:	187a      	adds	r2, r7, r1
 801d338:	6013      	str	r3, [r2, #0]
 801d33a:	1d7b      	adds	r3, r7, #5
 801d33c:	33ff      	adds	r3, #255	@ 0xff
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	2201      	movs	r2, #1
 801d342:	4013      	ands	r3, r2
 801d344:	d004      	beq.n	801d350 <USB_EPStartXfer+0x102c>
 801d346:	187b      	adds	r3, r7, r1
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	3301      	adds	r3, #1
 801d34c:	187a      	adds	r2, r7, r1
 801d34e:	6013      	str	r3, [r2, #0]
 801d350:	21c8      	movs	r1, #200	@ 0xc8
 801d352:	187b      	adds	r3, r7, r1
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	881b      	ldrh	r3, [r3, #0]
 801d358:	b29a      	uxth	r2, r3
 801d35a:	23dc      	movs	r3, #220	@ 0xdc
 801d35c:	18fb      	adds	r3, r7, r3
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	b29b      	uxth	r3, r3
 801d362:	029b      	lsls	r3, r3, #10
 801d364:	b29b      	uxth	r3, r3
 801d366:	4313      	orrs	r3, r2
 801d368:	b29a      	uxth	r2, r3
 801d36a:	187b      	adds	r3, r7, r1
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	801a      	strh	r2, [r3, #0]
 801d370:	e024      	b.n	801d3bc <USB_EPStartXfer+0x1098>
 801d372:	683b      	ldr	r3, [r7, #0]
 801d374:	785b      	ldrb	r3, [r3, #1]
 801d376:	2b01      	cmp	r3, #1
 801d378:	d120      	bne.n	801d3bc <USB_EPStartXfer+0x1098>
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	21d4      	movs	r1, #212	@ 0xd4
 801d37e:	187a      	adds	r2, r7, r1
 801d380:	6013      	str	r3, [r2, #0]
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	2250      	movs	r2, #80	@ 0x50
 801d386:	5a9b      	ldrh	r3, [r3, r2]
 801d388:	b29b      	uxth	r3, r3
 801d38a:	001a      	movs	r2, r3
 801d38c:	187b      	adds	r3, r7, r1
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	189b      	adds	r3, r3, r2
 801d392:	187a      	adds	r2, r7, r1
 801d394:	6013      	str	r3, [r2, #0]
 801d396:	683b      	ldr	r3, [r7, #0]
 801d398:	781b      	ldrb	r3, [r3, #0]
 801d39a:	00da      	lsls	r2, r3, #3
 801d39c:	187b      	adds	r3, r7, r1
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	18d3      	adds	r3, r2, r3
 801d3a2:	4a4f      	ldr	r2, [pc, #316]	@ (801d4e0 <USB_EPStartXfer+0x11bc>)
 801d3a4:	4694      	mov	ip, r2
 801d3a6:	4463      	add	r3, ip
 801d3a8:	21d0      	movs	r1, #208	@ 0xd0
 801d3aa:	187a      	adds	r2, r7, r1
 801d3ac:	6013      	str	r3, [r2, #0]
 801d3ae:	1d7b      	adds	r3, r7, #5
 801d3b0:	33ff      	adds	r3, #255	@ 0xff
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	b29a      	uxth	r2, r3
 801d3b6:	187b      	adds	r3, r7, r1
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	801a      	strh	r2, [r3, #0]
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	22c4      	movs	r2, #196	@ 0xc4
 801d3c0:	18ba      	adds	r2, r7, r2
 801d3c2:	6013      	str	r3, [r2, #0]
 801d3c4:	683b      	ldr	r3, [r7, #0]
 801d3c6:	785b      	ldrb	r3, [r3, #1]
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d000      	beq.n	801d3ce <USB_EPStartXfer+0x10aa>
 801d3cc:	e08c      	b.n	801d4e8 <USB_EPStartXfer+0x11c4>
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	21bc      	movs	r1, #188	@ 0xbc
 801d3d2:	187a      	adds	r2, r7, r1
 801d3d4:	6013      	str	r3, [r2, #0]
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	2250      	movs	r2, #80	@ 0x50
 801d3da:	5a9b      	ldrh	r3, [r3, r2]
 801d3dc:	b29b      	uxth	r3, r3
 801d3de:	001a      	movs	r2, r3
 801d3e0:	187b      	adds	r3, r7, r1
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	189b      	adds	r3, r3, r2
 801d3e6:	187a      	adds	r2, r7, r1
 801d3e8:	6013      	str	r3, [r2, #0]
 801d3ea:	683b      	ldr	r3, [r7, #0]
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	00da      	lsls	r2, r3, #3
 801d3f0:	187b      	adds	r3, r7, r1
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	18d3      	adds	r3, r2, r3
 801d3f6:	4a37      	ldr	r2, [pc, #220]	@ (801d4d4 <USB_EPStartXfer+0x11b0>)
 801d3f8:	4694      	mov	ip, r2
 801d3fa:	4463      	add	r3, ip
 801d3fc:	21b8      	movs	r1, #184	@ 0xb8
 801d3fe:	187a      	adds	r2, r7, r1
 801d400:	6013      	str	r3, [r2, #0]
 801d402:	187b      	adds	r3, r7, r1
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	881b      	ldrh	r3, [r3, #0]
 801d408:	b29b      	uxth	r3, r3
 801d40a:	059b      	lsls	r3, r3, #22
 801d40c:	0d9b      	lsrs	r3, r3, #22
 801d40e:	b29a      	uxth	r2, r3
 801d410:	187b      	adds	r3, r7, r1
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	801a      	strh	r2, [r3, #0]
 801d416:	1d7b      	adds	r3, r7, #5
 801d418:	33ff      	adds	r3, #255	@ 0xff
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	2b3e      	cmp	r3, #62	@ 0x3e
 801d41e:	d925      	bls.n	801d46c <USB_EPStartXfer+0x1148>
 801d420:	1d7b      	adds	r3, r7, #5
 801d422:	33ff      	adds	r3, #255	@ 0xff
 801d424:	681b      	ldr	r3, [r3, #0]
 801d426:	095b      	lsrs	r3, r3, #5
 801d428:	21d8      	movs	r1, #216	@ 0xd8
 801d42a:	187a      	adds	r2, r7, r1
 801d42c:	6013      	str	r3, [r2, #0]
 801d42e:	1d7b      	adds	r3, r7, #5
 801d430:	33ff      	adds	r3, #255	@ 0xff
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	221f      	movs	r2, #31
 801d436:	4013      	ands	r3, r2
 801d438:	d104      	bne.n	801d444 <USB_EPStartXfer+0x1120>
 801d43a:	187b      	adds	r3, r7, r1
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	3b01      	subs	r3, #1
 801d440:	187a      	adds	r2, r7, r1
 801d442:	6013      	str	r3, [r2, #0]
 801d444:	21b8      	movs	r1, #184	@ 0xb8
 801d446:	187b      	adds	r3, r7, r1
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	881b      	ldrh	r3, [r3, #0]
 801d44c:	b29a      	uxth	r2, r3
 801d44e:	23d8      	movs	r3, #216	@ 0xd8
 801d450:	18fb      	adds	r3, r7, r3
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	b29b      	uxth	r3, r3
 801d456:	029b      	lsls	r3, r3, #10
 801d458:	b29b      	uxth	r3, r3
 801d45a:	4313      	orrs	r3, r2
 801d45c:	b29b      	uxth	r3, r3
 801d45e:	4a21      	ldr	r2, [pc, #132]	@ (801d4e4 <USB_EPStartXfer+0x11c0>)
 801d460:	4313      	orrs	r3, r2
 801d462:	b29a      	uxth	r2, r3
 801d464:	187b      	adds	r3, r7, r1
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	801a      	strh	r2, [r3, #0]
 801d46a:	e062      	b.n	801d532 <USB_EPStartXfer+0x120e>
 801d46c:	1d7b      	adds	r3, r7, #5
 801d46e:	33ff      	adds	r3, #255	@ 0xff
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d10b      	bne.n	801d48e <USB_EPStartXfer+0x116a>
 801d476:	21b8      	movs	r1, #184	@ 0xb8
 801d478:	187b      	adds	r3, r7, r1
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	881b      	ldrh	r3, [r3, #0]
 801d47e:	b29b      	uxth	r3, r3
 801d480:	4a18      	ldr	r2, [pc, #96]	@ (801d4e4 <USB_EPStartXfer+0x11c0>)
 801d482:	4313      	orrs	r3, r2
 801d484:	b29a      	uxth	r2, r3
 801d486:	187b      	adds	r3, r7, r1
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	801a      	strh	r2, [r3, #0]
 801d48c:	e051      	b.n	801d532 <USB_EPStartXfer+0x120e>
 801d48e:	1d7b      	adds	r3, r7, #5
 801d490:	33ff      	adds	r3, #255	@ 0xff
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	085b      	lsrs	r3, r3, #1
 801d496:	21d8      	movs	r1, #216	@ 0xd8
 801d498:	187a      	adds	r2, r7, r1
 801d49a:	6013      	str	r3, [r2, #0]
 801d49c:	1d7b      	adds	r3, r7, #5
 801d49e:	33ff      	adds	r3, #255	@ 0xff
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	2201      	movs	r2, #1
 801d4a4:	4013      	ands	r3, r2
 801d4a6:	d004      	beq.n	801d4b2 <USB_EPStartXfer+0x118e>
 801d4a8:	187b      	adds	r3, r7, r1
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	3301      	adds	r3, #1
 801d4ae:	187a      	adds	r2, r7, r1
 801d4b0:	6013      	str	r3, [r2, #0]
 801d4b2:	21b8      	movs	r1, #184	@ 0xb8
 801d4b4:	187b      	adds	r3, r7, r1
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	881b      	ldrh	r3, [r3, #0]
 801d4ba:	b29a      	uxth	r2, r3
 801d4bc:	23d8      	movs	r3, #216	@ 0xd8
 801d4be:	18fb      	adds	r3, r7, r3
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	b29b      	uxth	r3, r3
 801d4c4:	029b      	lsls	r3, r3, #10
 801d4c6:	b29b      	uxth	r3, r3
 801d4c8:	4313      	orrs	r3, r2
 801d4ca:	b29a      	uxth	r2, r3
 801d4cc:	187b      	adds	r3, r7, r1
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	801a      	strh	r2, [r3, #0]
 801d4d2:	e02e      	b.n	801d532 <USB_EPStartXfer+0x120e>
 801d4d4:	00000406 	.word	0x00000406
 801d4d8:	ffff8f8f 	.word	0xffff8f8f
 801d4dc:	ffff80c0 	.word	0xffff80c0
 801d4e0:	00000402 	.word	0x00000402
 801d4e4:	ffff8000 	.word	0xffff8000
 801d4e8:	683b      	ldr	r3, [r7, #0]
 801d4ea:	785b      	ldrb	r3, [r3, #1]
 801d4ec:	2b01      	cmp	r3, #1
 801d4ee:	d120      	bne.n	801d532 <USB_EPStartXfer+0x120e>
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	2250      	movs	r2, #80	@ 0x50
 801d4f4:	5a9b      	ldrh	r3, [r3, r2]
 801d4f6:	b29b      	uxth	r3, r3
 801d4f8:	001a      	movs	r2, r3
 801d4fa:	21c4      	movs	r1, #196	@ 0xc4
 801d4fc:	187b      	adds	r3, r7, r1
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	189b      	adds	r3, r3, r2
 801d502:	187a      	adds	r2, r7, r1
 801d504:	6013      	str	r3, [r2, #0]
 801d506:	683b      	ldr	r3, [r7, #0]
 801d508:	781b      	ldrb	r3, [r3, #0]
 801d50a:	00da      	lsls	r2, r3, #3
 801d50c:	187b      	adds	r3, r7, r1
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	18d3      	adds	r3, r2, r3
 801d512:	4a1d      	ldr	r2, [pc, #116]	@ (801d588 <USB_EPStartXfer+0x1264>)
 801d514:	4694      	mov	ip, r2
 801d516:	4463      	add	r3, ip
 801d518:	21c0      	movs	r1, #192	@ 0xc0
 801d51a:	187a      	adds	r2, r7, r1
 801d51c:	6013      	str	r3, [r2, #0]
 801d51e:	1d7b      	adds	r3, r7, #5
 801d520:	33ff      	adds	r3, #255	@ 0xff
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	b29a      	uxth	r2, r3
 801d526:	187b      	adds	r3, r7, r1
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	801a      	strh	r2, [r3, #0]
 801d52c:	e001      	b.n	801d532 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801d52e:	2301      	movs	r3, #1
 801d530:	e025      	b.n	801d57e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801d532:	687a      	ldr	r2, [r7, #4]
 801d534:	683b      	ldr	r3, [r7, #0]
 801d536:	781b      	ldrb	r3, [r3, #0]
 801d538:	009b      	lsls	r3, r3, #2
 801d53a:	18d3      	adds	r3, r2, r3
 801d53c:	881b      	ldrh	r3, [r3, #0]
 801d53e:	b29a      	uxth	r2, r3
 801d540:	208a      	movs	r0, #138	@ 0x8a
 801d542:	183b      	adds	r3, r7, r0
 801d544:	4911      	ldr	r1, [pc, #68]	@ (801d58c <USB_EPStartXfer+0x1268>)
 801d546:	400a      	ands	r2, r1
 801d548:	801a      	strh	r2, [r3, #0]
 801d54a:	183b      	adds	r3, r7, r0
 801d54c:	183a      	adds	r2, r7, r0
 801d54e:	8812      	ldrh	r2, [r2, #0]
 801d550:	2180      	movs	r1, #128	@ 0x80
 801d552:	0149      	lsls	r1, r1, #5
 801d554:	404a      	eors	r2, r1
 801d556:	801a      	strh	r2, [r3, #0]
 801d558:	183b      	adds	r3, r7, r0
 801d55a:	183a      	adds	r2, r7, r0
 801d55c:	8812      	ldrh	r2, [r2, #0]
 801d55e:	2180      	movs	r1, #128	@ 0x80
 801d560:	0189      	lsls	r1, r1, #6
 801d562:	404a      	eors	r2, r1
 801d564:	801a      	strh	r2, [r3, #0]
 801d566:	687a      	ldr	r2, [r7, #4]
 801d568:	683b      	ldr	r3, [r7, #0]
 801d56a:	781b      	ldrb	r3, [r3, #0]
 801d56c:	009b      	lsls	r3, r3, #2
 801d56e:	18d3      	adds	r3, r2, r3
 801d570:	183a      	adds	r2, r7, r0
 801d572:	8812      	ldrh	r2, [r2, #0]
 801d574:	4906      	ldr	r1, [pc, #24]	@ (801d590 <USB_EPStartXfer+0x126c>)
 801d576:	430a      	orrs	r2, r1
 801d578:	b292      	uxth	r2, r2
 801d57a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801d57c:	2300      	movs	r3, #0
}
 801d57e:	0018      	movs	r0, r3
 801d580:	46bd      	mov	sp, r7
 801d582:	b043      	add	sp, #268	@ 0x10c
 801d584:	bd90      	pop	{r4, r7, pc}
 801d586:	46c0      	nop			@ (mov r8, r8)
 801d588:	00000406 	.word	0x00000406
 801d58c:	ffffbf8f 	.word	0xffffbf8f
 801d590:	ffff8080 	.word	0xffff8080

0801d594 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d594:	b580      	push	{r7, lr}
 801d596:	b084      	sub	sp, #16
 801d598:	af00      	add	r7, sp, #0
 801d59a:	6078      	str	r0, [r7, #4]
 801d59c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801d59e:	683b      	ldr	r3, [r7, #0]
 801d5a0:	785b      	ldrb	r3, [r3, #1]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d01d      	beq.n	801d5e2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801d5a6:	687a      	ldr	r2, [r7, #4]
 801d5a8:	683b      	ldr	r3, [r7, #0]
 801d5aa:	781b      	ldrb	r3, [r3, #0]
 801d5ac:	009b      	lsls	r3, r3, #2
 801d5ae:	18d3      	adds	r3, r2, r3
 801d5b0:	881b      	ldrh	r3, [r3, #0]
 801d5b2:	b29a      	uxth	r2, r3
 801d5b4:	200c      	movs	r0, #12
 801d5b6:	183b      	adds	r3, r7, r0
 801d5b8:	491b      	ldr	r1, [pc, #108]	@ (801d628 <USB_EPSetStall+0x94>)
 801d5ba:	400a      	ands	r2, r1
 801d5bc:	801a      	strh	r2, [r3, #0]
 801d5be:	183b      	adds	r3, r7, r0
 801d5c0:	183a      	adds	r2, r7, r0
 801d5c2:	8812      	ldrh	r2, [r2, #0]
 801d5c4:	2110      	movs	r1, #16
 801d5c6:	404a      	eors	r2, r1
 801d5c8:	801a      	strh	r2, [r3, #0]
 801d5ca:	687a      	ldr	r2, [r7, #4]
 801d5cc:	683b      	ldr	r3, [r7, #0]
 801d5ce:	781b      	ldrb	r3, [r3, #0]
 801d5d0:	009b      	lsls	r3, r3, #2
 801d5d2:	18d3      	adds	r3, r2, r3
 801d5d4:	183a      	adds	r2, r7, r0
 801d5d6:	8812      	ldrh	r2, [r2, #0]
 801d5d8:	4914      	ldr	r1, [pc, #80]	@ (801d62c <USB_EPSetStall+0x98>)
 801d5da:	430a      	orrs	r2, r1
 801d5dc:	b292      	uxth	r2, r2
 801d5de:	801a      	strh	r2, [r3, #0]
 801d5e0:	e01d      	b.n	801d61e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801d5e2:	687a      	ldr	r2, [r7, #4]
 801d5e4:	683b      	ldr	r3, [r7, #0]
 801d5e6:	781b      	ldrb	r3, [r3, #0]
 801d5e8:	009b      	lsls	r3, r3, #2
 801d5ea:	18d3      	adds	r3, r2, r3
 801d5ec:	881b      	ldrh	r3, [r3, #0]
 801d5ee:	b29a      	uxth	r2, r3
 801d5f0:	200e      	movs	r0, #14
 801d5f2:	183b      	adds	r3, r7, r0
 801d5f4:	490e      	ldr	r1, [pc, #56]	@ (801d630 <USB_EPSetStall+0x9c>)
 801d5f6:	400a      	ands	r2, r1
 801d5f8:	801a      	strh	r2, [r3, #0]
 801d5fa:	183b      	adds	r3, r7, r0
 801d5fc:	183a      	adds	r2, r7, r0
 801d5fe:	8812      	ldrh	r2, [r2, #0]
 801d600:	2180      	movs	r1, #128	@ 0x80
 801d602:	0149      	lsls	r1, r1, #5
 801d604:	404a      	eors	r2, r1
 801d606:	801a      	strh	r2, [r3, #0]
 801d608:	687a      	ldr	r2, [r7, #4]
 801d60a:	683b      	ldr	r3, [r7, #0]
 801d60c:	781b      	ldrb	r3, [r3, #0]
 801d60e:	009b      	lsls	r3, r3, #2
 801d610:	18d3      	adds	r3, r2, r3
 801d612:	183a      	adds	r2, r7, r0
 801d614:	8812      	ldrh	r2, [r2, #0]
 801d616:	4905      	ldr	r1, [pc, #20]	@ (801d62c <USB_EPSetStall+0x98>)
 801d618:	430a      	orrs	r2, r1
 801d61a:	b292      	uxth	r2, r2
 801d61c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801d61e:	2300      	movs	r3, #0
}
 801d620:	0018      	movs	r0, r3
 801d622:	46bd      	mov	sp, r7
 801d624:	b004      	add	sp, #16
 801d626:	bd80      	pop	{r7, pc}
 801d628:	ffff8fbf 	.word	0xffff8fbf
 801d62c:	ffff8080 	.word	0xffff8080
 801d630:	ffffbf8f 	.word	0xffffbf8f

0801d634 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d634:	b580      	push	{r7, lr}
 801d636:	b086      	sub	sp, #24
 801d638:	af00      	add	r7, sp, #0
 801d63a:	6078      	str	r0, [r7, #4]
 801d63c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801d63e:	683b      	ldr	r3, [r7, #0]
 801d640:	7b1b      	ldrb	r3, [r3, #12]
 801d642:	2b00      	cmp	r3, #0
 801d644:	d000      	beq.n	801d648 <USB_EPClearStall+0x14>
 801d646:	e095      	b.n	801d774 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801d648:	683b      	ldr	r3, [r7, #0]
 801d64a:	785b      	ldrb	r3, [r3, #1]
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d046      	beq.n	801d6de <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d650:	687a      	ldr	r2, [r7, #4]
 801d652:	683b      	ldr	r3, [r7, #0]
 801d654:	781b      	ldrb	r3, [r3, #0]
 801d656:	009b      	lsls	r3, r3, #2
 801d658:	18d2      	adds	r2, r2, r3
 801d65a:	2110      	movs	r1, #16
 801d65c:	187b      	adds	r3, r7, r1
 801d65e:	8812      	ldrh	r2, [r2, #0]
 801d660:	801a      	strh	r2, [r3, #0]
 801d662:	187b      	adds	r3, r7, r1
 801d664:	881b      	ldrh	r3, [r3, #0]
 801d666:	2240      	movs	r2, #64	@ 0x40
 801d668:	4013      	ands	r3, r2
 801d66a:	d016      	beq.n	801d69a <USB_EPClearStall+0x66>
 801d66c:	687a      	ldr	r2, [r7, #4]
 801d66e:	683b      	ldr	r3, [r7, #0]
 801d670:	781b      	ldrb	r3, [r3, #0]
 801d672:	009b      	lsls	r3, r3, #2
 801d674:	18d3      	adds	r3, r2, r3
 801d676:	881b      	ldrh	r3, [r3, #0]
 801d678:	b29a      	uxth	r2, r3
 801d67a:	200e      	movs	r0, #14
 801d67c:	183b      	adds	r3, r7, r0
 801d67e:	4940      	ldr	r1, [pc, #256]	@ (801d780 <USB_EPClearStall+0x14c>)
 801d680:	400a      	ands	r2, r1
 801d682:	801a      	strh	r2, [r3, #0]
 801d684:	687a      	ldr	r2, [r7, #4]
 801d686:	683b      	ldr	r3, [r7, #0]
 801d688:	781b      	ldrb	r3, [r3, #0]
 801d68a:	009b      	lsls	r3, r3, #2
 801d68c:	18d3      	adds	r3, r2, r3
 801d68e:	183a      	adds	r2, r7, r0
 801d690:	8812      	ldrh	r2, [r2, #0]
 801d692:	493c      	ldr	r1, [pc, #240]	@ (801d784 <USB_EPClearStall+0x150>)
 801d694:	430a      	orrs	r2, r1
 801d696:	b292      	uxth	r2, r2
 801d698:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801d69a:	683b      	ldr	r3, [r7, #0]
 801d69c:	78db      	ldrb	r3, [r3, #3]
 801d69e:	2b01      	cmp	r3, #1
 801d6a0:	d068      	beq.n	801d774 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801d6a2:	687a      	ldr	r2, [r7, #4]
 801d6a4:	683b      	ldr	r3, [r7, #0]
 801d6a6:	781b      	ldrb	r3, [r3, #0]
 801d6a8:	009b      	lsls	r3, r3, #2
 801d6aa:	18d3      	adds	r3, r2, r3
 801d6ac:	881b      	ldrh	r3, [r3, #0]
 801d6ae:	b29a      	uxth	r2, r3
 801d6b0:	200c      	movs	r0, #12
 801d6b2:	183b      	adds	r3, r7, r0
 801d6b4:	4934      	ldr	r1, [pc, #208]	@ (801d788 <USB_EPClearStall+0x154>)
 801d6b6:	400a      	ands	r2, r1
 801d6b8:	801a      	strh	r2, [r3, #0]
 801d6ba:	183b      	adds	r3, r7, r0
 801d6bc:	183a      	adds	r2, r7, r0
 801d6be:	8812      	ldrh	r2, [r2, #0]
 801d6c0:	2120      	movs	r1, #32
 801d6c2:	404a      	eors	r2, r1
 801d6c4:	801a      	strh	r2, [r3, #0]
 801d6c6:	687a      	ldr	r2, [r7, #4]
 801d6c8:	683b      	ldr	r3, [r7, #0]
 801d6ca:	781b      	ldrb	r3, [r3, #0]
 801d6cc:	009b      	lsls	r3, r3, #2
 801d6ce:	18d3      	adds	r3, r2, r3
 801d6d0:	183a      	adds	r2, r7, r0
 801d6d2:	8812      	ldrh	r2, [r2, #0]
 801d6d4:	492d      	ldr	r1, [pc, #180]	@ (801d78c <USB_EPClearStall+0x158>)
 801d6d6:	430a      	orrs	r2, r1
 801d6d8:	b292      	uxth	r2, r2
 801d6da:	801a      	strh	r2, [r3, #0]
 801d6dc:	e04a      	b.n	801d774 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d6de:	687a      	ldr	r2, [r7, #4]
 801d6e0:	683b      	ldr	r3, [r7, #0]
 801d6e2:	781b      	ldrb	r3, [r3, #0]
 801d6e4:	009b      	lsls	r3, r3, #2
 801d6e6:	18d2      	adds	r2, r2, r3
 801d6e8:	2116      	movs	r1, #22
 801d6ea:	187b      	adds	r3, r7, r1
 801d6ec:	8812      	ldrh	r2, [r2, #0]
 801d6ee:	801a      	strh	r2, [r3, #0]
 801d6f0:	187b      	adds	r3, r7, r1
 801d6f2:	881a      	ldrh	r2, [r3, #0]
 801d6f4:	2380      	movs	r3, #128	@ 0x80
 801d6f6:	01db      	lsls	r3, r3, #7
 801d6f8:	4013      	ands	r3, r2
 801d6fa:	d016      	beq.n	801d72a <USB_EPClearStall+0xf6>
 801d6fc:	687a      	ldr	r2, [r7, #4]
 801d6fe:	683b      	ldr	r3, [r7, #0]
 801d700:	781b      	ldrb	r3, [r3, #0]
 801d702:	009b      	lsls	r3, r3, #2
 801d704:	18d3      	adds	r3, r2, r3
 801d706:	881b      	ldrh	r3, [r3, #0]
 801d708:	b29a      	uxth	r2, r3
 801d70a:	2014      	movs	r0, #20
 801d70c:	183b      	adds	r3, r7, r0
 801d70e:	491c      	ldr	r1, [pc, #112]	@ (801d780 <USB_EPClearStall+0x14c>)
 801d710:	400a      	ands	r2, r1
 801d712:	801a      	strh	r2, [r3, #0]
 801d714:	687a      	ldr	r2, [r7, #4]
 801d716:	683b      	ldr	r3, [r7, #0]
 801d718:	781b      	ldrb	r3, [r3, #0]
 801d71a:	009b      	lsls	r3, r3, #2
 801d71c:	18d3      	adds	r3, r2, r3
 801d71e:	183a      	adds	r2, r7, r0
 801d720:	8812      	ldrh	r2, [r2, #0]
 801d722:	491b      	ldr	r1, [pc, #108]	@ (801d790 <USB_EPClearStall+0x15c>)
 801d724:	430a      	orrs	r2, r1
 801d726:	b292      	uxth	r2, r2
 801d728:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801d72a:	687a      	ldr	r2, [r7, #4]
 801d72c:	683b      	ldr	r3, [r7, #0]
 801d72e:	781b      	ldrb	r3, [r3, #0]
 801d730:	009b      	lsls	r3, r3, #2
 801d732:	18d3      	adds	r3, r2, r3
 801d734:	881b      	ldrh	r3, [r3, #0]
 801d736:	b29a      	uxth	r2, r3
 801d738:	2012      	movs	r0, #18
 801d73a:	183b      	adds	r3, r7, r0
 801d73c:	4915      	ldr	r1, [pc, #84]	@ (801d794 <USB_EPClearStall+0x160>)
 801d73e:	400a      	ands	r2, r1
 801d740:	801a      	strh	r2, [r3, #0]
 801d742:	183b      	adds	r3, r7, r0
 801d744:	183a      	adds	r2, r7, r0
 801d746:	8812      	ldrh	r2, [r2, #0]
 801d748:	2180      	movs	r1, #128	@ 0x80
 801d74a:	0149      	lsls	r1, r1, #5
 801d74c:	404a      	eors	r2, r1
 801d74e:	801a      	strh	r2, [r3, #0]
 801d750:	183b      	adds	r3, r7, r0
 801d752:	183a      	adds	r2, r7, r0
 801d754:	8812      	ldrh	r2, [r2, #0]
 801d756:	2180      	movs	r1, #128	@ 0x80
 801d758:	0189      	lsls	r1, r1, #6
 801d75a:	404a      	eors	r2, r1
 801d75c:	801a      	strh	r2, [r3, #0]
 801d75e:	687a      	ldr	r2, [r7, #4]
 801d760:	683b      	ldr	r3, [r7, #0]
 801d762:	781b      	ldrb	r3, [r3, #0]
 801d764:	009b      	lsls	r3, r3, #2
 801d766:	18d3      	adds	r3, r2, r3
 801d768:	183a      	adds	r2, r7, r0
 801d76a:	8812      	ldrh	r2, [r2, #0]
 801d76c:	4907      	ldr	r1, [pc, #28]	@ (801d78c <USB_EPClearStall+0x158>)
 801d76e:	430a      	orrs	r2, r1
 801d770:	b292      	uxth	r2, r2
 801d772:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801d774:	2300      	movs	r3, #0
}
 801d776:	0018      	movs	r0, r3
 801d778:	46bd      	mov	sp, r7
 801d77a:	b006      	add	sp, #24
 801d77c:	bd80      	pop	{r7, pc}
 801d77e:	46c0      	nop			@ (mov r8, r8)
 801d780:	ffff8f8f 	.word	0xffff8f8f
 801d784:	ffff80c0 	.word	0xffff80c0
 801d788:	ffff8fbf 	.word	0xffff8fbf
 801d78c:	ffff8080 	.word	0xffff8080
 801d790:	ffffc080 	.word	0xffffc080
 801d794:	ffffbf8f 	.word	0xffffbf8f

0801d798 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801d798:	b580      	push	{r7, lr}
 801d79a:	b082      	sub	sp, #8
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	6078      	str	r0, [r7, #4]
 801d7a0:	000a      	movs	r2, r1
 801d7a2:	1cfb      	adds	r3, r7, #3
 801d7a4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801d7a6:	1cfb      	adds	r3, r7, #3
 801d7a8:	781b      	ldrb	r3, [r3, #0]
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d103      	bne.n	801d7b6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	224c      	movs	r2, #76	@ 0x4c
 801d7b2:	2180      	movs	r1, #128	@ 0x80
 801d7b4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801d7b6:	2300      	movs	r3, #0
}
 801d7b8:	0018      	movs	r0, r3
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	b002      	add	sp, #8
 801d7be:	bd80      	pop	{r7, pc}

0801d7c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801d7c0:	b580      	push	{r7, lr}
 801d7c2:	b082      	sub	sp, #8
 801d7c4:	af00      	add	r7, sp, #0
 801d7c6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	2258      	movs	r2, #88	@ 0x58
 801d7cc:	5a9b      	ldrh	r3, [r3, r2]
 801d7ce:	b29b      	uxth	r3, r3
 801d7d0:	4a05      	ldr	r2, [pc, #20]	@ (801d7e8 <USB_DevConnect+0x28>)
 801d7d2:	4313      	orrs	r3, r2
 801d7d4:	b299      	uxth	r1, r3
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	2258      	movs	r2, #88	@ 0x58
 801d7da:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801d7dc:	2300      	movs	r3, #0
}
 801d7de:	0018      	movs	r0, r3
 801d7e0:	46bd      	mov	sp, r7
 801d7e2:	b002      	add	sp, #8
 801d7e4:	bd80      	pop	{r7, pc}
 801d7e6:	46c0      	nop			@ (mov r8, r8)
 801d7e8:	ffff8000 	.word	0xffff8000

0801d7ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801d7ec:	b580      	push	{r7, lr}
 801d7ee:	b084      	sub	sp, #16
 801d7f0:	af00      	add	r7, sp, #0
 801d7f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	2244      	movs	r2, #68	@ 0x44
 801d7f8:	5a9b      	ldrh	r3, [r3, r2]
 801d7fa:	b29b      	uxth	r3, r3
 801d7fc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801d7fe:	68fb      	ldr	r3, [r7, #12]
}
 801d800:	0018      	movs	r0, r3
 801d802:	46bd      	mov	sp, r7
 801d804:	b004      	add	sp, #16
 801d806:	bd80      	pop	{r7, pc}

0801d808 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b08a      	sub	sp, #40	@ 0x28
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	60f8      	str	r0, [r7, #12]
 801d810:	60b9      	str	r1, [r7, #8]
 801d812:	0019      	movs	r1, r3
 801d814:	1dbb      	adds	r3, r7, #6
 801d816:	801a      	strh	r2, [r3, #0]
 801d818:	1d3b      	adds	r3, r7, #4
 801d81a:	1c0a      	adds	r2, r1, #0
 801d81c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801d81e:	1d3b      	adds	r3, r7, #4
 801d820:	881b      	ldrh	r3, [r3, #0]
 801d822:	3301      	adds	r3, #1
 801d824:	085b      	lsrs	r3, r3, #1
 801d826:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801d82c:	68bb      	ldr	r3, [r7, #8]
 801d82e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801d830:	1dbb      	adds	r3, r7, #6
 801d832:	881a      	ldrh	r2, [r3, #0]
 801d834:	697b      	ldr	r3, [r7, #20]
 801d836:	18d3      	adds	r3, r2, r3
 801d838:	2280      	movs	r2, #128	@ 0x80
 801d83a:	00d2      	lsls	r2, r2, #3
 801d83c:	4694      	mov	ip, r2
 801d83e:	4463      	add	r3, ip
 801d840:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801d842:	69bb      	ldr	r3, [r7, #24]
 801d844:	627b      	str	r3, [r7, #36]	@ 0x24
 801d846:	e020      	b.n	801d88a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801d848:	69fb      	ldr	r3, [r7, #28]
 801d84a:	781a      	ldrb	r2, [r3, #0]
 801d84c:	2112      	movs	r1, #18
 801d84e:	187b      	adds	r3, r7, r1
 801d850:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801d852:	69fb      	ldr	r3, [r7, #28]
 801d854:	3301      	adds	r3, #1
 801d856:	781b      	ldrb	r3, [r3, #0]
 801d858:	021b      	lsls	r3, r3, #8
 801d85a:	b21a      	sxth	r2, r3
 801d85c:	187b      	adds	r3, r7, r1
 801d85e:	2000      	movs	r0, #0
 801d860:	5e1b      	ldrsh	r3, [r3, r0]
 801d862:	4313      	orrs	r3, r2
 801d864:	b21a      	sxth	r2, r3
 801d866:	187b      	adds	r3, r7, r1
 801d868:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801d86a:	6a3b      	ldr	r3, [r7, #32]
 801d86c:	187a      	adds	r2, r7, r1
 801d86e:	8812      	ldrh	r2, [r2, #0]
 801d870:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801d872:	6a3b      	ldr	r3, [r7, #32]
 801d874:	3302      	adds	r3, #2
 801d876:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801d878:	69fb      	ldr	r3, [r7, #28]
 801d87a:	3301      	adds	r3, #1
 801d87c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801d87e:	69fb      	ldr	r3, [r7, #28]
 801d880:	3301      	adds	r3, #1
 801d882:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d886:	3b01      	subs	r3, #1
 801d888:	627b      	str	r3, [r7, #36]	@ 0x24
 801d88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	d1db      	bne.n	801d848 <USB_WritePMA+0x40>
  }
}
 801d890:	46c0      	nop			@ (mov r8, r8)
 801d892:	46c0      	nop			@ (mov r8, r8)
 801d894:	46bd      	mov	sp, r7
 801d896:	b00a      	add	sp, #40	@ 0x28
 801d898:	bd80      	pop	{r7, pc}

0801d89a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801d89a:	b580      	push	{r7, lr}
 801d89c:	b08a      	sub	sp, #40	@ 0x28
 801d89e:	af00      	add	r7, sp, #0
 801d8a0:	60f8      	str	r0, [r7, #12]
 801d8a2:	60b9      	str	r1, [r7, #8]
 801d8a4:	0019      	movs	r1, r3
 801d8a6:	1dbb      	adds	r3, r7, #6
 801d8a8:	801a      	strh	r2, [r3, #0]
 801d8aa:	1d3b      	adds	r3, r7, #4
 801d8ac:	1c0a      	adds	r2, r1, #0
 801d8ae:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801d8b0:	1d3b      	adds	r3, r7, #4
 801d8b2:	881b      	ldrh	r3, [r3, #0]
 801d8b4:	085b      	lsrs	r3, r3, #1
 801d8b6:	b29b      	uxth	r3, r3
 801d8b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801d8be:	68bb      	ldr	r3, [r7, #8]
 801d8c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801d8c2:	1dbb      	adds	r3, r7, #6
 801d8c4:	881a      	ldrh	r2, [r3, #0]
 801d8c6:	697b      	ldr	r3, [r7, #20]
 801d8c8:	18d3      	adds	r3, r2, r3
 801d8ca:	2280      	movs	r2, #128	@ 0x80
 801d8cc:	00d2      	lsls	r2, r2, #3
 801d8ce:	4694      	mov	ip, r2
 801d8d0:	4463      	add	r3, ip
 801d8d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801d8d4:	69bb      	ldr	r3, [r7, #24]
 801d8d6:	627b      	str	r3, [r7, #36]	@ 0x24
 801d8d8:	e018      	b.n	801d90c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801d8da:	6a3b      	ldr	r3, [r7, #32]
 801d8dc:	881b      	ldrh	r3, [r3, #0]
 801d8de:	b29b      	uxth	r3, r3
 801d8e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801d8e2:	6a3b      	ldr	r3, [r7, #32]
 801d8e4:	3302      	adds	r3, #2
 801d8e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801d8e8:	693b      	ldr	r3, [r7, #16]
 801d8ea:	b2da      	uxtb	r2, r3
 801d8ec:	69fb      	ldr	r3, [r7, #28]
 801d8ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801d8f0:	69fb      	ldr	r3, [r7, #28]
 801d8f2:	3301      	adds	r3, #1
 801d8f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801d8f6:	693b      	ldr	r3, [r7, #16]
 801d8f8:	0a1b      	lsrs	r3, r3, #8
 801d8fa:	b2da      	uxtb	r2, r3
 801d8fc:	69fb      	ldr	r3, [r7, #28]
 801d8fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801d900:	69fb      	ldr	r3, [r7, #28]
 801d902:	3301      	adds	r3, #1
 801d904:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801d906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d908:	3b01      	subs	r3, #1
 801d90a:	627b      	str	r3, [r7, #36]	@ 0x24
 801d90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d1e3      	bne.n	801d8da <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801d912:	1d3b      	adds	r3, r7, #4
 801d914:	881b      	ldrh	r3, [r3, #0]
 801d916:	2201      	movs	r2, #1
 801d918:	4013      	ands	r3, r2
 801d91a:	b29b      	uxth	r3, r3
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d007      	beq.n	801d930 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801d920:	6a3b      	ldr	r3, [r7, #32]
 801d922:	881b      	ldrh	r3, [r3, #0]
 801d924:	b29b      	uxth	r3, r3
 801d926:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801d928:	693b      	ldr	r3, [r7, #16]
 801d92a:	b2da      	uxtb	r2, r3
 801d92c:	69fb      	ldr	r3, [r7, #28]
 801d92e:	701a      	strb	r2, [r3, #0]
  }
}
 801d930:	46c0      	nop			@ (mov r8, r8)
 801d932:	46bd      	mov	sp, r7
 801d934:	b00a      	add	sp, #40	@ 0x28
 801d936:	bd80      	pop	{r7, pc}

0801d938 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801d938:	b580      	push	{r7, lr}
 801d93a:	b084      	sub	sp, #16
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	6078      	str	r0, [r7, #4]
 801d940:	000a      	movs	r2, r1
 801d942:	1cfb      	adds	r3, r7, #3
 801d944:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801d946:	230f      	movs	r3, #15
 801d948:	18fb      	adds	r3, r7, r3
 801d94a:	2200      	movs	r2, #0
 801d94c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	7c1b      	ldrb	r3, [r3, #16]
 801d952:	2b00      	cmp	r3, #0
 801d954:	d116      	bne.n	801d984 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801d956:	2380      	movs	r3, #128	@ 0x80
 801d958:	009b      	lsls	r3, r3, #2
 801d95a:	6878      	ldr	r0, [r7, #4]
 801d95c:	2202      	movs	r2, #2
 801d95e:	2181      	movs	r1, #129	@ 0x81
 801d960:	f002 f8eb 	bl	801fb3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	2201      	movs	r2, #1
 801d968:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801d96a:	2380      	movs	r3, #128	@ 0x80
 801d96c:	009b      	lsls	r3, r3, #2
 801d96e:	6878      	ldr	r0, [r7, #4]
 801d970:	2202      	movs	r2, #2
 801d972:	2101      	movs	r1, #1
 801d974:	f002 f8e1 	bl	801fb3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801d978:	687a      	ldr	r2, [r7, #4]
 801d97a:	23b6      	movs	r3, #182	@ 0xb6
 801d97c:	005b      	lsls	r3, r3, #1
 801d97e:	2101      	movs	r1, #1
 801d980:	50d1      	str	r1, [r2, r3]
 801d982:	e013      	b.n	801d9ac <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801d984:	6878      	ldr	r0, [r7, #4]
 801d986:	2340      	movs	r3, #64	@ 0x40
 801d988:	2202      	movs	r2, #2
 801d98a:	2181      	movs	r1, #129	@ 0x81
 801d98c:	f002 f8d5 	bl	801fb3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	2201      	movs	r2, #1
 801d994:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801d996:	6878      	ldr	r0, [r7, #4]
 801d998:	2340      	movs	r3, #64	@ 0x40
 801d99a:	2202      	movs	r2, #2
 801d99c:	2101      	movs	r1, #1
 801d99e:	f002 f8cc 	bl	801fb3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801d9a2:	687a      	ldr	r2, [r7, #4]
 801d9a4:	23b6      	movs	r3, #182	@ 0xb6
 801d9a6:	005b      	lsls	r3, r3, #1
 801d9a8:	2101      	movs	r1, #1
 801d9aa:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801d9ac:	6878      	ldr	r0, [r7, #4]
 801d9ae:	2308      	movs	r3, #8
 801d9b0:	2203      	movs	r2, #3
 801d9b2:	2182      	movs	r1, #130	@ 0x82
 801d9b4:	f002 f8c1 	bl	801fb3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	2201      	movs	r2, #1
 801d9bc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801d9be:	2387      	movs	r3, #135	@ 0x87
 801d9c0:	009b      	lsls	r3, r3, #2
 801d9c2:	0018      	movs	r0, r3
 801d9c4:	f002 fa52 	bl	801fe6c <USBD_static_malloc>
 801d9c8:	0001      	movs	r1, r0
 801d9ca:	687a      	ldr	r2, [r7, #4]
 801d9cc:	23ae      	movs	r3, #174	@ 0xae
 801d9ce:	009b      	lsls	r3, r3, #2
 801d9d0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801d9d2:	687a      	ldr	r2, [r7, #4]
 801d9d4:	23ae      	movs	r3, #174	@ 0xae
 801d9d6:	009b      	lsls	r3, r3, #2
 801d9d8:	58d3      	ldr	r3, [r2, r3]
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	d104      	bne.n	801d9e8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801d9de:	230f      	movs	r3, #15
 801d9e0:	18fb      	adds	r3, r7, r3
 801d9e2:	2201      	movs	r2, #1
 801d9e4:	701a      	strb	r2, [r3, #0]
 801d9e6:	e02c      	b.n	801da42 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801d9e8:	687a      	ldr	r2, [r7, #4]
 801d9ea:	23ae      	movs	r3, #174	@ 0xae
 801d9ec:	009b      	lsls	r3, r3, #2
 801d9ee:	58d3      	ldr	r3, [r2, r3]
 801d9f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801d9f2:	687a      	ldr	r2, [r7, #4]
 801d9f4:	23af      	movs	r3, #175	@ 0xaf
 801d9f6:	009b      	lsls	r3, r3, #2
 801d9f8:	58d3      	ldr	r3, [r2, r3]
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801d9fe:	68ba      	ldr	r2, [r7, #8]
 801da00:	2385      	movs	r3, #133	@ 0x85
 801da02:	009b      	lsls	r3, r3, #2
 801da04:	2100      	movs	r1, #0
 801da06:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801da08:	68ba      	ldr	r2, [r7, #8]
 801da0a:	2386      	movs	r3, #134	@ 0x86
 801da0c:	009b      	lsls	r3, r3, #2
 801da0e:	2100      	movs	r1, #0
 801da10:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	7c1b      	ldrb	r3, [r3, #16]
 801da16:	2b00      	cmp	r3, #0
 801da18:	d10a      	bne.n	801da30 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801da1a:	68ba      	ldr	r2, [r7, #8]
 801da1c:	2381      	movs	r3, #129	@ 0x81
 801da1e:	009b      	lsls	r3, r3, #2
 801da20:	58d2      	ldr	r2, [r2, r3]
 801da22:	2380      	movs	r3, #128	@ 0x80
 801da24:	009b      	lsls	r3, r3, #2
 801da26:	6878      	ldr	r0, [r7, #4]
 801da28:	2101      	movs	r1, #1
 801da2a:	f002 f9d1 	bl	801fdd0 <USBD_LL_PrepareReceive>
 801da2e:	e008      	b.n	801da42 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801da30:	68ba      	ldr	r2, [r7, #8]
 801da32:	2381      	movs	r3, #129	@ 0x81
 801da34:	009b      	lsls	r3, r3, #2
 801da36:	58d2      	ldr	r2, [r2, r3]
 801da38:	6878      	ldr	r0, [r7, #4]
 801da3a:	2340      	movs	r3, #64	@ 0x40
 801da3c:	2101      	movs	r1, #1
 801da3e:	f002 f9c7 	bl	801fdd0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801da42:	230f      	movs	r3, #15
 801da44:	18fb      	adds	r3, r7, r3
 801da46:	781b      	ldrb	r3, [r3, #0]
}
 801da48:	0018      	movs	r0, r3
 801da4a:	46bd      	mov	sp, r7
 801da4c:	b004      	add	sp, #16
 801da4e:	bd80      	pop	{r7, pc}

0801da50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801da50:	b580      	push	{r7, lr}
 801da52:	b084      	sub	sp, #16
 801da54:	af00      	add	r7, sp, #0
 801da56:	6078      	str	r0, [r7, #4]
 801da58:	000a      	movs	r2, r1
 801da5a:	1cfb      	adds	r3, r7, #3
 801da5c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801da5e:	230f      	movs	r3, #15
 801da60:	18fb      	adds	r3, r7, r3
 801da62:	2200      	movs	r2, #0
 801da64:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	2181      	movs	r1, #129	@ 0x81
 801da6a:	0018      	movs	r0, r3
 801da6c:	f002 f89c 	bl	801fba8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	2200      	movs	r2, #0
 801da74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	2101      	movs	r1, #1
 801da7a:	0018      	movs	r0, r3
 801da7c:	f002 f894 	bl	801fba8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801da80:	687a      	ldr	r2, [r7, #4]
 801da82:	23b6      	movs	r3, #182	@ 0xb6
 801da84:	005b      	lsls	r3, r3, #1
 801da86:	2100      	movs	r1, #0
 801da88:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	2182      	movs	r1, #130	@ 0x82
 801da8e:	0018      	movs	r0, r3
 801da90:	f002 f88a 	bl	801fba8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	2200      	movs	r2, #0
 801da98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801da9a:	687a      	ldr	r2, [r7, #4]
 801da9c:	23ae      	movs	r3, #174	@ 0xae
 801da9e:	009b      	lsls	r3, r3, #2
 801daa0:	58d3      	ldr	r3, [r2, r3]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d011      	beq.n	801daca <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801daa6:	687a      	ldr	r2, [r7, #4]
 801daa8:	23af      	movs	r3, #175	@ 0xaf
 801daaa:	009b      	lsls	r3, r3, #2
 801daac:	58d3      	ldr	r3, [r2, r3]
 801daae:	685b      	ldr	r3, [r3, #4]
 801dab0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801dab2:	687a      	ldr	r2, [r7, #4]
 801dab4:	23ae      	movs	r3, #174	@ 0xae
 801dab6:	009b      	lsls	r3, r3, #2
 801dab8:	58d3      	ldr	r3, [r2, r3]
 801daba:	0018      	movs	r0, r3
 801dabc:	f002 f9e2 	bl	801fe84 <USBD_static_free>
    pdev->pClassData = NULL;
 801dac0:	687a      	ldr	r2, [r7, #4]
 801dac2:	23ae      	movs	r3, #174	@ 0xae
 801dac4:	009b      	lsls	r3, r3, #2
 801dac6:	2100      	movs	r1, #0
 801dac8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801daca:	230f      	movs	r3, #15
 801dacc:	18fb      	adds	r3, r7, r3
 801dace:	781b      	ldrb	r3, [r3, #0]
}
 801dad0:	0018      	movs	r0, r3
 801dad2:	46bd      	mov	sp, r7
 801dad4:	b004      	add	sp, #16
 801dad6:	bd80      	pop	{r7, pc}

0801dad8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801dad8:	b580      	push	{r7, lr}
 801dada:	b086      	sub	sp, #24
 801dadc:	af00      	add	r7, sp, #0
 801dade:	6078      	str	r0, [r7, #4]
 801dae0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dae2:	687a      	ldr	r2, [r7, #4]
 801dae4:	23ae      	movs	r3, #174	@ 0xae
 801dae6:	009b      	lsls	r3, r3, #2
 801dae8:	58d3      	ldr	r3, [r2, r3]
 801daea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801daec:	230f      	movs	r3, #15
 801daee:	18fb      	adds	r3, r7, r3
 801daf0:	2200      	movs	r2, #0
 801daf2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801daf4:	230c      	movs	r3, #12
 801daf6:	18fb      	adds	r3, r7, r3
 801daf8:	2200      	movs	r2, #0
 801dafa:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801dafc:	2317      	movs	r3, #23
 801dafe:	18fb      	adds	r3, r7, r3
 801db00:	2200      	movs	r2, #0
 801db02:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801db04:	683b      	ldr	r3, [r7, #0]
 801db06:	781b      	ldrb	r3, [r3, #0]
 801db08:	001a      	movs	r2, r3
 801db0a:	2360      	movs	r3, #96	@ 0x60
 801db0c:	4013      	ands	r3, r2
 801db0e:	d03d      	beq.n	801db8c <USBD_CDC_Setup+0xb4>
 801db10:	2b20      	cmp	r3, #32
 801db12:	d000      	beq.n	801db16 <USBD_CDC_Setup+0x3e>
 801db14:	e094      	b.n	801dc40 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801db16:	683b      	ldr	r3, [r7, #0]
 801db18:	88db      	ldrh	r3, [r3, #6]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d02b      	beq.n	801db76 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801db1e:	683b      	ldr	r3, [r7, #0]
 801db20:	781b      	ldrb	r3, [r3, #0]
 801db22:	b25b      	sxtb	r3, r3
 801db24:	2b00      	cmp	r3, #0
 801db26:	da12      	bge.n	801db4e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801db28:	687a      	ldr	r2, [r7, #4]
 801db2a:	23af      	movs	r3, #175	@ 0xaf
 801db2c:	009b      	lsls	r3, r3, #2
 801db2e:	58d3      	ldr	r3, [r2, r3]
 801db30:	689b      	ldr	r3, [r3, #8]
 801db32:	683a      	ldr	r2, [r7, #0]
 801db34:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801db36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801db38:	683a      	ldr	r2, [r7, #0]
 801db3a:	88d2      	ldrh	r2, [r2, #6]
 801db3c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801db3e:	6939      	ldr	r1, [r7, #16]
 801db40:	683b      	ldr	r3, [r7, #0]
 801db42:	88da      	ldrh	r2, [r3, #6]
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	0018      	movs	r0, r3
 801db48:	f001 fbaf 	bl	801f2aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801db4c:	e083      	b.n	801dc56 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801db4e:	683b      	ldr	r3, [r7, #0]
 801db50:	7859      	ldrb	r1, [r3, #1]
 801db52:	693a      	ldr	r2, [r7, #16]
 801db54:	2380      	movs	r3, #128	@ 0x80
 801db56:	009b      	lsls	r3, r3, #2
 801db58:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801db5a:	683b      	ldr	r3, [r7, #0]
 801db5c:	88db      	ldrh	r3, [r3, #6]
 801db5e:	b2d9      	uxtb	r1, r3
 801db60:	693b      	ldr	r3, [r7, #16]
 801db62:	4a40      	ldr	r2, [pc, #256]	@ (801dc64 <USBD_CDC_Setup+0x18c>)
 801db64:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801db66:	6939      	ldr	r1, [r7, #16]
 801db68:	683b      	ldr	r3, [r7, #0]
 801db6a:	88da      	ldrh	r2, [r3, #6]
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	0018      	movs	r0, r3
 801db70:	f001 fbce 	bl	801f310 <USBD_CtlPrepareRx>
      break;
 801db74:	e06f      	b.n	801dc56 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801db76:	687a      	ldr	r2, [r7, #4]
 801db78:	23af      	movs	r3, #175	@ 0xaf
 801db7a:	009b      	lsls	r3, r3, #2
 801db7c:	58d3      	ldr	r3, [r2, r3]
 801db7e:	689b      	ldr	r3, [r3, #8]
 801db80:	683a      	ldr	r2, [r7, #0]
 801db82:	7850      	ldrb	r0, [r2, #1]
 801db84:	6839      	ldr	r1, [r7, #0]
 801db86:	2200      	movs	r2, #0
 801db88:	4798      	blx	r3
      break;
 801db8a:	e064      	b.n	801dc56 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801db8c:	683b      	ldr	r3, [r7, #0]
 801db8e:	785b      	ldrb	r3, [r3, #1]
 801db90:	2b0b      	cmp	r3, #11
 801db92:	d037      	beq.n	801dc04 <USBD_CDC_Setup+0x12c>
 801db94:	dc47      	bgt.n	801dc26 <USBD_CDC_Setup+0x14e>
 801db96:	2b00      	cmp	r3, #0
 801db98:	d002      	beq.n	801dba0 <USBD_CDC_Setup+0xc8>
 801db9a:	2b0a      	cmp	r3, #10
 801db9c:	d019      	beq.n	801dbd2 <USBD_CDC_Setup+0xfa>
 801db9e:	e042      	b.n	801dc26 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dba0:	687a      	ldr	r2, [r7, #4]
 801dba2:	23a7      	movs	r3, #167	@ 0xa7
 801dba4:	009b      	lsls	r3, r3, #2
 801dba6:	5cd3      	ldrb	r3, [r2, r3]
 801dba8:	2b03      	cmp	r3, #3
 801dbaa:	d107      	bne.n	801dbbc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801dbac:	230c      	movs	r3, #12
 801dbae:	18f9      	adds	r1, r7, r3
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	2202      	movs	r2, #2
 801dbb4:	0018      	movs	r0, r3
 801dbb6:	f001 fb78 	bl	801f2aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801dbba:	e040      	b.n	801dc3e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801dbbc:	683a      	ldr	r2, [r7, #0]
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	0011      	movs	r1, r2
 801dbc2:	0018      	movs	r0, r3
 801dbc4:	f001 faf3 	bl	801f1ae <USBD_CtlError>
            ret = USBD_FAIL;
 801dbc8:	2317      	movs	r3, #23
 801dbca:	18fb      	adds	r3, r7, r3
 801dbcc:	2202      	movs	r2, #2
 801dbce:	701a      	strb	r2, [r3, #0]
          break;
 801dbd0:	e035      	b.n	801dc3e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dbd2:	687a      	ldr	r2, [r7, #4]
 801dbd4:	23a7      	movs	r3, #167	@ 0xa7
 801dbd6:	009b      	lsls	r3, r3, #2
 801dbd8:	5cd3      	ldrb	r3, [r2, r3]
 801dbda:	2b03      	cmp	r3, #3
 801dbdc:	d107      	bne.n	801dbee <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801dbde:	230f      	movs	r3, #15
 801dbe0:	18f9      	adds	r1, r7, r3
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	2201      	movs	r2, #1
 801dbe6:	0018      	movs	r0, r3
 801dbe8:	f001 fb5f 	bl	801f2aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801dbec:	e027      	b.n	801dc3e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801dbee:	683a      	ldr	r2, [r7, #0]
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	0011      	movs	r1, r2
 801dbf4:	0018      	movs	r0, r3
 801dbf6:	f001 fada 	bl	801f1ae <USBD_CtlError>
            ret = USBD_FAIL;
 801dbfa:	2317      	movs	r3, #23
 801dbfc:	18fb      	adds	r3, r7, r3
 801dbfe:	2202      	movs	r2, #2
 801dc00:	701a      	strb	r2, [r3, #0]
          break;
 801dc02:	e01c      	b.n	801dc3e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801dc04:	687a      	ldr	r2, [r7, #4]
 801dc06:	23a7      	movs	r3, #167	@ 0xa7
 801dc08:	009b      	lsls	r3, r3, #2
 801dc0a:	5cd3      	ldrb	r3, [r2, r3]
 801dc0c:	2b03      	cmp	r3, #3
 801dc0e:	d015      	beq.n	801dc3c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801dc10:	683a      	ldr	r2, [r7, #0]
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	0011      	movs	r1, r2
 801dc16:	0018      	movs	r0, r3
 801dc18:	f001 fac9 	bl	801f1ae <USBD_CtlError>
            ret = USBD_FAIL;
 801dc1c:	2317      	movs	r3, #23
 801dc1e:	18fb      	adds	r3, r7, r3
 801dc20:	2202      	movs	r2, #2
 801dc22:	701a      	strb	r2, [r3, #0]
          }
          break;
 801dc24:	e00a      	b.n	801dc3c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801dc26:	683a      	ldr	r2, [r7, #0]
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	0011      	movs	r1, r2
 801dc2c:	0018      	movs	r0, r3
 801dc2e:	f001 fabe 	bl	801f1ae <USBD_CtlError>
          ret = USBD_FAIL;
 801dc32:	2317      	movs	r3, #23
 801dc34:	18fb      	adds	r3, r7, r3
 801dc36:	2202      	movs	r2, #2
 801dc38:	701a      	strb	r2, [r3, #0]
          break;
 801dc3a:	e000      	b.n	801dc3e <USBD_CDC_Setup+0x166>
          break;
 801dc3c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801dc3e:	e00a      	b.n	801dc56 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801dc40:	683a      	ldr	r2, [r7, #0]
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	0011      	movs	r1, r2
 801dc46:	0018      	movs	r0, r3
 801dc48:	f001 fab1 	bl	801f1ae <USBD_CtlError>
      ret = USBD_FAIL;
 801dc4c:	2317      	movs	r3, #23
 801dc4e:	18fb      	adds	r3, r7, r3
 801dc50:	2202      	movs	r2, #2
 801dc52:	701a      	strb	r2, [r3, #0]
      break;
 801dc54:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801dc56:	2317      	movs	r3, #23
 801dc58:	18fb      	adds	r3, r7, r3
 801dc5a:	781b      	ldrb	r3, [r3, #0]
}
 801dc5c:	0018      	movs	r0, r3
 801dc5e:	46bd      	mov	sp, r7
 801dc60:	b006      	add	sp, #24
 801dc62:	bd80      	pop	{r7, pc}
 801dc64:	00000201 	.word	0x00000201

0801dc68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801dc68:	b580      	push	{r7, lr}
 801dc6a:	b084      	sub	sp, #16
 801dc6c:	af00      	add	r7, sp, #0
 801dc6e:	6078      	str	r0, [r7, #4]
 801dc70:	000a      	movs	r2, r1
 801dc72:	1cfb      	adds	r3, r7, #3
 801dc74:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801dc76:	687a      	ldr	r2, [r7, #4]
 801dc78:	23ae      	movs	r3, #174	@ 0xae
 801dc7a:	009b      	lsls	r3, r3, #2
 801dc7c:	58d3      	ldr	r3, [r2, r3]
 801dc7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801dc80:	687a      	ldr	r2, [r7, #4]
 801dc82:	23b0      	movs	r3, #176	@ 0xb0
 801dc84:	009b      	lsls	r3, r3, #2
 801dc86:	58d3      	ldr	r3, [r2, r3]
 801dc88:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801dc8a:	687a      	ldr	r2, [r7, #4]
 801dc8c:	23ae      	movs	r3, #174	@ 0xae
 801dc8e:	009b      	lsls	r3, r3, #2
 801dc90:	58d3      	ldr	r3, [r2, r3]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d03e      	beq.n	801dd14 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801dc96:	1cfb      	adds	r3, r7, #3
 801dc98:	781a      	ldrb	r2, [r3, #0]
 801dc9a:	6879      	ldr	r1, [r7, #4]
 801dc9c:	0013      	movs	r3, r2
 801dc9e:	009b      	lsls	r3, r3, #2
 801dca0:	189b      	adds	r3, r3, r2
 801dca2:	009b      	lsls	r3, r3, #2
 801dca4:	18cb      	adds	r3, r1, r3
 801dca6:	331c      	adds	r3, #28
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d02b      	beq.n	801dd06 <USBD_CDC_DataIn+0x9e>
 801dcae:	1cfb      	adds	r3, r7, #3
 801dcb0:	781a      	ldrb	r2, [r3, #0]
 801dcb2:	6879      	ldr	r1, [r7, #4]
 801dcb4:	0013      	movs	r3, r2
 801dcb6:	009b      	lsls	r3, r3, #2
 801dcb8:	189b      	adds	r3, r3, r2
 801dcba:	009b      	lsls	r3, r3, #2
 801dcbc:	18cb      	adds	r3, r1, r3
 801dcbe:	331c      	adds	r3, #28
 801dcc0:	6818      	ldr	r0, [r3, #0]
 801dcc2:	1cfb      	adds	r3, r7, #3
 801dcc4:	781a      	ldrb	r2, [r3, #0]
 801dcc6:	68b9      	ldr	r1, [r7, #8]
 801dcc8:	0013      	movs	r3, r2
 801dcca:	009b      	lsls	r3, r3, #2
 801dccc:	189b      	adds	r3, r3, r2
 801dcce:	00db      	lsls	r3, r3, #3
 801dcd0:	18cb      	adds	r3, r1, r3
 801dcd2:	3338      	adds	r3, #56	@ 0x38
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	0019      	movs	r1, r3
 801dcd8:	f7e2 faea 	bl	80002b0 <__aeabi_uidivmod>
 801dcdc:	1e0b      	subs	r3, r1, #0
 801dcde:	d112      	bne.n	801dd06 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801dce0:	1cfb      	adds	r3, r7, #3
 801dce2:	781a      	ldrb	r2, [r3, #0]
 801dce4:	6879      	ldr	r1, [r7, #4]
 801dce6:	0013      	movs	r3, r2
 801dce8:	009b      	lsls	r3, r3, #2
 801dcea:	189b      	adds	r3, r3, r2
 801dcec:	009b      	lsls	r3, r3, #2
 801dcee:	18cb      	adds	r3, r1, r3
 801dcf0:	331c      	adds	r3, #28
 801dcf2:	2200      	movs	r2, #0
 801dcf4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801dcf6:	1cfb      	adds	r3, r7, #3
 801dcf8:	7819      	ldrb	r1, [r3, #0]
 801dcfa:	6878      	ldr	r0, [r7, #4]
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	2200      	movs	r2, #0
 801dd00:	f002 f82f 	bl	801fd62 <USBD_LL_Transmit>
 801dd04:	e004      	b.n	801dd10 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801dd06:	68fa      	ldr	r2, [r7, #12]
 801dd08:	2385      	movs	r3, #133	@ 0x85
 801dd0a:	009b      	lsls	r3, r3, #2
 801dd0c:	2100      	movs	r1, #0
 801dd0e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801dd10:	2300      	movs	r3, #0
 801dd12:	e000      	b.n	801dd16 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801dd14:	2302      	movs	r3, #2
  }
}
 801dd16:	0018      	movs	r0, r3
 801dd18:	46bd      	mov	sp, r7
 801dd1a:	b004      	add	sp, #16
 801dd1c:	bd80      	pop	{r7, pc}

0801dd1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801dd1e:	b580      	push	{r7, lr}
 801dd20:	b084      	sub	sp, #16
 801dd22:	af00      	add	r7, sp, #0
 801dd24:	6078      	str	r0, [r7, #4]
 801dd26:	000a      	movs	r2, r1
 801dd28:	1cfb      	adds	r3, r7, #3
 801dd2a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dd2c:	687a      	ldr	r2, [r7, #4]
 801dd2e:	23ae      	movs	r3, #174	@ 0xae
 801dd30:	009b      	lsls	r3, r3, #2
 801dd32:	58d3      	ldr	r3, [r2, r3]
 801dd34:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801dd36:	1cfb      	adds	r3, r7, #3
 801dd38:	781a      	ldrb	r2, [r3, #0]
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	0011      	movs	r1, r2
 801dd3e:	0018      	movs	r0, r3
 801dd40:	f002 f87d 	bl	801fe3e <USBD_LL_GetRxDataSize>
 801dd44:	0001      	movs	r1, r0
 801dd46:	68fa      	ldr	r2, [r7, #12]
 801dd48:	2383      	movs	r3, #131	@ 0x83
 801dd4a:	009b      	lsls	r3, r3, #2
 801dd4c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801dd4e:	687a      	ldr	r2, [r7, #4]
 801dd50:	23ae      	movs	r3, #174	@ 0xae
 801dd52:	009b      	lsls	r3, r3, #2
 801dd54:	58d3      	ldr	r3, [r2, r3]
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d011      	beq.n	801dd7e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801dd5a:	687a      	ldr	r2, [r7, #4]
 801dd5c:	23af      	movs	r3, #175	@ 0xaf
 801dd5e:	009b      	lsls	r3, r3, #2
 801dd60:	58d3      	ldr	r3, [r2, r3]
 801dd62:	68da      	ldr	r2, [r3, #12]
 801dd64:	68f9      	ldr	r1, [r7, #12]
 801dd66:	2381      	movs	r3, #129	@ 0x81
 801dd68:	009b      	lsls	r3, r3, #2
 801dd6a:	58c8      	ldr	r0, [r1, r3]
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	2183      	movs	r1, #131	@ 0x83
 801dd70:	0089      	lsls	r1, r1, #2
 801dd72:	468c      	mov	ip, r1
 801dd74:	4463      	add	r3, ip
 801dd76:	0019      	movs	r1, r3
 801dd78:	4790      	blx	r2

    return USBD_OK;
 801dd7a:	2300      	movs	r3, #0
 801dd7c:	e000      	b.n	801dd80 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801dd7e:	2302      	movs	r3, #2
  }
}
 801dd80:	0018      	movs	r0, r3
 801dd82:	46bd      	mov	sp, r7
 801dd84:	b004      	add	sp, #16
 801dd86:	bd80      	pop	{r7, pc}

0801dd88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801dd88:	b590      	push	{r4, r7, lr}
 801dd8a:	b085      	sub	sp, #20
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dd90:	687a      	ldr	r2, [r7, #4]
 801dd92:	23ae      	movs	r3, #174	@ 0xae
 801dd94:	009b      	lsls	r3, r3, #2
 801dd96:	58d3      	ldr	r3, [r2, r3]
 801dd98:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801dd9a:	687a      	ldr	r2, [r7, #4]
 801dd9c:	23af      	movs	r3, #175	@ 0xaf
 801dd9e:	009b      	lsls	r3, r3, #2
 801dda0:	58d3      	ldr	r3, [r2, r3]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d018      	beq.n	801ddd8 <USBD_CDC_EP0_RxReady+0x50>
 801dda6:	68fa      	ldr	r2, [r7, #12]
 801dda8:	2380      	movs	r3, #128	@ 0x80
 801ddaa:	009b      	lsls	r3, r3, #2
 801ddac:	5cd3      	ldrb	r3, [r2, r3]
 801ddae:	2bff      	cmp	r3, #255	@ 0xff
 801ddb0:	d012      	beq.n	801ddd8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ddb2:	687a      	ldr	r2, [r7, #4]
 801ddb4:	23af      	movs	r3, #175	@ 0xaf
 801ddb6:	009b      	lsls	r3, r3, #2
 801ddb8:	58d3      	ldr	r3, [r2, r3]
 801ddba:	689b      	ldr	r3, [r3, #8]
 801ddbc:	68f9      	ldr	r1, [r7, #12]
 801ddbe:	2280      	movs	r2, #128	@ 0x80
 801ddc0:	0092      	lsls	r2, r2, #2
 801ddc2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801ddc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801ddc6:	68fa      	ldr	r2, [r7, #12]
 801ddc8:	4c06      	ldr	r4, [pc, #24]	@ (801dde4 <USBD_CDC_EP0_RxReady+0x5c>)
 801ddca:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ddcc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ddce:	68fa      	ldr	r2, [r7, #12]
 801ddd0:	2380      	movs	r3, #128	@ 0x80
 801ddd2:	009b      	lsls	r3, r3, #2
 801ddd4:	21ff      	movs	r1, #255	@ 0xff
 801ddd6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801ddd8:	2300      	movs	r3, #0
}
 801ddda:	0018      	movs	r0, r3
 801dddc:	46bd      	mov	sp, r7
 801ddde:	b005      	add	sp, #20
 801dde0:	bd90      	pop	{r4, r7, pc}
 801dde2:	46c0      	nop			@ (mov r8, r8)
 801dde4:	00000201 	.word	0x00000201

0801dde8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801dde8:	b580      	push	{r7, lr}
 801ddea:	b082      	sub	sp, #8
 801ddec:	af00      	add	r7, sp, #0
 801ddee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	2243      	movs	r2, #67	@ 0x43
 801ddf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ddf6:	4b02      	ldr	r3, [pc, #8]	@ (801de00 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ddf8:	0018      	movs	r0, r3
 801ddfa:	46bd      	mov	sp, r7
 801ddfc:	b002      	add	sp, #8
 801ddfe:	bd80      	pop	{r7, pc}
 801de00:	2000017c 	.word	0x2000017c

0801de04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801de04:	b580      	push	{r7, lr}
 801de06:	b082      	sub	sp, #8
 801de08:	af00      	add	r7, sp, #0
 801de0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	2243      	movs	r2, #67	@ 0x43
 801de10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801de12:	4b02      	ldr	r3, [pc, #8]	@ (801de1c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801de14:	0018      	movs	r0, r3
 801de16:	46bd      	mov	sp, r7
 801de18:	b002      	add	sp, #8
 801de1a:	bd80      	pop	{r7, pc}
 801de1c:	20000138 	.word	0x20000138

0801de20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801de20:	b580      	push	{r7, lr}
 801de22:	b082      	sub	sp, #8
 801de24:	af00      	add	r7, sp, #0
 801de26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	2243      	movs	r2, #67	@ 0x43
 801de2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801de2e:	4b02      	ldr	r3, [pc, #8]	@ (801de38 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801de30:	0018      	movs	r0, r3
 801de32:	46bd      	mov	sp, r7
 801de34:	b002      	add	sp, #8
 801de36:	bd80      	pop	{r7, pc}
 801de38:	200001c0 	.word	0x200001c0

0801de3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801de3c:	b580      	push	{r7, lr}
 801de3e:	b082      	sub	sp, #8
 801de40:	af00      	add	r7, sp, #0
 801de42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	220a      	movs	r2, #10
 801de48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801de4a:	4b02      	ldr	r3, [pc, #8]	@ (801de54 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801de4c:	0018      	movs	r0, r3
 801de4e:	46bd      	mov	sp, r7
 801de50:	b002      	add	sp, #8
 801de52:	bd80      	pop	{r7, pc}
 801de54:	200000f4 	.word	0x200000f4

0801de58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801de58:	b580      	push	{r7, lr}
 801de5a:	b084      	sub	sp, #16
 801de5c:	af00      	add	r7, sp, #0
 801de5e:	6078      	str	r0, [r7, #4]
 801de60:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801de62:	200f      	movs	r0, #15
 801de64:	183b      	adds	r3, r7, r0
 801de66:	2202      	movs	r2, #2
 801de68:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801de6a:	683b      	ldr	r3, [r7, #0]
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d007      	beq.n	801de80 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801de70:	687a      	ldr	r2, [r7, #4]
 801de72:	23af      	movs	r3, #175	@ 0xaf
 801de74:	009b      	lsls	r3, r3, #2
 801de76:	6839      	ldr	r1, [r7, #0]
 801de78:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801de7a:	183b      	adds	r3, r7, r0
 801de7c:	2200      	movs	r2, #0
 801de7e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801de80:	230f      	movs	r3, #15
 801de82:	18fb      	adds	r3, r7, r3
 801de84:	781b      	ldrb	r3, [r3, #0]
}
 801de86:	0018      	movs	r0, r3
 801de88:	46bd      	mov	sp, r7
 801de8a:	b004      	add	sp, #16
 801de8c:	bd80      	pop	{r7, pc}

0801de8e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801de8e:	b580      	push	{r7, lr}
 801de90:	b086      	sub	sp, #24
 801de92:	af00      	add	r7, sp, #0
 801de94:	60f8      	str	r0, [r7, #12]
 801de96:	60b9      	str	r1, [r7, #8]
 801de98:	1dbb      	adds	r3, r7, #6
 801de9a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801de9c:	68fa      	ldr	r2, [r7, #12]
 801de9e:	23ae      	movs	r3, #174	@ 0xae
 801dea0:	009b      	lsls	r3, r3, #2
 801dea2:	58d3      	ldr	r3, [r2, r3]
 801dea4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801dea6:	697a      	ldr	r2, [r7, #20]
 801dea8:	2382      	movs	r3, #130	@ 0x82
 801deaa:	009b      	lsls	r3, r3, #2
 801deac:	68b9      	ldr	r1, [r7, #8]
 801deae:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801deb0:	1dbb      	adds	r3, r7, #6
 801deb2:	8819      	ldrh	r1, [r3, #0]
 801deb4:	697a      	ldr	r2, [r7, #20]
 801deb6:	2384      	movs	r3, #132	@ 0x84
 801deb8:	009b      	lsls	r3, r3, #2
 801deba:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801debc:	2300      	movs	r3, #0
}
 801debe:	0018      	movs	r0, r3
 801dec0:	46bd      	mov	sp, r7
 801dec2:	b006      	add	sp, #24
 801dec4:	bd80      	pop	{r7, pc}

0801dec6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801dec6:	b580      	push	{r7, lr}
 801dec8:	b084      	sub	sp, #16
 801deca:	af00      	add	r7, sp, #0
 801decc:	6078      	str	r0, [r7, #4]
 801dece:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ded0:	687a      	ldr	r2, [r7, #4]
 801ded2:	23ae      	movs	r3, #174	@ 0xae
 801ded4:	009b      	lsls	r3, r3, #2
 801ded6:	58d3      	ldr	r3, [r2, r3]
 801ded8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801deda:	68fa      	ldr	r2, [r7, #12]
 801dedc:	2381      	movs	r3, #129	@ 0x81
 801dede:	009b      	lsls	r3, r3, #2
 801dee0:	6839      	ldr	r1, [r7, #0]
 801dee2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801dee4:	2300      	movs	r3, #0
}
 801dee6:	0018      	movs	r0, r3
 801dee8:	46bd      	mov	sp, r7
 801deea:	b004      	add	sp, #16
 801deec:	bd80      	pop	{r7, pc}

0801deee <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801deee:	b580      	push	{r7, lr}
 801def0:	b084      	sub	sp, #16
 801def2:	af00      	add	r7, sp, #0
 801def4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801def6:	687a      	ldr	r2, [r7, #4]
 801def8:	23ae      	movs	r3, #174	@ 0xae
 801defa:	009b      	lsls	r3, r3, #2
 801defc:	58d3      	ldr	r3, [r2, r3]
 801defe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801df00:	687a      	ldr	r2, [r7, #4]
 801df02:	23ae      	movs	r3, #174	@ 0xae
 801df04:	009b      	lsls	r3, r3, #2
 801df06:	58d3      	ldr	r3, [r2, r3]
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d022      	beq.n	801df52 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801df0c:	68fa      	ldr	r2, [r7, #12]
 801df0e:	2385      	movs	r3, #133	@ 0x85
 801df10:	009b      	lsls	r3, r3, #2
 801df12:	58d3      	ldr	r3, [r2, r3]
 801df14:	2b00      	cmp	r3, #0
 801df16:	d11a      	bne.n	801df4e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801df18:	68fa      	ldr	r2, [r7, #12]
 801df1a:	2385      	movs	r3, #133	@ 0x85
 801df1c:	009b      	lsls	r3, r3, #2
 801df1e:	2101      	movs	r1, #1
 801df20:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801df22:	68fa      	ldr	r2, [r7, #12]
 801df24:	2384      	movs	r3, #132	@ 0x84
 801df26:	009b      	lsls	r3, r3, #2
 801df28:	58d2      	ldr	r2, [r2, r3]
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801df2e:	68fa      	ldr	r2, [r7, #12]
 801df30:	2382      	movs	r3, #130	@ 0x82
 801df32:	009b      	lsls	r3, r3, #2
 801df34:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801df36:	68fa      	ldr	r2, [r7, #12]
 801df38:	2384      	movs	r3, #132	@ 0x84
 801df3a:	009b      	lsls	r3, r3, #2
 801df3c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801df3e:	b29b      	uxth	r3, r3
 801df40:	6878      	ldr	r0, [r7, #4]
 801df42:	000a      	movs	r2, r1
 801df44:	2181      	movs	r1, #129	@ 0x81
 801df46:	f001 ff0c 	bl	801fd62 <USBD_LL_Transmit>

      return USBD_OK;
 801df4a:	2300      	movs	r3, #0
 801df4c:	e002      	b.n	801df54 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801df4e:	2301      	movs	r3, #1
 801df50:	e000      	b.n	801df54 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801df52:	2302      	movs	r3, #2
  }
}
 801df54:	0018      	movs	r0, r3
 801df56:	46bd      	mov	sp, r7
 801df58:	b004      	add	sp, #16
 801df5a:	bd80      	pop	{r7, pc}

0801df5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b084      	sub	sp, #16
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801df64:	687a      	ldr	r2, [r7, #4]
 801df66:	23ae      	movs	r3, #174	@ 0xae
 801df68:	009b      	lsls	r3, r3, #2
 801df6a:	58d3      	ldr	r3, [r2, r3]
 801df6c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801df6e:	687a      	ldr	r2, [r7, #4]
 801df70:	23ae      	movs	r3, #174	@ 0xae
 801df72:	009b      	lsls	r3, r3, #2
 801df74:	58d3      	ldr	r3, [r2, r3]
 801df76:	2b00      	cmp	r3, #0
 801df78:	d019      	beq.n	801dfae <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	7c1b      	ldrb	r3, [r3, #16]
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d10a      	bne.n	801df98 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801df82:	68fa      	ldr	r2, [r7, #12]
 801df84:	2381      	movs	r3, #129	@ 0x81
 801df86:	009b      	lsls	r3, r3, #2
 801df88:	58d2      	ldr	r2, [r2, r3]
 801df8a:	2380      	movs	r3, #128	@ 0x80
 801df8c:	009b      	lsls	r3, r3, #2
 801df8e:	6878      	ldr	r0, [r7, #4]
 801df90:	2101      	movs	r1, #1
 801df92:	f001 ff1d 	bl	801fdd0 <USBD_LL_PrepareReceive>
 801df96:	e008      	b.n	801dfaa <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801df98:	68fa      	ldr	r2, [r7, #12]
 801df9a:	2381      	movs	r3, #129	@ 0x81
 801df9c:	009b      	lsls	r3, r3, #2
 801df9e:	58d2      	ldr	r2, [r2, r3]
 801dfa0:	6878      	ldr	r0, [r7, #4]
 801dfa2:	2340      	movs	r3, #64	@ 0x40
 801dfa4:	2101      	movs	r1, #1
 801dfa6:	f001 ff13 	bl	801fdd0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801dfaa:	2300      	movs	r3, #0
 801dfac:	e000      	b.n	801dfb0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801dfae:	2302      	movs	r3, #2
  }
}
 801dfb0:	0018      	movs	r0, r3
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	b004      	add	sp, #16
 801dfb6:	bd80      	pop	{r7, pc}

0801dfb8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b084      	sub	sp, #16
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	60f8      	str	r0, [r7, #12]
 801dfc0:	60b9      	str	r1, [r7, #8]
 801dfc2:	1dfb      	adds	r3, r7, #7
 801dfc4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801dfc6:	68fb      	ldr	r3, [r7, #12]
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	d101      	bne.n	801dfd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801dfcc:	2302      	movs	r3, #2
 801dfce:	e020      	b.n	801e012 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801dfd0:	68fa      	ldr	r2, [r7, #12]
 801dfd2:	23ad      	movs	r3, #173	@ 0xad
 801dfd4:	009b      	lsls	r3, r3, #2
 801dfd6:	58d3      	ldr	r3, [r2, r3]
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	d004      	beq.n	801dfe6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801dfdc:	68fa      	ldr	r2, [r7, #12]
 801dfde:	23ad      	movs	r3, #173	@ 0xad
 801dfe0:	009b      	lsls	r3, r3, #2
 801dfe2:	2100      	movs	r1, #0
 801dfe4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801dfe6:	68bb      	ldr	r3, [r7, #8]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d004      	beq.n	801dff6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801dfec:	68fa      	ldr	r2, [r7, #12]
 801dfee:	23ac      	movs	r3, #172	@ 0xac
 801dff0:	009b      	lsls	r3, r3, #2
 801dff2:	68b9      	ldr	r1, [r7, #8]
 801dff4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801dff6:	68fa      	ldr	r2, [r7, #12]
 801dff8:	23a7      	movs	r3, #167	@ 0xa7
 801dffa:	009b      	lsls	r3, r3, #2
 801dffc:	2101      	movs	r1, #1
 801dffe:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	1dfa      	adds	r2, r7, #7
 801e004:	7812      	ldrb	r2, [r2, #0]
 801e006:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801e008:	68fb      	ldr	r3, [r7, #12]
 801e00a:	0018      	movs	r0, r3
 801e00c:	f001 fd0c 	bl	801fa28 <USBD_LL_Init>

  return USBD_OK;
 801e010:	2300      	movs	r3, #0
}
 801e012:	0018      	movs	r0, r3
 801e014:	46bd      	mov	sp, r7
 801e016:	b004      	add	sp, #16
 801e018:	bd80      	pop	{r7, pc}

0801e01a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801e01a:	b580      	push	{r7, lr}
 801e01c:	b084      	sub	sp, #16
 801e01e:	af00      	add	r7, sp, #0
 801e020:	6078      	str	r0, [r7, #4]
 801e022:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801e024:	200f      	movs	r0, #15
 801e026:	183b      	adds	r3, r7, r0
 801e028:	2200      	movs	r2, #0
 801e02a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801e02c:	683b      	ldr	r3, [r7, #0]
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d008      	beq.n	801e044 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801e032:	687a      	ldr	r2, [r7, #4]
 801e034:	23ad      	movs	r3, #173	@ 0xad
 801e036:	009b      	lsls	r3, r3, #2
 801e038:	6839      	ldr	r1, [r7, #0]
 801e03a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801e03c:	183b      	adds	r3, r7, r0
 801e03e:	2200      	movs	r2, #0
 801e040:	701a      	strb	r2, [r3, #0]
 801e042:	e003      	b.n	801e04c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801e044:	230f      	movs	r3, #15
 801e046:	18fb      	adds	r3, r7, r3
 801e048:	2202      	movs	r2, #2
 801e04a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801e04c:	230f      	movs	r3, #15
 801e04e:	18fb      	adds	r3, r7, r3
 801e050:	781b      	ldrb	r3, [r3, #0]
}
 801e052:	0018      	movs	r0, r3
 801e054:	46bd      	mov	sp, r7
 801e056:	b004      	add	sp, #16
 801e058:	bd80      	pop	{r7, pc}

0801e05a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801e05a:	b580      	push	{r7, lr}
 801e05c:	b082      	sub	sp, #8
 801e05e:	af00      	add	r7, sp, #0
 801e060:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	0018      	movs	r0, r3
 801e066:	f001 fd43 	bl	801faf0 <USBD_LL_Start>

  return USBD_OK;
 801e06a:	2300      	movs	r3, #0
}
 801e06c:	0018      	movs	r0, r3
 801e06e:	46bd      	mov	sp, r7
 801e070:	b002      	add	sp, #8
 801e072:	bd80      	pop	{r7, pc}

0801e074 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801e074:	b580      	push	{r7, lr}
 801e076:	b082      	sub	sp, #8
 801e078:	af00      	add	r7, sp, #0
 801e07a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801e07c:	2300      	movs	r3, #0
}
 801e07e:	0018      	movs	r0, r3
 801e080:	46bd      	mov	sp, r7
 801e082:	b002      	add	sp, #8
 801e084:	bd80      	pop	{r7, pc}

0801e086 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801e086:	b590      	push	{r4, r7, lr}
 801e088:	b085      	sub	sp, #20
 801e08a:	af00      	add	r7, sp, #0
 801e08c:	6078      	str	r0, [r7, #4]
 801e08e:	000a      	movs	r2, r1
 801e090:	1cfb      	adds	r3, r7, #3
 801e092:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801e094:	240f      	movs	r4, #15
 801e096:	193b      	adds	r3, r7, r4
 801e098:	2202      	movs	r2, #2
 801e09a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801e09c:	687a      	ldr	r2, [r7, #4]
 801e09e:	23ad      	movs	r3, #173	@ 0xad
 801e0a0:	009b      	lsls	r3, r3, #2
 801e0a2:	58d3      	ldr	r3, [r2, r3]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d00e      	beq.n	801e0c6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801e0a8:	687a      	ldr	r2, [r7, #4]
 801e0aa:	23ad      	movs	r3, #173	@ 0xad
 801e0ac:	009b      	lsls	r3, r3, #2
 801e0ae:	58d3      	ldr	r3, [r2, r3]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	1cfa      	adds	r2, r7, #3
 801e0b4:	7811      	ldrb	r1, [r2, #0]
 801e0b6:	687a      	ldr	r2, [r7, #4]
 801e0b8:	0010      	movs	r0, r2
 801e0ba:	4798      	blx	r3
 801e0bc:	1e03      	subs	r3, r0, #0
 801e0be:	d102      	bne.n	801e0c6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801e0c0:	193b      	adds	r3, r7, r4
 801e0c2:	2200      	movs	r2, #0
 801e0c4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801e0c6:	230f      	movs	r3, #15
 801e0c8:	18fb      	adds	r3, r7, r3
 801e0ca:	781b      	ldrb	r3, [r3, #0]
}
 801e0cc:	0018      	movs	r0, r3
 801e0ce:	46bd      	mov	sp, r7
 801e0d0:	b005      	add	sp, #20
 801e0d2:	bd90      	pop	{r4, r7, pc}

0801e0d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801e0d4:	b580      	push	{r7, lr}
 801e0d6:	b082      	sub	sp, #8
 801e0d8:	af00      	add	r7, sp, #0
 801e0da:	6078      	str	r0, [r7, #4]
 801e0dc:	000a      	movs	r2, r1
 801e0de:	1cfb      	adds	r3, r7, #3
 801e0e0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801e0e2:	687a      	ldr	r2, [r7, #4]
 801e0e4:	23ad      	movs	r3, #173	@ 0xad
 801e0e6:	009b      	lsls	r3, r3, #2
 801e0e8:	58d3      	ldr	r3, [r2, r3]
 801e0ea:	685b      	ldr	r3, [r3, #4]
 801e0ec:	1cfa      	adds	r2, r7, #3
 801e0ee:	7811      	ldrb	r1, [r2, #0]
 801e0f0:	687a      	ldr	r2, [r7, #4]
 801e0f2:	0010      	movs	r0, r2
 801e0f4:	4798      	blx	r3

  return USBD_OK;
 801e0f6:	2300      	movs	r3, #0
}
 801e0f8:	0018      	movs	r0, r3
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	b002      	add	sp, #8
 801e0fe:	bd80      	pop	{r7, pc}

0801e100 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801e100:	b580      	push	{r7, lr}
 801e102:	b082      	sub	sp, #8
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
 801e108:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	22aa      	movs	r2, #170	@ 0xaa
 801e10e:	0092      	lsls	r2, r2, #2
 801e110:	4694      	mov	ip, r2
 801e112:	4463      	add	r3, ip
 801e114:	683a      	ldr	r2, [r7, #0]
 801e116:	0011      	movs	r1, r2
 801e118:	0018      	movs	r0, r3
 801e11a:	f001 f810 	bl	801f13e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801e11e:	687a      	ldr	r2, [r7, #4]
 801e120:	23a5      	movs	r3, #165	@ 0xa5
 801e122:	009b      	lsls	r3, r3, #2
 801e124:	2101      	movs	r1, #1
 801e126:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	4a23      	ldr	r2, [pc, #140]	@ (801e1b8 <USBD_LL_SetupStage+0xb8>)
 801e12c:	5a9b      	ldrh	r3, [r3, r2]
 801e12e:	0019      	movs	r1, r3
 801e130:	687a      	ldr	r2, [r7, #4]
 801e132:	23a6      	movs	r3, #166	@ 0xa6
 801e134:	009b      	lsls	r3, r3, #2
 801e136:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801e138:	687a      	ldr	r2, [r7, #4]
 801e13a:	23aa      	movs	r3, #170	@ 0xaa
 801e13c:	009b      	lsls	r3, r3, #2
 801e13e:	5cd3      	ldrb	r3, [r2, r3]
 801e140:	001a      	movs	r2, r3
 801e142:	231f      	movs	r3, #31
 801e144:	4013      	ands	r3, r2
 801e146:	2b02      	cmp	r3, #2
 801e148:	d019      	beq.n	801e17e <USBD_LL_SetupStage+0x7e>
 801e14a:	d822      	bhi.n	801e192 <USBD_LL_SetupStage+0x92>
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d002      	beq.n	801e156 <USBD_LL_SetupStage+0x56>
 801e150:	2b01      	cmp	r3, #1
 801e152:	d00a      	beq.n	801e16a <USBD_LL_SetupStage+0x6a>
 801e154:	e01d      	b.n	801e192 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	22aa      	movs	r2, #170	@ 0xaa
 801e15a:	0092      	lsls	r2, r2, #2
 801e15c:	189a      	adds	r2, r3, r2
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	0011      	movs	r1, r2
 801e162:	0018      	movs	r0, r3
 801e164:	f000 fa10 	bl	801e588 <USBD_StdDevReq>
      break;
 801e168:	e020      	b.n	801e1ac <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	22aa      	movs	r2, #170	@ 0xaa
 801e16e:	0092      	lsls	r2, r2, #2
 801e170:	189a      	adds	r2, r3, r2
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	0011      	movs	r1, r2
 801e176:	0018      	movs	r0, r3
 801e178:	f000 fa78 	bl	801e66c <USBD_StdItfReq>
      break;
 801e17c:	e016      	b.n	801e1ac <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	22aa      	movs	r2, #170	@ 0xaa
 801e182:	0092      	lsls	r2, r2, #2
 801e184:	189a      	adds	r2, r3, r2
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	0011      	movs	r1, r2
 801e18a:	0018      	movs	r0, r3
 801e18c:	f000 fac5 	bl	801e71a <USBD_StdEPReq>
      break;
 801e190:	e00c      	b.n	801e1ac <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801e192:	687a      	ldr	r2, [r7, #4]
 801e194:	23aa      	movs	r3, #170	@ 0xaa
 801e196:	009b      	lsls	r3, r3, #2
 801e198:	5cd3      	ldrb	r3, [r2, r3]
 801e19a:	227f      	movs	r2, #127	@ 0x7f
 801e19c:	4393      	bics	r3, r2
 801e19e:	b2da      	uxtb	r2, r3
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	0011      	movs	r1, r2
 801e1a4:	0018      	movs	r0, r3
 801e1a6:	f001 fd2a 	bl	801fbfe <USBD_LL_StallEP>
      break;
 801e1aa:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801e1ac:	2300      	movs	r3, #0
}
 801e1ae:	0018      	movs	r0, r3
 801e1b0:	46bd      	mov	sp, r7
 801e1b2:	b002      	add	sp, #8
 801e1b4:	bd80      	pop	{r7, pc}
 801e1b6:	46c0      	nop			@ (mov r8, r8)
 801e1b8:	000002ae 	.word	0x000002ae

0801e1bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801e1bc:	b580      	push	{r7, lr}
 801e1be:	b086      	sub	sp, #24
 801e1c0:	af00      	add	r7, sp, #0
 801e1c2:	60f8      	str	r0, [r7, #12]
 801e1c4:	607a      	str	r2, [r7, #4]
 801e1c6:	200b      	movs	r0, #11
 801e1c8:	183b      	adds	r3, r7, r0
 801e1ca:	1c0a      	adds	r2, r1, #0
 801e1cc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e1ce:	183b      	adds	r3, r7, r0
 801e1d0:	781b      	ldrb	r3, [r3, #0]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d154      	bne.n	801e280 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	3355      	adds	r3, #85	@ 0x55
 801e1da:	33ff      	adds	r3, #255	@ 0xff
 801e1dc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801e1de:	68fa      	ldr	r2, [r7, #12]
 801e1e0:	23a5      	movs	r3, #165	@ 0xa5
 801e1e2:	009b      	lsls	r3, r3, #2
 801e1e4:	58d3      	ldr	r3, [r2, r3]
 801e1e6:	2b03      	cmp	r3, #3
 801e1e8:	d139      	bne.n	801e25e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801e1ea:	697b      	ldr	r3, [r7, #20]
 801e1ec:	68da      	ldr	r2, [r3, #12]
 801e1ee:	697b      	ldr	r3, [r7, #20]
 801e1f0:	691b      	ldr	r3, [r3, #16]
 801e1f2:	429a      	cmp	r2, r3
 801e1f4:	d919      	bls.n	801e22a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801e1f6:	697b      	ldr	r3, [r7, #20]
 801e1f8:	68da      	ldr	r2, [r3, #12]
 801e1fa:	697b      	ldr	r3, [r7, #20]
 801e1fc:	691b      	ldr	r3, [r3, #16]
 801e1fe:	1ad2      	subs	r2, r2, r3
 801e200:	697b      	ldr	r3, [r7, #20]
 801e202:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e204:	697b      	ldr	r3, [r7, #20]
 801e206:	68da      	ldr	r2, [r3, #12]
 801e208:	697b      	ldr	r3, [r7, #20]
 801e20a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801e20c:	429a      	cmp	r2, r3
 801e20e:	d203      	bcs.n	801e218 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e210:	697b      	ldr	r3, [r7, #20]
 801e212:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801e214:	b29b      	uxth	r3, r3
 801e216:	e002      	b.n	801e21e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e218:	697b      	ldr	r3, [r7, #20]
 801e21a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801e21c:	b29b      	uxth	r3, r3
 801e21e:	6879      	ldr	r1, [r7, #4]
 801e220:	68f8      	ldr	r0, [r7, #12]
 801e222:	001a      	movs	r2, r3
 801e224:	f001 f898 	bl	801f358 <USBD_CtlContinueRx>
 801e228:	e045      	b.n	801e2b6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e22a:	68fa      	ldr	r2, [r7, #12]
 801e22c:	23ad      	movs	r3, #173	@ 0xad
 801e22e:	009b      	lsls	r3, r3, #2
 801e230:	58d3      	ldr	r3, [r2, r3]
 801e232:	691b      	ldr	r3, [r3, #16]
 801e234:	2b00      	cmp	r3, #0
 801e236:	d00d      	beq.n	801e254 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e238:	68fa      	ldr	r2, [r7, #12]
 801e23a:	23a7      	movs	r3, #167	@ 0xa7
 801e23c:	009b      	lsls	r3, r3, #2
 801e23e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e240:	2b03      	cmp	r3, #3
 801e242:	d107      	bne.n	801e254 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801e244:	68fa      	ldr	r2, [r7, #12]
 801e246:	23ad      	movs	r3, #173	@ 0xad
 801e248:	009b      	lsls	r3, r3, #2
 801e24a:	58d3      	ldr	r3, [r2, r3]
 801e24c:	691b      	ldr	r3, [r3, #16]
 801e24e:	68fa      	ldr	r2, [r7, #12]
 801e250:	0010      	movs	r0, r2
 801e252:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801e254:	68fb      	ldr	r3, [r7, #12]
 801e256:	0018      	movs	r0, r3
 801e258:	f001 f891 	bl	801f37e <USBD_CtlSendStatus>
 801e25c:	e02b      	b.n	801e2b6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801e25e:	68fa      	ldr	r2, [r7, #12]
 801e260:	23a5      	movs	r3, #165	@ 0xa5
 801e262:	009b      	lsls	r3, r3, #2
 801e264:	58d3      	ldr	r3, [r2, r3]
 801e266:	2b05      	cmp	r3, #5
 801e268:	d125      	bne.n	801e2b6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801e26a:	68fa      	ldr	r2, [r7, #12]
 801e26c:	23a5      	movs	r3, #165	@ 0xa5
 801e26e:	009b      	lsls	r3, r3, #2
 801e270:	2100      	movs	r1, #0
 801e272:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	2100      	movs	r1, #0
 801e278:	0018      	movs	r0, r3
 801e27a:	f001 fcc0 	bl	801fbfe <USBD_LL_StallEP>
 801e27e:	e01a      	b.n	801e2b6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801e280:	68fa      	ldr	r2, [r7, #12]
 801e282:	23ad      	movs	r3, #173	@ 0xad
 801e284:	009b      	lsls	r3, r3, #2
 801e286:	58d3      	ldr	r3, [r2, r3]
 801e288:	699b      	ldr	r3, [r3, #24]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d011      	beq.n	801e2b2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e28e:	68fa      	ldr	r2, [r7, #12]
 801e290:	23a7      	movs	r3, #167	@ 0xa7
 801e292:	009b      	lsls	r3, r3, #2
 801e294:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801e296:	2b03      	cmp	r3, #3
 801e298:	d10b      	bne.n	801e2b2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801e29a:	68fa      	ldr	r2, [r7, #12]
 801e29c:	23ad      	movs	r3, #173	@ 0xad
 801e29e:	009b      	lsls	r3, r3, #2
 801e2a0:	58d3      	ldr	r3, [r2, r3]
 801e2a2:	699b      	ldr	r3, [r3, #24]
 801e2a4:	220b      	movs	r2, #11
 801e2a6:	18ba      	adds	r2, r7, r2
 801e2a8:	7811      	ldrb	r1, [r2, #0]
 801e2aa:	68fa      	ldr	r2, [r7, #12]
 801e2ac:	0010      	movs	r0, r2
 801e2ae:	4798      	blx	r3
 801e2b0:	e001      	b.n	801e2b6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801e2b2:	2302      	movs	r3, #2
 801e2b4:	e000      	b.n	801e2b8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801e2b6:	2300      	movs	r3, #0
}
 801e2b8:	0018      	movs	r0, r3
 801e2ba:	46bd      	mov	sp, r7
 801e2bc:	b006      	add	sp, #24
 801e2be:	bd80      	pop	{r7, pc}

0801e2c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	b086      	sub	sp, #24
 801e2c4:	af00      	add	r7, sp, #0
 801e2c6:	60f8      	str	r0, [r7, #12]
 801e2c8:	607a      	str	r2, [r7, #4]
 801e2ca:	200b      	movs	r0, #11
 801e2cc:	183b      	adds	r3, r7, r0
 801e2ce:	1c0a      	adds	r2, r1, #0
 801e2d0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e2d2:	183b      	adds	r3, r7, r0
 801e2d4:	781b      	ldrb	r3, [r3, #0]
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d000      	beq.n	801e2dc <USBD_LL_DataInStage+0x1c>
 801e2da:	e08e      	b.n	801e3fa <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801e2dc:	68fb      	ldr	r3, [r7, #12]
 801e2de:	3314      	adds	r3, #20
 801e2e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801e2e2:	68fa      	ldr	r2, [r7, #12]
 801e2e4:	23a5      	movs	r3, #165	@ 0xa5
 801e2e6:	009b      	lsls	r3, r3, #2
 801e2e8:	58d3      	ldr	r3, [r2, r3]
 801e2ea:	2b02      	cmp	r3, #2
 801e2ec:	d164      	bne.n	801e3b8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801e2ee:	697b      	ldr	r3, [r7, #20]
 801e2f0:	68da      	ldr	r2, [r3, #12]
 801e2f2:	697b      	ldr	r3, [r7, #20]
 801e2f4:	691b      	ldr	r3, [r3, #16]
 801e2f6:	429a      	cmp	r2, r3
 801e2f8:	d915      	bls.n	801e326 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801e2fa:	697b      	ldr	r3, [r7, #20]
 801e2fc:	68da      	ldr	r2, [r3, #12]
 801e2fe:	697b      	ldr	r3, [r7, #20]
 801e300:	691b      	ldr	r3, [r3, #16]
 801e302:	1ad2      	subs	r2, r2, r3
 801e304:	697b      	ldr	r3, [r7, #20]
 801e306:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801e308:	697b      	ldr	r3, [r7, #20]
 801e30a:	68db      	ldr	r3, [r3, #12]
 801e30c:	b29a      	uxth	r2, r3
 801e30e:	6879      	ldr	r1, [r7, #4]
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	0018      	movs	r0, r3
 801e314:	f000 ffe9 	bl	801f2ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e318:	68f8      	ldr	r0, [r7, #12]
 801e31a:	2300      	movs	r3, #0
 801e31c:	2200      	movs	r2, #0
 801e31e:	2100      	movs	r1, #0
 801e320:	f001 fd56 	bl	801fdd0 <USBD_LL_PrepareReceive>
 801e324:	e059      	b.n	801e3da <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e326:	697b      	ldr	r3, [r7, #20]
 801e328:	689a      	ldr	r2, [r3, #8]
 801e32a:	697b      	ldr	r3, [r7, #20]
 801e32c:	691b      	ldr	r3, [r3, #16]
 801e32e:	0019      	movs	r1, r3
 801e330:	0010      	movs	r0, r2
 801e332:	f7e1 ffbd 	bl	80002b0 <__aeabi_uidivmod>
 801e336:	1e0b      	subs	r3, r1, #0
 801e338:	d11f      	bne.n	801e37a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801e33a:	697b      	ldr	r3, [r7, #20]
 801e33c:	689a      	ldr	r2, [r3, #8]
 801e33e:	697b      	ldr	r3, [r7, #20]
 801e340:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e342:	429a      	cmp	r2, r3
 801e344:	d319      	bcc.n	801e37a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801e346:	697b      	ldr	r3, [r7, #20]
 801e348:	689a      	ldr	r2, [r3, #8]
 801e34a:	68f9      	ldr	r1, [r7, #12]
 801e34c:	23a6      	movs	r3, #166	@ 0xa6
 801e34e:	009b      	lsls	r3, r3, #2
 801e350:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801e352:	429a      	cmp	r2, r3
 801e354:	d211      	bcs.n	801e37a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801e356:	68fb      	ldr	r3, [r7, #12]
 801e358:	2200      	movs	r2, #0
 801e35a:	2100      	movs	r1, #0
 801e35c:	0018      	movs	r0, r3
 801e35e:	f000 ffc4 	bl	801f2ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801e362:	68fa      	ldr	r2, [r7, #12]
 801e364:	23a6      	movs	r3, #166	@ 0xa6
 801e366:	009b      	lsls	r3, r3, #2
 801e368:	2100      	movs	r1, #0
 801e36a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e36c:	68f8      	ldr	r0, [r7, #12]
 801e36e:	2300      	movs	r3, #0
 801e370:	2200      	movs	r2, #0
 801e372:	2100      	movs	r1, #0
 801e374:	f001 fd2c 	bl	801fdd0 <USBD_LL_PrepareReceive>
 801e378:	e02f      	b.n	801e3da <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e37a:	68fa      	ldr	r2, [r7, #12]
 801e37c:	23ad      	movs	r3, #173	@ 0xad
 801e37e:	009b      	lsls	r3, r3, #2
 801e380:	58d3      	ldr	r3, [r2, r3]
 801e382:	68db      	ldr	r3, [r3, #12]
 801e384:	2b00      	cmp	r3, #0
 801e386:	d00d      	beq.n	801e3a4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e388:	68fa      	ldr	r2, [r7, #12]
 801e38a:	23a7      	movs	r3, #167	@ 0xa7
 801e38c:	009b      	lsls	r3, r3, #2
 801e38e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e390:	2b03      	cmp	r3, #3
 801e392:	d107      	bne.n	801e3a4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801e394:	68fa      	ldr	r2, [r7, #12]
 801e396:	23ad      	movs	r3, #173	@ 0xad
 801e398:	009b      	lsls	r3, r3, #2
 801e39a:	58d3      	ldr	r3, [r2, r3]
 801e39c:	68db      	ldr	r3, [r3, #12]
 801e39e:	68fa      	ldr	r2, [r7, #12]
 801e3a0:	0010      	movs	r0, r2
 801e3a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	2180      	movs	r1, #128	@ 0x80
 801e3a8:	0018      	movs	r0, r3
 801e3aa:	f001 fc28 	bl	801fbfe <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801e3ae:	68fb      	ldr	r3, [r7, #12]
 801e3b0:	0018      	movs	r0, r3
 801e3b2:	f000 fff8 	bl	801f3a6 <USBD_CtlReceiveStatus>
 801e3b6:	e010      	b.n	801e3da <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e3b8:	68fa      	ldr	r2, [r7, #12]
 801e3ba:	23a5      	movs	r3, #165	@ 0xa5
 801e3bc:	009b      	lsls	r3, r3, #2
 801e3be:	58d3      	ldr	r3, [r2, r3]
 801e3c0:	2b04      	cmp	r3, #4
 801e3c2:	d005      	beq.n	801e3d0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801e3c4:	68fa      	ldr	r2, [r7, #12]
 801e3c6:	23a5      	movs	r3, #165	@ 0xa5
 801e3c8:	009b      	lsls	r3, r3, #2
 801e3ca:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d104      	bne.n	801e3da <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	2180      	movs	r1, #128	@ 0x80
 801e3d4:	0018      	movs	r0, r3
 801e3d6:	f001 fc12 	bl	801fbfe <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801e3da:	68fa      	ldr	r2, [r7, #12]
 801e3dc:	23a8      	movs	r3, #168	@ 0xa8
 801e3de:	009b      	lsls	r3, r3, #2
 801e3e0:	5cd3      	ldrb	r3, [r2, r3]
 801e3e2:	2b01      	cmp	r3, #1
 801e3e4:	d124      	bne.n	801e430 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801e3e6:	68fb      	ldr	r3, [r7, #12]
 801e3e8:	0018      	movs	r0, r3
 801e3ea:	f7ff fe43 	bl	801e074 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801e3ee:	68fa      	ldr	r2, [r7, #12]
 801e3f0:	23a8      	movs	r3, #168	@ 0xa8
 801e3f2:	009b      	lsls	r3, r3, #2
 801e3f4:	2100      	movs	r1, #0
 801e3f6:	54d1      	strb	r1, [r2, r3]
 801e3f8:	e01a      	b.n	801e430 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801e3fa:	68fa      	ldr	r2, [r7, #12]
 801e3fc:	23ad      	movs	r3, #173	@ 0xad
 801e3fe:	009b      	lsls	r3, r3, #2
 801e400:	58d3      	ldr	r3, [r2, r3]
 801e402:	695b      	ldr	r3, [r3, #20]
 801e404:	2b00      	cmp	r3, #0
 801e406:	d011      	beq.n	801e42c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e408:	68fa      	ldr	r2, [r7, #12]
 801e40a:	23a7      	movs	r3, #167	@ 0xa7
 801e40c:	009b      	lsls	r3, r3, #2
 801e40e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801e410:	2b03      	cmp	r3, #3
 801e412:	d10b      	bne.n	801e42c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801e414:	68fa      	ldr	r2, [r7, #12]
 801e416:	23ad      	movs	r3, #173	@ 0xad
 801e418:	009b      	lsls	r3, r3, #2
 801e41a:	58d3      	ldr	r3, [r2, r3]
 801e41c:	695b      	ldr	r3, [r3, #20]
 801e41e:	220b      	movs	r2, #11
 801e420:	18ba      	adds	r2, r7, r2
 801e422:	7811      	ldrb	r1, [r2, #0]
 801e424:	68fa      	ldr	r2, [r7, #12]
 801e426:	0010      	movs	r0, r2
 801e428:	4798      	blx	r3
 801e42a:	e001      	b.n	801e430 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801e42c:	2302      	movs	r3, #2
 801e42e:	e000      	b.n	801e432 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801e430:	2300      	movs	r3, #0
}
 801e432:	0018      	movs	r0, r3
 801e434:	46bd      	mov	sp, r7
 801e436:	b006      	add	sp, #24
 801e438:	bd80      	pop	{r7, pc}

0801e43a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801e43a:	b580      	push	{r7, lr}
 801e43c:	b082      	sub	sp, #8
 801e43e:	af00      	add	r7, sp, #0
 801e440:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e442:	6878      	ldr	r0, [r7, #4]
 801e444:	2340      	movs	r3, #64	@ 0x40
 801e446:	2200      	movs	r2, #0
 801e448:	2100      	movs	r1, #0
 801e44a:	f001 fb76 	bl	801fb3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801e44e:	687a      	ldr	r2, [r7, #4]
 801e450:	23ac      	movs	r3, #172	@ 0xac
 801e452:	005b      	lsls	r3, r3, #1
 801e454:	2101      	movs	r1, #1
 801e456:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801e458:	687a      	ldr	r2, [r7, #4]
 801e45a:	23b2      	movs	r3, #178	@ 0xb2
 801e45c:	005b      	lsls	r3, r3, #1
 801e45e:	2140      	movs	r1, #64	@ 0x40
 801e460:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e462:	6878      	ldr	r0, [r7, #4]
 801e464:	2340      	movs	r3, #64	@ 0x40
 801e466:	2200      	movs	r2, #0
 801e468:	2180      	movs	r1, #128	@ 0x80
 801e46a:	f001 fb66 	bl	801fb3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	2201      	movs	r2, #1
 801e472:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	2240      	movs	r2, #64	@ 0x40
 801e478:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e47a:	687a      	ldr	r2, [r7, #4]
 801e47c:	23a7      	movs	r3, #167	@ 0xa7
 801e47e:	009b      	lsls	r3, r3, #2
 801e480:	2101      	movs	r1, #1
 801e482:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801e484:	687a      	ldr	r2, [r7, #4]
 801e486:	23a5      	movs	r3, #165	@ 0xa5
 801e488:	009b      	lsls	r3, r3, #2
 801e48a:	2100      	movs	r1, #0
 801e48c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	2200      	movs	r2, #0
 801e492:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801e494:	687a      	ldr	r2, [r7, #4]
 801e496:	23a9      	movs	r3, #169	@ 0xa9
 801e498:	009b      	lsls	r3, r3, #2
 801e49a:	2100      	movs	r1, #0
 801e49c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801e49e:	687a      	ldr	r2, [r7, #4]
 801e4a0:	23ae      	movs	r3, #174	@ 0xae
 801e4a2:	009b      	lsls	r3, r3, #2
 801e4a4:	58d3      	ldr	r3, [r2, r3]
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d00a      	beq.n	801e4c0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801e4aa:	687a      	ldr	r2, [r7, #4]
 801e4ac:	23ad      	movs	r3, #173	@ 0xad
 801e4ae:	009b      	lsls	r3, r3, #2
 801e4b0:	58d3      	ldr	r3, [r2, r3]
 801e4b2:	685a      	ldr	r2, [r3, #4]
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	685b      	ldr	r3, [r3, #4]
 801e4b8:	b2d9      	uxtb	r1, r3
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	0018      	movs	r0, r3
 801e4be:	4790      	blx	r2
  }

  return USBD_OK;
 801e4c0:	2300      	movs	r3, #0
}
 801e4c2:	0018      	movs	r0, r3
 801e4c4:	46bd      	mov	sp, r7
 801e4c6:	b002      	add	sp, #8
 801e4c8:	bd80      	pop	{r7, pc}

0801e4ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801e4ca:	b580      	push	{r7, lr}
 801e4cc:	b082      	sub	sp, #8
 801e4ce:	af00      	add	r7, sp, #0
 801e4d0:	6078      	str	r0, [r7, #4]
 801e4d2:	000a      	movs	r2, r1
 801e4d4:	1cfb      	adds	r3, r7, #3
 801e4d6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	1cfa      	adds	r2, r7, #3
 801e4dc:	7812      	ldrb	r2, [r2, #0]
 801e4de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801e4e0:	2300      	movs	r3, #0
}
 801e4e2:	0018      	movs	r0, r3
 801e4e4:	46bd      	mov	sp, r7
 801e4e6:	b002      	add	sp, #8
 801e4e8:	bd80      	pop	{r7, pc}
	...

0801e4ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801e4ec:	b580      	push	{r7, lr}
 801e4ee:	b082      	sub	sp, #8
 801e4f0:	af00      	add	r7, sp, #0
 801e4f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801e4f4:	687a      	ldr	r2, [r7, #4]
 801e4f6:	23a7      	movs	r3, #167	@ 0xa7
 801e4f8:	009b      	lsls	r3, r3, #2
 801e4fa:	5cd1      	ldrb	r1, [r2, r3]
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	4a06      	ldr	r2, [pc, #24]	@ (801e518 <USBD_LL_Suspend+0x2c>)
 801e500:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801e502:	687a      	ldr	r2, [r7, #4]
 801e504:	23a7      	movs	r3, #167	@ 0xa7
 801e506:	009b      	lsls	r3, r3, #2
 801e508:	2104      	movs	r1, #4
 801e50a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801e50c:	2300      	movs	r3, #0
}
 801e50e:	0018      	movs	r0, r3
 801e510:	46bd      	mov	sp, r7
 801e512:	b002      	add	sp, #8
 801e514:	bd80      	pop	{r7, pc}
 801e516:	46c0      	nop			@ (mov r8, r8)
 801e518:	0000029d 	.word	0x0000029d

0801e51c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801e51c:	b580      	push	{r7, lr}
 801e51e:	b082      	sub	sp, #8
 801e520:	af00      	add	r7, sp, #0
 801e522:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801e524:	687a      	ldr	r2, [r7, #4]
 801e526:	23a7      	movs	r3, #167	@ 0xa7
 801e528:	009b      	lsls	r3, r3, #2
 801e52a:	5cd3      	ldrb	r3, [r2, r3]
 801e52c:	2b04      	cmp	r3, #4
 801e52e:	d106      	bne.n	801e53e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	4a05      	ldr	r2, [pc, #20]	@ (801e548 <USBD_LL_Resume+0x2c>)
 801e534:	5c99      	ldrb	r1, [r3, r2]
 801e536:	687a      	ldr	r2, [r7, #4]
 801e538:	23a7      	movs	r3, #167	@ 0xa7
 801e53a:	009b      	lsls	r3, r3, #2
 801e53c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801e53e:	2300      	movs	r3, #0
}
 801e540:	0018      	movs	r0, r3
 801e542:	46bd      	mov	sp, r7
 801e544:	b002      	add	sp, #8
 801e546:	bd80      	pop	{r7, pc}
 801e548:	0000029d 	.word	0x0000029d

0801e54c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801e54c:	b580      	push	{r7, lr}
 801e54e:	b082      	sub	sp, #8
 801e550:	af00      	add	r7, sp, #0
 801e552:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e554:	687a      	ldr	r2, [r7, #4]
 801e556:	23a7      	movs	r3, #167	@ 0xa7
 801e558:	009b      	lsls	r3, r3, #2
 801e55a:	5cd3      	ldrb	r3, [r2, r3]
 801e55c:	2b03      	cmp	r3, #3
 801e55e:	d10e      	bne.n	801e57e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801e560:	687a      	ldr	r2, [r7, #4]
 801e562:	23ad      	movs	r3, #173	@ 0xad
 801e564:	009b      	lsls	r3, r3, #2
 801e566:	58d3      	ldr	r3, [r2, r3]
 801e568:	69db      	ldr	r3, [r3, #28]
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d007      	beq.n	801e57e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801e56e:	687a      	ldr	r2, [r7, #4]
 801e570:	23ad      	movs	r3, #173	@ 0xad
 801e572:	009b      	lsls	r3, r3, #2
 801e574:	58d3      	ldr	r3, [r2, r3]
 801e576:	69db      	ldr	r3, [r3, #28]
 801e578:	687a      	ldr	r2, [r7, #4]
 801e57a:	0010      	movs	r0, r2
 801e57c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801e57e:	2300      	movs	r3, #0
}
 801e580:	0018      	movs	r0, r3
 801e582:	46bd      	mov	sp, r7
 801e584:	b002      	add	sp, #8
 801e586:	bd80      	pop	{r7, pc}

0801e588 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801e588:	b580      	push	{r7, lr}
 801e58a:	b084      	sub	sp, #16
 801e58c:	af00      	add	r7, sp, #0
 801e58e:	6078      	str	r0, [r7, #4]
 801e590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e592:	230f      	movs	r3, #15
 801e594:	18fb      	adds	r3, r7, r3
 801e596:	2200      	movs	r2, #0
 801e598:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e59a:	683b      	ldr	r3, [r7, #0]
 801e59c:	781b      	ldrb	r3, [r3, #0]
 801e59e:	001a      	movs	r2, r3
 801e5a0:	2360      	movs	r3, #96	@ 0x60
 801e5a2:	4013      	ands	r3, r2
 801e5a4:	2b40      	cmp	r3, #64	@ 0x40
 801e5a6:	d004      	beq.n	801e5b2 <USBD_StdDevReq+0x2a>
 801e5a8:	d84f      	bhi.n	801e64a <USBD_StdDevReq+0xc2>
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d00b      	beq.n	801e5c6 <USBD_StdDevReq+0x3e>
 801e5ae:	2b20      	cmp	r3, #32
 801e5b0:	d14b      	bne.n	801e64a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801e5b2:	687a      	ldr	r2, [r7, #4]
 801e5b4:	23ad      	movs	r3, #173	@ 0xad
 801e5b6:	009b      	lsls	r3, r3, #2
 801e5b8:	58d3      	ldr	r3, [r2, r3]
 801e5ba:	689b      	ldr	r3, [r3, #8]
 801e5bc:	6839      	ldr	r1, [r7, #0]
 801e5be:	687a      	ldr	r2, [r7, #4]
 801e5c0:	0010      	movs	r0, r2
 801e5c2:	4798      	blx	r3
      break;
 801e5c4:	e048      	b.n	801e658 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801e5c6:	683b      	ldr	r3, [r7, #0]
 801e5c8:	785b      	ldrb	r3, [r3, #1]
 801e5ca:	2b09      	cmp	r3, #9
 801e5cc:	d835      	bhi.n	801e63a <USBD_StdDevReq+0xb2>
 801e5ce:	009a      	lsls	r2, r3, #2
 801e5d0:	4b25      	ldr	r3, [pc, #148]	@ (801e668 <USBD_StdDevReq+0xe0>)
 801e5d2:	18d3      	adds	r3, r2, r3
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801e5d8:	683a      	ldr	r2, [r7, #0]
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	0011      	movs	r1, r2
 801e5de:	0018      	movs	r0, r3
 801e5e0:	f000 fa52 	bl	801ea88 <USBD_GetDescriptor>
          break;
 801e5e4:	e030      	b.n	801e648 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801e5e6:	683a      	ldr	r2, [r7, #0]
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	0011      	movs	r1, r2
 801e5ec:	0018      	movs	r0, r3
 801e5ee:	f000 fbfd 	bl	801edec <USBD_SetAddress>
          break;
 801e5f2:	e029      	b.n	801e648 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801e5f4:	683a      	ldr	r2, [r7, #0]
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	0011      	movs	r1, r2
 801e5fa:	0018      	movs	r0, r3
 801e5fc:	f000 fc4a 	bl	801ee94 <USBD_SetConfig>
          break;
 801e600:	e022      	b.n	801e648 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801e602:	683a      	ldr	r2, [r7, #0]
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	0011      	movs	r1, r2
 801e608:	0018      	movs	r0, r3
 801e60a:	f000 fce7 	bl	801efdc <USBD_GetConfig>
          break;
 801e60e:	e01b      	b.n	801e648 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801e610:	683a      	ldr	r2, [r7, #0]
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	0011      	movs	r1, r2
 801e616:	0018      	movs	r0, r3
 801e618:	f000 fd1b 	bl	801f052 <USBD_GetStatus>
          break;
 801e61c:	e014      	b.n	801e648 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801e61e:	683a      	ldr	r2, [r7, #0]
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	0011      	movs	r1, r2
 801e624:	0018      	movs	r0, r3
 801e626:	f000 fd4e 	bl	801f0c6 <USBD_SetFeature>
          break;
 801e62a:	e00d      	b.n	801e648 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801e62c:	683a      	ldr	r2, [r7, #0]
 801e62e:	687b      	ldr	r3, [r7, #4]
 801e630:	0011      	movs	r1, r2
 801e632:	0018      	movs	r0, r3
 801e634:	f000 fd5d 	bl	801f0f2 <USBD_ClrFeature>
          break;
 801e638:	e006      	b.n	801e648 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801e63a:	683a      	ldr	r2, [r7, #0]
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	0011      	movs	r1, r2
 801e640:	0018      	movs	r0, r3
 801e642:	f000 fdb4 	bl	801f1ae <USBD_CtlError>
          break;
 801e646:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e648:	e006      	b.n	801e658 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801e64a:	683a      	ldr	r2, [r7, #0]
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	0011      	movs	r1, r2
 801e650:	0018      	movs	r0, r3
 801e652:	f000 fdac 	bl	801f1ae <USBD_CtlError>
      break;
 801e656:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801e658:	230f      	movs	r3, #15
 801e65a:	18fb      	adds	r3, r7, r3
 801e65c:	781b      	ldrb	r3, [r3, #0]
}
 801e65e:	0018      	movs	r0, r3
 801e660:	46bd      	mov	sp, r7
 801e662:	b004      	add	sp, #16
 801e664:	bd80      	pop	{r7, pc}
 801e666:	46c0      	nop			@ (mov r8, r8)
 801e668:	08028e2c 	.word	0x08028e2c

0801e66c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801e66c:	b5b0      	push	{r4, r5, r7, lr}
 801e66e:	b084      	sub	sp, #16
 801e670:	af00      	add	r7, sp, #0
 801e672:	6078      	str	r0, [r7, #4]
 801e674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e676:	230f      	movs	r3, #15
 801e678:	18fb      	adds	r3, r7, r3
 801e67a:	2200      	movs	r2, #0
 801e67c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e67e:	683b      	ldr	r3, [r7, #0]
 801e680:	781b      	ldrb	r3, [r3, #0]
 801e682:	001a      	movs	r2, r3
 801e684:	2360      	movs	r3, #96	@ 0x60
 801e686:	4013      	ands	r3, r2
 801e688:	2b40      	cmp	r3, #64	@ 0x40
 801e68a:	d004      	beq.n	801e696 <USBD_StdItfReq+0x2a>
 801e68c:	d839      	bhi.n	801e702 <USBD_StdItfReq+0x96>
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d001      	beq.n	801e696 <USBD_StdItfReq+0x2a>
 801e692:	2b20      	cmp	r3, #32
 801e694:	d135      	bne.n	801e702 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801e696:	687a      	ldr	r2, [r7, #4]
 801e698:	23a7      	movs	r3, #167	@ 0xa7
 801e69a:	009b      	lsls	r3, r3, #2
 801e69c:	5cd3      	ldrb	r3, [r2, r3]
 801e69e:	3b01      	subs	r3, #1
 801e6a0:	2b02      	cmp	r3, #2
 801e6a2:	d825      	bhi.n	801e6f0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801e6a4:	683b      	ldr	r3, [r7, #0]
 801e6a6:	889b      	ldrh	r3, [r3, #4]
 801e6a8:	b2db      	uxtb	r3, r3
 801e6aa:	2b01      	cmp	r3, #1
 801e6ac:	d819      	bhi.n	801e6e2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801e6ae:	687a      	ldr	r2, [r7, #4]
 801e6b0:	23ad      	movs	r3, #173	@ 0xad
 801e6b2:	009b      	lsls	r3, r3, #2
 801e6b4:	58d3      	ldr	r3, [r2, r3]
 801e6b6:	689b      	ldr	r3, [r3, #8]
 801e6b8:	250f      	movs	r5, #15
 801e6ba:	197c      	adds	r4, r7, r5
 801e6bc:	6839      	ldr	r1, [r7, #0]
 801e6be:	687a      	ldr	r2, [r7, #4]
 801e6c0:	0010      	movs	r0, r2
 801e6c2:	4798      	blx	r3
 801e6c4:	0003      	movs	r3, r0
 801e6c6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801e6c8:	683b      	ldr	r3, [r7, #0]
 801e6ca:	88db      	ldrh	r3, [r3, #6]
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d116      	bne.n	801e6fe <USBD_StdItfReq+0x92>
 801e6d0:	197b      	adds	r3, r7, r5
 801e6d2:	781b      	ldrb	r3, [r3, #0]
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d112      	bne.n	801e6fe <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	0018      	movs	r0, r3
 801e6dc:	f000 fe4f 	bl	801f37e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801e6e0:	e00d      	b.n	801e6fe <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801e6e2:	683a      	ldr	r2, [r7, #0]
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	0011      	movs	r1, r2
 801e6e8:	0018      	movs	r0, r3
 801e6ea:	f000 fd60 	bl	801f1ae <USBD_CtlError>
          break;
 801e6ee:	e006      	b.n	801e6fe <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801e6f0:	683a      	ldr	r2, [r7, #0]
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	0011      	movs	r1, r2
 801e6f6:	0018      	movs	r0, r3
 801e6f8:	f000 fd59 	bl	801f1ae <USBD_CtlError>
          break;
 801e6fc:	e000      	b.n	801e700 <USBD_StdItfReq+0x94>
          break;
 801e6fe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e700:	e006      	b.n	801e710 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801e702:	683a      	ldr	r2, [r7, #0]
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	0011      	movs	r1, r2
 801e708:	0018      	movs	r0, r3
 801e70a:	f000 fd50 	bl	801f1ae <USBD_CtlError>
      break;
 801e70e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801e710:	2300      	movs	r3, #0
}
 801e712:	0018      	movs	r0, r3
 801e714:	46bd      	mov	sp, r7
 801e716:	b004      	add	sp, #16
 801e718:	bdb0      	pop	{r4, r5, r7, pc}

0801e71a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801e71a:	b5b0      	push	{r4, r5, r7, lr}
 801e71c:	b084      	sub	sp, #16
 801e71e:	af00      	add	r7, sp, #0
 801e720:	6078      	str	r0, [r7, #4]
 801e722:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801e724:	230f      	movs	r3, #15
 801e726:	18fb      	adds	r3, r7, r3
 801e728:	2200      	movs	r2, #0
 801e72a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801e72c:	683b      	ldr	r3, [r7, #0]
 801e72e:	889a      	ldrh	r2, [r3, #4]
 801e730:	230e      	movs	r3, #14
 801e732:	18fb      	adds	r3, r7, r3
 801e734:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e736:	683b      	ldr	r3, [r7, #0]
 801e738:	781b      	ldrb	r3, [r3, #0]
 801e73a:	001a      	movs	r2, r3
 801e73c:	2360      	movs	r3, #96	@ 0x60
 801e73e:	4013      	ands	r3, r2
 801e740:	2b40      	cmp	r3, #64	@ 0x40
 801e742:	d006      	beq.n	801e752 <USBD_StdEPReq+0x38>
 801e744:	d900      	bls.n	801e748 <USBD_StdEPReq+0x2e>
 801e746:	e190      	b.n	801ea6a <USBD_StdEPReq+0x350>
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d00c      	beq.n	801e766 <USBD_StdEPReq+0x4c>
 801e74c:	2b20      	cmp	r3, #32
 801e74e:	d000      	beq.n	801e752 <USBD_StdEPReq+0x38>
 801e750:	e18b      	b.n	801ea6a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801e752:	687a      	ldr	r2, [r7, #4]
 801e754:	23ad      	movs	r3, #173	@ 0xad
 801e756:	009b      	lsls	r3, r3, #2
 801e758:	58d3      	ldr	r3, [r2, r3]
 801e75a:	689b      	ldr	r3, [r3, #8]
 801e75c:	6839      	ldr	r1, [r7, #0]
 801e75e:	687a      	ldr	r2, [r7, #4]
 801e760:	0010      	movs	r0, r2
 801e762:	4798      	blx	r3
      break;
 801e764:	e188      	b.n	801ea78 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801e766:	683b      	ldr	r3, [r7, #0]
 801e768:	781b      	ldrb	r3, [r3, #0]
 801e76a:	001a      	movs	r2, r3
 801e76c:	2360      	movs	r3, #96	@ 0x60
 801e76e:	4013      	ands	r3, r2
 801e770:	2b20      	cmp	r3, #32
 801e772:	d10f      	bne.n	801e794 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801e774:	687a      	ldr	r2, [r7, #4]
 801e776:	23ad      	movs	r3, #173	@ 0xad
 801e778:	009b      	lsls	r3, r3, #2
 801e77a:	58d3      	ldr	r3, [r2, r3]
 801e77c:	689b      	ldr	r3, [r3, #8]
 801e77e:	250f      	movs	r5, #15
 801e780:	197c      	adds	r4, r7, r5
 801e782:	6839      	ldr	r1, [r7, #0]
 801e784:	687a      	ldr	r2, [r7, #4]
 801e786:	0010      	movs	r0, r2
 801e788:	4798      	blx	r3
 801e78a:	0003      	movs	r3, r0
 801e78c:	7023      	strb	r3, [r4, #0]

        return ret;
 801e78e:	197b      	adds	r3, r7, r5
 801e790:	781b      	ldrb	r3, [r3, #0]
 801e792:	e174      	b.n	801ea7e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801e794:	683b      	ldr	r3, [r7, #0]
 801e796:	785b      	ldrb	r3, [r3, #1]
 801e798:	2b03      	cmp	r3, #3
 801e79a:	d007      	beq.n	801e7ac <USBD_StdEPReq+0x92>
 801e79c:	dd00      	ble.n	801e7a0 <USBD_StdEPReq+0x86>
 801e79e:	e15c      	b.n	801ea5a <USBD_StdEPReq+0x340>
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d100      	bne.n	801e7a6 <USBD_StdEPReq+0x8c>
 801e7a4:	e092      	b.n	801e8cc <USBD_StdEPReq+0x1b2>
 801e7a6:	2b01      	cmp	r3, #1
 801e7a8:	d04b      	beq.n	801e842 <USBD_StdEPReq+0x128>
 801e7aa:	e156      	b.n	801ea5a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801e7ac:	687a      	ldr	r2, [r7, #4]
 801e7ae:	23a7      	movs	r3, #167	@ 0xa7
 801e7b0:	009b      	lsls	r3, r3, #2
 801e7b2:	5cd3      	ldrb	r3, [r2, r3]
 801e7b4:	2b02      	cmp	r3, #2
 801e7b6:	d002      	beq.n	801e7be <USBD_StdEPReq+0xa4>
 801e7b8:	2b03      	cmp	r3, #3
 801e7ba:	d01d      	beq.n	801e7f8 <USBD_StdEPReq+0xde>
 801e7bc:	e039      	b.n	801e832 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e7be:	220e      	movs	r2, #14
 801e7c0:	18bb      	adds	r3, r7, r2
 801e7c2:	781b      	ldrb	r3, [r3, #0]
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d010      	beq.n	801e7ea <USBD_StdEPReq+0xd0>
 801e7c8:	18bb      	adds	r3, r7, r2
 801e7ca:	781b      	ldrb	r3, [r3, #0]
 801e7cc:	2b80      	cmp	r3, #128	@ 0x80
 801e7ce:	d00c      	beq.n	801e7ea <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801e7d0:	18bb      	adds	r3, r7, r2
 801e7d2:	781a      	ldrb	r2, [r3, #0]
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	0011      	movs	r1, r2
 801e7d8:	0018      	movs	r0, r3
 801e7da:	f001 fa10 	bl	801fbfe <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	2180      	movs	r1, #128	@ 0x80
 801e7e2:	0018      	movs	r0, r3
 801e7e4:	f001 fa0b 	bl	801fbfe <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801e7e8:	e02a      	b.n	801e840 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801e7ea:	683a      	ldr	r2, [r7, #0]
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	0011      	movs	r1, r2
 801e7f0:	0018      	movs	r0, r3
 801e7f2:	f000 fcdc 	bl	801f1ae <USBD_CtlError>
              break;
 801e7f6:	e023      	b.n	801e840 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801e7f8:	683b      	ldr	r3, [r7, #0]
 801e7fa:	885b      	ldrh	r3, [r3, #2]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d113      	bne.n	801e828 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801e800:	220e      	movs	r2, #14
 801e802:	18bb      	adds	r3, r7, r2
 801e804:	781b      	ldrb	r3, [r3, #0]
 801e806:	2b00      	cmp	r3, #0
 801e808:	d00e      	beq.n	801e828 <USBD_StdEPReq+0x10e>
 801e80a:	18bb      	adds	r3, r7, r2
 801e80c:	781b      	ldrb	r3, [r3, #0]
 801e80e:	2b80      	cmp	r3, #128	@ 0x80
 801e810:	d00a      	beq.n	801e828 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801e812:	683b      	ldr	r3, [r7, #0]
 801e814:	88db      	ldrh	r3, [r3, #6]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d106      	bne.n	801e828 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801e81a:	18bb      	adds	r3, r7, r2
 801e81c:	781a      	ldrb	r2, [r3, #0]
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	0011      	movs	r1, r2
 801e822:	0018      	movs	r0, r3
 801e824:	f001 f9eb 	bl	801fbfe <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	0018      	movs	r0, r3
 801e82c:	f000 fda7 	bl	801f37e <USBD_CtlSendStatus>

              break;
 801e830:	e006      	b.n	801e840 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801e832:	683a      	ldr	r2, [r7, #0]
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	0011      	movs	r1, r2
 801e838:	0018      	movs	r0, r3
 801e83a:	f000 fcb8 	bl	801f1ae <USBD_CtlError>
              break;
 801e83e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801e840:	e112      	b.n	801ea68 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801e842:	687a      	ldr	r2, [r7, #4]
 801e844:	23a7      	movs	r3, #167	@ 0xa7
 801e846:	009b      	lsls	r3, r3, #2
 801e848:	5cd3      	ldrb	r3, [r2, r3]
 801e84a:	2b02      	cmp	r3, #2
 801e84c:	d002      	beq.n	801e854 <USBD_StdEPReq+0x13a>
 801e84e:	2b03      	cmp	r3, #3
 801e850:	d01d      	beq.n	801e88e <USBD_StdEPReq+0x174>
 801e852:	e032      	b.n	801e8ba <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e854:	220e      	movs	r2, #14
 801e856:	18bb      	adds	r3, r7, r2
 801e858:	781b      	ldrb	r3, [r3, #0]
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	d010      	beq.n	801e880 <USBD_StdEPReq+0x166>
 801e85e:	18bb      	adds	r3, r7, r2
 801e860:	781b      	ldrb	r3, [r3, #0]
 801e862:	2b80      	cmp	r3, #128	@ 0x80
 801e864:	d00c      	beq.n	801e880 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801e866:	18bb      	adds	r3, r7, r2
 801e868:	781a      	ldrb	r2, [r3, #0]
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	0011      	movs	r1, r2
 801e86e:	0018      	movs	r0, r3
 801e870:	f001 f9c5 	bl	801fbfe <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	2180      	movs	r1, #128	@ 0x80
 801e878:	0018      	movs	r0, r3
 801e87a:	f001 f9c0 	bl	801fbfe <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801e87e:	e024      	b.n	801e8ca <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801e880:	683a      	ldr	r2, [r7, #0]
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	0011      	movs	r1, r2
 801e886:	0018      	movs	r0, r3
 801e888:	f000 fc91 	bl	801f1ae <USBD_CtlError>
              break;
 801e88c:	e01d      	b.n	801e8ca <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801e88e:	683b      	ldr	r3, [r7, #0]
 801e890:	885b      	ldrh	r3, [r3, #2]
 801e892:	2b00      	cmp	r3, #0
 801e894:	d118      	bne.n	801e8c8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801e896:	210e      	movs	r1, #14
 801e898:	187b      	adds	r3, r7, r1
 801e89a:	781b      	ldrb	r3, [r3, #0]
 801e89c:	227f      	movs	r2, #127	@ 0x7f
 801e89e:	4013      	ands	r3, r2
 801e8a0:	d006      	beq.n	801e8b0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801e8a2:	187b      	adds	r3, r7, r1
 801e8a4:	781a      	ldrb	r2, [r3, #0]
 801e8a6:	687b      	ldr	r3, [r7, #4]
 801e8a8:	0011      	movs	r1, r2
 801e8aa:	0018      	movs	r0, r3
 801e8ac:	f001 f9d2 	bl	801fc54 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	0018      	movs	r0, r3
 801e8b4:	f000 fd63 	bl	801f37e <USBD_CtlSendStatus>
              }
              break;
 801e8b8:	e006      	b.n	801e8c8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801e8ba:	683a      	ldr	r2, [r7, #0]
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	0011      	movs	r1, r2
 801e8c0:	0018      	movs	r0, r3
 801e8c2:	f000 fc74 	bl	801f1ae <USBD_CtlError>
              break;
 801e8c6:	e000      	b.n	801e8ca <USBD_StdEPReq+0x1b0>
              break;
 801e8c8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801e8ca:	e0cd      	b.n	801ea68 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801e8cc:	687a      	ldr	r2, [r7, #4]
 801e8ce:	23a7      	movs	r3, #167	@ 0xa7
 801e8d0:	009b      	lsls	r3, r3, #2
 801e8d2:	5cd3      	ldrb	r3, [r2, r3]
 801e8d4:	2b02      	cmp	r3, #2
 801e8d6:	d002      	beq.n	801e8de <USBD_StdEPReq+0x1c4>
 801e8d8:	2b03      	cmp	r3, #3
 801e8da:	d03c      	beq.n	801e956 <USBD_StdEPReq+0x23c>
 801e8dc:	e0b5      	b.n	801ea4a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801e8de:	220e      	movs	r2, #14
 801e8e0:	18bb      	adds	r3, r7, r2
 801e8e2:	781b      	ldrb	r3, [r3, #0]
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d00a      	beq.n	801e8fe <USBD_StdEPReq+0x1e4>
 801e8e8:	18bb      	adds	r3, r7, r2
 801e8ea:	781b      	ldrb	r3, [r3, #0]
 801e8ec:	2b80      	cmp	r3, #128	@ 0x80
 801e8ee:	d006      	beq.n	801e8fe <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801e8f0:	683a      	ldr	r2, [r7, #0]
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	0011      	movs	r1, r2
 801e8f6:	0018      	movs	r0, r3
 801e8f8:	f000 fc59 	bl	801f1ae <USBD_CtlError>
                break;
 801e8fc:	e0ac      	b.n	801ea58 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e8fe:	220e      	movs	r2, #14
 801e900:	18bb      	adds	r3, r7, r2
 801e902:	781b      	ldrb	r3, [r3, #0]
 801e904:	b25b      	sxtb	r3, r3
 801e906:	2b00      	cmp	r3, #0
 801e908:	da0c      	bge.n	801e924 <USBD_StdEPReq+0x20a>
 801e90a:	18bb      	adds	r3, r7, r2
 801e90c:	781b      	ldrb	r3, [r3, #0]
 801e90e:	227f      	movs	r2, #127	@ 0x7f
 801e910:	401a      	ands	r2, r3
 801e912:	0013      	movs	r3, r2
 801e914:	009b      	lsls	r3, r3, #2
 801e916:	189b      	adds	r3, r3, r2
 801e918:	009b      	lsls	r3, r3, #2
 801e91a:	3310      	adds	r3, #16
 801e91c:	687a      	ldr	r2, [r7, #4]
 801e91e:	18d3      	adds	r3, r2, r3
 801e920:	3304      	adds	r3, #4
 801e922:	e00d      	b.n	801e940 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801e924:	230e      	movs	r3, #14
 801e926:	18fb      	adds	r3, r7, r3
 801e928:	781b      	ldrb	r3, [r3, #0]
 801e92a:	227f      	movs	r2, #127	@ 0x7f
 801e92c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e92e:	0013      	movs	r3, r2
 801e930:	009b      	lsls	r3, r3, #2
 801e932:	189b      	adds	r3, r3, r2
 801e934:	009b      	lsls	r3, r3, #2
 801e936:	3351      	adds	r3, #81	@ 0x51
 801e938:	33ff      	adds	r3, #255	@ 0xff
 801e93a:	687a      	ldr	r2, [r7, #4]
 801e93c:	18d3      	adds	r3, r2, r3
 801e93e:	3304      	adds	r3, #4
 801e940:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801e942:	68bb      	ldr	r3, [r7, #8]
 801e944:	2200      	movs	r2, #0
 801e946:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801e948:	68b9      	ldr	r1, [r7, #8]
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	2202      	movs	r2, #2
 801e94e:	0018      	movs	r0, r3
 801e950:	f000 fcab 	bl	801f2aa <USBD_CtlSendData>
              break;
 801e954:	e080      	b.n	801ea58 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801e956:	220e      	movs	r2, #14
 801e958:	18bb      	adds	r3, r7, r2
 801e95a:	781b      	ldrb	r3, [r3, #0]
 801e95c:	b25b      	sxtb	r3, r3
 801e95e:	2b00      	cmp	r3, #0
 801e960:	da14      	bge.n	801e98c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801e962:	18bb      	adds	r3, r7, r2
 801e964:	781b      	ldrb	r3, [r3, #0]
 801e966:	220f      	movs	r2, #15
 801e968:	401a      	ands	r2, r3
 801e96a:	6879      	ldr	r1, [r7, #4]
 801e96c:	0013      	movs	r3, r2
 801e96e:	009b      	lsls	r3, r3, #2
 801e970:	189b      	adds	r3, r3, r2
 801e972:	009b      	lsls	r3, r3, #2
 801e974:	18cb      	adds	r3, r1, r3
 801e976:	3318      	adds	r3, #24
 801e978:	681b      	ldr	r3, [r3, #0]
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	d11e      	bne.n	801e9bc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801e97e:	683a      	ldr	r2, [r7, #0]
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	0011      	movs	r1, r2
 801e984:	0018      	movs	r0, r3
 801e986:	f000 fc12 	bl	801f1ae <USBD_CtlError>
                  break;
 801e98a:	e065      	b.n	801ea58 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801e98c:	230e      	movs	r3, #14
 801e98e:	18fb      	adds	r3, r7, r3
 801e990:	781b      	ldrb	r3, [r3, #0]
 801e992:	220f      	movs	r2, #15
 801e994:	401a      	ands	r2, r3
 801e996:	6878      	ldr	r0, [r7, #4]
 801e998:	23ac      	movs	r3, #172	@ 0xac
 801e99a:	0059      	lsls	r1, r3, #1
 801e99c:	0013      	movs	r3, r2
 801e99e:	009b      	lsls	r3, r3, #2
 801e9a0:	189b      	adds	r3, r3, r2
 801e9a2:	009b      	lsls	r3, r3, #2
 801e9a4:	18c3      	adds	r3, r0, r3
 801e9a6:	185b      	adds	r3, r3, r1
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d106      	bne.n	801e9bc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801e9ae:	683a      	ldr	r2, [r7, #0]
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	0011      	movs	r1, r2
 801e9b4:	0018      	movs	r0, r3
 801e9b6:	f000 fbfa 	bl	801f1ae <USBD_CtlError>
                  break;
 801e9ba:	e04d      	b.n	801ea58 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e9bc:	220e      	movs	r2, #14
 801e9be:	18bb      	adds	r3, r7, r2
 801e9c0:	781b      	ldrb	r3, [r3, #0]
 801e9c2:	b25b      	sxtb	r3, r3
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	da0c      	bge.n	801e9e2 <USBD_StdEPReq+0x2c8>
 801e9c8:	18bb      	adds	r3, r7, r2
 801e9ca:	781b      	ldrb	r3, [r3, #0]
 801e9cc:	227f      	movs	r2, #127	@ 0x7f
 801e9ce:	401a      	ands	r2, r3
 801e9d0:	0013      	movs	r3, r2
 801e9d2:	009b      	lsls	r3, r3, #2
 801e9d4:	189b      	adds	r3, r3, r2
 801e9d6:	009b      	lsls	r3, r3, #2
 801e9d8:	3310      	adds	r3, #16
 801e9da:	687a      	ldr	r2, [r7, #4]
 801e9dc:	18d3      	adds	r3, r2, r3
 801e9de:	3304      	adds	r3, #4
 801e9e0:	e00d      	b.n	801e9fe <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801e9e2:	230e      	movs	r3, #14
 801e9e4:	18fb      	adds	r3, r7, r3
 801e9e6:	781b      	ldrb	r3, [r3, #0]
 801e9e8:	227f      	movs	r2, #127	@ 0x7f
 801e9ea:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801e9ec:	0013      	movs	r3, r2
 801e9ee:	009b      	lsls	r3, r3, #2
 801e9f0:	189b      	adds	r3, r3, r2
 801e9f2:	009b      	lsls	r3, r3, #2
 801e9f4:	3351      	adds	r3, #81	@ 0x51
 801e9f6:	33ff      	adds	r3, #255	@ 0xff
 801e9f8:	687a      	ldr	r2, [r7, #4]
 801e9fa:	18d3      	adds	r3, r2, r3
 801e9fc:	3304      	adds	r3, #4
 801e9fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801ea00:	220e      	movs	r2, #14
 801ea02:	18bb      	adds	r3, r7, r2
 801ea04:	781b      	ldrb	r3, [r3, #0]
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d003      	beq.n	801ea12 <USBD_StdEPReq+0x2f8>
 801ea0a:	18bb      	adds	r3, r7, r2
 801ea0c:	781b      	ldrb	r3, [r3, #0]
 801ea0e:	2b80      	cmp	r3, #128	@ 0x80
 801ea10:	d103      	bne.n	801ea1a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801ea12:	68bb      	ldr	r3, [r7, #8]
 801ea14:	2200      	movs	r2, #0
 801ea16:	601a      	str	r2, [r3, #0]
 801ea18:	e010      	b.n	801ea3c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801ea1a:	230e      	movs	r3, #14
 801ea1c:	18fb      	adds	r3, r7, r3
 801ea1e:	781a      	ldrb	r2, [r3, #0]
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	0011      	movs	r1, r2
 801ea24:	0018      	movs	r0, r3
 801ea26:	f001 f940 	bl	801fcaa <USBD_LL_IsStallEP>
 801ea2a:	1e03      	subs	r3, r0, #0
 801ea2c:	d003      	beq.n	801ea36 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801ea2e:	68bb      	ldr	r3, [r7, #8]
 801ea30:	2201      	movs	r2, #1
 801ea32:	601a      	str	r2, [r3, #0]
 801ea34:	e002      	b.n	801ea3c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801ea36:	68bb      	ldr	r3, [r7, #8]
 801ea38:	2200      	movs	r2, #0
 801ea3a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ea3c:	68b9      	ldr	r1, [r7, #8]
 801ea3e:	687b      	ldr	r3, [r7, #4]
 801ea40:	2202      	movs	r2, #2
 801ea42:	0018      	movs	r0, r3
 801ea44:	f000 fc31 	bl	801f2aa <USBD_CtlSendData>
              break;
 801ea48:	e006      	b.n	801ea58 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801ea4a:	683a      	ldr	r2, [r7, #0]
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	0011      	movs	r1, r2
 801ea50:	0018      	movs	r0, r3
 801ea52:	f000 fbac 	bl	801f1ae <USBD_CtlError>
              break;
 801ea56:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801ea58:	e006      	b.n	801ea68 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801ea5a:	683a      	ldr	r2, [r7, #0]
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	0011      	movs	r1, r2
 801ea60:	0018      	movs	r0, r3
 801ea62:	f000 fba4 	bl	801f1ae <USBD_CtlError>
          break;
 801ea66:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ea68:	e006      	b.n	801ea78 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801ea6a:	683a      	ldr	r2, [r7, #0]
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	0011      	movs	r1, r2
 801ea70:	0018      	movs	r0, r3
 801ea72:	f000 fb9c 	bl	801f1ae <USBD_CtlError>
      break;
 801ea76:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ea78:	230f      	movs	r3, #15
 801ea7a:	18fb      	adds	r3, r7, r3
 801ea7c:	781b      	ldrb	r3, [r3, #0]
}
 801ea7e:	0018      	movs	r0, r3
 801ea80:	46bd      	mov	sp, r7
 801ea82:	b004      	add	sp, #16
 801ea84:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801ea88 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801ea88:	b580      	push	{r7, lr}
 801ea8a:	b084      	sub	sp, #16
 801ea8c:	af00      	add	r7, sp, #0
 801ea8e:	6078      	str	r0, [r7, #4]
 801ea90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ea92:	2308      	movs	r3, #8
 801ea94:	18fb      	adds	r3, r7, r3
 801ea96:	2200      	movs	r2, #0
 801ea98:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801ea9a:	2300      	movs	r3, #0
 801ea9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ea9e:	230b      	movs	r3, #11
 801eaa0:	18fb      	adds	r3, r7, r3
 801eaa2:	2200      	movs	r2, #0
 801eaa4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801eaa6:	683b      	ldr	r3, [r7, #0]
 801eaa8:	885b      	ldrh	r3, [r3, #2]
 801eaaa:	0a1b      	lsrs	r3, r3, #8
 801eaac:	b29b      	uxth	r3, r3
 801eaae:	2b07      	cmp	r3, #7
 801eab0:	d900      	bls.n	801eab4 <USBD_GetDescriptor+0x2c>
 801eab2:	e159      	b.n	801ed68 <USBD_GetDescriptor+0x2e0>
 801eab4:	009a      	lsls	r2, r3, #2
 801eab6:	4bcb      	ldr	r3, [pc, #812]	@ (801ede4 <USBD_GetDescriptor+0x35c>)
 801eab8:	18d3      	adds	r3, r2, r3
 801eaba:	681b      	ldr	r3, [r3, #0]
 801eabc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801eabe:	687a      	ldr	r2, [r7, #4]
 801eac0:	23ac      	movs	r3, #172	@ 0xac
 801eac2:	009b      	lsls	r3, r3, #2
 801eac4:	58d3      	ldr	r3, [r2, r3]
 801eac6:	681b      	ldr	r3, [r3, #0]
 801eac8:	687a      	ldr	r2, [r7, #4]
 801eaca:	7c12      	ldrb	r2, [r2, #16]
 801eacc:	2108      	movs	r1, #8
 801eace:	1879      	adds	r1, r7, r1
 801ead0:	0010      	movs	r0, r2
 801ead2:	4798      	blx	r3
 801ead4:	0003      	movs	r3, r0
 801ead6:	60fb      	str	r3, [r7, #12]
      break;
 801ead8:	e153      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	7c1b      	ldrb	r3, [r3, #16]
 801eade:	2b00      	cmp	r3, #0
 801eae0:	d10f      	bne.n	801eb02 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801eae2:	687a      	ldr	r2, [r7, #4]
 801eae4:	23ad      	movs	r3, #173	@ 0xad
 801eae6:	009b      	lsls	r3, r3, #2
 801eae8:	58d3      	ldr	r3, [r2, r3]
 801eaea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eaec:	2208      	movs	r2, #8
 801eaee:	18ba      	adds	r2, r7, r2
 801eaf0:	0010      	movs	r0, r2
 801eaf2:	4798      	blx	r3
 801eaf4:	0003      	movs	r3, r0
 801eaf6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801eaf8:	68fb      	ldr	r3, [r7, #12]
 801eafa:	3301      	adds	r3, #1
 801eafc:	2202      	movs	r2, #2
 801eafe:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801eb00:	e13f      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801eb02:	687a      	ldr	r2, [r7, #4]
 801eb04:	23ad      	movs	r3, #173	@ 0xad
 801eb06:	009b      	lsls	r3, r3, #2
 801eb08:	58d3      	ldr	r3, [r2, r3]
 801eb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb0c:	2208      	movs	r2, #8
 801eb0e:	18ba      	adds	r2, r7, r2
 801eb10:	0010      	movs	r0, r2
 801eb12:	4798      	blx	r3
 801eb14:	0003      	movs	r3, r0
 801eb16:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801eb18:	68fb      	ldr	r3, [r7, #12]
 801eb1a:	3301      	adds	r3, #1
 801eb1c:	2202      	movs	r2, #2
 801eb1e:	701a      	strb	r2, [r3, #0]
      break;
 801eb20:	e12f      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801eb22:	683b      	ldr	r3, [r7, #0]
 801eb24:	885b      	ldrh	r3, [r3, #2]
 801eb26:	b2db      	uxtb	r3, r3
 801eb28:	2b05      	cmp	r3, #5
 801eb2a:	d900      	bls.n	801eb2e <USBD_GetDescriptor+0xa6>
 801eb2c:	e0d0      	b.n	801ecd0 <USBD_GetDescriptor+0x248>
 801eb2e:	009a      	lsls	r2, r3, #2
 801eb30:	4bad      	ldr	r3, [pc, #692]	@ (801ede8 <USBD_GetDescriptor+0x360>)
 801eb32:	18d3      	adds	r3, r2, r3
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801eb38:	687a      	ldr	r2, [r7, #4]
 801eb3a:	23ac      	movs	r3, #172	@ 0xac
 801eb3c:	009b      	lsls	r3, r3, #2
 801eb3e:	58d3      	ldr	r3, [r2, r3]
 801eb40:	685b      	ldr	r3, [r3, #4]
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d00d      	beq.n	801eb62 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801eb46:	687a      	ldr	r2, [r7, #4]
 801eb48:	23ac      	movs	r3, #172	@ 0xac
 801eb4a:	009b      	lsls	r3, r3, #2
 801eb4c:	58d3      	ldr	r3, [r2, r3]
 801eb4e:	685b      	ldr	r3, [r3, #4]
 801eb50:	687a      	ldr	r2, [r7, #4]
 801eb52:	7c12      	ldrb	r2, [r2, #16]
 801eb54:	2108      	movs	r1, #8
 801eb56:	1879      	adds	r1, r7, r1
 801eb58:	0010      	movs	r0, r2
 801eb5a:	4798      	blx	r3
 801eb5c:	0003      	movs	r3, r0
 801eb5e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eb60:	e0c3      	b.n	801ecea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801eb62:	683a      	ldr	r2, [r7, #0]
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	0011      	movs	r1, r2
 801eb68:	0018      	movs	r0, r3
 801eb6a:	f000 fb20 	bl	801f1ae <USBD_CtlError>
            err++;
 801eb6e:	210b      	movs	r1, #11
 801eb70:	187b      	adds	r3, r7, r1
 801eb72:	781a      	ldrb	r2, [r3, #0]
 801eb74:	187b      	adds	r3, r7, r1
 801eb76:	3201      	adds	r2, #1
 801eb78:	701a      	strb	r2, [r3, #0]
          break;
 801eb7a:	e0b6      	b.n	801ecea <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801eb7c:	687a      	ldr	r2, [r7, #4]
 801eb7e:	23ac      	movs	r3, #172	@ 0xac
 801eb80:	009b      	lsls	r3, r3, #2
 801eb82:	58d3      	ldr	r3, [r2, r3]
 801eb84:	689b      	ldr	r3, [r3, #8]
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d00d      	beq.n	801eba6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801eb8a:	687a      	ldr	r2, [r7, #4]
 801eb8c:	23ac      	movs	r3, #172	@ 0xac
 801eb8e:	009b      	lsls	r3, r3, #2
 801eb90:	58d3      	ldr	r3, [r2, r3]
 801eb92:	689b      	ldr	r3, [r3, #8]
 801eb94:	687a      	ldr	r2, [r7, #4]
 801eb96:	7c12      	ldrb	r2, [r2, #16]
 801eb98:	2108      	movs	r1, #8
 801eb9a:	1879      	adds	r1, r7, r1
 801eb9c:	0010      	movs	r0, r2
 801eb9e:	4798      	blx	r3
 801eba0:	0003      	movs	r3, r0
 801eba2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eba4:	e0a1      	b.n	801ecea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801eba6:	683a      	ldr	r2, [r7, #0]
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	0011      	movs	r1, r2
 801ebac:	0018      	movs	r0, r3
 801ebae:	f000 fafe 	bl	801f1ae <USBD_CtlError>
            err++;
 801ebb2:	210b      	movs	r1, #11
 801ebb4:	187b      	adds	r3, r7, r1
 801ebb6:	781a      	ldrb	r2, [r3, #0]
 801ebb8:	187b      	adds	r3, r7, r1
 801ebba:	3201      	adds	r2, #1
 801ebbc:	701a      	strb	r2, [r3, #0]
          break;
 801ebbe:	e094      	b.n	801ecea <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ebc0:	687a      	ldr	r2, [r7, #4]
 801ebc2:	23ac      	movs	r3, #172	@ 0xac
 801ebc4:	009b      	lsls	r3, r3, #2
 801ebc6:	58d3      	ldr	r3, [r2, r3]
 801ebc8:	68db      	ldr	r3, [r3, #12]
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d00d      	beq.n	801ebea <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ebce:	687a      	ldr	r2, [r7, #4]
 801ebd0:	23ac      	movs	r3, #172	@ 0xac
 801ebd2:	009b      	lsls	r3, r3, #2
 801ebd4:	58d3      	ldr	r3, [r2, r3]
 801ebd6:	68db      	ldr	r3, [r3, #12]
 801ebd8:	687a      	ldr	r2, [r7, #4]
 801ebda:	7c12      	ldrb	r2, [r2, #16]
 801ebdc:	2108      	movs	r1, #8
 801ebde:	1879      	adds	r1, r7, r1
 801ebe0:	0010      	movs	r0, r2
 801ebe2:	4798      	blx	r3
 801ebe4:	0003      	movs	r3, r0
 801ebe6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ebe8:	e07f      	b.n	801ecea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ebea:	683a      	ldr	r2, [r7, #0]
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	0011      	movs	r1, r2
 801ebf0:	0018      	movs	r0, r3
 801ebf2:	f000 fadc 	bl	801f1ae <USBD_CtlError>
            err++;
 801ebf6:	210b      	movs	r1, #11
 801ebf8:	187b      	adds	r3, r7, r1
 801ebfa:	781a      	ldrb	r2, [r3, #0]
 801ebfc:	187b      	adds	r3, r7, r1
 801ebfe:	3201      	adds	r2, #1
 801ec00:	701a      	strb	r2, [r3, #0]
          break;
 801ec02:	e072      	b.n	801ecea <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ec04:	687a      	ldr	r2, [r7, #4]
 801ec06:	23ac      	movs	r3, #172	@ 0xac
 801ec08:	009b      	lsls	r3, r3, #2
 801ec0a:	58d3      	ldr	r3, [r2, r3]
 801ec0c:	691b      	ldr	r3, [r3, #16]
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d00d      	beq.n	801ec2e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ec12:	687a      	ldr	r2, [r7, #4]
 801ec14:	23ac      	movs	r3, #172	@ 0xac
 801ec16:	009b      	lsls	r3, r3, #2
 801ec18:	58d3      	ldr	r3, [r2, r3]
 801ec1a:	691b      	ldr	r3, [r3, #16]
 801ec1c:	687a      	ldr	r2, [r7, #4]
 801ec1e:	7c12      	ldrb	r2, [r2, #16]
 801ec20:	2108      	movs	r1, #8
 801ec22:	1879      	adds	r1, r7, r1
 801ec24:	0010      	movs	r0, r2
 801ec26:	4798      	blx	r3
 801ec28:	0003      	movs	r3, r0
 801ec2a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ec2c:	e05d      	b.n	801ecea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ec2e:	683a      	ldr	r2, [r7, #0]
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	0011      	movs	r1, r2
 801ec34:	0018      	movs	r0, r3
 801ec36:	f000 faba 	bl	801f1ae <USBD_CtlError>
            err++;
 801ec3a:	210b      	movs	r1, #11
 801ec3c:	187b      	adds	r3, r7, r1
 801ec3e:	781a      	ldrb	r2, [r3, #0]
 801ec40:	187b      	adds	r3, r7, r1
 801ec42:	3201      	adds	r2, #1
 801ec44:	701a      	strb	r2, [r3, #0]
          break;
 801ec46:	e050      	b.n	801ecea <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ec48:	687a      	ldr	r2, [r7, #4]
 801ec4a:	23ac      	movs	r3, #172	@ 0xac
 801ec4c:	009b      	lsls	r3, r3, #2
 801ec4e:	58d3      	ldr	r3, [r2, r3]
 801ec50:	695b      	ldr	r3, [r3, #20]
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d00d      	beq.n	801ec72 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ec56:	687a      	ldr	r2, [r7, #4]
 801ec58:	23ac      	movs	r3, #172	@ 0xac
 801ec5a:	009b      	lsls	r3, r3, #2
 801ec5c:	58d3      	ldr	r3, [r2, r3]
 801ec5e:	695b      	ldr	r3, [r3, #20]
 801ec60:	687a      	ldr	r2, [r7, #4]
 801ec62:	7c12      	ldrb	r2, [r2, #16]
 801ec64:	2108      	movs	r1, #8
 801ec66:	1879      	adds	r1, r7, r1
 801ec68:	0010      	movs	r0, r2
 801ec6a:	4798      	blx	r3
 801ec6c:	0003      	movs	r3, r0
 801ec6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ec70:	e03b      	b.n	801ecea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ec72:	683a      	ldr	r2, [r7, #0]
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	0011      	movs	r1, r2
 801ec78:	0018      	movs	r0, r3
 801ec7a:	f000 fa98 	bl	801f1ae <USBD_CtlError>
            err++;
 801ec7e:	210b      	movs	r1, #11
 801ec80:	187b      	adds	r3, r7, r1
 801ec82:	781a      	ldrb	r2, [r3, #0]
 801ec84:	187b      	adds	r3, r7, r1
 801ec86:	3201      	adds	r2, #1
 801ec88:	701a      	strb	r2, [r3, #0]
          break;
 801ec8a:	e02e      	b.n	801ecea <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ec8c:	687a      	ldr	r2, [r7, #4]
 801ec8e:	23ac      	movs	r3, #172	@ 0xac
 801ec90:	009b      	lsls	r3, r3, #2
 801ec92:	58d3      	ldr	r3, [r2, r3]
 801ec94:	699b      	ldr	r3, [r3, #24]
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	d00d      	beq.n	801ecb6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ec9a:	687a      	ldr	r2, [r7, #4]
 801ec9c:	23ac      	movs	r3, #172	@ 0xac
 801ec9e:	009b      	lsls	r3, r3, #2
 801eca0:	58d3      	ldr	r3, [r2, r3]
 801eca2:	699b      	ldr	r3, [r3, #24]
 801eca4:	687a      	ldr	r2, [r7, #4]
 801eca6:	7c12      	ldrb	r2, [r2, #16]
 801eca8:	2108      	movs	r1, #8
 801ecaa:	1879      	adds	r1, r7, r1
 801ecac:	0010      	movs	r0, r2
 801ecae:	4798      	blx	r3
 801ecb0:	0003      	movs	r3, r0
 801ecb2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ecb4:	e019      	b.n	801ecea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ecb6:	683a      	ldr	r2, [r7, #0]
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	0011      	movs	r1, r2
 801ecbc:	0018      	movs	r0, r3
 801ecbe:	f000 fa76 	bl	801f1ae <USBD_CtlError>
            err++;
 801ecc2:	210b      	movs	r1, #11
 801ecc4:	187b      	adds	r3, r7, r1
 801ecc6:	781a      	ldrb	r2, [r3, #0]
 801ecc8:	187b      	adds	r3, r7, r1
 801ecca:	3201      	adds	r2, #1
 801eccc:	701a      	strb	r2, [r3, #0]
          break;
 801ecce:	e00c      	b.n	801ecea <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801ecd0:	683a      	ldr	r2, [r7, #0]
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	0011      	movs	r1, r2
 801ecd6:	0018      	movs	r0, r3
 801ecd8:	f000 fa69 	bl	801f1ae <USBD_CtlError>
          err++;
 801ecdc:	210b      	movs	r1, #11
 801ecde:	187b      	adds	r3, r7, r1
 801ece0:	781a      	ldrb	r2, [r3, #0]
 801ece2:	187b      	adds	r3, r7, r1
 801ece4:	3201      	adds	r2, #1
 801ece6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801ece8:	e04b      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>
 801ecea:	e04a      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	7c1b      	ldrb	r3, [r3, #16]
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d10b      	bne.n	801ed0c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801ecf4:	687a      	ldr	r2, [r7, #4]
 801ecf6:	23ad      	movs	r3, #173	@ 0xad
 801ecf8:	009b      	lsls	r3, r3, #2
 801ecfa:	58d3      	ldr	r3, [r2, r3]
 801ecfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ecfe:	2208      	movs	r2, #8
 801ed00:	18ba      	adds	r2, r7, r2
 801ed02:	0010      	movs	r0, r2
 801ed04:	4798      	blx	r3
 801ed06:	0003      	movs	r3, r0
 801ed08:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ed0a:	e03a      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801ed0c:	683a      	ldr	r2, [r7, #0]
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	0011      	movs	r1, r2
 801ed12:	0018      	movs	r0, r3
 801ed14:	f000 fa4b 	bl	801f1ae <USBD_CtlError>
        err++;
 801ed18:	210b      	movs	r1, #11
 801ed1a:	187b      	adds	r3, r7, r1
 801ed1c:	781a      	ldrb	r2, [r3, #0]
 801ed1e:	187b      	adds	r3, r7, r1
 801ed20:	3201      	adds	r2, #1
 801ed22:	701a      	strb	r2, [r3, #0]
      break;
 801ed24:	e02d      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	7c1b      	ldrb	r3, [r3, #16]
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d10f      	bne.n	801ed4e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ed2e:	687a      	ldr	r2, [r7, #4]
 801ed30:	23ad      	movs	r3, #173	@ 0xad
 801ed32:	009b      	lsls	r3, r3, #2
 801ed34:	58d3      	ldr	r3, [r2, r3]
 801ed36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed38:	2208      	movs	r2, #8
 801ed3a:	18ba      	adds	r2, r7, r2
 801ed3c:	0010      	movs	r0, r2
 801ed3e:	4798      	blx	r3
 801ed40:	0003      	movs	r3, r0
 801ed42:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ed44:	68fb      	ldr	r3, [r7, #12]
 801ed46:	3301      	adds	r3, #1
 801ed48:	2207      	movs	r2, #7
 801ed4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ed4c:	e019      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801ed4e:	683a      	ldr	r2, [r7, #0]
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	0011      	movs	r1, r2
 801ed54:	0018      	movs	r0, r3
 801ed56:	f000 fa2a 	bl	801f1ae <USBD_CtlError>
        err++;
 801ed5a:	210b      	movs	r1, #11
 801ed5c:	187b      	adds	r3, r7, r1
 801ed5e:	781a      	ldrb	r2, [r3, #0]
 801ed60:	187b      	adds	r3, r7, r1
 801ed62:	3201      	adds	r2, #1
 801ed64:	701a      	strb	r2, [r3, #0]
      break;
 801ed66:	e00c      	b.n	801ed82 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801ed68:	683a      	ldr	r2, [r7, #0]
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	0011      	movs	r1, r2
 801ed6e:	0018      	movs	r0, r3
 801ed70:	f000 fa1d 	bl	801f1ae <USBD_CtlError>
      err++;
 801ed74:	210b      	movs	r1, #11
 801ed76:	187b      	adds	r3, r7, r1
 801ed78:	781a      	ldrb	r2, [r3, #0]
 801ed7a:	187b      	adds	r3, r7, r1
 801ed7c:	3201      	adds	r2, #1
 801ed7e:	701a      	strb	r2, [r3, #0]
      break;
 801ed80:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801ed82:	230b      	movs	r3, #11
 801ed84:	18fb      	adds	r3, r7, r3
 801ed86:	781b      	ldrb	r3, [r3, #0]
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d127      	bne.n	801eddc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801ed8c:	2108      	movs	r1, #8
 801ed8e:	187b      	adds	r3, r7, r1
 801ed90:	881b      	ldrh	r3, [r3, #0]
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	d019      	beq.n	801edca <USBD_GetDescriptor+0x342>
 801ed96:	683b      	ldr	r3, [r7, #0]
 801ed98:	88db      	ldrh	r3, [r3, #6]
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	d015      	beq.n	801edca <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801ed9e:	683b      	ldr	r3, [r7, #0]
 801eda0:	88da      	ldrh	r2, [r3, #6]
 801eda2:	187b      	adds	r3, r7, r1
 801eda4:	881b      	ldrh	r3, [r3, #0]
 801eda6:	1c18      	adds	r0, r3, #0
 801eda8:	1c11      	adds	r1, r2, #0
 801edaa:	b28a      	uxth	r2, r1
 801edac:	b283      	uxth	r3, r0
 801edae:	429a      	cmp	r2, r3
 801edb0:	d900      	bls.n	801edb4 <USBD_GetDescriptor+0x32c>
 801edb2:	1c01      	adds	r1, r0, #0
 801edb4:	b28a      	uxth	r2, r1
 801edb6:	2108      	movs	r1, #8
 801edb8:	187b      	adds	r3, r7, r1
 801edba:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801edbc:	187b      	adds	r3, r7, r1
 801edbe:	881a      	ldrh	r2, [r3, #0]
 801edc0:	68f9      	ldr	r1, [r7, #12]
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	0018      	movs	r0, r3
 801edc6:	f000 fa70 	bl	801f2aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801edca:	683b      	ldr	r3, [r7, #0]
 801edcc:	88db      	ldrh	r3, [r3, #6]
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d105      	bne.n	801edde <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	0018      	movs	r0, r3
 801edd6:	f000 fad2 	bl	801f37e <USBD_CtlSendStatus>
 801edda:	e000      	b.n	801edde <USBD_GetDescriptor+0x356>
    return;
 801eddc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801edde:	46bd      	mov	sp, r7
 801ede0:	b004      	add	sp, #16
 801ede2:	bd80      	pop	{r7, pc}
 801ede4:	08028e54 	.word	0x08028e54
 801ede8:	08028e74 	.word	0x08028e74

0801edec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801edec:	b590      	push	{r4, r7, lr}
 801edee:	b085      	sub	sp, #20
 801edf0:	af00      	add	r7, sp, #0
 801edf2:	6078      	str	r0, [r7, #4]
 801edf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801edf6:	683b      	ldr	r3, [r7, #0]
 801edf8:	889b      	ldrh	r3, [r3, #4]
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d13d      	bne.n	801ee7a <USBD_SetAddress+0x8e>
 801edfe:	683b      	ldr	r3, [r7, #0]
 801ee00:	88db      	ldrh	r3, [r3, #6]
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d139      	bne.n	801ee7a <USBD_SetAddress+0x8e>
 801ee06:	683b      	ldr	r3, [r7, #0]
 801ee08:	885b      	ldrh	r3, [r3, #2]
 801ee0a:	2b7f      	cmp	r3, #127	@ 0x7f
 801ee0c:	d835      	bhi.n	801ee7a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ee0e:	683b      	ldr	r3, [r7, #0]
 801ee10:	885b      	ldrh	r3, [r3, #2]
 801ee12:	b2da      	uxtb	r2, r3
 801ee14:	230f      	movs	r3, #15
 801ee16:	18fb      	adds	r3, r7, r3
 801ee18:	217f      	movs	r1, #127	@ 0x7f
 801ee1a:	400a      	ands	r2, r1
 801ee1c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ee1e:	687a      	ldr	r2, [r7, #4]
 801ee20:	23a7      	movs	r3, #167	@ 0xa7
 801ee22:	009b      	lsls	r3, r3, #2
 801ee24:	5cd3      	ldrb	r3, [r2, r3]
 801ee26:	2b03      	cmp	r3, #3
 801ee28:	d106      	bne.n	801ee38 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801ee2a:	683a      	ldr	r2, [r7, #0]
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	0011      	movs	r1, r2
 801ee30:	0018      	movs	r0, r3
 801ee32:	f000 f9bc 	bl	801f1ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ee36:	e027      	b.n	801ee88 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	240f      	movs	r4, #15
 801ee3c:	193a      	adds	r2, r7, r4
 801ee3e:	4914      	ldr	r1, [pc, #80]	@ (801ee90 <USBD_SetAddress+0xa4>)
 801ee40:	7812      	ldrb	r2, [r2, #0]
 801ee42:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ee44:	193b      	adds	r3, r7, r4
 801ee46:	781a      	ldrb	r2, [r3, #0]
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	0011      	movs	r1, r2
 801ee4c:	0018      	movs	r0, r3
 801ee4e:	f000 ff5d 	bl	801fd0c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	0018      	movs	r0, r3
 801ee56:	f000 fa92 	bl	801f37e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ee5a:	193b      	adds	r3, r7, r4
 801ee5c:	781b      	ldrb	r3, [r3, #0]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d005      	beq.n	801ee6e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ee62:	687a      	ldr	r2, [r7, #4]
 801ee64:	23a7      	movs	r3, #167	@ 0xa7
 801ee66:	009b      	lsls	r3, r3, #2
 801ee68:	2102      	movs	r1, #2
 801ee6a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ee6c:	e00c      	b.n	801ee88 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ee6e:	687a      	ldr	r2, [r7, #4]
 801ee70:	23a7      	movs	r3, #167	@ 0xa7
 801ee72:	009b      	lsls	r3, r3, #2
 801ee74:	2101      	movs	r1, #1
 801ee76:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ee78:	e006      	b.n	801ee88 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ee7a:	683a      	ldr	r2, [r7, #0]
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	0011      	movs	r1, r2
 801ee80:	0018      	movs	r0, r3
 801ee82:	f000 f994 	bl	801f1ae <USBD_CtlError>
  }
}
 801ee86:	46c0      	nop			@ (mov r8, r8)
 801ee88:	46c0      	nop			@ (mov r8, r8)
 801ee8a:	46bd      	mov	sp, r7
 801ee8c:	b005      	add	sp, #20
 801ee8e:	bd90      	pop	{r4, r7, pc}
 801ee90:	0000029e 	.word	0x0000029e

0801ee94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ee94:	b580      	push	{r7, lr}
 801ee96:	b082      	sub	sp, #8
 801ee98:	af00      	add	r7, sp, #0
 801ee9a:	6078      	str	r0, [r7, #4]
 801ee9c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ee9e:	683b      	ldr	r3, [r7, #0]
 801eea0:	885b      	ldrh	r3, [r3, #2]
 801eea2:	b2da      	uxtb	r2, r3
 801eea4:	4b4c      	ldr	r3, [pc, #304]	@ (801efd8 <USBD_SetConfig+0x144>)
 801eea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801eea8:	4b4b      	ldr	r3, [pc, #300]	@ (801efd8 <USBD_SetConfig+0x144>)
 801eeaa:	781b      	ldrb	r3, [r3, #0]
 801eeac:	2b01      	cmp	r3, #1
 801eeae:	d906      	bls.n	801eebe <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801eeb0:	683a      	ldr	r2, [r7, #0]
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	0011      	movs	r1, r2
 801eeb6:	0018      	movs	r0, r3
 801eeb8:	f000 f979 	bl	801f1ae <USBD_CtlError>
 801eebc:	e088      	b.n	801efd0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801eebe:	687a      	ldr	r2, [r7, #4]
 801eec0:	23a7      	movs	r3, #167	@ 0xa7
 801eec2:	009b      	lsls	r3, r3, #2
 801eec4:	5cd3      	ldrb	r3, [r2, r3]
 801eec6:	2b02      	cmp	r3, #2
 801eec8:	d002      	beq.n	801eed0 <USBD_SetConfig+0x3c>
 801eeca:	2b03      	cmp	r3, #3
 801eecc:	d029      	beq.n	801ef22 <USBD_SetConfig+0x8e>
 801eece:	e071      	b.n	801efb4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801eed0:	4b41      	ldr	r3, [pc, #260]	@ (801efd8 <USBD_SetConfig+0x144>)
 801eed2:	781b      	ldrb	r3, [r3, #0]
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d01f      	beq.n	801ef18 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801eed8:	4b3f      	ldr	r3, [pc, #252]	@ (801efd8 <USBD_SetConfig+0x144>)
 801eeda:	781b      	ldrb	r3, [r3, #0]
 801eedc:	001a      	movs	r2, r3
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801eee2:	687a      	ldr	r2, [r7, #4]
 801eee4:	23a7      	movs	r3, #167	@ 0xa7
 801eee6:	009b      	lsls	r3, r3, #2
 801eee8:	2103      	movs	r1, #3
 801eeea:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801eeec:	4b3a      	ldr	r3, [pc, #232]	@ (801efd8 <USBD_SetConfig+0x144>)
 801eeee:	781a      	ldrb	r2, [r3, #0]
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	0011      	movs	r1, r2
 801eef4:	0018      	movs	r0, r3
 801eef6:	f7ff f8c6 	bl	801e086 <USBD_SetClassConfig>
 801eefa:	0003      	movs	r3, r0
 801eefc:	2b02      	cmp	r3, #2
 801eefe:	d106      	bne.n	801ef0e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801ef00:	683a      	ldr	r2, [r7, #0]
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	0011      	movs	r1, r2
 801ef06:	0018      	movs	r0, r3
 801ef08:	f000 f951 	bl	801f1ae <USBD_CtlError>
            return;
 801ef0c:	e060      	b.n	801efd0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	0018      	movs	r0, r3
 801ef12:	f000 fa34 	bl	801f37e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ef16:	e05b      	b.n	801efd0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	0018      	movs	r0, r3
 801ef1c:	f000 fa2f 	bl	801f37e <USBD_CtlSendStatus>
        break;
 801ef20:	e056      	b.n	801efd0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801ef22:	4b2d      	ldr	r3, [pc, #180]	@ (801efd8 <USBD_SetConfig+0x144>)
 801ef24:	781b      	ldrb	r3, [r3, #0]
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d115      	bne.n	801ef56 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ef2a:	687a      	ldr	r2, [r7, #4]
 801ef2c:	23a7      	movs	r3, #167	@ 0xa7
 801ef2e:	009b      	lsls	r3, r3, #2
 801ef30:	2102      	movs	r1, #2
 801ef32:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801ef34:	4b28      	ldr	r3, [pc, #160]	@ (801efd8 <USBD_SetConfig+0x144>)
 801ef36:	781b      	ldrb	r3, [r3, #0]
 801ef38:	001a      	movs	r2, r3
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801ef3e:	4b26      	ldr	r3, [pc, #152]	@ (801efd8 <USBD_SetConfig+0x144>)
 801ef40:	781a      	ldrb	r2, [r3, #0]
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	0011      	movs	r1, r2
 801ef46:	0018      	movs	r0, r3
 801ef48:	f7ff f8c4 	bl	801e0d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	0018      	movs	r0, r3
 801ef50:	f000 fa15 	bl	801f37e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ef54:	e03c      	b.n	801efd0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801ef56:	4b20      	ldr	r3, [pc, #128]	@ (801efd8 <USBD_SetConfig+0x144>)
 801ef58:	781b      	ldrb	r3, [r3, #0]
 801ef5a:	001a      	movs	r2, r3
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	685b      	ldr	r3, [r3, #4]
 801ef60:	429a      	cmp	r2, r3
 801ef62:	d022      	beq.n	801efaa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	685b      	ldr	r3, [r3, #4]
 801ef68:	b2da      	uxtb	r2, r3
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	0011      	movs	r1, r2
 801ef6e:	0018      	movs	r0, r3
 801ef70:	f7ff f8b0 	bl	801e0d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801ef74:	4b18      	ldr	r3, [pc, #96]	@ (801efd8 <USBD_SetConfig+0x144>)
 801ef76:	781b      	ldrb	r3, [r3, #0]
 801ef78:	001a      	movs	r2, r3
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ef7e:	4b16      	ldr	r3, [pc, #88]	@ (801efd8 <USBD_SetConfig+0x144>)
 801ef80:	781a      	ldrb	r2, [r3, #0]
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	0011      	movs	r1, r2
 801ef86:	0018      	movs	r0, r3
 801ef88:	f7ff f87d 	bl	801e086 <USBD_SetClassConfig>
 801ef8c:	0003      	movs	r3, r0
 801ef8e:	2b02      	cmp	r3, #2
 801ef90:	d106      	bne.n	801efa0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801ef92:	683a      	ldr	r2, [r7, #0]
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	0011      	movs	r1, r2
 801ef98:	0018      	movs	r0, r3
 801ef9a:	f000 f908 	bl	801f1ae <USBD_CtlError>
            return;
 801ef9e:	e017      	b.n	801efd0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	0018      	movs	r0, r3
 801efa4:	f000 f9eb 	bl	801f37e <USBD_CtlSendStatus>
        break;
 801efa8:	e012      	b.n	801efd0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	0018      	movs	r0, r3
 801efae:	f000 f9e6 	bl	801f37e <USBD_CtlSendStatus>
        break;
 801efb2:	e00d      	b.n	801efd0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801efb4:	683a      	ldr	r2, [r7, #0]
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	0011      	movs	r1, r2
 801efba:	0018      	movs	r0, r3
 801efbc:	f000 f8f7 	bl	801f1ae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801efc0:	4b05      	ldr	r3, [pc, #20]	@ (801efd8 <USBD_SetConfig+0x144>)
 801efc2:	781a      	ldrb	r2, [r3, #0]
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	0011      	movs	r1, r2
 801efc8:	0018      	movs	r0, r3
 801efca:	f7ff f883 	bl	801e0d4 <USBD_ClrClassConfig>
        break;
 801efce:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801efd0:	46bd      	mov	sp, r7
 801efd2:	b002      	add	sp, #8
 801efd4:	bd80      	pop	{r7, pc}
 801efd6:	46c0      	nop			@ (mov r8, r8)
 801efd8:	200021b4 	.word	0x200021b4

0801efdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801efdc:	b580      	push	{r7, lr}
 801efde:	b082      	sub	sp, #8
 801efe0:	af00      	add	r7, sp, #0
 801efe2:	6078      	str	r0, [r7, #4]
 801efe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801efe6:	683b      	ldr	r3, [r7, #0]
 801efe8:	88db      	ldrh	r3, [r3, #6]
 801efea:	2b01      	cmp	r3, #1
 801efec:	d006      	beq.n	801effc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801efee:	683a      	ldr	r2, [r7, #0]
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	0011      	movs	r1, r2
 801eff4:	0018      	movs	r0, r3
 801eff6:	f000 f8da 	bl	801f1ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801effa:	e026      	b.n	801f04a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801effc:	687a      	ldr	r2, [r7, #4]
 801effe:	23a7      	movs	r3, #167	@ 0xa7
 801f000:	009b      	lsls	r3, r3, #2
 801f002:	5cd3      	ldrb	r3, [r2, r3]
 801f004:	2b02      	cmp	r3, #2
 801f006:	dc02      	bgt.n	801f00e <USBD_GetConfig+0x32>
 801f008:	2b00      	cmp	r3, #0
 801f00a:	dc03      	bgt.n	801f014 <USBD_GetConfig+0x38>
 801f00c:	e016      	b.n	801f03c <USBD_GetConfig+0x60>
 801f00e:	2b03      	cmp	r3, #3
 801f010:	d00c      	beq.n	801f02c <USBD_GetConfig+0x50>
 801f012:	e013      	b.n	801f03c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	2200      	movs	r2, #0
 801f018:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	3308      	adds	r3, #8
 801f01e:	0019      	movs	r1, r3
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	2201      	movs	r2, #1
 801f024:	0018      	movs	r0, r3
 801f026:	f000 f940 	bl	801f2aa <USBD_CtlSendData>
        break;
 801f02a:	e00e      	b.n	801f04a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	1d19      	adds	r1, r3, #4
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	2201      	movs	r2, #1
 801f034:	0018      	movs	r0, r3
 801f036:	f000 f938 	bl	801f2aa <USBD_CtlSendData>
        break;
 801f03a:	e006      	b.n	801f04a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801f03c:	683a      	ldr	r2, [r7, #0]
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	0011      	movs	r1, r2
 801f042:	0018      	movs	r0, r3
 801f044:	f000 f8b3 	bl	801f1ae <USBD_CtlError>
        break;
 801f048:	46c0      	nop			@ (mov r8, r8)
}
 801f04a:	46c0      	nop			@ (mov r8, r8)
 801f04c:	46bd      	mov	sp, r7
 801f04e:	b002      	add	sp, #8
 801f050:	bd80      	pop	{r7, pc}

0801f052 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f052:	b580      	push	{r7, lr}
 801f054:	b082      	sub	sp, #8
 801f056:	af00      	add	r7, sp, #0
 801f058:	6078      	str	r0, [r7, #4]
 801f05a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801f05c:	687a      	ldr	r2, [r7, #4]
 801f05e:	23a7      	movs	r3, #167	@ 0xa7
 801f060:	009b      	lsls	r3, r3, #2
 801f062:	5cd3      	ldrb	r3, [r2, r3]
 801f064:	3b01      	subs	r3, #1
 801f066:	2b02      	cmp	r3, #2
 801f068:	d822      	bhi.n	801f0b0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801f06a:	683b      	ldr	r3, [r7, #0]
 801f06c:	88db      	ldrh	r3, [r3, #6]
 801f06e:	2b02      	cmp	r3, #2
 801f070:	d006      	beq.n	801f080 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801f072:	683a      	ldr	r2, [r7, #0]
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	0011      	movs	r1, r2
 801f078:	0018      	movs	r0, r3
 801f07a:	f000 f898 	bl	801f1ae <USBD_CtlError>
        break;
 801f07e:	e01e      	b.n	801f0be <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	2201      	movs	r2, #1
 801f084:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801f086:	687a      	ldr	r2, [r7, #4]
 801f088:	23a9      	movs	r3, #169	@ 0xa9
 801f08a:	009b      	lsls	r3, r3, #2
 801f08c:	58d3      	ldr	r3, [r2, r3]
 801f08e:	2b00      	cmp	r3, #0
 801f090:	d005      	beq.n	801f09e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	68db      	ldr	r3, [r3, #12]
 801f096:	2202      	movs	r2, #2
 801f098:	431a      	orrs	r2, r3
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	330c      	adds	r3, #12
 801f0a2:	0019      	movs	r1, r3
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	2202      	movs	r2, #2
 801f0a8:	0018      	movs	r0, r3
 801f0aa:	f000 f8fe 	bl	801f2aa <USBD_CtlSendData>
      break;
 801f0ae:	e006      	b.n	801f0be <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801f0b0:	683a      	ldr	r2, [r7, #0]
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	0011      	movs	r1, r2
 801f0b6:	0018      	movs	r0, r3
 801f0b8:	f000 f879 	bl	801f1ae <USBD_CtlError>
      break;
 801f0bc:	46c0      	nop			@ (mov r8, r8)
  }
}
 801f0be:	46c0      	nop			@ (mov r8, r8)
 801f0c0:	46bd      	mov	sp, r7
 801f0c2:	b002      	add	sp, #8
 801f0c4:	bd80      	pop	{r7, pc}

0801f0c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801f0c6:	b580      	push	{r7, lr}
 801f0c8:	b082      	sub	sp, #8
 801f0ca:	af00      	add	r7, sp, #0
 801f0cc:	6078      	str	r0, [r7, #4]
 801f0ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801f0d0:	683b      	ldr	r3, [r7, #0]
 801f0d2:	885b      	ldrh	r3, [r3, #2]
 801f0d4:	2b01      	cmp	r3, #1
 801f0d6:	d108      	bne.n	801f0ea <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801f0d8:	687a      	ldr	r2, [r7, #4]
 801f0da:	23a9      	movs	r3, #169	@ 0xa9
 801f0dc:	009b      	lsls	r3, r3, #2
 801f0de:	2101      	movs	r1, #1
 801f0e0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	0018      	movs	r0, r3
 801f0e6:	f000 f94a 	bl	801f37e <USBD_CtlSendStatus>
  }
}
 801f0ea:	46c0      	nop			@ (mov r8, r8)
 801f0ec:	46bd      	mov	sp, r7
 801f0ee:	b002      	add	sp, #8
 801f0f0:	bd80      	pop	{r7, pc}

0801f0f2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801f0f2:	b580      	push	{r7, lr}
 801f0f4:	b082      	sub	sp, #8
 801f0f6:	af00      	add	r7, sp, #0
 801f0f8:	6078      	str	r0, [r7, #4]
 801f0fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801f0fc:	687a      	ldr	r2, [r7, #4]
 801f0fe:	23a7      	movs	r3, #167	@ 0xa7
 801f100:	009b      	lsls	r3, r3, #2
 801f102:	5cd3      	ldrb	r3, [r2, r3]
 801f104:	3b01      	subs	r3, #1
 801f106:	2b02      	cmp	r3, #2
 801f108:	d80d      	bhi.n	801f126 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801f10a:	683b      	ldr	r3, [r7, #0]
 801f10c:	885b      	ldrh	r3, [r3, #2]
 801f10e:	2b01      	cmp	r3, #1
 801f110:	d110      	bne.n	801f134 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801f112:	687a      	ldr	r2, [r7, #4]
 801f114:	23a9      	movs	r3, #169	@ 0xa9
 801f116:	009b      	lsls	r3, r3, #2
 801f118:	2100      	movs	r1, #0
 801f11a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	0018      	movs	r0, r3
 801f120:	f000 f92d 	bl	801f37e <USBD_CtlSendStatus>
      }
      break;
 801f124:	e006      	b.n	801f134 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801f126:	683a      	ldr	r2, [r7, #0]
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	0011      	movs	r1, r2
 801f12c:	0018      	movs	r0, r3
 801f12e:	f000 f83e 	bl	801f1ae <USBD_CtlError>
      break;
 801f132:	e000      	b.n	801f136 <USBD_ClrFeature+0x44>
      break;
 801f134:	46c0      	nop			@ (mov r8, r8)
  }
}
 801f136:	46c0      	nop			@ (mov r8, r8)
 801f138:	46bd      	mov	sp, r7
 801f13a:	b002      	add	sp, #8
 801f13c:	bd80      	pop	{r7, pc}

0801f13e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801f13e:	b580      	push	{r7, lr}
 801f140:	b082      	sub	sp, #8
 801f142:	af00      	add	r7, sp, #0
 801f144:	6078      	str	r0, [r7, #4]
 801f146:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801f148:	683b      	ldr	r3, [r7, #0]
 801f14a:	781a      	ldrb	r2, [r3, #0]
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801f150:	683b      	ldr	r3, [r7, #0]
 801f152:	785a      	ldrb	r2, [r3, #1]
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801f158:	683b      	ldr	r3, [r7, #0]
 801f15a:	3302      	adds	r3, #2
 801f15c:	781b      	ldrb	r3, [r3, #0]
 801f15e:	001a      	movs	r2, r3
 801f160:	683b      	ldr	r3, [r7, #0]
 801f162:	3303      	adds	r3, #3
 801f164:	781b      	ldrb	r3, [r3, #0]
 801f166:	021b      	lsls	r3, r3, #8
 801f168:	b29b      	uxth	r3, r3
 801f16a:	18d3      	adds	r3, r2, r3
 801f16c:	b29a      	uxth	r2, r3
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801f172:	683b      	ldr	r3, [r7, #0]
 801f174:	3304      	adds	r3, #4
 801f176:	781b      	ldrb	r3, [r3, #0]
 801f178:	001a      	movs	r2, r3
 801f17a:	683b      	ldr	r3, [r7, #0]
 801f17c:	3305      	adds	r3, #5
 801f17e:	781b      	ldrb	r3, [r3, #0]
 801f180:	021b      	lsls	r3, r3, #8
 801f182:	b29b      	uxth	r3, r3
 801f184:	18d3      	adds	r3, r2, r3
 801f186:	b29a      	uxth	r2, r3
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801f18c:	683b      	ldr	r3, [r7, #0]
 801f18e:	3306      	adds	r3, #6
 801f190:	781b      	ldrb	r3, [r3, #0]
 801f192:	001a      	movs	r2, r3
 801f194:	683b      	ldr	r3, [r7, #0]
 801f196:	3307      	adds	r3, #7
 801f198:	781b      	ldrb	r3, [r3, #0]
 801f19a:	021b      	lsls	r3, r3, #8
 801f19c:	b29b      	uxth	r3, r3
 801f19e:	18d3      	adds	r3, r2, r3
 801f1a0:	b29a      	uxth	r2, r3
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	80da      	strh	r2, [r3, #6]

}
 801f1a6:	46c0      	nop			@ (mov r8, r8)
 801f1a8:	46bd      	mov	sp, r7
 801f1aa:	b002      	add	sp, #8
 801f1ac:	bd80      	pop	{r7, pc}

0801f1ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801f1ae:	b580      	push	{r7, lr}
 801f1b0:	b082      	sub	sp, #8
 801f1b2:	af00      	add	r7, sp, #0
 801f1b4:	6078      	str	r0, [r7, #4]
 801f1b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	2180      	movs	r1, #128	@ 0x80
 801f1bc:	0018      	movs	r0, r3
 801f1be:	f000 fd1e 	bl	801fbfe <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	2100      	movs	r1, #0
 801f1c6:	0018      	movs	r0, r3
 801f1c8:	f000 fd19 	bl	801fbfe <USBD_LL_StallEP>
}
 801f1cc:	46c0      	nop			@ (mov r8, r8)
 801f1ce:	46bd      	mov	sp, r7
 801f1d0:	b002      	add	sp, #8
 801f1d2:	bd80      	pop	{r7, pc}

0801f1d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801f1d4:	b590      	push	{r4, r7, lr}
 801f1d6:	b087      	sub	sp, #28
 801f1d8:	af00      	add	r7, sp, #0
 801f1da:	60f8      	str	r0, [r7, #12]
 801f1dc:	60b9      	str	r1, [r7, #8]
 801f1de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801f1e0:	2417      	movs	r4, #23
 801f1e2:	193b      	adds	r3, r7, r4
 801f1e4:	2200      	movs	r2, #0
 801f1e6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d03c      	beq.n	801f268 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801f1ee:	68fb      	ldr	r3, [r7, #12]
 801f1f0:	0018      	movs	r0, r3
 801f1f2:	f000 f83d 	bl	801f270 <USBD_GetLen>
 801f1f6:	0003      	movs	r3, r0
 801f1f8:	3301      	adds	r3, #1
 801f1fa:	b29b      	uxth	r3, r3
 801f1fc:	18db      	adds	r3, r3, r3
 801f1fe:	b29a      	uxth	r2, r3
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801f204:	193b      	adds	r3, r7, r4
 801f206:	781b      	ldrb	r3, [r3, #0]
 801f208:	193a      	adds	r2, r7, r4
 801f20a:	1c59      	adds	r1, r3, #1
 801f20c:	7011      	strb	r1, [r2, #0]
 801f20e:	001a      	movs	r2, r3
 801f210:	68bb      	ldr	r3, [r7, #8]
 801f212:	189b      	adds	r3, r3, r2
 801f214:	687a      	ldr	r2, [r7, #4]
 801f216:	7812      	ldrb	r2, [r2, #0]
 801f218:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801f21a:	193b      	adds	r3, r7, r4
 801f21c:	781b      	ldrb	r3, [r3, #0]
 801f21e:	193a      	adds	r2, r7, r4
 801f220:	1c59      	adds	r1, r3, #1
 801f222:	7011      	strb	r1, [r2, #0]
 801f224:	001a      	movs	r2, r3
 801f226:	68bb      	ldr	r3, [r7, #8]
 801f228:	189b      	adds	r3, r3, r2
 801f22a:	2203      	movs	r2, #3
 801f22c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801f22e:	e017      	b.n	801f260 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	1c5a      	adds	r2, r3, #1
 801f234:	60fa      	str	r2, [r7, #12]
 801f236:	2417      	movs	r4, #23
 801f238:	193a      	adds	r2, r7, r4
 801f23a:	7812      	ldrb	r2, [r2, #0]
 801f23c:	1939      	adds	r1, r7, r4
 801f23e:	1c50      	adds	r0, r2, #1
 801f240:	7008      	strb	r0, [r1, #0]
 801f242:	0011      	movs	r1, r2
 801f244:	68ba      	ldr	r2, [r7, #8]
 801f246:	1852      	adds	r2, r2, r1
 801f248:	781b      	ldrb	r3, [r3, #0]
 801f24a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801f24c:	193b      	adds	r3, r7, r4
 801f24e:	781b      	ldrb	r3, [r3, #0]
 801f250:	193a      	adds	r2, r7, r4
 801f252:	1c59      	adds	r1, r3, #1
 801f254:	7011      	strb	r1, [r2, #0]
 801f256:	001a      	movs	r2, r3
 801f258:	68bb      	ldr	r3, [r7, #8]
 801f25a:	189b      	adds	r3, r3, r2
 801f25c:	2200      	movs	r2, #0
 801f25e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801f260:	68fb      	ldr	r3, [r7, #12]
 801f262:	781b      	ldrb	r3, [r3, #0]
 801f264:	2b00      	cmp	r3, #0
 801f266:	d1e3      	bne.n	801f230 <USBD_GetString+0x5c>
    }
  }
}
 801f268:	46c0      	nop			@ (mov r8, r8)
 801f26a:	46bd      	mov	sp, r7
 801f26c:	b007      	add	sp, #28
 801f26e:	bd90      	pop	{r4, r7, pc}

0801f270 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801f270:	b580      	push	{r7, lr}
 801f272:	b084      	sub	sp, #16
 801f274:	af00      	add	r7, sp, #0
 801f276:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801f278:	230f      	movs	r3, #15
 801f27a:	18fb      	adds	r3, r7, r3
 801f27c:	2200      	movs	r2, #0
 801f27e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801f280:	e008      	b.n	801f294 <USBD_GetLen+0x24>
  {
    len++;
 801f282:	210f      	movs	r1, #15
 801f284:	187b      	adds	r3, r7, r1
 801f286:	781a      	ldrb	r2, [r3, #0]
 801f288:	187b      	adds	r3, r7, r1
 801f28a:	3201      	adds	r2, #1
 801f28c:	701a      	strb	r2, [r3, #0]
    buf++;
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	3301      	adds	r3, #1
 801f292:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	781b      	ldrb	r3, [r3, #0]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d1f2      	bne.n	801f282 <USBD_GetLen+0x12>
  }

  return len;
 801f29c:	230f      	movs	r3, #15
 801f29e:	18fb      	adds	r3, r7, r3
 801f2a0:	781b      	ldrb	r3, [r3, #0]
}
 801f2a2:	0018      	movs	r0, r3
 801f2a4:	46bd      	mov	sp, r7
 801f2a6:	b004      	add	sp, #16
 801f2a8:	bd80      	pop	{r7, pc}

0801f2aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801f2aa:	b580      	push	{r7, lr}
 801f2ac:	b084      	sub	sp, #16
 801f2ae:	af00      	add	r7, sp, #0
 801f2b0:	60f8      	str	r0, [r7, #12]
 801f2b2:	60b9      	str	r1, [r7, #8]
 801f2b4:	1dbb      	adds	r3, r7, #6
 801f2b6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801f2b8:	68fa      	ldr	r2, [r7, #12]
 801f2ba:	23a5      	movs	r3, #165	@ 0xa5
 801f2bc:	009b      	lsls	r3, r3, #2
 801f2be:	2102      	movs	r1, #2
 801f2c0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801f2c2:	1dbb      	adds	r3, r7, #6
 801f2c4:	881a      	ldrh	r2, [r3, #0]
 801f2c6:	68fb      	ldr	r3, [r7, #12]
 801f2c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801f2ca:	1dbb      	adds	r3, r7, #6
 801f2cc:	881a      	ldrh	r2, [r3, #0]
 801f2ce:	68fb      	ldr	r3, [r7, #12]
 801f2d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f2d2:	1dbb      	adds	r3, r7, #6
 801f2d4:	881b      	ldrh	r3, [r3, #0]
 801f2d6:	68ba      	ldr	r2, [r7, #8]
 801f2d8:	68f8      	ldr	r0, [r7, #12]
 801f2da:	2100      	movs	r1, #0
 801f2dc:	f000 fd41 	bl	801fd62 <USBD_LL_Transmit>

  return USBD_OK;
 801f2e0:	2300      	movs	r3, #0
}
 801f2e2:	0018      	movs	r0, r3
 801f2e4:	46bd      	mov	sp, r7
 801f2e6:	b004      	add	sp, #16
 801f2e8:	bd80      	pop	{r7, pc}

0801f2ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801f2ea:	b580      	push	{r7, lr}
 801f2ec:	b084      	sub	sp, #16
 801f2ee:	af00      	add	r7, sp, #0
 801f2f0:	60f8      	str	r0, [r7, #12]
 801f2f2:	60b9      	str	r1, [r7, #8]
 801f2f4:	1dbb      	adds	r3, r7, #6
 801f2f6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f2f8:	1dbb      	adds	r3, r7, #6
 801f2fa:	881b      	ldrh	r3, [r3, #0]
 801f2fc:	68ba      	ldr	r2, [r7, #8]
 801f2fe:	68f8      	ldr	r0, [r7, #12]
 801f300:	2100      	movs	r1, #0
 801f302:	f000 fd2e 	bl	801fd62 <USBD_LL_Transmit>

  return USBD_OK;
 801f306:	2300      	movs	r3, #0
}
 801f308:	0018      	movs	r0, r3
 801f30a:	46bd      	mov	sp, r7
 801f30c:	b004      	add	sp, #16
 801f30e:	bd80      	pop	{r7, pc}

0801f310 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801f310:	b580      	push	{r7, lr}
 801f312:	b084      	sub	sp, #16
 801f314:	af00      	add	r7, sp, #0
 801f316:	60f8      	str	r0, [r7, #12]
 801f318:	60b9      	str	r1, [r7, #8]
 801f31a:	1dbb      	adds	r3, r7, #6
 801f31c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801f31e:	68fa      	ldr	r2, [r7, #12]
 801f320:	23a5      	movs	r3, #165	@ 0xa5
 801f322:	009b      	lsls	r3, r3, #2
 801f324:	2103      	movs	r1, #3
 801f326:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801f328:	1dbb      	adds	r3, r7, #6
 801f32a:	8819      	ldrh	r1, [r3, #0]
 801f32c:	68fa      	ldr	r2, [r7, #12]
 801f32e:	23ae      	movs	r3, #174	@ 0xae
 801f330:	005b      	lsls	r3, r3, #1
 801f332:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801f334:	1dbb      	adds	r3, r7, #6
 801f336:	8819      	ldrh	r1, [r3, #0]
 801f338:	68fa      	ldr	r2, [r7, #12]
 801f33a:	23b0      	movs	r3, #176	@ 0xb0
 801f33c:	005b      	lsls	r3, r3, #1
 801f33e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f340:	1dbb      	adds	r3, r7, #6
 801f342:	881b      	ldrh	r3, [r3, #0]
 801f344:	68ba      	ldr	r2, [r7, #8]
 801f346:	68f8      	ldr	r0, [r7, #12]
 801f348:	2100      	movs	r1, #0
 801f34a:	f000 fd41 	bl	801fdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f34e:	2300      	movs	r3, #0
}
 801f350:	0018      	movs	r0, r3
 801f352:	46bd      	mov	sp, r7
 801f354:	b004      	add	sp, #16
 801f356:	bd80      	pop	{r7, pc}

0801f358 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801f358:	b580      	push	{r7, lr}
 801f35a:	b084      	sub	sp, #16
 801f35c:	af00      	add	r7, sp, #0
 801f35e:	60f8      	str	r0, [r7, #12]
 801f360:	60b9      	str	r1, [r7, #8]
 801f362:	1dbb      	adds	r3, r7, #6
 801f364:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f366:	1dbb      	adds	r3, r7, #6
 801f368:	881b      	ldrh	r3, [r3, #0]
 801f36a:	68ba      	ldr	r2, [r7, #8]
 801f36c:	68f8      	ldr	r0, [r7, #12]
 801f36e:	2100      	movs	r1, #0
 801f370:	f000 fd2e 	bl	801fdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f374:	2300      	movs	r3, #0
}
 801f376:	0018      	movs	r0, r3
 801f378:	46bd      	mov	sp, r7
 801f37a:	b004      	add	sp, #16
 801f37c:	bd80      	pop	{r7, pc}

0801f37e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801f37e:	b580      	push	{r7, lr}
 801f380:	b082      	sub	sp, #8
 801f382:	af00      	add	r7, sp, #0
 801f384:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801f386:	687a      	ldr	r2, [r7, #4]
 801f388:	23a5      	movs	r3, #165	@ 0xa5
 801f38a:	009b      	lsls	r3, r3, #2
 801f38c:	2104      	movs	r1, #4
 801f38e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801f390:	6878      	ldr	r0, [r7, #4]
 801f392:	2300      	movs	r3, #0
 801f394:	2200      	movs	r2, #0
 801f396:	2100      	movs	r1, #0
 801f398:	f000 fce3 	bl	801fd62 <USBD_LL_Transmit>

  return USBD_OK;
 801f39c:	2300      	movs	r3, #0
}
 801f39e:	0018      	movs	r0, r3
 801f3a0:	46bd      	mov	sp, r7
 801f3a2:	b002      	add	sp, #8
 801f3a4:	bd80      	pop	{r7, pc}

0801f3a6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801f3a6:	b580      	push	{r7, lr}
 801f3a8:	b082      	sub	sp, #8
 801f3aa:	af00      	add	r7, sp, #0
 801f3ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801f3ae:	687a      	ldr	r2, [r7, #4]
 801f3b0:	23a5      	movs	r3, #165	@ 0xa5
 801f3b2:	009b      	lsls	r3, r3, #2
 801f3b4:	2105      	movs	r1, #5
 801f3b6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f3b8:	6878      	ldr	r0, [r7, #4]
 801f3ba:	2300      	movs	r3, #0
 801f3bc:	2200      	movs	r2, #0
 801f3be:	2100      	movs	r1, #0
 801f3c0:	f000 fd06 	bl	801fdd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f3c4:	2300      	movs	r3, #0
}
 801f3c6:	0018      	movs	r0, r3
 801f3c8:	46bd      	mov	sp, r7
 801f3ca:	b002      	add	sp, #8
 801f3cc:	bd80      	pop	{r7, pc}
	...

0801f3d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f3d0:	b580      	push	{r7, lr}
 801f3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f3d4:	4914      	ldr	r1, [pc, #80]	@ (801f428 <MX_USB_DEVICE_Init+0x58>)
 801f3d6:	4b15      	ldr	r3, [pc, #84]	@ (801f42c <MX_USB_DEVICE_Init+0x5c>)
 801f3d8:	2200      	movs	r2, #0
 801f3da:	0018      	movs	r0, r3
 801f3dc:	f7fe fdec 	bl	801dfb8 <USBD_Init>
 801f3e0:	1e03      	subs	r3, r0, #0
 801f3e2:	d001      	beq.n	801f3e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801f3e4:	f7ea ff44 	bl	800a270 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f3e8:	4a11      	ldr	r2, [pc, #68]	@ (801f430 <MX_USB_DEVICE_Init+0x60>)
 801f3ea:	4b10      	ldr	r3, [pc, #64]	@ (801f42c <MX_USB_DEVICE_Init+0x5c>)
 801f3ec:	0011      	movs	r1, r2
 801f3ee:	0018      	movs	r0, r3
 801f3f0:	f7fe fe13 	bl	801e01a <USBD_RegisterClass>
 801f3f4:	1e03      	subs	r3, r0, #0
 801f3f6:	d001      	beq.n	801f3fc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801f3f8:	f7ea ff3a 	bl	800a270 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f3fc:	4a0d      	ldr	r2, [pc, #52]	@ (801f434 <MX_USB_DEVICE_Init+0x64>)
 801f3fe:	4b0b      	ldr	r3, [pc, #44]	@ (801f42c <MX_USB_DEVICE_Init+0x5c>)
 801f400:	0011      	movs	r1, r2
 801f402:	0018      	movs	r0, r3
 801f404:	f7fe fd28 	bl	801de58 <USBD_CDC_RegisterInterface>
 801f408:	1e03      	subs	r3, r0, #0
 801f40a:	d001      	beq.n	801f410 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801f40c:	f7ea ff30 	bl	800a270 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f410:	4b06      	ldr	r3, [pc, #24]	@ (801f42c <MX_USB_DEVICE_Init+0x5c>)
 801f412:	0018      	movs	r0, r3
 801f414:	f7fe fe21 	bl	801e05a <USBD_Start>
 801f418:	1e03      	subs	r3, r0, #0
 801f41a:	d001      	beq.n	801f420 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801f41c:	f7ea ff28 	bl	800a270 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f420:	46c0      	nop			@ (mov r8, r8)
 801f422:	46bd      	mov	sp, r7
 801f424:	bd80      	pop	{r7, pc}
 801f426:	46c0      	nop			@ (mov r8, r8)
 801f428:	20000214 	.word	0x20000214
 801f42c:	200021b8 	.word	0x200021b8
 801f430:	20000100 	.word	0x20000100
 801f434:	20000204 	.word	0x20000204

0801f438 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801f438:	b580      	push	{r7, lr}
 801f43a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f43c:	4907      	ldr	r1, [pc, #28]	@ (801f45c <CDC_Init_FS+0x24>)
 801f43e:	4b08      	ldr	r3, [pc, #32]	@ (801f460 <CDC_Init_FS+0x28>)
 801f440:	2200      	movs	r2, #0
 801f442:	0018      	movs	r0, r3
 801f444:	f7fe fd23 	bl	801de8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f448:	4a06      	ldr	r2, [pc, #24]	@ (801f464 <CDC_Init_FS+0x2c>)
 801f44a:	4b05      	ldr	r3, [pc, #20]	@ (801f460 <CDC_Init_FS+0x28>)
 801f44c:	0011      	movs	r1, r2
 801f44e:	0018      	movs	r0, r3
 801f450:	f7fe fd39 	bl	801dec6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801f454:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801f456:	0018      	movs	r0, r3
 801f458:	46bd      	mov	sp, r7
 801f45a:	bd80      	pop	{r7, pc}
 801f45c:	2000293c 	.word	0x2000293c
 801f460:	200021b8 	.word	0x200021b8
 801f464:	2000253c 	.word	0x2000253c

0801f468 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801f468:	b580      	push	{r7, lr}
 801f46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801f46c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801f46e:	0018      	movs	r0, r3
 801f470:	46bd      	mov	sp, r7
 801f472:	bd80      	pop	{r7, pc}

0801f474 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801f474:	b580      	push	{r7, lr}
 801f476:	b082      	sub	sp, #8
 801f478:	af00      	add	r7, sp, #0
 801f47a:	6039      	str	r1, [r7, #0]
 801f47c:	0011      	movs	r1, r2
 801f47e:	1dfb      	adds	r3, r7, #7
 801f480:	1c02      	adds	r2, r0, #0
 801f482:	701a      	strb	r2, [r3, #0]
 801f484:	1d3b      	adds	r3, r7, #4
 801f486:	1c0a      	adds	r2, r1, #0
 801f488:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801f48a:	1dfb      	adds	r3, r7, #7
 801f48c:	781b      	ldrb	r3, [r3, #0]
 801f48e:	2b23      	cmp	r3, #35	@ 0x23
 801f490:	d804      	bhi.n	801f49c <CDC_Control_FS+0x28>
 801f492:	009a      	lsls	r2, r3, #2
 801f494:	4b04      	ldr	r3, [pc, #16]	@ (801f4a8 <CDC_Control_FS+0x34>)
 801f496:	18d3      	adds	r3, r2, r3
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801f49c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801f49e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801f4a0:	0018      	movs	r0, r3
 801f4a2:	46bd      	mov	sp, r7
 801f4a4:	b002      	add	sp, #8
 801f4a6:	bd80      	pop	{r7, pc}
 801f4a8:	08028e8c 	.word	0x08028e8c

0801f4ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801f4ac:	b580      	push	{r7, lr}
 801f4ae:	b082      	sub	sp, #8
 801f4b0:	af00      	add	r7, sp, #0
 801f4b2:	6078      	str	r0, [r7, #4]
 801f4b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801f4b6:	4b12      	ldr	r3, [pc, #72]	@ (801f500 <CDC_Receive_FS+0x54>)
 801f4b8:	781b      	ldrb	r3, [r3, #0]
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d013      	beq.n	801f4e6 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801f4be:	683b      	ldr	r3, [r7, #0]
 801f4c0:	681b      	ldr	r3, [r3, #0]
 801f4c2:	b29a      	uxth	r2, r3
 801f4c4:	2301      	movs	r3, #1
 801f4c6:	425b      	negs	r3, r3
 801f4c8:	6879      	ldr	r1, [r7, #4]
 801f4ca:	480e      	ldr	r0, [pc, #56]	@ (801f504 <CDC_Receive_FS+0x58>)
 801f4cc:	f7fa fa46 	bl	801995c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f4d0:	687a      	ldr	r2, [r7, #4]
 801f4d2:	4b0d      	ldr	r3, [pc, #52]	@ (801f508 <CDC_Receive_FS+0x5c>)
 801f4d4:	0011      	movs	r1, r2
 801f4d6:	0018      	movs	r0, r3
 801f4d8:	f7fe fcf5 	bl	801dec6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f4dc:	4b0a      	ldr	r3, [pc, #40]	@ (801f508 <CDC_Receive_FS+0x5c>)
 801f4de:	0018      	movs	r0, r3
 801f4e0:	f7fe fd3c 	bl	801df5c <USBD_CDC_ReceivePacket>
 801f4e4:	e006      	b.n	801f4f4 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801f4e6:	683b      	ldr	r3, [r7, #0]
 801f4e8:	681a      	ldr	r2, [r3, #0]
 801f4ea:	4b08      	ldr	r3, [pc, #32]	@ (801f50c <CDC_Receive_FS+0x60>)
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	18d2      	adds	r2, r2, r3
 801f4f0:	4b06      	ldr	r3, [pc, #24]	@ (801f50c <CDC_Receive_FS+0x60>)
 801f4f2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801f4f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801f4f6:	0018      	movs	r0, r3
 801f4f8:	46bd      	mov	sp, r7
 801f4fa:	b002      	add	sp, #8
 801f4fc:	bd80      	pop	{r7, pc}
 801f4fe:	46c0      	nop			@ (mov r8, r8)
 801f500:	2000247c 	.word	0x2000247c
 801f504:	20002480 	.word	0x20002480
 801f508:	200021b8 	.word	0x200021b8
 801f50c:	20002538 	.word	0x20002538

0801f510 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801f510:	b5b0      	push	{r4, r5, r7, lr}
 801f512:	b084      	sub	sp, #16
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]
 801f518:	000a      	movs	r2, r1
 801f51a:	1cbb      	adds	r3, r7, #2
 801f51c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801f51e:	230f      	movs	r3, #15
 801f520:	18fb      	adds	r3, r7, r3
 801f522:	2200      	movs	r2, #0
 801f524:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801f526:	4a11      	ldr	r2, [pc, #68]	@ (801f56c <CDC_Transmit_FS+0x5c>)
 801f528:	23ae      	movs	r3, #174	@ 0xae
 801f52a:	009b      	lsls	r3, r3, #2
 801f52c:	58d3      	ldr	r3, [r2, r3]
 801f52e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801f530:	68ba      	ldr	r2, [r7, #8]
 801f532:	2385      	movs	r3, #133	@ 0x85
 801f534:	009b      	lsls	r3, r3, #2
 801f536:	58d3      	ldr	r3, [r2, r3]
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d001      	beq.n	801f540 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801f53c:	2301      	movs	r3, #1
 801f53e:	e010      	b.n	801f562 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801f540:	1cbb      	adds	r3, r7, #2
 801f542:	881a      	ldrh	r2, [r3, #0]
 801f544:	6879      	ldr	r1, [r7, #4]
 801f546:	4b09      	ldr	r3, [pc, #36]	@ (801f56c <CDC_Transmit_FS+0x5c>)
 801f548:	0018      	movs	r0, r3
 801f54a:	f7fe fca0 	bl	801de8e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801f54e:	250f      	movs	r5, #15
 801f550:	197c      	adds	r4, r7, r5
 801f552:	4b06      	ldr	r3, [pc, #24]	@ (801f56c <CDC_Transmit_FS+0x5c>)
 801f554:	0018      	movs	r0, r3
 801f556:	f7fe fcca 	bl	801deee <USBD_CDC_TransmitPacket>
 801f55a:	0003      	movs	r3, r0
 801f55c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801f55e:	197b      	adds	r3, r7, r5
 801f560:	781b      	ldrb	r3, [r3, #0]
}
 801f562:	0018      	movs	r0, r3
 801f564:	46bd      	mov	sp, r7
 801f566:	b004      	add	sp, #16
 801f568:	bdb0      	pop	{r4, r5, r7, pc}
 801f56a:	46c0      	nop			@ (mov r8, r8)
 801f56c:	200021b8 	.word	0x200021b8

0801f570 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801f570:	b580      	push	{r7, lr}
 801f572:	af00      	add	r7, sp, #0
  ESPProg = true;
 801f574:	4b02      	ldr	r3, [pc, #8]	@ (801f580 <EnableESPProg+0x10>)
 801f576:	2201      	movs	r2, #1
 801f578:	701a      	strb	r2, [r3, #0]
}
 801f57a:	46c0      	nop			@ (mov r8, r8)
 801f57c:	46bd      	mov	sp, r7
 801f57e:	bd80      	pop	{r7, pc}
 801f580:	2000247c 	.word	0x2000247c

0801f584 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801f584:	b580      	push	{r7, lr}
 801f586:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801f588:	4b01      	ldr	r3, [pc, #4]	@ (801f590 <GetUsbRxPointer+0xc>)
}
 801f58a:	0018      	movs	r0, r3
 801f58c:	46bd      	mov	sp, r7
 801f58e:	bd80      	pop	{r7, pc}
 801f590:	2000253c 	.word	0x2000253c

0801f594 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801f594:	b580      	push	{r7, lr}
 801f596:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801f598:	4b07      	ldr	r3, [pc, #28]	@ (801f5b8 <ResetUsbRxDataSize+0x24>)
 801f59a:	2200      	movs	r2, #0
 801f59c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801f59e:	4a07      	ldr	r2, [pc, #28]	@ (801f5bc <ResetUsbRxDataSize+0x28>)
 801f5a0:	4b07      	ldr	r3, [pc, #28]	@ (801f5c0 <ResetUsbRxDataSize+0x2c>)
 801f5a2:	0011      	movs	r1, r2
 801f5a4:	0018      	movs	r0, r3
 801f5a6:	f7fe fc8e 	bl	801dec6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f5aa:	4b05      	ldr	r3, [pc, #20]	@ (801f5c0 <ResetUsbRxDataSize+0x2c>)
 801f5ac:	0018      	movs	r0, r3
 801f5ae:	f7fe fcd5 	bl	801df5c <USBD_CDC_ReceivePacket>
}
 801f5b2:	46c0      	nop			@ (mov r8, r8)
 801f5b4:	46bd      	mov	sp, r7
 801f5b6:	bd80      	pop	{r7, pc}
 801f5b8:	20002538 	.word	0x20002538
 801f5bc:	2000253c 	.word	0x2000253c
 801f5c0:	200021b8 	.word	0x200021b8

0801f5c4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801f5c4:	b580      	push	{r7, lr}
 801f5c6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801f5c8:	4b02      	ldr	r3, [pc, #8]	@ (801f5d4 <GetUsbRxDataSize+0x10>)
 801f5ca:	681b      	ldr	r3, [r3, #0]
}
 801f5cc:	0018      	movs	r0, r3
 801f5ce:	46bd      	mov	sp, r7
 801f5d0:	bd80      	pop	{r7, pc}
 801f5d2:	46c0      	nop			@ (mov r8, r8)
 801f5d4:	20002538 	.word	0x20002538

0801f5d8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801f5d8:	b580      	push	{r7, lr}
 801f5da:	b082      	sub	sp, #8
 801f5dc:	af00      	add	r7, sp, #0
 801f5de:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801f5e0:	687a      	ldr	r2, [r7, #4]
 801f5e2:	4b07      	ldr	r3, [pc, #28]	@ (801f600 <GetUsbRxNextChunk+0x28>)
 801f5e4:	18d2      	adds	r2, r2, r3
 801f5e6:	4b07      	ldr	r3, [pc, #28]	@ (801f604 <GetUsbRxNextChunk+0x2c>)
 801f5e8:	0011      	movs	r1, r2
 801f5ea:	0018      	movs	r0, r3
 801f5ec:	f7fe fc6b 	bl	801dec6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f5f0:	4b04      	ldr	r3, [pc, #16]	@ (801f604 <GetUsbRxNextChunk+0x2c>)
 801f5f2:	0018      	movs	r0, r3
 801f5f4:	f7fe fcb2 	bl	801df5c <USBD_CDC_ReceivePacket>
}
 801f5f8:	46c0      	nop			@ (mov r8, r8)
 801f5fa:	46bd      	mov	sp, r7
 801f5fc:	b002      	add	sp, #8
 801f5fe:	bd80      	pop	{r7, pc}
 801f600:	2000253c 	.word	0x2000253c
 801f604:	200021b8 	.word	0x200021b8

0801f608 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f608:	b580      	push	{r7, lr}
 801f60a:	b082      	sub	sp, #8
 801f60c:	af00      	add	r7, sp, #0
 801f60e:	0002      	movs	r2, r0
 801f610:	6039      	str	r1, [r7, #0]
 801f612:	1dfb      	adds	r3, r7, #7
 801f614:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f616:	683b      	ldr	r3, [r7, #0]
 801f618:	2212      	movs	r2, #18
 801f61a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801f61c:	4b02      	ldr	r3, [pc, #8]	@ (801f628 <USBD_FS_DeviceDescriptor+0x20>)
}
 801f61e:	0018      	movs	r0, r3
 801f620:	46bd      	mov	sp, r7
 801f622:	b002      	add	sp, #8
 801f624:	bd80      	pop	{r7, pc}
 801f626:	46c0      	nop			@ (mov r8, r8)
 801f628:	20000230 	.word	0x20000230

0801f62c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f62c:	b580      	push	{r7, lr}
 801f62e:	b082      	sub	sp, #8
 801f630:	af00      	add	r7, sp, #0
 801f632:	0002      	movs	r2, r0
 801f634:	6039      	str	r1, [r7, #0]
 801f636:	1dfb      	adds	r3, r7, #7
 801f638:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f63a:	683b      	ldr	r3, [r7, #0]
 801f63c:	2204      	movs	r2, #4
 801f63e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801f640:	4b02      	ldr	r3, [pc, #8]	@ (801f64c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801f642:	0018      	movs	r0, r3
 801f644:	46bd      	mov	sp, r7
 801f646:	b002      	add	sp, #8
 801f648:	bd80      	pop	{r7, pc}
 801f64a:	46c0      	nop			@ (mov r8, r8)
 801f64c:	20000244 	.word	0x20000244

0801f650 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f650:	b580      	push	{r7, lr}
 801f652:	b082      	sub	sp, #8
 801f654:	af00      	add	r7, sp, #0
 801f656:	0002      	movs	r2, r0
 801f658:	6039      	str	r1, [r7, #0]
 801f65a:	1dfb      	adds	r3, r7, #7
 801f65c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801f65e:	1dfb      	adds	r3, r7, #7
 801f660:	781b      	ldrb	r3, [r3, #0]
 801f662:	2b00      	cmp	r3, #0
 801f664:	d106      	bne.n	801f674 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f666:	683a      	ldr	r2, [r7, #0]
 801f668:	4908      	ldr	r1, [pc, #32]	@ (801f68c <USBD_FS_ProductStrDescriptor+0x3c>)
 801f66a:	4b09      	ldr	r3, [pc, #36]	@ (801f690 <USBD_FS_ProductStrDescriptor+0x40>)
 801f66c:	0018      	movs	r0, r3
 801f66e:	f7ff fdb1 	bl	801f1d4 <USBD_GetString>
 801f672:	e005      	b.n	801f680 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f674:	683a      	ldr	r2, [r7, #0]
 801f676:	4905      	ldr	r1, [pc, #20]	@ (801f68c <USBD_FS_ProductStrDescriptor+0x3c>)
 801f678:	4b05      	ldr	r3, [pc, #20]	@ (801f690 <USBD_FS_ProductStrDescriptor+0x40>)
 801f67a:	0018      	movs	r0, r3
 801f67c:	f7ff fdaa 	bl	801f1d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f680:	4b02      	ldr	r3, [pc, #8]	@ (801f68c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801f682:	0018      	movs	r0, r3
 801f684:	46bd      	mov	sp, r7
 801f686:	b002      	add	sp, #8
 801f688:	bd80      	pop	{r7, pc}
 801f68a:	46c0      	nop			@ (mov r8, r8)
 801f68c:	20002d3c 	.word	0x20002d3c
 801f690:	08028898 	.word	0x08028898

0801f694 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f694:	b580      	push	{r7, lr}
 801f696:	b082      	sub	sp, #8
 801f698:	af00      	add	r7, sp, #0
 801f69a:	0002      	movs	r2, r0
 801f69c:	6039      	str	r1, [r7, #0]
 801f69e:	1dfb      	adds	r3, r7, #7
 801f6a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f6a2:	683a      	ldr	r2, [r7, #0]
 801f6a4:	4904      	ldr	r1, [pc, #16]	@ (801f6b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801f6a6:	4b05      	ldr	r3, [pc, #20]	@ (801f6bc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801f6a8:	0018      	movs	r0, r3
 801f6aa:	f7ff fd93 	bl	801f1d4 <USBD_GetString>
  return USBD_StrDesc;
 801f6ae:	4b02      	ldr	r3, [pc, #8]	@ (801f6b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801f6b0:	0018      	movs	r0, r3
 801f6b2:	46bd      	mov	sp, r7
 801f6b4:	b002      	add	sp, #8
 801f6b6:	bd80      	pop	{r7, pc}
 801f6b8:	20002d3c 	.word	0x20002d3c
 801f6bc:	080288b0 	.word	0x080288b0

0801f6c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f6c0:	b580      	push	{r7, lr}
 801f6c2:	b082      	sub	sp, #8
 801f6c4:	af00      	add	r7, sp, #0
 801f6c6:	0002      	movs	r2, r0
 801f6c8:	6039      	str	r1, [r7, #0]
 801f6ca:	1dfb      	adds	r3, r7, #7
 801f6cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801f6ce:	683b      	ldr	r3, [r7, #0]
 801f6d0:	221a      	movs	r2, #26
 801f6d2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801f6d4:	f000 f84c 	bl	801f770 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801f6d8:	4b02      	ldr	r3, [pc, #8]	@ (801f6e4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801f6da:	0018      	movs	r0, r3
 801f6dc:	46bd      	mov	sp, r7
 801f6de:	b002      	add	sp, #8
 801f6e0:	bd80      	pop	{r7, pc}
 801f6e2:	46c0      	nop			@ (mov r8, r8)
 801f6e4:	20000248 	.word	0x20000248

0801f6e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f6e8:	b580      	push	{r7, lr}
 801f6ea:	b082      	sub	sp, #8
 801f6ec:	af00      	add	r7, sp, #0
 801f6ee:	0002      	movs	r2, r0
 801f6f0:	6039      	str	r1, [r7, #0]
 801f6f2:	1dfb      	adds	r3, r7, #7
 801f6f4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801f6f6:	1dfb      	adds	r3, r7, #7
 801f6f8:	781b      	ldrb	r3, [r3, #0]
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	d106      	bne.n	801f70c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f6fe:	683a      	ldr	r2, [r7, #0]
 801f700:	4908      	ldr	r1, [pc, #32]	@ (801f724 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801f702:	4b09      	ldr	r3, [pc, #36]	@ (801f728 <USBD_FS_ConfigStrDescriptor+0x40>)
 801f704:	0018      	movs	r0, r3
 801f706:	f7ff fd65 	bl	801f1d4 <USBD_GetString>
 801f70a:	e005      	b.n	801f718 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f70c:	683a      	ldr	r2, [r7, #0]
 801f70e:	4905      	ldr	r1, [pc, #20]	@ (801f724 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801f710:	4b05      	ldr	r3, [pc, #20]	@ (801f728 <USBD_FS_ConfigStrDescriptor+0x40>)
 801f712:	0018      	movs	r0, r3
 801f714:	f7ff fd5e 	bl	801f1d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f718:	4b02      	ldr	r3, [pc, #8]	@ (801f724 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801f71a:	0018      	movs	r0, r3
 801f71c:	46bd      	mov	sp, r7
 801f71e:	b002      	add	sp, #8
 801f720:	bd80      	pop	{r7, pc}
 801f722:	46c0      	nop			@ (mov r8, r8)
 801f724:	20002d3c 	.word	0x20002d3c
 801f728:	080288c4 	.word	0x080288c4

0801f72c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f72c:	b580      	push	{r7, lr}
 801f72e:	b082      	sub	sp, #8
 801f730:	af00      	add	r7, sp, #0
 801f732:	0002      	movs	r2, r0
 801f734:	6039      	str	r1, [r7, #0]
 801f736:	1dfb      	adds	r3, r7, #7
 801f738:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801f73a:	1dfb      	adds	r3, r7, #7
 801f73c:	781b      	ldrb	r3, [r3, #0]
 801f73e:	2b00      	cmp	r3, #0
 801f740:	d106      	bne.n	801f750 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f742:	683a      	ldr	r2, [r7, #0]
 801f744:	4908      	ldr	r1, [pc, #32]	@ (801f768 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801f746:	4b09      	ldr	r3, [pc, #36]	@ (801f76c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801f748:	0018      	movs	r0, r3
 801f74a:	f7ff fd43 	bl	801f1d4 <USBD_GetString>
 801f74e:	e005      	b.n	801f75c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f750:	683a      	ldr	r2, [r7, #0]
 801f752:	4905      	ldr	r1, [pc, #20]	@ (801f768 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801f754:	4b05      	ldr	r3, [pc, #20]	@ (801f76c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801f756:	0018      	movs	r0, r3
 801f758:	f7ff fd3c 	bl	801f1d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f75c:	4b02      	ldr	r3, [pc, #8]	@ (801f768 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801f75e:	0018      	movs	r0, r3
 801f760:	46bd      	mov	sp, r7
 801f762:	b002      	add	sp, #8
 801f764:	bd80      	pop	{r7, pc}
 801f766:	46c0      	nop			@ (mov r8, r8)
 801f768:	20002d3c 	.word	0x20002d3c
 801f76c:	080288d0 	.word	0x080288d0

0801f770 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801f770:	b580      	push	{r7, lr}
 801f772:	b084      	sub	sp, #16
 801f774:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f776:	4b10      	ldr	r3, [pc, #64]	@ (801f7b8 <Get_SerialNum+0x48>)
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f77c:	4b0f      	ldr	r3, [pc, #60]	@ (801f7bc <Get_SerialNum+0x4c>)
 801f77e:	681b      	ldr	r3, [r3, #0]
 801f780:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f782:	4b0f      	ldr	r3, [pc, #60]	@ (801f7c0 <Get_SerialNum+0x50>)
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801f788:	68fa      	ldr	r2, [r7, #12]
 801f78a:	687b      	ldr	r3, [r7, #4]
 801f78c:	18d3      	adds	r3, r2, r3
 801f78e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801f790:	68fb      	ldr	r3, [r7, #12]
 801f792:	2b00      	cmp	r3, #0
 801f794:	d00b      	beq.n	801f7ae <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f796:	490b      	ldr	r1, [pc, #44]	@ (801f7c4 <Get_SerialNum+0x54>)
 801f798:	68fb      	ldr	r3, [r7, #12]
 801f79a:	2208      	movs	r2, #8
 801f79c:	0018      	movs	r0, r3
 801f79e:	f000 f815 	bl	801f7cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f7a2:	4909      	ldr	r1, [pc, #36]	@ (801f7c8 <Get_SerialNum+0x58>)
 801f7a4:	68bb      	ldr	r3, [r7, #8]
 801f7a6:	2204      	movs	r2, #4
 801f7a8:	0018      	movs	r0, r3
 801f7aa:	f000 f80f 	bl	801f7cc <IntToUnicode>
  }
}
 801f7ae:	46c0      	nop			@ (mov r8, r8)
 801f7b0:	46bd      	mov	sp, r7
 801f7b2:	b004      	add	sp, #16
 801f7b4:	bd80      	pop	{r7, pc}
 801f7b6:	46c0      	nop			@ (mov r8, r8)
 801f7b8:	1ff80050 	.word	0x1ff80050
 801f7bc:	1ff80054 	.word	0x1ff80054
 801f7c0:	1ff80058 	.word	0x1ff80058
 801f7c4:	2000024a 	.word	0x2000024a
 801f7c8:	2000025a 	.word	0x2000025a

0801f7cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b086      	sub	sp, #24
 801f7d0:	af00      	add	r7, sp, #0
 801f7d2:	60f8      	str	r0, [r7, #12]
 801f7d4:	60b9      	str	r1, [r7, #8]
 801f7d6:	1dfb      	adds	r3, r7, #7
 801f7d8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801f7da:	2117      	movs	r1, #23
 801f7dc:	187b      	adds	r3, r7, r1
 801f7de:	2200      	movs	r2, #0
 801f7e0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801f7e2:	187b      	adds	r3, r7, r1
 801f7e4:	2200      	movs	r2, #0
 801f7e6:	701a      	strb	r2, [r3, #0]
 801f7e8:	e02f      	b.n	801f84a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	0f1b      	lsrs	r3, r3, #28
 801f7ee:	2b09      	cmp	r3, #9
 801f7f0:	d80d      	bhi.n	801f80e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801f7f2:	68fb      	ldr	r3, [r7, #12]
 801f7f4:	0f1b      	lsrs	r3, r3, #28
 801f7f6:	b2da      	uxtb	r2, r3
 801f7f8:	2317      	movs	r3, #23
 801f7fa:	18fb      	adds	r3, r7, r3
 801f7fc:	781b      	ldrb	r3, [r3, #0]
 801f7fe:	005b      	lsls	r3, r3, #1
 801f800:	0019      	movs	r1, r3
 801f802:	68bb      	ldr	r3, [r7, #8]
 801f804:	185b      	adds	r3, r3, r1
 801f806:	3230      	adds	r2, #48	@ 0x30
 801f808:	b2d2      	uxtb	r2, r2
 801f80a:	701a      	strb	r2, [r3, #0]
 801f80c:	e00c      	b.n	801f828 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f80e:	68fb      	ldr	r3, [r7, #12]
 801f810:	0f1b      	lsrs	r3, r3, #28
 801f812:	b2da      	uxtb	r2, r3
 801f814:	2317      	movs	r3, #23
 801f816:	18fb      	adds	r3, r7, r3
 801f818:	781b      	ldrb	r3, [r3, #0]
 801f81a:	005b      	lsls	r3, r3, #1
 801f81c:	0019      	movs	r1, r3
 801f81e:	68bb      	ldr	r3, [r7, #8]
 801f820:	185b      	adds	r3, r3, r1
 801f822:	3237      	adds	r2, #55	@ 0x37
 801f824:	b2d2      	uxtb	r2, r2
 801f826:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	011b      	lsls	r3, r3, #4
 801f82c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801f82e:	2117      	movs	r1, #23
 801f830:	187b      	adds	r3, r7, r1
 801f832:	781b      	ldrb	r3, [r3, #0]
 801f834:	005b      	lsls	r3, r3, #1
 801f836:	3301      	adds	r3, #1
 801f838:	68ba      	ldr	r2, [r7, #8]
 801f83a:	18d3      	adds	r3, r2, r3
 801f83c:	2200      	movs	r2, #0
 801f83e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801f840:	187b      	adds	r3, r7, r1
 801f842:	781a      	ldrb	r2, [r3, #0]
 801f844:	187b      	adds	r3, r7, r1
 801f846:	3201      	adds	r2, #1
 801f848:	701a      	strb	r2, [r3, #0]
 801f84a:	2317      	movs	r3, #23
 801f84c:	18fa      	adds	r2, r7, r3
 801f84e:	1dfb      	adds	r3, r7, #7
 801f850:	7812      	ldrb	r2, [r2, #0]
 801f852:	781b      	ldrb	r3, [r3, #0]
 801f854:	429a      	cmp	r2, r3
 801f856:	d3c8      	bcc.n	801f7ea <IntToUnicode+0x1e>
  }
}
 801f858:	46c0      	nop			@ (mov r8, r8)
 801f85a:	46c0      	nop			@ (mov r8, r8)
 801f85c:	46bd      	mov	sp, r7
 801f85e:	b006      	add	sp, #24
 801f860:	bd80      	pop	{r7, pc}
	...

0801f864 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801f864:	b580      	push	{r7, lr}
 801f866:	b082      	sub	sp, #8
 801f868:	af00      	add	r7, sp, #0
 801f86a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	681b      	ldr	r3, [r3, #0]
 801f870:	4a0a      	ldr	r2, [pc, #40]	@ (801f89c <HAL_PCD_MspInit+0x38>)
 801f872:	4293      	cmp	r3, r2
 801f874:	d10e      	bne.n	801f894 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801f876:	4b0a      	ldr	r3, [pc, #40]	@ (801f8a0 <HAL_PCD_MspInit+0x3c>)
 801f878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801f87a:	4b09      	ldr	r3, [pc, #36]	@ (801f8a0 <HAL_PCD_MspInit+0x3c>)
 801f87c:	2180      	movs	r1, #128	@ 0x80
 801f87e:	0409      	lsls	r1, r1, #16
 801f880:	430a      	orrs	r2, r1
 801f882:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801f884:	2200      	movs	r2, #0
 801f886:	2100      	movs	r1, #0
 801f888:	201f      	movs	r0, #31
 801f88a:	f7f2 f847 	bl	801191c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801f88e:	201f      	movs	r0, #31
 801f890:	f7f2 f859 	bl	8011946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801f894:	46c0      	nop			@ (mov r8, r8)
 801f896:	46bd      	mov	sp, r7
 801f898:	b002      	add	sp, #8
 801f89a:	bd80      	pop	{r7, pc}
 801f89c:	40005c00 	.word	0x40005c00
 801f8a0:	40021000 	.word	0x40021000

0801f8a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f8a4:	b580      	push	{r7, lr}
 801f8a6:	b082      	sub	sp, #8
 801f8a8:	af00      	add	r7, sp, #0
 801f8aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f8ac:	687a      	ldr	r2, [r7, #4]
 801f8ae:	23bc      	movs	r3, #188	@ 0xbc
 801f8b0:	009b      	lsls	r3, r3, #2
 801f8b2:	58d2      	ldr	r2, [r2, r3]
 801f8b4:	687b      	ldr	r3, [r7, #4]
 801f8b6:	21ac      	movs	r1, #172	@ 0xac
 801f8b8:	0089      	lsls	r1, r1, #2
 801f8ba:	468c      	mov	ip, r1
 801f8bc:	4463      	add	r3, ip
 801f8be:	0019      	movs	r1, r3
 801f8c0:	0010      	movs	r0, r2
 801f8c2:	f7fe fc1d 	bl	801e100 <USBD_LL_SetupStage>
}
 801f8c6:	46c0      	nop			@ (mov r8, r8)
 801f8c8:	46bd      	mov	sp, r7
 801f8ca:	b002      	add	sp, #8
 801f8cc:	bd80      	pop	{r7, pc}

0801f8ce <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f8ce:	b590      	push	{r4, r7, lr}
 801f8d0:	b083      	sub	sp, #12
 801f8d2:	af00      	add	r7, sp, #0
 801f8d4:	6078      	str	r0, [r7, #4]
 801f8d6:	000a      	movs	r2, r1
 801f8d8:	1cfb      	adds	r3, r7, #3
 801f8da:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f8dc:	687a      	ldr	r2, [r7, #4]
 801f8de:	23bc      	movs	r3, #188	@ 0xbc
 801f8e0:	009b      	lsls	r3, r3, #2
 801f8e2:	58d4      	ldr	r4, [r2, r3]
 801f8e4:	1cfb      	adds	r3, r7, #3
 801f8e6:	781a      	ldrb	r2, [r3, #0]
 801f8e8:	6878      	ldr	r0, [r7, #4]
 801f8ea:	23be      	movs	r3, #190	@ 0xbe
 801f8ec:	0059      	lsls	r1, r3, #1
 801f8ee:	0013      	movs	r3, r2
 801f8f0:	009b      	lsls	r3, r3, #2
 801f8f2:	189b      	adds	r3, r3, r2
 801f8f4:	00db      	lsls	r3, r3, #3
 801f8f6:	18c3      	adds	r3, r0, r3
 801f8f8:	185b      	adds	r3, r3, r1
 801f8fa:	681a      	ldr	r2, [r3, #0]
 801f8fc:	1cfb      	adds	r3, r7, #3
 801f8fe:	781b      	ldrb	r3, [r3, #0]
 801f900:	0019      	movs	r1, r3
 801f902:	0020      	movs	r0, r4
 801f904:	f7fe fc5a 	bl	801e1bc <USBD_LL_DataOutStage>
}
 801f908:	46c0      	nop			@ (mov r8, r8)
 801f90a:	46bd      	mov	sp, r7
 801f90c:	b003      	add	sp, #12
 801f90e:	bd90      	pop	{r4, r7, pc}

0801f910 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f910:	b580      	push	{r7, lr}
 801f912:	b082      	sub	sp, #8
 801f914:	af00      	add	r7, sp, #0
 801f916:	6078      	str	r0, [r7, #4]
 801f918:	000a      	movs	r2, r1
 801f91a:	1cfb      	adds	r3, r7, #3
 801f91c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f91e:	687a      	ldr	r2, [r7, #4]
 801f920:	23bc      	movs	r3, #188	@ 0xbc
 801f922:	009b      	lsls	r3, r3, #2
 801f924:	58d0      	ldr	r0, [r2, r3]
 801f926:	1cfb      	adds	r3, r7, #3
 801f928:	781a      	ldrb	r2, [r3, #0]
 801f92a:	6879      	ldr	r1, [r7, #4]
 801f92c:	0013      	movs	r3, r2
 801f92e:	009b      	lsls	r3, r3, #2
 801f930:	189b      	adds	r3, r3, r2
 801f932:	00db      	lsls	r3, r3, #3
 801f934:	18cb      	adds	r3, r1, r3
 801f936:	333c      	adds	r3, #60	@ 0x3c
 801f938:	681a      	ldr	r2, [r3, #0]
 801f93a:	1cfb      	adds	r3, r7, #3
 801f93c:	781b      	ldrb	r3, [r3, #0]
 801f93e:	0019      	movs	r1, r3
 801f940:	f7fe fcbe 	bl	801e2c0 <USBD_LL_DataInStage>
}
 801f944:	46c0      	nop			@ (mov r8, r8)
 801f946:	46bd      	mov	sp, r7
 801f948:	b002      	add	sp, #8
 801f94a:	bd80      	pop	{r7, pc}

0801f94c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f94c:	b580      	push	{r7, lr}
 801f94e:	b082      	sub	sp, #8
 801f950:	af00      	add	r7, sp, #0
 801f952:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f954:	687a      	ldr	r2, [r7, #4]
 801f956:	23bc      	movs	r3, #188	@ 0xbc
 801f958:	009b      	lsls	r3, r3, #2
 801f95a:	58d3      	ldr	r3, [r2, r3]
 801f95c:	0018      	movs	r0, r3
 801f95e:	f7fe fdf5 	bl	801e54c <USBD_LL_SOF>
}
 801f962:	46c0      	nop			@ (mov r8, r8)
 801f964:	46bd      	mov	sp, r7
 801f966:	b002      	add	sp, #8
 801f968:	bd80      	pop	{r7, pc}

0801f96a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f96a:	b580      	push	{r7, lr}
 801f96c:	b084      	sub	sp, #16
 801f96e:	af00      	add	r7, sp, #0
 801f970:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f972:	230f      	movs	r3, #15
 801f974:	18fb      	adds	r3, r7, r3
 801f976:	2201      	movs	r2, #1
 801f978:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	689b      	ldr	r3, [r3, #8]
 801f97e:	2b02      	cmp	r3, #2
 801f980:	d001      	beq.n	801f986 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801f982:	f7ea fc75 	bl	800a270 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f986:	687a      	ldr	r2, [r7, #4]
 801f988:	23bc      	movs	r3, #188	@ 0xbc
 801f98a:	009b      	lsls	r3, r3, #2
 801f98c:	58d2      	ldr	r2, [r2, r3]
 801f98e:	230f      	movs	r3, #15
 801f990:	18fb      	adds	r3, r7, r3
 801f992:	781b      	ldrb	r3, [r3, #0]
 801f994:	0019      	movs	r1, r3
 801f996:	0010      	movs	r0, r2
 801f998:	f7fe fd97 	bl	801e4ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f99c:	687a      	ldr	r2, [r7, #4]
 801f99e:	23bc      	movs	r3, #188	@ 0xbc
 801f9a0:	009b      	lsls	r3, r3, #2
 801f9a2:	58d3      	ldr	r3, [r2, r3]
 801f9a4:	0018      	movs	r0, r3
 801f9a6:	f7fe fd48 	bl	801e43a <USBD_LL_Reset>
}
 801f9aa:	46c0      	nop			@ (mov r8, r8)
 801f9ac:	46bd      	mov	sp, r7
 801f9ae:	b004      	add	sp, #16
 801f9b0:	bd80      	pop	{r7, pc}
	...

0801f9b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f9b4:	b580      	push	{r7, lr}
 801f9b6:	b082      	sub	sp, #8
 801f9b8:	af00      	add	r7, sp, #0
 801f9ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f9bc:	687a      	ldr	r2, [r7, #4]
 801f9be:	23bc      	movs	r3, #188	@ 0xbc
 801f9c0:	009b      	lsls	r3, r3, #2
 801f9c2:	58d3      	ldr	r3, [r2, r3]
 801f9c4:	0018      	movs	r0, r3
 801f9c6:	f7fe fd91 	bl	801e4ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	699b      	ldr	r3, [r3, #24]
 801f9ce:	2b00      	cmp	r3, #0
 801f9d0:	d005      	beq.n	801f9de <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f9d2:	4b05      	ldr	r3, [pc, #20]	@ (801f9e8 <HAL_PCD_SuspendCallback+0x34>)
 801f9d4:	691a      	ldr	r2, [r3, #16]
 801f9d6:	4b04      	ldr	r3, [pc, #16]	@ (801f9e8 <HAL_PCD_SuspendCallback+0x34>)
 801f9d8:	2106      	movs	r1, #6
 801f9da:	430a      	orrs	r2, r1
 801f9dc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801f9de:	46c0      	nop			@ (mov r8, r8)
 801f9e0:	46bd      	mov	sp, r7
 801f9e2:	b002      	add	sp, #8
 801f9e4:	bd80      	pop	{r7, pc}
 801f9e6:	46c0      	nop			@ (mov r8, r8)
 801f9e8:	e000ed00 	.word	0xe000ed00

0801f9ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f9ec:	b580      	push	{r7, lr}
 801f9ee:	b082      	sub	sp, #8
 801f9f0:	af00      	add	r7, sp, #0
 801f9f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801f9f4:	687b      	ldr	r3, [r7, #4]
 801f9f6:	699b      	ldr	r3, [r3, #24]
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	d007      	beq.n	801fa0c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f9fc:	4b09      	ldr	r3, [pc, #36]	@ (801fa24 <HAL_PCD_ResumeCallback+0x38>)
 801f9fe:	691a      	ldr	r2, [r3, #16]
 801fa00:	4b08      	ldr	r3, [pc, #32]	@ (801fa24 <HAL_PCD_ResumeCallback+0x38>)
 801fa02:	2106      	movs	r1, #6
 801fa04:	438a      	bics	r2, r1
 801fa06:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801fa08:	f000 fa44 	bl	801fe94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801fa0c:	687a      	ldr	r2, [r7, #4]
 801fa0e:	23bc      	movs	r3, #188	@ 0xbc
 801fa10:	009b      	lsls	r3, r3, #2
 801fa12:	58d3      	ldr	r3, [r2, r3]
 801fa14:	0018      	movs	r0, r3
 801fa16:	f7fe fd81 	bl	801e51c <USBD_LL_Resume>
}
 801fa1a:	46c0      	nop			@ (mov r8, r8)
 801fa1c:	46bd      	mov	sp, r7
 801fa1e:	b002      	add	sp, #8
 801fa20:	bd80      	pop	{r7, pc}
 801fa22:	46c0      	nop			@ (mov r8, r8)
 801fa24:	e000ed00 	.word	0xe000ed00

0801fa28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801fa28:	b580      	push	{r7, lr}
 801fa2a:	b082      	sub	sp, #8
 801fa2c:	af00      	add	r7, sp, #0
 801fa2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801fa30:	4a2d      	ldr	r2, [pc, #180]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa32:	23bc      	movs	r3, #188	@ 0xbc
 801fa34:	009b      	lsls	r3, r3, #2
 801fa36:	6879      	ldr	r1, [r7, #4]
 801fa38:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801fa3a:	687a      	ldr	r2, [r7, #4]
 801fa3c:	23b0      	movs	r3, #176	@ 0xb0
 801fa3e:	009b      	lsls	r3, r3, #2
 801fa40:	4929      	ldr	r1, [pc, #164]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa42:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801fa44:	4b28      	ldr	r3, [pc, #160]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa46:	4a29      	ldr	r2, [pc, #164]	@ (801faec <USBD_LL_Init+0xc4>)
 801fa48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801fa4a:	4b27      	ldr	r3, [pc, #156]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa4c:	2208      	movs	r2, #8
 801fa4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801fa50:	4b25      	ldr	r3, [pc, #148]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa52:	2202      	movs	r2, #2
 801fa54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801fa56:	4b24      	ldr	r3, [pc, #144]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa58:	2202      	movs	r2, #2
 801fa5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801fa5c:	4b22      	ldr	r3, [pc, #136]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa5e:	2200      	movs	r2, #0
 801fa60:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801fa62:	4b21      	ldr	r3, [pc, #132]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa64:	2200      	movs	r2, #0
 801fa66:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801fa68:	4b1f      	ldr	r3, [pc, #124]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa6a:	2200      	movs	r2, #0
 801fa6c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801fa6e:	4b1e      	ldr	r3, [pc, #120]	@ (801fae8 <USBD_LL_Init+0xc0>)
 801fa70:	0018      	movs	r0, r3
 801fa72:	f7f5 ff95 	bl	80159a0 <HAL_PCD_Init>
 801fa76:	1e03      	subs	r3, r0, #0
 801fa78:	d001      	beq.n	801fa7e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801fa7a:	f7ea fbf9 	bl	800a270 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801fa7e:	687a      	ldr	r2, [r7, #4]
 801fa80:	23b0      	movs	r3, #176	@ 0xb0
 801fa82:	009b      	lsls	r3, r3, #2
 801fa84:	58d0      	ldr	r0, [r2, r3]
 801fa86:	2318      	movs	r3, #24
 801fa88:	2200      	movs	r2, #0
 801fa8a:	2100      	movs	r1, #0
 801fa8c:	f7f7 fd56 	bl	801753c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801fa90:	687a      	ldr	r2, [r7, #4]
 801fa92:	23b0      	movs	r3, #176	@ 0xb0
 801fa94:	009b      	lsls	r3, r3, #2
 801fa96:	58d0      	ldr	r0, [r2, r3]
 801fa98:	2358      	movs	r3, #88	@ 0x58
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	2180      	movs	r1, #128	@ 0x80
 801fa9e:	f7f7 fd4d 	bl	801753c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801faa2:	687a      	ldr	r2, [r7, #4]
 801faa4:	23b0      	movs	r3, #176	@ 0xb0
 801faa6:	009b      	lsls	r3, r3, #2
 801faa8:	58d0      	ldr	r0, [r2, r3]
 801faaa:	23c0      	movs	r3, #192	@ 0xc0
 801faac:	2200      	movs	r2, #0
 801faae:	2181      	movs	r1, #129	@ 0x81
 801fab0:	f7f7 fd44 	bl	801753c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801fab4:	687a      	ldr	r2, [r7, #4]
 801fab6:	23b0      	movs	r3, #176	@ 0xb0
 801fab8:	009b      	lsls	r3, r3, #2
 801faba:	58d0      	ldr	r0, [r2, r3]
 801fabc:	2388      	movs	r3, #136	@ 0x88
 801fabe:	005b      	lsls	r3, r3, #1
 801fac0:	2200      	movs	r2, #0
 801fac2:	2101      	movs	r1, #1
 801fac4:	f7f7 fd3a 	bl	801753c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801fac8:	687a      	ldr	r2, [r7, #4]
 801faca:	23b0      	movs	r3, #176	@ 0xb0
 801facc:	009b      	lsls	r3, r3, #2
 801face:	58d0      	ldr	r0, [r2, r3]
 801fad0:	2380      	movs	r3, #128	@ 0x80
 801fad2:	005b      	lsls	r3, r3, #1
 801fad4:	2200      	movs	r2, #0
 801fad6:	2182      	movs	r1, #130	@ 0x82
 801fad8:	f7f7 fd30 	bl	801753c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801fadc:	2300      	movs	r3, #0
}
 801fade:	0018      	movs	r0, r3
 801fae0:	46bd      	mov	sp, r7
 801fae2:	b002      	add	sp, #8
 801fae4:	bd80      	pop	{r7, pc}
 801fae6:	46c0      	nop			@ (mov r8, r8)
 801fae8:	20002f3c 	.word	0x20002f3c
 801faec:	40005c00 	.word	0x40005c00

0801faf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801faf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801faf2:	b085      	sub	sp, #20
 801faf4:	af00      	add	r7, sp, #0
 801faf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801faf8:	210f      	movs	r1, #15
 801fafa:	187b      	adds	r3, r7, r1
 801fafc:	2200      	movs	r2, #0
 801fafe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fb00:	260e      	movs	r6, #14
 801fb02:	19bb      	adds	r3, r7, r6
 801fb04:	2200      	movs	r2, #0
 801fb06:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801fb08:	687a      	ldr	r2, [r7, #4]
 801fb0a:	23b0      	movs	r3, #176	@ 0xb0
 801fb0c:	009b      	lsls	r3, r3, #2
 801fb0e:	58d3      	ldr	r3, [r2, r3]
 801fb10:	000d      	movs	r5, r1
 801fb12:	187c      	adds	r4, r7, r1
 801fb14:	0018      	movs	r0, r3
 801fb16:	f7f6 f843 	bl	8015ba0 <HAL_PCD_Start>
 801fb1a:	0003      	movs	r3, r0
 801fb1c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fb1e:	19bc      	adds	r4, r7, r6
 801fb20:	197b      	adds	r3, r7, r5
 801fb22:	781b      	ldrb	r3, [r3, #0]
 801fb24:	0018      	movs	r0, r3
 801fb26:	f000 f9bc 	bl	801fea2 <USBD_Get_USB_Status>
 801fb2a:	0003      	movs	r3, r0
 801fb2c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fb2e:	19bb      	adds	r3, r7, r6
 801fb30:	781b      	ldrb	r3, [r3, #0]
}
 801fb32:	0018      	movs	r0, r3
 801fb34:	46bd      	mov	sp, r7
 801fb36:	b005      	add	sp, #20
 801fb38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fb3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801fb3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fb3c:	b085      	sub	sp, #20
 801fb3e:	af00      	add	r7, sp, #0
 801fb40:	6078      	str	r0, [r7, #4]
 801fb42:	000c      	movs	r4, r1
 801fb44:	0010      	movs	r0, r2
 801fb46:	0019      	movs	r1, r3
 801fb48:	1cfb      	adds	r3, r7, #3
 801fb4a:	1c22      	adds	r2, r4, #0
 801fb4c:	701a      	strb	r2, [r3, #0]
 801fb4e:	1cbb      	adds	r3, r7, #2
 801fb50:	1c02      	adds	r2, r0, #0
 801fb52:	701a      	strb	r2, [r3, #0]
 801fb54:	003b      	movs	r3, r7
 801fb56:	1c0a      	adds	r2, r1, #0
 801fb58:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fb5a:	260f      	movs	r6, #15
 801fb5c:	19bb      	adds	r3, r7, r6
 801fb5e:	2200      	movs	r2, #0
 801fb60:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fb62:	250e      	movs	r5, #14
 801fb64:	197b      	adds	r3, r7, r5
 801fb66:	2200      	movs	r2, #0
 801fb68:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801fb6a:	687a      	ldr	r2, [r7, #4]
 801fb6c:	23b0      	movs	r3, #176	@ 0xb0
 801fb6e:	009b      	lsls	r3, r3, #2
 801fb70:	58d0      	ldr	r0, [r2, r3]
 801fb72:	19bc      	adds	r4, r7, r6
 801fb74:	1cbb      	adds	r3, r7, #2
 801fb76:	781d      	ldrb	r5, [r3, #0]
 801fb78:	003b      	movs	r3, r7
 801fb7a:	881a      	ldrh	r2, [r3, #0]
 801fb7c:	1cfb      	adds	r3, r7, #3
 801fb7e:	7819      	ldrb	r1, [r3, #0]
 801fb80:	002b      	movs	r3, r5
 801fb82:	f7f6 f9a2 	bl	8015eca <HAL_PCD_EP_Open>
 801fb86:	0003      	movs	r3, r0
 801fb88:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fb8a:	250e      	movs	r5, #14
 801fb8c:	197c      	adds	r4, r7, r5
 801fb8e:	19bb      	adds	r3, r7, r6
 801fb90:	781b      	ldrb	r3, [r3, #0]
 801fb92:	0018      	movs	r0, r3
 801fb94:	f000 f985 	bl	801fea2 <USBD_Get_USB_Status>
 801fb98:	0003      	movs	r3, r0
 801fb9a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fb9c:	197b      	adds	r3, r7, r5
 801fb9e:	781b      	ldrb	r3, [r3, #0]
}
 801fba0:	0018      	movs	r0, r3
 801fba2:	46bd      	mov	sp, r7
 801fba4:	b005      	add	sp, #20
 801fba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fba8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbaa:	b085      	sub	sp, #20
 801fbac:	af00      	add	r7, sp, #0
 801fbae:	6078      	str	r0, [r7, #4]
 801fbb0:	000a      	movs	r2, r1
 801fbb2:	1cfb      	adds	r3, r7, #3
 801fbb4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fbb6:	210f      	movs	r1, #15
 801fbb8:	187b      	adds	r3, r7, r1
 801fbba:	2200      	movs	r2, #0
 801fbbc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fbbe:	260e      	movs	r6, #14
 801fbc0:	19bb      	adds	r3, r7, r6
 801fbc2:	2200      	movs	r2, #0
 801fbc4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801fbc6:	687a      	ldr	r2, [r7, #4]
 801fbc8:	23b0      	movs	r3, #176	@ 0xb0
 801fbca:	009b      	lsls	r3, r3, #2
 801fbcc:	58d2      	ldr	r2, [r2, r3]
 801fbce:	000d      	movs	r5, r1
 801fbd0:	187c      	adds	r4, r7, r1
 801fbd2:	1cfb      	adds	r3, r7, #3
 801fbd4:	781b      	ldrb	r3, [r3, #0]
 801fbd6:	0019      	movs	r1, r3
 801fbd8:	0010      	movs	r0, r2
 801fbda:	f7f6 f9e5 	bl	8015fa8 <HAL_PCD_EP_Close>
 801fbde:	0003      	movs	r3, r0
 801fbe0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fbe2:	19bc      	adds	r4, r7, r6
 801fbe4:	197b      	adds	r3, r7, r5
 801fbe6:	781b      	ldrb	r3, [r3, #0]
 801fbe8:	0018      	movs	r0, r3
 801fbea:	f000 f95a 	bl	801fea2 <USBD_Get_USB_Status>
 801fbee:	0003      	movs	r3, r0
 801fbf0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fbf2:	19bb      	adds	r3, r7, r6
 801fbf4:	781b      	ldrb	r3, [r3, #0]
}
 801fbf6:	0018      	movs	r0, r3
 801fbf8:	46bd      	mov	sp, r7
 801fbfa:	b005      	add	sp, #20
 801fbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fbfe <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fbfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc00:	b085      	sub	sp, #20
 801fc02:	af00      	add	r7, sp, #0
 801fc04:	6078      	str	r0, [r7, #4]
 801fc06:	000a      	movs	r2, r1
 801fc08:	1cfb      	adds	r3, r7, #3
 801fc0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fc0c:	210f      	movs	r1, #15
 801fc0e:	187b      	adds	r3, r7, r1
 801fc10:	2200      	movs	r2, #0
 801fc12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fc14:	260e      	movs	r6, #14
 801fc16:	19bb      	adds	r3, r7, r6
 801fc18:	2200      	movs	r2, #0
 801fc1a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801fc1c:	687a      	ldr	r2, [r7, #4]
 801fc1e:	23b0      	movs	r3, #176	@ 0xb0
 801fc20:	009b      	lsls	r3, r3, #2
 801fc22:	58d2      	ldr	r2, [r2, r3]
 801fc24:	000d      	movs	r5, r1
 801fc26:	187c      	adds	r4, r7, r1
 801fc28:	1cfb      	adds	r3, r7, #3
 801fc2a:	781b      	ldrb	r3, [r3, #0]
 801fc2c:	0019      	movs	r1, r3
 801fc2e:	0010      	movs	r0, r2
 801fc30:	f7f6 fa97 	bl	8016162 <HAL_PCD_EP_SetStall>
 801fc34:	0003      	movs	r3, r0
 801fc36:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc38:	19bc      	adds	r4, r7, r6
 801fc3a:	197b      	adds	r3, r7, r5
 801fc3c:	781b      	ldrb	r3, [r3, #0]
 801fc3e:	0018      	movs	r0, r3
 801fc40:	f000 f92f 	bl	801fea2 <USBD_Get_USB_Status>
 801fc44:	0003      	movs	r3, r0
 801fc46:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fc48:	19bb      	adds	r3, r7, r6
 801fc4a:	781b      	ldrb	r3, [r3, #0]
}
 801fc4c:	0018      	movs	r0, r3
 801fc4e:	46bd      	mov	sp, r7
 801fc50:	b005      	add	sp, #20
 801fc52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fc54 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc56:	b085      	sub	sp, #20
 801fc58:	af00      	add	r7, sp, #0
 801fc5a:	6078      	str	r0, [r7, #4]
 801fc5c:	000a      	movs	r2, r1
 801fc5e:	1cfb      	adds	r3, r7, #3
 801fc60:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fc62:	210f      	movs	r1, #15
 801fc64:	187b      	adds	r3, r7, r1
 801fc66:	2200      	movs	r2, #0
 801fc68:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fc6a:	260e      	movs	r6, #14
 801fc6c:	19bb      	adds	r3, r7, r6
 801fc6e:	2200      	movs	r2, #0
 801fc70:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801fc72:	687a      	ldr	r2, [r7, #4]
 801fc74:	23b0      	movs	r3, #176	@ 0xb0
 801fc76:	009b      	lsls	r3, r3, #2
 801fc78:	58d2      	ldr	r2, [r2, r3]
 801fc7a:	000d      	movs	r5, r1
 801fc7c:	187c      	adds	r4, r7, r1
 801fc7e:	1cfb      	adds	r3, r7, #3
 801fc80:	781b      	ldrb	r3, [r3, #0]
 801fc82:	0019      	movs	r1, r3
 801fc84:	0010      	movs	r0, r2
 801fc86:	f7f6 fac8 	bl	801621a <HAL_PCD_EP_ClrStall>
 801fc8a:	0003      	movs	r3, r0
 801fc8c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc8e:	19bc      	adds	r4, r7, r6
 801fc90:	197b      	adds	r3, r7, r5
 801fc92:	781b      	ldrb	r3, [r3, #0]
 801fc94:	0018      	movs	r0, r3
 801fc96:	f000 f904 	bl	801fea2 <USBD_Get_USB_Status>
 801fc9a:	0003      	movs	r3, r0
 801fc9c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fc9e:	19bb      	adds	r3, r7, r6
 801fca0:	781b      	ldrb	r3, [r3, #0]
}
 801fca2:	0018      	movs	r0, r3
 801fca4:	46bd      	mov	sp, r7
 801fca6:	b005      	add	sp, #20
 801fca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fcaa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fcaa:	b580      	push	{r7, lr}
 801fcac:	b084      	sub	sp, #16
 801fcae:	af00      	add	r7, sp, #0
 801fcb0:	6078      	str	r0, [r7, #4]
 801fcb2:	000a      	movs	r2, r1
 801fcb4:	1cfb      	adds	r3, r7, #3
 801fcb6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801fcb8:	687a      	ldr	r2, [r7, #4]
 801fcba:	23b0      	movs	r3, #176	@ 0xb0
 801fcbc:	009b      	lsls	r3, r3, #2
 801fcbe:	58d3      	ldr	r3, [r2, r3]
 801fcc0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801fcc2:	1cfb      	adds	r3, r7, #3
 801fcc4:	781b      	ldrb	r3, [r3, #0]
 801fcc6:	b25b      	sxtb	r3, r3
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	da0d      	bge.n	801fce8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801fccc:	1cfb      	adds	r3, r7, #3
 801fcce:	781b      	ldrb	r3, [r3, #0]
 801fcd0:	227f      	movs	r2, #127	@ 0x7f
 801fcd2:	4013      	ands	r3, r2
 801fcd4:	68f9      	ldr	r1, [r7, #12]
 801fcd6:	1c5a      	adds	r2, r3, #1
 801fcd8:	0013      	movs	r3, r2
 801fcda:	009b      	lsls	r3, r3, #2
 801fcdc:	189b      	adds	r3, r3, r2
 801fcde:	00db      	lsls	r3, r3, #3
 801fce0:	18cb      	adds	r3, r1, r3
 801fce2:	3302      	adds	r3, #2
 801fce4:	781b      	ldrb	r3, [r3, #0]
 801fce6:	e00d      	b.n	801fd04 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801fce8:	1cfb      	adds	r3, r7, #3
 801fcea:	781b      	ldrb	r3, [r3, #0]
 801fcec:	227f      	movs	r2, #127	@ 0x7f
 801fcee:	401a      	ands	r2, r3
 801fcf0:	68f8      	ldr	r0, [r7, #12]
 801fcf2:	23b5      	movs	r3, #181	@ 0xb5
 801fcf4:	0059      	lsls	r1, r3, #1
 801fcf6:	0013      	movs	r3, r2
 801fcf8:	009b      	lsls	r3, r3, #2
 801fcfa:	189b      	adds	r3, r3, r2
 801fcfc:	00db      	lsls	r3, r3, #3
 801fcfe:	18c3      	adds	r3, r0, r3
 801fd00:	185b      	adds	r3, r3, r1
 801fd02:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fd04:	0018      	movs	r0, r3
 801fd06:	46bd      	mov	sp, r7
 801fd08:	b004      	add	sp, #16
 801fd0a:	bd80      	pop	{r7, pc}

0801fd0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801fd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd0e:	b085      	sub	sp, #20
 801fd10:	af00      	add	r7, sp, #0
 801fd12:	6078      	str	r0, [r7, #4]
 801fd14:	000a      	movs	r2, r1
 801fd16:	1cfb      	adds	r3, r7, #3
 801fd18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fd1a:	210f      	movs	r1, #15
 801fd1c:	187b      	adds	r3, r7, r1
 801fd1e:	2200      	movs	r2, #0
 801fd20:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fd22:	260e      	movs	r6, #14
 801fd24:	19bb      	adds	r3, r7, r6
 801fd26:	2200      	movs	r2, #0
 801fd28:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801fd2a:	687a      	ldr	r2, [r7, #4]
 801fd2c:	23b0      	movs	r3, #176	@ 0xb0
 801fd2e:	009b      	lsls	r3, r3, #2
 801fd30:	58d2      	ldr	r2, [r2, r3]
 801fd32:	000d      	movs	r5, r1
 801fd34:	187c      	adds	r4, r7, r1
 801fd36:	1cfb      	adds	r3, r7, #3
 801fd38:	781b      	ldrb	r3, [r3, #0]
 801fd3a:	0019      	movs	r1, r3
 801fd3c:	0010      	movs	r0, r2
 801fd3e:	f7f6 f899 	bl	8015e74 <HAL_PCD_SetAddress>
 801fd42:	0003      	movs	r3, r0
 801fd44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fd46:	19bc      	adds	r4, r7, r6
 801fd48:	197b      	adds	r3, r7, r5
 801fd4a:	781b      	ldrb	r3, [r3, #0]
 801fd4c:	0018      	movs	r0, r3
 801fd4e:	f000 f8a8 	bl	801fea2 <USBD_Get_USB_Status>
 801fd52:	0003      	movs	r3, r0
 801fd54:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fd56:	19bb      	adds	r3, r7, r6
 801fd58:	781b      	ldrb	r3, [r3, #0]
}
 801fd5a:	0018      	movs	r0, r3
 801fd5c:	46bd      	mov	sp, r7
 801fd5e:	b005      	add	sp, #20
 801fd60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fd62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801fd62:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd64:	b087      	sub	sp, #28
 801fd66:	af00      	add	r7, sp, #0
 801fd68:	60f8      	str	r0, [r7, #12]
 801fd6a:	0008      	movs	r0, r1
 801fd6c:	607a      	str	r2, [r7, #4]
 801fd6e:	0019      	movs	r1, r3
 801fd70:	230b      	movs	r3, #11
 801fd72:	18fb      	adds	r3, r7, r3
 801fd74:	1c02      	adds	r2, r0, #0
 801fd76:	701a      	strb	r2, [r3, #0]
 801fd78:	2408      	movs	r4, #8
 801fd7a:	193b      	adds	r3, r7, r4
 801fd7c:	1c0a      	adds	r2, r1, #0
 801fd7e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fd80:	2117      	movs	r1, #23
 801fd82:	187b      	adds	r3, r7, r1
 801fd84:	2200      	movs	r2, #0
 801fd86:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fd88:	2516      	movs	r5, #22
 801fd8a:	197b      	adds	r3, r7, r5
 801fd8c:	2200      	movs	r2, #0
 801fd8e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801fd90:	68fa      	ldr	r2, [r7, #12]
 801fd92:	23b0      	movs	r3, #176	@ 0xb0
 801fd94:	009b      	lsls	r3, r3, #2
 801fd96:	58d0      	ldr	r0, [r2, r3]
 801fd98:	193b      	adds	r3, r7, r4
 801fd9a:	881d      	ldrh	r5, [r3, #0]
 801fd9c:	000e      	movs	r6, r1
 801fd9e:	187c      	adds	r4, r7, r1
 801fda0:	687a      	ldr	r2, [r7, #4]
 801fda2:	230b      	movs	r3, #11
 801fda4:	18fb      	adds	r3, r7, r3
 801fda6:	7819      	ldrb	r1, [r3, #0]
 801fda8:	002b      	movs	r3, r5
 801fdaa:	f7f6 f99e 	bl	80160ea <HAL_PCD_EP_Transmit>
 801fdae:	0003      	movs	r3, r0
 801fdb0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fdb2:	2516      	movs	r5, #22
 801fdb4:	197c      	adds	r4, r7, r5
 801fdb6:	19bb      	adds	r3, r7, r6
 801fdb8:	781b      	ldrb	r3, [r3, #0]
 801fdba:	0018      	movs	r0, r3
 801fdbc:	f000 f871 	bl	801fea2 <USBD_Get_USB_Status>
 801fdc0:	0003      	movs	r3, r0
 801fdc2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fdc4:	197b      	adds	r3, r7, r5
 801fdc6:	781b      	ldrb	r3, [r3, #0]
}
 801fdc8:	0018      	movs	r0, r3
 801fdca:	46bd      	mov	sp, r7
 801fdcc:	b007      	add	sp, #28
 801fdce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fdd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801fdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdd2:	b087      	sub	sp, #28
 801fdd4:	af00      	add	r7, sp, #0
 801fdd6:	60f8      	str	r0, [r7, #12]
 801fdd8:	0008      	movs	r0, r1
 801fdda:	607a      	str	r2, [r7, #4]
 801fddc:	0019      	movs	r1, r3
 801fdde:	230b      	movs	r3, #11
 801fde0:	18fb      	adds	r3, r7, r3
 801fde2:	1c02      	adds	r2, r0, #0
 801fde4:	701a      	strb	r2, [r3, #0]
 801fde6:	2408      	movs	r4, #8
 801fde8:	193b      	adds	r3, r7, r4
 801fdea:	1c0a      	adds	r2, r1, #0
 801fdec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fdee:	2117      	movs	r1, #23
 801fdf0:	187b      	adds	r3, r7, r1
 801fdf2:	2200      	movs	r2, #0
 801fdf4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fdf6:	2516      	movs	r5, #22
 801fdf8:	197b      	adds	r3, r7, r5
 801fdfa:	2200      	movs	r2, #0
 801fdfc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801fdfe:	68fa      	ldr	r2, [r7, #12]
 801fe00:	23b0      	movs	r3, #176	@ 0xb0
 801fe02:	009b      	lsls	r3, r3, #2
 801fe04:	58d0      	ldr	r0, [r2, r3]
 801fe06:	193b      	adds	r3, r7, r4
 801fe08:	881d      	ldrh	r5, [r3, #0]
 801fe0a:	000e      	movs	r6, r1
 801fe0c:	187c      	adds	r4, r7, r1
 801fe0e:	687a      	ldr	r2, [r7, #4]
 801fe10:	230b      	movs	r3, #11
 801fe12:	18fb      	adds	r3, r7, r3
 801fe14:	7819      	ldrb	r1, [r3, #0]
 801fe16:	002b      	movs	r3, r5
 801fe18:	f7f6 f917 	bl	801604a <HAL_PCD_EP_Receive>
 801fe1c:	0003      	movs	r3, r0
 801fe1e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fe20:	2516      	movs	r5, #22
 801fe22:	197c      	adds	r4, r7, r5
 801fe24:	19bb      	adds	r3, r7, r6
 801fe26:	781b      	ldrb	r3, [r3, #0]
 801fe28:	0018      	movs	r0, r3
 801fe2a:	f000 f83a 	bl	801fea2 <USBD_Get_USB_Status>
 801fe2e:	0003      	movs	r3, r0
 801fe30:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fe32:	197b      	adds	r3, r7, r5
 801fe34:	781b      	ldrb	r3, [r3, #0]
}
 801fe36:	0018      	movs	r0, r3
 801fe38:	46bd      	mov	sp, r7
 801fe3a:	b007      	add	sp, #28
 801fe3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fe3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fe3e:	b580      	push	{r7, lr}
 801fe40:	b082      	sub	sp, #8
 801fe42:	af00      	add	r7, sp, #0
 801fe44:	6078      	str	r0, [r7, #4]
 801fe46:	000a      	movs	r2, r1
 801fe48:	1cfb      	adds	r3, r7, #3
 801fe4a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801fe4c:	687a      	ldr	r2, [r7, #4]
 801fe4e:	23b0      	movs	r3, #176	@ 0xb0
 801fe50:	009b      	lsls	r3, r3, #2
 801fe52:	58d2      	ldr	r2, [r2, r3]
 801fe54:	1cfb      	adds	r3, r7, #3
 801fe56:	781b      	ldrb	r3, [r3, #0]
 801fe58:	0019      	movs	r1, r3
 801fe5a:	0010      	movs	r0, r2
 801fe5c:	f7f6 f92c 	bl	80160b8 <HAL_PCD_EP_GetRxCount>
 801fe60:	0003      	movs	r3, r0
}
 801fe62:	0018      	movs	r0, r3
 801fe64:	46bd      	mov	sp, r7
 801fe66:	b002      	add	sp, #8
 801fe68:	bd80      	pop	{r7, pc}
	...

0801fe6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801fe6c:	b580      	push	{r7, lr}
 801fe6e:	b082      	sub	sp, #8
 801fe70:	af00      	add	r7, sp, #0
 801fe72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801fe74:	4b02      	ldr	r3, [pc, #8]	@ (801fe80 <USBD_static_malloc+0x14>)
}
 801fe76:	0018      	movs	r0, r3
 801fe78:	46bd      	mov	sp, r7
 801fe7a:	b002      	add	sp, #8
 801fe7c:	bd80      	pop	{r7, pc}
 801fe7e:	46c0      	nop			@ (mov r8, r8)
 801fe80:	20003230 	.word	0x20003230

0801fe84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801fe84:	b580      	push	{r7, lr}
 801fe86:	b082      	sub	sp, #8
 801fe88:	af00      	add	r7, sp, #0
 801fe8a:	6078      	str	r0, [r7, #4]

}
 801fe8c:	46c0      	nop			@ (mov r8, r8)
 801fe8e:	46bd      	mov	sp, r7
 801fe90:	b002      	add	sp, #8
 801fe92:	bd80      	pop	{r7, pc}

0801fe94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801fe94:	b580      	push	{r7, lr}
 801fe96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801fe98:	f7ea f89a 	bl	8009fd0 <SystemClock_Config>
}
 801fe9c:	46c0      	nop			@ (mov r8, r8)
 801fe9e:	46bd      	mov	sp, r7
 801fea0:	bd80      	pop	{r7, pc}

0801fea2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801fea2:	b580      	push	{r7, lr}
 801fea4:	b084      	sub	sp, #16
 801fea6:	af00      	add	r7, sp, #0
 801fea8:	0002      	movs	r2, r0
 801feaa:	1dfb      	adds	r3, r7, #7
 801feac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801feae:	230f      	movs	r3, #15
 801feb0:	18fb      	adds	r3, r7, r3
 801feb2:	2200      	movs	r2, #0
 801feb4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801feb6:	1dfb      	adds	r3, r7, #7
 801feb8:	781b      	ldrb	r3, [r3, #0]
 801feba:	2b03      	cmp	r3, #3
 801febc:	d017      	beq.n	801feee <USBD_Get_USB_Status+0x4c>
 801febe:	dc1b      	bgt.n	801fef8 <USBD_Get_USB_Status+0x56>
 801fec0:	2b02      	cmp	r3, #2
 801fec2:	d00f      	beq.n	801fee4 <USBD_Get_USB_Status+0x42>
 801fec4:	dc18      	bgt.n	801fef8 <USBD_Get_USB_Status+0x56>
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	d002      	beq.n	801fed0 <USBD_Get_USB_Status+0x2e>
 801feca:	2b01      	cmp	r3, #1
 801fecc:	d005      	beq.n	801feda <USBD_Get_USB_Status+0x38>
 801fece:	e013      	b.n	801fef8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801fed0:	230f      	movs	r3, #15
 801fed2:	18fb      	adds	r3, r7, r3
 801fed4:	2200      	movs	r2, #0
 801fed6:	701a      	strb	r2, [r3, #0]
    break;
 801fed8:	e013      	b.n	801ff02 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801feda:	230f      	movs	r3, #15
 801fedc:	18fb      	adds	r3, r7, r3
 801fede:	2202      	movs	r2, #2
 801fee0:	701a      	strb	r2, [r3, #0]
    break;
 801fee2:	e00e      	b.n	801ff02 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801fee4:	230f      	movs	r3, #15
 801fee6:	18fb      	adds	r3, r7, r3
 801fee8:	2201      	movs	r2, #1
 801feea:	701a      	strb	r2, [r3, #0]
    break;
 801feec:	e009      	b.n	801ff02 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801feee:	230f      	movs	r3, #15
 801fef0:	18fb      	adds	r3, r7, r3
 801fef2:	2202      	movs	r2, #2
 801fef4:	701a      	strb	r2, [r3, #0]
    break;
 801fef6:	e004      	b.n	801ff02 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801fef8:	230f      	movs	r3, #15
 801fefa:	18fb      	adds	r3, r7, r3
 801fefc:	2202      	movs	r2, #2
 801fefe:	701a      	strb	r2, [r3, #0]
    break;
 801ff00:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801ff02:	230f      	movs	r3, #15
 801ff04:	18fb      	adds	r3, r7, r3
 801ff06:	781b      	ldrb	r3, [r3, #0]
}
 801ff08:	0018      	movs	r0, r3
 801ff0a:	46bd      	mov	sp, r7
 801ff0c:	b004      	add	sp, #16
 801ff0e:	bd80      	pop	{r7, pc}

0801ff10 <arm_cfft_radix4by2_q31>:
 801ff10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff12:	465f      	mov	r7, fp
 801ff14:	4656      	mov	r6, sl
 801ff16:	464d      	mov	r5, r9
 801ff18:	4644      	mov	r4, r8
 801ff1a:	000b      	movs	r3, r1
 801ff1c:	b4f0      	push	{r4, r5, r6, r7}
 801ff1e:	085b      	lsrs	r3, r3, #1
 801ff20:	b08f      	sub	sp, #60	@ 0x3c
 801ff22:	910a      	str	r1, [sp, #40]	@ 0x28
 801ff24:	0007      	movs	r7, r0
 801ff26:	9009      	str	r0, [sp, #36]	@ 0x24
 801ff28:	0011      	movs	r1, r2
 801ff2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ff2c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d100      	bne.n	801ff34 <arm_cfft_radix4by2_q31+0x24>
 801ff32:	e0a0      	b.n	8020076 <arm_cfft_radix4by2_q31+0x166>
 801ff34:	0002      	movs	r2, r0
 801ff36:	00db      	lsls	r3, r3, #3
 801ff38:	3204      	adds	r2, #4
 801ff3a:	4691      	mov	r9, r2
 801ff3c:	4698      	mov	r8, r3
 801ff3e:	000a      	movs	r2, r1
 801ff40:	464e      	mov	r6, r9
 801ff42:	4442      	add	r2, r8
 801ff44:	4699      	mov	r9, r3
 801ff46:	4688      	mov	r8, r1
 801ff48:	9208      	str	r2, [sp, #32]
 801ff4a:	900d      	str	r0, [sp, #52]	@ 0x34
 801ff4c:	4643      	mov	r3, r8
 801ff4e:	681b      	ldr	r3, [r3, #0]
 801ff50:	469b      	mov	fp, r3
 801ff52:	4643      	mov	r3, r8
 801ff54:	685b      	ldr	r3, [r3, #4]
 801ff56:	469a      	mov	sl, r3
 801ff58:	683b      	ldr	r3, [r7, #0]
 801ff5a:	109c      	asrs	r4, r3, #2
 801ff5c:	464b      	mov	r3, r9
 801ff5e:	58fb      	ldr	r3, [r7, r3]
 801ff60:	109a      	asrs	r2, r3, #2
 801ff62:	18a3      	adds	r3, r4, r2
 801ff64:	603b      	str	r3, [r7, #0]
 801ff66:	6833      	ldr	r3, [r6, #0]
 801ff68:	1aa4      	subs	r4, r4, r2
 801ff6a:	109d      	asrs	r5, r3, #2
 801ff6c:	464b      	mov	r3, r9
 801ff6e:	58f3      	ldr	r3, [r6, r3]
 801ff70:	17e2      	asrs	r2, r4, #31
 801ff72:	109b      	asrs	r3, r3, #2
 801ff74:	18e9      	adds	r1, r5, r3
 801ff76:	6031      	str	r1, [r6, #0]
 801ff78:	0011      	movs	r1, r2
 801ff7a:	465a      	mov	r2, fp
 801ff7c:	17d2      	asrs	r2, r2, #31
 801ff7e:	0010      	movs	r0, r2
 801ff80:	4652      	mov	r2, sl
 801ff82:	1aed      	subs	r5, r5, r3
 801ff84:	17eb      	asrs	r3, r5, #31
 801ff86:	17d2      	asrs	r2, r2, #31
 801ff88:	9307      	str	r3, [sp, #28]
 801ff8a:	9204      	str	r2, [sp, #16]
 801ff8c:	0003      	movs	r3, r0
 801ff8e:	465a      	mov	r2, fp
 801ff90:	9006      	str	r0, [sp, #24]
 801ff92:	0020      	movs	r0, r4
 801ff94:	9105      	str	r1, [sp, #20]
 801ff96:	f7e0 fb13 	bl	80005c0 <__aeabi_lmul>
 801ff9a:	2280      	movs	r2, #128	@ 0x80
 801ff9c:	2300      	movs	r3, #0
 801ff9e:	0612      	lsls	r2, r2, #24
 801ffa0:	1880      	adds	r0, r0, r2
 801ffa2:	4159      	adcs	r1, r3
 801ffa4:	2300      	movs	r3, #0
 801ffa6:	9101      	str	r1, [sp, #4]
 801ffa8:	9300      	str	r3, [sp, #0]
 801ffaa:	4652      	mov	r2, sl
 801ffac:	9b04      	ldr	r3, [sp, #16]
 801ffae:	0028      	movs	r0, r5
 801ffb0:	17e9      	asrs	r1, r5, #31
 801ffb2:	f7e0 fb05 	bl	80005c0 <__aeabi_lmul>
 801ffb6:	9a00      	ldr	r2, [sp, #0]
 801ffb8:	9b01      	ldr	r3, [sp, #4]
 801ffba:	1880      	adds	r0, r0, r2
 801ffbc:	4159      	adcs	r1, r3
 801ffbe:	2280      	movs	r2, #128	@ 0x80
 801ffc0:	2300      	movs	r3, #0
 801ffc2:	0612      	lsls	r2, r2, #24
 801ffc4:	1880      	adds	r0, r0, r2
 801ffc6:	4159      	adcs	r1, r3
 801ffc8:	464a      	mov	r2, r9
 801ffca:	004b      	lsls	r3, r1, #1
 801ffcc:	50bb      	str	r3, [r7, r2]
 801ffce:	4658      	mov	r0, fp
 801ffd0:	002a      	movs	r2, r5
 801ffd2:	9b07      	ldr	r3, [sp, #28]
 801ffd4:	9906      	ldr	r1, [sp, #24]
 801ffd6:	f7e0 faf3 	bl	80005c0 <__aeabi_lmul>
 801ffda:	2280      	movs	r2, #128	@ 0x80
 801ffdc:	2300      	movs	r3, #0
 801ffde:	0612      	lsls	r2, r2, #24
 801ffe0:	1880      	adds	r0, r0, r2
 801ffe2:	4159      	adcs	r1, r3
 801ffe4:	2000      	movs	r0, #0
 801ffe6:	9103      	str	r1, [sp, #12]
 801ffe8:	9002      	str	r0, [sp, #8]
 801ffea:	4652      	mov	r2, sl
 801ffec:	9b04      	ldr	r3, [sp, #16]
 801ffee:	0020      	movs	r0, r4
 801fff0:	9905      	ldr	r1, [sp, #20]
 801fff2:	f7e0 fae5 	bl	80005c0 <__aeabi_lmul>
 801fff6:	9a02      	ldr	r2, [sp, #8]
 801fff8:	9b03      	ldr	r3, [sp, #12]
 801fffa:	1a12      	subs	r2, r2, r0
 801fffc:	418b      	sbcs	r3, r1
 801fffe:	2080      	movs	r0, #128	@ 0x80
 8020000:	2100      	movs	r1, #0
 8020002:	0600      	lsls	r0, r0, #24
 8020004:	1812      	adds	r2, r2, r0
 8020006:	414b      	adcs	r3, r1
 8020008:	464a      	mov	r2, r9
 802000a:	005b      	lsls	r3, r3, #1
 802000c:	50b3      	str	r3, [r6, r2]
 802000e:	2308      	movs	r3, #8
 8020010:	469c      	mov	ip, r3
 8020012:	9b08      	ldr	r3, [sp, #32]
 8020014:	44e0      	add	r8, ip
 8020016:	3708      	adds	r7, #8
 8020018:	3608      	adds	r6, #8
 802001a:	4598      	cmp	r8, r3
 802001c:	d196      	bne.n	801ff4c <arm_cfft_radix4by2_q31+0x3c>
 802001e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020020:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020022:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020024:	2302      	movs	r3, #2
 8020026:	003a      	movs	r2, r7
 8020028:	0029      	movs	r1, r5
 802002a:	0020      	movs	r0, r4
 802002c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802002e:	f000 f957 	bl	80202e0 <arm_radix4_butterfly_q31>
 8020032:	46a4      	mov	ip, r4
 8020034:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020036:	2302      	movs	r3, #2
 8020038:	0088      	lsls	r0, r1, #2
 802003a:	4460      	add	r0, ip
 802003c:	003a      	movs	r2, r7
 802003e:	0029      	movs	r1, r5
 8020040:	f000 f94e 	bl	80202e0 <arm_radix4_butterfly_q31>
 8020044:	46a4      	mov	ip, r4
 8020046:	0128      	lsls	r0, r5, #4
 8020048:	4460      	add	r0, ip
 802004a:	6833      	ldr	r3, [r6, #0]
 802004c:	005b      	lsls	r3, r3, #1
 802004e:	6033      	str	r3, [r6, #0]
 8020050:	6873      	ldr	r3, [r6, #4]
 8020052:	005b      	lsls	r3, r3, #1
 8020054:	6073      	str	r3, [r6, #4]
 8020056:	68b3      	ldr	r3, [r6, #8]
 8020058:	005b      	lsls	r3, r3, #1
 802005a:	60b3      	str	r3, [r6, #8]
 802005c:	68f3      	ldr	r3, [r6, #12]
 802005e:	005b      	lsls	r3, r3, #1
 8020060:	60f3      	str	r3, [r6, #12]
 8020062:	3610      	adds	r6, #16
 8020064:	42b0      	cmp	r0, r6
 8020066:	d1f0      	bne.n	802004a <arm_cfft_radix4by2_q31+0x13a>
 8020068:	b00f      	add	sp, #60	@ 0x3c
 802006a:	bc3c      	pop	{r2, r3, r4, r5}
 802006c:	4690      	mov	r8, r2
 802006e:	4699      	mov	r9, r3
 8020070:	46a2      	mov	sl, r4
 8020072:	46ab      	mov	fp, r5
 8020074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020076:	2302      	movs	r3, #2
 8020078:	2100      	movs	r1, #0
 802007a:	0015      	movs	r5, r2
 802007c:	f000 f930 	bl	80202e0 <arm_radix4_butterfly_q31>
 8020080:	46bc      	mov	ip, r7
 8020082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020084:	002a      	movs	r2, r5
 8020086:	0098      	lsls	r0, r3, #2
 8020088:	4460      	add	r0, ip
 802008a:	2302      	movs	r3, #2
 802008c:	2100      	movs	r1, #0
 802008e:	f000 f927 	bl	80202e0 <arm_radix4_butterfly_q31>
 8020092:	e7e9      	b.n	8020068 <arm_cfft_radix4by2_q31+0x158>

08020094 <arm_cfft_radix4by2_inverse_q31>:
 8020094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020096:	465f      	mov	r7, fp
 8020098:	4656      	mov	r6, sl
 802009a:	464d      	mov	r5, r9
 802009c:	4644      	mov	r4, r8
 802009e:	000b      	movs	r3, r1
 80200a0:	b4f0      	push	{r4, r5, r6, r7}
 80200a2:	085b      	lsrs	r3, r3, #1
 80200a4:	b08f      	sub	sp, #60	@ 0x3c
 80200a6:	910a      	str	r1, [sp, #40]	@ 0x28
 80200a8:	0007      	movs	r7, r0
 80200aa:	9009      	str	r0, [sp, #36]	@ 0x24
 80200ac:	0011      	movs	r1, r2
 80200ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 80200b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	d100      	bne.n	80200b8 <arm_cfft_radix4by2_inverse_q31+0x24>
 80200b6:	e0a0      	b.n	80201fa <arm_cfft_radix4by2_inverse_q31+0x166>
 80200b8:	0002      	movs	r2, r0
 80200ba:	00db      	lsls	r3, r3, #3
 80200bc:	3204      	adds	r2, #4
 80200be:	4691      	mov	r9, r2
 80200c0:	4698      	mov	r8, r3
 80200c2:	000a      	movs	r2, r1
 80200c4:	464e      	mov	r6, r9
 80200c6:	4442      	add	r2, r8
 80200c8:	4699      	mov	r9, r3
 80200ca:	4688      	mov	r8, r1
 80200cc:	9208      	str	r2, [sp, #32]
 80200ce:	900d      	str	r0, [sp, #52]	@ 0x34
 80200d0:	4643      	mov	r3, r8
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	469b      	mov	fp, r3
 80200d6:	4643      	mov	r3, r8
 80200d8:	685b      	ldr	r3, [r3, #4]
 80200da:	469a      	mov	sl, r3
 80200dc:	683b      	ldr	r3, [r7, #0]
 80200de:	109c      	asrs	r4, r3, #2
 80200e0:	464b      	mov	r3, r9
 80200e2:	58fb      	ldr	r3, [r7, r3]
 80200e4:	109a      	asrs	r2, r3, #2
 80200e6:	18a3      	adds	r3, r4, r2
 80200e8:	603b      	str	r3, [r7, #0]
 80200ea:	6833      	ldr	r3, [r6, #0]
 80200ec:	1aa4      	subs	r4, r4, r2
 80200ee:	109d      	asrs	r5, r3, #2
 80200f0:	464b      	mov	r3, r9
 80200f2:	58f3      	ldr	r3, [r6, r3]
 80200f4:	17e2      	asrs	r2, r4, #31
 80200f6:	109b      	asrs	r3, r3, #2
 80200f8:	18e9      	adds	r1, r5, r3
 80200fa:	6031      	str	r1, [r6, #0]
 80200fc:	0011      	movs	r1, r2
 80200fe:	465a      	mov	r2, fp
 8020100:	17d2      	asrs	r2, r2, #31
 8020102:	0010      	movs	r0, r2
 8020104:	4652      	mov	r2, sl
 8020106:	1aed      	subs	r5, r5, r3
 8020108:	17eb      	asrs	r3, r5, #31
 802010a:	17d2      	asrs	r2, r2, #31
 802010c:	9307      	str	r3, [sp, #28]
 802010e:	9204      	str	r2, [sp, #16]
 8020110:	0003      	movs	r3, r0
 8020112:	465a      	mov	r2, fp
 8020114:	9006      	str	r0, [sp, #24]
 8020116:	0020      	movs	r0, r4
 8020118:	9105      	str	r1, [sp, #20]
 802011a:	f7e0 fa51 	bl	80005c0 <__aeabi_lmul>
 802011e:	2280      	movs	r2, #128	@ 0x80
 8020120:	2300      	movs	r3, #0
 8020122:	0612      	lsls	r2, r2, #24
 8020124:	1880      	adds	r0, r0, r2
 8020126:	4159      	adcs	r1, r3
 8020128:	2300      	movs	r3, #0
 802012a:	9101      	str	r1, [sp, #4]
 802012c:	9300      	str	r3, [sp, #0]
 802012e:	4652      	mov	r2, sl
 8020130:	9b04      	ldr	r3, [sp, #16]
 8020132:	0028      	movs	r0, r5
 8020134:	17e9      	asrs	r1, r5, #31
 8020136:	f7e0 fa43 	bl	80005c0 <__aeabi_lmul>
 802013a:	9a00      	ldr	r2, [sp, #0]
 802013c:	9b01      	ldr	r3, [sp, #4]
 802013e:	1a12      	subs	r2, r2, r0
 8020140:	418b      	sbcs	r3, r1
 8020142:	2080      	movs	r0, #128	@ 0x80
 8020144:	2100      	movs	r1, #0
 8020146:	0600      	lsls	r0, r0, #24
 8020148:	1812      	adds	r2, r2, r0
 802014a:	414b      	adcs	r3, r1
 802014c:	464a      	mov	r2, r9
 802014e:	005b      	lsls	r3, r3, #1
 8020150:	50bb      	str	r3, [r7, r2]
 8020152:	4658      	mov	r0, fp
 8020154:	002a      	movs	r2, r5
 8020156:	9b07      	ldr	r3, [sp, #28]
 8020158:	9906      	ldr	r1, [sp, #24]
 802015a:	f7e0 fa31 	bl	80005c0 <__aeabi_lmul>
 802015e:	2280      	movs	r2, #128	@ 0x80
 8020160:	2300      	movs	r3, #0
 8020162:	0612      	lsls	r2, r2, #24
 8020164:	1880      	adds	r0, r0, r2
 8020166:	4159      	adcs	r1, r3
 8020168:	2000      	movs	r0, #0
 802016a:	9103      	str	r1, [sp, #12]
 802016c:	9002      	str	r0, [sp, #8]
 802016e:	4652      	mov	r2, sl
 8020170:	9b04      	ldr	r3, [sp, #16]
 8020172:	0020      	movs	r0, r4
 8020174:	9905      	ldr	r1, [sp, #20]
 8020176:	f7e0 fa23 	bl	80005c0 <__aeabi_lmul>
 802017a:	9b02      	ldr	r3, [sp, #8]
 802017c:	9c03      	ldr	r4, [sp, #12]
 802017e:	18c0      	adds	r0, r0, r3
 8020180:	4161      	adcs	r1, r4
 8020182:	2380      	movs	r3, #128	@ 0x80
 8020184:	2400      	movs	r4, #0
 8020186:	061b      	lsls	r3, r3, #24
 8020188:	18c0      	adds	r0, r0, r3
 802018a:	4161      	adcs	r1, r4
 802018c:	464a      	mov	r2, r9
 802018e:	004b      	lsls	r3, r1, #1
 8020190:	50b3      	str	r3, [r6, r2]
 8020192:	2308      	movs	r3, #8
 8020194:	469c      	mov	ip, r3
 8020196:	9b08      	ldr	r3, [sp, #32]
 8020198:	44e0      	add	r8, ip
 802019a:	3708      	adds	r7, #8
 802019c:	3608      	adds	r6, #8
 802019e:	4598      	cmp	r8, r3
 80201a0:	d196      	bne.n	80200d0 <arm_cfft_radix4by2_inverse_q31+0x3c>
 80201a2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80201a4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80201a6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80201a8:	2302      	movs	r3, #2
 80201aa:	003a      	movs	r2, r7
 80201ac:	0029      	movs	r1, r5
 80201ae:	0020      	movs	r0, r4
 80201b0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80201b2:	f000 fb3b 	bl	802082c <arm_radix4_butterfly_inverse_q31>
 80201b6:	46a4      	mov	ip, r4
 80201b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80201ba:	2302      	movs	r3, #2
 80201bc:	0088      	lsls	r0, r1, #2
 80201be:	4460      	add	r0, ip
 80201c0:	003a      	movs	r2, r7
 80201c2:	0029      	movs	r1, r5
 80201c4:	f000 fb32 	bl	802082c <arm_radix4_butterfly_inverse_q31>
 80201c8:	46a4      	mov	ip, r4
 80201ca:	0128      	lsls	r0, r5, #4
 80201cc:	4460      	add	r0, ip
 80201ce:	6833      	ldr	r3, [r6, #0]
 80201d0:	005b      	lsls	r3, r3, #1
 80201d2:	6033      	str	r3, [r6, #0]
 80201d4:	6873      	ldr	r3, [r6, #4]
 80201d6:	005b      	lsls	r3, r3, #1
 80201d8:	6073      	str	r3, [r6, #4]
 80201da:	68b3      	ldr	r3, [r6, #8]
 80201dc:	005b      	lsls	r3, r3, #1
 80201de:	60b3      	str	r3, [r6, #8]
 80201e0:	68f3      	ldr	r3, [r6, #12]
 80201e2:	005b      	lsls	r3, r3, #1
 80201e4:	60f3      	str	r3, [r6, #12]
 80201e6:	3610      	adds	r6, #16
 80201e8:	42b0      	cmp	r0, r6
 80201ea:	d1f0      	bne.n	80201ce <arm_cfft_radix4by2_inverse_q31+0x13a>
 80201ec:	b00f      	add	sp, #60	@ 0x3c
 80201ee:	bc3c      	pop	{r2, r3, r4, r5}
 80201f0:	4690      	mov	r8, r2
 80201f2:	4699      	mov	r9, r3
 80201f4:	46a2      	mov	sl, r4
 80201f6:	46ab      	mov	fp, r5
 80201f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201fa:	2302      	movs	r3, #2
 80201fc:	2100      	movs	r1, #0
 80201fe:	0015      	movs	r5, r2
 8020200:	f000 fb14 	bl	802082c <arm_radix4_butterfly_inverse_q31>
 8020204:	46bc      	mov	ip, r7
 8020206:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020208:	002a      	movs	r2, r5
 802020a:	0098      	lsls	r0, r3, #2
 802020c:	4460      	add	r0, ip
 802020e:	2302      	movs	r3, #2
 8020210:	2100      	movs	r1, #0
 8020212:	f000 fb0b 	bl	802082c <arm_radix4_butterfly_inverse_q31>
 8020216:	e7e9      	b.n	80201ec <arm_cfft_radix4by2_inverse_q31+0x158>

08020218 <arm_cfft_q31>:
 8020218:	b570      	push	{r4, r5, r6, lr}
 802021a:	001e      	movs	r6, r3
 802021c:	2380      	movs	r3, #128	@ 0x80
 802021e:	000d      	movs	r5, r1
 8020220:	0004      	movs	r4, r0
 8020222:	8801      	ldrh	r1, [r0, #0]
 8020224:	005b      	lsls	r3, r3, #1
 8020226:	2a01      	cmp	r2, #1
 8020228:	d028      	beq.n	802027c <arm_cfft_q31+0x64>
 802022a:	4299      	cmp	r1, r3
 802022c:	d020      	beq.n	8020270 <arm_cfft_q31+0x58>
 802022e:	d812      	bhi.n	8020256 <arm_cfft_q31+0x3e>
 8020230:	2920      	cmp	r1, #32
 8020232:	d004      	beq.n	802023e <arm_cfft_q31+0x26>
 8020234:	d949      	bls.n	80202ca <arm_cfft_q31+0xb2>
 8020236:	2940      	cmp	r1, #64	@ 0x40
 8020238:	d01a      	beq.n	8020270 <arm_cfft_q31+0x58>
 802023a:	2980      	cmp	r1, #128	@ 0x80
 802023c:	d103      	bne.n	8020246 <arm_cfft_q31+0x2e>
 802023e:	6862      	ldr	r2, [r4, #4]
 8020240:	0028      	movs	r0, r5
 8020242:	f7ff fe65 	bl	801ff10 <arm_cfft_radix4by2_q31>
 8020246:	2e00      	cmp	r6, #0
 8020248:	d004      	beq.n	8020254 <arm_cfft_q31+0x3c>
 802024a:	68a2      	ldr	r2, [r4, #8]
 802024c:	89a1      	ldrh	r1, [r4, #12]
 802024e:	0028      	movs	r0, r5
 8020250:	f7df ff5a 	bl	8000108 <arm_bitreversal_32>
 8020254:	bd70      	pop	{r4, r5, r6, pc}
 8020256:	2380      	movs	r3, #128	@ 0x80
 8020258:	00db      	lsls	r3, r3, #3
 802025a:	4299      	cmp	r1, r3
 802025c:	d008      	beq.n	8020270 <arm_cfft_q31+0x58>
 802025e:	d92f      	bls.n	80202c0 <arm_cfft_q31+0xa8>
 8020260:	2380      	movs	r3, #128	@ 0x80
 8020262:	011b      	lsls	r3, r3, #4
 8020264:	4299      	cmp	r1, r3
 8020266:	d0ea      	beq.n	802023e <arm_cfft_q31+0x26>
 8020268:	2380      	movs	r3, #128	@ 0x80
 802026a:	015b      	lsls	r3, r3, #5
 802026c:	4299      	cmp	r1, r3
 802026e:	d1ea      	bne.n	8020246 <arm_cfft_q31+0x2e>
 8020270:	2301      	movs	r3, #1
 8020272:	6862      	ldr	r2, [r4, #4]
 8020274:	0028      	movs	r0, r5
 8020276:	f000 f833 	bl	80202e0 <arm_radix4_butterfly_q31>
 802027a:	e7e4      	b.n	8020246 <arm_cfft_q31+0x2e>
 802027c:	4299      	cmp	r1, r3
 802027e:	d019      	beq.n	80202b4 <arm_cfft_q31+0x9c>
 8020280:	d80b      	bhi.n	802029a <arm_cfft_q31+0x82>
 8020282:	2920      	cmp	r1, #32
 8020284:	d004      	beq.n	8020290 <arm_cfft_q31+0x78>
 8020286:	d928      	bls.n	80202da <arm_cfft_q31+0xc2>
 8020288:	2940      	cmp	r1, #64	@ 0x40
 802028a:	d013      	beq.n	80202b4 <arm_cfft_q31+0x9c>
 802028c:	2980      	cmp	r1, #128	@ 0x80
 802028e:	d1da      	bne.n	8020246 <arm_cfft_q31+0x2e>
 8020290:	6862      	ldr	r2, [r4, #4]
 8020292:	0028      	movs	r0, r5
 8020294:	f7ff fefe 	bl	8020094 <arm_cfft_radix4by2_inverse_q31>
 8020298:	e7d5      	b.n	8020246 <arm_cfft_q31+0x2e>
 802029a:	2380      	movs	r3, #128	@ 0x80
 802029c:	00db      	lsls	r3, r3, #3
 802029e:	4299      	cmp	r1, r3
 80202a0:	d008      	beq.n	80202b4 <arm_cfft_q31+0x9c>
 80202a2:	d915      	bls.n	80202d0 <arm_cfft_q31+0xb8>
 80202a4:	2380      	movs	r3, #128	@ 0x80
 80202a6:	011b      	lsls	r3, r3, #4
 80202a8:	4299      	cmp	r1, r3
 80202aa:	d0f1      	beq.n	8020290 <arm_cfft_q31+0x78>
 80202ac:	2380      	movs	r3, #128	@ 0x80
 80202ae:	015b      	lsls	r3, r3, #5
 80202b0:	4299      	cmp	r1, r3
 80202b2:	d1c8      	bne.n	8020246 <arm_cfft_q31+0x2e>
 80202b4:	2301      	movs	r3, #1
 80202b6:	6862      	ldr	r2, [r4, #4]
 80202b8:	0028      	movs	r0, r5
 80202ba:	f000 fab7 	bl	802082c <arm_radix4_butterfly_inverse_q31>
 80202be:	e7c2      	b.n	8020246 <arm_cfft_q31+0x2e>
 80202c0:	2380      	movs	r3, #128	@ 0x80
 80202c2:	009b      	lsls	r3, r3, #2
 80202c4:	4299      	cmp	r1, r3
 80202c6:	d0ba      	beq.n	802023e <arm_cfft_q31+0x26>
 80202c8:	e7bd      	b.n	8020246 <arm_cfft_q31+0x2e>
 80202ca:	2910      	cmp	r1, #16
 80202cc:	d1bb      	bne.n	8020246 <arm_cfft_q31+0x2e>
 80202ce:	e7cf      	b.n	8020270 <arm_cfft_q31+0x58>
 80202d0:	2380      	movs	r3, #128	@ 0x80
 80202d2:	009b      	lsls	r3, r3, #2
 80202d4:	4299      	cmp	r1, r3
 80202d6:	d0db      	beq.n	8020290 <arm_cfft_q31+0x78>
 80202d8:	e7b5      	b.n	8020246 <arm_cfft_q31+0x2e>
 80202da:	2910      	cmp	r1, #16
 80202dc:	d1b3      	bne.n	8020246 <arm_cfft_q31+0x2e>
 80202de:	e7e9      	b.n	80202b4 <arm_cfft_q31+0x9c>

080202e0 <arm_radix4_butterfly_q31>:
 80202e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202e2:	464d      	mov	r5, r9
 80202e4:	4644      	mov	r4, r8
 80202e6:	465f      	mov	r7, fp
 80202e8:	4656      	mov	r6, sl
 80202ea:	469c      	mov	ip, r3
 80202ec:	b4f0      	push	{r4, r5, r6, r7}
 80202ee:	b0a7      	sub	sp, #156	@ 0x9c
 80202f0:	9114      	str	r1, [sp, #80]	@ 0x50
 80202f2:	0889      	lsrs	r1, r1, #2
 80202f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80202f6:	00cb      	lsls	r3, r1, #3
 80202f8:	0015      	movs	r5, r2
 80202fa:	9223      	str	r2, [sp, #140]	@ 0x8c
 80202fc:	18c2      	adds	r2, r0, r3
 80202fe:	000c      	movs	r4, r1
 8020300:	469a      	mov	sl, r3
 8020302:	9124      	str	r1, [sp, #144]	@ 0x90
 8020304:	18d1      	adds	r1, r2, r3
 8020306:	4663      	mov	r3, ip
 8020308:	468b      	mov	fp, r1
 802030a:	0119      	lsls	r1, r3, #4
 802030c:	910d      	str	r1, [sp, #52]	@ 0x34
 802030e:	00d9      	lsls	r1, r3, #3
 8020310:	005b      	lsls	r3, r3, #1
 8020312:	4463      	add	r3, ip
 8020314:	910e      	str	r1, [sp, #56]	@ 0x38
 8020316:	00d9      	lsls	r1, r3, #3
 8020318:	465b      	mov	r3, fp
 802031a:	44da      	add	sl, fp
 802031c:	4690      	mov	r8, r2
 802031e:	4683      	mov	fp, r0
 8020320:	4699      	mov	r9, r3
 8020322:	9022      	str	r0, [sp, #136]	@ 0x88
 8020324:	9025      	str	r0, [sp, #148]	@ 0x94
 8020326:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020328:	9502      	str	r5, [sp, #8]
 802032a:	9500      	str	r5, [sp, #0]
 802032c:	9501      	str	r5, [sp, #4]
 802032e:	9407      	str	r4, [sp, #28]
 8020330:	465b      	mov	r3, fp
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	4642      	mov	r2, r8
 8020336:	111c      	asrs	r4, r3, #4
 8020338:	464b      	mov	r3, r9
 802033a:	4658      	mov	r0, fp
 802033c:	681b      	ldr	r3, [r3, #0]
 802033e:	6812      	ldr	r2, [r2, #0]
 8020340:	111b      	asrs	r3, r3, #4
 8020342:	18e7      	adds	r7, r4, r3
 8020344:	1ae3      	subs	r3, r4, r3
 8020346:	1114      	asrs	r4, r2, #4
 8020348:	4652      	mov	r2, sl
 802034a:	6840      	ldr	r0, [r0, #4]
 802034c:	6812      	ldr	r2, [r2, #0]
 802034e:	1105      	asrs	r5, r0, #4
 8020350:	4648      	mov	r0, r9
 8020352:	9303      	str	r3, [sp, #12]
 8020354:	1113      	asrs	r3, r2, #4
 8020356:	18e2      	adds	r2, r4, r3
 8020358:	465c      	mov	r4, fp
 802035a:	6840      	ldr	r0, [r0, #4]
 802035c:	1103      	asrs	r3, r0, #4
 802035e:	18ee      	adds	r6, r5, r3
 8020360:	1ae8      	subs	r0, r5, r3
 8020362:	18bb      	adds	r3, r7, r2
 8020364:	6023      	str	r3, [r4, #0]
 8020366:	4644      	mov	r4, r8
 8020368:	6864      	ldr	r4, [r4, #4]
 802036a:	9004      	str	r0, [sp, #16]
 802036c:	1125      	asrs	r5, r4, #4
 802036e:	4654      	mov	r4, sl
 8020370:	6864      	ldr	r4, [r4, #4]
 8020372:	1123      	asrs	r3, r4, #4
 8020374:	465c      	mov	r4, fp
 8020376:	18eb      	adds	r3, r5, r3
 8020378:	18f1      	adds	r1, r6, r3
 802037a:	6061      	str	r1, [r4, #4]
 802037c:	4655      	mov	r5, sl
 802037e:	4644      	mov	r4, r8
 8020380:	686d      	ldr	r5, [r5, #4]
 8020382:	6864      	ldr	r4, [r4, #4]
 8020384:	1129      	asrs	r1, r5, #4
 8020386:	1124      	asrs	r4, r4, #4
 8020388:	1a64      	subs	r4, r4, r1
 802038a:	4641      	mov	r1, r8
 802038c:	6809      	ldr	r1, [r1, #0]
 802038e:	9405      	str	r4, [sp, #20]
 8020390:	1108      	asrs	r0, r1, #4
 8020392:	4651      	mov	r1, sl
 8020394:	6809      	ldr	r1, [r1, #0]
 8020396:	1abc      	subs	r4, r7, r2
 8020398:	1109      	asrs	r1, r1, #4
 802039a:	1a41      	subs	r1, r0, r1
 802039c:	17e2      	asrs	r2, r4, #31
 802039e:	9106      	str	r1, [sp, #24]
 80203a0:	0011      	movs	r1, r2
 80203a2:	9a01      	ldr	r2, [sp, #4]
 80203a4:	9108      	str	r1, [sp, #32]
 80203a6:	6817      	ldr	r7, [r2, #0]
 80203a8:	17fd      	asrs	r5, r7, #31
 80203aa:	0028      	movs	r0, r5
 80203ac:	1af5      	subs	r5, r6, r3
 80203ae:	17ee      	asrs	r6, r5, #31
 80203b0:	960a      	str	r6, [sp, #40]	@ 0x28
 80203b2:	6856      	ldr	r6, [r2, #4]
 80203b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80203b6:	17f3      	asrs	r3, r6, #31
 80203b8:	003a      	movs	r2, r7
 80203ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203bc:	0003      	movs	r3, r0
 80203be:	0020      	movs	r0, r4
 80203c0:	f7e0 f8fe 	bl	80005c0 <__aeabi_lmul>
 80203c4:	0032      	movs	r2, r6
 80203c6:	17f3      	asrs	r3, r6, #31
 80203c8:	910c      	str	r1, [sp, #48]	@ 0x30
 80203ca:	0028      	movs	r0, r5
 80203cc:	17e9      	asrs	r1, r5, #31
 80203ce:	f7e0 f8f7 	bl	80005c0 <__aeabi_lmul>
 80203d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80203d4:	002a      	movs	r2, r5
 80203d6:	4684      	mov	ip, r0
 80203d8:	4640      	mov	r0, r8
 80203da:	4461      	add	r1, ip
 80203dc:	0049      	lsls	r1, r1, #1
 80203de:	6001      	str	r1, [r0, #0]
 80203e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80203e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80203e4:	0038      	movs	r0, r7
 80203e6:	f7e0 f8eb 	bl	80005c0 <__aeabi_lmul>
 80203ea:	0032      	movs	r2, r6
 80203ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80203ee:	000d      	movs	r5, r1
 80203f0:	0020      	movs	r0, r4
 80203f2:	9908      	ldr	r1, [sp, #32]
 80203f4:	f7e0 f8e4 	bl	80005c0 <__aeabi_lmul>
 80203f8:	4646      	mov	r6, r8
 80203fa:	1a6d      	subs	r5, r5, r1
 80203fc:	006d      	lsls	r5, r5, #1
 80203fe:	6075      	str	r5, [r6, #4]
 8020400:	9903      	ldr	r1, [sp, #12]
 8020402:	9d05      	ldr	r5, [sp, #20]
 8020404:	000c      	movs	r4, r1
 8020406:	46ac      	mov	ip, r5
 8020408:	4464      	add	r4, ip
 802040a:	17e6      	asrs	r6, r4, #31
 802040c:	0031      	movs	r1, r6
 802040e:	9b00      	ldr	r3, [sp, #0]
 8020410:	9804      	ldr	r0, [sp, #16]
 8020412:	681e      	ldr	r6, [r3, #0]
 8020414:	17f7      	asrs	r7, r6, #31
 8020416:	9709      	str	r7, [sp, #36]	@ 0x24
 8020418:	9f06      	ldr	r7, [sp, #24]
 802041a:	0032      	movs	r2, r6
 802041c:	1bc7      	subs	r7, r0, r7
 802041e:	17fd      	asrs	r5, r7, #31
 8020420:	950a      	str	r5, [sp, #40]	@ 0x28
 8020422:	685d      	ldr	r5, [r3, #4]
 8020424:	17f3      	asrs	r3, r6, #31
 8020426:	17e8      	asrs	r0, r5, #31
 8020428:	900b      	str	r0, [sp, #44]	@ 0x2c
 802042a:	0020      	movs	r0, r4
 802042c:	9108      	str	r1, [sp, #32]
 802042e:	f7e0 f8c7 	bl	80005c0 <__aeabi_lmul>
 8020432:	002a      	movs	r2, r5
 8020434:	17eb      	asrs	r3, r5, #31
 8020436:	910c      	str	r1, [sp, #48]	@ 0x30
 8020438:	0038      	movs	r0, r7
 802043a:	17f9      	asrs	r1, r7, #31
 802043c:	f7e0 f8c0 	bl	80005c0 <__aeabi_lmul>
 8020440:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020442:	003a      	movs	r2, r7
 8020444:	4684      	mov	ip, r0
 8020446:	4648      	mov	r0, r9
 8020448:	4461      	add	r1, ip
 802044a:	0049      	lsls	r1, r1, #1
 802044c:	6001      	str	r1, [r0, #0]
 802044e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020450:	0030      	movs	r0, r6
 8020452:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020454:	f7e0 f8b4 	bl	80005c0 <__aeabi_lmul>
 8020458:	002a      	movs	r2, r5
 802045a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802045c:	000e      	movs	r6, r1
 802045e:	0020      	movs	r0, r4
 8020460:	9908      	ldr	r1, [sp, #32]
 8020462:	f7e0 f8ad 	bl	80005c0 <__aeabi_lmul>
 8020466:	464c      	mov	r4, r9
 8020468:	9d05      	ldr	r5, [sp, #20]
 802046a:	1a76      	subs	r6, r6, r1
 802046c:	9903      	ldr	r1, [sp, #12]
 802046e:	0076      	lsls	r6, r6, #1
 8020470:	6066      	str	r6, [r4, #4]
 8020472:	1b4c      	subs	r4, r1, r5
 8020474:	9e06      	ldr	r6, [sp, #24]
 8020476:	17e1      	asrs	r1, r4, #31
 8020478:	9103      	str	r1, [sp, #12]
 802047a:	9902      	ldr	r1, [sp, #8]
 802047c:	46b4      	mov	ip, r6
 802047e:	680f      	ldr	r7, [r1, #0]
 8020480:	9804      	ldr	r0, [sp, #16]
 8020482:	17fd      	asrs	r5, r7, #31
 8020484:	002b      	movs	r3, r5
 8020486:	684e      	ldr	r6, [r1, #4]
 8020488:	4460      	add	r0, ip
 802048a:	0005      	movs	r5, r0
 802048c:	17c0      	asrs	r0, r0, #31
 802048e:	9005      	str	r0, [sp, #20]
 8020490:	17f0      	asrs	r0, r6, #31
 8020492:	9006      	str	r0, [sp, #24]
 8020494:	003a      	movs	r2, r7
 8020496:	0020      	movs	r0, r4
 8020498:	17e1      	asrs	r1, r4, #31
 802049a:	9304      	str	r3, [sp, #16]
 802049c:	f7e0 f890 	bl	80005c0 <__aeabi_lmul>
 80204a0:	0032      	movs	r2, r6
 80204a2:	9108      	str	r1, [sp, #32]
 80204a4:	17f3      	asrs	r3, r6, #31
 80204a6:	0028      	movs	r0, r5
 80204a8:	17e9      	asrs	r1, r5, #31
 80204aa:	f7e0 f889 	bl	80005c0 <__aeabi_lmul>
 80204ae:	9808      	ldr	r0, [sp, #32]
 80204b0:	002a      	movs	r2, r5
 80204b2:	4684      	mov	ip, r0
 80204b4:	4650      	mov	r0, sl
 80204b6:	4461      	add	r1, ip
 80204b8:	0049      	lsls	r1, r1, #1
 80204ba:	6001      	str	r1, [r0, #0]
 80204bc:	9b05      	ldr	r3, [sp, #20]
 80204be:	9904      	ldr	r1, [sp, #16]
 80204c0:	0038      	movs	r0, r7
 80204c2:	f7e0 f87d 	bl	80005c0 <__aeabi_lmul>
 80204c6:	0020      	movs	r0, r4
 80204c8:	2408      	movs	r4, #8
 80204ca:	000d      	movs	r5, r1
 80204cc:	0032      	movs	r2, r6
 80204ce:	9b06      	ldr	r3, [sp, #24]
 80204d0:	9903      	ldr	r1, [sp, #12]
 80204d2:	f7e0 f875 	bl	80005c0 <__aeabi_lmul>
 80204d6:	46a4      	mov	ip, r4
 80204d8:	4650      	mov	r0, sl
 80204da:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80204dc:	44e3      	add	fp, ip
 80204de:	44e0      	add	r8, ip
 80204e0:	44e1      	add	r9, ip
 80204e2:	44e2      	add	sl, ip
 80204e4:	46a4      	mov	ip, r4
 80204e6:	1a6d      	subs	r5, r5, r1
 80204e8:	006d      	lsls	r5, r5, #1
 80204ea:	9a01      	ldr	r2, [sp, #4]
 80204ec:	6045      	str	r5, [r0, #4]
 80204ee:	9807      	ldr	r0, [sp, #28]
 80204f0:	4462      	add	r2, ip
 80204f2:	3801      	subs	r0, #1
 80204f4:	9201      	str	r2, [sp, #4]
 80204f6:	9007      	str	r0, [sp, #28]
 80204f8:	9b00      	ldr	r3, [sp, #0]
 80204fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80204fc:	9902      	ldr	r1, [sp, #8]
 80204fe:	4694      	mov	ip, r2
 8020500:	4463      	add	r3, ip
 8020502:	9300      	str	r3, [sp, #0]
 8020504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020506:	469c      	mov	ip, r3
 8020508:	4461      	add	r1, ip
 802050a:	9102      	str	r1, [sp, #8]
 802050c:	2800      	cmp	r0, #0
 802050e:	d000      	beq.n	8020512 <arm_radix4_butterfly_q31+0x232>
 8020510:	e70e      	b.n	8020330 <arm_radix4_butterfly_q31+0x50>
 8020512:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020514:	009b      	lsls	r3, r3, #2
 8020516:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020518:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802051a:	9320      	str	r3, [sp, #128]	@ 0x80
 802051c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802051e:	2b04      	cmp	r3, #4
 8020520:	d800      	bhi.n	8020524 <arm_radix4_butterfly_q31+0x244>
 8020522:	e180      	b.n	8020826 <arm_radix4_butterfly_q31+0x546>
 8020524:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020526:	0893      	lsrs	r3, r2, #2
 8020528:	1e59      	subs	r1, r3, #1
 802052a:	9321      	str	r3, [sp, #132]	@ 0x84
 802052c:	00db      	lsls	r3, r3, #3
 802052e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020530:	00d3      	lsls	r3, r2, #3
 8020532:	9300      	str	r3, [sp, #0]
 8020534:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020536:	911a      	str	r1, [sp, #104]	@ 0x68
 8020538:	00da      	lsls	r2, r3, #3
 802053a:	921e      	str	r2, [sp, #120]	@ 0x78
 802053c:	011a      	lsls	r2, r3, #4
 802053e:	921d      	str	r2, [sp, #116]	@ 0x74
 8020540:	001a      	movs	r2, r3
 8020542:	4694      	mov	ip, r2
 8020544:	005b      	lsls	r3, r3, #1
 8020546:	4463      	add	r3, ip
 8020548:	00db      	lsls	r3, r3, #3
 802054a:	931c      	str	r3, [sp, #112]	@ 0x70
 802054c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802054e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020550:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020552:	9318      	str	r3, [sp, #96]	@ 0x60
 8020554:	9319      	str	r3, [sp, #100]	@ 0x64
 8020556:	9316      	str	r3, [sp, #88]	@ 0x58
 8020558:	2300      	movs	r3, #0
 802055a:	9315      	str	r3, [sp, #84]	@ 0x54
 802055c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802055e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020560:	681a      	ldr	r2, [r3, #0]
 8020562:	685b      	ldr	r3, [r3, #4]
 8020564:	9205      	str	r2, [sp, #20]
 8020566:	9306      	str	r3, [sp, #24]
 8020568:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802056a:	468c      	mov	ip, r1
 802056c:	681a      	ldr	r2, [r3, #0]
 802056e:	685b      	ldr	r3, [r3, #4]
 8020570:	9207      	str	r2, [sp, #28]
 8020572:	9308      	str	r3, [sp, #32]
 8020574:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020576:	681a      	ldr	r2, [r3, #0]
 8020578:	685b      	ldr	r3, [r3, #4]
 802057a:	9209      	str	r2, [sp, #36]	@ 0x24
 802057c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802057e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020580:	0013      	movs	r3, r2
 8020582:	4463      	add	r3, ip
 8020584:	4698      	mov	r8, r3
 8020586:	0013      	movs	r3, r2
 8020588:	4442      	add	r2, r8
 802058a:	4691      	mov	r9, r2
 802058c:	001a      	movs	r2, r3
 802058e:	444a      	add	r2, r9
 8020590:	4692      	mov	sl, r2
 8020592:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020594:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020596:	4293      	cmp	r3, r2
 8020598:	d800      	bhi.n	802059c <arm_radix4_butterfly_q31+0x2bc>
 802059a:	e0dd      	b.n	8020758 <arm_radix4_butterfly_q31+0x478>
 802059c:	4694      	mov	ip, r2
 802059e:	468b      	mov	fp, r1
 80205a0:	4644      	mov	r4, r8
 80205a2:	4655      	mov	r5, sl
 80205a4:	9b07      	ldr	r3, [sp, #28]
 80205a6:	17db      	asrs	r3, r3, #31
 80205a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80205aa:	9b08      	ldr	r3, [sp, #32]
 80205ac:	17db      	asrs	r3, r3, #31
 80205ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80205b0:	9b05      	ldr	r3, [sp, #20]
 80205b2:	17db      	asrs	r3, r3, #31
 80205b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80205b6:	9b06      	ldr	r3, [sp, #24]
 80205b8:	17db      	asrs	r3, r3, #31
 80205ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80205bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80205be:	17db      	asrs	r3, r3, #31
 80205c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80205c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205c4:	17db      	asrs	r3, r3, #31
 80205c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80205c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80205ca:	4463      	add	r3, ip
 80205cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80205ce:	465b      	mov	r3, fp
 80205d0:	4659      	mov	r1, fp
 80205d2:	681a      	ldr	r2, [r3, #0]
 80205d4:	464b      	mov	r3, r9
 80205d6:	684f      	ldr	r7, [r1, #4]
 80205d8:	4649      	mov	r1, r9
 80205da:	681b      	ldr	r3, [r3, #0]
 80205dc:	18d6      	adds	r6, r2, r3
 80205de:	1ad3      	subs	r3, r2, r3
 80205e0:	9301      	str	r3, [sp, #4]
 80205e2:	684b      	ldr	r3, [r1, #4]
 80205e4:	18f8      	adds	r0, r7, r3
 80205e6:	1af9      	subs	r1, r7, r3
 80205e8:	6827      	ldr	r7, [r4, #0]
 80205ea:	9102      	str	r1, [sp, #8]
 80205ec:	003a      	movs	r2, r7
 80205ee:	682f      	ldr	r7, [r5, #0]
 80205f0:	46bc      	mov	ip, r7
 80205f2:	465f      	mov	r7, fp
 80205f4:	4462      	add	r2, ip
 80205f6:	18b3      	adds	r3, r6, r2
 80205f8:	109b      	asrs	r3, r3, #2
 80205fa:	603b      	str	r3, [r7, #0]
 80205fc:	6867      	ldr	r7, [r4, #4]
 80205fe:	1ab6      	subs	r6, r6, r2
 8020600:	46b8      	mov	r8, r7
 8020602:	686f      	ldr	r7, [r5, #4]
 8020604:	17f2      	asrs	r2, r6, #31
 8020606:	46bc      	mov	ip, r7
 8020608:	44e0      	add	r8, ip
 802060a:	4643      	mov	r3, r8
 802060c:	465f      	mov	r7, fp
 802060e:	18c1      	adds	r1, r0, r3
 8020610:	1089      	asrs	r1, r1, #2
 8020612:	6079      	str	r1, [r7, #4]
 8020614:	9900      	ldr	r1, [sp, #0]
 8020616:	4690      	mov	r8, r2
 8020618:	468c      	mov	ip, r1
 802061a:	6867      	ldr	r7, [r4, #4]
 802061c:	6869      	ldr	r1, [r5, #4]
 802061e:	44e3      	add	fp, ip
 8020620:	1a7f      	subs	r7, r7, r1
 8020622:	9703      	str	r7, [sp, #12]
 8020624:	6829      	ldr	r1, [r5, #0]
 8020626:	6827      	ldr	r7, [r4, #0]
 8020628:	1a7f      	subs	r7, r7, r1
 802062a:	9704      	str	r7, [sp, #16]
 802062c:	1ac7      	subs	r7, r0, r3
 802062e:	17fa      	asrs	r2, r7, #31
 8020630:	4692      	mov	sl, r2
 8020632:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020634:	9a07      	ldr	r2, [sp, #28]
 8020636:	0030      	movs	r0, r6
 8020638:	4641      	mov	r1, r8
 802063a:	f7df ffc1 	bl	80005c0 <__aeabi_lmul>
 802063e:	9a08      	ldr	r2, [sp, #32]
 8020640:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020642:	9112      	str	r1, [sp, #72]	@ 0x48
 8020644:	0038      	movs	r0, r7
 8020646:	4651      	mov	r1, sl
 8020648:	f7df ffba 	bl	80005c0 <__aeabi_lmul>
 802064c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802064e:	9a07      	ldr	r2, [sp, #28]
 8020650:	4684      	mov	ip, r0
 8020652:	4461      	add	r1, ip
 8020654:	1049      	asrs	r1, r1, #1
 8020656:	6021      	str	r1, [r4, #0]
 8020658:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802065a:	0038      	movs	r0, r7
 802065c:	4651      	mov	r1, sl
 802065e:	f7df ffaf 	bl	80005c0 <__aeabi_lmul>
 8020662:	9a08      	ldr	r2, [sp, #32]
 8020664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020666:	000f      	movs	r7, r1
 8020668:	0030      	movs	r0, r6
 802066a:	4641      	mov	r1, r8
 802066c:	f7df ffa8 	bl	80005c0 <__aeabi_lmul>
 8020670:	9b00      	ldr	r3, [sp, #0]
 8020672:	9a01      	ldr	r2, [sp, #4]
 8020674:	469c      	mov	ip, r3
 8020676:	9803      	ldr	r0, [sp, #12]
 8020678:	1a7f      	subs	r7, r7, r1
 802067a:	107f      	asrs	r7, r7, #1
 802067c:	6067      	str	r7, [r4, #4]
 802067e:	0016      	movs	r6, r2
 8020680:	4464      	add	r4, ip
 8020682:	4684      	mov	ip, r0
 8020684:	4466      	add	r6, ip
 8020686:	17f2      	asrs	r2, r6, #31
 8020688:	4690      	mov	r8, r2
 802068a:	9902      	ldr	r1, [sp, #8]
 802068c:	9f04      	ldr	r7, [sp, #16]
 802068e:	0030      	movs	r0, r6
 8020690:	1bcf      	subs	r7, r1, r7
 8020692:	17fa      	asrs	r2, r7, #31
 8020694:	4692      	mov	sl, r2
 8020696:	4641      	mov	r1, r8
 8020698:	9a05      	ldr	r2, [sp, #20]
 802069a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802069c:	f7df ff90 	bl	80005c0 <__aeabi_lmul>
 80206a0:	9a06      	ldr	r2, [sp, #24]
 80206a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80206a4:	9112      	str	r1, [sp, #72]	@ 0x48
 80206a6:	0038      	movs	r0, r7
 80206a8:	4651      	mov	r1, sl
 80206aa:	f7df ff89 	bl	80005c0 <__aeabi_lmul>
 80206ae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80206b0:	9a05      	ldr	r2, [sp, #20]
 80206b2:	4684      	mov	ip, r0
 80206b4:	4648      	mov	r0, r9
 80206b6:	4461      	add	r1, ip
 80206b8:	1049      	asrs	r1, r1, #1
 80206ba:	6001      	str	r1, [r0, #0]
 80206bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80206be:	0038      	movs	r0, r7
 80206c0:	4651      	mov	r1, sl
 80206c2:	f7df ff7d 	bl	80005c0 <__aeabi_lmul>
 80206c6:	9a06      	ldr	r2, [sp, #24]
 80206c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80206ca:	000f      	movs	r7, r1
 80206cc:	0030      	movs	r0, r6
 80206ce:	4641      	mov	r1, r8
 80206d0:	f7df ff76 	bl	80005c0 <__aeabi_lmul>
 80206d4:	464e      	mov	r6, r9
 80206d6:	9a00      	ldr	r2, [sp, #0]
 80206d8:	9b01      	ldr	r3, [sp, #4]
 80206da:	4694      	mov	ip, r2
 80206dc:	9803      	ldr	r0, [sp, #12]
 80206de:	1a7f      	subs	r7, r7, r1
 80206e0:	107f      	asrs	r7, r7, #1
 80206e2:	6077      	str	r7, [r6, #4]
 80206e4:	1a1e      	subs	r6, r3, r0
 80206e6:	9b04      	ldr	r3, [sp, #16]
 80206e8:	44e1      	add	r9, ip
 80206ea:	469c      	mov	ip, r3
 80206ec:	17f0      	asrs	r0, r6, #31
 80206ee:	4680      	mov	r8, r0
 80206f0:	9902      	ldr	r1, [sp, #8]
 80206f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80206f4:	4461      	add	r1, ip
 80206f6:	17cb      	asrs	r3, r1, #31
 80206f8:	000f      	movs	r7, r1
 80206fa:	469a      	mov	sl, r3
 80206fc:	0030      	movs	r0, r6
 80206fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020700:	4641      	mov	r1, r8
 8020702:	f7df ff5d 	bl	80005c0 <__aeabi_lmul>
 8020706:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020708:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802070a:	9101      	str	r1, [sp, #4]
 802070c:	0038      	movs	r0, r7
 802070e:	4651      	mov	r1, sl
 8020710:	f7df ff56 	bl	80005c0 <__aeabi_lmul>
 8020714:	9801      	ldr	r0, [sp, #4]
 8020716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020718:	4684      	mov	ip, r0
 802071a:	4461      	add	r1, ip
 802071c:	1049      	asrs	r1, r1, #1
 802071e:	6029      	str	r1, [r5, #0]
 8020720:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020722:	0038      	movs	r0, r7
 8020724:	4651      	mov	r1, sl
 8020726:	f7df ff4b 	bl	80005c0 <__aeabi_lmul>
 802072a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802072c:	000f      	movs	r7, r1
 802072e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020730:	0030      	movs	r0, r6
 8020732:	4641      	mov	r1, r8
 8020734:	f7df ff44 	bl	80005c0 <__aeabi_lmul>
 8020738:	1a7f      	subs	r7, r7, r1
 802073a:	107f      	asrs	r7, r7, #1
 802073c:	606f      	str	r7, [r5, #4]
 802073e:	9a00      	ldr	r2, [sp, #0]
 8020740:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020742:	4694      	mov	ip, r2
 8020744:	4465      	add	r5, ip
 8020746:	468c      	mov	ip, r1
 8020748:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802074a:	0013      	movs	r3, r2
 802074c:	4462      	add	r2, ip
 802074e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020750:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020752:	429a      	cmp	r2, r3
 8020754:	d900      	bls.n	8020758 <arm_radix4_butterfly_q31+0x478>
 8020756:	e73a      	b.n	80205ce <arm_radix4_butterfly_q31+0x2ee>
 8020758:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802075a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802075c:	468c      	mov	ip, r1
 802075e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8020760:	4462      	add	r2, ip
 8020762:	468c      	mov	ip, r1
 8020764:	9216      	str	r2, [sp, #88]	@ 0x58
 8020766:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020768:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802076a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802076c:	4462      	add	r2, ip
 802076e:	468c      	mov	ip, r1
 8020770:	9219      	str	r2, [sp, #100]	@ 0x64
 8020772:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020774:	3301      	adds	r3, #1
 8020776:	4462      	add	r2, ip
 8020778:	9218      	str	r2, [sp, #96]	@ 0x60
 802077a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802077c:	9315      	str	r3, [sp, #84]	@ 0x54
 802077e:	3208      	adds	r2, #8
 8020780:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020782:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020784:	4293      	cmp	r3, r2
 8020786:	d800      	bhi.n	802078a <arm_radix4_butterfly_q31+0x4aa>
 8020788:	e6e8      	b.n	802055c <arm_radix4_butterfly_q31+0x27c>
 802078a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802078c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802078e:	009b      	lsls	r3, r3, #2
 8020790:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020794:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020796:	089b      	lsrs	r3, r3, #2
 8020798:	9320      	str	r3, [sp, #128]	@ 0x80
 802079a:	2b04      	cmp	r3, #4
 802079c:	d900      	bls.n	80207a0 <arm_radix4_butterfly_q31+0x4c0>
 802079e:	e6c1      	b.n	8020524 <arm_radix4_butterfly_q31+0x244>
 80207a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80207a2:	469a      	mov	sl, r3
 80207a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80207a6:	691c      	ldr	r4, [r3, #16]
 80207a8:	685a      	ldr	r2, [r3, #4]
 80207aa:	46a1      	mov	r9, r4
 80207ac:	4690      	mov	r8, r2
 80207ae:	6819      	ldr	r1, [r3, #0]
 80207b0:	689a      	ldr	r2, [r3, #8]
 80207b2:	699f      	ldr	r7, [r3, #24]
 80207b4:	188d      	adds	r5, r1, r2
 80207b6:	444d      	add	r5, r9
 80207b8:	19ed      	adds	r5, r5, r7
 80207ba:	69de      	ldr	r6, [r3, #28]
 80207bc:	601d      	str	r5, [r3, #0]
 80207be:	4645      	mov	r5, r8
 80207c0:	46b4      	mov	ip, r6
 80207c2:	68d8      	ldr	r0, [r3, #12]
 80207c4:	695c      	ldr	r4, [r3, #20]
 80207c6:	182d      	adds	r5, r5, r0
 80207c8:	192d      	adds	r5, r5, r4
 80207ca:	4465      	add	r5, ip
 80207cc:	605d      	str	r5, [r3, #4]
 80207ce:	1a8d      	subs	r5, r1, r2
 80207d0:	444d      	add	r5, r9
 80207d2:	1bed      	subs	r5, r5, r7
 80207d4:	609d      	str	r5, [r3, #8]
 80207d6:	4645      	mov	r5, r8
 80207d8:	1a2d      	subs	r5, r5, r0
 80207da:	192d      	adds	r5, r5, r4
 80207dc:	1bad      	subs	r5, r5, r6
 80207de:	464e      	mov	r6, r9
 80207e0:	60dd      	str	r5, [r3, #12]
 80207e2:	180d      	adds	r5, r1, r0
 80207e4:	1bad      	subs	r5, r5, r6
 80207e6:	4666      	mov	r6, ip
 80207e8:	1bad      	subs	r5, r5, r6
 80207ea:	611d      	str	r5, [r3, #16]
 80207ec:	4645      	mov	r5, r8
 80207ee:	1aad      	subs	r5, r5, r2
 80207f0:	4442      	add	r2, r8
 80207f2:	1b12      	subs	r2, r2, r4
 80207f4:	1bd2      	subs	r2, r2, r7
 80207f6:	1a08      	subs	r0, r1, r0
 80207f8:	61da      	str	r2, [r3, #28]
 80207fa:	4649      	mov	r1, r9
 80207fc:	2201      	movs	r2, #1
 80207fe:	1a41      	subs	r1, r0, r1
 8020800:	4252      	negs	r2, r2
 8020802:	4461      	add	r1, ip
 8020804:	4694      	mov	ip, r2
 8020806:	44e2      	add	sl, ip
 8020808:	4652      	mov	r2, sl
 802080a:	1b2d      	subs	r5, r5, r4
 802080c:	19ed      	adds	r5, r5, r7
 802080e:	615d      	str	r5, [r3, #20]
 8020810:	6199      	str	r1, [r3, #24]
 8020812:	3320      	adds	r3, #32
 8020814:	2a00      	cmp	r2, #0
 8020816:	d1c6      	bne.n	80207a6 <arm_radix4_butterfly_q31+0x4c6>
 8020818:	b027      	add	sp, #156	@ 0x9c
 802081a:	bc3c      	pop	{r2, r3, r4, r5}
 802081c:	4690      	mov	r8, r2
 802081e:	4699      	mov	r9, r3
 8020820:	46a2      	mov	sl, r4
 8020822:	46ab      	mov	fp, r5
 8020824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020826:	469a      	mov	sl, r3
 8020828:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802082a:	e7bc      	b.n	80207a6 <arm_radix4_butterfly_q31+0x4c6>

0802082c <arm_radix4_butterfly_inverse_q31>:
 802082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802082e:	464d      	mov	r5, r9
 8020830:	4644      	mov	r4, r8
 8020832:	465f      	mov	r7, fp
 8020834:	4656      	mov	r6, sl
 8020836:	b4f0      	push	{r4, r5, r6, r7}
 8020838:	b0a7      	sub	sp, #156	@ 0x9c
 802083a:	469c      	mov	ip, r3
 802083c:	9114      	str	r1, [sp, #80]	@ 0x50
 802083e:	0889      	lsrs	r1, r1, #2
 8020840:	9310      	str	r3, [sp, #64]	@ 0x40
 8020842:	00cb      	lsls	r3, r1, #3
 8020844:	0015      	movs	r5, r2
 8020846:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020848:	18c2      	adds	r2, r0, r3
 802084a:	000c      	movs	r4, r1
 802084c:	9124      	str	r1, [sp, #144]	@ 0x90
 802084e:	18d1      	adds	r1, r2, r3
 8020850:	468b      	mov	fp, r1
 8020852:	469a      	mov	sl, r3
 8020854:	4663      	mov	r3, ip
 8020856:	44da      	add	sl, fp
 8020858:	46d0      	mov	r8, sl
 802085a:	4681      	mov	r9, r0
 802085c:	4692      	mov	sl, r2
 802085e:	0119      	lsls	r1, r3, #4
 8020860:	910d      	str	r1, [sp, #52]	@ 0x34
 8020862:	00d9      	lsls	r1, r3, #3
 8020864:	005b      	lsls	r3, r3, #1
 8020866:	4463      	add	r3, ip
 8020868:	910e      	str	r1, [sp, #56]	@ 0x38
 802086a:	00d9      	lsls	r1, r3, #3
 802086c:	9022      	str	r0, [sp, #136]	@ 0x88
 802086e:	9025      	str	r0, [sp, #148]	@ 0x94
 8020870:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020872:	9502      	str	r5, [sp, #8]
 8020874:	9500      	str	r5, [sp, #0]
 8020876:	9501      	str	r5, [sp, #4]
 8020878:	9409      	str	r4, [sp, #36]	@ 0x24
 802087a:	464b      	mov	r3, r9
 802087c:	681b      	ldr	r3, [r3, #0]
 802087e:	4652      	mov	r2, sl
 8020880:	111c      	asrs	r4, r3, #4
 8020882:	465b      	mov	r3, fp
 8020884:	4648      	mov	r0, r9
 8020886:	681b      	ldr	r3, [r3, #0]
 8020888:	6812      	ldr	r2, [r2, #0]
 802088a:	6840      	ldr	r0, [r0, #4]
 802088c:	111b      	asrs	r3, r3, #4
 802088e:	18e7      	adds	r7, r4, r3
 8020890:	1ae3      	subs	r3, r4, r3
 8020892:	1114      	asrs	r4, r2, #4
 8020894:	4642      	mov	r2, r8
 8020896:	1105      	asrs	r5, r0, #4
 8020898:	4658      	mov	r0, fp
 802089a:	6812      	ldr	r2, [r2, #0]
 802089c:	6840      	ldr	r0, [r0, #4]
 802089e:	9303      	str	r3, [sp, #12]
 80208a0:	1113      	asrs	r3, r2, #4
 80208a2:	18e2      	adds	r2, r4, r3
 80208a4:	1103      	asrs	r3, r0, #4
 80208a6:	18ee      	adds	r6, r5, r3
 80208a8:	1ae8      	subs	r0, r5, r3
 80208aa:	464d      	mov	r5, r9
 80208ac:	18bb      	adds	r3, r7, r2
 80208ae:	602b      	str	r3, [r5, #0]
 80208b0:	4641      	mov	r1, r8
 80208b2:	4655      	mov	r5, sl
 80208b4:	6849      	ldr	r1, [r1, #4]
 80208b6:	686d      	ldr	r5, [r5, #4]
 80208b8:	110b      	asrs	r3, r1, #4
 80208ba:	112d      	asrs	r5, r5, #4
 80208bc:	18eb      	adds	r3, r5, r3
 80208be:	464d      	mov	r5, r9
 80208c0:	18f1      	adds	r1, r6, r3
 80208c2:	6069      	str	r1, [r5, #4]
 80208c4:	4655      	mov	r5, sl
 80208c6:	686d      	ldr	r5, [r5, #4]
 80208c8:	9004      	str	r0, [sp, #16]
 80208ca:	112c      	asrs	r4, r5, #4
 80208cc:	4645      	mov	r5, r8
 80208ce:	686d      	ldr	r5, [r5, #4]
 80208d0:	1129      	asrs	r1, r5, #4
 80208d2:	1a65      	subs	r5, r4, r1
 80208d4:	4651      	mov	r1, sl
 80208d6:	6809      	ldr	r1, [r1, #0]
 80208d8:	1abc      	subs	r4, r7, r2
 80208da:	1108      	asrs	r0, r1, #4
 80208dc:	4641      	mov	r1, r8
 80208de:	17e2      	asrs	r2, r4, #31
 80208e0:	6809      	ldr	r1, [r1, #0]
 80208e2:	9207      	str	r2, [sp, #28]
 80208e4:	9a01      	ldr	r2, [sp, #4]
 80208e6:	1109      	asrs	r1, r1, #4
 80208e8:	6817      	ldr	r7, [r2, #0]
 80208ea:	1a41      	subs	r1, r0, r1
 80208ec:	9106      	str	r1, [sp, #24]
 80208ee:	0039      	movs	r1, r7
 80208f0:	17ff      	asrs	r7, r7, #31
 80208f2:	0038      	movs	r0, r7
 80208f4:	9505      	str	r5, [sp, #20]
 80208f6:	1af5      	subs	r5, r6, r3
 80208f8:	17ef      	asrs	r7, r5, #31
 80208fa:	970b      	str	r7, [sp, #44]	@ 0x2c
 80208fc:	6857      	ldr	r7, [r2, #4]
 80208fe:	0003      	movs	r3, r0
 8020900:	17fe      	asrs	r6, r7, #31
 8020902:	000a      	movs	r2, r1
 8020904:	9108      	str	r1, [sp, #32]
 8020906:	900a      	str	r0, [sp, #40]	@ 0x28
 8020908:	17e1      	asrs	r1, r4, #31
 802090a:	0020      	movs	r0, r4
 802090c:	960c      	str	r6, [sp, #48]	@ 0x30
 802090e:	f7df fe57 	bl	80005c0 <__aeabi_lmul>
 8020912:	003a      	movs	r2, r7
 8020914:	17fb      	asrs	r3, r7, #31
 8020916:	000e      	movs	r6, r1
 8020918:	0028      	movs	r0, r5
 802091a:	17e9      	asrs	r1, r5, #31
 802091c:	f7df fe50 	bl	80005c0 <__aeabi_lmul>
 8020920:	4653      	mov	r3, sl
 8020922:	1a76      	subs	r6, r6, r1
 8020924:	0076      	lsls	r6, r6, #1
 8020926:	601e      	str	r6, [r3, #0]
 8020928:	002a      	movs	r2, r5
 802092a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802092c:	9808      	ldr	r0, [sp, #32]
 802092e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020930:	f7df fe46 	bl	80005c0 <__aeabi_lmul>
 8020934:	003a      	movs	r2, r7
 8020936:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020938:	000d      	movs	r5, r1
 802093a:	0020      	movs	r0, r4
 802093c:	9907      	ldr	r1, [sp, #28]
 802093e:	f7df fe3f 	bl	80005c0 <__aeabi_lmul>
 8020942:	4657      	mov	r7, sl
 8020944:	186d      	adds	r5, r5, r1
 8020946:	006d      	lsls	r5, r5, #1
 8020948:	607d      	str	r5, [r7, #4]
 802094a:	9b03      	ldr	r3, [sp, #12]
 802094c:	9e06      	ldr	r6, [sp, #24]
 802094e:	9d05      	ldr	r5, [sp, #20]
 8020950:	46b4      	mov	ip, r6
 8020952:	1b5d      	subs	r5, r3, r5
 8020954:	9b00      	ldr	r3, [sp, #0]
 8020956:	17ef      	asrs	r7, r5, #31
 8020958:	0039      	movs	r1, r7
 802095a:	681f      	ldr	r7, [r3, #0]
 802095c:	17fc      	asrs	r4, r7, #31
 802095e:	0020      	movs	r0, r4
 8020960:	9c04      	ldr	r4, [sp, #16]
 8020962:	4464      	add	r4, ip
 8020964:	17e6      	asrs	r6, r4, #31
 8020966:	9407      	str	r4, [sp, #28]
 8020968:	9608      	str	r6, [sp, #32]
 802096a:	685e      	ldr	r6, [r3, #4]
 802096c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802096e:	17f2      	asrs	r2, r6, #31
 8020970:	0003      	movs	r3, r0
 8020972:	920c      	str	r2, [sp, #48]	@ 0x30
 8020974:	0028      	movs	r0, r5
 8020976:	003a      	movs	r2, r7
 8020978:	910a      	str	r1, [sp, #40]	@ 0x28
 802097a:	f7df fe21 	bl	80005c0 <__aeabi_lmul>
 802097e:	0032      	movs	r2, r6
 8020980:	17f3      	asrs	r3, r6, #31
 8020982:	9807      	ldr	r0, [sp, #28]
 8020984:	000c      	movs	r4, r1
 8020986:	9908      	ldr	r1, [sp, #32]
 8020988:	f7df fe1a 	bl	80005c0 <__aeabi_lmul>
 802098c:	4658      	mov	r0, fp
 802098e:	1a64      	subs	r4, r4, r1
 8020990:	0064      	lsls	r4, r4, #1
 8020992:	9a07      	ldr	r2, [sp, #28]
 8020994:	6004      	str	r4, [r0, #0]
 8020996:	9b08      	ldr	r3, [sp, #32]
 8020998:	0038      	movs	r0, r7
 802099a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802099c:	f7df fe10 	bl	80005c0 <__aeabi_lmul>
 80209a0:	0032      	movs	r2, r6
 80209a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80209a4:	000c      	movs	r4, r1
 80209a6:	0028      	movs	r0, r5
 80209a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80209aa:	f7df fe09 	bl	80005c0 <__aeabi_lmul>
 80209ae:	9d05      	ldr	r5, [sp, #20]
 80209b0:	465f      	mov	r7, fp
 80209b2:	46ac      	mov	ip, r5
 80209b4:	1864      	adds	r4, r4, r1
 80209b6:	9903      	ldr	r1, [sp, #12]
 80209b8:	0064      	lsls	r4, r4, #1
 80209ba:	4461      	add	r1, ip
 80209bc:	607c      	str	r4, [r7, #4]
 80209be:	000c      	movs	r4, r1
 80209c0:	17c9      	asrs	r1, r1, #31
 80209c2:	9105      	str	r1, [sp, #20]
 80209c4:	9902      	ldr	r1, [sp, #8]
 80209c6:	9804      	ldr	r0, [sp, #16]
 80209c8:	680d      	ldr	r5, [r1, #0]
 80209ca:	9e06      	ldr	r6, [sp, #24]
 80209cc:	002b      	movs	r3, r5
 80209ce:	17ed      	asrs	r5, r5, #31
 80209d0:	684f      	ldr	r7, [r1, #4]
 80209d2:	9503      	str	r5, [sp, #12]
 80209d4:	1b85      	subs	r5, r0, r6
 80209d6:	17e8      	asrs	r0, r5, #31
 80209d8:	001a      	movs	r2, r3
 80209da:	9006      	str	r0, [sp, #24]
 80209dc:	17fe      	asrs	r6, r7, #31
 80209de:	9304      	str	r3, [sp, #16]
 80209e0:	0020      	movs	r0, r4
 80209e2:	9b03      	ldr	r3, [sp, #12]
 80209e4:	17e1      	asrs	r1, r4, #31
 80209e6:	9607      	str	r6, [sp, #28]
 80209e8:	f7df fdea 	bl	80005c0 <__aeabi_lmul>
 80209ec:	003a      	movs	r2, r7
 80209ee:	000e      	movs	r6, r1
 80209f0:	17fb      	asrs	r3, r7, #31
 80209f2:	0028      	movs	r0, r5
 80209f4:	17e9      	asrs	r1, r5, #31
 80209f6:	f7df fde3 	bl	80005c0 <__aeabi_lmul>
 80209fa:	4640      	mov	r0, r8
 80209fc:	1a76      	subs	r6, r6, r1
 80209fe:	0076      	lsls	r6, r6, #1
 8020a00:	002a      	movs	r2, r5
 8020a02:	9b06      	ldr	r3, [sp, #24]
 8020a04:	6006      	str	r6, [r0, #0]
 8020a06:	9903      	ldr	r1, [sp, #12]
 8020a08:	9804      	ldr	r0, [sp, #16]
 8020a0a:	f7df fdd9 	bl	80005c0 <__aeabi_lmul>
 8020a0e:	0020      	movs	r0, r4
 8020a10:	2408      	movs	r4, #8
 8020a12:	9b07      	ldr	r3, [sp, #28]
 8020a14:	000d      	movs	r5, r1
 8020a16:	003a      	movs	r2, r7
 8020a18:	9905      	ldr	r1, [sp, #20]
 8020a1a:	f7df fdd1 	bl	80005c0 <__aeabi_lmul>
 8020a1e:	4640      	mov	r0, r8
 8020a20:	46a4      	mov	ip, r4
 8020a22:	186d      	adds	r5, r5, r1
 8020a24:	006d      	lsls	r5, r5, #1
 8020a26:	6045      	str	r5, [r0, #4]
 8020a28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020a2a:	44e1      	add	r9, ip
 8020a2c:	3801      	subs	r0, #1
 8020a2e:	9009      	str	r0, [sp, #36]	@ 0x24
 8020a30:	9a01      	ldr	r2, [sp, #4]
 8020a32:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020a34:	44e2      	add	sl, ip
 8020a36:	44e3      	add	fp, ip
 8020a38:	44e0      	add	r8, ip
 8020a3a:	46a4      	mov	ip, r4
 8020a3c:	4462      	add	r2, ip
 8020a3e:	9201      	str	r2, [sp, #4]
 8020a40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a42:	9b00      	ldr	r3, [sp, #0]
 8020a44:	4694      	mov	ip, r2
 8020a46:	4463      	add	r3, ip
 8020a48:	9300      	str	r3, [sp, #0]
 8020a4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020a4c:	9902      	ldr	r1, [sp, #8]
 8020a4e:	469c      	mov	ip, r3
 8020a50:	4461      	add	r1, ip
 8020a52:	9102      	str	r1, [sp, #8]
 8020a54:	2800      	cmp	r0, #0
 8020a56:	d000      	beq.n	8020a5a <arm_radix4_butterfly_inverse_q31+0x22e>
 8020a58:	e70f      	b.n	802087a <arm_radix4_butterfly_inverse_q31+0x4e>
 8020a5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020a5c:	009b      	lsls	r3, r3, #2
 8020a5e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020a60:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020a62:	9320      	str	r3, [sp, #128]	@ 0x80
 8020a64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020a66:	2b04      	cmp	r3, #4
 8020a68:	d800      	bhi.n	8020a6c <arm_radix4_butterfly_inverse_q31+0x240>
 8020a6a:	e17c      	b.n	8020d66 <arm_radix4_butterfly_inverse_q31+0x53a>
 8020a6c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020a6e:	0893      	lsrs	r3, r2, #2
 8020a70:	1e59      	subs	r1, r3, #1
 8020a72:	9321      	str	r3, [sp, #132]	@ 0x84
 8020a74:	00db      	lsls	r3, r3, #3
 8020a76:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020a78:	00d3      	lsls	r3, r2, #3
 8020a7a:	9300      	str	r3, [sp, #0]
 8020a7c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020a7e:	911a      	str	r1, [sp, #104]	@ 0x68
 8020a80:	00da      	lsls	r2, r3, #3
 8020a82:	921e      	str	r2, [sp, #120]	@ 0x78
 8020a84:	011a      	lsls	r2, r3, #4
 8020a86:	921d      	str	r2, [sp, #116]	@ 0x74
 8020a88:	001a      	movs	r2, r3
 8020a8a:	4694      	mov	ip, r2
 8020a8c:	005b      	lsls	r3, r3, #1
 8020a8e:	4463      	add	r3, ip
 8020a90:	00db      	lsls	r3, r3, #3
 8020a92:	931c      	str	r3, [sp, #112]	@ 0x70
 8020a94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020a96:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020a98:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020a9a:	9318      	str	r3, [sp, #96]	@ 0x60
 8020a9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8020a9e:	9316      	str	r3, [sp, #88]	@ 0x58
 8020aa0:	2300      	movs	r3, #0
 8020aa2:	9315      	str	r3, [sp, #84]	@ 0x54
 8020aa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020aa6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020aa8:	681a      	ldr	r2, [r3, #0]
 8020aaa:	685b      	ldr	r3, [r3, #4]
 8020aac:	9205      	str	r2, [sp, #20]
 8020aae:	9306      	str	r3, [sp, #24]
 8020ab0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020ab2:	468c      	mov	ip, r1
 8020ab4:	681a      	ldr	r2, [r3, #0]
 8020ab6:	685b      	ldr	r3, [r3, #4]
 8020ab8:	9207      	str	r2, [sp, #28]
 8020aba:	9308      	str	r3, [sp, #32]
 8020abc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020abe:	681a      	ldr	r2, [r3, #0]
 8020ac0:	685b      	ldr	r3, [r3, #4]
 8020ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8020ac4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ac8:	0013      	movs	r3, r2
 8020aca:	4463      	add	r3, ip
 8020acc:	4698      	mov	r8, r3
 8020ace:	0013      	movs	r3, r2
 8020ad0:	4442      	add	r2, r8
 8020ad2:	4691      	mov	r9, r2
 8020ad4:	001a      	movs	r2, r3
 8020ad6:	444a      	add	r2, r9
 8020ad8:	4692      	mov	sl, r2
 8020ada:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020adc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020ade:	4293      	cmp	r3, r2
 8020ae0:	d800      	bhi.n	8020ae4 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8020ae2:	e0d9      	b.n	8020c98 <arm_radix4_butterfly_inverse_q31+0x46c>
 8020ae4:	4694      	mov	ip, r2
 8020ae6:	4644      	mov	r4, r8
 8020ae8:	4655      	mov	r5, sl
 8020aea:	4688      	mov	r8, r1
 8020aec:	9b07      	ldr	r3, [sp, #28]
 8020aee:	17db      	asrs	r3, r3, #31
 8020af0:	930c      	str	r3, [sp, #48]	@ 0x30
 8020af2:	9b08      	ldr	r3, [sp, #32]
 8020af4:	17db      	asrs	r3, r3, #31
 8020af6:	930d      	str	r3, [sp, #52]	@ 0x34
 8020af8:	9b05      	ldr	r3, [sp, #20]
 8020afa:	17db      	asrs	r3, r3, #31
 8020afc:	930e      	str	r3, [sp, #56]	@ 0x38
 8020afe:	9b06      	ldr	r3, [sp, #24]
 8020b00:	17db      	asrs	r3, r3, #31
 8020b02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b06:	17db      	asrs	r3, r3, #31
 8020b08:	9310      	str	r3, [sp, #64]	@ 0x40
 8020b0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020b0c:	17db      	asrs	r3, r3, #31
 8020b0e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020b10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020b12:	4463      	add	r3, ip
 8020b14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020b16:	4643      	mov	r3, r8
 8020b18:	4641      	mov	r1, r8
 8020b1a:	681a      	ldr	r2, [r3, #0]
 8020b1c:	464b      	mov	r3, r9
 8020b1e:	684f      	ldr	r7, [r1, #4]
 8020b20:	4649      	mov	r1, r9
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	18d6      	adds	r6, r2, r3
 8020b26:	1ad3      	subs	r3, r2, r3
 8020b28:	9301      	str	r3, [sp, #4]
 8020b2a:	684b      	ldr	r3, [r1, #4]
 8020b2c:	1af9      	subs	r1, r7, r3
 8020b2e:	9102      	str	r1, [sp, #8]
 8020b30:	6829      	ldr	r1, [r5, #0]
 8020b32:	18f8      	adds	r0, r7, r3
 8020b34:	468c      	mov	ip, r1
 8020b36:	6827      	ldr	r7, [r4, #0]
 8020b38:	4467      	add	r7, ip
 8020b3a:	003a      	movs	r2, r7
 8020b3c:	19f3      	adds	r3, r6, r7
 8020b3e:	4647      	mov	r7, r8
 8020b40:	109b      	asrs	r3, r3, #2
 8020b42:	603b      	str	r3, [r7, #0]
 8020b44:	6869      	ldr	r1, [r5, #4]
 8020b46:	6867      	ldr	r7, [r4, #4]
 8020b48:	468c      	mov	ip, r1
 8020b4a:	4467      	add	r7, ip
 8020b4c:	003b      	movs	r3, r7
 8020b4e:	19c1      	adds	r1, r0, r7
 8020b50:	4647      	mov	r7, r8
 8020b52:	1ab6      	subs	r6, r6, r2
 8020b54:	1089      	asrs	r1, r1, #2
 8020b56:	6079      	str	r1, [r7, #4]
 8020b58:	17f2      	asrs	r2, r6, #31
 8020b5a:	9900      	ldr	r1, [sp, #0]
 8020b5c:	4692      	mov	sl, r2
 8020b5e:	468c      	mov	ip, r1
 8020b60:	6867      	ldr	r7, [r4, #4]
 8020b62:	6869      	ldr	r1, [r5, #4]
 8020b64:	44e0      	add	r8, ip
 8020b66:	1a7f      	subs	r7, r7, r1
 8020b68:	9703      	str	r7, [sp, #12]
 8020b6a:	6821      	ldr	r1, [r4, #0]
 8020b6c:	682f      	ldr	r7, [r5, #0]
 8020b6e:	1bc9      	subs	r1, r1, r7
 8020b70:	1ac7      	subs	r7, r0, r3
 8020b72:	17fa      	asrs	r2, r7, #31
 8020b74:	4693      	mov	fp, r2
 8020b76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b78:	9a07      	ldr	r2, [sp, #28]
 8020b7a:	9104      	str	r1, [sp, #16]
 8020b7c:	0030      	movs	r0, r6
 8020b7e:	4651      	mov	r1, sl
 8020b80:	f7df fd1e 	bl	80005c0 <__aeabi_lmul>
 8020b84:	9a08      	ldr	r2, [sp, #32]
 8020b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020b88:	9112      	str	r1, [sp, #72]	@ 0x48
 8020b8a:	0038      	movs	r0, r7
 8020b8c:	4659      	mov	r1, fp
 8020b8e:	f7df fd17 	bl	80005c0 <__aeabi_lmul>
 8020b92:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020b94:	9a07      	ldr	r2, [sp, #28]
 8020b96:	1a41      	subs	r1, r0, r1
 8020b98:	1049      	asrs	r1, r1, #1
 8020b9a:	6021      	str	r1, [r4, #0]
 8020b9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b9e:	0038      	movs	r0, r7
 8020ba0:	4659      	mov	r1, fp
 8020ba2:	f7df fd0d 	bl	80005c0 <__aeabi_lmul>
 8020ba6:	9a08      	ldr	r2, [sp, #32]
 8020ba8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020baa:	000f      	movs	r7, r1
 8020bac:	0030      	movs	r0, r6
 8020bae:	4651      	mov	r1, sl
 8020bb0:	f7df fd06 	bl	80005c0 <__aeabi_lmul>
 8020bb4:	9b00      	ldr	r3, [sp, #0]
 8020bb6:	187f      	adds	r7, r7, r1
 8020bb8:	469c      	mov	ip, r3
 8020bba:	107f      	asrs	r7, r7, #1
 8020bbc:	6067      	str	r7, [r4, #4]
 8020bbe:	9a01      	ldr	r2, [sp, #4]
 8020bc0:	9f03      	ldr	r7, [sp, #12]
 8020bc2:	9802      	ldr	r0, [sp, #8]
 8020bc4:	1bd7      	subs	r7, r2, r7
 8020bc6:	17fe      	asrs	r6, r7, #31
 8020bc8:	0031      	movs	r1, r6
 8020bca:	9e04      	ldr	r6, [sp, #16]
 8020bcc:	4682      	mov	sl, r0
 8020bce:	4464      	add	r4, ip
 8020bd0:	46b4      	mov	ip, r6
 8020bd2:	44e2      	add	sl, ip
 8020bd4:	4652      	mov	r2, sl
 8020bd6:	17d2      	asrs	r2, r2, #31
 8020bd8:	4693      	mov	fp, r2
 8020bda:	0038      	movs	r0, r7
 8020bdc:	9a05      	ldr	r2, [sp, #20]
 8020bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020be0:	9112      	str	r1, [sp, #72]	@ 0x48
 8020be2:	f7df fced 	bl	80005c0 <__aeabi_lmul>
 8020be6:	9a06      	ldr	r2, [sp, #24]
 8020be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020bea:	000e      	movs	r6, r1
 8020bec:	4650      	mov	r0, sl
 8020bee:	4659      	mov	r1, fp
 8020bf0:	f7df fce6 	bl	80005c0 <__aeabi_lmul>
 8020bf4:	4648      	mov	r0, r9
 8020bf6:	1a76      	subs	r6, r6, r1
 8020bf8:	1076      	asrs	r6, r6, #1
 8020bfa:	6006      	str	r6, [r0, #0]
 8020bfc:	9a05      	ldr	r2, [sp, #20]
 8020bfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020c00:	4650      	mov	r0, sl
 8020c02:	4659      	mov	r1, fp
 8020c04:	f7df fcdc 	bl	80005c0 <__aeabi_lmul>
 8020c08:	9a06      	ldr	r2, [sp, #24]
 8020c0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c0c:	000e      	movs	r6, r1
 8020c0e:	0038      	movs	r0, r7
 8020c10:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020c12:	f7df fcd5 	bl	80005c0 <__aeabi_lmul>
 8020c16:	9a00      	ldr	r2, [sp, #0]
 8020c18:	9f03      	ldr	r7, [sp, #12]
 8020c1a:	4694      	mov	ip, r2
 8020c1c:	1876      	adds	r6, r6, r1
 8020c1e:	4649      	mov	r1, r9
 8020c20:	44e1      	add	r9, ip
 8020c22:	46bc      	mov	ip, r7
 8020c24:	9b01      	ldr	r3, [sp, #4]
 8020c26:	1076      	asrs	r6, r6, #1
 8020c28:	4463      	add	r3, ip
 8020c2a:	17df      	asrs	r7, r3, #31
 8020c2c:	604e      	str	r6, [r1, #4]
 8020c2e:	46ba      	mov	sl, r7
 8020c30:	001e      	movs	r6, r3
 8020c32:	9802      	ldr	r0, [sp, #8]
 8020c34:	9b04      	ldr	r3, [sp, #16]
 8020c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020c38:	1ac7      	subs	r7, r0, r3
 8020c3a:	17fb      	asrs	r3, r7, #31
 8020c3c:	469b      	mov	fp, r3
 8020c3e:	0030      	movs	r0, r6
 8020c40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c42:	4651      	mov	r1, sl
 8020c44:	f7df fcbc 	bl	80005c0 <__aeabi_lmul>
 8020c48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020c4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020c4c:	9101      	str	r1, [sp, #4]
 8020c4e:	0038      	movs	r0, r7
 8020c50:	4659      	mov	r1, fp
 8020c52:	f7df fcb5 	bl	80005c0 <__aeabi_lmul>
 8020c56:	9801      	ldr	r0, [sp, #4]
 8020c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020c5a:	1a41      	subs	r1, r0, r1
 8020c5c:	1049      	asrs	r1, r1, #1
 8020c5e:	6029      	str	r1, [r5, #0]
 8020c60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c62:	0038      	movs	r0, r7
 8020c64:	4659      	mov	r1, fp
 8020c66:	f7df fcab 	bl	80005c0 <__aeabi_lmul>
 8020c6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020c6c:	000f      	movs	r7, r1
 8020c6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020c70:	0030      	movs	r0, r6
 8020c72:	4651      	mov	r1, sl
 8020c74:	f7df fca4 	bl	80005c0 <__aeabi_lmul>
 8020c78:	187f      	adds	r7, r7, r1
 8020c7a:	107f      	asrs	r7, r7, #1
 8020c7c:	606f      	str	r7, [r5, #4]
 8020c7e:	9a00      	ldr	r2, [sp, #0]
 8020c80:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020c82:	4694      	mov	ip, r2
 8020c84:	4465      	add	r5, ip
 8020c86:	468c      	mov	ip, r1
 8020c88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020c8a:	0013      	movs	r3, r2
 8020c8c:	4462      	add	r2, ip
 8020c8e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020c90:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020c92:	429a      	cmp	r2, r3
 8020c94:	d900      	bls.n	8020c98 <arm_radix4_butterfly_inverse_q31+0x46c>
 8020c96:	e73e      	b.n	8020b16 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8020c98:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8020c9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020c9c:	468c      	mov	ip, r1
 8020c9e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8020ca0:	4462      	add	r2, ip
 8020ca2:	468c      	mov	ip, r1
 8020ca4:	9216      	str	r2, [sp, #88]	@ 0x58
 8020ca6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020ca8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020caa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020cac:	4462      	add	r2, ip
 8020cae:	468c      	mov	ip, r1
 8020cb0:	9219      	str	r2, [sp, #100]	@ 0x64
 8020cb2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020cb4:	3301      	adds	r3, #1
 8020cb6:	4462      	add	r2, ip
 8020cb8:	9218      	str	r2, [sp, #96]	@ 0x60
 8020cba:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020cbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8020cbe:	3208      	adds	r2, #8
 8020cc0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020cc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020cc4:	4293      	cmp	r3, r2
 8020cc6:	d800      	bhi.n	8020cca <arm_radix4_butterfly_inverse_q31+0x49e>
 8020cc8:	e6ec      	b.n	8020aa4 <arm_radix4_butterfly_inverse_q31+0x278>
 8020cca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020ccc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020cce:	009b      	lsls	r3, r3, #2
 8020cd0:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020cd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020cd4:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020cd6:	089b      	lsrs	r3, r3, #2
 8020cd8:	9320      	str	r3, [sp, #128]	@ 0x80
 8020cda:	2b04      	cmp	r3, #4
 8020cdc:	d900      	bls.n	8020ce0 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8020cde:	e6c5      	b.n	8020a6c <arm_radix4_butterfly_inverse_q31+0x240>
 8020ce0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020ce2:	469a      	mov	sl, r3
 8020ce4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020ce6:	681a      	ldr	r2, [r3, #0]
 8020ce8:	6918      	ldr	r0, [r3, #16]
 8020cea:	4691      	mov	r9, r2
 8020cec:	464c      	mov	r4, r9
 8020cee:	4680      	mov	r8, r0
 8020cf0:	69de      	ldr	r6, [r3, #28]
 8020cf2:	689d      	ldr	r5, [r3, #8]
 8020cf4:	46b4      	mov	ip, r6
 8020cf6:	6998      	ldr	r0, [r3, #24]
 8020cf8:	1964      	adds	r4, r4, r5
 8020cfa:	6859      	ldr	r1, [r3, #4]
 8020cfc:	68da      	ldr	r2, [r3, #12]
 8020cfe:	4444      	add	r4, r8
 8020d00:	695f      	ldr	r7, [r3, #20]
 8020d02:	1824      	adds	r4, r4, r0
 8020d04:	601c      	str	r4, [r3, #0]
 8020d06:	188c      	adds	r4, r1, r2
 8020d08:	19e4      	adds	r4, r4, r7
 8020d0a:	4464      	add	r4, ip
 8020d0c:	605c      	str	r4, [r3, #4]
 8020d0e:	464c      	mov	r4, r9
 8020d10:	1b64      	subs	r4, r4, r5
 8020d12:	4444      	add	r4, r8
 8020d14:	1a24      	subs	r4, r4, r0
 8020d16:	609c      	str	r4, [r3, #8]
 8020d18:	1a8c      	subs	r4, r1, r2
 8020d1a:	19e4      	adds	r4, r4, r7
 8020d1c:	1ba4      	subs	r4, r4, r6
 8020d1e:	60dc      	str	r4, [r3, #12]
 8020d20:	464c      	mov	r4, r9
 8020d22:	4646      	mov	r6, r8
 8020d24:	1aa4      	subs	r4, r4, r2
 8020d26:	1ba4      	subs	r4, r4, r6
 8020d28:	4464      	add	r4, ip
 8020d2a:	611c      	str	r4, [r3, #16]
 8020d2c:	194c      	adds	r4, r1, r5
 8020d2e:	1be4      	subs	r4, r4, r7
 8020d30:	1a24      	subs	r4, r4, r0
 8020d32:	615c      	str	r4, [r3, #20]
 8020d34:	4644      	mov	r4, r8
 8020d36:	4666      	mov	r6, ip
 8020d38:	444a      	add	r2, r9
 8020d3a:	1b12      	subs	r2, r2, r4
 8020d3c:	1b92      	subs	r2, r2, r6
 8020d3e:	619a      	str	r2, [r3, #24]
 8020d40:	1b4a      	subs	r2, r1, r5
 8020d42:	1bd1      	subs	r1, r2, r7
 8020d44:	2201      	movs	r2, #1
 8020d46:	4252      	negs	r2, r2
 8020d48:	4694      	mov	ip, r2
 8020d4a:	44e2      	add	sl, ip
 8020d4c:	4652      	mov	r2, sl
 8020d4e:	1809      	adds	r1, r1, r0
 8020d50:	61d9      	str	r1, [r3, #28]
 8020d52:	3320      	adds	r3, #32
 8020d54:	2a00      	cmp	r2, #0
 8020d56:	d1c6      	bne.n	8020ce6 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8020d58:	b027      	add	sp, #156	@ 0x9c
 8020d5a:	bc3c      	pop	{r2, r3, r4, r5}
 8020d5c:	4690      	mov	r8, r2
 8020d5e:	4699      	mov	r9, r3
 8020d60:	46a2      	mov	sl, r4
 8020d62:	46ab      	mov	fp, r5
 8020d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d66:	469a      	mov	sl, r3
 8020d68:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020d6a:	e7bc      	b.n	8020ce6 <arm_radix4_butterfly_inverse_q31+0x4ba>

08020d6c <arm_cmplx_mag_squared_q31>:
 8020d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d6e:	464f      	mov	r7, r9
 8020d70:	4646      	mov	r6, r8
 8020d72:	0004      	movs	r4, r0
 8020d74:	b4c0      	push	{r6, r7}
 8020d76:	0016      	movs	r6, r2
 8020d78:	000f      	movs	r7, r1
 8020d7a:	2a00      	cmp	r2, #0
 8020d7c:	d018      	beq.n	8020db0 <arm_cmplx_mag_squared_q31+0x44>
 8020d7e:	6823      	ldr	r3, [r4, #0]
 8020d80:	6822      	ldr	r2, [r4, #0]
 8020d82:	17d9      	asrs	r1, r3, #31
 8020d84:	6863      	ldr	r3, [r4, #4]
 8020d86:	0010      	movs	r0, r2
 8020d88:	4698      	mov	r8, r3
 8020d8a:	17db      	asrs	r3, r3, #31
 8020d8c:	4699      	mov	r9, r3
 8020d8e:	000b      	movs	r3, r1
 8020d90:	f7df fc16 	bl	80005c0 <__aeabi_lmul>
 8020d94:	4642      	mov	r2, r8
 8020d96:	104d      	asrs	r5, r1, #1
 8020d98:	464b      	mov	r3, r9
 8020d9a:	4640      	mov	r0, r8
 8020d9c:	4649      	mov	r1, r9
 8020d9e:	f7df fc0f 	bl	80005c0 <__aeabi_lmul>
 8020da2:	1049      	asrs	r1, r1, #1
 8020da4:	1869      	adds	r1, r5, r1
 8020da6:	3e01      	subs	r6, #1
 8020da8:	c702      	stmia	r7!, {r1}
 8020daa:	3408      	adds	r4, #8
 8020dac:	2e00      	cmp	r6, #0
 8020dae:	d1e6      	bne.n	8020d7e <arm_cmplx_mag_squared_q31+0x12>
 8020db0:	bc0c      	pop	{r2, r3}
 8020db2:	4690      	mov	r8, r2
 8020db4:	4699      	mov	r9, r3
 8020db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020db8 <arm_mult_q31>:
 8020db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020dba:	4646      	mov	r6, r8
 8020dbc:	464f      	mov	r7, r9
 8020dbe:	4690      	mov	r8, r2
 8020dc0:	b4c0      	push	{r6, r7}
 8020dc2:	001d      	movs	r5, r3
 8020dc4:	0006      	movs	r6, r0
 8020dc6:	000f      	movs	r7, r1
 8020dc8:	2400      	movs	r4, #0
 8020dca:	2b00      	cmp	r3, #0
 8020dcc:	d020      	beq.n	8020e10 <arm_mult_q31+0x58>
 8020dce:	4b12      	ldr	r3, [pc, #72]	@ (8020e18 <arm_mult_q31+0x60>)
 8020dd0:	4699      	mov	r9, r3
 8020dd2:	e007      	b.n	8020de4 <arm_mult_q31+0x2c>
 8020dd4:	464b      	mov	r3, r9
 8020dd6:	4059      	eors	r1, r3
 8020dd8:	4643      	mov	r3, r8
 8020dda:	3d01      	subs	r5, #1
 8020ddc:	5119      	str	r1, [r3, r4]
 8020dde:	3404      	adds	r4, #4
 8020de0:	2d00      	cmp	r5, #0
 8020de2:	d015      	beq.n	8020e10 <arm_mult_q31+0x58>
 8020de4:	5933      	ldr	r3, [r6, r4]
 8020de6:	593a      	ldr	r2, [r7, r4]
 8020de8:	17d9      	asrs	r1, r3, #31
 8020dea:	593b      	ldr	r3, [r7, r4]
 8020dec:	5930      	ldr	r0, [r6, r4]
 8020dee:	17db      	asrs	r3, r3, #31
 8020df0:	f7df fbe6 	bl	80005c0 <__aeabi_lmul>
 8020df4:	004b      	lsls	r3, r1, #1
 8020df6:	0fc0      	lsrs	r0, r0, #31
 8020df8:	4318      	orrs	r0, r3
 8020dfa:	17c9      	asrs	r1, r1, #31
 8020dfc:	17c3      	asrs	r3, r0, #31
 8020dfe:	428b      	cmp	r3, r1
 8020e00:	d1e8      	bne.n	8020dd4 <arm_mult_q31+0x1c>
 8020e02:	0001      	movs	r1, r0
 8020e04:	4643      	mov	r3, r8
 8020e06:	3d01      	subs	r5, #1
 8020e08:	5119      	str	r1, [r3, r4]
 8020e0a:	3404      	adds	r4, #4
 8020e0c:	2d00      	cmp	r5, #0
 8020e0e:	d1e9      	bne.n	8020de4 <arm_mult_q31+0x2c>
 8020e10:	bc0c      	pop	{r2, r3}
 8020e12:	4690      	mov	r8, r2
 8020e14:	4699      	mov	r9, r3
 8020e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020e18:	7fffffff 	.word	0x7fffffff

08020e1c <arm_add_q31>:
 8020e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e1e:	465f      	mov	r7, fp
 8020e20:	4656      	mov	r6, sl
 8020e22:	464d      	mov	r5, r9
 8020e24:	4644      	mov	r4, r8
 8020e26:	b4f0      	push	{r4, r5, r6, r7}
 8020e28:	4693      	mov	fp, r2
 8020e2a:	b083      	sub	sp, #12
 8020e2c:	4681      	mov	r9, r0
 8020e2e:	468a      	mov	sl, r1
 8020e30:	4698      	mov	r8, r3
 8020e32:	2200      	movs	r2, #0
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d020      	beq.n	8020e7a <arm_add_q31+0x5e>
 8020e38:	4649      	mov	r1, r9
 8020e3a:	4653      	mov	r3, sl
 8020e3c:	588e      	ldr	r6, [r1, r2]
 8020e3e:	589b      	ldr	r3, [r3, r2]
 8020e40:	17f7      	asrs	r7, r6, #31
 8020e42:	001c      	movs	r4, r3
 8020e44:	0030      	movs	r0, r6
 8020e46:	0039      	movs	r1, r7
 8020e48:	17dd      	asrs	r5, r3, #31
 8020e4a:	46b4      	mov	ip, r6
 8020e4c:	1900      	adds	r0, r0, r4
 8020e4e:	4169      	adcs	r1, r5
 8020e50:	4463      	add	r3, ip
 8020e52:	9000      	str	r0, [sp, #0]
 8020e54:	9101      	str	r1, [sp, #4]
 8020e56:	17d9      	asrs	r1, r3, #31
 8020e58:	468c      	mov	ip, r1
 8020e5a:	9901      	ldr	r1, [sp, #4]
 8020e5c:	458c      	cmp	ip, r1
 8020e5e:	d002      	beq.n	8020e66 <arm_add_q31+0x4a>
 8020e60:	17cb      	asrs	r3, r1, #31
 8020e62:	4909      	ldr	r1, [pc, #36]	@ (8020e88 <arm_add_q31+0x6c>)
 8020e64:	404b      	eors	r3, r1
 8020e66:	4659      	mov	r1, fp
 8020e68:	508b      	str	r3, [r1, r2]
 8020e6a:	2301      	movs	r3, #1
 8020e6c:	425b      	negs	r3, r3
 8020e6e:	469c      	mov	ip, r3
 8020e70:	44e0      	add	r8, ip
 8020e72:	4643      	mov	r3, r8
 8020e74:	3204      	adds	r2, #4
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	d1de      	bne.n	8020e38 <arm_add_q31+0x1c>
 8020e7a:	b003      	add	sp, #12
 8020e7c:	bc3c      	pop	{r2, r3, r4, r5}
 8020e7e:	4690      	mov	r8, r2
 8020e80:	4699      	mov	r9, r3
 8020e82:	46a2      	mov	sl, r4
 8020e84:	46ab      	mov	fp, r5
 8020e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e88:	7fffffff 	.word	0x7fffffff

08020e8c <atof>:
 8020e8c:	b510      	push	{r4, lr}
 8020e8e:	2100      	movs	r1, #0
 8020e90:	f000 fe12 	bl	8021ab8 <strtod>
 8020e94:	bd10      	pop	{r4, pc}

08020e96 <atoi>:
 8020e96:	b510      	push	{r4, lr}
 8020e98:	220a      	movs	r2, #10
 8020e9a:	2100      	movs	r1, #0
 8020e9c:	f000 fea4 	bl	8021be8 <strtol>
 8020ea0:	bd10      	pop	{r4, pc}
	...

08020ea4 <sulp>:
 8020ea4:	b570      	push	{r4, r5, r6, lr}
 8020ea6:	0016      	movs	r6, r2
 8020ea8:	000d      	movs	r5, r1
 8020eaa:	f003 fd15 	bl	80248d8 <__ulp>
 8020eae:	2e00      	cmp	r6, #0
 8020eb0:	d00d      	beq.n	8020ece <sulp+0x2a>
 8020eb2:	236b      	movs	r3, #107	@ 0x6b
 8020eb4:	006a      	lsls	r2, r5, #1
 8020eb6:	0d52      	lsrs	r2, r2, #21
 8020eb8:	1a9b      	subs	r3, r3, r2
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	dd07      	ble.n	8020ece <sulp+0x2a>
 8020ebe:	2400      	movs	r4, #0
 8020ec0:	4a03      	ldr	r2, [pc, #12]	@ (8020ed0 <sulp+0x2c>)
 8020ec2:	051b      	lsls	r3, r3, #20
 8020ec4:	189d      	adds	r5, r3, r2
 8020ec6:	002b      	movs	r3, r5
 8020ec8:	0022      	movs	r2, r4
 8020eca:	f7e1 fbb7 	bl	800263c <__aeabi_dmul>
 8020ece:	bd70      	pop	{r4, r5, r6, pc}
 8020ed0:	3ff00000 	.word	0x3ff00000

08020ed4 <_strtod_l>:
 8020ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020ed6:	b0a3      	sub	sp, #140	@ 0x8c
 8020ed8:	921b      	str	r2, [sp, #108]	@ 0x6c
 8020eda:	2200      	movs	r2, #0
 8020edc:	2600      	movs	r6, #0
 8020ede:	2700      	movs	r7, #0
 8020ee0:	9005      	str	r0, [sp, #20]
 8020ee2:	9109      	str	r1, [sp, #36]	@ 0x24
 8020ee4:	921e      	str	r2, [sp, #120]	@ 0x78
 8020ee6:	911d      	str	r1, [sp, #116]	@ 0x74
 8020ee8:	780a      	ldrb	r2, [r1, #0]
 8020eea:	2a2b      	cmp	r2, #43	@ 0x2b
 8020eec:	d053      	beq.n	8020f96 <_strtod_l+0xc2>
 8020eee:	d83f      	bhi.n	8020f70 <_strtod_l+0x9c>
 8020ef0:	2a0d      	cmp	r2, #13
 8020ef2:	d839      	bhi.n	8020f68 <_strtod_l+0x94>
 8020ef4:	2a08      	cmp	r2, #8
 8020ef6:	d839      	bhi.n	8020f6c <_strtod_l+0x98>
 8020ef8:	2a00      	cmp	r2, #0
 8020efa:	d042      	beq.n	8020f82 <_strtod_l+0xae>
 8020efc:	2200      	movs	r2, #0
 8020efe:	9212      	str	r2, [sp, #72]	@ 0x48
 8020f00:	2100      	movs	r1, #0
 8020f02:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8020f04:	910c      	str	r1, [sp, #48]	@ 0x30
 8020f06:	782a      	ldrb	r2, [r5, #0]
 8020f08:	2a30      	cmp	r2, #48	@ 0x30
 8020f0a:	d000      	beq.n	8020f0e <_strtod_l+0x3a>
 8020f0c:	e083      	b.n	8021016 <_strtod_l+0x142>
 8020f0e:	786a      	ldrb	r2, [r5, #1]
 8020f10:	3120      	adds	r1, #32
 8020f12:	438a      	bics	r2, r1
 8020f14:	2a58      	cmp	r2, #88	@ 0x58
 8020f16:	d000      	beq.n	8020f1a <_strtod_l+0x46>
 8020f18:	e073      	b.n	8021002 <_strtod_l+0x12e>
 8020f1a:	9302      	str	r3, [sp, #8]
 8020f1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020f1e:	4a95      	ldr	r2, [pc, #596]	@ (8021174 <_strtod_l+0x2a0>)
 8020f20:	9301      	str	r3, [sp, #4]
 8020f22:	ab1e      	add	r3, sp, #120	@ 0x78
 8020f24:	9300      	str	r3, [sp, #0]
 8020f26:	9805      	ldr	r0, [sp, #20]
 8020f28:	ab1f      	add	r3, sp, #124	@ 0x7c
 8020f2a:	a91d      	add	r1, sp, #116	@ 0x74
 8020f2c:	f002 fd84 	bl	8023a38 <__gethex>
 8020f30:	230f      	movs	r3, #15
 8020f32:	0002      	movs	r2, r0
 8020f34:	401a      	ands	r2, r3
 8020f36:	0004      	movs	r4, r0
 8020f38:	9206      	str	r2, [sp, #24]
 8020f3a:	4218      	tst	r0, r3
 8020f3c:	d005      	beq.n	8020f4a <_strtod_l+0x76>
 8020f3e:	2a06      	cmp	r2, #6
 8020f40:	d12b      	bne.n	8020f9a <_strtod_l+0xc6>
 8020f42:	2300      	movs	r3, #0
 8020f44:	3501      	adds	r5, #1
 8020f46:	951d      	str	r5, [sp, #116]	@ 0x74
 8020f48:	9312      	str	r3, [sp, #72]	@ 0x48
 8020f4a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	d002      	beq.n	8020f56 <_strtod_l+0x82>
 8020f50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020f52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020f54:	6013      	str	r3, [r2, #0]
 8020f56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	d019      	beq.n	8020f90 <_strtod_l+0xbc>
 8020f5c:	2380      	movs	r3, #128	@ 0x80
 8020f5e:	0030      	movs	r0, r6
 8020f60:	061b      	lsls	r3, r3, #24
 8020f62:	18f9      	adds	r1, r7, r3
 8020f64:	b023      	add	sp, #140	@ 0x8c
 8020f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f68:	2a20      	cmp	r2, #32
 8020f6a:	d1c7      	bne.n	8020efc <_strtod_l+0x28>
 8020f6c:	3101      	adds	r1, #1
 8020f6e:	e7ba      	b.n	8020ee6 <_strtod_l+0x12>
 8020f70:	2a2d      	cmp	r2, #45	@ 0x2d
 8020f72:	d1c3      	bne.n	8020efc <_strtod_l+0x28>
 8020f74:	3a2c      	subs	r2, #44	@ 0x2c
 8020f76:	9212      	str	r2, [sp, #72]	@ 0x48
 8020f78:	1c4a      	adds	r2, r1, #1
 8020f7a:	921d      	str	r2, [sp, #116]	@ 0x74
 8020f7c:	784a      	ldrb	r2, [r1, #1]
 8020f7e:	2a00      	cmp	r2, #0
 8020f80:	d1be      	bne.n	8020f00 <_strtod_l+0x2c>
 8020f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f84:	931d      	str	r3, [sp, #116]	@ 0x74
 8020f86:	2300      	movs	r3, #0
 8020f88:	9312      	str	r3, [sp, #72]	@ 0x48
 8020f8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	d1df      	bne.n	8020f50 <_strtod_l+0x7c>
 8020f90:	0030      	movs	r0, r6
 8020f92:	0039      	movs	r1, r7
 8020f94:	e7e6      	b.n	8020f64 <_strtod_l+0x90>
 8020f96:	2200      	movs	r2, #0
 8020f98:	e7ed      	b.n	8020f76 <_strtod_l+0xa2>
 8020f9a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8020f9c:	2a00      	cmp	r2, #0
 8020f9e:	d007      	beq.n	8020fb0 <_strtod_l+0xdc>
 8020fa0:	2135      	movs	r1, #53	@ 0x35
 8020fa2:	a820      	add	r0, sp, #128	@ 0x80
 8020fa4:	f003 fd8e 	bl	8024ac4 <__copybits>
 8020fa8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8020faa:	9805      	ldr	r0, [sp, #20]
 8020fac:	f003 f948 	bl	8024240 <_Bfree>
 8020fb0:	9806      	ldr	r0, [sp, #24]
 8020fb2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020fb4:	3801      	subs	r0, #1
 8020fb6:	2804      	cmp	r0, #4
 8020fb8:	d806      	bhi.n	8020fc8 <_strtod_l+0xf4>
 8020fba:	f7df f8df 	bl	800017c <__gnu_thumb1_case_uqi>
 8020fbe:	0312      	.short	0x0312
 8020fc0:	1e1c      	.short	0x1e1c
 8020fc2:	12          	.byte	0x12
 8020fc3:	00          	.byte	0x00
 8020fc4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8020fc6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8020fc8:	05e4      	lsls	r4, r4, #23
 8020fca:	d502      	bpl.n	8020fd2 <_strtod_l+0xfe>
 8020fcc:	2380      	movs	r3, #128	@ 0x80
 8020fce:	061b      	lsls	r3, r3, #24
 8020fd0:	431f      	orrs	r7, r3
 8020fd2:	4b69      	ldr	r3, [pc, #420]	@ (8021178 <_strtod_l+0x2a4>)
 8020fd4:	423b      	tst	r3, r7
 8020fd6:	d1b8      	bne.n	8020f4a <_strtod_l+0x76>
 8020fd8:	f001 fdb2 	bl	8022b40 <__errno>
 8020fdc:	2322      	movs	r3, #34	@ 0x22
 8020fde:	6003      	str	r3, [r0, #0]
 8020fe0:	e7b3      	b.n	8020f4a <_strtod_l+0x76>
 8020fe2:	4966      	ldr	r1, [pc, #408]	@ (802117c <_strtod_l+0x2a8>)
 8020fe4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020fe6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8020fe8:	400a      	ands	r2, r1
 8020fea:	4965      	ldr	r1, [pc, #404]	@ (8021180 <_strtod_l+0x2ac>)
 8020fec:	185b      	adds	r3, r3, r1
 8020fee:	051b      	lsls	r3, r3, #20
 8020ff0:	431a      	orrs	r2, r3
 8020ff2:	0017      	movs	r7, r2
 8020ff4:	e7e8      	b.n	8020fc8 <_strtod_l+0xf4>
 8020ff6:	4f60      	ldr	r7, [pc, #384]	@ (8021178 <_strtod_l+0x2a4>)
 8020ff8:	e7e6      	b.n	8020fc8 <_strtod_l+0xf4>
 8020ffa:	2601      	movs	r6, #1
 8020ffc:	4f61      	ldr	r7, [pc, #388]	@ (8021184 <_strtod_l+0x2b0>)
 8020ffe:	4276      	negs	r6, r6
 8021000:	e7e2      	b.n	8020fc8 <_strtod_l+0xf4>
 8021002:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021004:	1c5a      	adds	r2, r3, #1
 8021006:	921d      	str	r2, [sp, #116]	@ 0x74
 8021008:	785b      	ldrb	r3, [r3, #1]
 802100a:	2b30      	cmp	r3, #48	@ 0x30
 802100c:	d0f9      	beq.n	8021002 <_strtod_l+0x12e>
 802100e:	2b00      	cmp	r3, #0
 8021010:	d09b      	beq.n	8020f4a <_strtod_l+0x76>
 8021012:	2301      	movs	r3, #1
 8021014:	930c      	str	r3, [sp, #48]	@ 0x30
 8021016:	2500      	movs	r5, #0
 8021018:	220a      	movs	r2, #10
 802101a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802101c:	950d      	str	r5, [sp, #52]	@ 0x34
 802101e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021020:	9508      	str	r5, [sp, #32]
 8021022:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8021024:	7804      	ldrb	r4, [r0, #0]
 8021026:	0023      	movs	r3, r4
 8021028:	3b30      	subs	r3, #48	@ 0x30
 802102a:	b2d9      	uxtb	r1, r3
 802102c:	2909      	cmp	r1, #9
 802102e:	d927      	bls.n	8021080 <_strtod_l+0x1ac>
 8021030:	2201      	movs	r2, #1
 8021032:	4955      	ldr	r1, [pc, #340]	@ (8021188 <_strtod_l+0x2b4>)
 8021034:	f001 fcf6 	bl	8022a24 <strncmp>
 8021038:	2800      	cmp	r0, #0
 802103a:	d031      	beq.n	80210a0 <_strtod_l+0x1cc>
 802103c:	2000      	movs	r0, #0
 802103e:	0023      	movs	r3, r4
 8021040:	4684      	mov	ip, r0
 8021042:	9a08      	ldr	r2, [sp, #32]
 8021044:	900e      	str	r0, [sp, #56]	@ 0x38
 8021046:	9206      	str	r2, [sp, #24]
 8021048:	2220      	movs	r2, #32
 802104a:	0019      	movs	r1, r3
 802104c:	4391      	bics	r1, r2
 802104e:	000a      	movs	r2, r1
 8021050:	2100      	movs	r1, #0
 8021052:	9107      	str	r1, [sp, #28]
 8021054:	2a45      	cmp	r2, #69	@ 0x45
 8021056:	d000      	beq.n	802105a <_strtod_l+0x186>
 8021058:	e0c0      	b.n	80211dc <_strtod_l+0x308>
 802105a:	9b06      	ldr	r3, [sp, #24]
 802105c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802105e:	4303      	orrs	r3, r0
 8021060:	4313      	orrs	r3, r2
 8021062:	428b      	cmp	r3, r1
 8021064:	d08d      	beq.n	8020f82 <_strtod_l+0xae>
 8021066:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021068:	9309      	str	r3, [sp, #36]	@ 0x24
 802106a:	3301      	adds	r3, #1
 802106c:	931d      	str	r3, [sp, #116]	@ 0x74
 802106e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021070:	785b      	ldrb	r3, [r3, #1]
 8021072:	2b2b      	cmp	r3, #43	@ 0x2b
 8021074:	d070      	beq.n	8021158 <_strtod_l+0x284>
 8021076:	000c      	movs	r4, r1
 8021078:	2b2d      	cmp	r3, #45	@ 0x2d
 802107a:	d173      	bne.n	8021164 <_strtod_l+0x290>
 802107c:	2401      	movs	r4, #1
 802107e:	e06c      	b.n	802115a <_strtod_l+0x286>
 8021080:	9908      	ldr	r1, [sp, #32]
 8021082:	2908      	cmp	r1, #8
 8021084:	dc09      	bgt.n	802109a <_strtod_l+0x1c6>
 8021086:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021088:	4351      	muls	r1, r2
 802108a:	185b      	adds	r3, r3, r1
 802108c:	930d      	str	r3, [sp, #52]	@ 0x34
 802108e:	9b08      	ldr	r3, [sp, #32]
 8021090:	3001      	adds	r0, #1
 8021092:	3301      	adds	r3, #1
 8021094:	9308      	str	r3, [sp, #32]
 8021096:	901d      	str	r0, [sp, #116]	@ 0x74
 8021098:	e7c3      	b.n	8021022 <_strtod_l+0x14e>
 802109a:	4355      	muls	r5, r2
 802109c:	195d      	adds	r5, r3, r5
 802109e:	e7f6      	b.n	802108e <_strtod_l+0x1ba>
 80210a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80210a2:	1c5a      	adds	r2, r3, #1
 80210a4:	921d      	str	r2, [sp, #116]	@ 0x74
 80210a6:	9a08      	ldr	r2, [sp, #32]
 80210a8:	785b      	ldrb	r3, [r3, #1]
 80210aa:	2a00      	cmp	r2, #0
 80210ac:	d03a      	beq.n	8021124 <_strtod_l+0x250>
 80210ae:	900e      	str	r0, [sp, #56]	@ 0x38
 80210b0:	9206      	str	r2, [sp, #24]
 80210b2:	001a      	movs	r2, r3
 80210b4:	3a30      	subs	r2, #48	@ 0x30
 80210b6:	2a09      	cmp	r2, #9
 80210b8:	d912      	bls.n	80210e0 <_strtod_l+0x20c>
 80210ba:	2201      	movs	r2, #1
 80210bc:	4694      	mov	ip, r2
 80210be:	e7c3      	b.n	8021048 <_strtod_l+0x174>
 80210c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80210c2:	3001      	adds	r0, #1
 80210c4:	1c5a      	adds	r2, r3, #1
 80210c6:	921d      	str	r2, [sp, #116]	@ 0x74
 80210c8:	785b      	ldrb	r3, [r3, #1]
 80210ca:	2b30      	cmp	r3, #48	@ 0x30
 80210cc:	d0f8      	beq.n	80210c0 <_strtod_l+0x1ec>
 80210ce:	001a      	movs	r2, r3
 80210d0:	3a31      	subs	r2, #49	@ 0x31
 80210d2:	2a08      	cmp	r2, #8
 80210d4:	d83b      	bhi.n	802114e <_strtod_l+0x27a>
 80210d6:	900e      	str	r0, [sp, #56]	@ 0x38
 80210d8:	2000      	movs	r0, #0
 80210da:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80210dc:	9006      	str	r0, [sp, #24]
 80210de:	9213      	str	r2, [sp, #76]	@ 0x4c
 80210e0:	001a      	movs	r2, r3
 80210e2:	1c41      	adds	r1, r0, #1
 80210e4:	3a30      	subs	r2, #48	@ 0x30
 80210e6:	2b30      	cmp	r3, #48	@ 0x30
 80210e8:	d016      	beq.n	8021118 <_strtod_l+0x244>
 80210ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210ec:	185b      	adds	r3, r3, r1
 80210ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80210f0:	9b06      	ldr	r3, [sp, #24]
 80210f2:	210a      	movs	r1, #10
 80210f4:	469c      	mov	ip, r3
 80210f6:	4484      	add	ip, r0
 80210f8:	459c      	cmp	ip, r3
 80210fa:	d115      	bne.n	8021128 <_strtod_l+0x254>
 80210fc:	9906      	ldr	r1, [sp, #24]
 80210fe:	9b06      	ldr	r3, [sp, #24]
 8021100:	3101      	adds	r1, #1
 8021102:	1809      	adds	r1, r1, r0
 8021104:	181b      	adds	r3, r3, r0
 8021106:	9106      	str	r1, [sp, #24]
 8021108:	2b08      	cmp	r3, #8
 802110a:	dc19      	bgt.n	8021140 <_strtod_l+0x26c>
 802110c:	230a      	movs	r3, #10
 802110e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021110:	434b      	muls	r3, r1
 8021112:	2100      	movs	r1, #0
 8021114:	18d3      	adds	r3, r2, r3
 8021116:	930d      	str	r3, [sp, #52]	@ 0x34
 8021118:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802111a:	0008      	movs	r0, r1
 802111c:	1c5a      	adds	r2, r3, #1
 802111e:	921d      	str	r2, [sp, #116]	@ 0x74
 8021120:	785b      	ldrb	r3, [r3, #1]
 8021122:	e7c6      	b.n	80210b2 <_strtod_l+0x1de>
 8021124:	9808      	ldr	r0, [sp, #32]
 8021126:	e7d0      	b.n	80210ca <_strtod_l+0x1f6>
 8021128:	1c5c      	adds	r4, r3, #1
 802112a:	2b08      	cmp	r3, #8
 802112c:	dc04      	bgt.n	8021138 <_strtod_l+0x264>
 802112e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021130:	434b      	muls	r3, r1
 8021132:	930d      	str	r3, [sp, #52]	@ 0x34
 8021134:	0023      	movs	r3, r4
 8021136:	e7df      	b.n	80210f8 <_strtod_l+0x224>
 8021138:	2c10      	cmp	r4, #16
 802113a:	dcfb      	bgt.n	8021134 <_strtod_l+0x260>
 802113c:	434d      	muls	r5, r1
 802113e:	e7f9      	b.n	8021134 <_strtod_l+0x260>
 8021140:	2100      	movs	r1, #0
 8021142:	2b0f      	cmp	r3, #15
 8021144:	dce8      	bgt.n	8021118 <_strtod_l+0x244>
 8021146:	230a      	movs	r3, #10
 8021148:	435d      	muls	r5, r3
 802114a:	1955      	adds	r5, r2, r5
 802114c:	e7e4      	b.n	8021118 <_strtod_l+0x244>
 802114e:	2200      	movs	r2, #0
 8021150:	920e      	str	r2, [sp, #56]	@ 0x38
 8021152:	9206      	str	r2, [sp, #24]
 8021154:	3201      	adds	r2, #1
 8021156:	e7b1      	b.n	80210bc <_strtod_l+0x1e8>
 8021158:	2400      	movs	r4, #0
 802115a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802115c:	3302      	adds	r3, #2
 802115e:	931d      	str	r3, [sp, #116]	@ 0x74
 8021160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021162:	789b      	ldrb	r3, [r3, #2]
 8021164:	001a      	movs	r2, r3
 8021166:	3a30      	subs	r2, #48	@ 0x30
 8021168:	2a09      	cmp	r2, #9
 802116a:	d913      	bls.n	8021194 <_strtod_l+0x2c0>
 802116c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802116e:	921d      	str	r2, [sp, #116]	@ 0x74
 8021170:	2200      	movs	r2, #0
 8021172:	e032      	b.n	80211da <_strtod_l+0x306>
 8021174:	08029324 	.word	0x08029324
 8021178:	7ff00000 	.word	0x7ff00000
 802117c:	ffefffff 	.word	0xffefffff
 8021180:	00000433 	.word	0x00000433
 8021184:	7fffffff 	.word	0x7fffffff
 8021188:	0802930c 	.word	0x0802930c
 802118c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802118e:	1c5a      	adds	r2, r3, #1
 8021190:	921d      	str	r2, [sp, #116]	@ 0x74
 8021192:	785b      	ldrb	r3, [r3, #1]
 8021194:	2b30      	cmp	r3, #48	@ 0x30
 8021196:	d0f9      	beq.n	802118c <_strtod_l+0x2b8>
 8021198:	2200      	movs	r2, #0
 802119a:	9207      	str	r2, [sp, #28]
 802119c:	001a      	movs	r2, r3
 802119e:	3a31      	subs	r2, #49	@ 0x31
 80211a0:	2a08      	cmp	r2, #8
 80211a2:	d81b      	bhi.n	80211dc <_strtod_l+0x308>
 80211a4:	3b30      	subs	r3, #48	@ 0x30
 80211a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80211a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80211aa:	9307      	str	r3, [sp, #28]
 80211ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80211ae:	1c59      	adds	r1, r3, #1
 80211b0:	911d      	str	r1, [sp, #116]	@ 0x74
 80211b2:	785b      	ldrb	r3, [r3, #1]
 80211b4:	001a      	movs	r2, r3
 80211b6:	3a30      	subs	r2, #48	@ 0x30
 80211b8:	2a09      	cmp	r2, #9
 80211ba:	d93a      	bls.n	8021232 <_strtod_l+0x35e>
 80211bc:	9a07      	ldr	r2, [sp, #28]
 80211be:	1a8a      	subs	r2, r1, r2
 80211c0:	49b4      	ldr	r1, [pc, #720]	@ (8021494 <_strtod_l+0x5c0>)
 80211c2:	9107      	str	r1, [sp, #28]
 80211c4:	2a08      	cmp	r2, #8
 80211c6:	dc04      	bgt.n	80211d2 <_strtod_l+0x2fe>
 80211c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80211ca:	9207      	str	r2, [sp, #28]
 80211cc:	428a      	cmp	r2, r1
 80211ce:	dd00      	ble.n	80211d2 <_strtod_l+0x2fe>
 80211d0:	9107      	str	r1, [sp, #28]
 80211d2:	2c00      	cmp	r4, #0
 80211d4:	d002      	beq.n	80211dc <_strtod_l+0x308>
 80211d6:	9a07      	ldr	r2, [sp, #28]
 80211d8:	4252      	negs	r2, r2
 80211da:	9207      	str	r2, [sp, #28]
 80211dc:	9a06      	ldr	r2, [sp, #24]
 80211de:	2a00      	cmp	r2, #0
 80211e0:	d14d      	bne.n	802127e <_strtod_l+0x3aa>
 80211e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80211e4:	4310      	orrs	r0, r2
 80211e6:	d000      	beq.n	80211ea <_strtod_l+0x316>
 80211e8:	e6af      	b.n	8020f4a <_strtod_l+0x76>
 80211ea:	4662      	mov	r2, ip
 80211ec:	2a00      	cmp	r2, #0
 80211ee:	d000      	beq.n	80211f2 <_strtod_l+0x31e>
 80211f0:	e6c7      	b.n	8020f82 <_strtod_l+0xae>
 80211f2:	2b69      	cmp	r3, #105	@ 0x69
 80211f4:	d027      	beq.n	8021246 <_strtod_l+0x372>
 80211f6:	dc23      	bgt.n	8021240 <_strtod_l+0x36c>
 80211f8:	2b49      	cmp	r3, #73	@ 0x49
 80211fa:	d024      	beq.n	8021246 <_strtod_l+0x372>
 80211fc:	2b4e      	cmp	r3, #78	@ 0x4e
 80211fe:	d000      	beq.n	8021202 <_strtod_l+0x32e>
 8021200:	e6bf      	b.n	8020f82 <_strtod_l+0xae>
 8021202:	49a5      	ldr	r1, [pc, #660]	@ (8021498 <_strtod_l+0x5c4>)
 8021204:	a81d      	add	r0, sp, #116	@ 0x74
 8021206:	f002 fe4d 	bl	8023ea4 <__match>
 802120a:	2800      	cmp	r0, #0
 802120c:	d100      	bne.n	8021210 <_strtod_l+0x33c>
 802120e:	e6b8      	b.n	8020f82 <_strtod_l+0xae>
 8021210:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021212:	781b      	ldrb	r3, [r3, #0]
 8021214:	2b28      	cmp	r3, #40	@ 0x28
 8021216:	d12c      	bne.n	8021272 <_strtod_l+0x39e>
 8021218:	49a0      	ldr	r1, [pc, #640]	@ (802149c <_strtod_l+0x5c8>)
 802121a:	aa20      	add	r2, sp, #128	@ 0x80
 802121c:	a81d      	add	r0, sp, #116	@ 0x74
 802121e:	f002 fe55 	bl	8023ecc <__hexnan>
 8021222:	2805      	cmp	r0, #5
 8021224:	d125      	bne.n	8021272 <_strtod_l+0x39e>
 8021226:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021228:	4a9d      	ldr	r2, [pc, #628]	@ (80214a0 <_strtod_l+0x5cc>)
 802122a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802122c:	431a      	orrs	r2, r3
 802122e:	0017      	movs	r7, r2
 8021230:	e68b      	b.n	8020f4a <_strtod_l+0x76>
 8021232:	220a      	movs	r2, #10
 8021234:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021236:	434a      	muls	r2, r1
 8021238:	18d2      	adds	r2, r2, r3
 802123a:	3a30      	subs	r2, #48	@ 0x30
 802123c:	9210      	str	r2, [sp, #64]	@ 0x40
 802123e:	e7b5      	b.n	80211ac <_strtod_l+0x2d8>
 8021240:	2b6e      	cmp	r3, #110	@ 0x6e
 8021242:	d0de      	beq.n	8021202 <_strtod_l+0x32e>
 8021244:	e69d      	b.n	8020f82 <_strtod_l+0xae>
 8021246:	4997      	ldr	r1, [pc, #604]	@ (80214a4 <_strtod_l+0x5d0>)
 8021248:	a81d      	add	r0, sp, #116	@ 0x74
 802124a:	f002 fe2b 	bl	8023ea4 <__match>
 802124e:	2800      	cmp	r0, #0
 8021250:	d100      	bne.n	8021254 <_strtod_l+0x380>
 8021252:	e696      	b.n	8020f82 <_strtod_l+0xae>
 8021254:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021256:	4994      	ldr	r1, [pc, #592]	@ (80214a8 <_strtod_l+0x5d4>)
 8021258:	3b01      	subs	r3, #1
 802125a:	a81d      	add	r0, sp, #116	@ 0x74
 802125c:	931d      	str	r3, [sp, #116]	@ 0x74
 802125e:	f002 fe21 	bl	8023ea4 <__match>
 8021262:	2800      	cmp	r0, #0
 8021264:	d102      	bne.n	802126c <_strtod_l+0x398>
 8021266:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021268:	3301      	adds	r3, #1
 802126a:	931d      	str	r3, [sp, #116]	@ 0x74
 802126c:	2600      	movs	r6, #0
 802126e:	4f8c      	ldr	r7, [pc, #560]	@ (80214a0 <_strtod_l+0x5cc>)
 8021270:	e66b      	b.n	8020f4a <_strtod_l+0x76>
 8021272:	488e      	ldr	r0, [pc, #568]	@ (80214ac <_strtod_l+0x5d8>)
 8021274:	f001 fca6 	bl	8022bc4 <nan>
 8021278:	0006      	movs	r6, r0
 802127a:	000f      	movs	r7, r1
 802127c:	e665      	b.n	8020f4a <_strtod_l+0x76>
 802127e:	9b07      	ldr	r3, [sp, #28]
 8021280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021282:	1a9b      	subs	r3, r3, r2
 8021284:	930c      	str	r3, [sp, #48]	@ 0x30
 8021286:	9b08      	ldr	r3, [sp, #32]
 8021288:	2b00      	cmp	r3, #0
 802128a:	d101      	bne.n	8021290 <_strtod_l+0x3bc>
 802128c:	9b06      	ldr	r3, [sp, #24]
 802128e:	9308      	str	r3, [sp, #32]
 8021290:	9c06      	ldr	r4, [sp, #24]
 8021292:	2c10      	cmp	r4, #16
 8021294:	dd00      	ble.n	8021298 <_strtod_l+0x3c4>
 8021296:	2410      	movs	r4, #16
 8021298:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802129a:	f7e2 f8bf 	bl	800341c <__aeabi_ui2d>
 802129e:	9b06      	ldr	r3, [sp, #24]
 80212a0:	0006      	movs	r6, r0
 80212a2:	000f      	movs	r7, r1
 80212a4:	2b09      	cmp	r3, #9
 80212a6:	dc13      	bgt.n	80212d0 <_strtod_l+0x3fc>
 80212a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80212aa:	2b00      	cmp	r3, #0
 80212ac:	d100      	bne.n	80212b0 <_strtod_l+0x3dc>
 80212ae:	e64c      	b.n	8020f4a <_strtod_l+0x76>
 80212b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	dc00      	bgt.n	80212b8 <_strtod_l+0x3e4>
 80212b6:	e07e      	b.n	80213b6 <_strtod_l+0x4e2>
 80212b8:	2b16      	cmp	r3, #22
 80212ba:	dc63      	bgt.n	8021384 <_strtod_l+0x4b0>
 80212bc:	497c      	ldr	r1, [pc, #496]	@ (80214b0 <_strtod_l+0x5dc>)
 80212be:	00db      	lsls	r3, r3, #3
 80212c0:	18c9      	adds	r1, r1, r3
 80212c2:	0032      	movs	r2, r6
 80212c4:	6808      	ldr	r0, [r1, #0]
 80212c6:	6849      	ldr	r1, [r1, #4]
 80212c8:	003b      	movs	r3, r7
 80212ca:	f7e1 f9b7 	bl	800263c <__aeabi_dmul>
 80212ce:	e7d3      	b.n	8021278 <_strtod_l+0x3a4>
 80212d0:	0022      	movs	r2, r4
 80212d2:	4b77      	ldr	r3, [pc, #476]	@ (80214b0 <_strtod_l+0x5dc>)
 80212d4:	3a09      	subs	r2, #9
 80212d6:	00d2      	lsls	r2, r2, #3
 80212d8:	189b      	adds	r3, r3, r2
 80212da:	681a      	ldr	r2, [r3, #0]
 80212dc:	685b      	ldr	r3, [r3, #4]
 80212de:	f7e1 f9ad 	bl	800263c <__aeabi_dmul>
 80212e2:	0006      	movs	r6, r0
 80212e4:	0028      	movs	r0, r5
 80212e6:	000f      	movs	r7, r1
 80212e8:	f7e2 f898 	bl	800341c <__aeabi_ui2d>
 80212ec:	000b      	movs	r3, r1
 80212ee:	0002      	movs	r2, r0
 80212f0:	0039      	movs	r1, r7
 80212f2:	0030      	movs	r0, r6
 80212f4:	f7e0 f9fa 	bl	80016ec <__aeabi_dadd>
 80212f8:	9b06      	ldr	r3, [sp, #24]
 80212fa:	0006      	movs	r6, r0
 80212fc:	000f      	movs	r7, r1
 80212fe:	2b0f      	cmp	r3, #15
 8021300:	ddd2      	ble.n	80212a8 <_strtod_l+0x3d4>
 8021302:	9b06      	ldr	r3, [sp, #24]
 8021304:	1b1c      	subs	r4, r3, r4
 8021306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021308:	18e4      	adds	r4, r4, r3
 802130a:	2c00      	cmp	r4, #0
 802130c:	dc00      	bgt.n	8021310 <_strtod_l+0x43c>
 802130e:	e09b      	b.n	8021448 <_strtod_l+0x574>
 8021310:	220f      	movs	r2, #15
 8021312:	0023      	movs	r3, r4
 8021314:	4013      	ands	r3, r2
 8021316:	4214      	tst	r4, r2
 8021318:	d00a      	beq.n	8021330 <_strtod_l+0x45c>
 802131a:	4965      	ldr	r1, [pc, #404]	@ (80214b0 <_strtod_l+0x5dc>)
 802131c:	00db      	lsls	r3, r3, #3
 802131e:	18c9      	adds	r1, r1, r3
 8021320:	0032      	movs	r2, r6
 8021322:	6808      	ldr	r0, [r1, #0]
 8021324:	6849      	ldr	r1, [r1, #4]
 8021326:	003b      	movs	r3, r7
 8021328:	f7e1 f988 	bl	800263c <__aeabi_dmul>
 802132c:	0006      	movs	r6, r0
 802132e:	000f      	movs	r7, r1
 8021330:	230f      	movs	r3, #15
 8021332:	439c      	bics	r4, r3
 8021334:	d073      	beq.n	802141e <_strtod_l+0x54a>
 8021336:	3326      	adds	r3, #38	@ 0x26
 8021338:	33ff      	adds	r3, #255	@ 0xff
 802133a:	429c      	cmp	r4, r3
 802133c:	dd4b      	ble.n	80213d6 <_strtod_l+0x502>
 802133e:	2300      	movs	r3, #0
 8021340:	9306      	str	r3, [sp, #24]
 8021342:	9307      	str	r3, [sp, #28]
 8021344:	930d      	str	r3, [sp, #52]	@ 0x34
 8021346:	9308      	str	r3, [sp, #32]
 8021348:	2322      	movs	r3, #34	@ 0x22
 802134a:	2600      	movs	r6, #0
 802134c:	9a05      	ldr	r2, [sp, #20]
 802134e:	4f54      	ldr	r7, [pc, #336]	@ (80214a0 <_strtod_l+0x5cc>)
 8021350:	6013      	str	r3, [r2, #0]
 8021352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021354:	42b3      	cmp	r3, r6
 8021356:	d100      	bne.n	802135a <_strtod_l+0x486>
 8021358:	e5f7      	b.n	8020f4a <_strtod_l+0x76>
 802135a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802135c:	9805      	ldr	r0, [sp, #20]
 802135e:	f002 ff6f 	bl	8024240 <_Bfree>
 8021362:	9908      	ldr	r1, [sp, #32]
 8021364:	9805      	ldr	r0, [sp, #20]
 8021366:	f002 ff6b 	bl	8024240 <_Bfree>
 802136a:	9907      	ldr	r1, [sp, #28]
 802136c:	9805      	ldr	r0, [sp, #20]
 802136e:	f002 ff67 	bl	8024240 <_Bfree>
 8021372:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021374:	9805      	ldr	r0, [sp, #20]
 8021376:	f002 ff63 	bl	8024240 <_Bfree>
 802137a:	9906      	ldr	r1, [sp, #24]
 802137c:	9805      	ldr	r0, [sp, #20]
 802137e:	f002 ff5f 	bl	8024240 <_Bfree>
 8021382:	e5e2      	b.n	8020f4a <_strtod_l+0x76>
 8021384:	2325      	movs	r3, #37	@ 0x25
 8021386:	9a06      	ldr	r2, [sp, #24]
 8021388:	1a9b      	subs	r3, r3, r2
 802138a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802138c:	4293      	cmp	r3, r2
 802138e:	dbb8      	blt.n	8021302 <_strtod_l+0x42e>
 8021390:	240f      	movs	r4, #15
 8021392:	9b06      	ldr	r3, [sp, #24]
 8021394:	4d46      	ldr	r5, [pc, #280]	@ (80214b0 <_strtod_l+0x5dc>)
 8021396:	1ae4      	subs	r4, r4, r3
 8021398:	00e1      	lsls	r1, r4, #3
 802139a:	1869      	adds	r1, r5, r1
 802139c:	0032      	movs	r2, r6
 802139e:	6808      	ldr	r0, [r1, #0]
 80213a0:	6849      	ldr	r1, [r1, #4]
 80213a2:	003b      	movs	r3, r7
 80213a4:	f7e1 f94a 	bl	800263c <__aeabi_dmul>
 80213a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80213aa:	1b1c      	subs	r4, r3, r4
 80213ac:	00e4      	lsls	r4, r4, #3
 80213ae:	192d      	adds	r5, r5, r4
 80213b0:	682a      	ldr	r2, [r5, #0]
 80213b2:	686b      	ldr	r3, [r5, #4]
 80213b4:	e789      	b.n	80212ca <_strtod_l+0x3f6>
 80213b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80213b8:	3316      	adds	r3, #22
 80213ba:	dba2      	blt.n	8021302 <_strtod_l+0x42e>
 80213bc:	9907      	ldr	r1, [sp, #28]
 80213be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80213c0:	4b3b      	ldr	r3, [pc, #236]	@ (80214b0 <_strtod_l+0x5dc>)
 80213c2:	1a52      	subs	r2, r2, r1
 80213c4:	00d2      	lsls	r2, r2, #3
 80213c6:	189b      	adds	r3, r3, r2
 80213c8:	0030      	movs	r0, r6
 80213ca:	681a      	ldr	r2, [r3, #0]
 80213cc:	685b      	ldr	r3, [r3, #4]
 80213ce:	0039      	movs	r1, r7
 80213d0:	f7e0 fcf0 	bl	8001db4 <__aeabi_ddiv>
 80213d4:	e750      	b.n	8021278 <_strtod_l+0x3a4>
 80213d6:	2300      	movs	r3, #0
 80213d8:	0030      	movs	r0, r6
 80213da:	0039      	movs	r1, r7
 80213dc:	4d35      	ldr	r5, [pc, #212]	@ (80214b4 <_strtod_l+0x5e0>)
 80213de:	1124      	asrs	r4, r4, #4
 80213e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80213e2:	2c01      	cmp	r4, #1
 80213e4:	dc1e      	bgt.n	8021424 <_strtod_l+0x550>
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d001      	beq.n	80213ee <_strtod_l+0x51a>
 80213ea:	0006      	movs	r6, r0
 80213ec:	000f      	movs	r7, r1
 80213ee:	4b32      	ldr	r3, [pc, #200]	@ (80214b8 <_strtod_l+0x5e4>)
 80213f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80213f2:	18ff      	adds	r7, r7, r3
 80213f4:	4b2f      	ldr	r3, [pc, #188]	@ (80214b4 <_strtod_l+0x5e0>)
 80213f6:	00d5      	lsls	r5, r2, #3
 80213f8:	195d      	adds	r5, r3, r5
 80213fa:	0032      	movs	r2, r6
 80213fc:	6828      	ldr	r0, [r5, #0]
 80213fe:	6869      	ldr	r1, [r5, #4]
 8021400:	003b      	movs	r3, r7
 8021402:	f7e1 f91b 	bl	800263c <__aeabi_dmul>
 8021406:	4b26      	ldr	r3, [pc, #152]	@ (80214a0 <_strtod_l+0x5cc>)
 8021408:	4a2c      	ldr	r2, [pc, #176]	@ (80214bc <_strtod_l+0x5e8>)
 802140a:	0006      	movs	r6, r0
 802140c:	400b      	ands	r3, r1
 802140e:	4293      	cmp	r3, r2
 8021410:	d895      	bhi.n	802133e <_strtod_l+0x46a>
 8021412:	4a2b      	ldr	r2, [pc, #172]	@ (80214c0 <_strtod_l+0x5ec>)
 8021414:	4293      	cmp	r3, r2
 8021416:	d913      	bls.n	8021440 <_strtod_l+0x56c>
 8021418:	2601      	movs	r6, #1
 802141a:	4f2a      	ldr	r7, [pc, #168]	@ (80214c4 <_strtod_l+0x5f0>)
 802141c:	4276      	negs	r6, r6
 802141e:	2300      	movs	r3, #0
 8021420:	9309      	str	r3, [sp, #36]	@ 0x24
 8021422:	e086      	b.n	8021532 <_strtod_l+0x65e>
 8021424:	2201      	movs	r2, #1
 8021426:	4214      	tst	r4, r2
 8021428:	d004      	beq.n	8021434 <_strtod_l+0x560>
 802142a:	682a      	ldr	r2, [r5, #0]
 802142c:	686b      	ldr	r3, [r5, #4]
 802142e:	f7e1 f905 	bl	800263c <__aeabi_dmul>
 8021432:	2301      	movs	r3, #1
 8021434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021436:	1064      	asrs	r4, r4, #1
 8021438:	3201      	adds	r2, #1
 802143a:	9209      	str	r2, [sp, #36]	@ 0x24
 802143c:	3508      	adds	r5, #8
 802143e:	e7d0      	b.n	80213e2 <_strtod_l+0x50e>
 8021440:	23d4      	movs	r3, #212	@ 0xd4
 8021442:	049b      	lsls	r3, r3, #18
 8021444:	18cf      	adds	r7, r1, r3
 8021446:	e7ea      	b.n	802141e <_strtod_l+0x54a>
 8021448:	2c00      	cmp	r4, #0
 802144a:	d0e8      	beq.n	802141e <_strtod_l+0x54a>
 802144c:	4264      	negs	r4, r4
 802144e:	230f      	movs	r3, #15
 8021450:	0022      	movs	r2, r4
 8021452:	401a      	ands	r2, r3
 8021454:	421c      	tst	r4, r3
 8021456:	d00a      	beq.n	802146e <_strtod_l+0x59a>
 8021458:	4b15      	ldr	r3, [pc, #84]	@ (80214b0 <_strtod_l+0x5dc>)
 802145a:	00d2      	lsls	r2, r2, #3
 802145c:	189b      	adds	r3, r3, r2
 802145e:	0030      	movs	r0, r6
 8021460:	681a      	ldr	r2, [r3, #0]
 8021462:	685b      	ldr	r3, [r3, #4]
 8021464:	0039      	movs	r1, r7
 8021466:	f7e0 fca5 	bl	8001db4 <__aeabi_ddiv>
 802146a:	0006      	movs	r6, r0
 802146c:	000f      	movs	r7, r1
 802146e:	1124      	asrs	r4, r4, #4
 8021470:	d0d5      	beq.n	802141e <_strtod_l+0x54a>
 8021472:	2c1f      	cmp	r4, #31
 8021474:	dd28      	ble.n	80214c8 <_strtod_l+0x5f4>
 8021476:	2300      	movs	r3, #0
 8021478:	9306      	str	r3, [sp, #24]
 802147a:	9307      	str	r3, [sp, #28]
 802147c:	930d      	str	r3, [sp, #52]	@ 0x34
 802147e:	9308      	str	r3, [sp, #32]
 8021480:	2322      	movs	r3, #34	@ 0x22
 8021482:	9a05      	ldr	r2, [sp, #20]
 8021484:	2600      	movs	r6, #0
 8021486:	6013      	str	r3, [r2, #0]
 8021488:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802148a:	2700      	movs	r7, #0
 802148c:	2b00      	cmp	r3, #0
 802148e:	d000      	beq.n	8021492 <_strtod_l+0x5be>
 8021490:	e763      	b.n	802135a <_strtod_l+0x486>
 8021492:	e55a      	b.n	8020f4a <_strtod_l+0x76>
 8021494:	00004e1f 	.word	0x00004e1f
 8021498:	0802946e 	.word	0x0802946e
 802149c:	08029310 	.word	0x08029310
 80214a0:	7ff00000 	.word	0x7ff00000
 80214a4:	08029466 	.word	0x08029466
 80214a8:	080294a0 	.word	0x080294a0
 80214ac:	0802972c 	.word	0x0802972c
 80214b0:	08029618 	.word	0x08029618
 80214b4:	080295f0 	.word	0x080295f0
 80214b8:	fcb00000 	.word	0xfcb00000
 80214bc:	7ca00000 	.word	0x7ca00000
 80214c0:	7c900000 	.word	0x7c900000
 80214c4:	7fefffff 	.word	0x7fefffff
 80214c8:	2310      	movs	r3, #16
 80214ca:	0022      	movs	r2, r4
 80214cc:	401a      	ands	r2, r3
 80214ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80214d0:	421c      	tst	r4, r3
 80214d2:	d001      	beq.n	80214d8 <_strtod_l+0x604>
 80214d4:	335a      	adds	r3, #90	@ 0x5a
 80214d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80214d8:	0030      	movs	r0, r6
 80214da:	0039      	movs	r1, r7
 80214dc:	2300      	movs	r3, #0
 80214de:	4dbf      	ldr	r5, [pc, #764]	@ (80217dc <_strtod_l+0x908>)
 80214e0:	2201      	movs	r2, #1
 80214e2:	4214      	tst	r4, r2
 80214e4:	d004      	beq.n	80214f0 <_strtod_l+0x61c>
 80214e6:	682a      	ldr	r2, [r5, #0]
 80214e8:	686b      	ldr	r3, [r5, #4]
 80214ea:	f7e1 f8a7 	bl	800263c <__aeabi_dmul>
 80214ee:	2301      	movs	r3, #1
 80214f0:	1064      	asrs	r4, r4, #1
 80214f2:	3508      	adds	r5, #8
 80214f4:	2c00      	cmp	r4, #0
 80214f6:	d1f3      	bne.n	80214e0 <_strtod_l+0x60c>
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d001      	beq.n	8021500 <_strtod_l+0x62c>
 80214fc:	0006      	movs	r6, r0
 80214fe:	000f      	movs	r7, r1
 8021500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021502:	2b00      	cmp	r3, #0
 8021504:	d00d      	beq.n	8021522 <_strtod_l+0x64e>
 8021506:	236b      	movs	r3, #107	@ 0x6b
 8021508:	007a      	lsls	r2, r7, #1
 802150a:	0d52      	lsrs	r2, r2, #21
 802150c:	0039      	movs	r1, r7
 802150e:	1a9b      	subs	r3, r3, r2
 8021510:	2b00      	cmp	r3, #0
 8021512:	dd06      	ble.n	8021522 <_strtod_l+0x64e>
 8021514:	2b1f      	cmp	r3, #31
 8021516:	dd5a      	ble.n	80215ce <_strtod_l+0x6fa>
 8021518:	2600      	movs	r6, #0
 802151a:	2b34      	cmp	r3, #52	@ 0x34
 802151c:	dd50      	ble.n	80215c0 <_strtod_l+0x6ec>
 802151e:	27dc      	movs	r7, #220	@ 0xdc
 8021520:	04bf      	lsls	r7, r7, #18
 8021522:	2200      	movs	r2, #0
 8021524:	2300      	movs	r3, #0
 8021526:	0030      	movs	r0, r6
 8021528:	0039      	movs	r1, r7
 802152a:	f7de ffc1 	bl	80004b0 <__aeabi_dcmpeq>
 802152e:	2800      	cmp	r0, #0
 8021530:	d1a1      	bne.n	8021476 <_strtod_l+0x5a2>
 8021532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021534:	9a08      	ldr	r2, [sp, #32]
 8021536:	9300      	str	r3, [sp, #0]
 8021538:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802153a:	9b06      	ldr	r3, [sp, #24]
 802153c:	9805      	ldr	r0, [sp, #20]
 802153e:	f002 fee7 	bl	8024310 <__s2b>
 8021542:	900d      	str	r0, [sp, #52]	@ 0x34
 8021544:	2800      	cmp	r0, #0
 8021546:	d100      	bne.n	802154a <_strtod_l+0x676>
 8021548:	e6f9      	b.n	802133e <_strtod_l+0x46a>
 802154a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802154c:	9907      	ldr	r1, [sp, #28]
 802154e:	17da      	asrs	r2, r3, #31
 8021550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021552:	1a5b      	subs	r3, r3, r1
 8021554:	401a      	ands	r2, r3
 8021556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021558:	9217      	str	r2, [sp, #92]	@ 0x5c
 802155a:	43db      	mvns	r3, r3
 802155c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802155e:	17db      	asrs	r3, r3, #31
 8021560:	401a      	ands	r2, r3
 8021562:	2300      	movs	r3, #0
 8021564:	921a      	str	r2, [sp, #104]	@ 0x68
 8021566:	9306      	str	r3, [sp, #24]
 8021568:	9307      	str	r3, [sp, #28]
 802156a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802156c:	9805      	ldr	r0, [sp, #20]
 802156e:	6859      	ldr	r1, [r3, #4]
 8021570:	f002 fe22 	bl	80241b8 <_Balloc>
 8021574:	9008      	str	r0, [sp, #32]
 8021576:	2800      	cmp	r0, #0
 8021578:	d100      	bne.n	802157c <_strtod_l+0x6a8>
 802157a:	e6e5      	b.n	8021348 <_strtod_l+0x474>
 802157c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802157e:	300c      	adds	r0, #12
 8021580:	0019      	movs	r1, r3
 8021582:	691a      	ldr	r2, [r3, #16]
 8021584:	310c      	adds	r1, #12
 8021586:	3202      	adds	r2, #2
 8021588:	0092      	lsls	r2, r2, #2
 802158a:	f001 fb11 	bl	8022bb0 <memcpy>
 802158e:	ab20      	add	r3, sp, #128	@ 0x80
 8021590:	9301      	str	r3, [sp, #4]
 8021592:	ab1f      	add	r3, sp, #124	@ 0x7c
 8021594:	9300      	str	r3, [sp, #0]
 8021596:	0032      	movs	r2, r6
 8021598:	003b      	movs	r3, r7
 802159a:	9805      	ldr	r0, [sp, #20]
 802159c:	9610      	str	r6, [sp, #64]	@ 0x40
 802159e:	9711      	str	r7, [sp, #68]	@ 0x44
 80215a0:	f003 fa06 	bl	80249b0 <__d2b>
 80215a4:	901e      	str	r0, [sp, #120]	@ 0x78
 80215a6:	2800      	cmp	r0, #0
 80215a8:	d100      	bne.n	80215ac <_strtod_l+0x6d8>
 80215aa:	e6cd      	b.n	8021348 <_strtod_l+0x474>
 80215ac:	2101      	movs	r1, #1
 80215ae:	9805      	ldr	r0, [sp, #20]
 80215b0:	f002 ff4a 	bl	8024448 <__i2b>
 80215b4:	9007      	str	r0, [sp, #28]
 80215b6:	2800      	cmp	r0, #0
 80215b8:	d10e      	bne.n	80215d8 <_strtod_l+0x704>
 80215ba:	2300      	movs	r3, #0
 80215bc:	9307      	str	r3, [sp, #28]
 80215be:	e6c3      	b.n	8021348 <_strtod_l+0x474>
 80215c0:	234b      	movs	r3, #75	@ 0x4b
 80215c2:	1a9a      	subs	r2, r3, r2
 80215c4:	3b4c      	subs	r3, #76	@ 0x4c
 80215c6:	4093      	lsls	r3, r2
 80215c8:	4019      	ands	r1, r3
 80215ca:	000f      	movs	r7, r1
 80215cc:	e7a9      	b.n	8021522 <_strtod_l+0x64e>
 80215ce:	2201      	movs	r2, #1
 80215d0:	4252      	negs	r2, r2
 80215d2:	409a      	lsls	r2, r3
 80215d4:	4016      	ands	r6, r2
 80215d6:	e7a4      	b.n	8021522 <_strtod_l+0x64e>
 80215d8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80215da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80215dc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80215de:	1ad4      	subs	r4, r2, r3
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	db01      	blt.n	80215e8 <_strtod_l+0x714>
 80215e4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80215e6:	195d      	adds	r5, r3, r5
 80215e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80215ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80215ec:	1a5b      	subs	r3, r3, r1
 80215ee:	2136      	movs	r1, #54	@ 0x36
 80215f0:	189b      	adds	r3, r3, r2
 80215f2:	1a8a      	subs	r2, r1, r2
 80215f4:	497a      	ldr	r1, [pc, #488]	@ (80217e0 <_strtod_l+0x90c>)
 80215f6:	2001      	movs	r0, #1
 80215f8:	468c      	mov	ip, r1
 80215fa:	2100      	movs	r1, #0
 80215fc:	3b01      	subs	r3, #1
 80215fe:	9116      	str	r1, [sp, #88]	@ 0x58
 8021600:	9014      	str	r0, [sp, #80]	@ 0x50
 8021602:	4563      	cmp	r3, ip
 8021604:	da06      	bge.n	8021614 <_strtod_l+0x740>
 8021606:	4661      	mov	r1, ip
 8021608:	1ac9      	subs	r1, r1, r3
 802160a:	1a52      	subs	r2, r2, r1
 802160c:	291f      	cmp	r1, #31
 802160e:	dc3f      	bgt.n	8021690 <_strtod_l+0x7bc>
 8021610:	4088      	lsls	r0, r1
 8021612:	9014      	str	r0, [sp, #80]	@ 0x50
 8021614:	18ab      	adds	r3, r5, r2
 8021616:	930e      	str	r3, [sp, #56]	@ 0x38
 8021618:	18a4      	adds	r4, r4, r2
 802161a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802161c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802161e:	191c      	adds	r4, r3, r4
 8021620:	002b      	movs	r3, r5
 8021622:	4295      	cmp	r5, r2
 8021624:	dd00      	ble.n	8021628 <_strtod_l+0x754>
 8021626:	0013      	movs	r3, r2
 8021628:	42a3      	cmp	r3, r4
 802162a:	dd00      	ble.n	802162e <_strtod_l+0x75a>
 802162c:	0023      	movs	r3, r4
 802162e:	2b00      	cmp	r3, #0
 8021630:	dd04      	ble.n	802163c <_strtod_l+0x768>
 8021632:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021634:	1ae4      	subs	r4, r4, r3
 8021636:	1ad2      	subs	r2, r2, r3
 8021638:	920e      	str	r2, [sp, #56]	@ 0x38
 802163a:	1aed      	subs	r5, r5, r3
 802163c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802163e:	2b00      	cmp	r3, #0
 8021640:	dd16      	ble.n	8021670 <_strtod_l+0x79c>
 8021642:	001a      	movs	r2, r3
 8021644:	9907      	ldr	r1, [sp, #28]
 8021646:	9805      	ldr	r0, [sp, #20]
 8021648:	f002 ffc8 	bl	80245dc <__pow5mult>
 802164c:	9007      	str	r0, [sp, #28]
 802164e:	2800      	cmp	r0, #0
 8021650:	d0b3      	beq.n	80215ba <_strtod_l+0x6e6>
 8021652:	0001      	movs	r1, r0
 8021654:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8021656:	9805      	ldr	r0, [sp, #20]
 8021658:	f002 ff0e 	bl	8024478 <__multiply>
 802165c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802165e:	2800      	cmp	r0, #0
 8021660:	d100      	bne.n	8021664 <_strtod_l+0x790>
 8021662:	e671      	b.n	8021348 <_strtod_l+0x474>
 8021664:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021666:	9805      	ldr	r0, [sp, #20]
 8021668:	f002 fdea 	bl	8024240 <_Bfree>
 802166c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802166e:	931e      	str	r3, [sp, #120]	@ 0x78
 8021670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021672:	2b00      	cmp	r3, #0
 8021674:	dc12      	bgt.n	802169c <_strtod_l+0x7c8>
 8021676:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021678:	2b00      	cmp	r3, #0
 802167a:	dd18      	ble.n	80216ae <_strtod_l+0x7da>
 802167c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802167e:	9908      	ldr	r1, [sp, #32]
 8021680:	9805      	ldr	r0, [sp, #20]
 8021682:	f002 ffab 	bl	80245dc <__pow5mult>
 8021686:	9008      	str	r0, [sp, #32]
 8021688:	2800      	cmp	r0, #0
 802168a:	d110      	bne.n	80216ae <_strtod_l+0x7da>
 802168c:	2300      	movs	r3, #0
 802168e:	e65a      	b.n	8021346 <_strtod_l+0x472>
 8021690:	4954      	ldr	r1, [pc, #336]	@ (80217e4 <_strtod_l+0x910>)
 8021692:	1acb      	subs	r3, r1, r3
 8021694:	0001      	movs	r1, r0
 8021696:	4099      	lsls	r1, r3
 8021698:	9116      	str	r1, [sp, #88]	@ 0x58
 802169a:	e7ba      	b.n	8021612 <_strtod_l+0x73e>
 802169c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802169e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80216a0:	9805      	ldr	r0, [sp, #20]
 80216a2:	f002 fff7 	bl	8024694 <__lshift>
 80216a6:	901e      	str	r0, [sp, #120]	@ 0x78
 80216a8:	2800      	cmp	r0, #0
 80216aa:	d1e4      	bne.n	8021676 <_strtod_l+0x7a2>
 80216ac:	e64c      	b.n	8021348 <_strtod_l+0x474>
 80216ae:	2c00      	cmp	r4, #0
 80216b0:	dd07      	ble.n	80216c2 <_strtod_l+0x7ee>
 80216b2:	0022      	movs	r2, r4
 80216b4:	9908      	ldr	r1, [sp, #32]
 80216b6:	9805      	ldr	r0, [sp, #20]
 80216b8:	f002 ffec 	bl	8024694 <__lshift>
 80216bc:	9008      	str	r0, [sp, #32]
 80216be:	2800      	cmp	r0, #0
 80216c0:	d0e4      	beq.n	802168c <_strtod_l+0x7b8>
 80216c2:	2d00      	cmp	r5, #0
 80216c4:	dd08      	ble.n	80216d8 <_strtod_l+0x804>
 80216c6:	002a      	movs	r2, r5
 80216c8:	9907      	ldr	r1, [sp, #28]
 80216ca:	9805      	ldr	r0, [sp, #20]
 80216cc:	f002 ffe2 	bl	8024694 <__lshift>
 80216d0:	9007      	str	r0, [sp, #28]
 80216d2:	2800      	cmp	r0, #0
 80216d4:	d100      	bne.n	80216d8 <_strtod_l+0x804>
 80216d6:	e637      	b.n	8021348 <_strtod_l+0x474>
 80216d8:	9a08      	ldr	r2, [sp, #32]
 80216da:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80216dc:	9805      	ldr	r0, [sp, #20]
 80216de:	f003 f861 	bl	80247a4 <__mdiff>
 80216e2:	9006      	str	r0, [sp, #24]
 80216e4:	2800      	cmp	r0, #0
 80216e6:	d100      	bne.n	80216ea <_strtod_l+0x816>
 80216e8:	e62e      	b.n	8021348 <_strtod_l+0x474>
 80216ea:	68c3      	ldr	r3, [r0, #12]
 80216ec:	9907      	ldr	r1, [sp, #28]
 80216ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80216f0:	2300      	movs	r3, #0
 80216f2:	60c3      	str	r3, [r0, #12]
 80216f4:	f003 f83a 	bl	802476c <__mcmp>
 80216f8:	2800      	cmp	r0, #0
 80216fa:	da3b      	bge.n	8021774 <_strtod_l+0x8a0>
 80216fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80216fe:	4333      	orrs	r3, r6
 8021700:	d167      	bne.n	80217d2 <_strtod_l+0x8fe>
 8021702:	033b      	lsls	r3, r7, #12
 8021704:	d165      	bne.n	80217d2 <_strtod_l+0x8fe>
 8021706:	22d6      	movs	r2, #214	@ 0xd6
 8021708:	4b37      	ldr	r3, [pc, #220]	@ (80217e8 <_strtod_l+0x914>)
 802170a:	04d2      	lsls	r2, r2, #19
 802170c:	403b      	ands	r3, r7
 802170e:	4293      	cmp	r3, r2
 8021710:	d95f      	bls.n	80217d2 <_strtod_l+0x8fe>
 8021712:	9b06      	ldr	r3, [sp, #24]
 8021714:	695b      	ldr	r3, [r3, #20]
 8021716:	2b00      	cmp	r3, #0
 8021718:	d103      	bne.n	8021722 <_strtod_l+0x84e>
 802171a:	9b06      	ldr	r3, [sp, #24]
 802171c:	691b      	ldr	r3, [r3, #16]
 802171e:	2b01      	cmp	r3, #1
 8021720:	dd57      	ble.n	80217d2 <_strtod_l+0x8fe>
 8021722:	9906      	ldr	r1, [sp, #24]
 8021724:	2201      	movs	r2, #1
 8021726:	9805      	ldr	r0, [sp, #20]
 8021728:	f002 ffb4 	bl	8024694 <__lshift>
 802172c:	9907      	ldr	r1, [sp, #28]
 802172e:	9006      	str	r0, [sp, #24]
 8021730:	f003 f81c 	bl	802476c <__mcmp>
 8021734:	2800      	cmp	r0, #0
 8021736:	dd4c      	ble.n	80217d2 <_strtod_l+0x8fe>
 8021738:	4b2b      	ldr	r3, [pc, #172]	@ (80217e8 <_strtod_l+0x914>)
 802173a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802173c:	403b      	ands	r3, r7
 802173e:	2a00      	cmp	r2, #0
 8021740:	d074      	beq.n	802182c <_strtod_l+0x958>
 8021742:	22d6      	movs	r2, #214	@ 0xd6
 8021744:	04d2      	lsls	r2, r2, #19
 8021746:	4293      	cmp	r3, r2
 8021748:	d870      	bhi.n	802182c <_strtod_l+0x958>
 802174a:	22dc      	movs	r2, #220	@ 0xdc
 802174c:	0492      	lsls	r2, r2, #18
 802174e:	4293      	cmp	r3, r2
 8021750:	d800      	bhi.n	8021754 <_strtod_l+0x880>
 8021752:	e695      	b.n	8021480 <_strtod_l+0x5ac>
 8021754:	0030      	movs	r0, r6
 8021756:	0039      	movs	r1, r7
 8021758:	4b24      	ldr	r3, [pc, #144]	@ (80217ec <_strtod_l+0x918>)
 802175a:	2200      	movs	r2, #0
 802175c:	f7e0 ff6e 	bl	800263c <__aeabi_dmul>
 8021760:	4b21      	ldr	r3, [pc, #132]	@ (80217e8 <_strtod_l+0x914>)
 8021762:	0006      	movs	r6, r0
 8021764:	000f      	movs	r7, r1
 8021766:	420b      	tst	r3, r1
 8021768:	d000      	beq.n	802176c <_strtod_l+0x898>
 802176a:	e5f6      	b.n	802135a <_strtod_l+0x486>
 802176c:	2322      	movs	r3, #34	@ 0x22
 802176e:	9a05      	ldr	r2, [sp, #20]
 8021770:	6013      	str	r3, [r2, #0]
 8021772:	e5f2      	b.n	802135a <_strtod_l+0x486>
 8021774:	970e      	str	r7, [sp, #56]	@ 0x38
 8021776:	2800      	cmp	r0, #0
 8021778:	d175      	bne.n	8021866 <_strtod_l+0x992>
 802177a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802177c:	033b      	lsls	r3, r7, #12
 802177e:	0b1b      	lsrs	r3, r3, #12
 8021780:	2a00      	cmp	r2, #0
 8021782:	d039      	beq.n	80217f8 <_strtod_l+0x924>
 8021784:	4a1a      	ldr	r2, [pc, #104]	@ (80217f0 <_strtod_l+0x91c>)
 8021786:	4293      	cmp	r3, r2
 8021788:	d138      	bne.n	80217fc <_strtod_l+0x928>
 802178a:	2101      	movs	r1, #1
 802178c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802178e:	4249      	negs	r1, r1
 8021790:	0032      	movs	r2, r6
 8021792:	0008      	movs	r0, r1
 8021794:	2b00      	cmp	r3, #0
 8021796:	d00b      	beq.n	80217b0 <_strtod_l+0x8dc>
 8021798:	24d4      	movs	r4, #212	@ 0xd4
 802179a:	4b13      	ldr	r3, [pc, #76]	@ (80217e8 <_strtod_l+0x914>)
 802179c:	0008      	movs	r0, r1
 802179e:	403b      	ands	r3, r7
 80217a0:	04e4      	lsls	r4, r4, #19
 80217a2:	42a3      	cmp	r3, r4
 80217a4:	d804      	bhi.n	80217b0 <_strtod_l+0x8dc>
 80217a6:	306c      	adds	r0, #108	@ 0x6c
 80217a8:	0d1b      	lsrs	r3, r3, #20
 80217aa:	1ac3      	subs	r3, r0, r3
 80217ac:	4099      	lsls	r1, r3
 80217ae:	0008      	movs	r0, r1
 80217b0:	4282      	cmp	r2, r0
 80217b2:	d123      	bne.n	80217fc <_strtod_l+0x928>
 80217b4:	4b0f      	ldr	r3, [pc, #60]	@ (80217f4 <_strtod_l+0x920>)
 80217b6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80217b8:	4299      	cmp	r1, r3
 80217ba:	d102      	bne.n	80217c2 <_strtod_l+0x8ee>
 80217bc:	3201      	adds	r2, #1
 80217be:	d100      	bne.n	80217c2 <_strtod_l+0x8ee>
 80217c0:	e5c2      	b.n	8021348 <_strtod_l+0x474>
 80217c2:	4b09      	ldr	r3, [pc, #36]	@ (80217e8 <_strtod_l+0x914>)
 80217c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80217c6:	2600      	movs	r6, #0
 80217c8:	401a      	ands	r2, r3
 80217ca:	0013      	movs	r3, r2
 80217cc:	2280      	movs	r2, #128	@ 0x80
 80217ce:	0352      	lsls	r2, r2, #13
 80217d0:	189f      	adds	r7, r3, r2
 80217d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217d4:	2b00      	cmp	r3, #0
 80217d6:	d1bd      	bne.n	8021754 <_strtod_l+0x880>
 80217d8:	e5bf      	b.n	802135a <_strtod_l+0x486>
 80217da:	46c0      	nop			@ (mov r8, r8)
 80217dc:	08029338 	.word	0x08029338
 80217e0:	fffffc02 	.word	0xfffffc02
 80217e4:	fffffbe2 	.word	0xfffffbe2
 80217e8:	7ff00000 	.word	0x7ff00000
 80217ec:	39500000 	.word	0x39500000
 80217f0:	000fffff 	.word	0x000fffff
 80217f4:	7fefffff 	.word	0x7fefffff
 80217f8:	4333      	orrs	r3, r6
 80217fa:	d09d      	beq.n	8021738 <_strtod_l+0x864>
 80217fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80217fe:	2b00      	cmp	r3, #0
 8021800:	d01c      	beq.n	802183c <_strtod_l+0x968>
 8021802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021804:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021806:	4213      	tst	r3, r2
 8021808:	d0e3      	beq.n	80217d2 <_strtod_l+0x8fe>
 802180a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802180c:	0030      	movs	r0, r6
 802180e:	0039      	movs	r1, r7
 8021810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021812:	2b00      	cmp	r3, #0
 8021814:	d016      	beq.n	8021844 <_strtod_l+0x970>
 8021816:	f7ff fb45 	bl	8020ea4 <sulp>
 802181a:	0002      	movs	r2, r0
 802181c:	000b      	movs	r3, r1
 802181e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021820:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021822:	f7df ff63 	bl	80016ec <__aeabi_dadd>
 8021826:	0006      	movs	r6, r0
 8021828:	000f      	movs	r7, r1
 802182a:	e7d2      	b.n	80217d2 <_strtod_l+0x8fe>
 802182c:	2601      	movs	r6, #1
 802182e:	4a92      	ldr	r2, [pc, #584]	@ (8021a78 <_strtod_l+0xba4>)
 8021830:	4276      	negs	r6, r6
 8021832:	189b      	adds	r3, r3, r2
 8021834:	4a91      	ldr	r2, [pc, #580]	@ (8021a7c <_strtod_l+0xba8>)
 8021836:	431a      	orrs	r2, r3
 8021838:	0017      	movs	r7, r2
 802183a:	e7ca      	b.n	80217d2 <_strtod_l+0x8fe>
 802183c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802183e:	4233      	tst	r3, r6
 8021840:	d0c7      	beq.n	80217d2 <_strtod_l+0x8fe>
 8021842:	e7e2      	b.n	802180a <_strtod_l+0x936>
 8021844:	f7ff fb2e 	bl	8020ea4 <sulp>
 8021848:	0002      	movs	r2, r0
 802184a:	000b      	movs	r3, r1
 802184c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802184e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021850:	f7e1 f9bc 	bl	8002bcc <__aeabi_dsub>
 8021854:	2200      	movs	r2, #0
 8021856:	2300      	movs	r3, #0
 8021858:	0006      	movs	r6, r0
 802185a:	000f      	movs	r7, r1
 802185c:	f7de fe28 	bl	80004b0 <__aeabi_dcmpeq>
 8021860:	2800      	cmp	r0, #0
 8021862:	d0b6      	beq.n	80217d2 <_strtod_l+0x8fe>
 8021864:	e60c      	b.n	8021480 <_strtod_l+0x5ac>
 8021866:	9907      	ldr	r1, [sp, #28]
 8021868:	9806      	ldr	r0, [sp, #24]
 802186a:	f003 f901 	bl	8024a70 <__ratio>
 802186e:	2380      	movs	r3, #128	@ 0x80
 8021870:	2200      	movs	r2, #0
 8021872:	05db      	lsls	r3, r3, #23
 8021874:	0004      	movs	r4, r0
 8021876:	000d      	movs	r5, r1
 8021878:	f7de fe2a 	bl	80004d0 <__aeabi_dcmple>
 802187c:	2800      	cmp	r0, #0
 802187e:	d06c      	beq.n	802195a <_strtod_l+0xa86>
 8021880:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021882:	2b00      	cmp	r3, #0
 8021884:	d177      	bne.n	8021976 <_strtod_l+0xaa2>
 8021886:	2e00      	cmp	r6, #0
 8021888:	d157      	bne.n	802193a <_strtod_l+0xa66>
 802188a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802188c:	031b      	lsls	r3, r3, #12
 802188e:	d15a      	bne.n	8021946 <_strtod_l+0xa72>
 8021890:	2200      	movs	r2, #0
 8021892:	0020      	movs	r0, r4
 8021894:	0029      	movs	r1, r5
 8021896:	4b7a      	ldr	r3, [pc, #488]	@ (8021a80 <_strtod_l+0xbac>)
 8021898:	f7de fe10 	bl	80004bc <__aeabi_dcmplt>
 802189c:	2800      	cmp	r0, #0
 802189e:	d159      	bne.n	8021954 <_strtod_l+0xa80>
 80218a0:	0020      	movs	r0, r4
 80218a2:	0029      	movs	r1, r5
 80218a4:	2200      	movs	r2, #0
 80218a6:	4b77      	ldr	r3, [pc, #476]	@ (8021a84 <_strtod_l+0xbb0>)
 80218a8:	f7e0 fec8 	bl	800263c <__aeabi_dmul>
 80218ac:	0004      	movs	r4, r0
 80218ae:	000d      	movs	r5, r1
 80218b0:	2380      	movs	r3, #128	@ 0x80
 80218b2:	061b      	lsls	r3, r3, #24
 80218b4:	18eb      	adds	r3, r5, r3
 80218b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80218b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80218ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80218bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80218be:	9214      	str	r2, [sp, #80]	@ 0x50
 80218c0:	9315      	str	r3, [sp, #84]	@ 0x54
 80218c2:	4a71      	ldr	r2, [pc, #452]	@ (8021a88 <_strtod_l+0xbb4>)
 80218c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80218c6:	4013      	ands	r3, r2
 80218c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80218ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80218cc:	4b6f      	ldr	r3, [pc, #444]	@ (8021a8c <_strtod_l+0xbb8>)
 80218ce:	429a      	cmp	r2, r3
 80218d0:	d000      	beq.n	80218d4 <_strtod_l+0xa00>
 80218d2:	e087      	b.n	80219e4 <_strtod_l+0xb10>
 80218d4:	4a6e      	ldr	r2, [pc, #440]	@ (8021a90 <_strtod_l+0xbbc>)
 80218d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80218d8:	4694      	mov	ip, r2
 80218da:	4463      	add	r3, ip
 80218dc:	001f      	movs	r7, r3
 80218de:	0030      	movs	r0, r6
 80218e0:	0019      	movs	r1, r3
 80218e2:	f002 fff9 	bl	80248d8 <__ulp>
 80218e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80218e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80218ea:	f7e0 fea7 	bl	800263c <__aeabi_dmul>
 80218ee:	0032      	movs	r2, r6
 80218f0:	003b      	movs	r3, r7
 80218f2:	f7df fefb 	bl	80016ec <__aeabi_dadd>
 80218f6:	4a64      	ldr	r2, [pc, #400]	@ (8021a88 <_strtod_l+0xbb4>)
 80218f8:	4b66      	ldr	r3, [pc, #408]	@ (8021a94 <_strtod_l+0xbc0>)
 80218fa:	0006      	movs	r6, r0
 80218fc:	400a      	ands	r2, r1
 80218fe:	429a      	cmp	r2, r3
 8021900:	d940      	bls.n	8021984 <_strtod_l+0xab0>
 8021902:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021904:	4a64      	ldr	r2, [pc, #400]	@ (8021a98 <_strtod_l+0xbc4>)
 8021906:	4293      	cmp	r3, r2
 8021908:	d103      	bne.n	8021912 <_strtod_l+0xa3e>
 802190a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802190c:	3301      	adds	r3, #1
 802190e:	d100      	bne.n	8021912 <_strtod_l+0xa3e>
 8021910:	e51a      	b.n	8021348 <_strtod_l+0x474>
 8021912:	2601      	movs	r6, #1
 8021914:	4f60      	ldr	r7, [pc, #384]	@ (8021a98 <_strtod_l+0xbc4>)
 8021916:	4276      	negs	r6, r6
 8021918:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802191a:	9805      	ldr	r0, [sp, #20]
 802191c:	f002 fc90 	bl	8024240 <_Bfree>
 8021920:	9908      	ldr	r1, [sp, #32]
 8021922:	9805      	ldr	r0, [sp, #20]
 8021924:	f002 fc8c 	bl	8024240 <_Bfree>
 8021928:	9907      	ldr	r1, [sp, #28]
 802192a:	9805      	ldr	r0, [sp, #20]
 802192c:	f002 fc88 	bl	8024240 <_Bfree>
 8021930:	9906      	ldr	r1, [sp, #24]
 8021932:	9805      	ldr	r0, [sp, #20]
 8021934:	f002 fc84 	bl	8024240 <_Bfree>
 8021938:	e617      	b.n	802156a <_strtod_l+0x696>
 802193a:	2e01      	cmp	r6, #1
 802193c:	d103      	bne.n	8021946 <_strtod_l+0xa72>
 802193e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021940:	2b00      	cmp	r3, #0
 8021942:	d100      	bne.n	8021946 <_strtod_l+0xa72>
 8021944:	e59c      	b.n	8021480 <_strtod_l+0x5ac>
 8021946:	2300      	movs	r3, #0
 8021948:	4c54      	ldr	r4, [pc, #336]	@ (8021a9c <_strtod_l+0xbc8>)
 802194a:	4d4d      	ldr	r5, [pc, #308]	@ (8021a80 <_strtod_l+0xbac>)
 802194c:	930a      	str	r3, [sp, #40]	@ 0x28
 802194e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021950:	2400      	movs	r4, #0
 8021952:	e7b2      	b.n	80218ba <_strtod_l+0x9e6>
 8021954:	2400      	movs	r4, #0
 8021956:	4d4b      	ldr	r5, [pc, #300]	@ (8021a84 <_strtod_l+0xbb0>)
 8021958:	e7aa      	b.n	80218b0 <_strtod_l+0x9dc>
 802195a:	0020      	movs	r0, r4
 802195c:	0029      	movs	r1, r5
 802195e:	4b49      	ldr	r3, [pc, #292]	@ (8021a84 <_strtod_l+0xbb0>)
 8021960:	2200      	movs	r2, #0
 8021962:	f7e0 fe6b 	bl	800263c <__aeabi_dmul>
 8021966:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021968:	0004      	movs	r4, r0
 802196a:	000d      	movs	r5, r1
 802196c:	2b00      	cmp	r3, #0
 802196e:	d09f      	beq.n	80218b0 <_strtod_l+0x9dc>
 8021970:	940a      	str	r4, [sp, #40]	@ 0x28
 8021972:	950b      	str	r5, [sp, #44]	@ 0x2c
 8021974:	e7a1      	b.n	80218ba <_strtod_l+0x9e6>
 8021976:	2300      	movs	r3, #0
 8021978:	4c41      	ldr	r4, [pc, #260]	@ (8021a80 <_strtod_l+0xbac>)
 802197a:	0025      	movs	r5, r4
 802197c:	930a      	str	r3, [sp, #40]	@ 0x28
 802197e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021980:	001c      	movs	r4, r3
 8021982:	e79a      	b.n	80218ba <_strtod_l+0x9e6>
 8021984:	23d4      	movs	r3, #212	@ 0xd4
 8021986:	049b      	lsls	r3, r3, #18
 8021988:	18cf      	adds	r7, r1, r3
 802198a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802198c:	9710      	str	r7, [sp, #64]	@ 0x40
 802198e:	2b00      	cmp	r3, #0
 8021990:	d1c2      	bne.n	8021918 <_strtod_l+0xa44>
 8021992:	4b3d      	ldr	r3, [pc, #244]	@ (8021a88 <_strtod_l+0xbb4>)
 8021994:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021996:	403b      	ands	r3, r7
 8021998:	429a      	cmp	r2, r3
 802199a:	d1bd      	bne.n	8021918 <_strtod_l+0xa44>
 802199c:	0020      	movs	r0, r4
 802199e:	0029      	movs	r1, r5
 80219a0:	f7de fe72 	bl	8000688 <__aeabi_d2lz>
 80219a4:	f7de feaa 	bl	80006fc <__aeabi_l2d>
 80219a8:	0002      	movs	r2, r0
 80219aa:	000b      	movs	r3, r1
 80219ac:	0020      	movs	r0, r4
 80219ae:	0029      	movs	r1, r5
 80219b0:	f7e1 f90c 	bl	8002bcc <__aeabi_dsub>
 80219b4:	033c      	lsls	r4, r7, #12
 80219b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80219b8:	0b24      	lsrs	r4, r4, #12
 80219ba:	4334      	orrs	r4, r6
 80219bc:	900e      	str	r0, [sp, #56]	@ 0x38
 80219be:	910f      	str	r1, [sp, #60]	@ 0x3c
 80219c0:	4a37      	ldr	r2, [pc, #220]	@ (8021aa0 <_strtod_l+0xbcc>)
 80219c2:	431c      	orrs	r4, r3
 80219c4:	d052      	beq.n	8021a6c <_strtod_l+0xb98>
 80219c6:	4b37      	ldr	r3, [pc, #220]	@ (8021aa4 <_strtod_l+0xbd0>)
 80219c8:	f7de fd78 	bl	80004bc <__aeabi_dcmplt>
 80219cc:	2800      	cmp	r0, #0
 80219ce:	d000      	beq.n	80219d2 <_strtod_l+0xafe>
 80219d0:	e4c3      	b.n	802135a <_strtod_l+0x486>
 80219d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80219d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80219d6:	4a34      	ldr	r2, [pc, #208]	@ (8021aa8 <_strtod_l+0xbd4>)
 80219d8:	4b2a      	ldr	r3, [pc, #168]	@ (8021a84 <_strtod_l+0xbb0>)
 80219da:	f7de fd83 	bl	80004e4 <__aeabi_dcmpgt>
 80219de:	2800      	cmp	r0, #0
 80219e0:	d09a      	beq.n	8021918 <_strtod_l+0xa44>
 80219e2:	e4ba      	b.n	802135a <_strtod_l+0x486>
 80219e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219e6:	2b00      	cmp	r3, #0
 80219e8:	d02a      	beq.n	8021a40 <_strtod_l+0xb6c>
 80219ea:	23d4      	movs	r3, #212	@ 0xd4
 80219ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80219ee:	04db      	lsls	r3, r3, #19
 80219f0:	429a      	cmp	r2, r3
 80219f2:	d825      	bhi.n	8021a40 <_strtod_l+0xb6c>
 80219f4:	0020      	movs	r0, r4
 80219f6:	0029      	movs	r1, r5
 80219f8:	4a2c      	ldr	r2, [pc, #176]	@ (8021aac <_strtod_l+0xbd8>)
 80219fa:	4b2d      	ldr	r3, [pc, #180]	@ (8021ab0 <_strtod_l+0xbdc>)
 80219fc:	f7de fd68 	bl	80004d0 <__aeabi_dcmple>
 8021a00:	2800      	cmp	r0, #0
 8021a02:	d016      	beq.n	8021a32 <_strtod_l+0xb5e>
 8021a04:	0020      	movs	r0, r4
 8021a06:	0029      	movs	r1, r5
 8021a08:	f7de fe20 	bl	800064c <__aeabi_d2uiz>
 8021a0c:	2800      	cmp	r0, #0
 8021a0e:	d100      	bne.n	8021a12 <_strtod_l+0xb3e>
 8021a10:	3001      	adds	r0, #1
 8021a12:	f7e1 fd03 	bl	800341c <__aeabi_ui2d>
 8021a16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021a18:	0004      	movs	r4, r0
 8021a1a:	000d      	movs	r5, r1
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d122      	bne.n	8021a66 <_strtod_l+0xb92>
 8021a20:	2380      	movs	r3, #128	@ 0x80
 8021a22:	061b      	lsls	r3, r3, #24
 8021a24:	18cb      	adds	r3, r1, r3
 8021a26:	9018      	str	r0, [sp, #96]	@ 0x60
 8021a28:	9319      	str	r3, [sp, #100]	@ 0x64
 8021a2a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021a2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021a2e:	9214      	str	r2, [sp, #80]	@ 0x50
 8021a30:	9315      	str	r3, [sp, #84]	@ 0x54
 8021a32:	22d6      	movs	r2, #214	@ 0xd6
 8021a34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021a36:	04d2      	lsls	r2, r2, #19
 8021a38:	189b      	adds	r3, r3, r2
 8021a3a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021a3c:	1a9b      	subs	r3, r3, r2
 8021a3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8021a40:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021a42:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021a44:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8021a46:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8021a48:	f002 ff46 	bl	80248d8 <__ulp>
 8021a4c:	0002      	movs	r2, r0
 8021a4e:	000b      	movs	r3, r1
 8021a50:	0030      	movs	r0, r6
 8021a52:	0039      	movs	r1, r7
 8021a54:	f7e0 fdf2 	bl	800263c <__aeabi_dmul>
 8021a58:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021a5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021a5c:	f7df fe46 	bl	80016ec <__aeabi_dadd>
 8021a60:	0006      	movs	r6, r0
 8021a62:	000f      	movs	r7, r1
 8021a64:	e791      	b.n	802198a <_strtod_l+0xab6>
 8021a66:	9418      	str	r4, [sp, #96]	@ 0x60
 8021a68:	9519      	str	r5, [sp, #100]	@ 0x64
 8021a6a:	e7de      	b.n	8021a2a <_strtod_l+0xb56>
 8021a6c:	4b11      	ldr	r3, [pc, #68]	@ (8021ab4 <_strtod_l+0xbe0>)
 8021a6e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021a70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021a72:	f7de fd23 	bl	80004bc <__aeabi_dcmplt>
 8021a76:	e7b2      	b.n	80219de <_strtod_l+0xb0a>
 8021a78:	fff00000 	.word	0xfff00000
 8021a7c:	000fffff 	.word	0x000fffff
 8021a80:	3ff00000 	.word	0x3ff00000
 8021a84:	3fe00000 	.word	0x3fe00000
 8021a88:	7ff00000 	.word	0x7ff00000
 8021a8c:	7fe00000 	.word	0x7fe00000
 8021a90:	fcb00000 	.word	0xfcb00000
 8021a94:	7c9fffff 	.word	0x7c9fffff
 8021a98:	7fefffff 	.word	0x7fefffff
 8021a9c:	bff00000 	.word	0xbff00000
 8021aa0:	94a03595 	.word	0x94a03595
 8021aa4:	3fdfffff 	.word	0x3fdfffff
 8021aa8:	35afe535 	.word	0x35afe535
 8021aac:	ffc00000 	.word	0xffc00000
 8021ab0:	41dfffff 	.word	0x41dfffff
 8021ab4:	3fcfffff 	.word	0x3fcfffff

08021ab8 <strtod>:
 8021ab8:	b510      	push	{r4, lr}
 8021aba:	4c04      	ldr	r4, [pc, #16]	@ (8021acc <strtod+0x14>)
 8021abc:	000a      	movs	r2, r1
 8021abe:	0001      	movs	r1, r0
 8021ac0:	4b03      	ldr	r3, [pc, #12]	@ (8021ad0 <strtod+0x18>)
 8021ac2:	6820      	ldr	r0, [r4, #0]
 8021ac4:	f7ff fa06 	bl	8020ed4 <_strtod_l>
 8021ac8:	bd10      	pop	{r4, pc}
 8021aca:	46c0      	nop			@ (mov r8, r8)
 8021acc:	200003dc 	.word	0x200003dc
 8021ad0:	20000270 	.word	0x20000270

08021ad4 <_strtol_l.constprop.0>:
 8021ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ad6:	b085      	sub	sp, #20
 8021ad8:	0017      	movs	r7, r2
 8021ada:	001e      	movs	r6, r3
 8021adc:	9003      	str	r0, [sp, #12]
 8021ade:	9101      	str	r1, [sp, #4]
 8021ae0:	2b24      	cmp	r3, #36	@ 0x24
 8021ae2:	d844      	bhi.n	8021b6e <_strtol_l.constprop.0+0x9a>
 8021ae4:	000c      	movs	r4, r1
 8021ae6:	2b01      	cmp	r3, #1
 8021ae8:	d041      	beq.n	8021b6e <_strtol_l.constprop.0+0x9a>
 8021aea:	4b3d      	ldr	r3, [pc, #244]	@ (8021be0 <_strtol_l.constprop.0+0x10c>)
 8021aec:	2208      	movs	r2, #8
 8021aee:	469c      	mov	ip, r3
 8021af0:	0023      	movs	r3, r4
 8021af2:	4661      	mov	r1, ip
 8021af4:	781d      	ldrb	r5, [r3, #0]
 8021af6:	3401      	adds	r4, #1
 8021af8:	5d48      	ldrb	r0, [r1, r5]
 8021afa:	0001      	movs	r1, r0
 8021afc:	4011      	ands	r1, r2
 8021afe:	4210      	tst	r0, r2
 8021b00:	d1f6      	bne.n	8021af0 <_strtol_l.constprop.0+0x1c>
 8021b02:	2d2d      	cmp	r5, #45	@ 0x2d
 8021b04:	d13a      	bne.n	8021b7c <_strtol_l.constprop.0+0xa8>
 8021b06:	7825      	ldrb	r5, [r4, #0]
 8021b08:	1c9c      	adds	r4, r3, #2
 8021b0a:	2301      	movs	r3, #1
 8021b0c:	9300      	str	r3, [sp, #0]
 8021b0e:	2210      	movs	r2, #16
 8021b10:	0033      	movs	r3, r6
 8021b12:	4393      	bics	r3, r2
 8021b14:	d109      	bne.n	8021b2a <_strtol_l.constprop.0+0x56>
 8021b16:	2d30      	cmp	r5, #48	@ 0x30
 8021b18:	d136      	bne.n	8021b88 <_strtol_l.constprop.0+0xb4>
 8021b1a:	2120      	movs	r1, #32
 8021b1c:	7823      	ldrb	r3, [r4, #0]
 8021b1e:	438b      	bics	r3, r1
 8021b20:	2b58      	cmp	r3, #88	@ 0x58
 8021b22:	d131      	bne.n	8021b88 <_strtol_l.constprop.0+0xb4>
 8021b24:	0016      	movs	r6, r2
 8021b26:	7865      	ldrb	r5, [r4, #1]
 8021b28:	3402      	adds	r4, #2
 8021b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8021be4 <_strtol_l.constprop.0+0x110>)
 8021b2c:	9b00      	ldr	r3, [sp, #0]
 8021b2e:	4694      	mov	ip, r2
 8021b30:	4463      	add	r3, ip
 8021b32:	0031      	movs	r1, r6
 8021b34:	0018      	movs	r0, r3
 8021b36:	9302      	str	r3, [sp, #8]
 8021b38:	f7de fbba 	bl	80002b0 <__aeabi_uidivmod>
 8021b3c:	2200      	movs	r2, #0
 8021b3e:	4684      	mov	ip, r0
 8021b40:	0010      	movs	r0, r2
 8021b42:	002b      	movs	r3, r5
 8021b44:	3b30      	subs	r3, #48	@ 0x30
 8021b46:	2b09      	cmp	r3, #9
 8021b48:	d825      	bhi.n	8021b96 <_strtol_l.constprop.0+0xc2>
 8021b4a:	001d      	movs	r5, r3
 8021b4c:	42ae      	cmp	r6, r5
 8021b4e:	dd31      	ble.n	8021bb4 <_strtol_l.constprop.0+0xe0>
 8021b50:	1c53      	adds	r3, r2, #1
 8021b52:	d009      	beq.n	8021b68 <_strtol_l.constprop.0+0x94>
 8021b54:	2201      	movs	r2, #1
 8021b56:	4252      	negs	r2, r2
 8021b58:	4584      	cmp	ip, r0
 8021b5a:	d305      	bcc.n	8021b68 <_strtol_l.constprop.0+0x94>
 8021b5c:	d101      	bne.n	8021b62 <_strtol_l.constprop.0+0x8e>
 8021b5e:	42a9      	cmp	r1, r5
 8021b60:	db25      	blt.n	8021bae <_strtol_l.constprop.0+0xda>
 8021b62:	2201      	movs	r2, #1
 8021b64:	4370      	muls	r0, r6
 8021b66:	1828      	adds	r0, r5, r0
 8021b68:	7825      	ldrb	r5, [r4, #0]
 8021b6a:	3401      	adds	r4, #1
 8021b6c:	e7e9      	b.n	8021b42 <_strtol_l.constprop.0+0x6e>
 8021b6e:	f000 ffe7 	bl	8022b40 <__errno>
 8021b72:	2316      	movs	r3, #22
 8021b74:	6003      	str	r3, [r0, #0]
 8021b76:	2000      	movs	r0, #0
 8021b78:	b005      	add	sp, #20
 8021b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b7c:	9100      	str	r1, [sp, #0]
 8021b7e:	2d2b      	cmp	r5, #43	@ 0x2b
 8021b80:	d1c5      	bne.n	8021b0e <_strtol_l.constprop.0+0x3a>
 8021b82:	7825      	ldrb	r5, [r4, #0]
 8021b84:	1c9c      	adds	r4, r3, #2
 8021b86:	e7c2      	b.n	8021b0e <_strtol_l.constprop.0+0x3a>
 8021b88:	2e00      	cmp	r6, #0
 8021b8a:	d1ce      	bne.n	8021b2a <_strtol_l.constprop.0+0x56>
 8021b8c:	3608      	adds	r6, #8
 8021b8e:	2d30      	cmp	r5, #48	@ 0x30
 8021b90:	d0cb      	beq.n	8021b2a <_strtol_l.constprop.0+0x56>
 8021b92:	3602      	adds	r6, #2
 8021b94:	e7c9      	b.n	8021b2a <_strtol_l.constprop.0+0x56>
 8021b96:	002b      	movs	r3, r5
 8021b98:	3b41      	subs	r3, #65	@ 0x41
 8021b9a:	2b19      	cmp	r3, #25
 8021b9c:	d801      	bhi.n	8021ba2 <_strtol_l.constprop.0+0xce>
 8021b9e:	3d37      	subs	r5, #55	@ 0x37
 8021ba0:	e7d4      	b.n	8021b4c <_strtol_l.constprop.0+0x78>
 8021ba2:	002b      	movs	r3, r5
 8021ba4:	3b61      	subs	r3, #97	@ 0x61
 8021ba6:	2b19      	cmp	r3, #25
 8021ba8:	d804      	bhi.n	8021bb4 <_strtol_l.constprop.0+0xe0>
 8021baa:	3d57      	subs	r5, #87	@ 0x57
 8021bac:	e7ce      	b.n	8021b4c <_strtol_l.constprop.0+0x78>
 8021bae:	2201      	movs	r2, #1
 8021bb0:	4252      	negs	r2, r2
 8021bb2:	e7d9      	b.n	8021b68 <_strtol_l.constprop.0+0x94>
 8021bb4:	1c53      	adds	r3, r2, #1
 8021bb6:	d108      	bne.n	8021bca <_strtol_l.constprop.0+0xf6>
 8021bb8:	2322      	movs	r3, #34	@ 0x22
 8021bba:	9a03      	ldr	r2, [sp, #12]
 8021bbc:	9802      	ldr	r0, [sp, #8]
 8021bbe:	6013      	str	r3, [r2, #0]
 8021bc0:	2f00      	cmp	r7, #0
 8021bc2:	d0d9      	beq.n	8021b78 <_strtol_l.constprop.0+0xa4>
 8021bc4:	1e63      	subs	r3, r4, #1
 8021bc6:	9301      	str	r3, [sp, #4]
 8021bc8:	e007      	b.n	8021bda <_strtol_l.constprop.0+0x106>
 8021bca:	9b00      	ldr	r3, [sp, #0]
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d000      	beq.n	8021bd2 <_strtol_l.constprop.0+0xfe>
 8021bd0:	4240      	negs	r0, r0
 8021bd2:	2f00      	cmp	r7, #0
 8021bd4:	d0d0      	beq.n	8021b78 <_strtol_l.constprop.0+0xa4>
 8021bd6:	2a00      	cmp	r2, #0
 8021bd8:	d1f4      	bne.n	8021bc4 <_strtol_l.constprop.0+0xf0>
 8021bda:	9b01      	ldr	r3, [sp, #4]
 8021bdc:	603b      	str	r3, [r7, #0]
 8021bde:	e7cb      	b.n	8021b78 <_strtol_l.constprop.0+0xa4>
 8021be0:	08029361 	.word	0x08029361
 8021be4:	7fffffff 	.word	0x7fffffff

08021be8 <strtol>:
 8021be8:	b510      	push	{r4, lr}
 8021bea:	4c04      	ldr	r4, [pc, #16]	@ (8021bfc <strtol+0x14>)
 8021bec:	0013      	movs	r3, r2
 8021bee:	000a      	movs	r2, r1
 8021bf0:	0001      	movs	r1, r0
 8021bf2:	6820      	ldr	r0, [r4, #0]
 8021bf4:	f7ff ff6e 	bl	8021ad4 <_strtol_l.constprop.0>
 8021bf8:	bd10      	pop	{r4, pc}
 8021bfa:	46c0      	nop			@ (mov r8, r8)
 8021bfc:	200003dc 	.word	0x200003dc

08021c00 <__cvt>:
 8021c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c02:	001f      	movs	r7, r3
 8021c04:	2300      	movs	r3, #0
 8021c06:	0016      	movs	r6, r2
 8021c08:	b08b      	sub	sp, #44	@ 0x2c
 8021c0a:	429f      	cmp	r7, r3
 8021c0c:	da04      	bge.n	8021c18 <__cvt+0x18>
 8021c0e:	2180      	movs	r1, #128	@ 0x80
 8021c10:	0609      	lsls	r1, r1, #24
 8021c12:	187b      	adds	r3, r7, r1
 8021c14:	001f      	movs	r7, r3
 8021c16:	232d      	movs	r3, #45	@ 0x2d
 8021c18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021c1a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021c1c:	7013      	strb	r3, [r2, #0]
 8021c1e:	2320      	movs	r3, #32
 8021c20:	2203      	movs	r2, #3
 8021c22:	439d      	bics	r5, r3
 8021c24:	2d46      	cmp	r5, #70	@ 0x46
 8021c26:	d007      	beq.n	8021c38 <__cvt+0x38>
 8021c28:	002b      	movs	r3, r5
 8021c2a:	3b45      	subs	r3, #69	@ 0x45
 8021c2c:	4259      	negs	r1, r3
 8021c2e:	414b      	adcs	r3, r1
 8021c30:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021c32:	3a01      	subs	r2, #1
 8021c34:	18cb      	adds	r3, r1, r3
 8021c36:	9310      	str	r3, [sp, #64]	@ 0x40
 8021c38:	ab09      	add	r3, sp, #36	@ 0x24
 8021c3a:	9304      	str	r3, [sp, #16]
 8021c3c:	ab08      	add	r3, sp, #32
 8021c3e:	9303      	str	r3, [sp, #12]
 8021c40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021c42:	9200      	str	r2, [sp, #0]
 8021c44:	9302      	str	r3, [sp, #8]
 8021c46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021c48:	0032      	movs	r2, r6
 8021c4a:	9301      	str	r3, [sp, #4]
 8021c4c:	003b      	movs	r3, r7
 8021c4e:	f001 f84d 	bl	8022cec <_dtoa_r>
 8021c52:	0004      	movs	r4, r0
 8021c54:	2d47      	cmp	r5, #71	@ 0x47
 8021c56:	d11b      	bne.n	8021c90 <__cvt+0x90>
 8021c58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021c5a:	07db      	lsls	r3, r3, #31
 8021c5c:	d511      	bpl.n	8021c82 <__cvt+0x82>
 8021c5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021c60:	18c3      	adds	r3, r0, r3
 8021c62:	9307      	str	r3, [sp, #28]
 8021c64:	2200      	movs	r2, #0
 8021c66:	2300      	movs	r3, #0
 8021c68:	0030      	movs	r0, r6
 8021c6a:	0039      	movs	r1, r7
 8021c6c:	f7de fc20 	bl	80004b0 <__aeabi_dcmpeq>
 8021c70:	2800      	cmp	r0, #0
 8021c72:	d001      	beq.n	8021c78 <__cvt+0x78>
 8021c74:	9b07      	ldr	r3, [sp, #28]
 8021c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c78:	2230      	movs	r2, #48	@ 0x30
 8021c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c7c:	9907      	ldr	r1, [sp, #28]
 8021c7e:	428b      	cmp	r3, r1
 8021c80:	d320      	bcc.n	8021cc4 <__cvt+0xc4>
 8021c82:	0020      	movs	r0, r4
 8021c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021c88:	1b1b      	subs	r3, r3, r4
 8021c8a:	6013      	str	r3, [r2, #0]
 8021c8c:	b00b      	add	sp, #44	@ 0x2c
 8021c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021c92:	18c3      	adds	r3, r0, r3
 8021c94:	9307      	str	r3, [sp, #28]
 8021c96:	2d46      	cmp	r5, #70	@ 0x46
 8021c98:	d1e4      	bne.n	8021c64 <__cvt+0x64>
 8021c9a:	7803      	ldrb	r3, [r0, #0]
 8021c9c:	2b30      	cmp	r3, #48	@ 0x30
 8021c9e:	d10c      	bne.n	8021cba <__cvt+0xba>
 8021ca0:	2200      	movs	r2, #0
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	0030      	movs	r0, r6
 8021ca6:	0039      	movs	r1, r7
 8021ca8:	f7de fc02 	bl	80004b0 <__aeabi_dcmpeq>
 8021cac:	2800      	cmp	r0, #0
 8021cae:	d104      	bne.n	8021cba <__cvt+0xba>
 8021cb0:	2301      	movs	r3, #1
 8021cb2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021cb4:	1a9b      	subs	r3, r3, r2
 8021cb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021cb8:	6013      	str	r3, [r2, #0]
 8021cba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021cbc:	9a07      	ldr	r2, [sp, #28]
 8021cbe:	681b      	ldr	r3, [r3, #0]
 8021cc0:	18d3      	adds	r3, r2, r3
 8021cc2:	e7ce      	b.n	8021c62 <__cvt+0x62>
 8021cc4:	1c59      	adds	r1, r3, #1
 8021cc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8021cc8:	701a      	strb	r2, [r3, #0]
 8021cca:	e7d6      	b.n	8021c7a <__cvt+0x7a>

08021ccc <__exponent>:
 8021ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021cce:	232b      	movs	r3, #43	@ 0x2b
 8021cd0:	0005      	movs	r5, r0
 8021cd2:	000c      	movs	r4, r1
 8021cd4:	b085      	sub	sp, #20
 8021cd6:	7002      	strb	r2, [r0, #0]
 8021cd8:	2900      	cmp	r1, #0
 8021cda:	da01      	bge.n	8021ce0 <__exponent+0x14>
 8021cdc:	424c      	negs	r4, r1
 8021cde:	3302      	adds	r3, #2
 8021ce0:	706b      	strb	r3, [r5, #1]
 8021ce2:	2c09      	cmp	r4, #9
 8021ce4:	dd2c      	ble.n	8021d40 <__exponent+0x74>
 8021ce6:	ab02      	add	r3, sp, #8
 8021ce8:	1dde      	adds	r6, r3, #7
 8021cea:	0020      	movs	r0, r4
 8021cec:	210a      	movs	r1, #10
 8021cee:	f7de fbc9 	bl	8000484 <__aeabi_idivmod>
 8021cf2:	0037      	movs	r7, r6
 8021cf4:	3130      	adds	r1, #48	@ 0x30
 8021cf6:	3e01      	subs	r6, #1
 8021cf8:	0020      	movs	r0, r4
 8021cfa:	7031      	strb	r1, [r6, #0]
 8021cfc:	210a      	movs	r1, #10
 8021cfe:	9401      	str	r4, [sp, #4]
 8021d00:	f7de fada 	bl	80002b8 <__divsi3>
 8021d04:	9b01      	ldr	r3, [sp, #4]
 8021d06:	0004      	movs	r4, r0
 8021d08:	2b63      	cmp	r3, #99	@ 0x63
 8021d0a:	dcee      	bgt.n	8021cea <__exponent+0x1e>
 8021d0c:	1eba      	subs	r2, r7, #2
 8021d0e:	1ca8      	adds	r0, r5, #2
 8021d10:	0001      	movs	r1, r0
 8021d12:	0013      	movs	r3, r2
 8021d14:	3430      	adds	r4, #48	@ 0x30
 8021d16:	7014      	strb	r4, [r2, #0]
 8021d18:	ac02      	add	r4, sp, #8
 8021d1a:	3407      	adds	r4, #7
 8021d1c:	429c      	cmp	r4, r3
 8021d1e:	d80a      	bhi.n	8021d36 <__exponent+0x6a>
 8021d20:	2300      	movs	r3, #0
 8021d22:	42a2      	cmp	r2, r4
 8021d24:	d803      	bhi.n	8021d2e <__exponent+0x62>
 8021d26:	3309      	adds	r3, #9
 8021d28:	aa02      	add	r2, sp, #8
 8021d2a:	189b      	adds	r3, r3, r2
 8021d2c:	1bdb      	subs	r3, r3, r7
 8021d2e:	18c0      	adds	r0, r0, r3
 8021d30:	1b40      	subs	r0, r0, r5
 8021d32:	b005      	add	sp, #20
 8021d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d36:	781c      	ldrb	r4, [r3, #0]
 8021d38:	3301      	adds	r3, #1
 8021d3a:	700c      	strb	r4, [r1, #0]
 8021d3c:	3101      	adds	r1, #1
 8021d3e:	e7eb      	b.n	8021d18 <__exponent+0x4c>
 8021d40:	2330      	movs	r3, #48	@ 0x30
 8021d42:	18e4      	adds	r4, r4, r3
 8021d44:	70ab      	strb	r3, [r5, #2]
 8021d46:	1d28      	adds	r0, r5, #4
 8021d48:	70ec      	strb	r4, [r5, #3]
 8021d4a:	e7f1      	b.n	8021d30 <__exponent+0x64>

08021d4c <_printf_float>:
 8021d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d4e:	b097      	sub	sp, #92	@ 0x5c
 8021d50:	000d      	movs	r5, r1
 8021d52:	920a      	str	r2, [sp, #40]	@ 0x28
 8021d54:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8021d56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021d58:	9009      	str	r0, [sp, #36]	@ 0x24
 8021d5a:	f000 fe9f 	bl	8022a9c <_localeconv_r>
 8021d5e:	6803      	ldr	r3, [r0, #0]
 8021d60:	0018      	movs	r0, r3
 8021d62:	930d      	str	r3, [sp, #52]	@ 0x34
 8021d64:	f7de fa02 	bl	800016c <strlen>
 8021d68:	2300      	movs	r3, #0
 8021d6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021d6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8021d6e:	7e2b      	ldrb	r3, [r5, #24]
 8021d70:	2207      	movs	r2, #7
 8021d72:	930c      	str	r3, [sp, #48]	@ 0x30
 8021d74:	682b      	ldr	r3, [r5, #0]
 8021d76:	930e      	str	r3, [sp, #56]	@ 0x38
 8021d78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021d7a:	6823      	ldr	r3, [r4, #0]
 8021d7c:	05c9      	lsls	r1, r1, #23
 8021d7e:	d545      	bpl.n	8021e0c <_printf_float+0xc0>
 8021d80:	189b      	adds	r3, r3, r2
 8021d82:	4393      	bics	r3, r2
 8021d84:	001a      	movs	r2, r3
 8021d86:	3208      	adds	r2, #8
 8021d88:	6022      	str	r2, [r4, #0]
 8021d8a:	2201      	movs	r2, #1
 8021d8c:	681e      	ldr	r6, [r3, #0]
 8021d8e:	685f      	ldr	r7, [r3, #4]
 8021d90:	007b      	lsls	r3, r7, #1
 8021d92:	085b      	lsrs	r3, r3, #1
 8021d94:	9311      	str	r3, [sp, #68]	@ 0x44
 8021d96:	9610      	str	r6, [sp, #64]	@ 0x40
 8021d98:	64ae      	str	r6, [r5, #72]	@ 0x48
 8021d9a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8021d9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021d9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021da0:	4ba7      	ldr	r3, [pc, #668]	@ (8022040 <_printf_float+0x2f4>)
 8021da2:	4252      	negs	r2, r2
 8021da4:	f7e1 faae 	bl	8003304 <__aeabi_dcmpun>
 8021da8:	2800      	cmp	r0, #0
 8021daa:	d131      	bne.n	8021e10 <_printf_float+0xc4>
 8021dac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021dae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021db0:	2201      	movs	r2, #1
 8021db2:	4ba3      	ldr	r3, [pc, #652]	@ (8022040 <_printf_float+0x2f4>)
 8021db4:	4252      	negs	r2, r2
 8021db6:	f7de fb8b 	bl	80004d0 <__aeabi_dcmple>
 8021dba:	2800      	cmp	r0, #0
 8021dbc:	d128      	bne.n	8021e10 <_printf_float+0xc4>
 8021dbe:	2200      	movs	r2, #0
 8021dc0:	2300      	movs	r3, #0
 8021dc2:	0030      	movs	r0, r6
 8021dc4:	0039      	movs	r1, r7
 8021dc6:	f7de fb79 	bl	80004bc <__aeabi_dcmplt>
 8021dca:	2800      	cmp	r0, #0
 8021dcc:	d003      	beq.n	8021dd6 <_printf_float+0x8a>
 8021dce:	002b      	movs	r3, r5
 8021dd0:	222d      	movs	r2, #45	@ 0x2d
 8021dd2:	3343      	adds	r3, #67	@ 0x43
 8021dd4:	701a      	strb	r2, [r3, #0]
 8021dd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021dd8:	4f9a      	ldr	r7, [pc, #616]	@ (8022044 <_printf_float+0x2f8>)
 8021dda:	2b47      	cmp	r3, #71	@ 0x47
 8021ddc:	d900      	bls.n	8021de0 <_printf_float+0x94>
 8021dde:	4f9a      	ldr	r7, [pc, #616]	@ (8022048 <_printf_float+0x2fc>)
 8021de0:	2303      	movs	r3, #3
 8021de2:	2400      	movs	r4, #0
 8021de4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021de6:	612b      	str	r3, [r5, #16]
 8021de8:	3301      	adds	r3, #1
 8021dea:	439a      	bics	r2, r3
 8021dec:	602a      	str	r2, [r5, #0]
 8021dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021df0:	0029      	movs	r1, r5
 8021df2:	9300      	str	r3, [sp, #0]
 8021df4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021df8:	aa15      	add	r2, sp, #84	@ 0x54
 8021dfa:	f000 f9e5 	bl	80221c8 <_printf_common>
 8021dfe:	3001      	adds	r0, #1
 8021e00:	d000      	beq.n	8021e04 <_printf_float+0xb8>
 8021e02:	e09f      	b.n	8021f44 <_printf_float+0x1f8>
 8021e04:	2001      	movs	r0, #1
 8021e06:	4240      	negs	r0, r0
 8021e08:	b017      	add	sp, #92	@ 0x5c
 8021e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e0c:	3307      	adds	r3, #7
 8021e0e:	e7b8      	b.n	8021d82 <_printf_float+0x36>
 8021e10:	0032      	movs	r2, r6
 8021e12:	003b      	movs	r3, r7
 8021e14:	0030      	movs	r0, r6
 8021e16:	0039      	movs	r1, r7
 8021e18:	f7e1 fa74 	bl	8003304 <__aeabi_dcmpun>
 8021e1c:	2800      	cmp	r0, #0
 8021e1e:	d00b      	beq.n	8021e38 <_printf_float+0xec>
 8021e20:	2f00      	cmp	r7, #0
 8021e22:	da03      	bge.n	8021e2c <_printf_float+0xe0>
 8021e24:	002b      	movs	r3, r5
 8021e26:	222d      	movs	r2, #45	@ 0x2d
 8021e28:	3343      	adds	r3, #67	@ 0x43
 8021e2a:	701a      	strb	r2, [r3, #0]
 8021e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021e2e:	4f87      	ldr	r7, [pc, #540]	@ (802204c <_printf_float+0x300>)
 8021e30:	2b47      	cmp	r3, #71	@ 0x47
 8021e32:	d9d5      	bls.n	8021de0 <_printf_float+0x94>
 8021e34:	4f86      	ldr	r7, [pc, #536]	@ (8022050 <_printf_float+0x304>)
 8021e36:	e7d3      	b.n	8021de0 <_printf_float+0x94>
 8021e38:	2220      	movs	r2, #32
 8021e3a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021e3c:	686b      	ldr	r3, [r5, #4]
 8021e3e:	4394      	bics	r4, r2
 8021e40:	1c5a      	adds	r2, r3, #1
 8021e42:	d146      	bne.n	8021ed2 <_printf_float+0x186>
 8021e44:	3307      	adds	r3, #7
 8021e46:	606b      	str	r3, [r5, #4]
 8021e48:	2380      	movs	r3, #128	@ 0x80
 8021e4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021e4c:	00db      	lsls	r3, r3, #3
 8021e4e:	4313      	orrs	r3, r2
 8021e50:	2200      	movs	r2, #0
 8021e52:	602b      	str	r3, [r5, #0]
 8021e54:	9206      	str	r2, [sp, #24]
 8021e56:	aa14      	add	r2, sp, #80	@ 0x50
 8021e58:	9205      	str	r2, [sp, #20]
 8021e5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021e5c:	a90a      	add	r1, sp, #40	@ 0x28
 8021e5e:	9204      	str	r2, [sp, #16]
 8021e60:	aa13      	add	r2, sp, #76	@ 0x4c
 8021e62:	9203      	str	r2, [sp, #12]
 8021e64:	2223      	movs	r2, #35	@ 0x23
 8021e66:	1852      	adds	r2, r2, r1
 8021e68:	9202      	str	r2, [sp, #8]
 8021e6a:	9301      	str	r3, [sp, #4]
 8021e6c:	686b      	ldr	r3, [r5, #4]
 8021e6e:	0032      	movs	r2, r6
 8021e70:	9300      	str	r3, [sp, #0]
 8021e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021e74:	003b      	movs	r3, r7
 8021e76:	f7ff fec3 	bl	8021c00 <__cvt>
 8021e7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021e7c:	0007      	movs	r7, r0
 8021e7e:	2c47      	cmp	r4, #71	@ 0x47
 8021e80:	d12d      	bne.n	8021ede <_printf_float+0x192>
 8021e82:	1cd3      	adds	r3, r2, #3
 8021e84:	db02      	blt.n	8021e8c <_printf_float+0x140>
 8021e86:	686b      	ldr	r3, [r5, #4]
 8021e88:	429a      	cmp	r2, r3
 8021e8a:	dd48      	ble.n	8021f1e <_printf_float+0x1d2>
 8021e8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021e8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021e90:	3b02      	subs	r3, #2
 8021e92:	b2db      	uxtb	r3, r3
 8021e94:	930c      	str	r3, [sp, #48]	@ 0x30
 8021e96:	0028      	movs	r0, r5
 8021e98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021e9a:	3901      	subs	r1, #1
 8021e9c:	3050      	adds	r0, #80	@ 0x50
 8021e9e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021ea0:	f7ff ff14 	bl	8021ccc <__exponent>
 8021ea4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021ea6:	0004      	movs	r4, r0
 8021ea8:	1813      	adds	r3, r2, r0
 8021eaa:	612b      	str	r3, [r5, #16]
 8021eac:	2a01      	cmp	r2, #1
 8021eae:	dc02      	bgt.n	8021eb6 <_printf_float+0x16a>
 8021eb0:	682a      	ldr	r2, [r5, #0]
 8021eb2:	07d2      	lsls	r2, r2, #31
 8021eb4:	d501      	bpl.n	8021eba <_printf_float+0x16e>
 8021eb6:	3301      	adds	r3, #1
 8021eb8:	612b      	str	r3, [r5, #16]
 8021eba:	2323      	movs	r3, #35	@ 0x23
 8021ebc:	aa0a      	add	r2, sp, #40	@ 0x28
 8021ebe:	189b      	adds	r3, r3, r2
 8021ec0:	781b      	ldrb	r3, [r3, #0]
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d100      	bne.n	8021ec8 <_printf_float+0x17c>
 8021ec6:	e792      	b.n	8021dee <_printf_float+0xa2>
 8021ec8:	002b      	movs	r3, r5
 8021eca:	222d      	movs	r2, #45	@ 0x2d
 8021ecc:	3343      	adds	r3, #67	@ 0x43
 8021ece:	701a      	strb	r2, [r3, #0]
 8021ed0:	e78d      	b.n	8021dee <_printf_float+0xa2>
 8021ed2:	2c47      	cmp	r4, #71	@ 0x47
 8021ed4:	d1b8      	bne.n	8021e48 <_printf_float+0xfc>
 8021ed6:	2b00      	cmp	r3, #0
 8021ed8:	d1b6      	bne.n	8021e48 <_printf_float+0xfc>
 8021eda:	3301      	adds	r3, #1
 8021edc:	e7b3      	b.n	8021e46 <_printf_float+0xfa>
 8021ede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ee0:	0011      	movs	r1, r2
 8021ee2:	2b65      	cmp	r3, #101	@ 0x65
 8021ee4:	d9d7      	bls.n	8021e96 <_printf_float+0x14a>
 8021ee6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ee8:	2b66      	cmp	r3, #102	@ 0x66
 8021eea:	d11a      	bne.n	8021f22 <_printf_float+0x1d6>
 8021eec:	686b      	ldr	r3, [r5, #4]
 8021eee:	2a00      	cmp	r2, #0
 8021ef0:	dd09      	ble.n	8021f06 <_printf_float+0x1ba>
 8021ef2:	612a      	str	r2, [r5, #16]
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	d102      	bne.n	8021efe <_printf_float+0x1b2>
 8021ef8:	6829      	ldr	r1, [r5, #0]
 8021efa:	07c9      	lsls	r1, r1, #31
 8021efc:	d50b      	bpl.n	8021f16 <_printf_float+0x1ca>
 8021efe:	3301      	adds	r3, #1
 8021f00:	189b      	adds	r3, r3, r2
 8021f02:	612b      	str	r3, [r5, #16]
 8021f04:	e007      	b.n	8021f16 <_printf_float+0x1ca>
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d103      	bne.n	8021f12 <_printf_float+0x1c6>
 8021f0a:	2201      	movs	r2, #1
 8021f0c:	6829      	ldr	r1, [r5, #0]
 8021f0e:	4211      	tst	r1, r2
 8021f10:	d000      	beq.n	8021f14 <_printf_float+0x1c8>
 8021f12:	1c9a      	adds	r2, r3, #2
 8021f14:	612a      	str	r2, [r5, #16]
 8021f16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021f18:	2400      	movs	r4, #0
 8021f1a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8021f1c:	e7cd      	b.n	8021eba <_printf_float+0x16e>
 8021f1e:	2367      	movs	r3, #103	@ 0x67
 8021f20:	930c      	str	r3, [sp, #48]	@ 0x30
 8021f22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021f24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021f26:	4299      	cmp	r1, r3
 8021f28:	db06      	blt.n	8021f38 <_printf_float+0x1ec>
 8021f2a:	682b      	ldr	r3, [r5, #0]
 8021f2c:	6129      	str	r1, [r5, #16]
 8021f2e:	07db      	lsls	r3, r3, #31
 8021f30:	d5f1      	bpl.n	8021f16 <_printf_float+0x1ca>
 8021f32:	3101      	adds	r1, #1
 8021f34:	6129      	str	r1, [r5, #16]
 8021f36:	e7ee      	b.n	8021f16 <_printf_float+0x1ca>
 8021f38:	2201      	movs	r2, #1
 8021f3a:	2900      	cmp	r1, #0
 8021f3c:	dce0      	bgt.n	8021f00 <_printf_float+0x1b4>
 8021f3e:	1892      	adds	r2, r2, r2
 8021f40:	1a52      	subs	r2, r2, r1
 8021f42:	e7dd      	b.n	8021f00 <_printf_float+0x1b4>
 8021f44:	682a      	ldr	r2, [r5, #0]
 8021f46:	0553      	lsls	r3, r2, #21
 8021f48:	d408      	bmi.n	8021f5c <_printf_float+0x210>
 8021f4a:	692b      	ldr	r3, [r5, #16]
 8021f4c:	003a      	movs	r2, r7
 8021f4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021f50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f54:	47a0      	blx	r4
 8021f56:	3001      	adds	r0, #1
 8021f58:	d129      	bne.n	8021fae <_printf_float+0x262>
 8021f5a:	e753      	b.n	8021e04 <_printf_float+0xb8>
 8021f5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f5e:	2b65      	cmp	r3, #101	@ 0x65
 8021f60:	d800      	bhi.n	8021f64 <_printf_float+0x218>
 8021f62:	e0da      	b.n	802211a <_printf_float+0x3ce>
 8021f64:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8021f66:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8021f68:	2200      	movs	r2, #0
 8021f6a:	2300      	movs	r3, #0
 8021f6c:	f7de faa0 	bl	80004b0 <__aeabi_dcmpeq>
 8021f70:	2800      	cmp	r0, #0
 8021f72:	d033      	beq.n	8021fdc <_printf_float+0x290>
 8021f74:	2301      	movs	r3, #1
 8021f76:	4a37      	ldr	r2, [pc, #220]	@ (8022054 <_printf_float+0x308>)
 8021f78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f7c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f7e:	47a0      	blx	r4
 8021f80:	3001      	adds	r0, #1
 8021f82:	d100      	bne.n	8021f86 <_printf_float+0x23a>
 8021f84:	e73e      	b.n	8021e04 <_printf_float+0xb8>
 8021f86:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8021f88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021f8a:	42b3      	cmp	r3, r6
 8021f8c:	db02      	blt.n	8021f94 <_printf_float+0x248>
 8021f8e:	682b      	ldr	r3, [r5, #0]
 8021f90:	07db      	lsls	r3, r3, #31
 8021f92:	d50c      	bpl.n	8021fae <_printf_float+0x262>
 8021f94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021f9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021f9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f9e:	47a0      	blx	r4
 8021fa0:	2400      	movs	r4, #0
 8021fa2:	3001      	adds	r0, #1
 8021fa4:	d100      	bne.n	8021fa8 <_printf_float+0x25c>
 8021fa6:	e72d      	b.n	8021e04 <_printf_float+0xb8>
 8021fa8:	1e73      	subs	r3, r6, #1
 8021faa:	42a3      	cmp	r3, r4
 8021fac:	dc0a      	bgt.n	8021fc4 <_printf_float+0x278>
 8021fae:	682b      	ldr	r3, [r5, #0]
 8021fb0:	079b      	lsls	r3, r3, #30
 8021fb2:	d500      	bpl.n	8021fb6 <_printf_float+0x26a>
 8021fb4:	e105      	b.n	80221c2 <_printf_float+0x476>
 8021fb6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021fb8:	68e8      	ldr	r0, [r5, #12]
 8021fba:	4298      	cmp	r0, r3
 8021fbc:	db00      	blt.n	8021fc0 <_printf_float+0x274>
 8021fbe:	e723      	b.n	8021e08 <_printf_float+0xbc>
 8021fc0:	0018      	movs	r0, r3
 8021fc2:	e721      	b.n	8021e08 <_printf_float+0xbc>
 8021fc4:	002a      	movs	r2, r5
 8021fc6:	2301      	movs	r3, #1
 8021fc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021fcc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021fce:	321a      	adds	r2, #26
 8021fd0:	47b8      	blx	r7
 8021fd2:	3001      	adds	r0, #1
 8021fd4:	d100      	bne.n	8021fd8 <_printf_float+0x28c>
 8021fd6:	e715      	b.n	8021e04 <_printf_float+0xb8>
 8021fd8:	3401      	adds	r4, #1
 8021fda:	e7e5      	b.n	8021fa8 <_printf_float+0x25c>
 8021fdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	dc3a      	bgt.n	8022058 <_printf_float+0x30c>
 8021fe2:	2301      	movs	r3, #1
 8021fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8022054 <_printf_float+0x308>)
 8021fe6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021fe8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021fea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021fec:	47a0      	blx	r4
 8021fee:	3001      	adds	r0, #1
 8021ff0:	d100      	bne.n	8021ff4 <_printf_float+0x2a8>
 8021ff2:	e707      	b.n	8021e04 <_printf_float+0xb8>
 8021ff4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8021ff6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021ff8:	4333      	orrs	r3, r6
 8021ffa:	d102      	bne.n	8022002 <_printf_float+0x2b6>
 8021ffc:	682b      	ldr	r3, [r5, #0]
 8021ffe:	07db      	lsls	r3, r3, #31
 8022000:	d5d5      	bpl.n	8021fae <_printf_float+0x262>
 8022002:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022004:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022006:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022008:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802200a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802200c:	47a0      	blx	r4
 802200e:	2300      	movs	r3, #0
 8022010:	3001      	adds	r0, #1
 8022012:	d100      	bne.n	8022016 <_printf_float+0x2ca>
 8022014:	e6f6      	b.n	8021e04 <_printf_float+0xb8>
 8022016:	930c      	str	r3, [sp, #48]	@ 0x30
 8022018:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802201a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802201c:	425b      	negs	r3, r3
 802201e:	4293      	cmp	r3, r2
 8022020:	dc01      	bgt.n	8022026 <_printf_float+0x2da>
 8022022:	0033      	movs	r3, r6
 8022024:	e792      	b.n	8021f4c <_printf_float+0x200>
 8022026:	002a      	movs	r2, r5
 8022028:	2301      	movs	r3, #1
 802202a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802202c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802202e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022030:	321a      	adds	r2, #26
 8022032:	47a0      	blx	r4
 8022034:	3001      	adds	r0, #1
 8022036:	d100      	bne.n	802203a <_printf_float+0x2ee>
 8022038:	e6e4      	b.n	8021e04 <_printf_float+0xb8>
 802203a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802203c:	3301      	adds	r3, #1
 802203e:	e7ea      	b.n	8022016 <_printf_float+0x2ca>
 8022040:	7fefffff 	.word	0x7fefffff
 8022044:	08029461 	.word	0x08029461
 8022048:	08029465 	.word	0x08029465
 802204c:	08029469 	.word	0x08029469
 8022050:	0802946d 	.word	0x0802946d
 8022054:	08029471 	.word	0x08029471
 8022058:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802205a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 802205c:	930c      	str	r3, [sp, #48]	@ 0x30
 802205e:	429e      	cmp	r6, r3
 8022060:	dd00      	ble.n	8022064 <_printf_float+0x318>
 8022062:	001e      	movs	r6, r3
 8022064:	2e00      	cmp	r6, #0
 8022066:	dc31      	bgt.n	80220cc <_printf_float+0x380>
 8022068:	43f3      	mvns	r3, r6
 802206a:	2400      	movs	r4, #0
 802206c:	17db      	asrs	r3, r3, #31
 802206e:	4033      	ands	r3, r6
 8022070:	930e      	str	r3, [sp, #56]	@ 0x38
 8022072:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8022074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022076:	1af3      	subs	r3, r6, r3
 8022078:	42a3      	cmp	r3, r4
 802207a:	dc30      	bgt.n	80220de <_printf_float+0x392>
 802207c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802207e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022080:	429a      	cmp	r2, r3
 8022082:	dc38      	bgt.n	80220f6 <_printf_float+0x3aa>
 8022084:	682b      	ldr	r3, [r5, #0]
 8022086:	07db      	lsls	r3, r3, #31
 8022088:	d435      	bmi.n	80220f6 <_printf_float+0x3aa>
 802208a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802208c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802208e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022090:	1b9b      	subs	r3, r3, r6
 8022092:	1b14      	subs	r4, r2, r4
 8022094:	429c      	cmp	r4, r3
 8022096:	dd00      	ble.n	802209a <_printf_float+0x34e>
 8022098:	001c      	movs	r4, r3
 802209a:	2c00      	cmp	r4, #0
 802209c:	dc34      	bgt.n	8022108 <_printf_float+0x3bc>
 802209e:	43e3      	mvns	r3, r4
 80220a0:	2600      	movs	r6, #0
 80220a2:	17db      	asrs	r3, r3, #31
 80220a4:	401c      	ands	r4, r3
 80220a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80220a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80220aa:	1ad3      	subs	r3, r2, r3
 80220ac:	1b1b      	subs	r3, r3, r4
 80220ae:	42b3      	cmp	r3, r6
 80220b0:	dc00      	bgt.n	80220b4 <_printf_float+0x368>
 80220b2:	e77c      	b.n	8021fae <_printf_float+0x262>
 80220b4:	002a      	movs	r2, r5
 80220b6:	2301      	movs	r3, #1
 80220b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80220ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80220be:	321a      	adds	r2, #26
 80220c0:	47b8      	blx	r7
 80220c2:	3001      	adds	r0, #1
 80220c4:	d100      	bne.n	80220c8 <_printf_float+0x37c>
 80220c6:	e69d      	b.n	8021e04 <_printf_float+0xb8>
 80220c8:	3601      	adds	r6, #1
 80220ca:	e7ec      	b.n	80220a6 <_printf_float+0x35a>
 80220cc:	0033      	movs	r3, r6
 80220ce:	003a      	movs	r2, r7
 80220d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80220d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80220d6:	47a0      	blx	r4
 80220d8:	3001      	adds	r0, #1
 80220da:	d1c5      	bne.n	8022068 <_printf_float+0x31c>
 80220dc:	e692      	b.n	8021e04 <_printf_float+0xb8>
 80220de:	002a      	movs	r2, r5
 80220e0:	2301      	movs	r3, #1
 80220e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80220e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80220e8:	321a      	adds	r2, #26
 80220ea:	47b0      	blx	r6
 80220ec:	3001      	adds	r0, #1
 80220ee:	d100      	bne.n	80220f2 <_printf_float+0x3a6>
 80220f0:	e688      	b.n	8021e04 <_printf_float+0xb8>
 80220f2:	3401      	adds	r4, #1
 80220f4:	e7bd      	b.n	8022072 <_printf_float+0x326>
 80220f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80220f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80220fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80220fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022100:	47a0      	blx	r4
 8022102:	3001      	adds	r0, #1
 8022104:	d1c1      	bne.n	802208a <_printf_float+0x33e>
 8022106:	e67d      	b.n	8021e04 <_printf_float+0xb8>
 8022108:	19ba      	adds	r2, r7, r6
 802210a:	0023      	movs	r3, r4
 802210c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802210e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022110:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022112:	47b0      	blx	r6
 8022114:	3001      	adds	r0, #1
 8022116:	d1c2      	bne.n	802209e <_printf_float+0x352>
 8022118:	e674      	b.n	8021e04 <_printf_float+0xb8>
 802211a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802211c:	930c      	str	r3, [sp, #48]	@ 0x30
 802211e:	2b01      	cmp	r3, #1
 8022120:	dc02      	bgt.n	8022128 <_printf_float+0x3dc>
 8022122:	2301      	movs	r3, #1
 8022124:	421a      	tst	r2, r3
 8022126:	d039      	beq.n	802219c <_printf_float+0x450>
 8022128:	2301      	movs	r3, #1
 802212a:	003a      	movs	r2, r7
 802212c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802212e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022130:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022132:	47b0      	blx	r6
 8022134:	3001      	adds	r0, #1
 8022136:	d100      	bne.n	802213a <_printf_float+0x3ee>
 8022138:	e664      	b.n	8021e04 <_printf_float+0xb8>
 802213a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802213c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802213e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022140:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022142:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022144:	47b0      	blx	r6
 8022146:	3001      	adds	r0, #1
 8022148:	d100      	bne.n	802214c <_printf_float+0x400>
 802214a:	e65b      	b.n	8021e04 <_printf_float+0xb8>
 802214c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 802214e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8022150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022152:	2200      	movs	r2, #0
 8022154:	3b01      	subs	r3, #1
 8022156:	930c      	str	r3, [sp, #48]	@ 0x30
 8022158:	2300      	movs	r3, #0
 802215a:	f7de f9a9 	bl	80004b0 <__aeabi_dcmpeq>
 802215e:	2800      	cmp	r0, #0
 8022160:	d11a      	bne.n	8022198 <_printf_float+0x44c>
 8022162:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022164:	1c7a      	adds	r2, r7, #1
 8022166:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022168:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802216a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802216c:	47b0      	blx	r6
 802216e:	3001      	adds	r0, #1
 8022170:	d10e      	bne.n	8022190 <_printf_float+0x444>
 8022172:	e647      	b.n	8021e04 <_printf_float+0xb8>
 8022174:	002a      	movs	r2, r5
 8022176:	2301      	movs	r3, #1
 8022178:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802217a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802217c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802217e:	321a      	adds	r2, #26
 8022180:	47b8      	blx	r7
 8022182:	3001      	adds	r0, #1
 8022184:	d100      	bne.n	8022188 <_printf_float+0x43c>
 8022186:	e63d      	b.n	8021e04 <_printf_float+0xb8>
 8022188:	3601      	adds	r6, #1
 802218a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802218c:	429e      	cmp	r6, r3
 802218e:	dbf1      	blt.n	8022174 <_printf_float+0x428>
 8022190:	002a      	movs	r2, r5
 8022192:	0023      	movs	r3, r4
 8022194:	3250      	adds	r2, #80	@ 0x50
 8022196:	e6da      	b.n	8021f4e <_printf_float+0x202>
 8022198:	2600      	movs	r6, #0
 802219a:	e7f6      	b.n	802218a <_printf_float+0x43e>
 802219c:	003a      	movs	r2, r7
 802219e:	e7e2      	b.n	8022166 <_printf_float+0x41a>
 80221a0:	002a      	movs	r2, r5
 80221a2:	2301      	movs	r3, #1
 80221a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80221a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80221aa:	3219      	adds	r2, #25
 80221ac:	47b0      	blx	r6
 80221ae:	3001      	adds	r0, #1
 80221b0:	d100      	bne.n	80221b4 <_printf_float+0x468>
 80221b2:	e627      	b.n	8021e04 <_printf_float+0xb8>
 80221b4:	3401      	adds	r4, #1
 80221b6:	68eb      	ldr	r3, [r5, #12]
 80221b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80221ba:	1a9b      	subs	r3, r3, r2
 80221bc:	42a3      	cmp	r3, r4
 80221be:	dcef      	bgt.n	80221a0 <_printf_float+0x454>
 80221c0:	e6f9      	b.n	8021fb6 <_printf_float+0x26a>
 80221c2:	2400      	movs	r4, #0
 80221c4:	e7f7      	b.n	80221b6 <_printf_float+0x46a>
 80221c6:	46c0      	nop			@ (mov r8, r8)

080221c8 <_printf_common>:
 80221c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221ca:	0016      	movs	r6, r2
 80221cc:	9301      	str	r3, [sp, #4]
 80221ce:	688a      	ldr	r2, [r1, #8]
 80221d0:	690b      	ldr	r3, [r1, #16]
 80221d2:	000c      	movs	r4, r1
 80221d4:	9000      	str	r0, [sp, #0]
 80221d6:	4293      	cmp	r3, r2
 80221d8:	da00      	bge.n	80221dc <_printf_common+0x14>
 80221da:	0013      	movs	r3, r2
 80221dc:	0022      	movs	r2, r4
 80221de:	6033      	str	r3, [r6, #0]
 80221e0:	3243      	adds	r2, #67	@ 0x43
 80221e2:	7812      	ldrb	r2, [r2, #0]
 80221e4:	2a00      	cmp	r2, #0
 80221e6:	d001      	beq.n	80221ec <_printf_common+0x24>
 80221e8:	3301      	adds	r3, #1
 80221ea:	6033      	str	r3, [r6, #0]
 80221ec:	6823      	ldr	r3, [r4, #0]
 80221ee:	069b      	lsls	r3, r3, #26
 80221f0:	d502      	bpl.n	80221f8 <_printf_common+0x30>
 80221f2:	6833      	ldr	r3, [r6, #0]
 80221f4:	3302      	adds	r3, #2
 80221f6:	6033      	str	r3, [r6, #0]
 80221f8:	6822      	ldr	r2, [r4, #0]
 80221fa:	2306      	movs	r3, #6
 80221fc:	0015      	movs	r5, r2
 80221fe:	401d      	ands	r5, r3
 8022200:	421a      	tst	r2, r3
 8022202:	d027      	beq.n	8022254 <_printf_common+0x8c>
 8022204:	0023      	movs	r3, r4
 8022206:	3343      	adds	r3, #67	@ 0x43
 8022208:	781b      	ldrb	r3, [r3, #0]
 802220a:	1e5a      	subs	r2, r3, #1
 802220c:	4193      	sbcs	r3, r2
 802220e:	6822      	ldr	r2, [r4, #0]
 8022210:	0692      	lsls	r2, r2, #26
 8022212:	d430      	bmi.n	8022276 <_printf_common+0xae>
 8022214:	0022      	movs	r2, r4
 8022216:	9901      	ldr	r1, [sp, #4]
 8022218:	9800      	ldr	r0, [sp, #0]
 802221a:	9d08      	ldr	r5, [sp, #32]
 802221c:	3243      	adds	r2, #67	@ 0x43
 802221e:	47a8      	blx	r5
 8022220:	3001      	adds	r0, #1
 8022222:	d025      	beq.n	8022270 <_printf_common+0xa8>
 8022224:	2206      	movs	r2, #6
 8022226:	6823      	ldr	r3, [r4, #0]
 8022228:	2500      	movs	r5, #0
 802222a:	4013      	ands	r3, r2
 802222c:	2b04      	cmp	r3, #4
 802222e:	d105      	bne.n	802223c <_printf_common+0x74>
 8022230:	6833      	ldr	r3, [r6, #0]
 8022232:	68e5      	ldr	r5, [r4, #12]
 8022234:	1aed      	subs	r5, r5, r3
 8022236:	43eb      	mvns	r3, r5
 8022238:	17db      	asrs	r3, r3, #31
 802223a:	401d      	ands	r5, r3
 802223c:	68a3      	ldr	r3, [r4, #8]
 802223e:	6922      	ldr	r2, [r4, #16]
 8022240:	4293      	cmp	r3, r2
 8022242:	dd01      	ble.n	8022248 <_printf_common+0x80>
 8022244:	1a9b      	subs	r3, r3, r2
 8022246:	18ed      	adds	r5, r5, r3
 8022248:	2600      	movs	r6, #0
 802224a:	42b5      	cmp	r5, r6
 802224c:	d120      	bne.n	8022290 <_printf_common+0xc8>
 802224e:	2000      	movs	r0, #0
 8022250:	e010      	b.n	8022274 <_printf_common+0xac>
 8022252:	3501      	adds	r5, #1
 8022254:	68e3      	ldr	r3, [r4, #12]
 8022256:	6832      	ldr	r2, [r6, #0]
 8022258:	1a9b      	subs	r3, r3, r2
 802225a:	42ab      	cmp	r3, r5
 802225c:	ddd2      	ble.n	8022204 <_printf_common+0x3c>
 802225e:	0022      	movs	r2, r4
 8022260:	2301      	movs	r3, #1
 8022262:	9901      	ldr	r1, [sp, #4]
 8022264:	9800      	ldr	r0, [sp, #0]
 8022266:	9f08      	ldr	r7, [sp, #32]
 8022268:	3219      	adds	r2, #25
 802226a:	47b8      	blx	r7
 802226c:	3001      	adds	r0, #1
 802226e:	d1f0      	bne.n	8022252 <_printf_common+0x8a>
 8022270:	2001      	movs	r0, #1
 8022272:	4240      	negs	r0, r0
 8022274:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022276:	2030      	movs	r0, #48	@ 0x30
 8022278:	18e1      	adds	r1, r4, r3
 802227a:	3143      	adds	r1, #67	@ 0x43
 802227c:	7008      	strb	r0, [r1, #0]
 802227e:	0021      	movs	r1, r4
 8022280:	1c5a      	adds	r2, r3, #1
 8022282:	3145      	adds	r1, #69	@ 0x45
 8022284:	7809      	ldrb	r1, [r1, #0]
 8022286:	18a2      	adds	r2, r4, r2
 8022288:	3243      	adds	r2, #67	@ 0x43
 802228a:	3302      	adds	r3, #2
 802228c:	7011      	strb	r1, [r2, #0]
 802228e:	e7c1      	b.n	8022214 <_printf_common+0x4c>
 8022290:	0022      	movs	r2, r4
 8022292:	2301      	movs	r3, #1
 8022294:	9901      	ldr	r1, [sp, #4]
 8022296:	9800      	ldr	r0, [sp, #0]
 8022298:	9f08      	ldr	r7, [sp, #32]
 802229a:	321a      	adds	r2, #26
 802229c:	47b8      	blx	r7
 802229e:	3001      	adds	r0, #1
 80222a0:	d0e6      	beq.n	8022270 <_printf_common+0xa8>
 80222a2:	3601      	adds	r6, #1
 80222a4:	e7d1      	b.n	802224a <_printf_common+0x82>
	...

080222a8 <_printf_i>:
 80222a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222aa:	b08b      	sub	sp, #44	@ 0x2c
 80222ac:	9206      	str	r2, [sp, #24]
 80222ae:	000a      	movs	r2, r1
 80222b0:	3243      	adds	r2, #67	@ 0x43
 80222b2:	9307      	str	r3, [sp, #28]
 80222b4:	9005      	str	r0, [sp, #20]
 80222b6:	9203      	str	r2, [sp, #12]
 80222b8:	7e0a      	ldrb	r2, [r1, #24]
 80222ba:	000c      	movs	r4, r1
 80222bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80222be:	2a78      	cmp	r2, #120	@ 0x78
 80222c0:	d809      	bhi.n	80222d6 <_printf_i+0x2e>
 80222c2:	2a62      	cmp	r2, #98	@ 0x62
 80222c4:	d80b      	bhi.n	80222de <_printf_i+0x36>
 80222c6:	2a00      	cmp	r2, #0
 80222c8:	d100      	bne.n	80222cc <_printf_i+0x24>
 80222ca:	e0bc      	b.n	8022446 <_printf_i+0x19e>
 80222cc:	497b      	ldr	r1, [pc, #492]	@ (80224bc <_printf_i+0x214>)
 80222ce:	9104      	str	r1, [sp, #16]
 80222d0:	2a58      	cmp	r2, #88	@ 0x58
 80222d2:	d100      	bne.n	80222d6 <_printf_i+0x2e>
 80222d4:	e090      	b.n	80223f8 <_printf_i+0x150>
 80222d6:	0025      	movs	r5, r4
 80222d8:	3542      	adds	r5, #66	@ 0x42
 80222da:	702a      	strb	r2, [r5, #0]
 80222dc:	e022      	b.n	8022324 <_printf_i+0x7c>
 80222de:	0010      	movs	r0, r2
 80222e0:	3863      	subs	r0, #99	@ 0x63
 80222e2:	2815      	cmp	r0, #21
 80222e4:	d8f7      	bhi.n	80222d6 <_printf_i+0x2e>
 80222e6:	f7dd ff53 	bl	8000190 <__gnu_thumb1_case_shi>
 80222ea:	0016      	.short	0x0016
 80222ec:	fff6001f 	.word	0xfff6001f
 80222f0:	fff6fff6 	.word	0xfff6fff6
 80222f4:	001ffff6 	.word	0x001ffff6
 80222f8:	fff6fff6 	.word	0xfff6fff6
 80222fc:	fff6fff6 	.word	0xfff6fff6
 8022300:	003600a1 	.word	0x003600a1
 8022304:	fff60080 	.word	0xfff60080
 8022308:	00b2fff6 	.word	0x00b2fff6
 802230c:	0036fff6 	.word	0x0036fff6
 8022310:	fff6fff6 	.word	0xfff6fff6
 8022314:	0084      	.short	0x0084
 8022316:	0025      	movs	r5, r4
 8022318:	681a      	ldr	r2, [r3, #0]
 802231a:	3542      	adds	r5, #66	@ 0x42
 802231c:	1d11      	adds	r1, r2, #4
 802231e:	6019      	str	r1, [r3, #0]
 8022320:	6813      	ldr	r3, [r2, #0]
 8022322:	702b      	strb	r3, [r5, #0]
 8022324:	2301      	movs	r3, #1
 8022326:	e0a0      	b.n	802246a <_printf_i+0x1c2>
 8022328:	6818      	ldr	r0, [r3, #0]
 802232a:	6809      	ldr	r1, [r1, #0]
 802232c:	1d02      	adds	r2, r0, #4
 802232e:	060d      	lsls	r5, r1, #24
 8022330:	d50b      	bpl.n	802234a <_printf_i+0xa2>
 8022332:	6806      	ldr	r6, [r0, #0]
 8022334:	601a      	str	r2, [r3, #0]
 8022336:	2e00      	cmp	r6, #0
 8022338:	da03      	bge.n	8022342 <_printf_i+0x9a>
 802233a:	232d      	movs	r3, #45	@ 0x2d
 802233c:	9a03      	ldr	r2, [sp, #12]
 802233e:	4276      	negs	r6, r6
 8022340:	7013      	strb	r3, [r2, #0]
 8022342:	4b5e      	ldr	r3, [pc, #376]	@ (80224bc <_printf_i+0x214>)
 8022344:	270a      	movs	r7, #10
 8022346:	9304      	str	r3, [sp, #16]
 8022348:	e018      	b.n	802237c <_printf_i+0xd4>
 802234a:	6806      	ldr	r6, [r0, #0]
 802234c:	601a      	str	r2, [r3, #0]
 802234e:	0649      	lsls	r1, r1, #25
 8022350:	d5f1      	bpl.n	8022336 <_printf_i+0x8e>
 8022352:	b236      	sxth	r6, r6
 8022354:	e7ef      	b.n	8022336 <_printf_i+0x8e>
 8022356:	6808      	ldr	r0, [r1, #0]
 8022358:	6819      	ldr	r1, [r3, #0]
 802235a:	c940      	ldmia	r1!, {r6}
 802235c:	0605      	lsls	r5, r0, #24
 802235e:	d402      	bmi.n	8022366 <_printf_i+0xbe>
 8022360:	0640      	lsls	r0, r0, #25
 8022362:	d500      	bpl.n	8022366 <_printf_i+0xbe>
 8022364:	b2b6      	uxth	r6, r6
 8022366:	6019      	str	r1, [r3, #0]
 8022368:	4b54      	ldr	r3, [pc, #336]	@ (80224bc <_printf_i+0x214>)
 802236a:	270a      	movs	r7, #10
 802236c:	9304      	str	r3, [sp, #16]
 802236e:	2a6f      	cmp	r2, #111	@ 0x6f
 8022370:	d100      	bne.n	8022374 <_printf_i+0xcc>
 8022372:	3f02      	subs	r7, #2
 8022374:	0023      	movs	r3, r4
 8022376:	2200      	movs	r2, #0
 8022378:	3343      	adds	r3, #67	@ 0x43
 802237a:	701a      	strb	r2, [r3, #0]
 802237c:	6863      	ldr	r3, [r4, #4]
 802237e:	60a3      	str	r3, [r4, #8]
 8022380:	2b00      	cmp	r3, #0
 8022382:	db03      	blt.n	802238c <_printf_i+0xe4>
 8022384:	2104      	movs	r1, #4
 8022386:	6822      	ldr	r2, [r4, #0]
 8022388:	438a      	bics	r2, r1
 802238a:	6022      	str	r2, [r4, #0]
 802238c:	2e00      	cmp	r6, #0
 802238e:	d102      	bne.n	8022396 <_printf_i+0xee>
 8022390:	9d03      	ldr	r5, [sp, #12]
 8022392:	2b00      	cmp	r3, #0
 8022394:	d00c      	beq.n	80223b0 <_printf_i+0x108>
 8022396:	9d03      	ldr	r5, [sp, #12]
 8022398:	0030      	movs	r0, r6
 802239a:	0039      	movs	r1, r7
 802239c:	f7dd ff88 	bl	80002b0 <__aeabi_uidivmod>
 80223a0:	9b04      	ldr	r3, [sp, #16]
 80223a2:	3d01      	subs	r5, #1
 80223a4:	5c5b      	ldrb	r3, [r3, r1]
 80223a6:	702b      	strb	r3, [r5, #0]
 80223a8:	0033      	movs	r3, r6
 80223aa:	0006      	movs	r6, r0
 80223ac:	429f      	cmp	r7, r3
 80223ae:	d9f3      	bls.n	8022398 <_printf_i+0xf0>
 80223b0:	2f08      	cmp	r7, #8
 80223b2:	d109      	bne.n	80223c8 <_printf_i+0x120>
 80223b4:	6823      	ldr	r3, [r4, #0]
 80223b6:	07db      	lsls	r3, r3, #31
 80223b8:	d506      	bpl.n	80223c8 <_printf_i+0x120>
 80223ba:	6862      	ldr	r2, [r4, #4]
 80223bc:	6923      	ldr	r3, [r4, #16]
 80223be:	429a      	cmp	r2, r3
 80223c0:	dc02      	bgt.n	80223c8 <_printf_i+0x120>
 80223c2:	2330      	movs	r3, #48	@ 0x30
 80223c4:	3d01      	subs	r5, #1
 80223c6:	702b      	strb	r3, [r5, #0]
 80223c8:	9b03      	ldr	r3, [sp, #12]
 80223ca:	1b5b      	subs	r3, r3, r5
 80223cc:	6123      	str	r3, [r4, #16]
 80223ce:	9b07      	ldr	r3, [sp, #28]
 80223d0:	0021      	movs	r1, r4
 80223d2:	9300      	str	r3, [sp, #0]
 80223d4:	9805      	ldr	r0, [sp, #20]
 80223d6:	9b06      	ldr	r3, [sp, #24]
 80223d8:	aa09      	add	r2, sp, #36	@ 0x24
 80223da:	f7ff fef5 	bl	80221c8 <_printf_common>
 80223de:	3001      	adds	r0, #1
 80223e0:	d148      	bne.n	8022474 <_printf_i+0x1cc>
 80223e2:	2001      	movs	r0, #1
 80223e4:	4240      	negs	r0, r0
 80223e6:	b00b      	add	sp, #44	@ 0x2c
 80223e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223ea:	2220      	movs	r2, #32
 80223ec:	6809      	ldr	r1, [r1, #0]
 80223ee:	430a      	orrs	r2, r1
 80223f0:	6022      	str	r2, [r4, #0]
 80223f2:	2278      	movs	r2, #120	@ 0x78
 80223f4:	4932      	ldr	r1, [pc, #200]	@ (80224c0 <_printf_i+0x218>)
 80223f6:	9104      	str	r1, [sp, #16]
 80223f8:	0021      	movs	r1, r4
 80223fa:	3145      	adds	r1, #69	@ 0x45
 80223fc:	700a      	strb	r2, [r1, #0]
 80223fe:	6819      	ldr	r1, [r3, #0]
 8022400:	6822      	ldr	r2, [r4, #0]
 8022402:	c940      	ldmia	r1!, {r6}
 8022404:	0610      	lsls	r0, r2, #24
 8022406:	d402      	bmi.n	802240e <_printf_i+0x166>
 8022408:	0650      	lsls	r0, r2, #25
 802240a:	d500      	bpl.n	802240e <_printf_i+0x166>
 802240c:	b2b6      	uxth	r6, r6
 802240e:	6019      	str	r1, [r3, #0]
 8022410:	07d3      	lsls	r3, r2, #31
 8022412:	d502      	bpl.n	802241a <_printf_i+0x172>
 8022414:	2320      	movs	r3, #32
 8022416:	4313      	orrs	r3, r2
 8022418:	6023      	str	r3, [r4, #0]
 802241a:	2e00      	cmp	r6, #0
 802241c:	d001      	beq.n	8022422 <_printf_i+0x17a>
 802241e:	2710      	movs	r7, #16
 8022420:	e7a8      	b.n	8022374 <_printf_i+0xcc>
 8022422:	2220      	movs	r2, #32
 8022424:	6823      	ldr	r3, [r4, #0]
 8022426:	4393      	bics	r3, r2
 8022428:	6023      	str	r3, [r4, #0]
 802242a:	e7f8      	b.n	802241e <_printf_i+0x176>
 802242c:	681a      	ldr	r2, [r3, #0]
 802242e:	680d      	ldr	r5, [r1, #0]
 8022430:	1d10      	adds	r0, r2, #4
 8022432:	6949      	ldr	r1, [r1, #20]
 8022434:	6018      	str	r0, [r3, #0]
 8022436:	6813      	ldr	r3, [r2, #0]
 8022438:	062e      	lsls	r6, r5, #24
 802243a:	d501      	bpl.n	8022440 <_printf_i+0x198>
 802243c:	6019      	str	r1, [r3, #0]
 802243e:	e002      	b.n	8022446 <_printf_i+0x19e>
 8022440:	066d      	lsls	r5, r5, #25
 8022442:	d5fb      	bpl.n	802243c <_printf_i+0x194>
 8022444:	8019      	strh	r1, [r3, #0]
 8022446:	2300      	movs	r3, #0
 8022448:	9d03      	ldr	r5, [sp, #12]
 802244a:	6123      	str	r3, [r4, #16]
 802244c:	e7bf      	b.n	80223ce <_printf_i+0x126>
 802244e:	681a      	ldr	r2, [r3, #0]
 8022450:	1d11      	adds	r1, r2, #4
 8022452:	6019      	str	r1, [r3, #0]
 8022454:	6815      	ldr	r5, [r2, #0]
 8022456:	2100      	movs	r1, #0
 8022458:	0028      	movs	r0, r5
 802245a:	6862      	ldr	r2, [r4, #4]
 802245c:	f000 fb9d 	bl	8022b9a <memchr>
 8022460:	2800      	cmp	r0, #0
 8022462:	d001      	beq.n	8022468 <_printf_i+0x1c0>
 8022464:	1b40      	subs	r0, r0, r5
 8022466:	6060      	str	r0, [r4, #4]
 8022468:	6863      	ldr	r3, [r4, #4]
 802246a:	6123      	str	r3, [r4, #16]
 802246c:	2300      	movs	r3, #0
 802246e:	9a03      	ldr	r2, [sp, #12]
 8022470:	7013      	strb	r3, [r2, #0]
 8022472:	e7ac      	b.n	80223ce <_printf_i+0x126>
 8022474:	002a      	movs	r2, r5
 8022476:	6923      	ldr	r3, [r4, #16]
 8022478:	9906      	ldr	r1, [sp, #24]
 802247a:	9805      	ldr	r0, [sp, #20]
 802247c:	9d07      	ldr	r5, [sp, #28]
 802247e:	47a8      	blx	r5
 8022480:	3001      	adds	r0, #1
 8022482:	d0ae      	beq.n	80223e2 <_printf_i+0x13a>
 8022484:	6823      	ldr	r3, [r4, #0]
 8022486:	079b      	lsls	r3, r3, #30
 8022488:	d415      	bmi.n	80224b6 <_printf_i+0x20e>
 802248a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802248c:	68e0      	ldr	r0, [r4, #12]
 802248e:	4298      	cmp	r0, r3
 8022490:	daa9      	bge.n	80223e6 <_printf_i+0x13e>
 8022492:	0018      	movs	r0, r3
 8022494:	e7a7      	b.n	80223e6 <_printf_i+0x13e>
 8022496:	0022      	movs	r2, r4
 8022498:	2301      	movs	r3, #1
 802249a:	9906      	ldr	r1, [sp, #24]
 802249c:	9805      	ldr	r0, [sp, #20]
 802249e:	9e07      	ldr	r6, [sp, #28]
 80224a0:	3219      	adds	r2, #25
 80224a2:	47b0      	blx	r6
 80224a4:	3001      	adds	r0, #1
 80224a6:	d09c      	beq.n	80223e2 <_printf_i+0x13a>
 80224a8:	3501      	adds	r5, #1
 80224aa:	68e3      	ldr	r3, [r4, #12]
 80224ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80224ae:	1a9b      	subs	r3, r3, r2
 80224b0:	42ab      	cmp	r3, r5
 80224b2:	dcf0      	bgt.n	8022496 <_printf_i+0x1ee>
 80224b4:	e7e9      	b.n	802248a <_printf_i+0x1e2>
 80224b6:	2500      	movs	r5, #0
 80224b8:	e7f7      	b.n	80224aa <_printf_i+0x202>
 80224ba:	46c0      	nop			@ (mov r8, r8)
 80224bc:	08029473 	.word	0x08029473
 80224c0:	08029484 	.word	0x08029484

080224c4 <std>:
 80224c4:	2300      	movs	r3, #0
 80224c6:	b510      	push	{r4, lr}
 80224c8:	0004      	movs	r4, r0
 80224ca:	6003      	str	r3, [r0, #0]
 80224cc:	6043      	str	r3, [r0, #4]
 80224ce:	6083      	str	r3, [r0, #8]
 80224d0:	8181      	strh	r1, [r0, #12]
 80224d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80224d4:	81c2      	strh	r2, [r0, #14]
 80224d6:	6103      	str	r3, [r0, #16]
 80224d8:	6143      	str	r3, [r0, #20]
 80224da:	6183      	str	r3, [r0, #24]
 80224dc:	0019      	movs	r1, r3
 80224de:	2208      	movs	r2, #8
 80224e0:	305c      	adds	r0, #92	@ 0x5c
 80224e2:	f000 fa89 	bl	80229f8 <memset>
 80224e6:	4b0b      	ldr	r3, [pc, #44]	@ (8022514 <std+0x50>)
 80224e8:	6224      	str	r4, [r4, #32]
 80224ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80224ec:	4b0a      	ldr	r3, [pc, #40]	@ (8022518 <std+0x54>)
 80224ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80224f0:	4b0a      	ldr	r3, [pc, #40]	@ (802251c <std+0x58>)
 80224f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80224f4:	4b0a      	ldr	r3, [pc, #40]	@ (8022520 <std+0x5c>)
 80224f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80224f8:	4b0a      	ldr	r3, [pc, #40]	@ (8022524 <std+0x60>)
 80224fa:	429c      	cmp	r4, r3
 80224fc:	d005      	beq.n	802250a <std+0x46>
 80224fe:	4b0a      	ldr	r3, [pc, #40]	@ (8022528 <std+0x64>)
 8022500:	429c      	cmp	r4, r3
 8022502:	d002      	beq.n	802250a <std+0x46>
 8022504:	4b09      	ldr	r3, [pc, #36]	@ (802252c <std+0x68>)
 8022506:	429c      	cmp	r4, r3
 8022508:	d103      	bne.n	8022512 <std+0x4e>
 802250a:	0020      	movs	r0, r4
 802250c:	3058      	adds	r0, #88	@ 0x58
 802250e:	f000 fb41 	bl	8022b94 <__retarget_lock_init_recursive>
 8022512:	bd10      	pop	{r4, pc}
 8022514:	0802276d 	.word	0x0802276d
 8022518:	08022795 	.word	0x08022795
 802251c:	080227cd 	.word	0x080227cd
 8022520:	080227f9 	.word	0x080227f9
 8022524:	20003450 	.word	0x20003450
 8022528:	200034b8 	.word	0x200034b8
 802252c:	20003520 	.word	0x20003520

08022530 <stdio_exit_handler>:
 8022530:	b510      	push	{r4, lr}
 8022532:	4a03      	ldr	r2, [pc, #12]	@ (8022540 <stdio_exit_handler+0x10>)
 8022534:	4903      	ldr	r1, [pc, #12]	@ (8022544 <stdio_exit_handler+0x14>)
 8022536:	4804      	ldr	r0, [pc, #16]	@ (8022548 <stdio_exit_handler+0x18>)
 8022538:	f000 f86c 	bl	8022614 <_fwalk_sglue>
 802253c:	bd10      	pop	{r4, pc}
 802253e:	46c0      	nop			@ (mov r8, r8)
 8022540:	20000264 	.word	0x20000264
 8022544:	080251b9 	.word	0x080251b9
 8022548:	200003e0 	.word	0x200003e0

0802254c <cleanup_stdio>:
 802254c:	6841      	ldr	r1, [r0, #4]
 802254e:	4b0b      	ldr	r3, [pc, #44]	@ (802257c <cleanup_stdio+0x30>)
 8022550:	b510      	push	{r4, lr}
 8022552:	0004      	movs	r4, r0
 8022554:	4299      	cmp	r1, r3
 8022556:	d001      	beq.n	802255c <cleanup_stdio+0x10>
 8022558:	f002 fe2e 	bl	80251b8 <_fflush_r>
 802255c:	68a1      	ldr	r1, [r4, #8]
 802255e:	4b08      	ldr	r3, [pc, #32]	@ (8022580 <cleanup_stdio+0x34>)
 8022560:	4299      	cmp	r1, r3
 8022562:	d002      	beq.n	802256a <cleanup_stdio+0x1e>
 8022564:	0020      	movs	r0, r4
 8022566:	f002 fe27 	bl	80251b8 <_fflush_r>
 802256a:	68e1      	ldr	r1, [r4, #12]
 802256c:	4b05      	ldr	r3, [pc, #20]	@ (8022584 <cleanup_stdio+0x38>)
 802256e:	4299      	cmp	r1, r3
 8022570:	d002      	beq.n	8022578 <cleanup_stdio+0x2c>
 8022572:	0020      	movs	r0, r4
 8022574:	f002 fe20 	bl	80251b8 <_fflush_r>
 8022578:	bd10      	pop	{r4, pc}
 802257a:	46c0      	nop			@ (mov r8, r8)
 802257c:	20003450 	.word	0x20003450
 8022580:	200034b8 	.word	0x200034b8
 8022584:	20003520 	.word	0x20003520

08022588 <global_stdio_init.part.0>:
 8022588:	b510      	push	{r4, lr}
 802258a:	4b09      	ldr	r3, [pc, #36]	@ (80225b0 <global_stdio_init.part.0+0x28>)
 802258c:	4a09      	ldr	r2, [pc, #36]	@ (80225b4 <global_stdio_init.part.0+0x2c>)
 802258e:	2104      	movs	r1, #4
 8022590:	601a      	str	r2, [r3, #0]
 8022592:	4809      	ldr	r0, [pc, #36]	@ (80225b8 <global_stdio_init.part.0+0x30>)
 8022594:	2200      	movs	r2, #0
 8022596:	f7ff ff95 	bl	80224c4 <std>
 802259a:	2201      	movs	r2, #1
 802259c:	2109      	movs	r1, #9
 802259e:	4807      	ldr	r0, [pc, #28]	@ (80225bc <global_stdio_init.part.0+0x34>)
 80225a0:	f7ff ff90 	bl	80224c4 <std>
 80225a4:	2202      	movs	r2, #2
 80225a6:	2112      	movs	r1, #18
 80225a8:	4805      	ldr	r0, [pc, #20]	@ (80225c0 <global_stdio_init.part.0+0x38>)
 80225aa:	f7ff ff8b 	bl	80224c4 <std>
 80225ae:	bd10      	pop	{r4, pc}
 80225b0:	20003588 	.word	0x20003588
 80225b4:	08022531 	.word	0x08022531
 80225b8:	20003450 	.word	0x20003450
 80225bc:	200034b8 	.word	0x200034b8
 80225c0:	20003520 	.word	0x20003520

080225c4 <__sfp_lock_acquire>:
 80225c4:	b510      	push	{r4, lr}
 80225c6:	4802      	ldr	r0, [pc, #8]	@ (80225d0 <__sfp_lock_acquire+0xc>)
 80225c8:	f000 fae5 	bl	8022b96 <__retarget_lock_acquire_recursive>
 80225cc:	bd10      	pop	{r4, pc}
 80225ce:	46c0      	nop			@ (mov r8, r8)
 80225d0:	20003591 	.word	0x20003591

080225d4 <__sfp_lock_release>:
 80225d4:	b510      	push	{r4, lr}
 80225d6:	4802      	ldr	r0, [pc, #8]	@ (80225e0 <__sfp_lock_release+0xc>)
 80225d8:	f000 fade 	bl	8022b98 <__retarget_lock_release_recursive>
 80225dc:	bd10      	pop	{r4, pc}
 80225de:	46c0      	nop			@ (mov r8, r8)
 80225e0:	20003591 	.word	0x20003591

080225e4 <__sinit>:
 80225e4:	b510      	push	{r4, lr}
 80225e6:	0004      	movs	r4, r0
 80225e8:	f7ff ffec 	bl	80225c4 <__sfp_lock_acquire>
 80225ec:	6a23      	ldr	r3, [r4, #32]
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	d002      	beq.n	80225f8 <__sinit+0x14>
 80225f2:	f7ff ffef 	bl	80225d4 <__sfp_lock_release>
 80225f6:	bd10      	pop	{r4, pc}
 80225f8:	4b04      	ldr	r3, [pc, #16]	@ (802260c <__sinit+0x28>)
 80225fa:	6223      	str	r3, [r4, #32]
 80225fc:	4b04      	ldr	r3, [pc, #16]	@ (8022610 <__sinit+0x2c>)
 80225fe:	681b      	ldr	r3, [r3, #0]
 8022600:	2b00      	cmp	r3, #0
 8022602:	d1f6      	bne.n	80225f2 <__sinit+0xe>
 8022604:	f7ff ffc0 	bl	8022588 <global_stdio_init.part.0>
 8022608:	e7f3      	b.n	80225f2 <__sinit+0xe>
 802260a:	46c0      	nop			@ (mov r8, r8)
 802260c:	0802254d 	.word	0x0802254d
 8022610:	20003588 	.word	0x20003588

08022614 <_fwalk_sglue>:
 8022614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022616:	0014      	movs	r4, r2
 8022618:	2600      	movs	r6, #0
 802261a:	9000      	str	r0, [sp, #0]
 802261c:	9101      	str	r1, [sp, #4]
 802261e:	68a5      	ldr	r5, [r4, #8]
 8022620:	6867      	ldr	r7, [r4, #4]
 8022622:	3f01      	subs	r7, #1
 8022624:	d504      	bpl.n	8022630 <_fwalk_sglue+0x1c>
 8022626:	6824      	ldr	r4, [r4, #0]
 8022628:	2c00      	cmp	r4, #0
 802262a:	d1f8      	bne.n	802261e <_fwalk_sglue+0xa>
 802262c:	0030      	movs	r0, r6
 802262e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022630:	89ab      	ldrh	r3, [r5, #12]
 8022632:	2b01      	cmp	r3, #1
 8022634:	d908      	bls.n	8022648 <_fwalk_sglue+0x34>
 8022636:	220e      	movs	r2, #14
 8022638:	5eab      	ldrsh	r3, [r5, r2]
 802263a:	3301      	adds	r3, #1
 802263c:	d004      	beq.n	8022648 <_fwalk_sglue+0x34>
 802263e:	0029      	movs	r1, r5
 8022640:	9800      	ldr	r0, [sp, #0]
 8022642:	9b01      	ldr	r3, [sp, #4]
 8022644:	4798      	blx	r3
 8022646:	4306      	orrs	r6, r0
 8022648:	3568      	adds	r5, #104	@ 0x68
 802264a:	e7ea      	b.n	8022622 <_fwalk_sglue+0xe>

0802264c <iprintf>:
 802264c:	b40f      	push	{r0, r1, r2, r3}
 802264e:	b507      	push	{r0, r1, r2, lr}
 8022650:	4905      	ldr	r1, [pc, #20]	@ (8022668 <iprintf+0x1c>)
 8022652:	ab04      	add	r3, sp, #16
 8022654:	6808      	ldr	r0, [r1, #0]
 8022656:	cb04      	ldmia	r3!, {r2}
 8022658:	6881      	ldr	r1, [r0, #8]
 802265a:	9301      	str	r3, [sp, #4]
 802265c:	f002 fc0a 	bl	8024e74 <_vfiprintf_r>
 8022660:	b003      	add	sp, #12
 8022662:	bc08      	pop	{r3}
 8022664:	b004      	add	sp, #16
 8022666:	4718      	bx	r3
 8022668:	200003dc 	.word	0x200003dc

0802266c <_puts_r>:
 802266c:	6a03      	ldr	r3, [r0, #32]
 802266e:	b570      	push	{r4, r5, r6, lr}
 8022670:	0005      	movs	r5, r0
 8022672:	000e      	movs	r6, r1
 8022674:	6884      	ldr	r4, [r0, #8]
 8022676:	2b00      	cmp	r3, #0
 8022678:	d101      	bne.n	802267e <_puts_r+0x12>
 802267a:	f7ff ffb3 	bl	80225e4 <__sinit>
 802267e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022680:	07db      	lsls	r3, r3, #31
 8022682:	d405      	bmi.n	8022690 <_puts_r+0x24>
 8022684:	89a3      	ldrh	r3, [r4, #12]
 8022686:	059b      	lsls	r3, r3, #22
 8022688:	d402      	bmi.n	8022690 <_puts_r+0x24>
 802268a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802268c:	f000 fa83 	bl	8022b96 <__retarget_lock_acquire_recursive>
 8022690:	89a3      	ldrh	r3, [r4, #12]
 8022692:	071b      	lsls	r3, r3, #28
 8022694:	d502      	bpl.n	802269c <_puts_r+0x30>
 8022696:	6923      	ldr	r3, [r4, #16]
 8022698:	2b00      	cmp	r3, #0
 802269a:	d11f      	bne.n	80226dc <_puts_r+0x70>
 802269c:	0021      	movs	r1, r4
 802269e:	0028      	movs	r0, r5
 80226a0:	f000 f94c 	bl	802293c <__swsetup_r>
 80226a4:	2800      	cmp	r0, #0
 80226a6:	d019      	beq.n	80226dc <_puts_r+0x70>
 80226a8:	2501      	movs	r5, #1
 80226aa:	426d      	negs	r5, r5
 80226ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80226ae:	07db      	lsls	r3, r3, #31
 80226b0:	d405      	bmi.n	80226be <_puts_r+0x52>
 80226b2:	89a3      	ldrh	r3, [r4, #12]
 80226b4:	059b      	lsls	r3, r3, #22
 80226b6:	d402      	bmi.n	80226be <_puts_r+0x52>
 80226b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80226ba:	f000 fa6d 	bl	8022b98 <__retarget_lock_release_recursive>
 80226be:	0028      	movs	r0, r5
 80226c0:	bd70      	pop	{r4, r5, r6, pc}
 80226c2:	3601      	adds	r6, #1
 80226c4:	60a3      	str	r3, [r4, #8]
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	da04      	bge.n	80226d4 <_puts_r+0x68>
 80226ca:	69a2      	ldr	r2, [r4, #24]
 80226cc:	429a      	cmp	r2, r3
 80226ce:	dc16      	bgt.n	80226fe <_puts_r+0x92>
 80226d0:	290a      	cmp	r1, #10
 80226d2:	d014      	beq.n	80226fe <_puts_r+0x92>
 80226d4:	6823      	ldr	r3, [r4, #0]
 80226d6:	1c5a      	adds	r2, r3, #1
 80226d8:	6022      	str	r2, [r4, #0]
 80226da:	7019      	strb	r1, [r3, #0]
 80226dc:	68a3      	ldr	r3, [r4, #8]
 80226de:	7831      	ldrb	r1, [r6, #0]
 80226e0:	3b01      	subs	r3, #1
 80226e2:	2900      	cmp	r1, #0
 80226e4:	d1ed      	bne.n	80226c2 <_puts_r+0x56>
 80226e6:	60a3      	str	r3, [r4, #8]
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	da0f      	bge.n	802270c <_puts_r+0xa0>
 80226ec:	0022      	movs	r2, r4
 80226ee:	0028      	movs	r0, r5
 80226f0:	310a      	adds	r1, #10
 80226f2:	f000 f8e1 	bl	80228b8 <__swbuf_r>
 80226f6:	3001      	adds	r0, #1
 80226f8:	d0d6      	beq.n	80226a8 <_puts_r+0x3c>
 80226fa:	250a      	movs	r5, #10
 80226fc:	e7d6      	b.n	80226ac <_puts_r+0x40>
 80226fe:	0022      	movs	r2, r4
 8022700:	0028      	movs	r0, r5
 8022702:	f000 f8d9 	bl	80228b8 <__swbuf_r>
 8022706:	3001      	adds	r0, #1
 8022708:	d1e8      	bne.n	80226dc <_puts_r+0x70>
 802270a:	e7cd      	b.n	80226a8 <_puts_r+0x3c>
 802270c:	6823      	ldr	r3, [r4, #0]
 802270e:	1c5a      	adds	r2, r3, #1
 8022710:	6022      	str	r2, [r4, #0]
 8022712:	220a      	movs	r2, #10
 8022714:	701a      	strb	r2, [r3, #0]
 8022716:	e7f0      	b.n	80226fa <_puts_r+0x8e>

08022718 <puts>:
 8022718:	b510      	push	{r4, lr}
 802271a:	4b03      	ldr	r3, [pc, #12]	@ (8022728 <puts+0x10>)
 802271c:	0001      	movs	r1, r0
 802271e:	6818      	ldr	r0, [r3, #0]
 8022720:	f7ff ffa4 	bl	802266c <_puts_r>
 8022724:	bd10      	pop	{r4, pc}
 8022726:	46c0      	nop			@ (mov r8, r8)
 8022728:	200003dc 	.word	0x200003dc

0802272c <siprintf>:
 802272c:	b40e      	push	{r1, r2, r3}
 802272e:	b500      	push	{lr}
 8022730:	490b      	ldr	r1, [pc, #44]	@ (8022760 <siprintf+0x34>)
 8022732:	b09c      	sub	sp, #112	@ 0x70
 8022734:	ab1d      	add	r3, sp, #116	@ 0x74
 8022736:	9002      	str	r0, [sp, #8]
 8022738:	9006      	str	r0, [sp, #24]
 802273a:	9107      	str	r1, [sp, #28]
 802273c:	9104      	str	r1, [sp, #16]
 802273e:	4809      	ldr	r0, [pc, #36]	@ (8022764 <siprintf+0x38>)
 8022740:	4909      	ldr	r1, [pc, #36]	@ (8022768 <siprintf+0x3c>)
 8022742:	cb04      	ldmia	r3!, {r2}
 8022744:	9105      	str	r1, [sp, #20]
 8022746:	6800      	ldr	r0, [r0, #0]
 8022748:	a902      	add	r1, sp, #8
 802274a:	9301      	str	r3, [sp, #4]
 802274c:	f002 fa6c 	bl	8024c28 <_svfiprintf_r>
 8022750:	2200      	movs	r2, #0
 8022752:	9b02      	ldr	r3, [sp, #8]
 8022754:	701a      	strb	r2, [r3, #0]
 8022756:	b01c      	add	sp, #112	@ 0x70
 8022758:	bc08      	pop	{r3}
 802275a:	b003      	add	sp, #12
 802275c:	4718      	bx	r3
 802275e:	46c0      	nop			@ (mov r8, r8)
 8022760:	7fffffff 	.word	0x7fffffff
 8022764:	200003dc 	.word	0x200003dc
 8022768:	ffff0208 	.word	0xffff0208

0802276c <__sread>:
 802276c:	b570      	push	{r4, r5, r6, lr}
 802276e:	000c      	movs	r4, r1
 8022770:	250e      	movs	r5, #14
 8022772:	5f49      	ldrsh	r1, [r1, r5]
 8022774:	f000 f9bc 	bl	8022af0 <_read_r>
 8022778:	2800      	cmp	r0, #0
 802277a:	db03      	blt.n	8022784 <__sread+0x18>
 802277c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802277e:	181b      	adds	r3, r3, r0
 8022780:	6563      	str	r3, [r4, #84]	@ 0x54
 8022782:	bd70      	pop	{r4, r5, r6, pc}
 8022784:	89a3      	ldrh	r3, [r4, #12]
 8022786:	4a02      	ldr	r2, [pc, #8]	@ (8022790 <__sread+0x24>)
 8022788:	4013      	ands	r3, r2
 802278a:	81a3      	strh	r3, [r4, #12]
 802278c:	e7f9      	b.n	8022782 <__sread+0x16>
 802278e:	46c0      	nop			@ (mov r8, r8)
 8022790:	ffffefff 	.word	0xffffefff

08022794 <__swrite>:
 8022794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022796:	001f      	movs	r7, r3
 8022798:	898b      	ldrh	r3, [r1, #12]
 802279a:	0005      	movs	r5, r0
 802279c:	000c      	movs	r4, r1
 802279e:	0016      	movs	r6, r2
 80227a0:	05db      	lsls	r3, r3, #23
 80227a2:	d505      	bpl.n	80227b0 <__swrite+0x1c>
 80227a4:	230e      	movs	r3, #14
 80227a6:	5ec9      	ldrsh	r1, [r1, r3]
 80227a8:	2200      	movs	r2, #0
 80227aa:	2302      	movs	r3, #2
 80227ac:	f000 f98c 	bl	8022ac8 <_lseek_r>
 80227b0:	89a3      	ldrh	r3, [r4, #12]
 80227b2:	4a05      	ldr	r2, [pc, #20]	@ (80227c8 <__swrite+0x34>)
 80227b4:	0028      	movs	r0, r5
 80227b6:	4013      	ands	r3, r2
 80227b8:	81a3      	strh	r3, [r4, #12]
 80227ba:	0032      	movs	r2, r6
 80227bc:	230e      	movs	r3, #14
 80227be:	5ee1      	ldrsh	r1, [r4, r3]
 80227c0:	003b      	movs	r3, r7
 80227c2:	f000 f9a9 	bl	8022b18 <_write_r>
 80227c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80227c8:	ffffefff 	.word	0xffffefff

080227cc <__sseek>:
 80227cc:	b570      	push	{r4, r5, r6, lr}
 80227ce:	000c      	movs	r4, r1
 80227d0:	250e      	movs	r5, #14
 80227d2:	5f49      	ldrsh	r1, [r1, r5]
 80227d4:	f000 f978 	bl	8022ac8 <_lseek_r>
 80227d8:	89a3      	ldrh	r3, [r4, #12]
 80227da:	1c42      	adds	r2, r0, #1
 80227dc:	d103      	bne.n	80227e6 <__sseek+0x1a>
 80227de:	4a05      	ldr	r2, [pc, #20]	@ (80227f4 <__sseek+0x28>)
 80227e0:	4013      	ands	r3, r2
 80227e2:	81a3      	strh	r3, [r4, #12]
 80227e4:	bd70      	pop	{r4, r5, r6, pc}
 80227e6:	2280      	movs	r2, #128	@ 0x80
 80227e8:	0152      	lsls	r2, r2, #5
 80227ea:	4313      	orrs	r3, r2
 80227ec:	81a3      	strh	r3, [r4, #12]
 80227ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80227f0:	e7f8      	b.n	80227e4 <__sseek+0x18>
 80227f2:	46c0      	nop			@ (mov r8, r8)
 80227f4:	ffffefff 	.word	0xffffefff

080227f8 <__sclose>:
 80227f8:	b510      	push	{r4, lr}
 80227fa:	230e      	movs	r3, #14
 80227fc:	5ec9      	ldrsh	r1, [r1, r3]
 80227fe:	f000 f951 	bl	8022aa4 <_close_r>
 8022802:	bd10      	pop	{r4, pc}

08022804 <_vsniprintf_r>:
 8022804:	b530      	push	{r4, r5, lr}
 8022806:	0014      	movs	r4, r2
 8022808:	0005      	movs	r5, r0
 802280a:	001a      	movs	r2, r3
 802280c:	b09b      	sub	sp, #108	@ 0x6c
 802280e:	2c00      	cmp	r4, #0
 8022810:	da05      	bge.n	802281e <_vsniprintf_r+0x1a>
 8022812:	238b      	movs	r3, #139	@ 0x8b
 8022814:	6003      	str	r3, [r0, #0]
 8022816:	2001      	movs	r0, #1
 8022818:	4240      	negs	r0, r0
 802281a:	b01b      	add	sp, #108	@ 0x6c
 802281c:	bd30      	pop	{r4, r5, pc}
 802281e:	2382      	movs	r3, #130	@ 0x82
 8022820:	4668      	mov	r0, sp
 8022822:	009b      	lsls	r3, r3, #2
 8022824:	8183      	strh	r3, [r0, #12]
 8022826:	2300      	movs	r3, #0
 8022828:	9100      	str	r1, [sp, #0]
 802282a:	9104      	str	r1, [sp, #16]
 802282c:	429c      	cmp	r4, r3
 802282e:	d000      	beq.n	8022832 <_vsniprintf_r+0x2e>
 8022830:	1e63      	subs	r3, r4, #1
 8022832:	9302      	str	r3, [sp, #8]
 8022834:	9305      	str	r3, [sp, #20]
 8022836:	2301      	movs	r3, #1
 8022838:	4669      	mov	r1, sp
 802283a:	425b      	negs	r3, r3
 802283c:	81cb      	strh	r3, [r1, #14]
 802283e:	0028      	movs	r0, r5
 8022840:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022842:	f002 f9f1 	bl	8024c28 <_svfiprintf_r>
 8022846:	1c43      	adds	r3, r0, #1
 8022848:	da01      	bge.n	802284e <_vsniprintf_r+0x4a>
 802284a:	238b      	movs	r3, #139	@ 0x8b
 802284c:	602b      	str	r3, [r5, #0]
 802284e:	2c00      	cmp	r4, #0
 8022850:	d0e3      	beq.n	802281a <_vsniprintf_r+0x16>
 8022852:	2200      	movs	r2, #0
 8022854:	9b00      	ldr	r3, [sp, #0]
 8022856:	701a      	strb	r2, [r3, #0]
 8022858:	e7df      	b.n	802281a <_vsniprintf_r+0x16>
	...

0802285c <vsniprintf>:
 802285c:	b513      	push	{r0, r1, r4, lr}
 802285e:	4c04      	ldr	r4, [pc, #16]	@ (8022870 <vsniprintf+0x14>)
 8022860:	9300      	str	r3, [sp, #0]
 8022862:	0013      	movs	r3, r2
 8022864:	000a      	movs	r2, r1
 8022866:	0001      	movs	r1, r0
 8022868:	6820      	ldr	r0, [r4, #0]
 802286a:	f7ff ffcb 	bl	8022804 <_vsniprintf_r>
 802286e:	bd16      	pop	{r1, r2, r4, pc}
 8022870:	200003dc 	.word	0x200003dc

08022874 <_vsiprintf_r>:
 8022874:	b500      	push	{lr}
 8022876:	b09b      	sub	sp, #108	@ 0x6c
 8022878:	9100      	str	r1, [sp, #0]
 802287a:	9104      	str	r1, [sp, #16]
 802287c:	4906      	ldr	r1, [pc, #24]	@ (8022898 <_vsiprintf_r+0x24>)
 802287e:	9105      	str	r1, [sp, #20]
 8022880:	9102      	str	r1, [sp, #8]
 8022882:	4906      	ldr	r1, [pc, #24]	@ (802289c <_vsiprintf_r+0x28>)
 8022884:	9103      	str	r1, [sp, #12]
 8022886:	4669      	mov	r1, sp
 8022888:	f002 f9ce 	bl	8024c28 <_svfiprintf_r>
 802288c:	2200      	movs	r2, #0
 802288e:	9b00      	ldr	r3, [sp, #0]
 8022890:	701a      	strb	r2, [r3, #0]
 8022892:	b01b      	add	sp, #108	@ 0x6c
 8022894:	bd00      	pop	{pc}
 8022896:	46c0      	nop			@ (mov r8, r8)
 8022898:	7fffffff 	.word	0x7fffffff
 802289c:	ffff0208 	.word	0xffff0208

080228a0 <vsiprintf>:
 80228a0:	b510      	push	{r4, lr}
 80228a2:	4c04      	ldr	r4, [pc, #16]	@ (80228b4 <vsiprintf+0x14>)
 80228a4:	0013      	movs	r3, r2
 80228a6:	000a      	movs	r2, r1
 80228a8:	0001      	movs	r1, r0
 80228aa:	6820      	ldr	r0, [r4, #0]
 80228ac:	f7ff ffe2 	bl	8022874 <_vsiprintf_r>
 80228b0:	bd10      	pop	{r4, pc}
 80228b2:	46c0      	nop			@ (mov r8, r8)
 80228b4:	200003dc 	.word	0x200003dc

080228b8 <__swbuf_r>:
 80228b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228ba:	0006      	movs	r6, r0
 80228bc:	000d      	movs	r5, r1
 80228be:	0014      	movs	r4, r2
 80228c0:	2800      	cmp	r0, #0
 80228c2:	d004      	beq.n	80228ce <__swbuf_r+0x16>
 80228c4:	6a03      	ldr	r3, [r0, #32]
 80228c6:	2b00      	cmp	r3, #0
 80228c8:	d101      	bne.n	80228ce <__swbuf_r+0x16>
 80228ca:	f7ff fe8b 	bl	80225e4 <__sinit>
 80228ce:	69a3      	ldr	r3, [r4, #24]
 80228d0:	60a3      	str	r3, [r4, #8]
 80228d2:	89a3      	ldrh	r3, [r4, #12]
 80228d4:	071b      	lsls	r3, r3, #28
 80228d6:	d502      	bpl.n	80228de <__swbuf_r+0x26>
 80228d8:	6923      	ldr	r3, [r4, #16]
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d109      	bne.n	80228f2 <__swbuf_r+0x3a>
 80228de:	0021      	movs	r1, r4
 80228e0:	0030      	movs	r0, r6
 80228e2:	f000 f82b 	bl	802293c <__swsetup_r>
 80228e6:	2800      	cmp	r0, #0
 80228e8:	d003      	beq.n	80228f2 <__swbuf_r+0x3a>
 80228ea:	2501      	movs	r5, #1
 80228ec:	426d      	negs	r5, r5
 80228ee:	0028      	movs	r0, r5
 80228f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80228f2:	6923      	ldr	r3, [r4, #16]
 80228f4:	6820      	ldr	r0, [r4, #0]
 80228f6:	b2ef      	uxtb	r7, r5
 80228f8:	1ac0      	subs	r0, r0, r3
 80228fa:	6963      	ldr	r3, [r4, #20]
 80228fc:	b2ed      	uxtb	r5, r5
 80228fe:	4283      	cmp	r3, r0
 8022900:	dc05      	bgt.n	802290e <__swbuf_r+0x56>
 8022902:	0021      	movs	r1, r4
 8022904:	0030      	movs	r0, r6
 8022906:	f002 fc57 	bl	80251b8 <_fflush_r>
 802290a:	2800      	cmp	r0, #0
 802290c:	d1ed      	bne.n	80228ea <__swbuf_r+0x32>
 802290e:	68a3      	ldr	r3, [r4, #8]
 8022910:	3001      	adds	r0, #1
 8022912:	3b01      	subs	r3, #1
 8022914:	60a3      	str	r3, [r4, #8]
 8022916:	6823      	ldr	r3, [r4, #0]
 8022918:	1c5a      	adds	r2, r3, #1
 802291a:	6022      	str	r2, [r4, #0]
 802291c:	701f      	strb	r7, [r3, #0]
 802291e:	6963      	ldr	r3, [r4, #20]
 8022920:	4283      	cmp	r3, r0
 8022922:	d004      	beq.n	802292e <__swbuf_r+0x76>
 8022924:	89a3      	ldrh	r3, [r4, #12]
 8022926:	07db      	lsls	r3, r3, #31
 8022928:	d5e1      	bpl.n	80228ee <__swbuf_r+0x36>
 802292a:	2d0a      	cmp	r5, #10
 802292c:	d1df      	bne.n	80228ee <__swbuf_r+0x36>
 802292e:	0021      	movs	r1, r4
 8022930:	0030      	movs	r0, r6
 8022932:	f002 fc41 	bl	80251b8 <_fflush_r>
 8022936:	2800      	cmp	r0, #0
 8022938:	d0d9      	beq.n	80228ee <__swbuf_r+0x36>
 802293a:	e7d6      	b.n	80228ea <__swbuf_r+0x32>

0802293c <__swsetup_r>:
 802293c:	4b2d      	ldr	r3, [pc, #180]	@ (80229f4 <__swsetup_r+0xb8>)
 802293e:	b570      	push	{r4, r5, r6, lr}
 8022940:	0005      	movs	r5, r0
 8022942:	6818      	ldr	r0, [r3, #0]
 8022944:	000c      	movs	r4, r1
 8022946:	2800      	cmp	r0, #0
 8022948:	d004      	beq.n	8022954 <__swsetup_r+0x18>
 802294a:	6a03      	ldr	r3, [r0, #32]
 802294c:	2b00      	cmp	r3, #0
 802294e:	d101      	bne.n	8022954 <__swsetup_r+0x18>
 8022950:	f7ff fe48 	bl	80225e4 <__sinit>
 8022954:	230c      	movs	r3, #12
 8022956:	5ee2      	ldrsh	r2, [r4, r3]
 8022958:	0713      	lsls	r3, r2, #28
 802295a:	d423      	bmi.n	80229a4 <__swsetup_r+0x68>
 802295c:	06d3      	lsls	r3, r2, #27
 802295e:	d407      	bmi.n	8022970 <__swsetup_r+0x34>
 8022960:	2309      	movs	r3, #9
 8022962:	602b      	str	r3, [r5, #0]
 8022964:	2340      	movs	r3, #64	@ 0x40
 8022966:	2001      	movs	r0, #1
 8022968:	4313      	orrs	r3, r2
 802296a:	81a3      	strh	r3, [r4, #12]
 802296c:	4240      	negs	r0, r0
 802296e:	e03a      	b.n	80229e6 <__swsetup_r+0xaa>
 8022970:	0752      	lsls	r2, r2, #29
 8022972:	d513      	bpl.n	802299c <__swsetup_r+0x60>
 8022974:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022976:	2900      	cmp	r1, #0
 8022978:	d008      	beq.n	802298c <__swsetup_r+0x50>
 802297a:	0023      	movs	r3, r4
 802297c:	3344      	adds	r3, #68	@ 0x44
 802297e:	4299      	cmp	r1, r3
 8022980:	d002      	beq.n	8022988 <__swsetup_r+0x4c>
 8022982:	0028      	movs	r0, r5
 8022984:	f000 ffa6 	bl	80238d4 <_free_r>
 8022988:	2300      	movs	r3, #0
 802298a:	6363      	str	r3, [r4, #52]	@ 0x34
 802298c:	2224      	movs	r2, #36	@ 0x24
 802298e:	89a3      	ldrh	r3, [r4, #12]
 8022990:	4393      	bics	r3, r2
 8022992:	81a3      	strh	r3, [r4, #12]
 8022994:	2300      	movs	r3, #0
 8022996:	6063      	str	r3, [r4, #4]
 8022998:	6923      	ldr	r3, [r4, #16]
 802299a:	6023      	str	r3, [r4, #0]
 802299c:	2308      	movs	r3, #8
 802299e:	89a2      	ldrh	r2, [r4, #12]
 80229a0:	4313      	orrs	r3, r2
 80229a2:	81a3      	strh	r3, [r4, #12]
 80229a4:	6923      	ldr	r3, [r4, #16]
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d10b      	bne.n	80229c2 <__swsetup_r+0x86>
 80229aa:	21a0      	movs	r1, #160	@ 0xa0
 80229ac:	2280      	movs	r2, #128	@ 0x80
 80229ae:	89a3      	ldrh	r3, [r4, #12]
 80229b0:	0089      	lsls	r1, r1, #2
 80229b2:	0092      	lsls	r2, r2, #2
 80229b4:	400b      	ands	r3, r1
 80229b6:	4293      	cmp	r3, r2
 80229b8:	d003      	beq.n	80229c2 <__swsetup_r+0x86>
 80229ba:	0021      	movs	r1, r4
 80229bc:	0028      	movs	r0, r5
 80229be:	f002 fc51 	bl	8025264 <__smakebuf_r>
 80229c2:	230c      	movs	r3, #12
 80229c4:	5ee2      	ldrsh	r2, [r4, r3]
 80229c6:	2101      	movs	r1, #1
 80229c8:	0013      	movs	r3, r2
 80229ca:	400b      	ands	r3, r1
 80229cc:	420a      	tst	r2, r1
 80229ce:	d00b      	beq.n	80229e8 <__swsetup_r+0xac>
 80229d0:	2300      	movs	r3, #0
 80229d2:	60a3      	str	r3, [r4, #8]
 80229d4:	6963      	ldr	r3, [r4, #20]
 80229d6:	425b      	negs	r3, r3
 80229d8:	61a3      	str	r3, [r4, #24]
 80229da:	2000      	movs	r0, #0
 80229dc:	6923      	ldr	r3, [r4, #16]
 80229de:	4283      	cmp	r3, r0
 80229e0:	d101      	bne.n	80229e6 <__swsetup_r+0xaa>
 80229e2:	0613      	lsls	r3, r2, #24
 80229e4:	d4be      	bmi.n	8022964 <__swsetup_r+0x28>
 80229e6:	bd70      	pop	{r4, r5, r6, pc}
 80229e8:	0791      	lsls	r1, r2, #30
 80229ea:	d400      	bmi.n	80229ee <__swsetup_r+0xb2>
 80229ec:	6963      	ldr	r3, [r4, #20]
 80229ee:	60a3      	str	r3, [r4, #8]
 80229f0:	e7f3      	b.n	80229da <__swsetup_r+0x9e>
 80229f2:	46c0      	nop			@ (mov r8, r8)
 80229f4:	200003dc 	.word	0x200003dc

080229f8 <memset>:
 80229f8:	0003      	movs	r3, r0
 80229fa:	1882      	adds	r2, r0, r2
 80229fc:	4293      	cmp	r3, r2
 80229fe:	d100      	bne.n	8022a02 <memset+0xa>
 8022a00:	4770      	bx	lr
 8022a02:	7019      	strb	r1, [r3, #0]
 8022a04:	3301      	adds	r3, #1
 8022a06:	e7f9      	b.n	80229fc <memset+0x4>

08022a08 <strchr>:
 8022a08:	b2c9      	uxtb	r1, r1
 8022a0a:	7803      	ldrb	r3, [r0, #0]
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d004      	beq.n	8022a1a <strchr+0x12>
 8022a10:	428b      	cmp	r3, r1
 8022a12:	d100      	bne.n	8022a16 <strchr+0xe>
 8022a14:	4770      	bx	lr
 8022a16:	3001      	adds	r0, #1
 8022a18:	e7f7      	b.n	8022a0a <strchr+0x2>
 8022a1a:	424b      	negs	r3, r1
 8022a1c:	4159      	adcs	r1, r3
 8022a1e:	4249      	negs	r1, r1
 8022a20:	4008      	ands	r0, r1
 8022a22:	e7f7      	b.n	8022a14 <strchr+0xc>

08022a24 <strncmp>:
 8022a24:	b530      	push	{r4, r5, lr}
 8022a26:	0005      	movs	r5, r0
 8022a28:	1e10      	subs	r0, r2, #0
 8022a2a:	d00b      	beq.n	8022a44 <strncmp+0x20>
 8022a2c:	2400      	movs	r4, #0
 8022a2e:	3a01      	subs	r2, #1
 8022a30:	5d2b      	ldrb	r3, [r5, r4]
 8022a32:	5d08      	ldrb	r0, [r1, r4]
 8022a34:	4283      	cmp	r3, r0
 8022a36:	d104      	bne.n	8022a42 <strncmp+0x1e>
 8022a38:	42a2      	cmp	r2, r4
 8022a3a:	d002      	beq.n	8022a42 <strncmp+0x1e>
 8022a3c:	3401      	adds	r4, #1
 8022a3e:	2b00      	cmp	r3, #0
 8022a40:	d1f6      	bne.n	8022a30 <strncmp+0xc>
 8022a42:	1a18      	subs	r0, r3, r0
 8022a44:	bd30      	pop	{r4, r5, pc}

08022a46 <strncpy>:
 8022a46:	0003      	movs	r3, r0
 8022a48:	b530      	push	{r4, r5, lr}
 8022a4a:	001d      	movs	r5, r3
 8022a4c:	2a00      	cmp	r2, #0
 8022a4e:	d006      	beq.n	8022a5e <strncpy+0x18>
 8022a50:	780c      	ldrb	r4, [r1, #0]
 8022a52:	3a01      	subs	r2, #1
 8022a54:	3301      	adds	r3, #1
 8022a56:	702c      	strb	r4, [r5, #0]
 8022a58:	3101      	adds	r1, #1
 8022a5a:	2c00      	cmp	r4, #0
 8022a5c:	d1f5      	bne.n	8022a4a <strncpy+0x4>
 8022a5e:	2100      	movs	r1, #0
 8022a60:	189a      	adds	r2, r3, r2
 8022a62:	4293      	cmp	r3, r2
 8022a64:	d100      	bne.n	8022a68 <strncpy+0x22>
 8022a66:	bd30      	pop	{r4, r5, pc}
 8022a68:	7019      	strb	r1, [r3, #0]
 8022a6a:	3301      	adds	r3, #1
 8022a6c:	e7f9      	b.n	8022a62 <strncpy+0x1c>

08022a6e <strstr>:
 8022a6e:	780a      	ldrb	r2, [r1, #0]
 8022a70:	b530      	push	{r4, r5, lr}
 8022a72:	2a00      	cmp	r2, #0
 8022a74:	d10c      	bne.n	8022a90 <strstr+0x22>
 8022a76:	bd30      	pop	{r4, r5, pc}
 8022a78:	429a      	cmp	r2, r3
 8022a7a:	d108      	bne.n	8022a8e <strstr+0x20>
 8022a7c:	2301      	movs	r3, #1
 8022a7e:	5ccc      	ldrb	r4, [r1, r3]
 8022a80:	2c00      	cmp	r4, #0
 8022a82:	d0f8      	beq.n	8022a76 <strstr+0x8>
 8022a84:	5cc5      	ldrb	r5, [r0, r3]
 8022a86:	42a5      	cmp	r5, r4
 8022a88:	d101      	bne.n	8022a8e <strstr+0x20>
 8022a8a:	3301      	adds	r3, #1
 8022a8c:	e7f7      	b.n	8022a7e <strstr+0x10>
 8022a8e:	3001      	adds	r0, #1
 8022a90:	7803      	ldrb	r3, [r0, #0]
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d1f0      	bne.n	8022a78 <strstr+0xa>
 8022a96:	0018      	movs	r0, r3
 8022a98:	e7ed      	b.n	8022a76 <strstr+0x8>
	...

08022a9c <_localeconv_r>:
 8022a9c:	4800      	ldr	r0, [pc, #0]	@ (8022aa0 <_localeconv_r+0x4>)
 8022a9e:	4770      	bx	lr
 8022aa0:	20000360 	.word	0x20000360

08022aa4 <_close_r>:
 8022aa4:	2300      	movs	r3, #0
 8022aa6:	b570      	push	{r4, r5, r6, lr}
 8022aa8:	4d06      	ldr	r5, [pc, #24]	@ (8022ac4 <_close_r+0x20>)
 8022aaa:	0004      	movs	r4, r0
 8022aac:	0008      	movs	r0, r1
 8022aae:	602b      	str	r3, [r5, #0]
 8022ab0:	f7ed f9e6 	bl	800fe80 <_close>
 8022ab4:	1c43      	adds	r3, r0, #1
 8022ab6:	d103      	bne.n	8022ac0 <_close_r+0x1c>
 8022ab8:	682b      	ldr	r3, [r5, #0]
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d000      	beq.n	8022ac0 <_close_r+0x1c>
 8022abe:	6023      	str	r3, [r4, #0]
 8022ac0:	bd70      	pop	{r4, r5, r6, pc}
 8022ac2:	46c0      	nop			@ (mov r8, r8)
 8022ac4:	2000358c 	.word	0x2000358c

08022ac8 <_lseek_r>:
 8022ac8:	b570      	push	{r4, r5, r6, lr}
 8022aca:	0004      	movs	r4, r0
 8022acc:	0008      	movs	r0, r1
 8022ace:	0011      	movs	r1, r2
 8022ad0:	001a      	movs	r2, r3
 8022ad2:	2300      	movs	r3, #0
 8022ad4:	4d05      	ldr	r5, [pc, #20]	@ (8022aec <_lseek_r+0x24>)
 8022ad6:	602b      	str	r3, [r5, #0]
 8022ad8:	f7ed f9f3 	bl	800fec2 <_lseek>
 8022adc:	1c43      	adds	r3, r0, #1
 8022ade:	d103      	bne.n	8022ae8 <_lseek_r+0x20>
 8022ae0:	682b      	ldr	r3, [r5, #0]
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d000      	beq.n	8022ae8 <_lseek_r+0x20>
 8022ae6:	6023      	str	r3, [r4, #0]
 8022ae8:	bd70      	pop	{r4, r5, r6, pc}
 8022aea:	46c0      	nop			@ (mov r8, r8)
 8022aec:	2000358c 	.word	0x2000358c

08022af0 <_read_r>:
 8022af0:	b570      	push	{r4, r5, r6, lr}
 8022af2:	0004      	movs	r4, r0
 8022af4:	0008      	movs	r0, r1
 8022af6:	0011      	movs	r1, r2
 8022af8:	001a      	movs	r2, r3
 8022afa:	2300      	movs	r3, #0
 8022afc:	4d05      	ldr	r5, [pc, #20]	@ (8022b14 <_read_r+0x24>)
 8022afe:	602b      	str	r3, [r5, #0]
 8022b00:	f7ed f9a1 	bl	800fe46 <_read>
 8022b04:	1c43      	adds	r3, r0, #1
 8022b06:	d103      	bne.n	8022b10 <_read_r+0x20>
 8022b08:	682b      	ldr	r3, [r5, #0]
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	d000      	beq.n	8022b10 <_read_r+0x20>
 8022b0e:	6023      	str	r3, [r4, #0]
 8022b10:	bd70      	pop	{r4, r5, r6, pc}
 8022b12:	46c0      	nop			@ (mov r8, r8)
 8022b14:	2000358c 	.word	0x2000358c

08022b18 <_write_r>:
 8022b18:	b570      	push	{r4, r5, r6, lr}
 8022b1a:	0004      	movs	r4, r0
 8022b1c:	0008      	movs	r0, r1
 8022b1e:	0011      	movs	r1, r2
 8022b20:	001a      	movs	r2, r3
 8022b22:	2300      	movs	r3, #0
 8022b24:	4d05      	ldr	r5, [pc, #20]	@ (8022b3c <_write_r+0x24>)
 8022b26:	602b      	str	r3, [r5, #0]
 8022b28:	f7ed fe5e 	bl	80107e8 <_write>
 8022b2c:	1c43      	adds	r3, r0, #1
 8022b2e:	d103      	bne.n	8022b38 <_write_r+0x20>
 8022b30:	682b      	ldr	r3, [r5, #0]
 8022b32:	2b00      	cmp	r3, #0
 8022b34:	d000      	beq.n	8022b38 <_write_r+0x20>
 8022b36:	6023      	str	r3, [r4, #0]
 8022b38:	bd70      	pop	{r4, r5, r6, pc}
 8022b3a:	46c0      	nop			@ (mov r8, r8)
 8022b3c:	2000358c 	.word	0x2000358c

08022b40 <__errno>:
 8022b40:	4b01      	ldr	r3, [pc, #4]	@ (8022b48 <__errno+0x8>)
 8022b42:	6818      	ldr	r0, [r3, #0]
 8022b44:	4770      	bx	lr
 8022b46:	46c0      	nop			@ (mov r8, r8)
 8022b48:	200003dc 	.word	0x200003dc

08022b4c <__libc_init_array>:
 8022b4c:	b570      	push	{r4, r5, r6, lr}
 8022b4e:	2600      	movs	r6, #0
 8022b50:	4c0c      	ldr	r4, [pc, #48]	@ (8022b84 <__libc_init_array+0x38>)
 8022b52:	4d0d      	ldr	r5, [pc, #52]	@ (8022b88 <__libc_init_array+0x3c>)
 8022b54:	1b64      	subs	r4, r4, r5
 8022b56:	10a4      	asrs	r4, r4, #2
 8022b58:	42a6      	cmp	r6, r4
 8022b5a:	d109      	bne.n	8022b70 <__libc_init_array+0x24>
 8022b5c:	2600      	movs	r6, #0
 8022b5e:	f002 fee9 	bl	8025934 <_init>
 8022b62:	4c0a      	ldr	r4, [pc, #40]	@ (8022b8c <__libc_init_array+0x40>)
 8022b64:	4d0a      	ldr	r5, [pc, #40]	@ (8022b90 <__libc_init_array+0x44>)
 8022b66:	1b64      	subs	r4, r4, r5
 8022b68:	10a4      	asrs	r4, r4, #2
 8022b6a:	42a6      	cmp	r6, r4
 8022b6c:	d105      	bne.n	8022b7a <__libc_init_array+0x2e>
 8022b6e:	bd70      	pop	{r4, r5, r6, pc}
 8022b70:	00b3      	lsls	r3, r6, #2
 8022b72:	58eb      	ldr	r3, [r5, r3]
 8022b74:	4798      	blx	r3
 8022b76:	3601      	adds	r6, #1
 8022b78:	e7ee      	b.n	8022b58 <__libc_init_array+0xc>
 8022b7a:	00b3      	lsls	r3, r6, #2
 8022b7c:	58eb      	ldr	r3, [r5, r3]
 8022b7e:	4798      	blx	r3
 8022b80:	3601      	adds	r6, #1
 8022b82:	e7f2      	b.n	8022b6a <__libc_init_array+0x1e>
 8022b84:	08029750 	.word	0x08029750
 8022b88:	08029750 	.word	0x08029750
 8022b8c:	08029754 	.word	0x08029754
 8022b90:	08029750 	.word	0x08029750

08022b94 <__retarget_lock_init_recursive>:
 8022b94:	4770      	bx	lr

08022b96 <__retarget_lock_acquire_recursive>:
 8022b96:	4770      	bx	lr

08022b98 <__retarget_lock_release_recursive>:
 8022b98:	4770      	bx	lr

08022b9a <memchr>:
 8022b9a:	b2c9      	uxtb	r1, r1
 8022b9c:	1882      	adds	r2, r0, r2
 8022b9e:	4290      	cmp	r0, r2
 8022ba0:	d101      	bne.n	8022ba6 <memchr+0xc>
 8022ba2:	2000      	movs	r0, #0
 8022ba4:	4770      	bx	lr
 8022ba6:	7803      	ldrb	r3, [r0, #0]
 8022ba8:	428b      	cmp	r3, r1
 8022baa:	d0fb      	beq.n	8022ba4 <memchr+0xa>
 8022bac:	3001      	adds	r0, #1
 8022bae:	e7f6      	b.n	8022b9e <memchr+0x4>

08022bb0 <memcpy>:
 8022bb0:	2300      	movs	r3, #0
 8022bb2:	b510      	push	{r4, lr}
 8022bb4:	429a      	cmp	r2, r3
 8022bb6:	d100      	bne.n	8022bba <memcpy+0xa>
 8022bb8:	bd10      	pop	{r4, pc}
 8022bba:	5ccc      	ldrb	r4, [r1, r3]
 8022bbc:	54c4      	strb	r4, [r0, r3]
 8022bbe:	3301      	adds	r3, #1
 8022bc0:	e7f8      	b.n	8022bb4 <memcpy+0x4>
	...

08022bc4 <nan>:
 8022bc4:	2000      	movs	r0, #0
 8022bc6:	4901      	ldr	r1, [pc, #4]	@ (8022bcc <nan+0x8>)
 8022bc8:	4770      	bx	lr
 8022bca:	46c0      	nop			@ (mov r8, r8)
 8022bcc:	7ff80000 	.word	0x7ff80000

08022bd0 <quorem>:
 8022bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022bd2:	6902      	ldr	r2, [r0, #16]
 8022bd4:	690f      	ldr	r7, [r1, #16]
 8022bd6:	b087      	sub	sp, #28
 8022bd8:	0006      	movs	r6, r0
 8022bda:	000b      	movs	r3, r1
 8022bdc:	2000      	movs	r0, #0
 8022bde:	9102      	str	r1, [sp, #8]
 8022be0:	42ba      	cmp	r2, r7
 8022be2:	db6d      	blt.n	8022cc0 <quorem+0xf0>
 8022be4:	3f01      	subs	r7, #1
 8022be6:	00bc      	lsls	r4, r7, #2
 8022be8:	3314      	adds	r3, #20
 8022bea:	9305      	str	r3, [sp, #20]
 8022bec:	191b      	adds	r3, r3, r4
 8022bee:	9303      	str	r3, [sp, #12]
 8022bf0:	0033      	movs	r3, r6
 8022bf2:	3314      	adds	r3, #20
 8022bf4:	191c      	adds	r4, r3, r4
 8022bf6:	9301      	str	r3, [sp, #4]
 8022bf8:	6823      	ldr	r3, [r4, #0]
 8022bfa:	9304      	str	r3, [sp, #16]
 8022bfc:	9b03      	ldr	r3, [sp, #12]
 8022bfe:	9804      	ldr	r0, [sp, #16]
 8022c00:	681d      	ldr	r5, [r3, #0]
 8022c02:	3501      	adds	r5, #1
 8022c04:	0029      	movs	r1, r5
 8022c06:	f7dd facd 	bl	80001a4 <__udivsi3>
 8022c0a:	9b04      	ldr	r3, [sp, #16]
 8022c0c:	9000      	str	r0, [sp, #0]
 8022c0e:	42ab      	cmp	r3, r5
 8022c10:	d32b      	bcc.n	8022c6a <quorem+0x9a>
 8022c12:	9b05      	ldr	r3, [sp, #20]
 8022c14:	9d01      	ldr	r5, [sp, #4]
 8022c16:	469c      	mov	ip, r3
 8022c18:	2300      	movs	r3, #0
 8022c1a:	9305      	str	r3, [sp, #20]
 8022c1c:	9304      	str	r3, [sp, #16]
 8022c1e:	4662      	mov	r2, ip
 8022c20:	ca08      	ldmia	r2!, {r3}
 8022c22:	6828      	ldr	r0, [r5, #0]
 8022c24:	4694      	mov	ip, r2
 8022c26:	9a00      	ldr	r2, [sp, #0]
 8022c28:	b299      	uxth	r1, r3
 8022c2a:	4351      	muls	r1, r2
 8022c2c:	9a05      	ldr	r2, [sp, #20]
 8022c2e:	0c1b      	lsrs	r3, r3, #16
 8022c30:	1889      	adds	r1, r1, r2
 8022c32:	9a00      	ldr	r2, [sp, #0]
 8022c34:	4353      	muls	r3, r2
 8022c36:	0c0a      	lsrs	r2, r1, #16
 8022c38:	189b      	adds	r3, r3, r2
 8022c3a:	0c1a      	lsrs	r2, r3, #16
 8022c3c:	b289      	uxth	r1, r1
 8022c3e:	9205      	str	r2, [sp, #20]
 8022c40:	b282      	uxth	r2, r0
 8022c42:	1a52      	subs	r2, r2, r1
 8022c44:	9904      	ldr	r1, [sp, #16]
 8022c46:	0c00      	lsrs	r0, r0, #16
 8022c48:	1852      	adds	r2, r2, r1
 8022c4a:	b29b      	uxth	r3, r3
 8022c4c:	1411      	asrs	r1, r2, #16
 8022c4e:	1ac3      	subs	r3, r0, r3
 8022c50:	185b      	adds	r3, r3, r1
 8022c52:	1419      	asrs	r1, r3, #16
 8022c54:	b292      	uxth	r2, r2
 8022c56:	041b      	lsls	r3, r3, #16
 8022c58:	431a      	orrs	r2, r3
 8022c5a:	9b03      	ldr	r3, [sp, #12]
 8022c5c:	9104      	str	r1, [sp, #16]
 8022c5e:	c504      	stmia	r5!, {r2}
 8022c60:	4563      	cmp	r3, ip
 8022c62:	d2dc      	bcs.n	8022c1e <quorem+0x4e>
 8022c64:	6823      	ldr	r3, [r4, #0]
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	d030      	beq.n	8022ccc <quorem+0xfc>
 8022c6a:	0030      	movs	r0, r6
 8022c6c:	9902      	ldr	r1, [sp, #8]
 8022c6e:	f001 fd7d 	bl	802476c <__mcmp>
 8022c72:	2800      	cmp	r0, #0
 8022c74:	db23      	blt.n	8022cbe <quorem+0xee>
 8022c76:	0034      	movs	r4, r6
 8022c78:	2500      	movs	r5, #0
 8022c7a:	9902      	ldr	r1, [sp, #8]
 8022c7c:	3414      	adds	r4, #20
 8022c7e:	3114      	adds	r1, #20
 8022c80:	6823      	ldr	r3, [r4, #0]
 8022c82:	c901      	ldmia	r1!, {r0}
 8022c84:	9302      	str	r3, [sp, #8]
 8022c86:	466b      	mov	r3, sp
 8022c88:	891b      	ldrh	r3, [r3, #8]
 8022c8a:	b282      	uxth	r2, r0
 8022c8c:	1a9a      	subs	r2, r3, r2
 8022c8e:	9b02      	ldr	r3, [sp, #8]
 8022c90:	1952      	adds	r2, r2, r5
 8022c92:	0c00      	lsrs	r0, r0, #16
 8022c94:	0c1b      	lsrs	r3, r3, #16
 8022c96:	1a1b      	subs	r3, r3, r0
 8022c98:	1410      	asrs	r0, r2, #16
 8022c9a:	181b      	adds	r3, r3, r0
 8022c9c:	141d      	asrs	r5, r3, #16
 8022c9e:	b292      	uxth	r2, r2
 8022ca0:	041b      	lsls	r3, r3, #16
 8022ca2:	431a      	orrs	r2, r3
 8022ca4:	9b03      	ldr	r3, [sp, #12]
 8022ca6:	c404      	stmia	r4!, {r2}
 8022ca8:	428b      	cmp	r3, r1
 8022caa:	d2e9      	bcs.n	8022c80 <quorem+0xb0>
 8022cac:	9a01      	ldr	r2, [sp, #4]
 8022cae:	00bb      	lsls	r3, r7, #2
 8022cb0:	18d3      	adds	r3, r2, r3
 8022cb2:	681a      	ldr	r2, [r3, #0]
 8022cb4:	2a00      	cmp	r2, #0
 8022cb6:	d013      	beq.n	8022ce0 <quorem+0x110>
 8022cb8:	9b00      	ldr	r3, [sp, #0]
 8022cba:	3301      	adds	r3, #1
 8022cbc:	9300      	str	r3, [sp, #0]
 8022cbe:	9800      	ldr	r0, [sp, #0]
 8022cc0:	b007      	add	sp, #28
 8022cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022cc4:	6823      	ldr	r3, [r4, #0]
 8022cc6:	2b00      	cmp	r3, #0
 8022cc8:	d104      	bne.n	8022cd4 <quorem+0x104>
 8022cca:	3f01      	subs	r7, #1
 8022ccc:	9b01      	ldr	r3, [sp, #4]
 8022cce:	3c04      	subs	r4, #4
 8022cd0:	42a3      	cmp	r3, r4
 8022cd2:	d3f7      	bcc.n	8022cc4 <quorem+0xf4>
 8022cd4:	6137      	str	r7, [r6, #16]
 8022cd6:	e7c8      	b.n	8022c6a <quorem+0x9a>
 8022cd8:	681a      	ldr	r2, [r3, #0]
 8022cda:	2a00      	cmp	r2, #0
 8022cdc:	d104      	bne.n	8022ce8 <quorem+0x118>
 8022cde:	3f01      	subs	r7, #1
 8022ce0:	9a01      	ldr	r2, [sp, #4]
 8022ce2:	3b04      	subs	r3, #4
 8022ce4:	429a      	cmp	r2, r3
 8022ce6:	d3f7      	bcc.n	8022cd8 <quorem+0x108>
 8022ce8:	6137      	str	r7, [r6, #16]
 8022cea:	e7e5      	b.n	8022cb8 <quorem+0xe8>

08022cec <_dtoa_r>:
 8022cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cee:	0014      	movs	r4, r2
 8022cf0:	001d      	movs	r5, r3
 8022cf2:	69c6      	ldr	r6, [r0, #28]
 8022cf4:	b09d      	sub	sp, #116	@ 0x74
 8022cf6:	940a      	str	r4, [sp, #40]	@ 0x28
 8022cf8:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022cfa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8022cfc:	9003      	str	r0, [sp, #12]
 8022cfe:	2e00      	cmp	r6, #0
 8022d00:	d10f      	bne.n	8022d22 <_dtoa_r+0x36>
 8022d02:	2010      	movs	r0, #16
 8022d04:	f001 f98a 	bl	802401c <malloc>
 8022d08:	9b03      	ldr	r3, [sp, #12]
 8022d0a:	1e02      	subs	r2, r0, #0
 8022d0c:	61d8      	str	r0, [r3, #28]
 8022d0e:	d104      	bne.n	8022d1a <_dtoa_r+0x2e>
 8022d10:	21ef      	movs	r1, #239	@ 0xef
 8022d12:	4bc7      	ldr	r3, [pc, #796]	@ (8023030 <_dtoa_r+0x344>)
 8022d14:	48c7      	ldr	r0, [pc, #796]	@ (8023034 <_dtoa_r+0x348>)
 8022d16:	f002 fb2f 	bl	8025378 <__assert_func>
 8022d1a:	6046      	str	r6, [r0, #4]
 8022d1c:	6086      	str	r6, [r0, #8]
 8022d1e:	6006      	str	r6, [r0, #0]
 8022d20:	60c6      	str	r6, [r0, #12]
 8022d22:	9b03      	ldr	r3, [sp, #12]
 8022d24:	69db      	ldr	r3, [r3, #28]
 8022d26:	6819      	ldr	r1, [r3, #0]
 8022d28:	2900      	cmp	r1, #0
 8022d2a:	d00b      	beq.n	8022d44 <_dtoa_r+0x58>
 8022d2c:	685a      	ldr	r2, [r3, #4]
 8022d2e:	2301      	movs	r3, #1
 8022d30:	4093      	lsls	r3, r2
 8022d32:	604a      	str	r2, [r1, #4]
 8022d34:	608b      	str	r3, [r1, #8]
 8022d36:	9803      	ldr	r0, [sp, #12]
 8022d38:	f001 fa82 	bl	8024240 <_Bfree>
 8022d3c:	2200      	movs	r2, #0
 8022d3e:	9b03      	ldr	r3, [sp, #12]
 8022d40:	69db      	ldr	r3, [r3, #28]
 8022d42:	601a      	str	r2, [r3, #0]
 8022d44:	2d00      	cmp	r5, #0
 8022d46:	da1e      	bge.n	8022d86 <_dtoa_r+0x9a>
 8022d48:	2301      	movs	r3, #1
 8022d4a:	603b      	str	r3, [r7, #0]
 8022d4c:	006b      	lsls	r3, r5, #1
 8022d4e:	085b      	lsrs	r3, r3, #1
 8022d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022d52:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022d54:	4bb8      	ldr	r3, [pc, #736]	@ (8023038 <_dtoa_r+0x34c>)
 8022d56:	4ab8      	ldr	r2, [pc, #736]	@ (8023038 <_dtoa_r+0x34c>)
 8022d58:	403b      	ands	r3, r7
 8022d5a:	4293      	cmp	r3, r2
 8022d5c:	d116      	bne.n	8022d8c <_dtoa_r+0xa0>
 8022d5e:	4bb7      	ldr	r3, [pc, #732]	@ (802303c <_dtoa_r+0x350>)
 8022d60:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022d62:	6013      	str	r3, [r2, #0]
 8022d64:	033b      	lsls	r3, r7, #12
 8022d66:	0b1b      	lsrs	r3, r3, #12
 8022d68:	4323      	orrs	r3, r4
 8022d6a:	d101      	bne.n	8022d70 <_dtoa_r+0x84>
 8022d6c:	f000 fd83 	bl	8023876 <_dtoa_r+0xb8a>
 8022d70:	4bb3      	ldr	r3, [pc, #716]	@ (8023040 <_dtoa_r+0x354>)
 8022d72:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022d74:	9308      	str	r3, [sp, #32]
 8022d76:	2a00      	cmp	r2, #0
 8022d78:	d002      	beq.n	8022d80 <_dtoa_r+0x94>
 8022d7a:	4bb2      	ldr	r3, [pc, #712]	@ (8023044 <_dtoa_r+0x358>)
 8022d7c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022d7e:	6013      	str	r3, [r2, #0]
 8022d80:	9808      	ldr	r0, [sp, #32]
 8022d82:	b01d      	add	sp, #116	@ 0x74
 8022d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d86:	2300      	movs	r3, #0
 8022d88:	603b      	str	r3, [r7, #0]
 8022d8a:	e7e2      	b.n	8022d52 <_dtoa_r+0x66>
 8022d8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022d90:	9212      	str	r2, [sp, #72]	@ 0x48
 8022d92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022d94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022d96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022d98:	2200      	movs	r2, #0
 8022d9a:	2300      	movs	r3, #0
 8022d9c:	f7dd fb88 	bl	80004b0 <__aeabi_dcmpeq>
 8022da0:	1e06      	subs	r6, r0, #0
 8022da2:	d00b      	beq.n	8022dbc <_dtoa_r+0xd0>
 8022da4:	2301      	movs	r3, #1
 8022da6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022da8:	6013      	str	r3, [r2, #0]
 8022daa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022dac:	2b00      	cmp	r3, #0
 8022dae:	d002      	beq.n	8022db6 <_dtoa_r+0xca>
 8022db0:	4ba5      	ldr	r3, [pc, #660]	@ (8023048 <_dtoa_r+0x35c>)
 8022db2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022db4:	6013      	str	r3, [r2, #0]
 8022db6:	4ba5      	ldr	r3, [pc, #660]	@ (802304c <_dtoa_r+0x360>)
 8022db8:	9308      	str	r3, [sp, #32]
 8022dba:	e7e1      	b.n	8022d80 <_dtoa_r+0x94>
 8022dbc:	ab1a      	add	r3, sp, #104	@ 0x68
 8022dbe:	9301      	str	r3, [sp, #4]
 8022dc0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8022dc2:	9300      	str	r3, [sp, #0]
 8022dc4:	9803      	ldr	r0, [sp, #12]
 8022dc6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022dc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022dca:	f001 fdf1 	bl	80249b0 <__d2b>
 8022dce:	007a      	lsls	r2, r7, #1
 8022dd0:	9005      	str	r0, [sp, #20]
 8022dd2:	0d52      	lsrs	r2, r2, #21
 8022dd4:	d100      	bne.n	8022dd8 <_dtoa_r+0xec>
 8022dd6:	e07b      	b.n	8022ed0 <_dtoa_r+0x1e4>
 8022dd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022dda:	9618      	str	r6, [sp, #96]	@ 0x60
 8022ddc:	0319      	lsls	r1, r3, #12
 8022dde:	4b9c      	ldr	r3, [pc, #624]	@ (8023050 <_dtoa_r+0x364>)
 8022de0:	0b09      	lsrs	r1, r1, #12
 8022de2:	430b      	orrs	r3, r1
 8022de4:	499b      	ldr	r1, [pc, #620]	@ (8023054 <_dtoa_r+0x368>)
 8022de6:	1857      	adds	r7, r2, r1
 8022de8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022dea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022dec:	0019      	movs	r1, r3
 8022dee:	2200      	movs	r2, #0
 8022df0:	4b99      	ldr	r3, [pc, #612]	@ (8023058 <_dtoa_r+0x36c>)
 8022df2:	f7df feeb 	bl	8002bcc <__aeabi_dsub>
 8022df6:	4a99      	ldr	r2, [pc, #612]	@ (802305c <_dtoa_r+0x370>)
 8022df8:	4b99      	ldr	r3, [pc, #612]	@ (8023060 <_dtoa_r+0x374>)
 8022dfa:	f7df fc1f 	bl	800263c <__aeabi_dmul>
 8022dfe:	4a99      	ldr	r2, [pc, #612]	@ (8023064 <_dtoa_r+0x378>)
 8022e00:	4b99      	ldr	r3, [pc, #612]	@ (8023068 <_dtoa_r+0x37c>)
 8022e02:	f7de fc73 	bl	80016ec <__aeabi_dadd>
 8022e06:	0004      	movs	r4, r0
 8022e08:	0038      	movs	r0, r7
 8022e0a:	000d      	movs	r5, r1
 8022e0c:	f7e0 fad8 	bl	80033c0 <__aeabi_i2d>
 8022e10:	4a96      	ldr	r2, [pc, #600]	@ (802306c <_dtoa_r+0x380>)
 8022e12:	4b97      	ldr	r3, [pc, #604]	@ (8023070 <_dtoa_r+0x384>)
 8022e14:	f7df fc12 	bl	800263c <__aeabi_dmul>
 8022e18:	0002      	movs	r2, r0
 8022e1a:	000b      	movs	r3, r1
 8022e1c:	0020      	movs	r0, r4
 8022e1e:	0029      	movs	r1, r5
 8022e20:	f7de fc64 	bl	80016ec <__aeabi_dadd>
 8022e24:	0004      	movs	r4, r0
 8022e26:	000d      	movs	r5, r1
 8022e28:	f7e0 fa8e 	bl	8003348 <__aeabi_d2iz>
 8022e2c:	2200      	movs	r2, #0
 8022e2e:	9004      	str	r0, [sp, #16]
 8022e30:	2300      	movs	r3, #0
 8022e32:	0020      	movs	r0, r4
 8022e34:	0029      	movs	r1, r5
 8022e36:	f7dd fb41 	bl	80004bc <__aeabi_dcmplt>
 8022e3a:	2800      	cmp	r0, #0
 8022e3c:	d00b      	beq.n	8022e56 <_dtoa_r+0x16a>
 8022e3e:	9804      	ldr	r0, [sp, #16]
 8022e40:	f7e0 fabe 	bl	80033c0 <__aeabi_i2d>
 8022e44:	002b      	movs	r3, r5
 8022e46:	0022      	movs	r2, r4
 8022e48:	f7dd fb32 	bl	80004b0 <__aeabi_dcmpeq>
 8022e4c:	4243      	negs	r3, r0
 8022e4e:	4158      	adcs	r0, r3
 8022e50:	9b04      	ldr	r3, [sp, #16]
 8022e52:	1a1b      	subs	r3, r3, r0
 8022e54:	9304      	str	r3, [sp, #16]
 8022e56:	2301      	movs	r3, #1
 8022e58:	9315      	str	r3, [sp, #84]	@ 0x54
 8022e5a:	9b04      	ldr	r3, [sp, #16]
 8022e5c:	2b16      	cmp	r3, #22
 8022e5e:	d810      	bhi.n	8022e82 <_dtoa_r+0x196>
 8022e60:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022e62:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022e64:	9a04      	ldr	r2, [sp, #16]
 8022e66:	4b83      	ldr	r3, [pc, #524]	@ (8023074 <_dtoa_r+0x388>)
 8022e68:	00d2      	lsls	r2, r2, #3
 8022e6a:	189b      	adds	r3, r3, r2
 8022e6c:	681a      	ldr	r2, [r3, #0]
 8022e6e:	685b      	ldr	r3, [r3, #4]
 8022e70:	f7dd fb24 	bl	80004bc <__aeabi_dcmplt>
 8022e74:	2800      	cmp	r0, #0
 8022e76:	d047      	beq.n	8022f08 <_dtoa_r+0x21c>
 8022e78:	9b04      	ldr	r3, [sp, #16]
 8022e7a:	3b01      	subs	r3, #1
 8022e7c:	9304      	str	r3, [sp, #16]
 8022e7e:	2300      	movs	r3, #0
 8022e80:	9315      	str	r3, [sp, #84]	@ 0x54
 8022e82:	2200      	movs	r2, #0
 8022e84:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8022e86:	9206      	str	r2, [sp, #24]
 8022e88:	1bdb      	subs	r3, r3, r7
 8022e8a:	1e5a      	subs	r2, r3, #1
 8022e8c:	d53e      	bpl.n	8022f0c <_dtoa_r+0x220>
 8022e8e:	2201      	movs	r2, #1
 8022e90:	1ad3      	subs	r3, r2, r3
 8022e92:	9306      	str	r3, [sp, #24]
 8022e94:	2300      	movs	r3, #0
 8022e96:	930d      	str	r3, [sp, #52]	@ 0x34
 8022e98:	9b04      	ldr	r3, [sp, #16]
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	db38      	blt.n	8022f10 <_dtoa_r+0x224>
 8022e9e:	9a04      	ldr	r2, [sp, #16]
 8022ea0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022ea2:	4694      	mov	ip, r2
 8022ea4:	4463      	add	r3, ip
 8022ea6:	930d      	str	r3, [sp, #52]	@ 0x34
 8022ea8:	2300      	movs	r3, #0
 8022eaa:	9214      	str	r2, [sp, #80]	@ 0x50
 8022eac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022eae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022eb0:	2401      	movs	r4, #1
 8022eb2:	2b09      	cmp	r3, #9
 8022eb4:	d867      	bhi.n	8022f86 <_dtoa_r+0x29a>
 8022eb6:	2b05      	cmp	r3, #5
 8022eb8:	dd02      	ble.n	8022ec0 <_dtoa_r+0x1d4>
 8022eba:	2400      	movs	r4, #0
 8022ebc:	3b04      	subs	r3, #4
 8022ebe:	9322      	str	r3, [sp, #136]	@ 0x88
 8022ec0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022ec2:	1e98      	subs	r0, r3, #2
 8022ec4:	2803      	cmp	r0, #3
 8022ec6:	d867      	bhi.n	8022f98 <_dtoa_r+0x2ac>
 8022ec8:	f7dd f958 	bl	800017c <__gnu_thumb1_case_uqi>
 8022ecc:	5b383a2b 	.word	0x5b383a2b
 8022ed0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022ed2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8022ed4:	18f6      	adds	r6, r6, r3
 8022ed6:	4b68      	ldr	r3, [pc, #416]	@ (8023078 <_dtoa_r+0x38c>)
 8022ed8:	18f2      	adds	r2, r6, r3
 8022eda:	2a20      	cmp	r2, #32
 8022edc:	dd0f      	ble.n	8022efe <_dtoa_r+0x212>
 8022ede:	2340      	movs	r3, #64	@ 0x40
 8022ee0:	1a9b      	subs	r3, r3, r2
 8022ee2:	409f      	lsls	r7, r3
 8022ee4:	4b65      	ldr	r3, [pc, #404]	@ (802307c <_dtoa_r+0x390>)
 8022ee6:	0038      	movs	r0, r7
 8022ee8:	18f3      	adds	r3, r6, r3
 8022eea:	40dc      	lsrs	r4, r3
 8022eec:	4320      	orrs	r0, r4
 8022eee:	f7e0 fa95 	bl	800341c <__aeabi_ui2d>
 8022ef2:	2201      	movs	r2, #1
 8022ef4:	4b62      	ldr	r3, [pc, #392]	@ (8023080 <_dtoa_r+0x394>)
 8022ef6:	1e77      	subs	r7, r6, #1
 8022ef8:	18cb      	adds	r3, r1, r3
 8022efa:	9218      	str	r2, [sp, #96]	@ 0x60
 8022efc:	e776      	b.n	8022dec <_dtoa_r+0x100>
 8022efe:	2320      	movs	r3, #32
 8022f00:	0020      	movs	r0, r4
 8022f02:	1a9b      	subs	r3, r3, r2
 8022f04:	4098      	lsls	r0, r3
 8022f06:	e7f2      	b.n	8022eee <_dtoa_r+0x202>
 8022f08:	9015      	str	r0, [sp, #84]	@ 0x54
 8022f0a:	e7ba      	b.n	8022e82 <_dtoa_r+0x196>
 8022f0c:	920d      	str	r2, [sp, #52]	@ 0x34
 8022f0e:	e7c3      	b.n	8022e98 <_dtoa_r+0x1ac>
 8022f10:	9b06      	ldr	r3, [sp, #24]
 8022f12:	9a04      	ldr	r2, [sp, #16]
 8022f14:	1a9b      	subs	r3, r3, r2
 8022f16:	9306      	str	r3, [sp, #24]
 8022f18:	4253      	negs	r3, r2
 8022f1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022f1c:	2300      	movs	r3, #0
 8022f1e:	9314      	str	r3, [sp, #80]	@ 0x50
 8022f20:	e7c5      	b.n	8022eae <_dtoa_r+0x1c2>
 8022f22:	2300      	movs	r3, #0
 8022f24:	9310      	str	r3, [sp, #64]	@ 0x40
 8022f26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022f28:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f2c:	2b00      	cmp	r3, #0
 8022f2e:	dc13      	bgt.n	8022f58 <_dtoa_r+0x26c>
 8022f30:	2301      	movs	r3, #1
 8022f32:	001a      	movs	r2, r3
 8022f34:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f38:	9223      	str	r2, [sp, #140]	@ 0x8c
 8022f3a:	e00d      	b.n	8022f58 <_dtoa_r+0x26c>
 8022f3c:	2301      	movs	r3, #1
 8022f3e:	e7f1      	b.n	8022f24 <_dtoa_r+0x238>
 8022f40:	2300      	movs	r3, #0
 8022f42:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8022f44:	9310      	str	r3, [sp, #64]	@ 0x40
 8022f46:	4694      	mov	ip, r2
 8022f48:	9b04      	ldr	r3, [sp, #16]
 8022f4a:	4463      	add	r3, ip
 8022f4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f4e:	3301      	adds	r3, #1
 8022f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f52:	2b00      	cmp	r3, #0
 8022f54:	dc00      	bgt.n	8022f58 <_dtoa_r+0x26c>
 8022f56:	2301      	movs	r3, #1
 8022f58:	9a03      	ldr	r2, [sp, #12]
 8022f5a:	2100      	movs	r1, #0
 8022f5c:	69d0      	ldr	r0, [r2, #28]
 8022f5e:	2204      	movs	r2, #4
 8022f60:	0015      	movs	r5, r2
 8022f62:	3514      	adds	r5, #20
 8022f64:	429d      	cmp	r5, r3
 8022f66:	d91b      	bls.n	8022fa0 <_dtoa_r+0x2b4>
 8022f68:	6041      	str	r1, [r0, #4]
 8022f6a:	9803      	ldr	r0, [sp, #12]
 8022f6c:	f001 f924 	bl	80241b8 <_Balloc>
 8022f70:	9008      	str	r0, [sp, #32]
 8022f72:	2800      	cmp	r0, #0
 8022f74:	d117      	bne.n	8022fa6 <_dtoa_r+0x2ba>
 8022f76:	21b0      	movs	r1, #176	@ 0xb0
 8022f78:	4b42      	ldr	r3, [pc, #264]	@ (8023084 <_dtoa_r+0x398>)
 8022f7a:	482e      	ldr	r0, [pc, #184]	@ (8023034 <_dtoa_r+0x348>)
 8022f7c:	9a08      	ldr	r2, [sp, #32]
 8022f7e:	31ff      	adds	r1, #255	@ 0xff
 8022f80:	e6c9      	b.n	8022d16 <_dtoa_r+0x2a>
 8022f82:	2301      	movs	r3, #1
 8022f84:	e7dd      	b.n	8022f42 <_dtoa_r+0x256>
 8022f86:	2300      	movs	r3, #0
 8022f88:	9410      	str	r4, [sp, #64]	@ 0x40
 8022f8a:	9322      	str	r3, [sp, #136]	@ 0x88
 8022f8c:	3b01      	subs	r3, #1
 8022f8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8022f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f92:	2200      	movs	r2, #0
 8022f94:	3313      	adds	r3, #19
 8022f96:	e7cf      	b.n	8022f38 <_dtoa_r+0x24c>
 8022f98:	2301      	movs	r3, #1
 8022f9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8022f9c:	3b02      	subs	r3, #2
 8022f9e:	e7f6      	b.n	8022f8e <_dtoa_r+0x2a2>
 8022fa0:	3101      	adds	r1, #1
 8022fa2:	0052      	lsls	r2, r2, #1
 8022fa4:	e7dc      	b.n	8022f60 <_dtoa_r+0x274>
 8022fa6:	9b03      	ldr	r3, [sp, #12]
 8022fa8:	9a08      	ldr	r2, [sp, #32]
 8022faa:	69db      	ldr	r3, [r3, #28]
 8022fac:	601a      	str	r2, [r3, #0]
 8022fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022fb0:	2b0e      	cmp	r3, #14
 8022fb2:	d900      	bls.n	8022fb6 <_dtoa_r+0x2ca>
 8022fb4:	e0d9      	b.n	802316a <_dtoa_r+0x47e>
 8022fb6:	2c00      	cmp	r4, #0
 8022fb8:	d100      	bne.n	8022fbc <_dtoa_r+0x2d0>
 8022fba:	e0d6      	b.n	802316a <_dtoa_r+0x47e>
 8022fbc:	9b04      	ldr	r3, [sp, #16]
 8022fbe:	2b00      	cmp	r3, #0
 8022fc0:	dd64      	ble.n	802308c <_dtoa_r+0x3a0>
 8022fc2:	210f      	movs	r1, #15
 8022fc4:	9a04      	ldr	r2, [sp, #16]
 8022fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8023074 <_dtoa_r+0x388>)
 8022fc8:	400a      	ands	r2, r1
 8022fca:	00d2      	lsls	r2, r2, #3
 8022fcc:	189b      	adds	r3, r3, r2
 8022fce:	681e      	ldr	r6, [r3, #0]
 8022fd0:	685f      	ldr	r7, [r3, #4]
 8022fd2:	9b04      	ldr	r3, [sp, #16]
 8022fd4:	2402      	movs	r4, #2
 8022fd6:	111d      	asrs	r5, r3, #4
 8022fd8:	05db      	lsls	r3, r3, #23
 8022fda:	d50a      	bpl.n	8022ff2 <_dtoa_r+0x306>
 8022fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8023088 <_dtoa_r+0x39c>)
 8022fde:	400d      	ands	r5, r1
 8022fe0:	6a1a      	ldr	r2, [r3, #32]
 8022fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022fe4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022fe6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022fe8:	f7de fee4 	bl	8001db4 <__aeabi_ddiv>
 8022fec:	900a      	str	r0, [sp, #40]	@ 0x28
 8022fee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022ff0:	3401      	adds	r4, #1
 8022ff2:	4b25      	ldr	r3, [pc, #148]	@ (8023088 <_dtoa_r+0x39c>)
 8022ff4:	930c      	str	r3, [sp, #48]	@ 0x30
 8022ff6:	2d00      	cmp	r5, #0
 8022ff8:	d108      	bne.n	802300c <_dtoa_r+0x320>
 8022ffa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022ffc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022ffe:	0032      	movs	r2, r6
 8023000:	003b      	movs	r3, r7
 8023002:	f7de fed7 	bl	8001db4 <__aeabi_ddiv>
 8023006:	900a      	str	r0, [sp, #40]	@ 0x28
 8023008:	910b      	str	r1, [sp, #44]	@ 0x2c
 802300a:	e05a      	b.n	80230c2 <_dtoa_r+0x3d6>
 802300c:	2301      	movs	r3, #1
 802300e:	421d      	tst	r5, r3
 8023010:	d009      	beq.n	8023026 <_dtoa_r+0x33a>
 8023012:	18e4      	adds	r4, r4, r3
 8023014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023016:	0030      	movs	r0, r6
 8023018:	681a      	ldr	r2, [r3, #0]
 802301a:	685b      	ldr	r3, [r3, #4]
 802301c:	0039      	movs	r1, r7
 802301e:	f7df fb0d 	bl	800263c <__aeabi_dmul>
 8023022:	0006      	movs	r6, r0
 8023024:	000f      	movs	r7, r1
 8023026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023028:	106d      	asrs	r5, r5, #1
 802302a:	3308      	adds	r3, #8
 802302c:	e7e2      	b.n	8022ff4 <_dtoa_r+0x308>
 802302e:	46c0      	nop			@ (mov r8, r8)
 8023030:	080294aa 	.word	0x080294aa
 8023034:	080294c1 	.word	0x080294c1
 8023038:	7ff00000 	.word	0x7ff00000
 802303c:	0000270f 	.word	0x0000270f
 8023040:	080294a6 	.word	0x080294a6
 8023044:	080294a9 	.word	0x080294a9
 8023048:	08029472 	.word	0x08029472
 802304c:	08029471 	.word	0x08029471
 8023050:	3ff00000 	.word	0x3ff00000
 8023054:	fffffc01 	.word	0xfffffc01
 8023058:	3ff80000 	.word	0x3ff80000
 802305c:	636f4361 	.word	0x636f4361
 8023060:	3fd287a7 	.word	0x3fd287a7
 8023064:	8b60c8b3 	.word	0x8b60c8b3
 8023068:	3fc68a28 	.word	0x3fc68a28
 802306c:	509f79fb 	.word	0x509f79fb
 8023070:	3fd34413 	.word	0x3fd34413
 8023074:	08029618 	.word	0x08029618
 8023078:	00000432 	.word	0x00000432
 802307c:	00000412 	.word	0x00000412
 8023080:	fe100000 	.word	0xfe100000
 8023084:	08029519 	.word	0x08029519
 8023088:	080295f0 	.word	0x080295f0
 802308c:	9b04      	ldr	r3, [sp, #16]
 802308e:	2402      	movs	r4, #2
 8023090:	2b00      	cmp	r3, #0
 8023092:	d016      	beq.n	80230c2 <_dtoa_r+0x3d6>
 8023094:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023096:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023098:	220f      	movs	r2, #15
 802309a:	425d      	negs	r5, r3
 802309c:	402a      	ands	r2, r5
 802309e:	4bd7      	ldr	r3, [pc, #860]	@ (80233fc <_dtoa_r+0x710>)
 80230a0:	00d2      	lsls	r2, r2, #3
 80230a2:	189b      	adds	r3, r3, r2
 80230a4:	681a      	ldr	r2, [r3, #0]
 80230a6:	685b      	ldr	r3, [r3, #4]
 80230a8:	f7df fac8 	bl	800263c <__aeabi_dmul>
 80230ac:	2701      	movs	r7, #1
 80230ae:	2300      	movs	r3, #0
 80230b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80230b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80230b4:	4ed2      	ldr	r6, [pc, #840]	@ (8023400 <_dtoa_r+0x714>)
 80230b6:	112d      	asrs	r5, r5, #4
 80230b8:	2d00      	cmp	r5, #0
 80230ba:	d000      	beq.n	80230be <_dtoa_r+0x3d2>
 80230bc:	e0ba      	b.n	8023234 <_dtoa_r+0x548>
 80230be:	2b00      	cmp	r3, #0
 80230c0:	d1a1      	bne.n	8023006 <_dtoa_r+0x31a>
 80230c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80230c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80230c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80230c8:	2b00      	cmp	r3, #0
 80230ca:	d100      	bne.n	80230ce <_dtoa_r+0x3e2>
 80230cc:	e0bd      	b.n	802324a <_dtoa_r+0x55e>
 80230ce:	2200      	movs	r2, #0
 80230d0:	0030      	movs	r0, r6
 80230d2:	0039      	movs	r1, r7
 80230d4:	4bcb      	ldr	r3, [pc, #812]	@ (8023404 <_dtoa_r+0x718>)
 80230d6:	f7dd f9f1 	bl	80004bc <__aeabi_dcmplt>
 80230da:	2800      	cmp	r0, #0
 80230dc:	d100      	bne.n	80230e0 <_dtoa_r+0x3f4>
 80230de:	e0b4      	b.n	802324a <_dtoa_r+0x55e>
 80230e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	d100      	bne.n	80230e8 <_dtoa_r+0x3fc>
 80230e6:	e0b0      	b.n	802324a <_dtoa_r+0x55e>
 80230e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80230ea:	2b00      	cmp	r3, #0
 80230ec:	dd39      	ble.n	8023162 <_dtoa_r+0x476>
 80230ee:	9b04      	ldr	r3, [sp, #16]
 80230f0:	2200      	movs	r2, #0
 80230f2:	3b01      	subs	r3, #1
 80230f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80230f6:	0030      	movs	r0, r6
 80230f8:	4bc3      	ldr	r3, [pc, #780]	@ (8023408 <_dtoa_r+0x71c>)
 80230fa:	0039      	movs	r1, r7
 80230fc:	f7df fa9e 	bl	800263c <__aeabi_dmul>
 8023100:	900a      	str	r0, [sp, #40]	@ 0x28
 8023102:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023106:	3401      	adds	r4, #1
 8023108:	0020      	movs	r0, r4
 802310a:	9311      	str	r3, [sp, #68]	@ 0x44
 802310c:	f7e0 f958 	bl	80033c0 <__aeabi_i2d>
 8023110:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023114:	f7df fa92 	bl	800263c <__aeabi_dmul>
 8023118:	4bbc      	ldr	r3, [pc, #752]	@ (802340c <_dtoa_r+0x720>)
 802311a:	2200      	movs	r2, #0
 802311c:	f7de fae6 	bl	80016ec <__aeabi_dadd>
 8023120:	4bbb      	ldr	r3, [pc, #748]	@ (8023410 <_dtoa_r+0x724>)
 8023122:	0006      	movs	r6, r0
 8023124:	18cf      	adds	r7, r1, r3
 8023126:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023128:	2b00      	cmp	r3, #0
 802312a:	d000      	beq.n	802312e <_dtoa_r+0x442>
 802312c:	e091      	b.n	8023252 <_dtoa_r+0x566>
 802312e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023130:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023132:	2200      	movs	r2, #0
 8023134:	4bb7      	ldr	r3, [pc, #732]	@ (8023414 <_dtoa_r+0x728>)
 8023136:	f7df fd49 	bl	8002bcc <__aeabi_dsub>
 802313a:	0032      	movs	r2, r6
 802313c:	003b      	movs	r3, r7
 802313e:	0004      	movs	r4, r0
 8023140:	000d      	movs	r5, r1
 8023142:	f7dd f9cf 	bl	80004e4 <__aeabi_dcmpgt>
 8023146:	2800      	cmp	r0, #0
 8023148:	d000      	beq.n	802314c <_dtoa_r+0x460>
 802314a:	e29d      	b.n	8023688 <_dtoa_r+0x99c>
 802314c:	2180      	movs	r1, #128	@ 0x80
 802314e:	0609      	lsls	r1, r1, #24
 8023150:	187b      	adds	r3, r7, r1
 8023152:	0032      	movs	r2, r6
 8023154:	0020      	movs	r0, r4
 8023156:	0029      	movs	r1, r5
 8023158:	f7dd f9b0 	bl	80004bc <__aeabi_dcmplt>
 802315c:	2800      	cmp	r0, #0
 802315e:	d000      	beq.n	8023162 <_dtoa_r+0x476>
 8023160:	e130      	b.n	80233c4 <_dtoa_r+0x6d8>
 8023162:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023164:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023166:	930a      	str	r3, [sp, #40]	@ 0x28
 8023168:	940b      	str	r4, [sp, #44]	@ 0x2c
 802316a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802316c:	2b00      	cmp	r3, #0
 802316e:	da00      	bge.n	8023172 <_dtoa_r+0x486>
 8023170:	e177      	b.n	8023462 <_dtoa_r+0x776>
 8023172:	9a04      	ldr	r2, [sp, #16]
 8023174:	2a0e      	cmp	r2, #14
 8023176:	dd00      	ble.n	802317a <_dtoa_r+0x48e>
 8023178:	e173      	b.n	8023462 <_dtoa_r+0x776>
 802317a:	4ba0      	ldr	r3, [pc, #640]	@ (80233fc <_dtoa_r+0x710>)
 802317c:	00d2      	lsls	r2, r2, #3
 802317e:	189b      	adds	r3, r3, r2
 8023180:	685c      	ldr	r4, [r3, #4]
 8023182:	681b      	ldr	r3, [r3, #0]
 8023184:	9306      	str	r3, [sp, #24]
 8023186:	9407      	str	r4, [sp, #28]
 8023188:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802318a:	2b00      	cmp	r3, #0
 802318c:	da03      	bge.n	8023196 <_dtoa_r+0x4aa>
 802318e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023190:	2b00      	cmp	r3, #0
 8023192:	dc00      	bgt.n	8023196 <_dtoa_r+0x4aa>
 8023194:	e106      	b.n	80233a4 <_dtoa_r+0x6b8>
 8023196:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8023198:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802319a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802319c:	9d08      	ldr	r5, [sp, #32]
 802319e:	3b01      	subs	r3, #1
 80231a0:	195b      	adds	r3, r3, r5
 80231a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80231a4:	9a06      	ldr	r2, [sp, #24]
 80231a6:	9b07      	ldr	r3, [sp, #28]
 80231a8:	0030      	movs	r0, r6
 80231aa:	0039      	movs	r1, r7
 80231ac:	f7de fe02 	bl	8001db4 <__aeabi_ddiv>
 80231b0:	f7e0 f8ca 	bl	8003348 <__aeabi_d2iz>
 80231b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80231b6:	f7e0 f903 	bl	80033c0 <__aeabi_i2d>
 80231ba:	9a06      	ldr	r2, [sp, #24]
 80231bc:	9b07      	ldr	r3, [sp, #28]
 80231be:	f7df fa3d 	bl	800263c <__aeabi_dmul>
 80231c2:	0002      	movs	r2, r0
 80231c4:	000b      	movs	r3, r1
 80231c6:	0030      	movs	r0, r6
 80231c8:	0039      	movs	r1, r7
 80231ca:	f7df fcff 	bl	8002bcc <__aeabi_dsub>
 80231ce:	002b      	movs	r3, r5
 80231d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80231d2:	3501      	adds	r5, #1
 80231d4:	3230      	adds	r2, #48	@ 0x30
 80231d6:	701a      	strb	r2, [r3, #0]
 80231d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80231da:	002c      	movs	r4, r5
 80231dc:	429a      	cmp	r2, r3
 80231de:	d000      	beq.n	80231e2 <_dtoa_r+0x4f6>
 80231e0:	e131      	b.n	8023446 <_dtoa_r+0x75a>
 80231e2:	0002      	movs	r2, r0
 80231e4:	000b      	movs	r3, r1
 80231e6:	f7de fa81 	bl	80016ec <__aeabi_dadd>
 80231ea:	9a06      	ldr	r2, [sp, #24]
 80231ec:	9b07      	ldr	r3, [sp, #28]
 80231ee:	0006      	movs	r6, r0
 80231f0:	000f      	movs	r7, r1
 80231f2:	f7dd f977 	bl	80004e4 <__aeabi_dcmpgt>
 80231f6:	2800      	cmp	r0, #0
 80231f8:	d000      	beq.n	80231fc <_dtoa_r+0x510>
 80231fa:	e10f      	b.n	802341c <_dtoa_r+0x730>
 80231fc:	9a06      	ldr	r2, [sp, #24]
 80231fe:	9b07      	ldr	r3, [sp, #28]
 8023200:	0030      	movs	r0, r6
 8023202:	0039      	movs	r1, r7
 8023204:	f7dd f954 	bl	80004b0 <__aeabi_dcmpeq>
 8023208:	2800      	cmp	r0, #0
 802320a:	d003      	beq.n	8023214 <_dtoa_r+0x528>
 802320c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802320e:	07dd      	lsls	r5, r3, #31
 8023210:	d500      	bpl.n	8023214 <_dtoa_r+0x528>
 8023212:	e103      	b.n	802341c <_dtoa_r+0x730>
 8023214:	9905      	ldr	r1, [sp, #20]
 8023216:	9803      	ldr	r0, [sp, #12]
 8023218:	f001 f812 	bl	8024240 <_Bfree>
 802321c:	2300      	movs	r3, #0
 802321e:	7023      	strb	r3, [r4, #0]
 8023220:	9b04      	ldr	r3, [sp, #16]
 8023222:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023224:	3301      	adds	r3, #1
 8023226:	6013      	str	r3, [r2, #0]
 8023228:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802322a:	2b00      	cmp	r3, #0
 802322c:	d100      	bne.n	8023230 <_dtoa_r+0x544>
 802322e:	e5a7      	b.n	8022d80 <_dtoa_r+0x94>
 8023230:	601c      	str	r4, [r3, #0]
 8023232:	e5a5      	b.n	8022d80 <_dtoa_r+0x94>
 8023234:	423d      	tst	r5, r7
 8023236:	d005      	beq.n	8023244 <_dtoa_r+0x558>
 8023238:	6832      	ldr	r2, [r6, #0]
 802323a:	6873      	ldr	r3, [r6, #4]
 802323c:	f7df f9fe 	bl	800263c <__aeabi_dmul>
 8023240:	003b      	movs	r3, r7
 8023242:	3401      	adds	r4, #1
 8023244:	106d      	asrs	r5, r5, #1
 8023246:	3608      	adds	r6, #8
 8023248:	e736      	b.n	80230b8 <_dtoa_r+0x3cc>
 802324a:	9b04      	ldr	r3, [sp, #16]
 802324c:	930c      	str	r3, [sp, #48]	@ 0x30
 802324e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023250:	e75a      	b.n	8023108 <_dtoa_r+0x41c>
 8023252:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023254:	4b69      	ldr	r3, [pc, #420]	@ (80233fc <_dtoa_r+0x710>)
 8023256:	3a01      	subs	r2, #1
 8023258:	00d2      	lsls	r2, r2, #3
 802325a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802325c:	189b      	adds	r3, r3, r2
 802325e:	681a      	ldr	r2, [r3, #0]
 8023260:	685b      	ldr	r3, [r3, #4]
 8023262:	2900      	cmp	r1, #0
 8023264:	d04c      	beq.n	8023300 <_dtoa_r+0x614>
 8023266:	2000      	movs	r0, #0
 8023268:	496b      	ldr	r1, [pc, #428]	@ (8023418 <_dtoa_r+0x72c>)
 802326a:	f7de fda3 	bl	8001db4 <__aeabi_ddiv>
 802326e:	0032      	movs	r2, r6
 8023270:	003b      	movs	r3, r7
 8023272:	f7df fcab 	bl	8002bcc <__aeabi_dsub>
 8023276:	9a08      	ldr	r2, [sp, #32]
 8023278:	0006      	movs	r6, r0
 802327a:	4694      	mov	ip, r2
 802327c:	000f      	movs	r7, r1
 802327e:	9b08      	ldr	r3, [sp, #32]
 8023280:	9316      	str	r3, [sp, #88]	@ 0x58
 8023282:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023284:	4463      	add	r3, ip
 8023286:	9311      	str	r3, [sp, #68]	@ 0x44
 8023288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802328a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802328c:	f7e0 f85c 	bl	8003348 <__aeabi_d2iz>
 8023290:	0005      	movs	r5, r0
 8023292:	f7e0 f895 	bl	80033c0 <__aeabi_i2d>
 8023296:	0002      	movs	r2, r0
 8023298:	000b      	movs	r3, r1
 802329a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802329c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802329e:	f7df fc95 	bl	8002bcc <__aeabi_dsub>
 80232a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80232a4:	3530      	adds	r5, #48	@ 0x30
 80232a6:	1c5c      	adds	r4, r3, #1
 80232a8:	701d      	strb	r5, [r3, #0]
 80232aa:	0032      	movs	r2, r6
 80232ac:	003b      	movs	r3, r7
 80232ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80232b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80232b2:	f7dd f903 	bl	80004bc <__aeabi_dcmplt>
 80232b6:	2800      	cmp	r0, #0
 80232b8:	d16a      	bne.n	8023390 <_dtoa_r+0x6a4>
 80232ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80232bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80232be:	2000      	movs	r0, #0
 80232c0:	4950      	ldr	r1, [pc, #320]	@ (8023404 <_dtoa_r+0x718>)
 80232c2:	f7df fc83 	bl	8002bcc <__aeabi_dsub>
 80232c6:	0032      	movs	r2, r6
 80232c8:	003b      	movs	r3, r7
 80232ca:	f7dd f8f7 	bl	80004bc <__aeabi_dcmplt>
 80232ce:	2800      	cmp	r0, #0
 80232d0:	d000      	beq.n	80232d4 <_dtoa_r+0x5e8>
 80232d2:	e0a5      	b.n	8023420 <_dtoa_r+0x734>
 80232d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80232d6:	42a3      	cmp	r3, r4
 80232d8:	d100      	bne.n	80232dc <_dtoa_r+0x5f0>
 80232da:	e742      	b.n	8023162 <_dtoa_r+0x476>
 80232dc:	2200      	movs	r2, #0
 80232de:	0030      	movs	r0, r6
 80232e0:	0039      	movs	r1, r7
 80232e2:	4b49      	ldr	r3, [pc, #292]	@ (8023408 <_dtoa_r+0x71c>)
 80232e4:	f7df f9aa 	bl	800263c <__aeabi_dmul>
 80232e8:	2200      	movs	r2, #0
 80232ea:	0006      	movs	r6, r0
 80232ec:	000f      	movs	r7, r1
 80232ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80232f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80232f2:	4b45      	ldr	r3, [pc, #276]	@ (8023408 <_dtoa_r+0x71c>)
 80232f4:	f7df f9a2 	bl	800263c <__aeabi_dmul>
 80232f8:	9416      	str	r4, [sp, #88]	@ 0x58
 80232fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80232fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80232fe:	e7c3      	b.n	8023288 <_dtoa_r+0x59c>
 8023300:	0030      	movs	r0, r6
 8023302:	0039      	movs	r1, r7
 8023304:	f7df f99a 	bl	800263c <__aeabi_dmul>
 8023308:	9d08      	ldr	r5, [sp, #32]
 802330a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802330c:	002b      	movs	r3, r5
 802330e:	4694      	mov	ip, r2
 8023310:	9016      	str	r0, [sp, #88]	@ 0x58
 8023312:	9117      	str	r1, [sp, #92]	@ 0x5c
 8023314:	4463      	add	r3, ip
 8023316:	9319      	str	r3, [sp, #100]	@ 0x64
 8023318:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802331a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802331c:	f7e0 f814 	bl	8003348 <__aeabi_d2iz>
 8023320:	0004      	movs	r4, r0
 8023322:	f7e0 f84d 	bl	80033c0 <__aeabi_i2d>
 8023326:	000b      	movs	r3, r1
 8023328:	0002      	movs	r2, r0
 802332a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802332c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802332e:	f7df fc4d 	bl	8002bcc <__aeabi_dsub>
 8023332:	3430      	adds	r4, #48	@ 0x30
 8023334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023336:	702c      	strb	r4, [r5, #0]
 8023338:	3501      	adds	r5, #1
 802333a:	0006      	movs	r6, r0
 802333c:	000f      	movs	r7, r1
 802333e:	42ab      	cmp	r3, r5
 8023340:	d129      	bne.n	8023396 <_dtoa_r+0x6aa>
 8023342:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8023344:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023346:	9b08      	ldr	r3, [sp, #32]
 8023348:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802334a:	469c      	mov	ip, r3
 802334c:	2200      	movs	r2, #0
 802334e:	4b32      	ldr	r3, [pc, #200]	@ (8023418 <_dtoa_r+0x72c>)
 8023350:	4464      	add	r4, ip
 8023352:	f7de f9cb 	bl	80016ec <__aeabi_dadd>
 8023356:	0002      	movs	r2, r0
 8023358:	000b      	movs	r3, r1
 802335a:	0030      	movs	r0, r6
 802335c:	0039      	movs	r1, r7
 802335e:	f7dd f8c1 	bl	80004e4 <__aeabi_dcmpgt>
 8023362:	2800      	cmp	r0, #0
 8023364:	d15c      	bne.n	8023420 <_dtoa_r+0x734>
 8023366:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023368:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802336a:	2000      	movs	r0, #0
 802336c:	492a      	ldr	r1, [pc, #168]	@ (8023418 <_dtoa_r+0x72c>)
 802336e:	f7df fc2d 	bl	8002bcc <__aeabi_dsub>
 8023372:	0002      	movs	r2, r0
 8023374:	000b      	movs	r3, r1
 8023376:	0030      	movs	r0, r6
 8023378:	0039      	movs	r1, r7
 802337a:	f7dd f89f 	bl	80004bc <__aeabi_dcmplt>
 802337e:	2800      	cmp	r0, #0
 8023380:	d100      	bne.n	8023384 <_dtoa_r+0x698>
 8023382:	e6ee      	b.n	8023162 <_dtoa_r+0x476>
 8023384:	0023      	movs	r3, r4
 8023386:	3c01      	subs	r4, #1
 8023388:	7822      	ldrb	r2, [r4, #0]
 802338a:	2a30      	cmp	r2, #48	@ 0x30
 802338c:	d0fa      	beq.n	8023384 <_dtoa_r+0x698>
 802338e:	001c      	movs	r4, r3
 8023390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023392:	9304      	str	r3, [sp, #16]
 8023394:	e73e      	b.n	8023214 <_dtoa_r+0x528>
 8023396:	2200      	movs	r2, #0
 8023398:	4b1b      	ldr	r3, [pc, #108]	@ (8023408 <_dtoa_r+0x71c>)
 802339a:	f7df f94f 	bl	800263c <__aeabi_dmul>
 802339e:	900a      	str	r0, [sp, #40]	@ 0x28
 80233a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80233a2:	e7b9      	b.n	8023318 <_dtoa_r+0x62c>
 80233a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	d10c      	bne.n	80233c4 <_dtoa_r+0x6d8>
 80233aa:	9806      	ldr	r0, [sp, #24]
 80233ac:	9907      	ldr	r1, [sp, #28]
 80233ae:	2200      	movs	r2, #0
 80233b0:	4b18      	ldr	r3, [pc, #96]	@ (8023414 <_dtoa_r+0x728>)
 80233b2:	f7df f943 	bl	800263c <__aeabi_dmul>
 80233b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80233b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233ba:	f7dd f89d 	bl	80004f8 <__aeabi_dcmpge>
 80233be:	2800      	cmp	r0, #0
 80233c0:	d100      	bne.n	80233c4 <_dtoa_r+0x6d8>
 80233c2:	e164      	b.n	802368e <_dtoa_r+0x9a2>
 80233c4:	2600      	movs	r6, #0
 80233c6:	0037      	movs	r7, r6
 80233c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80233ca:	9c08      	ldr	r4, [sp, #32]
 80233cc:	43db      	mvns	r3, r3
 80233ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80233d0:	2300      	movs	r3, #0
 80233d2:	9304      	str	r3, [sp, #16]
 80233d4:	0031      	movs	r1, r6
 80233d6:	9803      	ldr	r0, [sp, #12]
 80233d8:	f000 ff32 	bl	8024240 <_Bfree>
 80233dc:	2f00      	cmp	r7, #0
 80233de:	d0d7      	beq.n	8023390 <_dtoa_r+0x6a4>
 80233e0:	9b04      	ldr	r3, [sp, #16]
 80233e2:	2b00      	cmp	r3, #0
 80233e4:	d005      	beq.n	80233f2 <_dtoa_r+0x706>
 80233e6:	42bb      	cmp	r3, r7
 80233e8:	d003      	beq.n	80233f2 <_dtoa_r+0x706>
 80233ea:	0019      	movs	r1, r3
 80233ec:	9803      	ldr	r0, [sp, #12]
 80233ee:	f000 ff27 	bl	8024240 <_Bfree>
 80233f2:	0039      	movs	r1, r7
 80233f4:	9803      	ldr	r0, [sp, #12]
 80233f6:	f000 ff23 	bl	8024240 <_Bfree>
 80233fa:	e7c9      	b.n	8023390 <_dtoa_r+0x6a4>
 80233fc:	08029618 	.word	0x08029618
 8023400:	080295f0 	.word	0x080295f0
 8023404:	3ff00000 	.word	0x3ff00000
 8023408:	40240000 	.word	0x40240000
 802340c:	401c0000 	.word	0x401c0000
 8023410:	fcc00000 	.word	0xfcc00000
 8023414:	40140000 	.word	0x40140000
 8023418:	3fe00000 	.word	0x3fe00000
 802341c:	9b04      	ldr	r3, [sp, #16]
 802341e:	930c      	str	r3, [sp, #48]	@ 0x30
 8023420:	0023      	movs	r3, r4
 8023422:	001c      	movs	r4, r3
 8023424:	3b01      	subs	r3, #1
 8023426:	781a      	ldrb	r2, [r3, #0]
 8023428:	2a39      	cmp	r2, #57	@ 0x39
 802342a:	d108      	bne.n	802343e <_dtoa_r+0x752>
 802342c:	9a08      	ldr	r2, [sp, #32]
 802342e:	429a      	cmp	r2, r3
 8023430:	d1f7      	bne.n	8023422 <_dtoa_r+0x736>
 8023432:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023434:	9908      	ldr	r1, [sp, #32]
 8023436:	3201      	adds	r2, #1
 8023438:	920c      	str	r2, [sp, #48]	@ 0x30
 802343a:	2230      	movs	r2, #48	@ 0x30
 802343c:	700a      	strb	r2, [r1, #0]
 802343e:	781a      	ldrb	r2, [r3, #0]
 8023440:	3201      	adds	r2, #1
 8023442:	701a      	strb	r2, [r3, #0]
 8023444:	e7a4      	b.n	8023390 <_dtoa_r+0x6a4>
 8023446:	2200      	movs	r2, #0
 8023448:	4bc6      	ldr	r3, [pc, #792]	@ (8023764 <_dtoa_r+0xa78>)
 802344a:	f7df f8f7 	bl	800263c <__aeabi_dmul>
 802344e:	2200      	movs	r2, #0
 8023450:	2300      	movs	r3, #0
 8023452:	0006      	movs	r6, r0
 8023454:	000f      	movs	r7, r1
 8023456:	f7dd f82b 	bl	80004b0 <__aeabi_dcmpeq>
 802345a:	2800      	cmp	r0, #0
 802345c:	d100      	bne.n	8023460 <_dtoa_r+0x774>
 802345e:	e6a1      	b.n	80231a4 <_dtoa_r+0x4b8>
 8023460:	e6d8      	b.n	8023214 <_dtoa_r+0x528>
 8023462:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8023464:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023466:	9c06      	ldr	r4, [sp, #24]
 8023468:	2f00      	cmp	r7, #0
 802346a:	d014      	beq.n	8023496 <_dtoa_r+0x7aa>
 802346c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802346e:	2a01      	cmp	r2, #1
 8023470:	dd00      	ble.n	8023474 <_dtoa_r+0x788>
 8023472:	e0c8      	b.n	8023606 <_dtoa_r+0x91a>
 8023474:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023476:	2a00      	cmp	r2, #0
 8023478:	d100      	bne.n	802347c <_dtoa_r+0x790>
 802347a:	e0be      	b.n	80235fa <_dtoa_r+0x90e>
 802347c:	4aba      	ldr	r2, [pc, #744]	@ (8023768 <_dtoa_r+0xa7c>)
 802347e:	189b      	adds	r3, r3, r2
 8023480:	9a06      	ldr	r2, [sp, #24]
 8023482:	2101      	movs	r1, #1
 8023484:	18d2      	adds	r2, r2, r3
 8023486:	9206      	str	r2, [sp, #24]
 8023488:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802348a:	9803      	ldr	r0, [sp, #12]
 802348c:	18d3      	adds	r3, r2, r3
 802348e:	930d      	str	r3, [sp, #52]	@ 0x34
 8023490:	f000 ffda 	bl	8024448 <__i2b>
 8023494:	0007      	movs	r7, r0
 8023496:	2c00      	cmp	r4, #0
 8023498:	d00e      	beq.n	80234b8 <_dtoa_r+0x7cc>
 802349a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802349c:	2b00      	cmp	r3, #0
 802349e:	dd0b      	ble.n	80234b8 <_dtoa_r+0x7cc>
 80234a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80234a2:	0023      	movs	r3, r4
 80234a4:	4294      	cmp	r4, r2
 80234a6:	dd00      	ble.n	80234aa <_dtoa_r+0x7be>
 80234a8:	0013      	movs	r3, r2
 80234aa:	9a06      	ldr	r2, [sp, #24]
 80234ac:	1ae4      	subs	r4, r4, r3
 80234ae:	1ad2      	subs	r2, r2, r3
 80234b0:	9206      	str	r2, [sp, #24]
 80234b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80234b4:	1ad3      	subs	r3, r2, r3
 80234b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80234b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80234ba:	2b00      	cmp	r3, #0
 80234bc:	d01f      	beq.n	80234fe <_dtoa_r+0x812>
 80234be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80234c0:	2b00      	cmp	r3, #0
 80234c2:	d100      	bne.n	80234c6 <_dtoa_r+0x7da>
 80234c4:	e0b5      	b.n	8023632 <_dtoa_r+0x946>
 80234c6:	2d00      	cmp	r5, #0
 80234c8:	d010      	beq.n	80234ec <_dtoa_r+0x800>
 80234ca:	0039      	movs	r1, r7
 80234cc:	002a      	movs	r2, r5
 80234ce:	9803      	ldr	r0, [sp, #12]
 80234d0:	f001 f884 	bl	80245dc <__pow5mult>
 80234d4:	9a05      	ldr	r2, [sp, #20]
 80234d6:	0001      	movs	r1, r0
 80234d8:	0007      	movs	r7, r0
 80234da:	9803      	ldr	r0, [sp, #12]
 80234dc:	f000 ffcc 	bl	8024478 <__multiply>
 80234e0:	0006      	movs	r6, r0
 80234e2:	9905      	ldr	r1, [sp, #20]
 80234e4:	9803      	ldr	r0, [sp, #12]
 80234e6:	f000 feab 	bl	8024240 <_Bfree>
 80234ea:	9605      	str	r6, [sp, #20]
 80234ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80234ee:	1b5a      	subs	r2, r3, r5
 80234f0:	42ab      	cmp	r3, r5
 80234f2:	d004      	beq.n	80234fe <_dtoa_r+0x812>
 80234f4:	9905      	ldr	r1, [sp, #20]
 80234f6:	9803      	ldr	r0, [sp, #12]
 80234f8:	f001 f870 	bl	80245dc <__pow5mult>
 80234fc:	9005      	str	r0, [sp, #20]
 80234fe:	2101      	movs	r1, #1
 8023500:	9803      	ldr	r0, [sp, #12]
 8023502:	f000 ffa1 	bl	8024448 <__i2b>
 8023506:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023508:	0006      	movs	r6, r0
 802350a:	2b00      	cmp	r3, #0
 802350c:	d100      	bne.n	8023510 <_dtoa_r+0x824>
 802350e:	e1bc      	b.n	802388a <_dtoa_r+0xb9e>
 8023510:	001a      	movs	r2, r3
 8023512:	0001      	movs	r1, r0
 8023514:	9803      	ldr	r0, [sp, #12]
 8023516:	f001 f861 	bl	80245dc <__pow5mult>
 802351a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802351c:	0006      	movs	r6, r0
 802351e:	2500      	movs	r5, #0
 8023520:	2b01      	cmp	r3, #1
 8023522:	dc16      	bgt.n	8023552 <_dtoa_r+0x866>
 8023524:	2500      	movs	r5, #0
 8023526:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023528:	42ab      	cmp	r3, r5
 802352a:	d10e      	bne.n	802354a <_dtoa_r+0x85e>
 802352c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802352e:	031b      	lsls	r3, r3, #12
 8023530:	42ab      	cmp	r3, r5
 8023532:	d10a      	bne.n	802354a <_dtoa_r+0x85e>
 8023534:	4b8d      	ldr	r3, [pc, #564]	@ (802376c <_dtoa_r+0xa80>)
 8023536:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023538:	4213      	tst	r3, r2
 802353a:	d006      	beq.n	802354a <_dtoa_r+0x85e>
 802353c:	9b06      	ldr	r3, [sp, #24]
 802353e:	3501      	adds	r5, #1
 8023540:	3301      	adds	r3, #1
 8023542:	9306      	str	r3, [sp, #24]
 8023544:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023546:	3301      	adds	r3, #1
 8023548:	930d      	str	r3, [sp, #52]	@ 0x34
 802354a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802354c:	2001      	movs	r0, #1
 802354e:	2b00      	cmp	r3, #0
 8023550:	d008      	beq.n	8023564 <_dtoa_r+0x878>
 8023552:	6933      	ldr	r3, [r6, #16]
 8023554:	3303      	adds	r3, #3
 8023556:	009b      	lsls	r3, r3, #2
 8023558:	18f3      	adds	r3, r6, r3
 802355a:	6858      	ldr	r0, [r3, #4]
 802355c:	f000 ff24 	bl	80243a8 <__hi0bits>
 8023560:	2320      	movs	r3, #32
 8023562:	1a18      	subs	r0, r3, r0
 8023564:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023566:	1818      	adds	r0, r3, r0
 8023568:	0002      	movs	r2, r0
 802356a:	231f      	movs	r3, #31
 802356c:	401a      	ands	r2, r3
 802356e:	4218      	tst	r0, r3
 8023570:	d065      	beq.n	802363e <_dtoa_r+0x952>
 8023572:	3301      	adds	r3, #1
 8023574:	1a9b      	subs	r3, r3, r2
 8023576:	2b04      	cmp	r3, #4
 8023578:	dd5d      	ble.n	8023636 <_dtoa_r+0x94a>
 802357a:	231c      	movs	r3, #28
 802357c:	1a9b      	subs	r3, r3, r2
 802357e:	9a06      	ldr	r2, [sp, #24]
 8023580:	18e4      	adds	r4, r4, r3
 8023582:	18d2      	adds	r2, r2, r3
 8023584:	9206      	str	r2, [sp, #24]
 8023586:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023588:	18d3      	adds	r3, r2, r3
 802358a:	930d      	str	r3, [sp, #52]	@ 0x34
 802358c:	9b06      	ldr	r3, [sp, #24]
 802358e:	2b00      	cmp	r3, #0
 8023590:	dd05      	ble.n	802359e <_dtoa_r+0x8b2>
 8023592:	001a      	movs	r2, r3
 8023594:	9905      	ldr	r1, [sp, #20]
 8023596:	9803      	ldr	r0, [sp, #12]
 8023598:	f001 f87c 	bl	8024694 <__lshift>
 802359c:	9005      	str	r0, [sp, #20]
 802359e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	dd05      	ble.n	80235b0 <_dtoa_r+0x8c4>
 80235a4:	0031      	movs	r1, r6
 80235a6:	001a      	movs	r2, r3
 80235a8:	9803      	ldr	r0, [sp, #12]
 80235aa:	f001 f873 	bl	8024694 <__lshift>
 80235ae:	0006      	movs	r6, r0
 80235b0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	d045      	beq.n	8023642 <_dtoa_r+0x956>
 80235b6:	0031      	movs	r1, r6
 80235b8:	9805      	ldr	r0, [sp, #20]
 80235ba:	f001 f8d7 	bl	802476c <__mcmp>
 80235be:	2800      	cmp	r0, #0
 80235c0:	da3f      	bge.n	8023642 <_dtoa_r+0x956>
 80235c2:	9b04      	ldr	r3, [sp, #16]
 80235c4:	220a      	movs	r2, #10
 80235c6:	3b01      	subs	r3, #1
 80235c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80235ca:	9905      	ldr	r1, [sp, #20]
 80235cc:	2300      	movs	r3, #0
 80235ce:	9803      	ldr	r0, [sp, #12]
 80235d0:	f000 fe5a 	bl	8024288 <__multadd>
 80235d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80235d6:	9005      	str	r0, [sp, #20]
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d100      	bne.n	80235de <_dtoa_r+0x8f2>
 80235dc:	e15c      	b.n	8023898 <_dtoa_r+0xbac>
 80235de:	2300      	movs	r3, #0
 80235e0:	0039      	movs	r1, r7
 80235e2:	220a      	movs	r2, #10
 80235e4:	9803      	ldr	r0, [sp, #12]
 80235e6:	f000 fe4f 	bl	8024288 <__multadd>
 80235ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80235ec:	0007      	movs	r7, r0
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	dc55      	bgt.n	802369e <_dtoa_r+0x9b2>
 80235f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80235f4:	2b02      	cmp	r3, #2
 80235f6:	dc2d      	bgt.n	8023654 <_dtoa_r+0x968>
 80235f8:	e051      	b.n	802369e <_dtoa_r+0x9b2>
 80235fa:	2336      	movs	r3, #54	@ 0x36
 80235fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80235fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023600:	9c06      	ldr	r4, [sp, #24]
 8023602:	1a9b      	subs	r3, r3, r2
 8023604:	e73c      	b.n	8023480 <_dtoa_r+0x794>
 8023606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023608:	1e5d      	subs	r5, r3, #1
 802360a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802360c:	42ab      	cmp	r3, r5
 802360e:	db08      	blt.n	8023622 <_dtoa_r+0x936>
 8023610:	1b5d      	subs	r5, r3, r5
 8023612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023614:	9c06      	ldr	r4, [sp, #24]
 8023616:	2b00      	cmp	r3, #0
 8023618:	db00      	blt.n	802361c <_dtoa_r+0x930>
 802361a:	e731      	b.n	8023480 <_dtoa_r+0x794>
 802361c:	1ae4      	subs	r4, r4, r3
 802361e:	2300      	movs	r3, #0
 8023620:	e72e      	b.n	8023480 <_dtoa_r+0x794>
 8023622:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023624:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023626:	1aeb      	subs	r3, r5, r3
 8023628:	18d3      	adds	r3, r2, r3
 802362a:	950f      	str	r5, [sp, #60]	@ 0x3c
 802362c:	9314      	str	r3, [sp, #80]	@ 0x50
 802362e:	2500      	movs	r5, #0
 8023630:	e7ef      	b.n	8023612 <_dtoa_r+0x926>
 8023632:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023634:	e75e      	b.n	80234f4 <_dtoa_r+0x808>
 8023636:	2b04      	cmp	r3, #4
 8023638:	d0a8      	beq.n	802358c <_dtoa_r+0x8a0>
 802363a:	331c      	adds	r3, #28
 802363c:	e79f      	b.n	802357e <_dtoa_r+0x892>
 802363e:	0013      	movs	r3, r2
 8023640:	e7fb      	b.n	802363a <_dtoa_r+0x94e>
 8023642:	9b04      	ldr	r3, [sp, #16]
 8023644:	930c      	str	r3, [sp, #48]	@ 0x30
 8023646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023648:	930e      	str	r3, [sp, #56]	@ 0x38
 802364a:	2b00      	cmp	r3, #0
 802364c:	dc23      	bgt.n	8023696 <_dtoa_r+0x9aa>
 802364e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023650:	2b02      	cmp	r3, #2
 8023652:	dd20      	ble.n	8023696 <_dtoa_r+0x9aa>
 8023654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023656:	2b00      	cmp	r3, #0
 8023658:	d000      	beq.n	802365c <_dtoa_r+0x970>
 802365a:	e6b5      	b.n	80233c8 <_dtoa_r+0x6dc>
 802365c:	0031      	movs	r1, r6
 802365e:	2205      	movs	r2, #5
 8023660:	9803      	ldr	r0, [sp, #12]
 8023662:	f000 fe11 	bl	8024288 <__multadd>
 8023666:	0006      	movs	r6, r0
 8023668:	0001      	movs	r1, r0
 802366a:	9805      	ldr	r0, [sp, #20]
 802366c:	f001 f87e 	bl	802476c <__mcmp>
 8023670:	2800      	cmp	r0, #0
 8023672:	dc00      	bgt.n	8023676 <_dtoa_r+0x98a>
 8023674:	e6a8      	b.n	80233c8 <_dtoa_r+0x6dc>
 8023676:	9b08      	ldr	r3, [sp, #32]
 8023678:	9a08      	ldr	r2, [sp, #32]
 802367a:	1c5c      	adds	r4, r3, #1
 802367c:	2331      	movs	r3, #49	@ 0x31
 802367e:	7013      	strb	r3, [r2, #0]
 8023680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023682:	3301      	adds	r3, #1
 8023684:	930c      	str	r3, [sp, #48]	@ 0x30
 8023686:	e6a3      	b.n	80233d0 <_dtoa_r+0x6e4>
 8023688:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802368a:	0037      	movs	r7, r6
 802368c:	e7f3      	b.n	8023676 <_dtoa_r+0x98a>
 802368e:	9b04      	ldr	r3, [sp, #16]
 8023690:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8023692:	930c      	str	r3, [sp, #48]	@ 0x30
 8023694:	e7f9      	b.n	802368a <_dtoa_r+0x99e>
 8023696:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023698:	2b00      	cmp	r3, #0
 802369a:	d100      	bne.n	802369e <_dtoa_r+0x9b2>
 802369c:	e100      	b.n	80238a0 <_dtoa_r+0xbb4>
 802369e:	2c00      	cmp	r4, #0
 80236a0:	dd05      	ble.n	80236ae <_dtoa_r+0x9c2>
 80236a2:	0039      	movs	r1, r7
 80236a4:	0022      	movs	r2, r4
 80236a6:	9803      	ldr	r0, [sp, #12]
 80236a8:	f000 fff4 	bl	8024694 <__lshift>
 80236ac:	0007      	movs	r7, r0
 80236ae:	0038      	movs	r0, r7
 80236b0:	2d00      	cmp	r5, #0
 80236b2:	d018      	beq.n	80236e6 <_dtoa_r+0x9fa>
 80236b4:	6879      	ldr	r1, [r7, #4]
 80236b6:	9803      	ldr	r0, [sp, #12]
 80236b8:	f000 fd7e 	bl	80241b8 <_Balloc>
 80236bc:	1e04      	subs	r4, r0, #0
 80236be:	d105      	bne.n	80236cc <_dtoa_r+0x9e0>
 80236c0:	0022      	movs	r2, r4
 80236c2:	4b2b      	ldr	r3, [pc, #172]	@ (8023770 <_dtoa_r+0xa84>)
 80236c4:	482b      	ldr	r0, [pc, #172]	@ (8023774 <_dtoa_r+0xa88>)
 80236c6:	492c      	ldr	r1, [pc, #176]	@ (8023778 <_dtoa_r+0xa8c>)
 80236c8:	f7ff fb25 	bl	8022d16 <_dtoa_r+0x2a>
 80236cc:	0039      	movs	r1, r7
 80236ce:	693a      	ldr	r2, [r7, #16]
 80236d0:	310c      	adds	r1, #12
 80236d2:	3202      	adds	r2, #2
 80236d4:	0092      	lsls	r2, r2, #2
 80236d6:	300c      	adds	r0, #12
 80236d8:	f7ff fa6a 	bl	8022bb0 <memcpy>
 80236dc:	2201      	movs	r2, #1
 80236de:	0021      	movs	r1, r4
 80236e0:	9803      	ldr	r0, [sp, #12]
 80236e2:	f000 ffd7 	bl	8024694 <__lshift>
 80236e6:	9b08      	ldr	r3, [sp, #32]
 80236e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80236ea:	9306      	str	r3, [sp, #24]
 80236ec:	3b01      	subs	r3, #1
 80236ee:	189b      	adds	r3, r3, r2
 80236f0:	2201      	movs	r2, #1
 80236f2:	9704      	str	r7, [sp, #16]
 80236f4:	0007      	movs	r7, r0
 80236f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80236f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80236fa:	4013      	ands	r3, r2
 80236fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80236fe:	0031      	movs	r1, r6
 8023700:	9805      	ldr	r0, [sp, #20]
 8023702:	f7ff fa65 	bl	8022bd0 <quorem>
 8023706:	9904      	ldr	r1, [sp, #16]
 8023708:	0005      	movs	r5, r0
 802370a:	900a      	str	r0, [sp, #40]	@ 0x28
 802370c:	9805      	ldr	r0, [sp, #20]
 802370e:	f001 f82d 	bl	802476c <__mcmp>
 8023712:	003a      	movs	r2, r7
 8023714:	900d      	str	r0, [sp, #52]	@ 0x34
 8023716:	0031      	movs	r1, r6
 8023718:	9803      	ldr	r0, [sp, #12]
 802371a:	f001 f843 	bl	80247a4 <__mdiff>
 802371e:	2201      	movs	r2, #1
 8023720:	68c3      	ldr	r3, [r0, #12]
 8023722:	0004      	movs	r4, r0
 8023724:	3530      	adds	r5, #48	@ 0x30
 8023726:	9209      	str	r2, [sp, #36]	@ 0x24
 8023728:	2b00      	cmp	r3, #0
 802372a:	d104      	bne.n	8023736 <_dtoa_r+0xa4a>
 802372c:	0001      	movs	r1, r0
 802372e:	9805      	ldr	r0, [sp, #20]
 8023730:	f001 f81c 	bl	802476c <__mcmp>
 8023734:	9009      	str	r0, [sp, #36]	@ 0x24
 8023736:	0021      	movs	r1, r4
 8023738:	9803      	ldr	r0, [sp, #12]
 802373a:	f000 fd81 	bl	8024240 <_Bfree>
 802373e:	9b06      	ldr	r3, [sp, #24]
 8023740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023742:	1c5c      	adds	r4, r3, #1
 8023744:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023746:	4313      	orrs	r3, r2
 8023748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802374a:	4313      	orrs	r3, r2
 802374c:	d116      	bne.n	802377c <_dtoa_r+0xa90>
 802374e:	2d39      	cmp	r5, #57	@ 0x39
 8023750:	d02f      	beq.n	80237b2 <_dtoa_r+0xac6>
 8023752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023754:	2b00      	cmp	r3, #0
 8023756:	dd01      	ble.n	802375c <_dtoa_r+0xa70>
 8023758:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802375a:	3531      	adds	r5, #49	@ 0x31
 802375c:	9b06      	ldr	r3, [sp, #24]
 802375e:	701d      	strb	r5, [r3, #0]
 8023760:	e638      	b.n	80233d4 <_dtoa_r+0x6e8>
 8023762:	46c0      	nop			@ (mov r8, r8)
 8023764:	40240000 	.word	0x40240000
 8023768:	00000433 	.word	0x00000433
 802376c:	7ff00000 	.word	0x7ff00000
 8023770:	08029519 	.word	0x08029519
 8023774:	080294c1 	.word	0x080294c1
 8023778:	000002ef 	.word	0x000002ef
 802377c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802377e:	2b00      	cmp	r3, #0
 8023780:	db04      	blt.n	802378c <_dtoa_r+0xaa0>
 8023782:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8023784:	4313      	orrs	r3, r2
 8023786:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023788:	4313      	orrs	r3, r2
 802378a:	d11e      	bne.n	80237ca <_dtoa_r+0xade>
 802378c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802378e:	2b00      	cmp	r3, #0
 8023790:	dde4      	ble.n	802375c <_dtoa_r+0xa70>
 8023792:	9905      	ldr	r1, [sp, #20]
 8023794:	2201      	movs	r2, #1
 8023796:	9803      	ldr	r0, [sp, #12]
 8023798:	f000 ff7c 	bl	8024694 <__lshift>
 802379c:	0031      	movs	r1, r6
 802379e:	9005      	str	r0, [sp, #20]
 80237a0:	f000 ffe4 	bl	802476c <__mcmp>
 80237a4:	2800      	cmp	r0, #0
 80237a6:	dc02      	bgt.n	80237ae <_dtoa_r+0xac2>
 80237a8:	d1d8      	bne.n	802375c <_dtoa_r+0xa70>
 80237aa:	07eb      	lsls	r3, r5, #31
 80237ac:	d5d6      	bpl.n	802375c <_dtoa_r+0xa70>
 80237ae:	2d39      	cmp	r5, #57	@ 0x39
 80237b0:	d1d2      	bne.n	8023758 <_dtoa_r+0xa6c>
 80237b2:	2339      	movs	r3, #57	@ 0x39
 80237b4:	9a06      	ldr	r2, [sp, #24]
 80237b6:	7013      	strb	r3, [r2, #0]
 80237b8:	0023      	movs	r3, r4
 80237ba:	001c      	movs	r4, r3
 80237bc:	3b01      	subs	r3, #1
 80237be:	781a      	ldrb	r2, [r3, #0]
 80237c0:	2a39      	cmp	r2, #57	@ 0x39
 80237c2:	d04f      	beq.n	8023864 <_dtoa_r+0xb78>
 80237c4:	3201      	adds	r2, #1
 80237c6:	701a      	strb	r2, [r3, #0]
 80237c8:	e604      	b.n	80233d4 <_dtoa_r+0x6e8>
 80237ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237cc:	2b00      	cmp	r3, #0
 80237ce:	dd03      	ble.n	80237d8 <_dtoa_r+0xaec>
 80237d0:	2d39      	cmp	r5, #57	@ 0x39
 80237d2:	d0ee      	beq.n	80237b2 <_dtoa_r+0xac6>
 80237d4:	3501      	adds	r5, #1
 80237d6:	e7c1      	b.n	802375c <_dtoa_r+0xa70>
 80237d8:	9b06      	ldr	r3, [sp, #24]
 80237da:	9a06      	ldr	r2, [sp, #24]
 80237dc:	701d      	strb	r5, [r3, #0]
 80237de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80237e0:	4293      	cmp	r3, r2
 80237e2:	d02a      	beq.n	802383a <_dtoa_r+0xb4e>
 80237e4:	2300      	movs	r3, #0
 80237e6:	220a      	movs	r2, #10
 80237e8:	9905      	ldr	r1, [sp, #20]
 80237ea:	9803      	ldr	r0, [sp, #12]
 80237ec:	f000 fd4c 	bl	8024288 <__multadd>
 80237f0:	9b04      	ldr	r3, [sp, #16]
 80237f2:	9005      	str	r0, [sp, #20]
 80237f4:	42bb      	cmp	r3, r7
 80237f6:	d109      	bne.n	802380c <_dtoa_r+0xb20>
 80237f8:	2300      	movs	r3, #0
 80237fa:	220a      	movs	r2, #10
 80237fc:	9904      	ldr	r1, [sp, #16]
 80237fe:	9803      	ldr	r0, [sp, #12]
 8023800:	f000 fd42 	bl	8024288 <__multadd>
 8023804:	9004      	str	r0, [sp, #16]
 8023806:	0007      	movs	r7, r0
 8023808:	9406      	str	r4, [sp, #24]
 802380a:	e778      	b.n	80236fe <_dtoa_r+0xa12>
 802380c:	9904      	ldr	r1, [sp, #16]
 802380e:	2300      	movs	r3, #0
 8023810:	220a      	movs	r2, #10
 8023812:	9803      	ldr	r0, [sp, #12]
 8023814:	f000 fd38 	bl	8024288 <__multadd>
 8023818:	2300      	movs	r3, #0
 802381a:	9004      	str	r0, [sp, #16]
 802381c:	220a      	movs	r2, #10
 802381e:	0039      	movs	r1, r7
 8023820:	9803      	ldr	r0, [sp, #12]
 8023822:	f000 fd31 	bl	8024288 <__multadd>
 8023826:	e7ee      	b.n	8023806 <_dtoa_r+0xb1a>
 8023828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802382a:	2401      	movs	r4, #1
 802382c:	2b00      	cmp	r3, #0
 802382e:	dd00      	ble.n	8023832 <_dtoa_r+0xb46>
 8023830:	001c      	movs	r4, r3
 8023832:	9b08      	ldr	r3, [sp, #32]
 8023834:	191c      	adds	r4, r3, r4
 8023836:	2300      	movs	r3, #0
 8023838:	9304      	str	r3, [sp, #16]
 802383a:	9905      	ldr	r1, [sp, #20]
 802383c:	2201      	movs	r2, #1
 802383e:	9803      	ldr	r0, [sp, #12]
 8023840:	f000 ff28 	bl	8024694 <__lshift>
 8023844:	0031      	movs	r1, r6
 8023846:	9005      	str	r0, [sp, #20]
 8023848:	f000 ff90 	bl	802476c <__mcmp>
 802384c:	2800      	cmp	r0, #0
 802384e:	dcb3      	bgt.n	80237b8 <_dtoa_r+0xacc>
 8023850:	d101      	bne.n	8023856 <_dtoa_r+0xb6a>
 8023852:	07ed      	lsls	r5, r5, #31
 8023854:	d4b0      	bmi.n	80237b8 <_dtoa_r+0xacc>
 8023856:	0023      	movs	r3, r4
 8023858:	001c      	movs	r4, r3
 802385a:	3b01      	subs	r3, #1
 802385c:	781a      	ldrb	r2, [r3, #0]
 802385e:	2a30      	cmp	r2, #48	@ 0x30
 8023860:	d0fa      	beq.n	8023858 <_dtoa_r+0xb6c>
 8023862:	e5b7      	b.n	80233d4 <_dtoa_r+0x6e8>
 8023864:	9a08      	ldr	r2, [sp, #32]
 8023866:	429a      	cmp	r2, r3
 8023868:	d1a7      	bne.n	80237ba <_dtoa_r+0xace>
 802386a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802386c:	3301      	adds	r3, #1
 802386e:	930c      	str	r3, [sp, #48]	@ 0x30
 8023870:	2331      	movs	r3, #49	@ 0x31
 8023872:	7013      	strb	r3, [r2, #0]
 8023874:	e5ae      	b.n	80233d4 <_dtoa_r+0x6e8>
 8023876:	4b15      	ldr	r3, [pc, #84]	@ (80238cc <_dtoa_r+0xbe0>)
 8023878:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802387a:	9308      	str	r3, [sp, #32]
 802387c:	4b14      	ldr	r3, [pc, #80]	@ (80238d0 <_dtoa_r+0xbe4>)
 802387e:	2a00      	cmp	r2, #0
 8023880:	d001      	beq.n	8023886 <_dtoa_r+0xb9a>
 8023882:	f7ff fa7b 	bl	8022d7c <_dtoa_r+0x90>
 8023886:	f7ff fa7b 	bl	8022d80 <_dtoa_r+0x94>
 802388a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802388c:	2b01      	cmp	r3, #1
 802388e:	dc00      	bgt.n	8023892 <_dtoa_r+0xba6>
 8023890:	e648      	b.n	8023524 <_dtoa_r+0x838>
 8023892:	2001      	movs	r0, #1
 8023894:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8023896:	e665      	b.n	8023564 <_dtoa_r+0x878>
 8023898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802389a:	2b00      	cmp	r3, #0
 802389c:	dc00      	bgt.n	80238a0 <_dtoa_r+0xbb4>
 802389e:	e6d6      	b.n	802364e <_dtoa_r+0x962>
 80238a0:	2400      	movs	r4, #0
 80238a2:	0031      	movs	r1, r6
 80238a4:	9805      	ldr	r0, [sp, #20]
 80238a6:	f7ff f993 	bl	8022bd0 <quorem>
 80238aa:	9b08      	ldr	r3, [sp, #32]
 80238ac:	3030      	adds	r0, #48	@ 0x30
 80238ae:	5518      	strb	r0, [r3, r4]
 80238b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80238b2:	3401      	adds	r4, #1
 80238b4:	0005      	movs	r5, r0
 80238b6:	429c      	cmp	r4, r3
 80238b8:	dab6      	bge.n	8023828 <_dtoa_r+0xb3c>
 80238ba:	2300      	movs	r3, #0
 80238bc:	220a      	movs	r2, #10
 80238be:	9905      	ldr	r1, [sp, #20]
 80238c0:	9803      	ldr	r0, [sp, #12]
 80238c2:	f000 fce1 	bl	8024288 <__multadd>
 80238c6:	9005      	str	r0, [sp, #20]
 80238c8:	e7eb      	b.n	80238a2 <_dtoa_r+0xbb6>
 80238ca:	46c0      	nop			@ (mov r8, r8)
 80238cc:	0802949d 	.word	0x0802949d
 80238d0:	080294a5 	.word	0x080294a5

080238d4 <_free_r>:
 80238d4:	b570      	push	{r4, r5, r6, lr}
 80238d6:	0005      	movs	r5, r0
 80238d8:	1e0c      	subs	r4, r1, #0
 80238da:	d010      	beq.n	80238fe <_free_r+0x2a>
 80238dc:	3c04      	subs	r4, #4
 80238de:	6823      	ldr	r3, [r4, #0]
 80238e0:	2b00      	cmp	r3, #0
 80238e2:	da00      	bge.n	80238e6 <_free_r+0x12>
 80238e4:	18e4      	adds	r4, r4, r3
 80238e6:	0028      	movs	r0, r5
 80238e8:	f000 fc56 	bl	8024198 <__malloc_lock>
 80238ec:	4a1d      	ldr	r2, [pc, #116]	@ (8023964 <_free_r+0x90>)
 80238ee:	6813      	ldr	r3, [r2, #0]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d105      	bne.n	8023900 <_free_r+0x2c>
 80238f4:	6063      	str	r3, [r4, #4]
 80238f6:	6014      	str	r4, [r2, #0]
 80238f8:	0028      	movs	r0, r5
 80238fa:	f000 fc55 	bl	80241a8 <__malloc_unlock>
 80238fe:	bd70      	pop	{r4, r5, r6, pc}
 8023900:	42a3      	cmp	r3, r4
 8023902:	d908      	bls.n	8023916 <_free_r+0x42>
 8023904:	6820      	ldr	r0, [r4, #0]
 8023906:	1821      	adds	r1, r4, r0
 8023908:	428b      	cmp	r3, r1
 802390a:	d1f3      	bne.n	80238f4 <_free_r+0x20>
 802390c:	6819      	ldr	r1, [r3, #0]
 802390e:	685b      	ldr	r3, [r3, #4]
 8023910:	1809      	adds	r1, r1, r0
 8023912:	6021      	str	r1, [r4, #0]
 8023914:	e7ee      	b.n	80238f4 <_free_r+0x20>
 8023916:	001a      	movs	r2, r3
 8023918:	685b      	ldr	r3, [r3, #4]
 802391a:	2b00      	cmp	r3, #0
 802391c:	d001      	beq.n	8023922 <_free_r+0x4e>
 802391e:	42a3      	cmp	r3, r4
 8023920:	d9f9      	bls.n	8023916 <_free_r+0x42>
 8023922:	6811      	ldr	r1, [r2, #0]
 8023924:	1850      	adds	r0, r2, r1
 8023926:	42a0      	cmp	r0, r4
 8023928:	d10b      	bne.n	8023942 <_free_r+0x6e>
 802392a:	6820      	ldr	r0, [r4, #0]
 802392c:	1809      	adds	r1, r1, r0
 802392e:	1850      	adds	r0, r2, r1
 8023930:	6011      	str	r1, [r2, #0]
 8023932:	4283      	cmp	r3, r0
 8023934:	d1e0      	bne.n	80238f8 <_free_r+0x24>
 8023936:	6818      	ldr	r0, [r3, #0]
 8023938:	685b      	ldr	r3, [r3, #4]
 802393a:	1841      	adds	r1, r0, r1
 802393c:	6011      	str	r1, [r2, #0]
 802393e:	6053      	str	r3, [r2, #4]
 8023940:	e7da      	b.n	80238f8 <_free_r+0x24>
 8023942:	42a0      	cmp	r0, r4
 8023944:	d902      	bls.n	802394c <_free_r+0x78>
 8023946:	230c      	movs	r3, #12
 8023948:	602b      	str	r3, [r5, #0]
 802394a:	e7d5      	b.n	80238f8 <_free_r+0x24>
 802394c:	6820      	ldr	r0, [r4, #0]
 802394e:	1821      	adds	r1, r4, r0
 8023950:	428b      	cmp	r3, r1
 8023952:	d103      	bne.n	802395c <_free_r+0x88>
 8023954:	6819      	ldr	r1, [r3, #0]
 8023956:	685b      	ldr	r3, [r3, #4]
 8023958:	1809      	adds	r1, r1, r0
 802395a:	6021      	str	r1, [r4, #0]
 802395c:	6063      	str	r3, [r4, #4]
 802395e:	6054      	str	r4, [r2, #4]
 8023960:	e7ca      	b.n	80238f8 <_free_r+0x24>
 8023962:	46c0      	nop			@ (mov r8, r8)
 8023964:	20003598 	.word	0x20003598

08023968 <rshift>:
 8023968:	0002      	movs	r2, r0
 802396a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802396c:	6904      	ldr	r4, [r0, #16]
 802396e:	b085      	sub	sp, #20
 8023970:	3214      	adds	r2, #20
 8023972:	114b      	asrs	r3, r1, #5
 8023974:	0016      	movs	r6, r2
 8023976:	9302      	str	r3, [sp, #8]
 8023978:	429c      	cmp	r4, r3
 802397a:	dd31      	ble.n	80239e0 <rshift+0x78>
 802397c:	261f      	movs	r6, #31
 802397e:	000f      	movs	r7, r1
 8023980:	009b      	lsls	r3, r3, #2
 8023982:	00a5      	lsls	r5, r4, #2
 8023984:	18d3      	adds	r3, r2, r3
 8023986:	4037      	ands	r7, r6
 8023988:	1955      	adds	r5, r2, r5
 802398a:	9300      	str	r3, [sp, #0]
 802398c:	9701      	str	r7, [sp, #4]
 802398e:	4231      	tst	r1, r6
 8023990:	d10d      	bne.n	80239ae <rshift+0x46>
 8023992:	0016      	movs	r6, r2
 8023994:	0019      	movs	r1, r3
 8023996:	428d      	cmp	r5, r1
 8023998:	d836      	bhi.n	8023a08 <rshift+0xa0>
 802399a:	9b00      	ldr	r3, [sp, #0]
 802399c:	2600      	movs	r6, #0
 802399e:	3b03      	subs	r3, #3
 80239a0:	429d      	cmp	r5, r3
 80239a2:	d302      	bcc.n	80239aa <rshift+0x42>
 80239a4:	9b02      	ldr	r3, [sp, #8]
 80239a6:	1ae4      	subs	r4, r4, r3
 80239a8:	00a6      	lsls	r6, r4, #2
 80239aa:	1996      	adds	r6, r2, r6
 80239ac:	e018      	b.n	80239e0 <rshift+0x78>
 80239ae:	2120      	movs	r1, #32
 80239b0:	9e01      	ldr	r6, [sp, #4]
 80239b2:	9f01      	ldr	r7, [sp, #4]
 80239b4:	1b89      	subs	r1, r1, r6
 80239b6:	9e00      	ldr	r6, [sp, #0]
 80239b8:	9103      	str	r1, [sp, #12]
 80239ba:	ce02      	ldmia	r6!, {r1}
 80239bc:	4694      	mov	ip, r2
 80239be:	40f9      	lsrs	r1, r7
 80239c0:	42b5      	cmp	r5, r6
 80239c2:	d816      	bhi.n	80239f2 <rshift+0x8a>
 80239c4:	9b00      	ldr	r3, [sp, #0]
 80239c6:	2600      	movs	r6, #0
 80239c8:	3301      	adds	r3, #1
 80239ca:	429d      	cmp	r5, r3
 80239cc:	d303      	bcc.n	80239d6 <rshift+0x6e>
 80239ce:	9b02      	ldr	r3, [sp, #8]
 80239d0:	1ae4      	subs	r4, r4, r3
 80239d2:	00a6      	lsls	r6, r4, #2
 80239d4:	3e04      	subs	r6, #4
 80239d6:	1996      	adds	r6, r2, r6
 80239d8:	6031      	str	r1, [r6, #0]
 80239da:	2900      	cmp	r1, #0
 80239dc:	d000      	beq.n	80239e0 <rshift+0x78>
 80239de:	3604      	adds	r6, #4
 80239e0:	1ab1      	subs	r1, r6, r2
 80239e2:	1089      	asrs	r1, r1, #2
 80239e4:	6101      	str	r1, [r0, #16]
 80239e6:	4296      	cmp	r6, r2
 80239e8:	d101      	bne.n	80239ee <rshift+0x86>
 80239ea:	2300      	movs	r3, #0
 80239ec:	6143      	str	r3, [r0, #20]
 80239ee:	b005      	add	sp, #20
 80239f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80239f2:	6837      	ldr	r7, [r6, #0]
 80239f4:	9b03      	ldr	r3, [sp, #12]
 80239f6:	409f      	lsls	r7, r3
 80239f8:	430f      	orrs	r7, r1
 80239fa:	4661      	mov	r1, ip
 80239fc:	c180      	stmia	r1!, {r7}
 80239fe:	468c      	mov	ip, r1
 8023a00:	9b01      	ldr	r3, [sp, #4]
 8023a02:	ce02      	ldmia	r6!, {r1}
 8023a04:	40d9      	lsrs	r1, r3
 8023a06:	e7db      	b.n	80239c0 <rshift+0x58>
 8023a08:	c980      	ldmia	r1!, {r7}
 8023a0a:	c680      	stmia	r6!, {r7}
 8023a0c:	e7c3      	b.n	8023996 <rshift+0x2e>

08023a0e <__hexdig_fun>:
 8023a0e:	0002      	movs	r2, r0
 8023a10:	3a30      	subs	r2, #48	@ 0x30
 8023a12:	0003      	movs	r3, r0
 8023a14:	2a09      	cmp	r2, #9
 8023a16:	d802      	bhi.n	8023a1e <__hexdig_fun+0x10>
 8023a18:	3b20      	subs	r3, #32
 8023a1a:	b2d8      	uxtb	r0, r3
 8023a1c:	4770      	bx	lr
 8023a1e:	0002      	movs	r2, r0
 8023a20:	3a61      	subs	r2, #97	@ 0x61
 8023a22:	2a05      	cmp	r2, #5
 8023a24:	d801      	bhi.n	8023a2a <__hexdig_fun+0x1c>
 8023a26:	3b47      	subs	r3, #71	@ 0x47
 8023a28:	e7f7      	b.n	8023a1a <__hexdig_fun+0xc>
 8023a2a:	001a      	movs	r2, r3
 8023a2c:	3a41      	subs	r2, #65	@ 0x41
 8023a2e:	2000      	movs	r0, #0
 8023a30:	2a05      	cmp	r2, #5
 8023a32:	d8f3      	bhi.n	8023a1c <__hexdig_fun+0xe>
 8023a34:	3b27      	subs	r3, #39	@ 0x27
 8023a36:	e7f0      	b.n	8023a1a <__hexdig_fun+0xc>

08023a38 <__gethex>:
 8023a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a3a:	b089      	sub	sp, #36	@ 0x24
 8023a3c:	9307      	str	r3, [sp, #28]
 8023a3e:	680b      	ldr	r3, [r1, #0]
 8023a40:	9201      	str	r2, [sp, #4]
 8023a42:	9003      	str	r0, [sp, #12]
 8023a44:	9106      	str	r1, [sp, #24]
 8023a46:	1c9a      	adds	r2, r3, #2
 8023a48:	0011      	movs	r1, r2
 8023a4a:	3201      	adds	r2, #1
 8023a4c:	1e50      	subs	r0, r2, #1
 8023a4e:	7800      	ldrb	r0, [r0, #0]
 8023a50:	2830      	cmp	r0, #48	@ 0x30
 8023a52:	d0f9      	beq.n	8023a48 <__gethex+0x10>
 8023a54:	1acb      	subs	r3, r1, r3
 8023a56:	3b02      	subs	r3, #2
 8023a58:	9305      	str	r3, [sp, #20]
 8023a5a:	9100      	str	r1, [sp, #0]
 8023a5c:	f7ff ffd7 	bl	8023a0e <__hexdig_fun>
 8023a60:	2300      	movs	r3, #0
 8023a62:	001d      	movs	r5, r3
 8023a64:	9302      	str	r3, [sp, #8]
 8023a66:	4298      	cmp	r0, r3
 8023a68:	d11e      	bne.n	8023aa8 <__gethex+0x70>
 8023a6a:	2201      	movs	r2, #1
 8023a6c:	49a6      	ldr	r1, [pc, #664]	@ (8023d08 <__gethex+0x2d0>)
 8023a6e:	9800      	ldr	r0, [sp, #0]
 8023a70:	f7fe ffd8 	bl	8022a24 <strncmp>
 8023a74:	0007      	movs	r7, r0
 8023a76:	42a8      	cmp	r0, r5
 8023a78:	d000      	beq.n	8023a7c <__gethex+0x44>
 8023a7a:	e06a      	b.n	8023b52 <__gethex+0x11a>
 8023a7c:	9b00      	ldr	r3, [sp, #0]
 8023a7e:	7858      	ldrb	r0, [r3, #1]
 8023a80:	1c5c      	adds	r4, r3, #1
 8023a82:	f7ff ffc4 	bl	8023a0e <__hexdig_fun>
 8023a86:	2301      	movs	r3, #1
 8023a88:	9302      	str	r3, [sp, #8]
 8023a8a:	42a8      	cmp	r0, r5
 8023a8c:	d02f      	beq.n	8023aee <__gethex+0xb6>
 8023a8e:	9400      	str	r4, [sp, #0]
 8023a90:	9b00      	ldr	r3, [sp, #0]
 8023a92:	7818      	ldrb	r0, [r3, #0]
 8023a94:	2830      	cmp	r0, #48	@ 0x30
 8023a96:	d009      	beq.n	8023aac <__gethex+0x74>
 8023a98:	f7ff ffb9 	bl	8023a0e <__hexdig_fun>
 8023a9c:	4242      	negs	r2, r0
 8023a9e:	4142      	adcs	r2, r0
 8023aa0:	2301      	movs	r3, #1
 8023aa2:	0025      	movs	r5, r4
 8023aa4:	9202      	str	r2, [sp, #8]
 8023aa6:	9305      	str	r3, [sp, #20]
 8023aa8:	9c00      	ldr	r4, [sp, #0]
 8023aaa:	e004      	b.n	8023ab6 <__gethex+0x7e>
 8023aac:	9b00      	ldr	r3, [sp, #0]
 8023aae:	3301      	adds	r3, #1
 8023ab0:	9300      	str	r3, [sp, #0]
 8023ab2:	e7ed      	b.n	8023a90 <__gethex+0x58>
 8023ab4:	3401      	adds	r4, #1
 8023ab6:	7820      	ldrb	r0, [r4, #0]
 8023ab8:	f7ff ffa9 	bl	8023a0e <__hexdig_fun>
 8023abc:	1e07      	subs	r7, r0, #0
 8023abe:	d1f9      	bne.n	8023ab4 <__gethex+0x7c>
 8023ac0:	2201      	movs	r2, #1
 8023ac2:	0020      	movs	r0, r4
 8023ac4:	4990      	ldr	r1, [pc, #576]	@ (8023d08 <__gethex+0x2d0>)
 8023ac6:	f7fe ffad 	bl	8022a24 <strncmp>
 8023aca:	2800      	cmp	r0, #0
 8023acc:	d10d      	bne.n	8023aea <__gethex+0xb2>
 8023ace:	2d00      	cmp	r5, #0
 8023ad0:	d106      	bne.n	8023ae0 <__gethex+0xa8>
 8023ad2:	3401      	adds	r4, #1
 8023ad4:	0025      	movs	r5, r4
 8023ad6:	7820      	ldrb	r0, [r4, #0]
 8023ad8:	f7ff ff99 	bl	8023a0e <__hexdig_fun>
 8023adc:	2800      	cmp	r0, #0
 8023ade:	d102      	bne.n	8023ae6 <__gethex+0xae>
 8023ae0:	1b2d      	subs	r5, r5, r4
 8023ae2:	00af      	lsls	r7, r5, #2
 8023ae4:	e003      	b.n	8023aee <__gethex+0xb6>
 8023ae6:	3401      	adds	r4, #1
 8023ae8:	e7f5      	b.n	8023ad6 <__gethex+0x9e>
 8023aea:	2d00      	cmp	r5, #0
 8023aec:	d1f8      	bne.n	8023ae0 <__gethex+0xa8>
 8023aee:	2220      	movs	r2, #32
 8023af0:	7823      	ldrb	r3, [r4, #0]
 8023af2:	0026      	movs	r6, r4
 8023af4:	4393      	bics	r3, r2
 8023af6:	2b50      	cmp	r3, #80	@ 0x50
 8023af8:	d11d      	bne.n	8023b36 <__gethex+0xfe>
 8023afa:	7863      	ldrb	r3, [r4, #1]
 8023afc:	2b2b      	cmp	r3, #43	@ 0x2b
 8023afe:	d02d      	beq.n	8023b5c <__gethex+0x124>
 8023b00:	2b2d      	cmp	r3, #45	@ 0x2d
 8023b02:	d02f      	beq.n	8023b64 <__gethex+0x12c>
 8023b04:	2300      	movs	r3, #0
 8023b06:	1c66      	adds	r6, r4, #1
 8023b08:	9304      	str	r3, [sp, #16]
 8023b0a:	7830      	ldrb	r0, [r6, #0]
 8023b0c:	f7ff ff7f 	bl	8023a0e <__hexdig_fun>
 8023b10:	1e43      	subs	r3, r0, #1
 8023b12:	b2db      	uxtb	r3, r3
 8023b14:	0005      	movs	r5, r0
 8023b16:	2b18      	cmp	r3, #24
 8023b18:	d82a      	bhi.n	8023b70 <__gethex+0x138>
 8023b1a:	7870      	ldrb	r0, [r6, #1]
 8023b1c:	f7ff ff77 	bl	8023a0e <__hexdig_fun>
 8023b20:	1e43      	subs	r3, r0, #1
 8023b22:	b2db      	uxtb	r3, r3
 8023b24:	3601      	adds	r6, #1
 8023b26:	3d10      	subs	r5, #16
 8023b28:	2b18      	cmp	r3, #24
 8023b2a:	d91d      	bls.n	8023b68 <__gethex+0x130>
 8023b2c:	9b04      	ldr	r3, [sp, #16]
 8023b2e:	2b00      	cmp	r3, #0
 8023b30:	d000      	beq.n	8023b34 <__gethex+0xfc>
 8023b32:	426d      	negs	r5, r5
 8023b34:	197f      	adds	r7, r7, r5
 8023b36:	9b06      	ldr	r3, [sp, #24]
 8023b38:	601e      	str	r6, [r3, #0]
 8023b3a:	9b02      	ldr	r3, [sp, #8]
 8023b3c:	2b00      	cmp	r3, #0
 8023b3e:	d019      	beq.n	8023b74 <__gethex+0x13c>
 8023b40:	9b05      	ldr	r3, [sp, #20]
 8023b42:	2606      	movs	r6, #6
 8023b44:	425a      	negs	r2, r3
 8023b46:	4153      	adcs	r3, r2
 8023b48:	425b      	negs	r3, r3
 8023b4a:	401e      	ands	r6, r3
 8023b4c:	0030      	movs	r0, r6
 8023b4e:	b009      	add	sp, #36	@ 0x24
 8023b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b52:	2301      	movs	r3, #1
 8023b54:	2700      	movs	r7, #0
 8023b56:	9c00      	ldr	r4, [sp, #0]
 8023b58:	9302      	str	r3, [sp, #8]
 8023b5a:	e7c8      	b.n	8023aee <__gethex+0xb6>
 8023b5c:	2300      	movs	r3, #0
 8023b5e:	9304      	str	r3, [sp, #16]
 8023b60:	1ca6      	adds	r6, r4, #2
 8023b62:	e7d2      	b.n	8023b0a <__gethex+0xd2>
 8023b64:	2301      	movs	r3, #1
 8023b66:	e7fa      	b.n	8023b5e <__gethex+0x126>
 8023b68:	230a      	movs	r3, #10
 8023b6a:	435d      	muls	r5, r3
 8023b6c:	182d      	adds	r5, r5, r0
 8023b6e:	e7d4      	b.n	8023b1a <__gethex+0xe2>
 8023b70:	0026      	movs	r6, r4
 8023b72:	e7e0      	b.n	8023b36 <__gethex+0xfe>
 8023b74:	9b00      	ldr	r3, [sp, #0]
 8023b76:	9902      	ldr	r1, [sp, #8]
 8023b78:	1ae3      	subs	r3, r4, r3
 8023b7a:	3b01      	subs	r3, #1
 8023b7c:	2b07      	cmp	r3, #7
 8023b7e:	dc0a      	bgt.n	8023b96 <__gethex+0x15e>
 8023b80:	9803      	ldr	r0, [sp, #12]
 8023b82:	f000 fb19 	bl	80241b8 <_Balloc>
 8023b86:	1e05      	subs	r5, r0, #0
 8023b88:	d108      	bne.n	8023b9c <__gethex+0x164>
 8023b8a:	002a      	movs	r2, r5
 8023b8c:	21e4      	movs	r1, #228	@ 0xe4
 8023b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8023d0c <__gethex+0x2d4>)
 8023b90:	485f      	ldr	r0, [pc, #380]	@ (8023d10 <__gethex+0x2d8>)
 8023b92:	f001 fbf1 	bl	8025378 <__assert_func>
 8023b96:	3101      	adds	r1, #1
 8023b98:	105b      	asrs	r3, r3, #1
 8023b9a:	e7ef      	b.n	8023b7c <__gethex+0x144>
 8023b9c:	0003      	movs	r3, r0
 8023b9e:	3314      	adds	r3, #20
 8023ba0:	9302      	str	r3, [sp, #8]
 8023ba2:	9305      	str	r3, [sp, #20]
 8023ba4:	2300      	movs	r3, #0
 8023ba6:	001e      	movs	r6, r3
 8023ba8:	9304      	str	r3, [sp, #16]
 8023baa:	9b00      	ldr	r3, [sp, #0]
 8023bac:	42a3      	cmp	r3, r4
 8023bae:	d338      	bcc.n	8023c22 <__gethex+0x1ea>
 8023bb0:	9c05      	ldr	r4, [sp, #20]
 8023bb2:	9b02      	ldr	r3, [sp, #8]
 8023bb4:	c440      	stmia	r4!, {r6}
 8023bb6:	1ae4      	subs	r4, r4, r3
 8023bb8:	10a4      	asrs	r4, r4, #2
 8023bba:	0030      	movs	r0, r6
 8023bbc:	612c      	str	r4, [r5, #16]
 8023bbe:	f000 fbf3 	bl	80243a8 <__hi0bits>
 8023bc2:	9b01      	ldr	r3, [sp, #4]
 8023bc4:	0164      	lsls	r4, r4, #5
 8023bc6:	681b      	ldr	r3, [r3, #0]
 8023bc8:	1a26      	subs	r6, r4, r0
 8023bca:	9300      	str	r3, [sp, #0]
 8023bcc:	429e      	cmp	r6, r3
 8023bce:	dd52      	ble.n	8023c76 <__gethex+0x23e>
 8023bd0:	1af6      	subs	r6, r6, r3
 8023bd2:	0031      	movs	r1, r6
 8023bd4:	0028      	movs	r0, r5
 8023bd6:	f000 ff96 	bl	8024b06 <__any_on>
 8023bda:	1e04      	subs	r4, r0, #0
 8023bdc:	d00f      	beq.n	8023bfe <__gethex+0x1c6>
 8023bde:	2401      	movs	r4, #1
 8023be0:	231f      	movs	r3, #31
 8023be2:	0020      	movs	r0, r4
 8023be4:	1e72      	subs	r2, r6, #1
 8023be6:	4013      	ands	r3, r2
 8023be8:	4098      	lsls	r0, r3
 8023bea:	0003      	movs	r3, r0
 8023bec:	1151      	asrs	r1, r2, #5
 8023bee:	9802      	ldr	r0, [sp, #8]
 8023bf0:	0089      	lsls	r1, r1, #2
 8023bf2:	5809      	ldr	r1, [r1, r0]
 8023bf4:	4219      	tst	r1, r3
 8023bf6:	d002      	beq.n	8023bfe <__gethex+0x1c6>
 8023bf8:	42a2      	cmp	r2, r4
 8023bfa:	dc34      	bgt.n	8023c66 <__gethex+0x22e>
 8023bfc:	2402      	movs	r4, #2
 8023bfe:	0031      	movs	r1, r6
 8023c00:	0028      	movs	r0, r5
 8023c02:	f7ff feb1 	bl	8023968 <rshift>
 8023c06:	19bf      	adds	r7, r7, r6
 8023c08:	9b01      	ldr	r3, [sp, #4]
 8023c0a:	689b      	ldr	r3, [r3, #8]
 8023c0c:	42bb      	cmp	r3, r7
 8023c0e:	da42      	bge.n	8023c96 <__gethex+0x25e>
 8023c10:	0029      	movs	r1, r5
 8023c12:	9803      	ldr	r0, [sp, #12]
 8023c14:	f000 fb14 	bl	8024240 <_Bfree>
 8023c18:	2300      	movs	r3, #0
 8023c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023c1c:	26a3      	movs	r6, #163	@ 0xa3
 8023c1e:	6013      	str	r3, [r2, #0]
 8023c20:	e794      	b.n	8023b4c <__gethex+0x114>
 8023c22:	3c01      	subs	r4, #1
 8023c24:	7823      	ldrb	r3, [r4, #0]
 8023c26:	2b2e      	cmp	r3, #46	@ 0x2e
 8023c28:	d012      	beq.n	8023c50 <__gethex+0x218>
 8023c2a:	9b04      	ldr	r3, [sp, #16]
 8023c2c:	2b20      	cmp	r3, #32
 8023c2e:	d104      	bne.n	8023c3a <__gethex+0x202>
 8023c30:	9b05      	ldr	r3, [sp, #20]
 8023c32:	c340      	stmia	r3!, {r6}
 8023c34:	2600      	movs	r6, #0
 8023c36:	9305      	str	r3, [sp, #20]
 8023c38:	9604      	str	r6, [sp, #16]
 8023c3a:	7820      	ldrb	r0, [r4, #0]
 8023c3c:	f7ff fee7 	bl	8023a0e <__hexdig_fun>
 8023c40:	230f      	movs	r3, #15
 8023c42:	4018      	ands	r0, r3
 8023c44:	9b04      	ldr	r3, [sp, #16]
 8023c46:	4098      	lsls	r0, r3
 8023c48:	3304      	adds	r3, #4
 8023c4a:	4306      	orrs	r6, r0
 8023c4c:	9304      	str	r3, [sp, #16]
 8023c4e:	e7ac      	b.n	8023baa <__gethex+0x172>
 8023c50:	9b00      	ldr	r3, [sp, #0]
 8023c52:	42a3      	cmp	r3, r4
 8023c54:	d8e9      	bhi.n	8023c2a <__gethex+0x1f2>
 8023c56:	2201      	movs	r2, #1
 8023c58:	0020      	movs	r0, r4
 8023c5a:	492b      	ldr	r1, [pc, #172]	@ (8023d08 <__gethex+0x2d0>)
 8023c5c:	f7fe fee2 	bl	8022a24 <strncmp>
 8023c60:	2800      	cmp	r0, #0
 8023c62:	d1e2      	bne.n	8023c2a <__gethex+0x1f2>
 8023c64:	e7a1      	b.n	8023baa <__gethex+0x172>
 8023c66:	0028      	movs	r0, r5
 8023c68:	1eb1      	subs	r1, r6, #2
 8023c6a:	f000 ff4c 	bl	8024b06 <__any_on>
 8023c6e:	2800      	cmp	r0, #0
 8023c70:	d0c4      	beq.n	8023bfc <__gethex+0x1c4>
 8023c72:	2403      	movs	r4, #3
 8023c74:	e7c3      	b.n	8023bfe <__gethex+0x1c6>
 8023c76:	9b00      	ldr	r3, [sp, #0]
 8023c78:	2400      	movs	r4, #0
 8023c7a:	429e      	cmp	r6, r3
 8023c7c:	dac4      	bge.n	8023c08 <__gethex+0x1d0>
 8023c7e:	1b9e      	subs	r6, r3, r6
 8023c80:	0029      	movs	r1, r5
 8023c82:	0032      	movs	r2, r6
 8023c84:	9803      	ldr	r0, [sp, #12]
 8023c86:	f000 fd05 	bl	8024694 <__lshift>
 8023c8a:	0003      	movs	r3, r0
 8023c8c:	3314      	adds	r3, #20
 8023c8e:	0005      	movs	r5, r0
 8023c90:	1bbf      	subs	r7, r7, r6
 8023c92:	9302      	str	r3, [sp, #8]
 8023c94:	e7b8      	b.n	8023c08 <__gethex+0x1d0>
 8023c96:	9b01      	ldr	r3, [sp, #4]
 8023c98:	685e      	ldr	r6, [r3, #4]
 8023c9a:	42be      	cmp	r6, r7
 8023c9c:	dd6f      	ble.n	8023d7e <__gethex+0x346>
 8023c9e:	9b00      	ldr	r3, [sp, #0]
 8023ca0:	1bf6      	subs	r6, r6, r7
 8023ca2:	42b3      	cmp	r3, r6
 8023ca4:	dc36      	bgt.n	8023d14 <__gethex+0x2dc>
 8023ca6:	9b01      	ldr	r3, [sp, #4]
 8023ca8:	68db      	ldr	r3, [r3, #12]
 8023caa:	2b02      	cmp	r3, #2
 8023cac:	d024      	beq.n	8023cf8 <__gethex+0x2c0>
 8023cae:	2b03      	cmp	r3, #3
 8023cb0:	d026      	beq.n	8023d00 <__gethex+0x2c8>
 8023cb2:	2b01      	cmp	r3, #1
 8023cb4:	d117      	bne.n	8023ce6 <__gethex+0x2ae>
 8023cb6:	9b00      	ldr	r3, [sp, #0]
 8023cb8:	42b3      	cmp	r3, r6
 8023cba:	d114      	bne.n	8023ce6 <__gethex+0x2ae>
 8023cbc:	2b01      	cmp	r3, #1
 8023cbe:	d10b      	bne.n	8023cd8 <__gethex+0x2a0>
 8023cc0:	9b01      	ldr	r3, [sp, #4]
 8023cc2:	9a07      	ldr	r2, [sp, #28]
 8023cc4:	685b      	ldr	r3, [r3, #4]
 8023cc6:	2662      	movs	r6, #98	@ 0x62
 8023cc8:	6013      	str	r3, [r2, #0]
 8023cca:	2301      	movs	r3, #1
 8023ccc:	9a02      	ldr	r2, [sp, #8]
 8023cce:	612b      	str	r3, [r5, #16]
 8023cd0:	6013      	str	r3, [r2, #0]
 8023cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023cd4:	601d      	str	r5, [r3, #0]
 8023cd6:	e739      	b.n	8023b4c <__gethex+0x114>
 8023cd8:	9900      	ldr	r1, [sp, #0]
 8023cda:	0028      	movs	r0, r5
 8023cdc:	3901      	subs	r1, #1
 8023cde:	f000 ff12 	bl	8024b06 <__any_on>
 8023ce2:	2800      	cmp	r0, #0
 8023ce4:	d1ec      	bne.n	8023cc0 <__gethex+0x288>
 8023ce6:	0029      	movs	r1, r5
 8023ce8:	9803      	ldr	r0, [sp, #12]
 8023cea:	f000 faa9 	bl	8024240 <_Bfree>
 8023cee:	2300      	movs	r3, #0
 8023cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023cf2:	2650      	movs	r6, #80	@ 0x50
 8023cf4:	6013      	str	r3, [r2, #0]
 8023cf6:	e729      	b.n	8023b4c <__gethex+0x114>
 8023cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d1f3      	bne.n	8023ce6 <__gethex+0x2ae>
 8023cfe:	e7df      	b.n	8023cc0 <__gethex+0x288>
 8023d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	d1dc      	bne.n	8023cc0 <__gethex+0x288>
 8023d06:	e7ee      	b.n	8023ce6 <__gethex+0x2ae>
 8023d08:	0802930c 	.word	0x0802930c
 8023d0c:	08029519 	.word	0x08029519
 8023d10:	0802952a 	.word	0x0802952a
 8023d14:	1e77      	subs	r7, r6, #1
 8023d16:	2c00      	cmp	r4, #0
 8023d18:	d12f      	bne.n	8023d7a <__gethex+0x342>
 8023d1a:	2f00      	cmp	r7, #0
 8023d1c:	d004      	beq.n	8023d28 <__gethex+0x2f0>
 8023d1e:	0039      	movs	r1, r7
 8023d20:	0028      	movs	r0, r5
 8023d22:	f000 fef0 	bl	8024b06 <__any_on>
 8023d26:	0004      	movs	r4, r0
 8023d28:	231f      	movs	r3, #31
 8023d2a:	117a      	asrs	r2, r7, #5
 8023d2c:	401f      	ands	r7, r3
 8023d2e:	3b1e      	subs	r3, #30
 8023d30:	40bb      	lsls	r3, r7
 8023d32:	9902      	ldr	r1, [sp, #8]
 8023d34:	0092      	lsls	r2, r2, #2
 8023d36:	5852      	ldr	r2, [r2, r1]
 8023d38:	421a      	tst	r2, r3
 8023d3a:	d001      	beq.n	8023d40 <__gethex+0x308>
 8023d3c:	2302      	movs	r3, #2
 8023d3e:	431c      	orrs	r4, r3
 8023d40:	9b00      	ldr	r3, [sp, #0]
 8023d42:	0031      	movs	r1, r6
 8023d44:	1b9b      	subs	r3, r3, r6
 8023d46:	2602      	movs	r6, #2
 8023d48:	0028      	movs	r0, r5
 8023d4a:	9300      	str	r3, [sp, #0]
 8023d4c:	f7ff fe0c 	bl	8023968 <rshift>
 8023d50:	9b01      	ldr	r3, [sp, #4]
 8023d52:	685f      	ldr	r7, [r3, #4]
 8023d54:	2c00      	cmp	r4, #0
 8023d56:	d03f      	beq.n	8023dd8 <__gethex+0x3a0>
 8023d58:	9b01      	ldr	r3, [sp, #4]
 8023d5a:	68db      	ldr	r3, [r3, #12]
 8023d5c:	2b02      	cmp	r3, #2
 8023d5e:	d010      	beq.n	8023d82 <__gethex+0x34a>
 8023d60:	2b03      	cmp	r3, #3
 8023d62:	d012      	beq.n	8023d8a <__gethex+0x352>
 8023d64:	2b01      	cmp	r3, #1
 8023d66:	d106      	bne.n	8023d76 <__gethex+0x33e>
 8023d68:	07a2      	lsls	r2, r4, #30
 8023d6a:	d504      	bpl.n	8023d76 <__gethex+0x33e>
 8023d6c:	9a02      	ldr	r2, [sp, #8]
 8023d6e:	6812      	ldr	r2, [r2, #0]
 8023d70:	4314      	orrs	r4, r2
 8023d72:	421c      	tst	r4, r3
 8023d74:	d10c      	bne.n	8023d90 <__gethex+0x358>
 8023d76:	2310      	movs	r3, #16
 8023d78:	e02d      	b.n	8023dd6 <__gethex+0x39e>
 8023d7a:	2401      	movs	r4, #1
 8023d7c:	e7d4      	b.n	8023d28 <__gethex+0x2f0>
 8023d7e:	2601      	movs	r6, #1
 8023d80:	e7e8      	b.n	8023d54 <__gethex+0x31c>
 8023d82:	2301      	movs	r3, #1
 8023d84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023d86:	1a9b      	subs	r3, r3, r2
 8023d88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023d8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023d8c:	2b00      	cmp	r3, #0
 8023d8e:	d0f2      	beq.n	8023d76 <__gethex+0x33e>
 8023d90:	692b      	ldr	r3, [r5, #16]
 8023d92:	2000      	movs	r0, #0
 8023d94:	9302      	str	r3, [sp, #8]
 8023d96:	009b      	lsls	r3, r3, #2
 8023d98:	9304      	str	r3, [sp, #16]
 8023d9a:	002b      	movs	r3, r5
 8023d9c:	9a04      	ldr	r2, [sp, #16]
 8023d9e:	3314      	adds	r3, #20
 8023da0:	1899      	adds	r1, r3, r2
 8023da2:	681a      	ldr	r2, [r3, #0]
 8023da4:	1c54      	adds	r4, r2, #1
 8023da6:	d01c      	beq.n	8023de2 <__gethex+0x3aa>
 8023da8:	3201      	adds	r2, #1
 8023daa:	601a      	str	r2, [r3, #0]
 8023dac:	002b      	movs	r3, r5
 8023dae:	3314      	adds	r3, #20
 8023db0:	2e02      	cmp	r6, #2
 8023db2:	d13f      	bne.n	8023e34 <__gethex+0x3fc>
 8023db4:	9a01      	ldr	r2, [sp, #4]
 8023db6:	9900      	ldr	r1, [sp, #0]
 8023db8:	6812      	ldr	r2, [r2, #0]
 8023dba:	3a01      	subs	r2, #1
 8023dbc:	428a      	cmp	r2, r1
 8023dbe:	d109      	bne.n	8023dd4 <__gethex+0x39c>
 8023dc0:	000a      	movs	r2, r1
 8023dc2:	201f      	movs	r0, #31
 8023dc4:	4010      	ands	r0, r2
 8023dc6:	2201      	movs	r2, #1
 8023dc8:	4082      	lsls	r2, r0
 8023dca:	1149      	asrs	r1, r1, #5
 8023dcc:	0089      	lsls	r1, r1, #2
 8023dce:	58cb      	ldr	r3, [r1, r3]
 8023dd0:	4213      	tst	r3, r2
 8023dd2:	d13d      	bne.n	8023e50 <__gethex+0x418>
 8023dd4:	2320      	movs	r3, #32
 8023dd6:	431e      	orrs	r6, r3
 8023dd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023dda:	601d      	str	r5, [r3, #0]
 8023ddc:	9b07      	ldr	r3, [sp, #28]
 8023dde:	601f      	str	r7, [r3, #0]
 8023de0:	e6b4      	b.n	8023b4c <__gethex+0x114>
 8023de2:	c301      	stmia	r3!, {r0}
 8023de4:	4299      	cmp	r1, r3
 8023de6:	d8dc      	bhi.n	8023da2 <__gethex+0x36a>
 8023de8:	68ab      	ldr	r3, [r5, #8]
 8023dea:	9a02      	ldr	r2, [sp, #8]
 8023dec:	429a      	cmp	r2, r3
 8023dee:	db18      	blt.n	8023e22 <__gethex+0x3ea>
 8023df0:	6869      	ldr	r1, [r5, #4]
 8023df2:	9803      	ldr	r0, [sp, #12]
 8023df4:	3101      	adds	r1, #1
 8023df6:	f000 f9df 	bl	80241b8 <_Balloc>
 8023dfa:	1e04      	subs	r4, r0, #0
 8023dfc:	d104      	bne.n	8023e08 <__gethex+0x3d0>
 8023dfe:	0022      	movs	r2, r4
 8023e00:	2184      	movs	r1, #132	@ 0x84
 8023e02:	4b1d      	ldr	r3, [pc, #116]	@ (8023e78 <__gethex+0x440>)
 8023e04:	481d      	ldr	r0, [pc, #116]	@ (8023e7c <__gethex+0x444>)
 8023e06:	e6c4      	b.n	8023b92 <__gethex+0x15a>
 8023e08:	0029      	movs	r1, r5
 8023e0a:	692a      	ldr	r2, [r5, #16]
 8023e0c:	310c      	adds	r1, #12
 8023e0e:	3202      	adds	r2, #2
 8023e10:	0092      	lsls	r2, r2, #2
 8023e12:	300c      	adds	r0, #12
 8023e14:	f7fe fecc 	bl	8022bb0 <memcpy>
 8023e18:	0029      	movs	r1, r5
 8023e1a:	9803      	ldr	r0, [sp, #12]
 8023e1c:	f000 fa10 	bl	8024240 <_Bfree>
 8023e20:	0025      	movs	r5, r4
 8023e22:	692b      	ldr	r3, [r5, #16]
 8023e24:	1c5a      	adds	r2, r3, #1
 8023e26:	612a      	str	r2, [r5, #16]
 8023e28:	2201      	movs	r2, #1
 8023e2a:	3304      	adds	r3, #4
 8023e2c:	009b      	lsls	r3, r3, #2
 8023e2e:	18eb      	adds	r3, r5, r3
 8023e30:	605a      	str	r2, [r3, #4]
 8023e32:	e7bb      	b.n	8023dac <__gethex+0x374>
 8023e34:	692a      	ldr	r2, [r5, #16]
 8023e36:	9902      	ldr	r1, [sp, #8]
 8023e38:	428a      	cmp	r2, r1
 8023e3a:	dd0b      	ble.n	8023e54 <__gethex+0x41c>
 8023e3c:	2101      	movs	r1, #1
 8023e3e:	0028      	movs	r0, r5
 8023e40:	f7ff fd92 	bl	8023968 <rshift>
 8023e44:	9b01      	ldr	r3, [sp, #4]
 8023e46:	3701      	adds	r7, #1
 8023e48:	689b      	ldr	r3, [r3, #8]
 8023e4a:	42bb      	cmp	r3, r7
 8023e4c:	da00      	bge.n	8023e50 <__gethex+0x418>
 8023e4e:	e6df      	b.n	8023c10 <__gethex+0x1d8>
 8023e50:	2601      	movs	r6, #1
 8023e52:	e7bf      	b.n	8023dd4 <__gethex+0x39c>
 8023e54:	221f      	movs	r2, #31
 8023e56:	9c00      	ldr	r4, [sp, #0]
 8023e58:	9900      	ldr	r1, [sp, #0]
 8023e5a:	4014      	ands	r4, r2
 8023e5c:	4211      	tst	r1, r2
 8023e5e:	d0f7      	beq.n	8023e50 <__gethex+0x418>
 8023e60:	9a04      	ldr	r2, [sp, #16]
 8023e62:	189b      	adds	r3, r3, r2
 8023e64:	3b04      	subs	r3, #4
 8023e66:	6818      	ldr	r0, [r3, #0]
 8023e68:	f000 fa9e 	bl	80243a8 <__hi0bits>
 8023e6c:	2320      	movs	r3, #32
 8023e6e:	1b1b      	subs	r3, r3, r4
 8023e70:	4298      	cmp	r0, r3
 8023e72:	dbe3      	blt.n	8023e3c <__gethex+0x404>
 8023e74:	e7ec      	b.n	8023e50 <__gethex+0x418>
 8023e76:	46c0      	nop			@ (mov r8, r8)
 8023e78:	08029519 	.word	0x08029519
 8023e7c:	0802952a 	.word	0x0802952a

08023e80 <L_shift>:
 8023e80:	2308      	movs	r3, #8
 8023e82:	b570      	push	{r4, r5, r6, lr}
 8023e84:	2520      	movs	r5, #32
 8023e86:	1a9a      	subs	r2, r3, r2
 8023e88:	0092      	lsls	r2, r2, #2
 8023e8a:	1aad      	subs	r5, r5, r2
 8023e8c:	6843      	ldr	r3, [r0, #4]
 8023e8e:	6804      	ldr	r4, [r0, #0]
 8023e90:	001e      	movs	r6, r3
 8023e92:	40ae      	lsls	r6, r5
 8023e94:	40d3      	lsrs	r3, r2
 8023e96:	4334      	orrs	r4, r6
 8023e98:	6004      	str	r4, [r0, #0]
 8023e9a:	6043      	str	r3, [r0, #4]
 8023e9c:	3004      	adds	r0, #4
 8023e9e:	4288      	cmp	r0, r1
 8023ea0:	d3f4      	bcc.n	8023e8c <L_shift+0xc>
 8023ea2:	bd70      	pop	{r4, r5, r6, pc}

08023ea4 <__match>:
 8023ea4:	b530      	push	{r4, r5, lr}
 8023ea6:	6803      	ldr	r3, [r0, #0]
 8023ea8:	780c      	ldrb	r4, [r1, #0]
 8023eaa:	3301      	adds	r3, #1
 8023eac:	2c00      	cmp	r4, #0
 8023eae:	d102      	bne.n	8023eb6 <__match+0x12>
 8023eb0:	6003      	str	r3, [r0, #0]
 8023eb2:	2001      	movs	r0, #1
 8023eb4:	bd30      	pop	{r4, r5, pc}
 8023eb6:	781a      	ldrb	r2, [r3, #0]
 8023eb8:	0015      	movs	r5, r2
 8023eba:	3d41      	subs	r5, #65	@ 0x41
 8023ebc:	2d19      	cmp	r5, #25
 8023ebe:	d800      	bhi.n	8023ec2 <__match+0x1e>
 8023ec0:	3220      	adds	r2, #32
 8023ec2:	3101      	adds	r1, #1
 8023ec4:	42a2      	cmp	r2, r4
 8023ec6:	d0ef      	beq.n	8023ea8 <__match+0x4>
 8023ec8:	2000      	movs	r0, #0
 8023eca:	e7f3      	b.n	8023eb4 <__match+0x10>

08023ecc <__hexnan>:
 8023ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023ece:	680b      	ldr	r3, [r1, #0]
 8023ed0:	b08b      	sub	sp, #44	@ 0x2c
 8023ed2:	9201      	str	r2, [sp, #4]
 8023ed4:	9901      	ldr	r1, [sp, #4]
 8023ed6:	115a      	asrs	r2, r3, #5
 8023ed8:	0092      	lsls	r2, r2, #2
 8023eda:	188a      	adds	r2, r1, r2
 8023edc:	9202      	str	r2, [sp, #8]
 8023ede:	0019      	movs	r1, r3
 8023ee0:	221f      	movs	r2, #31
 8023ee2:	4011      	ands	r1, r2
 8023ee4:	9008      	str	r0, [sp, #32]
 8023ee6:	9106      	str	r1, [sp, #24]
 8023ee8:	4213      	tst	r3, r2
 8023eea:	d002      	beq.n	8023ef2 <__hexnan+0x26>
 8023eec:	9b02      	ldr	r3, [sp, #8]
 8023eee:	3304      	adds	r3, #4
 8023ef0:	9302      	str	r3, [sp, #8]
 8023ef2:	9b02      	ldr	r3, [sp, #8]
 8023ef4:	2500      	movs	r5, #0
 8023ef6:	1f1f      	subs	r7, r3, #4
 8023ef8:	003e      	movs	r6, r7
 8023efa:	003c      	movs	r4, r7
 8023efc:	9b08      	ldr	r3, [sp, #32]
 8023efe:	603d      	str	r5, [r7, #0]
 8023f00:	681b      	ldr	r3, [r3, #0]
 8023f02:	9507      	str	r5, [sp, #28]
 8023f04:	9305      	str	r3, [sp, #20]
 8023f06:	9503      	str	r5, [sp, #12]
 8023f08:	9b05      	ldr	r3, [sp, #20]
 8023f0a:	3301      	adds	r3, #1
 8023f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f0e:	9b05      	ldr	r3, [sp, #20]
 8023f10:	785b      	ldrb	r3, [r3, #1]
 8023f12:	9304      	str	r3, [sp, #16]
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	d028      	beq.n	8023f6a <__hexnan+0x9e>
 8023f18:	9804      	ldr	r0, [sp, #16]
 8023f1a:	f7ff fd78 	bl	8023a0e <__hexdig_fun>
 8023f1e:	2800      	cmp	r0, #0
 8023f20:	d155      	bne.n	8023fce <__hexnan+0x102>
 8023f22:	9b04      	ldr	r3, [sp, #16]
 8023f24:	2b20      	cmp	r3, #32
 8023f26:	d819      	bhi.n	8023f5c <__hexnan+0x90>
 8023f28:	9b03      	ldr	r3, [sp, #12]
 8023f2a:	9a07      	ldr	r2, [sp, #28]
 8023f2c:	4293      	cmp	r3, r2
 8023f2e:	dd12      	ble.n	8023f56 <__hexnan+0x8a>
 8023f30:	42b4      	cmp	r4, r6
 8023f32:	d206      	bcs.n	8023f42 <__hexnan+0x76>
 8023f34:	2d07      	cmp	r5, #7
 8023f36:	dc04      	bgt.n	8023f42 <__hexnan+0x76>
 8023f38:	002a      	movs	r2, r5
 8023f3a:	0031      	movs	r1, r6
 8023f3c:	0020      	movs	r0, r4
 8023f3e:	f7ff ff9f 	bl	8023e80 <L_shift>
 8023f42:	9b01      	ldr	r3, [sp, #4]
 8023f44:	2508      	movs	r5, #8
 8023f46:	429c      	cmp	r4, r3
 8023f48:	d905      	bls.n	8023f56 <__hexnan+0x8a>
 8023f4a:	1f26      	subs	r6, r4, #4
 8023f4c:	2500      	movs	r5, #0
 8023f4e:	0034      	movs	r4, r6
 8023f50:	9b03      	ldr	r3, [sp, #12]
 8023f52:	6035      	str	r5, [r6, #0]
 8023f54:	9307      	str	r3, [sp, #28]
 8023f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f58:	9305      	str	r3, [sp, #20]
 8023f5a:	e7d5      	b.n	8023f08 <__hexnan+0x3c>
 8023f5c:	9b04      	ldr	r3, [sp, #16]
 8023f5e:	2b29      	cmp	r3, #41	@ 0x29
 8023f60:	d15a      	bne.n	8024018 <__hexnan+0x14c>
 8023f62:	9b05      	ldr	r3, [sp, #20]
 8023f64:	9a08      	ldr	r2, [sp, #32]
 8023f66:	3302      	adds	r3, #2
 8023f68:	6013      	str	r3, [r2, #0]
 8023f6a:	9b03      	ldr	r3, [sp, #12]
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d053      	beq.n	8024018 <__hexnan+0x14c>
 8023f70:	42b4      	cmp	r4, r6
 8023f72:	d206      	bcs.n	8023f82 <__hexnan+0xb6>
 8023f74:	2d07      	cmp	r5, #7
 8023f76:	dc04      	bgt.n	8023f82 <__hexnan+0xb6>
 8023f78:	002a      	movs	r2, r5
 8023f7a:	0031      	movs	r1, r6
 8023f7c:	0020      	movs	r0, r4
 8023f7e:	f7ff ff7f 	bl	8023e80 <L_shift>
 8023f82:	9b01      	ldr	r3, [sp, #4]
 8023f84:	429c      	cmp	r4, r3
 8023f86:	d936      	bls.n	8023ff6 <__hexnan+0x12a>
 8023f88:	001a      	movs	r2, r3
 8023f8a:	0023      	movs	r3, r4
 8023f8c:	cb02      	ldmia	r3!, {r1}
 8023f8e:	c202      	stmia	r2!, {r1}
 8023f90:	429f      	cmp	r7, r3
 8023f92:	d2fb      	bcs.n	8023f8c <__hexnan+0xc0>
 8023f94:	9b02      	ldr	r3, [sp, #8]
 8023f96:	1c61      	adds	r1, r4, #1
 8023f98:	1eda      	subs	r2, r3, #3
 8023f9a:	2304      	movs	r3, #4
 8023f9c:	4291      	cmp	r1, r2
 8023f9e:	d805      	bhi.n	8023fac <__hexnan+0xe0>
 8023fa0:	9b02      	ldr	r3, [sp, #8]
 8023fa2:	3b04      	subs	r3, #4
 8023fa4:	1b1b      	subs	r3, r3, r4
 8023fa6:	089b      	lsrs	r3, r3, #2
 8023fa8:	3301      	adds	r3, #1
 8023faa:	009b      	lsls	r3, r3, #2
 8023fac:	9a01      	ldr	r2, [sp, #4]
 8023fae:	18d3      	adds	r3, r2, r3
 8023fb0:	2200      	movs	r2, #0
 8023fb2:	c304      	stmia	r3!, {r2}
 8023fb4:	429f      	cmp	r7, r3
 8023fb6:	d2fc      	bcs.n	8023fb2 <__hexnan+0xe6>
 8023fb8:	683b      	ldr	r3, [r7, #0]
 8023fba:	2b00      	cmp	r3, #0
 8023fbc:	d104      	bne.n	8023fc8 <__hexnan+0xfc>
 8023fbe:	9b01      	ldr	r3, [sp, #4]
 8023fc0:	429f      	cmp	r7, r3
 8023fc2:	d127      	bne.n	8024014 <__hexnan+0x148>
 8023fc4:	2301      	movs	r3, #1
 8023fc6:	603b      	str	r3, [r7, #0]
 8023fc8:	2005      	movs	r0, #5
 8023fca:	b00b      	add	sp, #44	@ 0x2c
 8023fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023fce:	9b03      	ldr	r3, [sp, #12]
 8023fd0:	3501      	adds	r5, #1
 8023fd2:	3301      	adds	r3, #1
 8023fd4:	9303      	str	r3, [sp, #12]
 8023fd6:	2d08      	cmp	r5, #8
 8023fd8:	dd06      	ble.n	8023fe8 <__hexnan+0x11c>
 8023fda:	9b01      	ldr	r3, [sp, #4]
 8023fdc:	429c      	cmp	r4, r3
 8023fde:	d9ba      	bls.n	8023f56 <__hexnan+0x8a>
 8023fe0:	2300      	movs	r3, #0
 8023fe2:	2501      	movs	r5, #1
 8023fe4:	3c04      	subs	r4, #4
 8023fe6:	6023      	str	r3, [r4, #0]
 8023fe8:	220f      	movs	r2, #15
 8023fea:	6823      	ldr	r3, [r4, #0]
 8023fec:	4010      	ands	r0, r2
 8023fee:	011b      	lsls	r3, r3, #4
 8023ff0:	4303      	orrs	r3, r0
 8023ff2:	6023      	str	r3, [r4, #0]
 8023ff4:	e7af      	b.n	8023f56 <__hexnan+0x8a>
 8023ff6:	9b06      	ldr	r3, [sp, #24]
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	d0dd      	beq.n	8023fb8 <__hexnan+0xec>
 8023ffc:	2320      	movs	r3, #32
 8023ffe:	9a06      	ldr	r2, [sp, #24]
 8024000:	9902      	ldr	r1, [sp, #8]
 8024002:	1a9b      	subs	r3, r3, r2
 8024004:	2201      	movs	r2, #1
 8024006:	4252      	negs	r2, r2
 8024008:	40da      	lsrs	r2, r3
 802400a:	3904      	subs	r1, #4
 802400c:	680b      	ldr	r3, [r1, #0]
 802400e:	4013      	ands	r3, r2
 8024010:	600b      	str	r3, [r1, #0]
 8024012:	e7d1      	b.n	8023fb8 <__hexnan+0xec>
 8024014:	3f04      	subs	r7, #4
 8024016:	e7cf      	b.n	8023fb8 <__hexnan+0xec>
 8024018:	2004      	movs	r0, #4
 802401a:	e7d6      	b.n	8023fca <__hexnan+0xfe>

0802401c <malloc>:
 802401c:	b510      	push	{r4, lr}
 802401e:	4b03      	ldr	r3, [pc, #12]	@ (802402c <malloc+0x10>)
 8024020:	0001      	movs	r1, r0
 8024022:	6818      	ldr	r0, [r3, #0]
 8024024:	f000 f826 	bl	8024074 <_malloc_r>
 8024028:	bd10      	pop	{r4, pc}
 802402a:	46c0      	nop			@ (mov r8, r8)
 802402c:	200003dc 	.word	0x200003dc

08024030 <sbrk_aligned>:
 8024030:	b570      	push	{r4, r5, r6, lr}
 8024032:	4e0f      	ldr	r6, [pc, #60]	@ (8024070 <sbrk_aligned+0x40>)
 8024034:	000d      	movs	r5, r1
 8024036:	6831      	ldr	r1, [r6, #0]
 8024038:	0004      	movs	r4, r0
 802403a:	2900      	cmp	r1, #0
 802403c:	d102      	bne.n	8024044 <sbrk_aligned+0x14>
 802403e:	f001 f989 	bl	8025354 <_sbrk_r>
 8024042:	6030      	str	r0, [r6, #0]
 8024044:	0029      	movs	r1, r5
 8024046:	0020      	movs	r0, r4
 8024048:	f001 f984 	bl	8025354 <_sbrk_r>
 802404c:	1c43      	adds	r3, r0, #1
 802404e:	d103      	bne.n	8024058 <sbrk_aligned+0x28>
 8024050:	2501      	movs	r5, #1
 8024052:	426d      	negs	r5, r5
 8024054:	0028      	movs	r0, r5
 8024056:	bd70      	pop	{r4, r5, r6, pc}
 8024058:	2303      	movs	r3, #3
 802405a:	1cc5      	adds	r5, r0, #3
 802405c:	439d      	bics	r5, r3
 802405e:	42a8      	cmp	r0, r5
 8024060:	d0f8      	beq.n	8024054 <sbrk_aligned+0x24>
 8024062:	1a29      	subs	r1, r5, r0
 8024064:	0020      	movs	r0, r4
 8024066:	f001 f975 	bl	8025354 <_sbrk_r>
 802406a:	3001      	adds	r0, #1
 802406c:	d1f2      	bne.n	8024054 <sbrk_aligned+0x24>
 802406e:	e7ef      	b.n	8024050 <sbrk_aligned+0x20>
 8024070:	20003594 	.word	0x20003594

08024074 <_malloc_r>:
 8024074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024076:	2203      	movs	r2, #3
 8024078:	1ccb      	adds	r3, r1, #3
 802407a:	4393      	bics	r3, r2
 802407c:	3308      	adds	r3, #8
 802407e:	0005      	movs	r5, r0
 8024080:	001f      	movs	r7, r3
 8024082:	2b0c      	cmp	r3, #12
 8024084:	d234      	bcs.n	80240f0 <_malloc_r+0x7c>
 8024086:	270c      	movs	r7, #12
 8024088:	42b9      	cmp	r1, r7
 802408a:	d833      	bhi.n	80240f4 <_malloc_r+0x80>
 802408c:	0028      	movs	r0, r5
 802408e:	f000 f883 	bl	8024198 <__malloc_lock>
 8024092:	4e37      	ldr	r6, [pc, #220]	@ (8024170 <_malloc_r+0xfc>)
 8024094:	6833      	ldr	r3, [r6, #0]
 8024096:	001c      	movs	r4, r3
 8024098:	2c00      	cmp	r4, #0
 802409a:	d12f      	bne.n	80240fc <_malloc_r+0x88>
 802409c:	0039      	movs	r1, r7
 802409e:	0028      	movs	r0, r5
 80240a0:	f7ff ffc6 	bl	8024030 <sbrk_aligned>
 80240a4:	0004      	movs	r4, r0
 80240a6:	1c43      	adds	r3, r0, #1
 80240a8:	d15f      	bne.n	802416a <_malloc_r+0xf6>
 80240aa:	6834      	ldr	r4, [r6, #0]
 80240ac:	9400      	str	r4, [sp, #0]
 80240ae:	9b00      	ldr	r3, [sp, #0]
 80240b0:	2b00      	cmp	r3, #0
 80240b2:	d14a      	bne.n	802414a <_malloc_r+0xd6>
 80240b4:	2c00      	cmp	r4, #0
 80240b6:	d052      	beq.n	802415e <_malloc_r+0xea>
 80240b8:	6823      	ldr	r3, [r4, #0]
 80240ba:	0028      	movs	r0, r5
 80240bc:	18e3      	adds	r3, r4, r3
 80240be:	9900      	ldr	r1, [sp, #0]
 80240c0:	9301      	str	r3, [sp, #4]
 80240c2:	f001 f947 	bl	8025354 <_sbrk_r>
 80240c6:	9b01      	ldr	r3, [sp, #4]
 80240c8:	4283      	cmp	r3, r0
 80240ca:	d148      	bne.n	802415e <_malloc_r+0xea>
 80240cc:	6823      	ldr	r3, [r4, #0]
 80240ce:	0028      	movs	r0, r5
 80240d0:	1aff      	subs	r7, r7, r3
 80240d2:	0039      	movs	r1, r7
 80240d4:	f7ff ffac 	bl	8024030 <sbrk_aligned>
 80240d8:	3001      	adds	r0, #1
 80240da:	d040      	beq.n	802415e <_malloc_r+0xea>
 80240dc:	6823      	ldr	r3, [r4, #0]
 80240de:	19db      	adds	r3, r3, r7
 80240e0:	6023      	str	r3, [r4, #0]
 80240e2:	6833      	ldr	r3, [r6, #0]
 80240e4:	685a      	ldr	r2, [r3, #4]
 80240e6:	2a00      	cmp	r2, #0
 80240e8:	d133      	bne.n	8024152 <_malloc_r+0xde>
 80240ea:	9b00      	ldr	r3, [sp, #0]
 80240ec:	6033      	str	r3, [r6, #0]
 80240ee:	e019      	b.n	8024124 <_malloc_r+0xb0>
 80240f0:	2b00      	cmp	r3, #0
 80240f2:	dac9      	bge.n	8024088 <_malloc_r+0x14>
 80240f4:	230c      	movs	r3, #12
 80240f6:	602b      	str	r3, [r5, #0]
 80240f8:	2000      	movs	r0, #0
 80240fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80240fc:	6821      	ldr	r1, [r4, #0]
 80240fe:	1bc9      	subs	r1, r1, r7
 8024100:	d420      	bmi.n	8024144 <_malloc_r+0xd0>
 8024102:	290b      	cmp	r1, #11
 8024104:	d90a      	bls.n	802411c <_malloc_r+0xa8>
 8024106:	19e2      	adds	r2, r4, r7
 8024108:	6027      	str	r7, [r4, #0]
 802410a:	42a3      	cmp	r3, r4
 802410c:	d104      	bne.n	8024118 <_malloc_r+0xa4>
 802410e:	6032      	str	r2, [r6, #0]
 8024110:	6863      	ldr	r3, [r4, #4]
 8024112:	6011      	str	r1, [r2, #0]
 8024114:	6053      	str	r3, [r2, #4]
 8024116:	e005      	b.n	8024124 <_malloc_r+0xb0>
 8024118:	605a      	str	r2, [r3, #4]
 802411a:	e7f9      	b.n	8024110 <_malloc_r+0x9c>
 802411c:	6862      	ldr	r2, [r4, #4]
 802411e:	42a3      	cmp	r3, r4
 8024120:	d10e      	bne.n	8024140 <_malloc_r+0xcc>
 8024122:	6032      	str	r2, [r6, #0]
 8024124:	0028      	movs	r0, r5
 8024126:	f000 f83f 	bl	80241a8 <__malloc_unlock>
 802412a:	0020      	movs	r0, r4
 802412c:	2207      	movs	r2, #7
 802412e:	300b      	adds	r0, #11
 8024130:	1d23      	adds	r3, r4, #4
 8024132:	4390      	bics	r0, r2
 8024134:	1ac2      	subs	r2, r0, r3
 8024136:	4298      	cmp	r0, r3
 8024138:	d0df      	beq.n	80240fa <_malloc_r+0x86>
 802413a:	1a1b      	subs	r3, r3, r0
 802413c:	50a3      	str	r3, [r4, r2]
 802413e:	e7dc      	b.n	80240fa <_malloc_r+0x86>
 8024140:	605a      	str	r2, [r3, #4]
 8024142:	e7ef      	b.n	8024124 <_malloc_r+0xb0>
 8024144:	0023      	movs	r3, r4
 8024146:	6864      	ldr	r4, [r4, #4]
 8024148:	e7a6      	b.n	8024098 <_malloc_r+0x24>
 802414a:	9c00      	ldr	r4, [sp, #0]
 802414c:	6863      	ldr	r3, [r4, #4]
 802414e:	9300      	str	r3, [sp, #0]
 8024150:	e7ad      	b.n	80240ae <_malloc_r+0x3a>
 8024152:	001a      	movs	r2, r3
 8024154:	685b      	ldr	r3, [r3, #4]
 8024156:	42a3      	cmp	r3, r4
 8024158:	d1fb      	bne.n	8024152 <_malloc_r+0xde>
 802415a:	2300      	movs	r3, #0
 802415c:	e7da      	b.n	8024114 <_malloc_r+0xa0>
 802415e:	230c      	movs	r3, #12
 8024160:	0028      	movs	r0, r5
 8024162:	602b      	str	r3, [r5, #0]
 8024164:	f000 f820 	bl	80241a8 <__malloc_unlock>
 8024168:	e7c6      	b.n	80240f8 <_malloc_r+0x84>
 802416a:	6007      	str	r7, [r0, #0]
 802416c:	e7da      	b.n	8024124 <_malloc_r+0xb0>
 802416e:	46c0      	nop			@ (mov r8, r8)
 8024170:	20003598 	.word	0x20003598

08024174 <__ascii_mbtowc>:
 8024174:	b082      	sub	sp, #8
 8024176:	2900      	cmp	r1, #0
 8024178:	d100      	bne.n	802417c <__ascii_mbtowc+0x8>
 802417a:	a901      	add	r1, sp, #4
 802417c:	1e10      	subs	r0, r2, #0
 802417e:	d006      	beq.n	802418e <__ascii_mbtowc+0x1a>
 8024180:	2b00      	cmp	r3, #0
 8024182:	d006      	beq.n	8024192 <__ascii_mbtowc+0x1e>
 8024184:	7813      	ldrb	r3, [r2, #0]
 8024186:	600b      	str	r3, [r1, #0]
 8024188:	7810      	ldrb	r0, [r2, #0]
 802418a:	1e43      	subs	r3, r0, #1
 802418c:	4198      	sbcs	r0, r3
 802418e:	b002      	add	sp, #8
 8024190:	4770      	bx	lr
 8024192:	2002      	movs	r0, #2
 8024194:	4240      	negs	r0, r0
 8024196:	e7fa      	b.n	802418e <__ascii_mbtowc+0x1a>

08024198 <__malloc_lock>:
 8024198:	b510      	push	{r4, lr}
 802419a:	4802      	ldr	r0, [pc, #8]	@ (80241a4 <__malloc_lock+0xc>)
 802419c:	f7fe fcfb 	bl	8022b96 <__retarget_lock_acquire_recursive>
 80241a0:	bd10      	pop	{r4, pc}
 80241a2:	46c0      	nop			@ (mov r8, r8)
 80241a4:	20003590 	.word	0x20003590

080241a8 <__malloc_unlock>:
 80241a8:	b510      	push	{r4, lr}
 80241aa:	4802      	ldr	r0, [pc, #8]	@ (80241b4 <__malloc_unlock+0xc>)
 80241ac:	f7fe fcf4 	bl	8022b98 <__retarget_lock_release_recursive>
 80241b0:	bd10      	pop	{r4, pc}
 80241b2:	46c0      	nop			@ (mov r8, r8)
 80241b4:	20003590 	.word	0x20003590

080241b8 <_Balloc>:
 80241b8:	b570      	push	{r4, r5, r6, lr}
 80241ba:	69c5      	ldr	r5, [r0, #28]
 80241bc:	0006      	movs	r6, r0
 80241be:	000c      	movs	r4, r1
 80241c0:	2d00      	cmp	r5, #0
 80241c2:	d10e      	bne.n	80241e2 <_Balloc+0x2a>
 80241c4:	2010      	movs	r0, #16
 80241c6:	f7ff ff29 	bl	802401c <malloc>
 80241ca:	1e02      	subs	r2, r0, #0
 80241cc:	61f0      	str	r0, [r6, #28]
 80241ce:	d104      	bne.n	80241da <_Balloc+0x22>
 80241d0:	216b      	movs	r1, #107	@ 0x6b
 80241d2:	4b19      	ldr	r3, [pc, #100]	@ (8024238 <_Balloc+0x80>)
 80241d4:	4819      	ldr	r0, [pc, #100]	@ (802423c <_Balloc+0x84>)
 80241d6:	f001 f8cf 	bl	8025378 <__assert_func>
 80241da:	6045      	str	r5, [r0, #4]
 80241dc:	6085      	str	r5, [r0, #8]
 80241de:	6005      	str	r5, [r0, #0]
 80241e0:	60c5      	str	r5, [r0, #12]
 80241e2:	69f5      	ldr	r5, [r6, #28]
 80241e4:	68eb      	ldr	r3, [r5, #12]
 80241e6:	2b00      	cmp	r3, #0
 80241e8:	d013      	beq.n	8024212 <_Balloc+0x5a>
 80241ea:	69f3      	ldr	r3, [r6, #28]
 80241ec:	00a2      	lsls	r2, r4, #2
 80241ee:	68db      	ldr	r3, [r3, #12]
 80241f0:	189b      	adds	r3, r3, r2
 80241f2:	6818      	ldr	r0, [r3, #0]
 80241f4:	2800      	cmp	r0, #0
 80241f6:	d118      	bne.n	802422a <_Balloc+0x72>
 80241f8:	2101      	movs	r1, #1
 80241fa:	000d      	movs	r5, r1
 80241fc:	40a5      	lsls	r5, r4
 80241fe:	1d6a      	adds	r2, r5, #5
 8024200:	0030      	movs	r0, r6
 8024202:	0092      	lsls	r2, r2, #2
 8024204:	f001 f8d6 	bl	80253b4 <_calloc_r>
 8024208:	2800      	cmp	r0, #0
 802420a:	d00c      	beq.n	8024226 <_Balloc+0x6e>
 802420c:	6044      	str	r4, [r0, #4]
 802420e:	6085      	str	r5, [r0, #8]
 8024210:	e00d      	b.n	802422e <_Balloc+0x76>
 8024212:	2221      	movs	r2, #33	@ 0x21
 8024214:	2104      	movs	r1, #4
 8024216:	0030      	movs	r0, r6
 8024218:	f001 f8cc 	bl	80253b4 <_calloc_r>
 802421c:	69f3      	ldr	r3, [r6, #28]
 802421e:	60e8      	str	r0, [r5, #12]
 8024220:	68db      	ldr	r3, [r3, #12]
 8024222:	2b00      	cmp	r3, #0
 8024224:	d1e1      	bne.n	80241ea <_Balloc+0x32>
 8024226:	2000      	movs	r0, #0
 8024228:	bd70      	pop	{r4, r5, r6, pc}
 802422a:	6802      	ldr	r2, [r0, #0]
 802422c:	601a      	str	r2, [r3, #0]
 802422e:	2300      	movs	r3, #0
 8024230:	6103      	str	r3, [r0, #16]
 8024232:	60c3      	str	r3, [r0, #12]
 8024234:	e7f8      	b.n	8024228 <_Balloc+0x70>
 8024236:	46c0      	nop			@ (mov r8, r8)
 8024238:	080294aa 	.word	0x080294aa
 802423c:	0802958a 	.word	0x0802958a

08024240 <_Bfree>:
 8024240:	b570      	push	{r4, r5, r6, lr}
 8024242:	69c6      	ldr	r6, [r0, #28]
 8024244:	0005      	movs	r5, r0
 8024246:	000c      	movs	r4, r1
 8024248:	2e00      	cmp	r6, #0
 802424a:	d10e      	bne.n	802426a <_Bfree+0x2a>
 802424c:	2010      	movs	r0, #16
 802424e:	f7ff fee5 	bl	802401c <malloc>
 8024252:	1e02      	subs	r2, r0, #0
 8024254:	61e8      	str	r0, [r5, #28]
 8024256:	d104      	bne.n	8024262 <_Bfree+0x22>
 8024258:	218f      	movs	r1, #143	@ 0x8f
 802425a:	4b09      	ldr	r3, [pc, #36]	@ (8024280 <_Bfree+0x40>)
 802425c:	4809      	ldr	r0, [pc, #36]	@ (8024284 <_Bfree+0x44>)
 802425e:	f001 f88b 	bl	8025378 <__assert_func>
 8024262:	6046      	str	r6, [r0, #4]
 8024264:	6086      	str	r6, [r0, #8]
 8024266:	6006      	str	r6, [r0, #0]
 8024268:	60c6      	str	r6, [r0, #12]
 802426a:	2c00      	cmp	r4, #0
 802426c:	d007      	beq.n	802427e <_Bfree+0x3e>
 802426e:	69eb      	ldr	r3, [r5, #28]
 8024270:	6862      	ldr	r2, [r4, #4]
 8024272:	68db      	ldr	r3, [r3, #12]
 8024274:	0092      	lsls	r2, r2, #2
 8024276:	189b      	adds	r3, r3, r2
 8024278:	681a      	ldr	r2, [r3, #0]
 802427a:	6022      	str	r2, [r4, #0]
 802427c:	601c      	str	r4, [r3, #0]
 802427e:	bd70      	pop	{r4, r5, r6, pc}
 8024280:	080294aa 	.word	0x080294aa
 8024284:	0802958a 	.word	0x0802958a

08024288 <__multadd>:
 8024288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802428a:	000f      	movs	r7, r1
 802428c:	9001      	str	r0, [sp, #4]
 802428e:	000c      	movs	r4, r1
 8024290:	001e      	movs	r6, r3
 8024292:	2000      	movs	r0, #0
 8024294:	690d      	ldr	r5, [r1, #16]
 8024296:	3714      	adds	r7, #20
 8024298:	683b      	ldr	r3, [r7, #0]
 802429a:	3001      	adds	r0, #1
 802429c:	b299      	uxth	r1, r3
 802429e:	4351      	muls	r1, r2
 80242a0:	0c1b      	lsrs	r3, r3, #16
 80242a2:	4353      	muls	r3, r2
 80242a4:	1989      	adds	r1, r1, r6
 80242a6:	0c0e      	lsrs	r6, r1, #16
 80242a8:	199b      	adds	r3, r3, r6
 80242aa:	0c1e      	lsrs	r6, r3, #16
 80242ac:	b289      	uxth	r1, r1
 80242ae:	041b      	lsls	r3, r3, #16
 80242b0:	185b      	adds	r3, r3, r1
 80242b2:	c708      	stmia	r7!, {r3}
 80242b4:	4285      	cmp	r5, r0
 80242b6:	dcef      	bgt.n	8024298 <__multadd+0x10>
 80242b8:	2e00      	cmp	r6, #0
 80242ba:	d022      	beq.n	8024302 <__multadd+0x7a>
 80242bc:	68a3      	ldr	r3, [r4, #8]
 80242be:	42ab      	cmp	r3, r5
 80242c0:	dc19      	bgt.n	80242f6 <__multadd+0x6e>
 80242c2:	6861      	ldr	r1, [r4, #4]
 80242c4:	9801      	ldr	r0, [sp, #4]
 80242c6:	3101      	adds	r1, #1
 80242c8:	f7ff ff76 	bl	80241b8 <_Balloc>
 80242cc:	1e07      	subs	r7, r0, #0
 80242ce:	d105      	bne.n	80242dc <__multadd+0x54>
 80242d0:	003a      	movs	r2, r7
 80242d2:	21ba      	movs	r1, #186	@ 0xba
 80242d4:	4b0c      	ldr	r3, [pc, #48]	@ (8024308 <__multadd+0x80>)
 80242d6:	480d      	ldr	r0, [pc, #52]	@ (802430c <__multadd+0x84>)
 80242d8:	f001 f84e 	bl	8025378 <__assert_func>
 80242dc:	0021      	movs	r1, r4
 80242de:	6922      	ldr	r2, [r4, #16]
 80242e0:	310c      	adds	r1, #12
 80242e2:	3202      	adds	r2, #2
 80242e4:	0092      	lsls	r2, r2, #2
 80242e6:	300c      	adds	r0, #12
 80242e8:	f7fe fc62 	bl	8022bb0 <memcpy>
 80242ec:	0021      	movs	r1, r4
 80242ee:	9801      	ldr	r0, [sp, #4]
 80242f0:	f7ff ffa6 	bl	8024240 <_Bfree>
 80242f4:	003c      	movs	r4, r7
 80242f6:	1d2b      	adds	r3, r5, #4
 80242f8:	009b      	lsls	r3, r3, #2
 80242fa:	18e3      	adds	r3, r4, r3
 80242fc:	3501      	adds	r5, #1
 80242fe:	605e      	str	r6, [r3, #4]
 8024300:	6125      	str	r5, [r4, #16]
 8024302:	0020      	movs	r0, r4
 8024304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024306:	46c0      	nop			@ (mov r8, r8)
 8024308:	08029519 	.word	0x08029519
 802430c:	0802958a 	.word	0x0802958a

08024310 <__s2b>:
 8024310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024312:	0007      	movs	r7, r0
 8024314:	0018      	movs	r0, r3
 8024316:	000c      	movs	r4, r1
 8024318:	3008      	adds	r0, #8
 802431a:	2109      	movs	r1, #9
 802431c:	9301      	str	r3, [sp, #4]
 802431e:	0015      	movs	r5, r2
 8024320:	f7db ffca 	bl	80002b8 <__divsi3>
 8024324:	2301      	movs	r3, #1
 8024326:	2100      	movs	r1, #0
 8024328:	4283      	cmp	r3, r0
 802432a:	db0a      	blt.n	8024342 <__s2b+0x32>
 802432c:	0038      	movs	r0, r7
 802432e:	f7ff ff43 	bl	80241b8 <_Balloc>
 8024332:	1e01      	subs	r1, r0, #0
 8024334:	d108      	bne.n	8024348 <__s2b+0x38>
 8024336:	000a      	movs	r2, r1
 8024338:	4b19      	ldr	r3, [pc, #100]	@ (80243a0 <__s2b+0x90>)
 802433a:	481a      	ldr	r0, [pc, #104]	@ (80243a4 <__s2b+0x94>)
 802433c:	31d3      	adds	r1, #211	@ 0xd3
 802433e:	f001 f81b 	bl	8025378 <__assert_func>
 8024342:	005b      	lsls	r3, r3, #1
 8024344:	3101      	adds	r1, #1
 8024346:	e7ef      	b.n	8024328 <__s2b+0x18>
 8024348:	9b08      	ldr	r3, [sp, #32]
 802434a:	6143      	str	r3, [r0, #20]
 802434c:	2301      	movs	r3, #1
 802434e:	6103      	str	r3, [r0, #16]
 8024350:	2d09      	cmp	r5, #9
 8024352:	dd18      	ble.n	8024386 <__s2b+0x76>
 8024354:	0023      	movs	r3, r4
 8024356:	3309      	adds	r3, #9
 8024358:	001e      	movs	r6, r3
 802435a:	9300      	str	r3, [sp, #0]
 802435c:	1964      	adds	r4, r4, r5
 802435e:	7833      	ldrb	r3, [r6, #0]
 8024360:	220a      	movs	r2, #10
 8024362:	0038      	movs	r0, r7
 8024364:	3b30      	subs	r3, #48	@ 0x30
 8024366:	f7ff ff8f 	bl	8024288 <__multadd>
 802436a:	3601      	adds	r6, #1
 802436c:	0001      	movs	r1, r0
 802436e:	42a6      	cmp	r6, r4
 8024370:	d1f5      	bne.n	802435e <__s2b+0x4e>
 8024372:	002c      	movs	r4, r5
 8024374:	9b00      	ldr	r3, [sp, #0]
 8024376:	3c08      	subs	r4, #8
 8024378:	191c      	adds	r4, r3, r4
 802437a:	002e      	movs	r6, r5
 802437c:	9b01      	ldr	r3, [sp, #4]
 802437e:	429e      	cmp	r6, r3
 8024380:	db04      	blt.n	802438c <__s2b+0x7c>
 8024382:	0008      	movs	r0, r1
 8024384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024386:	2509      	movs	r5, #9
 8024388:	340a      	adds	r4, #10
 802438a:	e7f6      	b.n	802437a <__s2b+0x6a>
 802438c:	1b63      	subs	r3, r4, r5
 802438e:	5d9b      	ldrb	r3, [r3, r6]
 8024390:	220a      	movs	r2, #10
 8024392:	0038      	movs	r0, r7
 8024394:	3b30      	subs	r3, #48	@ 0x30
 8024396:	f7ff ff77 	bl	8024288 <__multadd>
 802439a:	3601      	adds	r6, #1
 802439c:	0001      	movs	r1, r0
 802439e:	e7ed      	b.n	802437c <__s2b+0x6c>
 80243a0:	08029519 	.word	0x08029519
 80243a4:	0802958a 	.word	0x0802958a

080243a8 <__hi0bits>:
 80243a8:	2280      	movs	r2, #128	@ 0x80
 80243aa:	0003      	movs	r3, r0
 80243ac:	0252      	lsls	r2, r2, #9
 80243ae:	2000      	movs	r0, #0
 80243b0:	4293      	cmp	r3, r2
 80243b2:	d201      	bcs.n	80243b8 <__hi0bits+0x10>
 80243b4:	041b      	lsls	r3, r3, #16
 80243b6:	3010      	adds	r0, #16
 80243b8:	2280      	movs	r2, #128	@ 0x80
 80243ba:	0452      	lsls	r2, r2, #17
 80243bc:	4293      	cmp	r3, r2
 80243be:	d201      	bcs.n	80243c4 <__hi0bits+0x1c>
 80243c0:	3008      	adds	r0, #8
 80243c2:	021b      	lsls	r3, r3, #8
 80243c4:	2280      	movs	r2, #128	@ 0x80
 80243c6:	0552      	lsls	r2, r2, #21
 80243c8:	4293      	cmp	r3, r2
 80243ca:	d201      	bcs.n	80243d0 <__hi0bits+0x28>
 80243cc:	3004      	adds	r0, #4
 80243ce:	011b      	lsls	r3, r3, #4
 80243d0:	2280      	movs	r2, #128	@ 0x80
 80243d2:	05d2      	lsls	r2, r2, #23
 80243d4:	4293      	cmp	r3, r2
 80243d6:	d201      	bcs.n	80243dc <__hi0bits+0x34>
 80243d8:	3002      	adds	r0, #2
 80243da:	009b      	lsls	r3, r3, #2
 80243dc:	2b00      	cmp	r3, #0
 80243de:	db03      	blt.n	80243e8 <__hi0bits+0x40>
 80243e0:	3001      	adds	r0, #1
 80243e2:	4213      	tst	r3, r2
 80243e4:	d100      	bne.n	80243e8 <__hi0bits+0x40>
 80243e6:	2020      	movs	r0, #32
 80243e8:	4770      	bx	lr

080243ea <__lo0bits>:
 80243ea:	6803      	ldr	r3, [r0, #0]
 80243ec:	0001      	movs	r1, r0
 80243ee:	2207      	movs	r2, #7
 80243f0:	0018      	movs	r0, r3
 80243f2:	4010      	ands	r0, r2
 80243f4:	4213      	tst	r3, r2
 80243f6:	d00d      	beq.n	8024414 <__lo0bits+0x2a>
 80243f8:	3a06      	subs	r2, #6
 80243fa:	2000      	movs	r0, #0
 80243fc:	4213      	tst	r3, r2
 80243fe:	d105      	bne.n	802440c <__lo0bits+0x22>
 8024400:	3002      	adds	r0, #2
 8024402:	4203      	tst	r3, r0
 8024404:	d003      	beq.n	802440e <__lo0bits+0x24>
 8024406:	40d3      	lsrs	r3, r2
 8024408:	0010      	movs	r0, r2
 802440a:	600b      	str	r3, [r1, #0]
 802440c:	4770      	bx	lr
 802440e:	089b      	lsrs	r3, r3, #2
 8024410:	600b      	str	r3, [r1, #0]
 8024412:	e7fb      	b.n	802440c <__lo0bits+0x22>
 8024414:	b29a      	uxth	r2, r3
 8024416:	2a00      	cmp	r2, #0
 8024418:	d101      	bne.n	802441e <__lo0bits+0x34>
 802441a:	2010      	movs	r0, #16
 802441c:	0c1b      	lsrs	r3, r3, #16
 802441e:	b2da      	uxtb	r2, r3
 8024420:	2a00      	cmp	r2, #0
 8024422:	d101      	bne.n	8024428 <__lo0bits+0x3e>
 8024424:	3008      	adds	r0, #8
 8024426:	0a1b      	lsrs	r3, r3, #8
 8024428:	071a      	lsls	r2, r3, #28
 802442a:	d101      	bne.n	8024430 <__lo0bits+0x46>
 802442c:	3004      	adds	r0, #4
 802442e:	091b      	lsrs	r3, r3, #4
 8024430:	079a      	lsls	r2, r3, #30
 8024432:	d101      	bne.n	8024438 <__lo0bits+0x4e>
 8024434:	3002      	adds	r0, #2
 8024436:	089b      	lsrs	r3, r3, #2
 8024438:	07da      	lsls	r2, r3, #31
 802443a:	d4e9      	bmi.n	8024410 <__lo0bits+0x26>
 802443c:	3001      	adds	r0, #1
 802443e:	085b      	lsrs	r3, r3, #1
 8024440:	d1e6      	bne.n	8024410 <__lo0bits+0x26>
 8024442:	2020      	movs	r0, #32
 8024444:	e7e2      	b.n	802440c <__lo0bits+0x22>
	...

08024448 <__i2b>:
 8024448:	b510      	push	{r4, lr}
 802444a:	000c      	movs	r4, r1
 802444c:	2101      	movs	r1, #1
 802444e:	f7ff feb3 	bl	80241b8 <_Balloc>
 8024452:	2800      	cmp	r0, #0
 8024454:	d107      	bne.n	8024466 <__i2b+0x1e>
 8024456:	2146      	movs	r1, #70	@ 0x46
 8024458:	4c05      	ldr	r4, [pc, #20]	@ (8024470 <__i2b+0x28>)
 802445a:	0002      	movs	r2, r0
 802445c:	4b05      	ldr	r3, [pc, #20]	@ (8024474 <__i2b+0x2c>)
 802445e:	0020      	movs	r0, r4
 8024460:	31ff      	adds	r1, #255	@ 0xff
 8024462:	f000 ff89 	bl	8025378 <__assert_func>
 8024466:	2301      	movs	r3, #1
 8024468:	6144      	str	r4, [r0, #20]
 802446a:	6103      	str	r3, [r0, #16]
 802446c:	bd10      	pop	{r4, pc}
 802446e:	46c0      	nop			@ (mov r8, r8)
 8024470:	0802958a 	.word	0x0802958a
 8024474:	08029519 	.word	0x08029519

08024478 <__multiply>:
 8024478:	b5f0      	push	{r4, r5, r6, r7, lr}
 802447a:	0014      	movs	r4, r2
 802447c:	690a      	ldr	r2, [r1, #16]
 802447e:	6923      	ldr	r3, [r4, #16]
 8024480:	000d      	movs	r5, r1
 8024482:	b08b      	sub	sp, #44	@ 0x2c
 8024484:	429a      	cmp	r2, r3
 8024486:	db02      	blt.n	802448e <__multiply+0x16>
 8024488:	0023      	movs	r3, r4
 802448a:	000c      	movs	r4, r1
 802448c:	001d      	movs	r5, r3
 802448e:	6927      	ldr	r7, [r4, #16]
 8024490:	692e      	ldr	r6, [r5, #16]
 8024492:	6861      	ldr	r1, [r4, #4]
 8024494:	19bb      	adds	r3, r7, r6
 8024496:	9303      	str	r3, [sp, #12]
 8024498:	68a3      	ldr	r3, [r4, #8]
 802449a:	19ba      	adds	r2, r7, r6
 802449c:	4293      	cmp	r3, r2
 802449e:	da00      	bge.n	80244a2 <__multiply+0x2a>
 80244a0:	3101      	adds	r1, #1
 80244a2:	f7ff fe89 	bl	80241b8 <_Balloc>
 80244a6:	9002      	str	r0, [sp, #8]
 80244a8:	2800      	cmp	r0, #0
 80244aa:	d106      	bne.n	80244ba <__multiply+0x42>
 80244ac:	21b1      	movs	r1, #177	@ 0xb1
 80244ae:	4b49      	ldr	r3, [pc, #292]	@ (80245d4 <__multiply+0x15c>)
 80244b0:	4849      	ldr	r0, [pc, #292]	@ (80245d8 <__multiply+0x160>)
 80244b2:	9a02      	ldr	r2, [sp, #8]
 80244b4:	0049      	lsls	r1, r1, #1
 80244b6:	f000 ff5f 	bl	8025378 <__assert_func>
 80244ba:	9b02      	ldr	r3, [sp, #8]
 80244bc:	2200      	movs	r2, #0
 80244be:	3314      	adds	r3, #20
 80244c0:	469c      	mov	ip, r3
 80244c2:	19bb      	adds	r3, r7, r6
 80244c4:	009b      	lsls	r3, r3, #2
 80244c6:	4463      	add	r3, ip
 80244c8:	9304      	str	r3, [sp, #16]
 80244ca:	4663      	mov	r3, ip
 80244cc:	9904      	ldr	r1, [sp, #16]
 80244ce:	428b      	cmp	r3, r1
 80244d0:	d32a      	bcc.n	8024528 <__multiply+0xb0>
 80244d2:	0023      	movs	r3, r4
 80244d4:	00bf      	lsls	r7, r7, #2
 80244d6:	3314      	adds	r3, #20
 80244d8:	3514      	adds	r5, #20
 80244da:	9308      	str	r3, [sp, #32]
 80244dc:	00b6      	lsls	r6, r6, #2
 80244de:	19db      	adds	r3, r3, r7
 80244e0:	9305      	str	r3, [sp, #20]
 80244e2:	19ab      	adds	r3, r5, r6
 80244e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80244e6:	2304      	movs	r3, #4
 80244e8:	9306      	str	r3, [sp, #24]
 80244ea:	0023      	movs	r3, r4
 80244ec:	9a05      	ldr	r2, [sp, #20]
 80244ee:	3315      	adds	r3, #21
 80244f0:	9501      	str	r5, [sp, #4]
 80244f2:	429a      	cmp	r2, r3
 80244f4:	d305      	bcc.n	8024502 <__multiply+0x8a>
 80244f6:	1b13      	subs	r3, r2, r4
 80244f8:	3b15      	subs	r3, #21
 80244fa:	089b      	lsrs	r3, r3, #2
 80244fc:	3301      	adds	r3, #1
 80244fe:	009b      	lsls	r3, r3, #2
 8024500:	9306      	str	r3, [sp, #24]
 8024502:	9b01      	ldr	r3, [sp, #4]
 8024504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024506:	4293      	cmp	r3, r2
 8024508:	d310      	bcc.n	802452c <__multiply+0xb4>
 802450a:	9b03      	ldr	r3, [sp, #12]
 802450c:	2b00      	cmp	r3, #0
 802450e:	dd05      	ble.n	802451c <__multiply+0xa4>
 8024510:	9b04      	ldr	r3, [sp, #16]
 8024512:	3b04      	subs	r3, #4
 8024514:	9304      	str	r3, [sp, #16]
 8024516:	681b      	ldr	r3, [r3, #0]
 8024518:	2b00      	cmp	r3, #0
 802451a:	d056      	beq.n	80245ca <__multiply+0x152>
 802451c:	9b02      	ldr	r3, [sp, #8]
 802451e:	9a03      	ldr	r2, [sp, #12]
 8024520:	0018      	movs	r0, r3
 8024522:	611a      	str	r2, [r3, #16]
 8024524:	b00b      	add	sp, #44	@ 0x2c
 8024526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024528:	c304      	stmia	r3!, {r2}
 802452a:	e7cf      	b.n	80244cc <__multiply+0x54>
 802452c:	9b01      	ldr	r3, [sp, #4]
 802452e:	6818      	ldr	r0, [r3, #0]
 8024530:	b280      	uxth	r0, r0
 8024532:	2800      	cmp	r0, #0
 8024534:	d01e      	beq.n	8024574 <__multiply+0xfc>
 8024536:	4667      	mov	r7, ip
 8024538:	2500      	movs	r5, #0
 802453a:	9e08      	ldr	r6, [sp, #32]
 802453c:	ce02      	ldmia	r6!, {r1}
 802453e:	683b      	ldr	r3, [r7, #0]
 8024540:	9307      	str	r3, [sp, #28]
 8024542:	b28b      	uxth	r3, r1
 8024544:	4343      	muls	r3, r0
 8024546:	001a      	movs	r2, r3
 8024548:	466b      	mov	r3, sp
 802454a:	0c09      	lsrs	r1, r1, #16
 802454c:	8b9b      	ldrh	r3, [r3, #28]
 802454e:	4341      	muls	r1, r0
 8024550:	18d3      	adds	r3, r2, r3
 8024552:	9a07      	ldr	r2, [sp, #28]
 8024554:	195b      	adds	r3, r3, r5
 8024556:	0c12      	lsrs	r2, r2, #16
 8024558:	1889      	adds	r1, r1, r2
 802455a:	0c1a      	lsrs	r2, r3, #16
 802455c:	188a      	adds	r2, r1, r2
 802455e:	b29b      	uxth	r3, r3
 8024560:	0c15      	lsrs	r5, r2, #16
 8024562:	0412      	lsls	r2, r2, #16
 8024564:	431a      	orrs	r2, r3
 8024566:	9b05      	ldr	r3, [sp, #20]
 8024568:	c704      	stmia	r7!, {r2}
 802456a:	42b3      	cmp	r3, r6
 802456c:	d8e6      	bhi.n	802453c <__multiply+0xc4>
 802456e:	4663      	mov	r3, ip
 8024570:	9a06      	ldr	r2, [sp, #24]
 8024572:	509d      	str	r5, [r3, r2]
 8024574:	9b01      	ldr	r3, [sp, #4]
 8024576:	6818      	ldr	r0, [r3, #0]
 8024578:	0c00      	lsrs	r0, r0, #16
 802457a:	d020      	beq.n	80245be <__multiply+0x146>
 802457c:	4663      	mov	r3, ip
 802457e:	0025      	movs	r5, r4
 8024580:	4661      	mov	r1, ip
 8024582:	2700      	movs	r7, #0
 8024584:	681b      	ldr	r3, [r3, #0]
 8024586:	3514      	adds	r5, #20
 8024588:	682a      	ldr	r2, [r5, #0]
 802458a:	680e      	ldr	r6, [r1, #0]
 802458c:	b292      	uxth	r2, r2
 802458e:	4342      	muls	r2, r0
 8024590:	0c36      	lsrs	r6, r6, #16
 8024592:	1992      	adds	r2, r2, r6
 8024594:	19d2      	adds	r2, r2, r7
 8024596:	0416      	lsls	r6, r2, #16
 8024598:	b29b      	uxth	r3, r3
 802459a:	431e      	orrs	r6, r3
 802459c:	600e      	str	r6, [r1, #0]
 802459e:	cd40      	ldmia	r5!, {r6}
 80245a0:	684b      	ldr	r3, [r1, #4]
 80245a2:	0c36      	lsrs	r6, r6, #16
 80245a4:	4346      	muls	r6, r0
 80245a6:	b29b      	uxth	r3, r3
 80245a8:	0c12      	lsrs	r2, r2, #16
 80245aa:	18f3      	adds	r3, r6, r3
 80245ac:	189b      	adds	r3, r3, r2
 80245ae:	9a05      	ldr	r2, [sp, #20]
 80245b0:	0c1f      	lsrs	r7, r3, #16
 80245b2:	3104      	adds	r1, #4
 80245b4:	42aa      	cmp	r2, r5
 80245b6:	d8e7      	bhi.n	8024588 <__multiply+0x110>
 80245b8:	4662      	mov	r2, ip
 80245ba:	9906      	ldr	r1, [sp, #24]
 80245bc:	5053      	str	r3, [r2, r1]
 80245be:	9b01      	ldr	r3, [sp, #4]
 80245c0:	3304      	adds	r3, #4
 80245c2:	9301      	str	r3, [sp, #4]
 80245c4:	2304      	movs	r3, #4
 80245c6:	449c      	add	ip, r3
 80245c8:	e79b      	b.n	8024502 <__multiply+0x8a>
 80245ca:	9b03      	ldr	r3, [sp, #12]
 80245cc:	3b01      	subs	r3, #1
 80245ce:	9303      	str	r3, [sp, #12]
 80245d0:	e79b      	b.n	802450a <__multiply+0x92>
 80245d2:	46c0      	nop			@ (mov r8, r8)
 80245d4:	08029519 	.word	0x08029519
 80245d8:	0802958a 	.word	0x0802958a

080245dc <__pow5mult>:
 80245dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80245de:	2303      	movs	r3, #3
 80245e0:	0015      	movs	r5, r2
 80245e2:	0007      	movs	r7, r0
 80245e4:	000e      	movs	r6, r1
 80245e6:	401a      	ands	r2, r3
 80245e8:	421d      	tst	r5, r3
 80245ea:	d008      	beq.n	80245fe <__pow5mult+0x22>
 80245ec:	4925      	ldr	r1, [pc, #148]	@ (8024684 <__pow5mult+0xa8>)
 80245ee:	3a01      	subs	r2, #1
 80245f0:	0092      	lsls	r2, r2, #2
 80245f2:	5852      	ldr	r2, [r2, r1]
 80245f4:	2300      	movs	r3, #0
 80245f6:	0031      	movs	r1, r6
 80245f8:	f7ff fe46 	bl	8024288 <__multadd>
 80245fc:	0006      	movs	r6, r0
 80245fe:	10ad      	asrs	r5, r5, #2
 8024600:	d03d      	beq.n	802467e <__pow5mult+0xa2>
 8024602:	69fc      	ldr	r4, [r7, #28]
 8024604:	2c00      	cmp	r4, #0
 8024606:	d10f      	bne.n	8024628 <__pow5mult+0x4c>
 8024608:	2010      	movs	r0, #16
 802460a:	f7ff fd07 	bl	802401c <malloc>
 802460e:	1e02      	subs	r2, r0, #0
 8024610:	61f8      	str	r0, [r7, #28]
 8024612:	d105      	bne.n	8024620 <__pow5mult+0x44>
 8024614:	21b4      	movs	r1, #180	@ 0xb4
 8024616:	4b1c      	ldr	r3, [pc, #112]	@ (8024688 <__pow5mult+0xac>)
 8024618:	481c      	ldr	r0, [pc, #112]	@ (802468c <__pow5mult+0xb0>)
 802461a:	31ff      	adds	r1, #255	@ 0xff
 802461c:	f000 feac 	bl	8025378 <__assert_func>
 8024620:	6044      	str	r4, [r0, #4]
 8024622:	6084      	str	r4, [r0, #8]
 8024624:	6004      	str	r4, [r0, #0]
 8024626:	60c4      	str	r4, [r0, #12]
 8024628:	69fb      	ldr	r3, [r7, #28]
 802462a:	689c      	ldr	r4, [r3, #8]
 802462c:	9301      	str	r3, [sp, #4]
 802462e:	2c00      	cmp	r4, #0
 8024630:	d108      	bne.n	8024644 <__pow5mult+0x68>
 8024632:	0038      	movs	r0, r7
 8024634:	4916      	ldr	r1, [pc, #88]	@ (8024690 <__pow5mult+0xb4>)
 8024636:	f7ff ff07 	bl	8024448 <__i2b>
 802463a:	9b01      	ldr	r3, [sp, #4]
 802463c:	0004      	movs	r4, r0
 802463e:	6098      	str	r0, [r3, #8]
 8024640:	2300      	movs	r3, #0
 8024642:	6003      	str	r3, [r0, #0]
 8024644:	2301      	movs	r3, #1
 8024646:	421d      	tst	r5, r3
 8024648:	d00a      	beq.n	8024660 <__pow5mult+0x84>
 802464a:	0031      	movs	r1, r6
 802464c:	0022      	movs	r2, r4
 802464e:	0038      	movs	r0, r7
 8024650:	f7ff ff12 	bl	8024478 <__multiply>
 8024654:	0031      	movs	r1, r6
 8024656:	9001      	str	r0, [sp, #4]
 8024658:	0038      	movs	r0, r7
 802465a:	f7ff fdf1 	bl	8024240 <_Bfree>
 802465e:	9e01      	ldr	r6, [sp, #4]
 8024660:	106d      	asrs	r5, r5, #1
 8024662:	d00c      	beq.n	802467e <__pow5mult+0xa2>
 8024664:	6820      	ldr	r0, [r4, #0]
 8024666:	2800      	cmp	r0, #0
 8024668:	d107      	bne.n	802467a <__pow5mult+0x9e>
 802466a:	0022      	movs	r2, r4
 802466c:	0021      	movs	r1, r4
 802466e:	0038      	movs	r0, r7
 8024670:	f7ff ff02 	bl	8024478 <__multiply>
 8024674:	2300      	movs	r3, #0
 8024676:	6020      	str	r0, [r4, #0]
 8024678:	6003      	str	r3, [r0, #0]
 802467a:	0004      	movs	r4, r0
 802467c:	e7e2      	b.n	8024644 <__pow5mult+0x68>
 802467e:	0030      	movs	r0, r6
 8024680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024682:	46c0      	nop			@ (mov r8, r8)
 8024684:	080295e4 	.word	0x080295e4
 8024688:	080294aa 	.word	0x080294aa
 802468c:	0802958a 	.word	0x0802958a
 8024690:	00000271 	.word	0x00000271

08024694 <__lshift>:
 8024694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024696:	000c      	movs	r4, r1
 8024698:	0016      	movs	r6, r2
 802469a:	6923      	ldr	r3, [r4, #16]
 802469c:	1157      	asrs	r7, r2, #5
 802469e:	b085      	sub	sp, #20
 80246a0:	18fb      	adds	r3, r7, r3
 80246a2:	9301      	str	r3, [sp, #4]
 80246a4:	3301      	adds	r3, #1
 80246a6:	9300      	str	r3, [sp, #0]
 80246a8:	6849      	ldr	r1, [r1, #4]
 80246aa:	68a3      	ldr	r3, [r4, #8]
 80246ac:	9002      	str	r0, [sp, #8]
 80246ae:	9a00      	ldr	r2, [sp, #0]
 80246b0:	4293      	cmp	r3, r2
 80246b2:	db10      	blt.n	80246d6 <__lshift+0x42>
 80246b4:	9802      	ldr	r0, [sp, #8]
 80246b6:	f7ff fd7f 	bl	80241b8 <_Balloc>
 80246ba:	2300      	movs	r3, #0
 80246bc:	0001      	movs	r1, r0
 80246be:	0005      	movs	r5, r0
 80246c0:	001a      	movs	r2, r3
 80246c2:	3114      	adds	r1, #20
 80246c4:	4298      	cmp	r0, r3
 80246c6:	d10c      	bne.n	80246e2 <__lshift+0x4e>
 80246c8:	21ef      	movs	r1, #239	@ 0xef
 80246ca:	002a      	movs	r2, r5
 80246cc:	4b25      	ldr	r3, [pc, #148]	@ (8024764 <__lshift+0xd0>)
 80246ce:	4826      	ldr	r0, [pc, #152]	@ (8024768 <__lshift+0xd4>)
 80246d0:	0049      	lsls	r1, r1, #1
 80246d2:	f000 fe51 	bl	8025378 <__assert_func>
 80246d6:	3101      	adds	r1, #1
 80246d8:	005b      	lsls	r3, r3, #1
 80246da:	e7e8      	b.n	80246ae <__lshift+0x1a>
 80246dc:	0098      	lsls	r0, r3, #2
 80246de:	500a      	str	r2, [r1, r0]
 80246e0:	3301      	adds	r3, #1
 80246e2:	42bb      	cmp	r3, r7
 80246e4:	dbfa      	blt.n	80246dc <__lshift+0x48>
 80246e6:	43fb      	mvns	r3, r7
 80246e8:	17db      	asrs	r3, r3, #31
 80246ea:	401f      	ands	r7, r3
 80246ec:	00bf      	lsls	r7, r7, #2
 80246ee:	0023      	movs	r3, r4
 80246f0:	201f      	movs	r0, #31
 80246f2:	19c9      	adds	r1, r1, r7
 80246f4:	0037      	movs	r7, r6
 80246f6:	6922      	ldr	r2, [r4, #16]
 80246f8:	3314      	adds	r3, #20
 80246fa:	0092      	lsls	r2, r2, #2
 80246fc:	189a      	adds	r2, r3, r2
 80246fe:	4007      	ands	r7, r0
 8024700:	4206      	tst	r6, r0
 8024702:	d029      	beq.n	8024758 <__lshift+0xc4>
 8024704:	3001      	adds	r0, #1
 8024706:	1bc0      	subs	r0, r0, r7
 8024708:	9003      	str	r0, [sp, #12]
 802470a:	468c      	mov	ip, r1
 802470c:	2000      	movs	r0, #0
 802470e:	681e      	ldr	r6, [r3, #0]
 8024710:	40be      	lsls	r6, r7
 8024712:	4306      	orrs	r6, r0
 8024714:	4660      	mov	r0, ip
 8024716:	c040      	stmia	r0!, {r6}
 8024718:	4684      	mov	ip, r0
 802471a:	9e03      	ldr	r6, [sp, #12]
 802471c:	cb01      	ldmia	r3!, {r0}
 802471e:	40f0      	lsrs	r0, r6
 8024720:	429a      	cmp	r2, r3
 8024722:	d8f4      	bhi.n	802470e <__lshift+0x7a>
 8024724:	0026      	movs	r6, r4
 8024726:	3615      	adds	r6, #21
 8024728:	2304      	movs	r3, #4
 802472a:	42b2      	cmp	r2, r6
 802472c:	d304      	bcc.n	8024738 <__lshift+0xa4>
 802472e:	1b13      	subs	r3, r2, r4
 8024730:	3b15      	subs	r3, #21
 8024732:	089b      	lsrs	r3, r3, #2
 8024734:	3301      	adds	r3, #1
 8024736:	009b      	lsls	r3, r3, #2
 8024738:	50c8      	str	r0, [r1, r3]
 802473a:	2800      	cmp	r0, #0
 802473c:	d002      	beq.n	8024744 <__lshift+0xb0>
 802473e:	9b01      	ldr	r3, [sp, #4]
 8024740:	3302      	adds	r3, #2
 8024742:	9300      	str	r3, [sp, #0]
 8024744:	9b00      	ldr	r3, [sp, #0]
 8024746:	9802      	ldr	r0, [sp, #8]
 8024748:	3b01      	subs	r3, #1
 802474a:	0021      	movs	r1, r4
 802474c:	612b      	str	r3, [r5, #16]
 802474e:	f7ff fd77 	bl	8024240 <_Bfree>
 8024752:	0028      	movs	r0, r5
 8024754:	b005      	add	sp, #20
 8024756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024758:	cb01      	ldmia	r3!, {r0}
 802475a:	c101      	stmia	r1!, {r0}
 802475c:	429a      	cmp	r2, r3
 802475e:	d8fb      	bhi.n	8024758 <__lshift+0xc4>
 8024760:	e7f0      	b.n	8024744 <__lshift+0xb0>
 8024762:	46c0      	nop			@ (mov r8, r8)
 8024764:	08029519 	.word	0x08029519
 8024768:	0802958a 	.word	0x0802958a

0802476c <__mcmp>:
 802476c:	b530      	push	{r4, r5, lr}
 802476e:	690b      	ldr	r3, [r1, #16]
 8024770:	6904      	ldr	r4, [r0, #16]
 8024772:	0002      	movs	r2, r0
 8024774:	1ae0      	subs	r0, r4, r3
 8024776:	429c      	cmp	r4, r3
 8024778:	d10f      	bne.n	802479a <__mcmp+0x2e>
 802477a:	3214      	adds	r2, #20
 802477c:	009b      	lsls	r3, r3, #2
 802477e:	3114      	adds	r1, #20
 8024780:	0014      	movs	r4, r2
 8024782:	18c9      	adds	r1, r1, r3
 8024784:	18d2      	adds	r2, r2, r3
 8024786:	3a04      	subs	r2, #4
 8024788:	3904      	subs	r1, #4
 802478a:	6815      	ldr	r5, [r2, #0]
 802478c:	680b      	ldr	r3, [r1, #0]
 802478e:	429d      	cmp	r5, r3
 8024790:	d004      	beq.n	802479c <__mcmp+0x30>
 8024792:	2001      	movs	r0, #1
 8024794:	429d      	cmp	r5, r3
 8024796:	d200      	bcs.n	802479a <__mcmp+0x2e>
 8024798:	3802      	subs	r0, #2
 802479a:	bd30      	pop	{r4, r5, pc}
 802479c:	4294      	cmp	r4, r2
 802479e:	d3f2      	bcc.n	8024786 <__mcmp+0x1a>
 80247a0:	e7fb      	b.n	802479a <__mcmp+0x2e>
	...

080247a4 <__mdiff>:
 80247a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80247a6:	000c      	movs	r4, r1
 80247a8:	b087      	sub	sp, #28
 80247aa:	9000      	str	r0, [sp, #0]
 80247ac:	0011      	movs	r1, r2
 80247ae:	0020      	movs	r0, r4
 80247b0:	0017      	movs	r7, r2
 80247b2:	f7ff ffdb 	bl	802476c <__mcmp>
 80247b6:	1e05      	subs	r5, r0, #0
 80247b8:	d110      	bne.n	80247dc <__mdiff+0x38>
 80247ba:	0001      	movs	r1, r0
 80247bc:	9800      	ldr	r0, [sp, #0]
 80247be:	f7ff fcfb 	bl	80241b8 <_Balloc>
 80247c2:	1e02      	subs	r2, r0, #0
 80247c4:	d104      	bne.n	80247d0 <__mdiff+0x2c>
 80247c6:	4b40      	ldr	r3, [pc, #256]	@ (80248c8 <__mdiff+0x124>)
 80247c8:	4840      	ldr	r0, [pc, #256]	@ (80248cc <__mdiff+0x128>)
 80247ca:	4941      	ldr	r1, [pc, #260]	@ (80248d0 <__mdiff+0x12c>)
 80247cc:	f000 fdd4 	bl	8025378 <__assert_func>
 80247d0:	2301      	movs	r3, #1
 80247d2:	6145      	str	r5, [r0, #20]
 80247d4:	6103      	str	r3, [r0, #16]
 80247d6:	0010      	movs	r0, r2
 80247d8:	b007      	add	sp, #28
 80247da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247dc:	2600      	movs	r6, #0
 80247de:	42b0      	cmp	r0, r6
 80247e0:	da03      	bge.n	80247ea <__mdiff+0x46>
 80247e2:	0023      	movs	r3, r4
 80247e4:	003c      	movs	r4, r7
 80247e6:	001f      	movs	r7, r3
 80247e8:	3601      	adds	r6, #1
 80247ea:	6861      	ldr	r1, [r4, #4]
 80247ec:	9800      	ldr	r0, [sp, #0]
 80247ee:	f7ff fce3 	bl	80241b8 <_Balloc>
 80247f2:	1e02      	subs	r2, r0, #0
 80247f4:	d103      	bne.n	80247fe <__mdiff+0x5a>
 80247f6:	4b34      	ldr	r3, [pc, #208]	@ (80248c8 <__mdiff+0x124>)
 80247f8:	4834      	ldr	r0, [pc, #208]	@ (80248cc <__mdiff+0x128>)
 80247fa:	4936      	ldr	r1, [pc, #216]	@ (80248d4 <__mdiff+0x130>)
 80247fc:	e7e6      	b.n	80247cc <__mdiff+0x28>
 80247fe:	6923      	ldr	r3, [r4, #16]
 8024800:	3414      	adds	r4, #20
 8024802:	9300      	str	r3, [sp, #0]
 8024804:	009b      	lsls	r3, r3, #2
 8024806:	18e3      	adds	r3, r4, r3
 8024808:	0021      	movs	r1, r4
 802480a:	9401      	str	r4, [sp, #4]
 802480c:	003c      	movs	r4, r7
 802480e:	9302      	str	r3, [sp, #8]
 8024810:	693b      	ldr	r3, [r7, #16]
 8024812:	3414      	adds	r4, #20
 8024814:	009b      	lsls	r3, r3, #2
 8024816:	18e3      	adds	r3, r4, r3
 8024818:	9303      	str	r3, [sp, #12]
 802481a:	0003      	movs	r3, r0
 802481c:	60c6      	str	r6, [r0, #12]
 802481e:	468c      	mov	ip, r1
 8024820:	2000      	movs	r0, #0
 8024822:	3314      	adds	r3, #20
 8024824:	9304      	str	r3, [sp, #16]
 8024826:	9305      	str	r3, [sp, #20]
 8024828:	4663      	mov	r3, ip
 802482a:	cb20      	ldmia	r3!, {r5}
 802482c:	b2a9      	uxth	r1, r5
 802482e:	000e      	movs	r6, r1
 8024830:	469c      	mov	ip, r3
 8024832:	cc08      	ldmia	r4!, {r3}
 8024834:	0c2d      	lsrs	r5, r5, #16
 8024836:	b299      	uxth	r1, r3
 8024838:	1a71      	subs	r1, r6, r1
 802483a:	1809      	adds	r1, r1, r0
 802483c:	0c1b      	lsrs	r3, r3, #16
 802483e:	1408      	asrs	r0, r1, #16
 8024840:	1aeb      	subs	r3, r5, r3
 8024842:	181b      	adds	r3, r3, r0
 8024844:	1418      	asrs	r0, r3, #16
 8024846:	b289      	uxth	r1, r1
 8024848:	041b      	lsls	r3, r3, #16
 802484a:	4319      	orrs	r1, r3
 802484c:	9b05      	ldr	r3, [sp, #20]
 802484e:	c302      	stmia	r3!, {r1}
 8024850:	9305      	str	r3, [sp, #20]
 8024852:	9b03      	ldr	r3, [sp, #12]
 8024854:	42a3      	cmp	r3, r4
 8024856:	d8e7      	bhi.n	8024828 <__mdiff+0x84>
 8024858:	0039      	movs	r1, r7
 802485a:	9c03      	ldr	r4, [sp, #12]
 802485c:	3115      	adds	r1, #21
 802485e:	2304      	movs	r3, #4
 8024860:	428c      	cmp	r4, r1
 8024862:	d304      	bcc.n	802486e <__mdiff+0xca>
 8024864:	1be3      	subs	r3, r4, r7
 8024866:	3b15      	subs	r3, #21
 8024868:	089b      	lsrs	r3, r3, #2
 802486a:	3301      	adds	r3, #1
 802486c:	009b      	lsls	r3, r3, #2
 802486e:	9901      	ldr	r1, [sp, #4]
 8024870:	18cd      	adds	r5, r1, r3
 8024872:	9904      	ldr	r1, [sp, #16]
 8024874:	002e      	movs	r6, r5
 8024876:	18cb      	adds	r3, r1, r3
 8024878:	001f      	movs	r7, r3
 802487a:	9902      	ldr	r1, [sp, #8]
 802487c:	428e      	cmp	r6, r1
 802487e:	d311      	bcc.n	80248a4 <__mdiff+0x100>
 8024880:	9c02      	ldr	r4, [sp, #8]
 8024882:	1ee9      	subs	r1, r5, #3
 8024884:	2000      	movs	r0, #0
 8024886:	428c      	cmp	r4, r1
 8024888:	d304      	bcc.n	8024894 <__mdiff+0xf0>
 802488a:	0021      	movs	r1, r4
 802488c:	3103      	adds	r1, #3
 802488e:	1b49      	subs	r1, r1, r5
 8024890:	0889      	lsrs	r1, r1, #2
 8024892:	0088      	lsls	r0, r1, #2
 8024894:	181b      	adds	r3, r3, r0
 8024896:	3b04      	subs	r3, #4
 8024898:	6819      	ldr	r1, [r3, #0]
 802489a:	2900      	cmp	r1, #0
 802489c:	d010      	beq.n	80248c0 <__mdiff+0x11c>
 802489e:	9b00      	ldr	r3, [sp, #0]
 80248a0:	6113      	str	r3, [r2, #16]
 80248a2:	e798      	b.n	80247d6 <__mdiff+0x32>
 80248a4:	4684      	mov	ip, r0
 80248a6:	ce02      	ldmia	r6!, {r1}
 80248a8:	b288      	uxth	r0, r1
 80248aa:	4460      	add	r0, ip
 80248ac:	1400      	asrs	r0, r0, #16
 80248ae:	0c0c      	lsrs	r4, r1, #16
 80248b0:	1904      	adds	r4, r0, r4
 80248b2:	4461      	add	r1, ip
 80248b4:	1420      	asrs	r0, r4, #16
 80248b6:	b289      	uxth	r1, r1
 80248b8:	0424      	lsls	r4, r4, #16
 80248ba:	4321      	orrs	r1, r4
 80248bc:	c702      	stmia	r7!, {r1}
 80248be:	e7dc      	b.n	802487a <__mdiff+0xd6>
 80248c0:	9900      	ldr	r1, [sp, #0]
 80248c2:	3901      	subs	r1, #1
 80248c4:	9100      	str	r1, [sp, #0]
 80248c6:	e7e6      	b.n	8024896 <__mdiff+0xf2>
 80248c8:	08029519 	.word	0x08029519
 80248cc:	0802958a 	.word	0x0802958a
 80248d0:	00000237 	.word	0x00000237
 80248d4:	00000245 	.word	0x00000245

080248d8 <__ulp>:
 80248d8:	b510      	push	{r4, lr}
 80248da:	2400      	movs	r4, #0
 80248dc:	4b0c      	ldr	r3, [pc, #48]	@ (8024910 <__ulp+0x38>)
 80248de:	4a0d      	ldr	r2, [pc, #52]	@ (8024914 <__ulp+0x3c>)
 80248e0:	400b      	ands	r3, r1
 80248e2:	189b      	adds	r3, r3, r2
 80248e4:	42a3      	cmp	r3, r4
 80248e6:	dc06      	bgt.n	80248f6 <__ulp+0x1e>
 80248e8:	425b      	negs	r3, r3
 80248ea:	151a      	asrs	r2, r3, #20
 80248ec:	2a13      	cmp	r2, #19
 80248ee:	dc05      	bgt.n	80248fc <__ulp+0x24>
 80248f0:	2380      	movs	r3, #128	@ 0x80
 80248f2:	031b      	lsls	r3, r3, #12
 80248f4:	4113      	asrs	r3, r2
 80248f6:	0019      	movs	r1, r3
 80248f8:	0020      	movs	r0, r4
 80248fa:	bd10      	pop	{r4, pc}
 80248fc:	3a14      	subs	r2, #20
 80248fe:	2401      	movs	r4, #1
 8024900:	2a1e      	cmp	r2, #30
 8024902:	dc02      	bgt.n	802490a <__ulp+0x32>
 8024904:	2480      	movs	r4, #128	@ 0x80
 8024906:	0624      	lsls	r4, r4, #24
 8024908:	40d4      	lsrs	r4, r2
 802490a:	2300      	movs	r3, #0
 802490c:	e7f3      	b.n	80248f6 <__ulp+0x1e>
 802490e:	46c0      	nop			@ (mov r8, r8)
 8024910:	7ff00000 	.word	0x7ff00000
 8024914:	fcc00000 	.word	0xfcc00000

08024918 <__b2d>:
 8024918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802491a:	0006      	movs	r6, r0
 802491c:	6903      	ldr	r3, [r0, #16]
 802491e:	3614      	adds	r6, #20
 8024920:	009b      	lsls	r3, r3, #2
 8024922:	18f3      	adds	r3, r6, r3
 8024924:	1f1d      	subs	r5, r3, #4
 8024926:	682c      	ldr	r4, [r5, #0]
 8024928:	000f      	movs	r7, r1
 802492a:	0020      	movs	r0, r4
 802492c:	9301      	str	r3, [sp, #4]
 802492e:	f7ff fd3b 	bl	80243a8 <__hi0bits>
 8024932:	2220      	movs	r2, #32
 8024934:	1a12      	subs	r2, r2, r0
 8024936:	603a      	str	r2, [r7, #0]
 8024938:	0003      	movs	r3, r0
 802493a:	4a1c      	ldr	r2, [pc, #112]	@ (80249ac <__b2d+0x94>)
 802493c:	280a      	cmp	r0, #10
 802493e:	dc15      	bgt.n	802496c <__b2d+0x54>
 8024940:	210b      	movs	r1, #11
 8024942:	0027      	movs	r7, r4
 8024944:	1a09      	subs	r1, r1, r0
 8024946:	40cf      	lsrs	r7, r1
 8024948:	433a      	orrs	r2, r7
 802494a:	468c      	mov	ip, r1
 802494c:	0011      	movs	r1, r2
 802494e:	2200      	movs	r2, #0
 8024950:	42ae      	cmp	r6, r5
 8024952:	d202      	bcs.n	802495a <__b2d+0x42>
 8024954:	9a01      	ldr	r2, [sp, #4]
 8024956:	3a08      	subs	r2, #8
 8024958:	6812      	ldr	r2, [r2, #0]
 802495a:	3315      	adds	r3, #21
 802495c:	409c      	lsls	r4, r3
 802495e:	4663      	mov	r3, ip
 8024960:	0027      	movs	r7, r4
 8024962:	40da      	lsrs	r2, r3
 8024964:	4317      	orrs	r7, r2
 8024966:	0038      	movs	r0, r7
 8024968:	b003      	add	sp, #12
 802496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802496c:	2700      	movs	r7, #0
 802496e:	42ae      	cmp	r6, r5
 8024970:	d202      	bcs.n	8024978 <__b2d+0x60>
 8024972:	9d01      	ldr	r5, [sp, #4]
 8024974:	3d08      	subs	r5, #8
 8024976:	682f      	ldr	r7, [r5, #0]
 8024978:	210b      	movs	r1, #11
 802497a:	4249      	negs	r1, r1
 802497c:	468c      	mov	ip, r1
 802497e:	449c      	add	ip, r3
 8024980:	2b0b      	cmp	r3, #11
 8024982:	d010      	beq.n	80249a6 <__b2d+0x8e>
 8024984:	4661      	mov	r1, ip
 8024986:	2320      	movs	r3, #32
 8024988:	408c      	lsls	r4, r1
 802498a:	1a5b      	subs	r3, r3, r1
 802498c:	0039      	movs	r1, r7
 802498e:	40d9      	lsrs	r1, r3
 8024990:	430c      	orrs	r4, r1
 8024992:	4322      	orrs	r2, r4
 8024994:	0011      	movs	r1, r2
 8024996:	2200      	movs	r2, #0
 8024998:	42b5      	cmp	r5, r6
 802499a:	d901      	bls.n	80249a0 <__b2d+0x88>
 802499c:	3d04      	subs	r5, #4
 802499e:	682a      	ldr	r2, [r5, #0]
 80249a0:	4664      	mov	r4, ip
 80249a2:	40a7      	lsls	r7, r4
 80249a4:	e7dd      	b.n	8024962 <__b2d+0x4a>
 80249a6:	4322      	orrs	r2, r4
 80249a8:	0011      	movs	r1, r2
 80249aa:	e7dc      	b.n	8024966 <__b2d+0x4e>
 80249ac:	3ff00000 	.word	0x3ff00000

080249b0 <__d2b>:
 80249b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80249b2:	2101      	movs	r1, #1
 80249b4:	0016      	movs	r6, r2
 80249b6:	001f      	movs	r7, r3
 80249b8:	f7ff fbfe 	bl	80241b8 <_Balloc>
 80249bc:	1e04      	subs	r4, r0, #0
 80249be:	d105      	bne.n	80249cc <__d2b+0x1c>
 80249c0:	0022      	movs	r2, r4
 80249c2:	4b25      	ldr	r3, [pc, #148]	@ (8024a58 <__d2b+0xa8>)
 80249c4:	4825      	ldr	r0, [pc, #148]	@ (8024a5c <__d2b+0xac>)
 80249c6:	4926      	ldr	r1, [pc, #152]	@ (8024a60 <__d2b+0xb0>)
 80249c8:	f000 fcd6 	bl	8025378 <__assert_func>
 80249cc:	033b      	lsls	r3, r7, #12
 80249ce:	007d      	lsls	r5, r7, #1
 80249d0:	0b1b      	lsrs	r3, r3, #12
 80249d2:	0d6d      	lsrs	r5, r5, #21
 80249d4:	d002      	beq.n	80249dc <__d2b+0x2c>
 80249d6:	2280      	movs	r2, #128	@ 0x80
 80249d8:	0352      	lsls	r2, r2, #13
 80249da:	4313      	orrs	r3, r2
 80249dc:	9301      	str	r3, [sp, #4]
 80249de:	2e00      	cmp	r6, #0
 80249e0:	d025      	beq.n	8024a2e <__d2b+0x7e>
 80249e2:	4668      	mov	r0, sp
 80249e4:	9600      	str	r6, [sp, #0]
 80249e6:	f7ff fd00 	bl	80243ea <__lo0bits>
 80249ea:	9b01      	ldr	r3, [sp, #4]
 80249ec:	9900      	ldr	r1, [sp, #0]
 80249ee:	2800      	cmp	r0, #0
 80249f0:	d01b      	beq.n	8024a2a <__d2b+0x7a>
 80249f2:	2220      	movs	r2, #32
 80249f4:	001e      	movs	r6, r3
 80249f6:	1a12      	subs	r2, r2, r0
 80249f8:	4096      	lsls	r6, r2
 80249fa:	0032      	movs	r2, r6
 80249fc:	40c3      	lsrs	r3, r0
 80249fe:	430a      	orrs	r2, r1
 8024a00:	6162      	str	r2, [r4, #20]
 8024a02:	9301      	str	r3, [sp, #4]
 8024a04:	9e01      	ldr	r6, [sp, #4]
 8024a06:	61a6      	str	r6, [r4, #24]
 8024a08:	1e73      	subs	r3, r6, #1
 8024a0a:	419e      	sbcs	r6, r3
 8024a0c:	3601      	adds	r6, #1
 8024a0e:	6126      	str	r6, [r4, #16]
 8024a10:	2d00      	cmp	r5, #0
 8024a12:	d014      	beq.n	8024a3e <__d2b+0x8e>
 8024a14:	2635      	movs	r6, #53	@ 0x35
 8024a16:	4b13      	ldr	r3, [pc, #76]	@ (8024a64 <__d2b+0xb4>)
 8024a18:	18ed      	adds	r5, r5, r3
 8024a1a:	9b08      	ldr	r3, [sp, #32]
 8024a1c:	182d      	adds	r5, r5, r0
 8024a1e:	601d      	str	r5, [r3, #0]
 8024a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a22:	1a36      	subs	r6, r6, r0
 8024a24:	601e      	str	r6, [r3, #0]
 8024a26:	0020      	movs	r0, r4
 8024a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024a2a:	6161      	str	r1, [r4, #20]
 8024a2c:	e7ea      	b.n	8024a04 <__d2b+0x54>
 8024a2e:	a801      	add	r0, sp, #4
 8024a30:	f7ff fcdb 	bl	80243ea <__lo0bits>
 8024a34:	9b01      	ldr	r3, [sp, #4]
 8024a36:	2601      	movs	r6, #1
 8024a38:	6163      	str	r3, [r4, #20]
 8024a3a:	3020      	adds	r0, #32
 8024a3c:	e7e7      	b.n	8024a0e <__d2b+0x5e>
 8024a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8024a68 <__d2b+0xb8>)
 8024a40:	18c0      	adds	r0, r0, r3
 8024a42:	9b08      	ldr	r3, [sp, #32]
 8024a44:	6018      	str	r0, [r3, #0]
 8024a46:	4b09      	ldr	r3, [pc, #36]	@ (8024a6c <__d2b+0xbc>)
 8024a48:	18f3      	adds	r3, r6, r3
 8024a4a:	009b      	lsls	r3, r3, #2
 8024a4c:	18e3      	adds	r3, r4, r3
 8024a4e:	6958      	ldr	r0, [r3, #20]
 8024a50:	f7ff fcaa 	bl	80243a8 <__hi0bits>
 8024a54:	0176      	lsls	r6, r6, #5
 8024a56:	e7e3      	b.n	8024a20 <__d2b+0x70>
 8024a58:	08029519 	.word	0x08029519
 8024a5c:	0802958a 	.word	0x0802958a
 8024a60:	0000030f 	.word	0x0000030f
 8024a64:	fffffbcd 	.word	0xfffffbcd
 8024a68:	fffffbce 	.word	0xfffffbce
 8024a6c:	3fffffff 	.word	0x3fffffff

08024a70 <__ratio>:
 8024a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a72:	b087      	sub	sp, #28
 8024a74:	000f      	movs	r7, r1
 8024a76:	a904      	add	r1, sp, #16
 8024a78:	0006      	movs	r6, r0
 8024a7a:	f7ff ff4d 	bl	8024918 <__b2d>
 8024a7e:	9000      	str	r0, [sp, #0]
 8024a80:	9101      	str	r1, [sp, #4]
 8024a82:	9b00      	ldr	r3, [sp, #0]
 8024a84:	9c01      	ldr	r4, [sp, #4]
 8024a86:	0038      	movs	r0, r7
 8024a88:	a905      	add	r1, sp, #20
 8024a8a:	9302      	str	r3, [sp, #8]
 8024a8c:	9403      	str	r4, [sp, #12]
 8024a8e:	f7ff ff43 	bl	8024918 <__b2d>
 8024a92:	000d      	movs	r5, r1
 8024a94:	0002      	movs	r2, r0
 8024a96:	000b      	movs	r3, r1
 8024a98:	6930      	ldr	r0, [r6, #16]
 8024a9a:	6939      	ldr	r1, [r7, #16]
 8024a9c:	9e04      	ldr	r6, [sp, #16]
 8024a9e:	1a40      	subs	r0, r0, r1
 8024aa0:	9905      	ldr	r1, [sp, #20]
 8024aa2:	0140      	lsls	r0, r0, #5
 8024aa4:	1a71      	subs	r1, r6, r1
 8024aa6:	1841      	adds	r1, r0, r1
 8024aa8:	0508      	lsls	r0, r1, #20
 8024aaa:	2900      	cmp	r1, #0
 8024aac:	dd08      	ble.n	8024ac0 <__ratio+0x50>
 8024aae:	9901      	ldr	r1, [sp, #4]
 8024ab0:	1841      	adds	r1, r0, r1
 8024ab2:	9103      	str	r1, [sp, #12]
 8024ab4:	9802      	ldr	r0, [sp, #8]
 8024ab6:	9903      	ldr	r1, [sp, #12]
 8024ab8:	f7dd f97c 	bl	8001db4 <__aeabi_ddiv>
 8024abc:	b007      	add	sp, #28
 8024abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ac0:	1a2b      	subs	r3, r5, r0
 8024ac2:	e7f7      	b.n	8024ab4 <__ratio+0x44>

08024ac4 <__copybits>:
 8024ac4:	b570      	push	{r4, r5, r6, lr}
 8024ac6:	0014      	movs	r4, r2
 8024ac8:	0005      	movs	r5, r0
 8024aca:	3901      	subs	r1, #1
 8024acc:	6913      	ldr	r3, [r2, #16]
 8024ace:	1149      	asrs	r1, r1, #5
 8024ad0:	3101      	adds	r1, #1
 8024ad2:	0089      	lsls	r1, r1, #2
 8024ad4:	3414      	adds	r4, #20
 8024ad6:	009b      	lsls	r3, r3, #2
 8024ad8:	1841      	adds	r1, r0, r1
 8024ada:	18e3      	adds	r3, r4, r3
 8024adc:	42a3      	cmp	r3, r4
 8024ade:	d80d      	bhi.n	8024afc <__copybits+0x38>
 8024ae0:	0014      	movs	r4, r2
 8024ae2:	3411      	adds	r4, #17
 8024ae4:	2500      	movs	r5, #0
 8024ae6:	429c      	cmp	r4, r3
 8024ae8:	d803      	bhi.n	8024af2 <__copybits+0x2e>
 8024aea:	1a9b      	subs	r3, r3, r2
 8024aec:	3b11      	subs	r3, #17
 8024aee:	089b      	lsrs	r3, r3, #2
 8024af0:	009d      	lsls	r5, r3, #2
 8024af2:	2300      	movs	r3, #0
 8024af4:	1940      	adds	r0, r0, r5
 8024af6:	4281      	cmp	r1, r0
 8024af8:	d803      	bhi.n	8024b02 <__copybits+0x3e>
 8024afa:	bd70      	pop	{r4, r5, r6, pc}
 8024afc:	cc40      	ldmia	r4!, {r6}
 8024afe:	c540      	stmia	r5!, {r6}
 8024b00:	e7ec      	b.n	8024adc <__copybits+0x18>
 8024b02:	c008      	stmia	r0!, {r3}
 8024b04:	e7f7      	b.n	8024af6 <__copybits+0x32>

08024b06 <__any_on>:
 8024b06:	0002      	movs	r2, r0
 8024b08:	6900      	ldr	r0, [r0, #16]
 8024b0a:	b510      	push	{r4, lr}
 8024b0c:	3214      	adds	r2, #20
 8024b0e:	114b      	asrs	r3, r1, #5
 8024b10:	4298      	cmp	r0, r3
 8024b12:	db13      	blt.n	8024b3c <__any_on+0x36>
 8024b14:	dd0c      	ble.n	8024b30 <__any_on+0x2a>
 8024b16:	241f      	movs	r4, #31
 8024b18:	0008      	movs	r0, r1
 8024b1a:	4020      	ands	r0, r4
 8024b1c:	4221      	tst	r1, r4
 8024b1e:	d007      	beq.n	8024b30 <__any_on+0x2a>
 8024b20:	0099      	lsls	r1, r3, #2
 8024b22:	588c      	ldr	r4, [r1, r2]
 8024b24:	0021      	movs	r1, r4
 8024b26:	40c1      	lsrs	r1, r0
 8024b28:	4081      	lsls	r1, r0
 8024b2a:	2001      	movs	r0, #1
 8024b2c:	428c      	cmp	r4, r1
 8024b2e:	d104      	bne.n	8024b3a <__any_on+0x34>
 8024b30:	009b      	lsls	r3, r3, #2
 8024b32:	18d3      	adds	r3, r2, r3
 8024b34:	4293      	cmp	r3, r2
 8024b36:	d803      	bhi.n	8024b40 <__any_on+0x3a>
 8024b38:	2000      	movs	r0, #0
 8024b3a:	bd10      	pop	{r4, pc}
 8024b3c:	0003      	movs	r3, r0
 8024b3e:	e7f7      	b.n	8024b30 <__any_on+0x2a>
 8024b40:	3b04      	subs	r3, #4
 8024b42:	6819      	ldr	r1, [r3, #0]
 8024b44:	2900      	cmp	r1, #0
 8024b46:	d0f5      	beq.n	8024b34 <__any_on+0x2e>
 8024b48:	2001      	movs	r0, #1
 8024b4a:	e7f6      	b.n	8024b3a <__any_on+0x34>

08024b4c <__ascii_wctomb>:
 8024b4c:	0003      	movs	r3, r0
 8024b4e:	1e08      	subs	r0, r1, #0
 8024b50:	d005      	beq.n	8024b5e <__ascii_wctomb+0x12>
 8024b52:	2aff      	cmp	r2, #255	@ 0xff
 8024b54:	d904      	bls.n	8024b60 <__ascii_wctomb+0x14>
 8024b56:	228a      	movs	r2, #138	@ 0x8a
 8024b58:	2001      	movs	r0, #1
 8024b5a:	601a      	str	r2, [r3, #0]
 8024b5c:	4240      	negs	r0, r0
 8024b5e:	4770      	bx	lr
 8024b60:	2001      	movs	r0, #1
 8024b62:	700a      	strb	r2, [r1, #0]
 8024b64:	e7fb      	b.n	8024b5e <__ascii_wctomb+0x12>
	...

08024b68 <__ssputs_r>:
 8024b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b6a:	688e      	ldr	r6, [r1, #8]
 8024b6c:	b085      	sub	sp, #20
 8024b6e:	001f      	movs	r7, r3
 8024b70:	000c      	movs	r4, r1
 8024b72:	680b      	ldr	r3, [r1, #0]
 8024b74:	9002      	str	r0, [sp, #8]
 8024b76:	9203      	str	r2, [sp, #12]
 8024b78:	42be      	cmp	r6, r7
 8024b7a:	d830      	bhi.n	8024bde <__ssputs_r+0x76>
 8024b7c:	210c      	movs	r1, #12
 8024b7e:	5e62      	ldrsh	r2, [r4, r1]
 8024b80:	2190      	movs	r1, #144	@ 0x90
 8024b82:	00c9      	lsls	r1, r1, #3
 8024b84:	420a      	tst	r2, r1
 8024b86:	d028      	beq.n	8024bda <__ssputs_r+0x72>
 8024b88:	2003      	movs	r0, #3
 8024b8a:	6921      	ldr	r1, [r4, #16]
 8024b8c:	1a5b      	subs	r3, r3, r1
 8024b8e:	9301      	str	r3, [sp, #4]
 8024b90:	6963      	ldr	r3, [r4, #20]
 8024b92:	4343      	muls	r3, r0
 8024b94:	9801      	ldr	r0, [sp, #4]
 8024b96:	0fdd      	lsrs	r5, r3, #31
 8024b98:	18ed      	adds	r5, r5, r3
 8024b9a:	1c7b      	adds	r3, r7, #1
 8024b9c:	181b      	adds	r3, r3, r0
 8024b9e:	106d      	asrs	r5, r5, #1
 8024ba0:	42ab      	cmp	r3, r5
 8024ba2:	d900      	bls.n	8024ba6 <__ssputs_r+0x3e>
 8024ba4:	001d      	movs	r5, r3
 8024ba6:	0552      	lsls	r2, r2, #21
 8024ba8:	d528      	bpl.n	8024bfc <__ssputs_r+0x94>
 8024baa:	0029      	movs	r1, r5
 8024bac:	9802      	ldr	r0, [sp, #8]
 8024bae:	f7ff fa61 	bl	8024074 <_malloc_r>
 8024bb2:	1e06      	subs	r6, r0, #0
 8024bb4:	d02c      	beq.n	8024c10 <__ssputs_r+0xa8>
 8024bb6:	9a01      	ldr	r2, [sp, #4]
 8024bb8:	6921      	ldr	r1, [r4, #16]
 8024bba:	f7fd fff9 	bl	8022bb0 <memcpy>
 8024bbe:	89a2      	ldrh	r2, [r4, #12]
 8024bc0:	4b18      	ldr	r3, [pc, #96]	@ (8024c24 <__ssputs_r+0xbc>)
 8024bc2:	401a      	ands	r2, r3
 8024bc4:	2380      	movs	r3, #128	@ 0x80
 8024bc6:	4313      	orrs	r3, r2
 8024bc8:	81a3      	strh	r3, [r4, #12]
 8024bca:	9b01      	ldr	r3, [sp, #4]
 8024bcc:	6126      	str	r6, [r4, #16]
 8024bce:	18f6      	adds	r6, r6, r3
 8024bd0:	6026      	str	r6, [r4, #0]
 8024bd2:	003e      	movs	r6, r7
 8024bd4:	6165      	str	r5, [r4, #20]
 8024bd6:	1aed      	subs	r5, r5, r3
 8024bd8:	60a5      	str	r5, [r4, #8]
 8024bda:	42be      	cmp	r6, r7
 8024bdc:	d900      	bls.n	8024be0 <__ssputs_r+0x78>
 8024bde:	003e      	movs	r6, r7
 8024be0:	0032      	movs	r2, r6
 8024be2:	9903      	ldr	r1, [sp, #12]
 8024be4:	6820      	ldr	r0, [r4, #0]
 8024be6:	f000 fb7e 	bl	80252e6 <memmove>
 8024bea:	2000      	movs	r0, #0
 8024bec:	68a3      	ldr	r3, [r4, #8]
 8024bee:	1b9b      	subs	r3, r3, r6
 8024bf0:	60a3      	str	r3, [r4, #8]
 8024bf2:	6823      	ldr	r3, [r4, #0]
 8024bf4:	199b      	adds	r3, r3, r6
 8024bf6:	6023      	str	r3, [r4, #0]
 8024bf8:	b005      	add	sp, #20
 8024bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024bfc:	002a      	movs	r2, r5
 8024bfe:	9802      	ldr	r0, [sp, #8]
 8024c00:	f000 fc05 	bl	802540e <_realloc_r>
 8024c04:	1e06      	subs	r6, r0, #0
 8024c06:	d1e0      	bne.n	8024bca <__ssputs_r+0x62>
 8024c08:	6921      	ldr	r1, [r4, #16]
 8024c0a:	9802      	ldr	r0, [sp, #8]
 8024c0c:	f7fe fe62 	bl	80238d4 <_free_r>
 8024c10:	230c      	movs	r3, #12
 8024c12:	2001      	movs	r0, #1
 8024c14:	9a02      	ldr	r2, [sp, #8]
 8024c16:	4240      	negs	r0, r0
 8024c18:	6013      	str	r3, [r2, #0]
 8024c1a:	89a2      	ldrh	r2, [r4, #12]
 8024c1c:	3334      	adds	r3, #52	@ 0x34
 8024c1e:	4313      	orrs	r3, r2
 8024c20:	81a3      	strh	r3, [r4, #12]
 8024c22:	e7e9      	b.n	8024bf8 <__ssputs_r+0x90>
 8024c24:	fffffb7f 	.word	0xfffffb7f

08024c28 <_svfiprintf_r>:
 8024c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024c2a:	b0a1      	sub	sp, #132	@ 0x84
 8024c2c:	9003      	str	r0, [sp, #12]
 8024c2e:	001d      	movs	r5, r3
 8024c30:	898b      	ldrh	r3, [r1, #12]
 8024c32:	000f      	movs	r7, r1
 8024c34:	0016      	movs	r6, r2
 8024c36:	061b      	lsls	r3, r3, #24
 8024c38:	d511      	bpl.n	8024c5e <_svfiprintf_r+0x36>
 8024c3a:	690b      	ldr	r3, [r1, #16]
 8024c3c:	2b00      	cmp	r3, #0
 8024c3e:	d10e      	bne.n	8024c5e <_svfiprintf_r+0x36>
 8024c40:	2140      	movs	r1, #64	@ 0x40
 8024c42:	f7ff fa17 	bl	8024074 <_malloc_r>
 8024c46:	6038      	str	r0, [r7, #0]
 8024c48:	6138      	str	r0, [r7, #16]
 8024c4a:	2800      	cmp	r0, #0
 8024c4c:	d105      	bne.n	8024c5a <_svfiprintf_r+0x32>
 8024c4e:	230c      	movs	r3, #12
 8024c50:	9a03      	ldr	r2, [sp, #12]
 8024c52:	6013      	str	r3, [r2, #0]
 8024c54:	2001      	movs	r0, #1
 8024c56:	4240      	negs	r0, r0
 8024c58:	e0cf      	b.n	8024dfa <_svfiprintf_r+0x1d2>
 8024c5a:	2340      	movs	r3, #64	@ 0x40
 8024c5c:	617b      	str	r3, [r7, #20]
 8024c5e:	2300      	movs	r3, #0
 8024c60:	ac08      	add	r4, sp, #32
 8024c62:	6163      	str	r3, [r4, #20]
 8024c64:	3320      	adds	r3, #32
 8024c66:	7663      	strb	r3, [r4, #25]
 8024c68:	3310      	adds	r3, #16
 8024c6a:	76a3      	strb	r3, [r4, #26]
 8024c6c:	9507      	str	r5, [sp, #28]
 8024c6e:	0035      	movs	r5, r6
 8024c70:	782b      	ldrb	r3, [r5, #0]
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	d001      	beq.n	8024c7a <_svfiprintf_r+0x52>
 8024c76:	2b25      	cmp	r3, #37	@ 0x25
 8024c78:	d148      	bne.n	8024d0c <_svfiprintf_r+0xe4>
 8024c7a:	1bab      	subs	r3, r5, r6
 8024c7c:	9305      	str	r3, [sp, #20]
 8024c7e:	42b5      	cmp	r5, r6
 8024c80:	d00b      	beq.n	8024c9a <_svfiprintf_r+0x72>
 8024c82:	0032      	movs	r2, r6
 8024c84:	0039      	movs	r1, r7
 8024c86:	9803      	ldr	r0, [sp, #12]
 8024c88:	f7ff ff6e 	bl	8024b68 <__ssputs_r>
 8024c8c:	3001      	adds	r0, #1
 8024c8e:	d100      	bne.n	8024c92 <_svfiprintf_r+0x6a>
 8024c90:	e0ae      	b.n	8024df0 <_svfiprintf_r+0x1c8>
 8024c92:	6963      	ldr	r3, [r4, #20]
 8024c94:	9a05      	ldr	r2, [sp, #20]
 8024c96:	189b      	adds	r3, r3, r2
 8024c98:	6163      	str	r3, [r4, #20]
 8024c9a:	782b      	ldrb	r3, [r5, #0]
 8024c9c:	2b00      	cmp	r3, #0
 8024c9e:	d100      	bne.n	8024ca2 <_svfiprintf_r+0x7a>
 8024ca0:	e0a6      	b.n	8024df0 <_svfiprintf_r+0x1c8>
 8024ca2:	2201      	movs	r2, #1
 8024ca4:	2300      	movs	r3, #0
 8024ca6:	4252      	negs	r2, r2
 8024ca8:	6062      	str	r2, [r4, #4]
 8024caa:	a904      	add	r1, sp, #16
 8024cac:	3254      	adds	r2, #84	@ 0x54
 8024cae:	1852      	adds	r2, r2, r1
 8024cb0:	1c6e      	adds	r6, r5, #1
 8024cb2:	6023      	str	r3, [r4, #0]
 8024cb4:	60e3      	str	r3, [r4, #12]
 8024cb6:	60a3      	str	r3, [r4, #8]
 8024cb8:	7013      	strb	r3, [r2, #0]
 8024cba:	65a3      	str	r3, [r4, #88]	@ 0x58
 8024cbc:	4b54      	ldr	r3, [pc, #336]	@ (8024e10 <_svfiprintf_r+0x1e8>)
 8024cbe:	2205      	movs	r2, #5
 8024cc0:	0018      	movs	r0, r3
 8024cc2:	7831      	ldrb	r1, [r6, #0]
 8024cc4:	9305      	str	r3, [sp, #20]
 8024cc6:	f7fd ff68 	bl	8022b9a <memchr>
 8024cca:	1c75      	adds	r5, r6, #1
 8024ccc:	2800      	cmp	r0, #0
 8024cce:	d11f      	bne.n	8024d10 <_svfiprintf_r+0xe8>
 8024cd0:	6822      	ldr	r2, [r4, #0]
 8024cd2:	06d3      	lsls	r3, r2, #27
 8024cd4:	d504      	bpl.n	8024ce0 <_svfiprintf_r+0xb8>
 8024cd6:	2353      	movs	r3, #83	@ 0x53
 8024cd8:	a904      	add	r1, sp, #16
 8024cda:	185b      	adds	r3, r3, r1
 8024cdc:	2120      	movs	r1, #32
 8024cde:	7019      	strb	r1, [r3, #0]
 8024ce0:	0713      	lsls	r3, r2, #28
 8024ce2:	d504      	bpl.n	8024cee <_svfiprintf_r+0xc6>
 8024ce4:	2353      	movs	r3, #83	@ 0x53
 8024ce6:	a904      	add	r1, sp, #16
 8024ce8:	185b      	adds	r3, r3, r1
 8024cea:	212b      	movs	r1, #43	@ 0x2b
 8024cec:	7019      	strb	r1, [r3, #0]
 8024cee:	7833      	ldrb	r3, [r6, #0]
 8024cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8024cf2:	d016      	beq.n	8024d22 <_svfiprintf_r+0xfa>
 8024cf4:	0035      	movs	r5, r6
 8024cf6:	2100      	movs	r1, #0
 8024cf8:	200a      	movs	r0, #10
 8024cfa:	68e3      	ldr	r3, [r4, #12]
 8024cfc:	782a      	ldrb	r2, [r5, #0]
 8024cfe:	1c6e      	adds	r6, r5, #1
 8024d00:	3a30      	subs	r2, #48	@ 0x30
 8024d02:	2a09      	cmp	r2, #9
 8024d04:	d950      	bls.n	8024da8 <_svfiprintf_r+0x180>
 8024d06:	2900      	cmp	r1, #0
 8024d08:	d111      	bne.n	8024d2e <_svfiprintf_r+0x106>
 8024d0a:	e017      	b.n	8024d3c <_svfiprintf_r+0x114>
 8024d0c:	3501      	adds	r5, #1
 8024d0e:	e7af      	b.n	8024c70 <_svfiprintf_r+0x48>
 8024d10:	9b05      	ldr	r3, [sp, #20]
 8024d12:	6822      	ldr	r2, [r4, #0]
 8024d14:	1ac0      	subs	r0, r0, r3
 8024d16:	2301      	movs	r3, #1
 8024d18:	4083      	lsls	r3, r0
 8024d1a:	4313      	orrs	r3, r2
 8024d1c:	002e      	movs	r6, r5
 8024d1e:	6023      	str	r3, [r4, #0]
 8024d20:	e7cc      	b.n	8024cbc <_svfiprintf_r+0x94>
 8024d22:	9b07      	ldr	r3, [sp, #28]
 8024d24:	1d19      	adds	r1, r3, #4
 8024d26:	681b      	ldr	r3, [r3, #0]
 8024d28:	9107      	str	r1, [sp, #28]
 8024d2a:	2b00      	cmp	r3, #0
 8024d2c:	db01      	blt.n	8024d32 <_svfiprintf_r+0x10a>
 8024d2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024d30:	e004      	b.n	8024d3c <_svfiprintf_r+0x114>
 8024d32:	425b      	negs	r3, r3
 8024d34:	60e3      	str	r3, [r4, #12]
 8024d36:	2302      	movs	r3, #2
 8024d38:	4313      	orrs	r3, r2
 8024d3a:	6023      	str	r3, [r4, #0]
 8024d3c:	782b      	ldrb	r3, [r5, #0]
 8024d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8024d40:	d10c      	bne.n	8024d5c <_svfiprintf_r+0x134>
 8024d42:	786b      	ldrb	r3, [r5, #1]
 8024d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8024d46:	d134      	bne.n	8024db2 <_svfiprintf_r+0x18a>
 8024d48:	9b07      	ldr	r3, [sp, #28]
 8024d4a:	3502      	adds	r5, #2
 8024d4c:	1d1a      	adds	r2, r3, #4
 8024d4e:	681b      	ldr	r3, [r3, #0]
 8024d50:	9207      	str	r2, [sp, #28]
 8024d52:	2b00      	cmp	r3, #0
 8024d54:	da01      	bge.n	8024d5a <_svfiprintf_r+0x132>
 8024d56:	2301      	movs	r3, #1
 8024d58:	425b      	negs	r3, r3
 8024d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d5c:	4e2d      	ldr	r6, [pc, #180]	@ (8024e14 <_svfiprintf_r+0x1ec>)
 8024d5e:	2203      	movs	r2, #3
 8024d60:	0030      	movs	r0, r6
 8024d62:	7829      	ldrb	r1, [r5, #0]
 8024d64:	f7fd ff19 	bl	8022b9a <memchr>
 8024d68:	2800      	cmp	r0, #0
 8024d6a:	d006      	beq.n	8024d7a <_svfiprintf_r+0x152>
 8024d6c:	2340      	movs	r3, #64	@ 0x40
 8024d6e:	1b80      	subs	r0, r0, r6
 8024d70:	4083      	lsls	r3, r0
 8024d72:	6822      	ldr	r2, [r4, #0]
 8024d74:	3501      	adds	r5, #1
 8024d76:	4313      	orrs	r3, r2
 8024d78:	6023      	str	r3, [r4, #0]
 8024d7a:	7829      	ldrb	r1, [r5, #0]
 8024d7c:	2206      	movs	r2, #6
 8024d7e:	4826      	ldr	r0, [pc, #152]	@ (8024e18 <_svfiprintf_r+0x1f0>)
 8024d80:	1c6e      	adds	r6, r5, #1
 8024d82:	7621      	strb	r1, [r4, #24]
 8024d84:	f7fd ff09 	bl	8022b9a <memchr>
 8024d88:	2800      	cmp	r0, #0
 8024d8a:	d038      	beq.n	8024dfe <_svfiprintf_r+0x1d6>
 8024d8c:	4b23      	ldr	r3, [pc, #140]	@ (8024e1c <_svfiprintf_r+0x1f4>)
 8024d8e:	2b00      	cmp	r3, #0
 8024d90:	d122      	bne.n	8024dd8 <_svfiprintf_r+0x1b0>
 8024d92:	2207      	movs	r2, #7
 8024d94:	9b07      	ldr	r3, [sp, #28]
 8024d96:	3307      	adds	r3, #7
 8024d98:	4393      	bics	r3, r2
 8024d9a:	3308      	adds	r3, #8
 8024d9c:	9307      	str	r3, [sp, #28]
 8024d9e:	6963      	ldr	r3, [r4, #20]
 8024da0:	9a04      	ldr	r2, [sp, #16]
 8024da2:	189b      	adds	r3, r3, r2
 8024da4:	6163      	str	r3, [r4, #20]
 8024da6:	e762      	b.n	8024c6e <_svfiprintf_r+0x46>
 8024da8:	4343      	muls	r3, r0
 8024daa:	0035      	movs	r5, r6
 8024dac:	2101      	movs	r1, #1
 8024dae:	189b      	adds	r3, r3, r2
 8024db0:	e7a4      	b.n	8024cfc <_svfiprintf_r+0xd4>
 8024db2:	2300      	movs	r3, #0
 8024db4:	200a      	movs	r0, #10
 8024db6:	0019      	movs	r1, r3
 8024db8:	3501      	adds	r5, #1
 8024dba:	6063      	str	r3, [r4, #4]
 8024dbc:	782a      	ldrb	r2, [r5, #0]
 8024dbe:	1c6e      	adds	r6, r5, #1
 8024dc0:	3a30      	subs	r2, #48	@ 0x30
 8024dc2:	2a09      	cmp	r2, #9
 8024dc4:	d903      	bls.n	8024dce <_svfiprintf_r+0x1a6>
 8024dc6:	2b00      	cmp	r3, #0
 8024dc8:	d0c8      	beq.n	8024d5c <_svfiprintf_r+0x134>
 8024dca:	9109      	str	r1, [sp, #36]	@ 0x24
 8024dcc:	e7c6      	b.n	8024d5c <_svfiprintf_r+0x134>
 8024dce:	4341      	muls	r1, r0
 8024dd0:	0035      	movs	r5, r6
 8024dd2:	2301      	movs	r3, #1
 8024dd4:	1889      	adds	r1, r1, r2
 8024dd6:	e7f1      	b.n	8024dbc <_svfiprintf_r+0x194>
 8024dd8:	aa07      	add	r2, sp, #28
 8024dda:	9200      	str	r2, [sp, #0]
 8024ddc:	0021      	movs	r1, r4
 8024dde:	003a      	movs	r2, r7
 8024de0:	4b0f      	ldr	r3, [pc, #60]	@ (8024e20 <_svfiprintf_r+0x1f8>)
 8024de2:	9803      	ldr	r0, [sp, #12]
 8024de4:	f7fc ffb2 	bl	8021d4c <_printf_float>
 8024de8:	9004      	str	r0, [sp, #16]
 8024dea:	9b04      	ldr	r3, [sp, #16]
 8024dec:	3301      	adds	r3, #1
 8024dee:	d1d6      	bne.n	8024d9e <_svfiprintf_r+0x176>
 8024df0:	89bb      	ldrh	r3, [r7, #12]
 8024df2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024df4:	065b      	lsls	r3, r3, #25
 8024df6:	d500      	bpl.n	8024dfa <_svfiprintf_r+0x1d2>
 8024df8:	e72c      	b.n	8024c54 <_svfiprintf_r+0x2c>
 8024dfa:	b021      	add	sp, #132	@ 0x84
 8024dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024dfe:	aa07      	add	r2, sp, #28
 8024e00:	9200      	str	r2, [sp, #0]
 8024e02:	0021      	movs	r1, r4
 8024e04:	003a      	movs	r2, r7
 8024e06:	4b06      	ldr	r3, [pc, #24]	@ (8024e20 <_svfiprintf_r+0x1f8>)
 8024e08:	9803      	ldr	r0, [sp, #12]
 8024e0a:	f7fd fa4d 	bl	80222a8 <_printf_i>
 8024e0e:	e7eb      	b.n	8024de8 <_svfiprintf_r+0x1c0>
 8024e10:	080296e0 	.word	0x080296e0
 8024e14:	080296e6 	.word	0x080296e6
 8024e18:	080296ea 	.word	0x080296ea
 8024e1c:	08021d4d 	.word	0x08021d4d
 8024e20:	08024b69 	.word	0x08024b69

08024e24 <__sfputc_r>:
 8024e24:	6893      	ldr	r3, [r2, #8]
 8024e26:	b510      	push	{r4, lr}
 8024e28:	3b01      	subs	r3, #1
 8024e2a:	6093      	str	r3, [r2, #8]
 8024e2c:	2b00      	cmp	r3, #0
 8024e2e:	da04      	bge.n	8024e3a <__sfputc_r+0x16>
 8024e30:	6994      	ldr	r4, [r2, #24]
 8024e32:	42a3      	cmp	r3, r4
 8024e34:	db07      	blt.n	8024e46 <__sfputc_r+0x22>
 8024e36:	290a      	cmp	r1, #10
 8024e38:	d005      	beq.n	8024e46 <__sfputc_r+0x22>
 8024e3a:	6813      	ldr	r3, [r2, #0]
 8024e3c:	1c58      	adds	r0, r3, #1
 8024e3e:	6010      	str	r0, [r2, #0]
 8024e40:	7019      	strb	r1, [r3, #0]
 8024e42:	0008      	movs	r0, r1
 8024e44:	bd10      	pop	{r4, pc}
 8024e46:	f7fd fd37 	bl	80228b8 <__swbuf_r>
 8024e4a:	0001      	movs	r1, r0
 8024e4c:	e7f9      	b.n	8024e42 <__sfputc_r+0x1e>

08024e4e <__sfputs_r>:
 8024e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e50:	0006      	movs	r6, r0
 8024e52:	000f      	movs	r7, r1
 8024e54:	0014      	movs	r4, r2
 8024e56:	18d5      	adds	r5, r2, r3
 8024e58:	42ac      	cmp	r4, r5
 8024e5a:	d101      	bne.n	8024e60 <__sfputs_r+0x12>
 8024e5c:	2000      	movs	r0, #0
 8024e5e:	e007      	b.n	8024e70 <__sfputs_r+0x22>
 8024e60:	7821      	ldrb	r1, [r4, #0]
 8024e62:	003a      	movs	r2, r7
 8024e64:	0030      	movs	r0, r6
 8024e66:	f7ff ffdd 	bl	8024e24 <__sfputc_r>
 8024e6a:	3401      	adds	r4, #1
 8024e6c:	1c43      	adds	r3, r0, #1
 8024e6e:	d1f3      	bne.n	8024e58 <__sfputs_r+0xa>
 8024e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024e74 <_vfiprintf_r>:
 8024e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e76:	b0a1      	sub	sp, #132	@ 0x84
 8024e78:	000f      	movs	r7, r1
 8024e7a:	0015      	movs	r5, r2
 8024e7c:	001e      	movs	r6, r3
 8024e7e:	9003      	str	r0, [sp, #12]
 8024e80:	2800      	cmp	r0, #0
 8024e82:	d004      	beq.n	8024e8e <_vfiprintf_r+0x1a>
 8024e84:	6a03      	ldr	r3, [r0, #32]
 8024e86:	2b00      	cmp	r3, #0
 8024e88:	d101      	bne.n	8024e8e <_vfiprintf_r+0x1a>
 8024e8a:	f7fd fbab 	bl	80225e4 <__sinit>
 8024e8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024e90:	07db      	lsls	r3, r3, #31
 8024e92:	d405      	bmi.n	8024ea0 <_vfiprintf_r+0x2c>
 8024e94:	89bb      	ldrh	r3, [r7, #12]
 8024e96:	059b      	lsls	r3, r3, #22
 8024e98:	d402      	bmi.n	8024ea0 <_vfiprintf_r+0x2c>
 8024e9a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024e9c:	f7fd fe7b 	bl	8022b96 <__retarget_lock_acquire_recursive>
 8024ea0:	89bb      	ldrh	r3, [r7, #12]
 8024ea2:	071b      	lsls	r3, r3, #28
 8024ea4:	d502      	bpl.n	8024eac <_vfiprintf_r+0x38>
 8024ea6:	693b      	ldr	r3, [r7, #16]
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	d113      	bne.n	8024ed4 <_vfiprintf_r+0x60>
 8024eac:	0039      	movs	r1, r7
 8024eae:	9803      	ldr	r0, [sp, #12]
 8024eb0:	f7fd fd44 	bl	802293c <__swsetup_r>
 8024eb4:	2800      	cmp	r0, #0
 8024eb6:	d00d      	beq.n	8024ed4 <_vfiprintf_r+0x60>
 8024eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024eba:	07db      	lsls	r3, r3, #31
 8024ebc:	d503      	bpl.n	8024ec6 <_vfiprintf_r+0x52>
 8024ebe:	2001      	movs	r0, #1
 8024ec0:	4240      	negs	r0, r0
 8024ec2:	b021      	add	sp, #132	@ 0x84
 8024ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ec6:	89bb      	ldrh	r3, [r7, #12]
 8024ec8:	059b      	lsls	r3, r3, #22
 8024eca:	d4f8      	bmi.n	8024ebe <_vfiprintf_r+0x4a>
 8024ecc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8024ece:	f7fd fe63 	bl	8022b98 <__retarget_lock_release_recursive>
 8024ed2:	e7f4      	b.n	8024ebe <_vfiprintf_r+0x4a>
 8024ed4:	2300      	movs	r3, #0
 8024ed6:	ac08      	add	r4, sp, #32
 8024ed8:	6163      	str	r3, [r4, #20]
 8024eda:	3320      	adds	r3, #32
 8024edc:	7663      	strb	r3, [r4, #25]
 8024ede:	3310      	adds	r3, #16
 8024ee0:	76a3      	strb	r3, [r4, #26]
 8024ee2:	9607      	str	r6, [sp, #28]
 8024ee4:	002e      	movs	r6, r5
 8024ee6:	7833      	ldrb	r3, [r6, #0]
 8024ee8:	2b00      	cmp	r3, #0
 8024eea:	d001      	beq.n	8024ef0 <_vfiprintf_r+0x7c>
 8024eec:	2b25      	cmp	r3, #37	@ 0x25
 8024eee:	d148      	bne.n	8024f82 <_vfiprintf_r+0x10e>
 8024ef0:	1b73      	subs	r3, r6, r5
 8024ef2:	9305      	str	r3, [sp, #20]
 8024ef4:	42ae      	cmp	r6, r5
 8024ef6:	d00b      	beq.n	8024f10 <_vfiprintf_r+0x9c>
 8024ef8:	002a      	movs	r2, r5
 8024efa:	0039      	movs	r1, r7
 8024efc:	9803      	ldr	r0, [sp, #12]
 8024efe:	f7ff ffa6 	bl	8024e4e <__sfputs_r>
 8024f02:	3001      	adds	r0, #1
 8024f04:	d100      	bne.n	8024f08 <_vfiprintf_r+0x94>
 8024f06:	e0ae      	b.n	8025066 <_vfiprintf_r+0x1f2>
 8024f08:	6963      	ldr	r3, [r4, #20]
 8024f0a:	9a05      	ldr	r2, [sp, #20]
 8024f0c:	189b      	adds	r3, r3, r2
 8024f0e:	6163      	str	r3, [r4, #20]
 8024f10:	7833      	ldrb	r3, [r6, #0]
 8024f12:	2b00      	cmp	r3, #0
 8024f14:	d100      	bne.n	8024f18 <_vfiprintf_r+0xa4>
 8024f16:	e0a6      	b.n	8025066 <_vfiprintf_r+0x1f2>
 8024f18:	2201      	movs	r2, #1
 8024f1a:	2300      	movs	r3, #0
 8024f1c:	4252      	negs	r2, r2
 8024f1e:	6062      	str	r2, [r4, #4]
 8024f20:	a904      	add	r1, sp, #16
 8024f22:	3254      	adds	r2, #84	@ 0x54
 8024f24:	1852      	adds	r2, r2, r1
 8024f26:	1c75      	adds	r5, r6, #1
 8024f28:	6023      	str	r3, [r4, #0]
 8024f2a:	60e3      	str	r3, [r4, #12]
 8024f2c:	60a3      	str	r3, [r4, #8]
 8024f2e:	7013      	strb	r3, [r2, #0]
 8024f30:	65a3      	str	r3, [r4, #88]	@ 0x58
 8024f32:	4b59      	ldr	r3, [pc, #356]	@ (8025098 <_vfiprintf_r+0x224>)
 8024f34:	2205      	movs	r2, #5
 8024f36:	0018      	movs	r0, r3
 8024f38:	7829      	ldrb	r1, [r5, #0]
 8024f3a:	9305      	str	r3, [sp, #20]
 8024f3c:	f7fd fe2d 	bl	8022b9a <memchr>
 8024f40:	1c6e      	adds	r6, r5, #1
 8024f42:	2800      	cmp	r0, #0
 8024f44:	d11f      	bne.n	8024f86 <_vfiprintf_r+0x112>
 8024f46:	6822      	ldr	r2, [r4, #0]
 8024f48:	06d3      	lsls	r3, r2, #27
 8024f4a:	d504      	bpl.n	8024f56 <_vfiprintf_r+0xe2>
 8024f4c:	2353      	movs	r3, #83	@ 0x53
 8024f4e:	a904      	add	r1, sp, #16
 8024f50:	185b      	adds	r3, r3, r1
 8024f52:	2120      	movs	r1, #32
 8024f54:	7019      	strb	r1, [r3, #0]
 8024f56:	0713      	lsls	r3, r2, #28
 8024f58:	d504      	bpl.n	8024f64 <_vfiprintf_r+0xf0>
 8024f5a:	2353      	movs	r3, #83	@ 0x53
 8024f5c:	a904      	add	r1, sp, #16
 8024f5e:	185b      	adds	r3, r3, r1
 8024f60:	212b      	movs	r1, #43	@ 0x2b
 8024f62:	7019      	strb	r1, [r3, #0]
 8024f64:	782b      	ldrb	r3, [r5, #0]
 8024f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8024f68:	d016      	beq.n	8024f98 <_vfiprintf_r+0x124>
 8024f6a:	002e      	movs	r6, r5
 8024f6c:	2100      	movs	r1, #0
 8024f6e:	200a      	movs	r0, #10
 8024f70:	68e3      	ldr	r3, [r4, #12]
 8024f72:	7832      	ldrb	r2, [r6, #0]
 8024f74:	1c75      	adds	r5, r6, #1
 8024f76:	3a30      	subs	r2, #48	@ 0x30
 8024f78:	2a09      	cmp	r2, #9
 8024f7a:	d950      	bls.n	802501e <_vfiprintf_r+0x1aa>
 8024f7c:	2900      	cmp	r1, #0
 8024f7e:	d111      	bne.n	8024fa4 <_vfiprintf_r+0x130>
 8024f80:	e017      	b.n	8024fb2 <_vfiprintf_r+0x13e>
 8024f82:	3601      	adds	r6, #1
 8024f84:	e7af      	b.n	8024ee6 <_vfiprintf_r+0x72>
 8024f86:	9b05      	ldr	r3, [sp, #20]
 8024f88:	6822      	ldr	r2, [r4, #0]
 8024f8a:	1ac0      	subs	r0, r0, r3
 8024f8c:	2301      	movs	r3, #1
 8024f8e:	4083      	lsls	r3, r0
 8024f90:	4313      	orrs	r3, r2
 8024f92:	0035      	movs	r5, r6
 8024f94:	6023      	str	r3, [r4, #0]
 8024f96:	e7cc      	b.n	8024f32 <_vfiprintf_r+0xbe>
 8024f98:	9b07      	ldr	r3, [sp, #28]
 8024f9a:	1d19      	adds	r1, r3, #4
 8024f9c:	681b      	ldr	r3, [r3, #0]
 8024f9e:	9107      	str	r1, [sp, #28]
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	db01      	blt.n	8024fa8 <_vfiprintf_r+0x134>
 8024fa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024fa6:	e004      	b.n	8024fb2 <_vfiprintf_r+0x13e>
 8024fa8:	425b      	negs	r3, r3
 8024faa:	60e3      	str	r3, [r4, #12]
 8024fac:	2302      	movs	r3, #2
 8024fae:	4313      	orrs	r3, r2
 8024fb0:	6023      	str	r3, [r4, #0]
 8024fb2:	7833      	ldrb	r3, [r6, #0]
 8024fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8024fb6:	d10c      	bne.n	8024fd2 <_vfiprintf_r+0x15e>
 8024fb8:	7873      	ldrb	r3, [r6, #1]
 8024fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8024fbc:	d134      	bne.n	8025028 <_vfiprintf_r+0x1b4>
 8024fbe:	9b07      	ldr	r3, [sp, #28]
 8024fc0:	3602      	adds	r6, #2
 8024fc2:	1d1a      	adds	r2, r3, #4
 8024fc4:	681b      	ldr	r3, [r3, #0]
 8024fc6:	9207      	str	r2, [sp, #28]
 8024fc8:	2b00      	cmp	r3, #0
 8024fca:	da01      	bge.n	8024fd0 <_vfiprintf_r+0x15c>
 8024fcc:	2301      	movs	r3, #1
 8024fce:	425b      	negs	r3, r3
 8024fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8024fd2:	4d32      	ldr	r5, [pc, #200]	@ (802509c <_vfiprintf_r+0x228>)
 8024fd4:	2203      	movs	r2, #3
 8024fd6:	0028      	movs	r0, r5
 8024fd8:	7831      	ldrb	r1, [r6, #0]
 8024fda:	f7fd fdde 	bl	8022b9a <memchr>
 8024fde:	2800      	cmp	r0, #0
 8024fe0:	d006      	beq.n	8024ff0 <_vfiprintf_r+0x17c>
 8024fe2:	2340      	movs	r3, #64	@ 0x40
 8024fe4:	1b40      	subs	r0, r0, r5
 8024fe6:	4083      	lsls	r3, r0
 8024fe8:	6822      	ldr	r2, [r4, #0]
 8024fea:	3601      	adds	r6, #1
 8024fec:	4313      	orrs	r3, r2
 8024fee:	6023      	str	r3, [r4, #0]
 8024ff0:	7831      	ldrb	r1, [r6, #0]
 8024ff2:	2206      	movs	r2, #6
 8024ff4:	482a      	ldr	r0, [pc, #168]	@ (80250a0 <_vfiprintf_r+0x22c>)
 8024ff6:	1c75      	adds	r5, r6, #1
 8024ff8:	7621      	strb	r1, [r4, #24]
 8024ffa:	f7fd fdce 	bl	8022b9a <memchr>
 8024ffe:	2800      	cmp	r0, #0
 8025000:	d040      	beq.n	8025084 <_vfiprintf_r+0x210>
 8025002:	4b28      	ldr	r3, [pc, #160]	@ (80250a4 <_vfiprintf_r+0x230>)
 8025004:	2b00      	cmp	r3, #0
 8025006:	d122      	bne.n	802504e <_vfiprintf_r+0x1da>
 8025008:	2207      	movs	r2, #7
 802500a:	9b07      	ldr	r3, [sp, #28]
 802500c:	3307      	adds	r3, #7
 802500e:	4393      	bics	r3, r2
 8025010:	3308      	adds	r3, #8
 8025012:	9307      	str	r3, [sp, #28]
 8025014:	6963      	ldr	r3, [r4, #20]
 8025016:	9a04      	ldr	r2, [sp, #16]
 8025018:	189b      	adds	r3, r3, r2
 802501a:	6163      	str	r3, [r4, #20]
 802501c:	e762      	b.n	8024ee4 <_vfiprintf_r+0x70>
 802501e:	4343      	muls	r3, r0
 8025020:	002e      	movs	r6, r5
 8025022:	2101      	movs	r1, #1
 8025024:	189b      	adds	r3, r3, r2
 8025026:	e7a4      	b.n	8024f72 <_vfiprintf_r+0xfe>
 8025028:	2300      	movs	r3, #0
 802502a:	200a      	movs	r0, #10
 802502c:	0019      	movs	r1, r3
 802502e:	3601      	adds	r6, #1
 8025030:	6063      	str	r3, [r4, #4]
 8025032:	7832      	ldrb	r2, [r6, #0]
 8025034:	1c75      	adds	r5, r6, #1
 8025036:	3a30      	subs	r2, #48	@ 0x30
 8025038:	2a09      	cmp	r2, #9
 802503a:	d903      	bls.n	8025044 <_vfiprintf_r+0x1d0>
 802503c:	2b00      	cmp	r3, #0
 802503e:	d0c8      	beq.n	8024fd2 <_vfiprintf_r+0x15e>
 8025040:	9109      	str	r1, [sp, #36]	@ 0x24
 8025042:	e7c6      	b.n	8024fd2 <_vfiprintf_r+0x15e>
 8025044:	4341      	muls	r1, r0
 8025046:	002e      	movs	r6, r5
 8025048:	2301      	movs	r3, #1
 802504a:	1889      	adds	r1, r1, r2
 802504c:	e7f1      	b.n	8025032 <_vfiprintf_r+0x1be>
 802504e:	aa07      	add	r2, sp, #28
 8025050:	9200      	str	r2, [sp, #0]
 8025052:	0021      	movs	r1, r4
 8025054:	003a      	movs	r2, r7
 8025056:	4b14      	ldr	r3, [pc, #80]	@ (80250a8 <_vfiprintf_r+0x234>)
 8025058:	9803      	ldr	r0, [sp, #12]
 802505a:	f7fc fe77 	bl	8021d4c <_printf_float>
 802505e:	9004      	str	r0, [sp, #16]
 8025060:	9b04      	ldr	r3, [sp, #16]
 8025062:	3301      	adds	r3, #1
 8025064:	d1d6      	bne.n	8025014 <_vfiprintf_r+0x1a0>
 8025066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025068:	07db      	lsls	r3, r3, #31
 802506a:	d405      	bmi.n	8025078 <_vfiprintf_r+0x204>
 802506c:	89bb      	ldrh	r3, [r7, #12]
 802506e:	059b      	lsls	r3, r3, #22
 8025070:	d402      	bmi.n	8025078 <_vfiprintf_r+0x204>
 8025072:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025074:	f7fd fd90 	bl	8022b98 <__retarget_lock_release_recursive>
 8025078:	89bb      	ldrh	r3, [r7, #12]
 802507a:	065b      	lsls	r3, r3, #25
 802507c:	d500      	bpl.n	8025080 <_vfiprintf_r+0x20c>
 802507e:	e71e      	b.n	8024ebe <_vfiprintf_r+0x4a>
 8025080:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025082:	e71e      	b.n	8024ec2 <_vfiprintf_r+0x4e>
 8025084:	aa07      	add	r2, sp, #28
 8025086:	9200      	str	r2, [sp, #0]
 8025088:	0021      	movs	r1, r4
 802508a:	003a      	movs	r2, r7
 802508c:	4b06      	ldr	r3, [pc, #24]	@ (80250a8 <_vfiprintf_r+0x234>)
 802508e:	9803      	ldr	r0, [sp, #12]
 8025090:	f7fd f90a 	bl	80222a8 <_printf_i>
 8025094:	e7e3      	b.n	802505e <_vfiprintf_r+0x1ea>
 8025096:	46c0      	nop			@ (mov r8, r8)
 8025098:	080296e0 	.word	0x080296e0
 802509c:	080296e6 	.word	0x080296e6
 80250a0:	080296ea 	.word	0x080296ea
 80250a4:	08021d4d 	.word	0x08021d4d
 80250a8:	08024e4f 	.word	0x08024e4f

080250ac <__sflush_r>:
 80250ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80250ae:	220c      	movs	r2, #12
 80250b0:	5e8b      	ldrsh	r3, [r1, r2]
 80250b2:	0005      	movs	r5, r0
 80250b4:	000c      	movs	r4, r1
 80250b6:	071a      	lsls	r2, r3, #28
 80250b8:	d456      	bmi.n	8025168 <__sflush_r+0xbc>
 80250ba:	684a      	ldr	r2, [r1, #4]
 80250bc:	2a00      	cmp	r2, #0
 80250be:	dc02      	bgt.n	80250c6 <__sflush_r+0x1a>
 80250c0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80250c2:	2a00      	cmp	r2, #0
 80250c4:	dd4e      	ble.n	8025164 <__sflush_r+0xb8>
 80250c6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80250c8:	2f00      	cmp	r7, #0
 80250ca:	d04b      	beq.n	8025164 <__sflush_r+0xb8>
 80250cc:	2200      	movs	r2, #0
 80250ce:	2080      	movs	r0, #128	@ 0x80
 80250d0:	682e      	ldr	r6, [r5, #0]
 80250d2:	602a      	str	r2, [r5, #0]
 80250d4:	001a      	movs	r2, r3
 80250d6:	0140      	lsls	r0, r0, #5
 80250d8:	6a21      	ldr	r1, [r4, #32]
 80250da:	4002      	ands	r2, r0
 80250dc:	4203      	tst	r3, r0
 80250de:	d033      	beq.n	8025148 <__sflush_r+0x9c>
 80250e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80250e2:	89a3      	ldrh	r3, [r4, #12]
 80250e4:	075b      	lsls	r3, r3, #29
 80250e6:	d506      	bpl.n	80250f6 <__sflush_r+0x4a>
 80250e8:	6863      	ldr	r3, [r4, #4]
 80250ea:	1ad2      	subs	r2, r2, r3
 80250ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80250ee:	2b00      	cmp	r3, #0
 80250f0:	d001      	beq.n	80250f6 <__sflush_r+0x4a>
 80250f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80250f4:	1ad2      	subs	r2, r2, r3
 80250f6:	2300      	movs	r3, #0
 80250f8:	0028      	movs	r0, r5
 80250fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80250fc:	6a21      	ldr	r1, [r4, #32]
 80250fe:	47b8      	blx	r7
 8025100:	89a2      	ldrh	r2, [r4, #12]
 8025102:	1c43      	adds	r3, r0, #1
 8025104:	d106      	bne.n	8025114 <__sflush_r+0x68>
 8025106:	6829      	ldr	r1, [r5, #0]
 8025108:	291d      	cmp	r1, #29
 802510a:	d846      	bhi.n	802519a <__sflush_r+0xee>
 802510c:	4b29      	ldr	r3, [pc, #164]	@ (80251b4 <__sflush_r+0x108>)
 802510e:	410b      	asrs	r3, r1
 8025110:	07db      	lsls	r3, r3, #31
 8025112:	d442      	bmi.n	802519a <__sflush_r+0xee>
 8025114:	2300      	movs	r3, #0
 8025116:	6063      	str	r3, [r4, #4]
 8025118:	6923      	ldr	r3, [r4, #16]
 802511a:	6023      	str	r3, [r4, #0]
 802511c:	04d2      	lsls	r2, r2, #19
 802511e:	d505      	bpl.n	802512c <__sflush_r+0x80>
 8025120:	1c43      	adds	r3, r0, #1
 8025122:	d102      	bne.n	802512a <__sflush_r+0x7e>
 8025124:	682b      	ldr	r3, [r5, #0]
 8025126:	2b00      	cmp	r3, #0
 8025128:	d100      	bne.n	802512c <__sflush_r+0x80>
 802512a:	6560      	str	r0, [r4, #84]	@ 0x54
 802512c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802512e:	602e      	str	r6, [r5, #0]
 8025130:	2900      	cmp	r1, #0
 8025132:	d017      	beq.n	8025164 <__sflush_r+0xb8>
 8025134:	0023      	movs	r3, r4
 8025136:	3344      	adds	r3, #68	@ 0x44
 8025138:	4299      	cmp	r1, r3
 802513a:	d002      	beq.n	8025142 <__sflush_r+0x96>
 802513c:	0028      	movs	r0, r5
 802513e:	f7fe fbc9 	bl	80238d4 <_free_r>
 8025142:	2300      	movs	r3, #0
 8025144:	6363      	str	r3, [r4, #52]	@ 0x34
 8025146:	e00d      	b.n	8025164 <__sflush_r+0xb8>
 8025148:	2301      	movs	r3, #1
 802514a:	0028      	movs	r0, r5
 802514c:	47b8      	blx	r7
 802514e:	0002      	movs	r2, r0
 8025150:	1c43      	adds	r3, r0, #1
 8025152:	d1c6      	bne.n	80250e2 <__sflush_r+0x36>
 8025154:	682b      	ldr	r3, [r5, #0]
 8025156:	2b00      	cmp	r3, #0
 8025158:	d0c3      	beq.n	80250e2 <__sflush_r+0x36>
 802515a:	2b1d      	cmp	r3, #29
 802515c:	d001      	beq.n	8025162 <__sflush_r+0xb6>
 802515e:	2b16      	cmp	r3, #22
 8025160:	d11a      	bne.n	8025198 <__sflush_r+0xec>
 8025162:	602e      	str	r6, [r5, #0]
 8025164:	2000      	movs	r0, #0
 8025166:	e01e      	b.n	80251a6 <__sflush_r+0xfa>
 8025168:	690e      	ldr	r6, [r1, #16]
 802516a:	2e00      	cmp	r6, #0
 802516c:	d0fa      	beq.n	8025164 <__sflush_r+0xb8>
 802516e:	680f      	ldr	r7, [r1, #0]
 8025170:	600e      	str	r6, [r1, #0]
 8025172:	1bba      	subs	r2, r7, r6
 8025174:	9201      	str	r2, [sp, #4]
 8025176:	2200      	movs	r2, #0
 8025178:	079b      	lsls	r3, r3, #30
 802517a:	d100      	bne.n	802517e <__sflush_r+0xd2>
 802517c:	694a      	ldr	r2, [r1, #20]
 802517e:	60a2      	str	r2, [r4, #8]
 8025180:	9b01      	ldr	r3, [sp, #4]
 8025182:	2b00      	cmp	r3, #0
 8025184:	ddee      	ble.n	8025164 <__sflush_r+0xb8>
 8025186:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8025188:	0032      	movs	r2, r6
 802518a:	001f      	movs	r7, r3
 802518c:	0028      	movs	r0, r5
 802518e:	9b01      	ldr	r3, [sp, #4]
 8025190:	6a21      	ldr	r1, [r4, #32]
 8025192:	47b8      	blx	r7
 8025194:	2800      	cmp	r0, #0
 8025196:	dc07      	bgt.n	80251a8 <__sflush_r+0xfc>
 8025198:	89a2      	ldrh	r2, [r4, #12]
 802519a:	2340      	movs	r3, #64	@ 0x40
 802519c:	2001      	movs	r0, #1
 802519e:	4313      	orrs	r3, r2
 80251a0:	b21b      	sxth	r3, r3
 80251a2:	81a3      	strh	r3, [r4, #12]
 80251a4:	4240      	negs	r0, r0
 80251a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80251a8:	9b01      	ldr	r3, [sp, #4]
 80251aa:	1836      	adds	r6, r6, r0
 80251ac:	1a1b      	subs	r3, r3, r0
 80251ae:	9301      	str	r3, [sp, #4]
 80251b0:	e7e6      	b.n	8025180 <__sflush_r+0xd4>
 80251b2:	46c0      	nop			@ (mov r8, r8)
 80251b4:	dfbffffe 	.word	0xdfbffffe

080251b8 <_fflush_r>:
 80251b8:	690b      	ldr	r3, [r1, #16]
 80251ba:	b570      	push	{r4, r5, r6, lr}
 80251bc:	0005      	movs	r5, r0
 80251be:	000c      	movs	r4, r1
 80251c0:	2b00      	cmp	r3, #0
 80251c2:	d102      	bne.n	80251ca <_fflush_r+0x12>
 80251c4:	2500      	movs	r5, #0
 80251c6:	0028      	movs	r0, r5
 80251c8:	bd70      	pop	{r4, r5, r6, pc}
 80251ca:	2800      	cmp	r0, #0
 80251cc:	d004      	beq.n	80251d8 <_fflush_r+0x20>
 80251ce:	6a03      	ldr	r3, [r0, #32]
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	d101      	bne.n	80251d8 <_fflush_r+0x20>
 80251d4:	f7fd fa06 	bl	80225e4 <__sinit>
 80251d8:	220c      	movs	r2, #12
 80251da:	5ea3      	ldrsh	r3, [r4, r2]
 80251dc:	2b00      	cmp	r3, #0
 80251de:	d0f1      	beq.n	80251c4 <_fflush_r+0xc>
 80251e0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80251e2:	07d2      	lsls	r2, r2, #31
 80251e4:	d404      	bmi.n	80251f0 <_fflush_r+0x38>
 80251e6:	059b      	lsls	r3, r3, #22
 80251e8:	d402      	bmi.n	80251f0 <_fflush_r+0x38>
 80251ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80251ec:	f7fd fcd3 	bl	8022b96 <__retarget_lock_acquire_recursive>
 80251f0:	0028      	movs	r0, r5
 80251f2:	0021      	movs	r1, r4
 80251f4:	f7ff ff5a 	bl	80250ac <__sflush_r>
 80251f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80251fa:	0005      	movs	r5, r0
 80251fc:	07db      	lsls	r3, r3, #31
 80251fe:	d4e2      	bmi.n	80251c6 <_fflush_r+0xe>
 8025200:	89a3      	ldrh	r3, [r4, #12]
 8025202:	059b      	lsls	r3, r3, #22
 8025204:	d4df      	bmi.n	80251c6 <_fflush_r+0xe>
 8025206:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025208:	f7fd fcc6 	bl	8022b98 <__retarget_lock_release_recursive>
 802520c:	e7db      	b.n	80251c6 <_fflush_r+0xe>
	...

08025210 <__swhatbuf_r>:
 8025210:	b570      	push	{r4, r5, r6, lr}
 8025212:	000e      	movs	r6, r1
 8025214:	001d      	movs	r5, r3
 8025216:	230e      	movs	r3, #14
 8025218:	5ec9      	ldrsh	r1, [r1, r3]
 802521a:	0014      	movs	r4, r2
 802521c:	b096      	sub	sp, #88	@ 0x58
 802521e:	2900      	cmp	r1, #0
 8025220:	da0c      	bge.n	802523c <__swhatbuf_r+0x2c>
 8025222:	89b2      	ldrh	r2, [r6, #12]
 8025224:	2380      	movs	r3, #128	@ 0x80
 8025226:	0011      	movs	r1, r2
 8025228:	4019      	ands	r1, r3
 802522a:	421a      	tst	r2, r3
 802522c:	d114      	bne.n	8025258 <__swhatbuf_r+0x48>
 802522e:	2380      	movs	r3, #128	@ 0x80
 8025230:	00db      	lsls	r3, r3, #3
 8025232:	2000      	movs	r0, #0
 8025234:	6029      	str	r1, [r5, #0]
 8025236:	6023      	str	r3, [r4, #0]
 8025238:	b016      	add	sp, #88	@ 0x58
 802523a:	bd70      	pop	{r4, r5, r6, pc}
 802523c:	466a      	mov	r2, sp
 802523e:	f000 f865 	bl	802530c <_fstat_r>
 8025242:	2800      	cmp	r0, #0
 8025244:	dbed      	blt.n	8025222 <__swhatbuf_r+0x12>
 8025246:	23f0      	movs	r3, #240	@ 0xf0
 8025248:	9901      	ldr	r1, [sp, #4]
 802524a:	021b      	lsls	r3, r3, #8
 802524c:	4019      	ands	r1, r3
 802524e:	4b04      	ldr	r3, [pc, #16]	@ (8025260 <__swhatbuf_r+0x50>)
 8025250:	18c9      	adds	r1, r1, r3
 8025252:	424b      	negs	r3, r1
 8025254:	4159      	adcs	r1, r3
 8025256:	e7ea      	b.n	802522e <__swhatbuf_r+0x1e>
 8025258:	2100      	movs	r1, #0
 802525a:	2340      	movs	r3, #64	@ 0x40
 802525c:	e7e9      	b.n	8025232 <__swhatbuf_r+0x22>
 802525e:	46c0      	nop			@ (mov r8, r8)
 8025260:	ffffe000 	.word	0xffffe000

08025264 <__smakebuf_r>:
 8025264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025266:	2602      	movs	r6, #2
 8025268:	898b      	ldrh	r3, [r1, #12]
 802526a:	0005      	movs	r5, r0
 802526c:	000c      	movs	r4, r1
 802526e:	b085      	sub	sp, #20
 8025270:	4233      	tst	r3, r6
 8025272:	d007      	beq.n	8025284 <__smakebuf_r+0x20>
 8025274:	0023      	movs	r3, r4
 8025276:	3347      	adds	r3, #71	@ 0x47
 8025278:	6023      	str	r3, [r4, #0]
 802527a:	6123      	str	r3, [r4, #16]
 802527c:	2301      	movs	r3, #1
 802527e:	6163      	str	r3, [r4, #20]
 8025280:	b005      	add	sp, #20
 8025282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025284:	ab03      	add	r3, sp, #12
 8025286:	aa02      	add	r2, sp, #8
 8025288:	f7ff ffc2 	bl	8025210 <__swhatbuf_r>
 802528c:	9f02      	ldr	r7, [sp, #8]
 802528e:	9001      	str	r0, [sp, #4]
 8025290:	0039      	movs	r1, r7
 8025292:	0028      	movs	r0, r5
 8025294:	f7fe feee 	bl	8024074 <_malloc_r>
 8025298:	2800      	cmp	r0, #0
 802529a:	d108      	bne.n	80252ae <__smakebuf_r+0x4a>
 802529c:	220c      	movs	r2, #12
 802529e:	5ea3      	ldrsh	r3, [r4, r2]
 80252a0:	059a      	lsls	r2, r3, #22
 80252a2:	d4ed      	bmi.n	8025280 <__smakebuf_r+0x1c>
 80252a4:	2203      	movs	r2, #3
 80252a6:	4393      	bics	r3, r2
 80252a8:	431e      	orrs	r6, r3
 80252aa:	81a6      	strh	r6, [r4, #12]
 80252ac:	e7e2      	b.n	8025274 <__smakebuf_r+0x10>
 80252ae:	2380      	movs	r3, #128	@ 0x80
 80252b0:	89a2      	ldrh	r2, [r4, #12]
 80252b2:	6020      	str	r0, [r4, #0]
 80252b4:	4313      	orrs	r3, r2
 80252b6:	81a3      	strh	r3, [r4, #12]
 80252b8:	9b03      	ldr	r3, [sp, #12]
 80252ba:	6120      	str	r0, [r4, #16]
 80252bc:	6167      	str	r7, [r4, #20]
 80252be:	2b00      	cmp	r3, #0
 80252c0:	d00c      	beq.n	80252dc <__smakebuf_r+0x78>
 80252c2:	0028      	movs	r0, r5
 80252c4:	230e      	movs	r3, #14
 80252c6:	5ee1      	ldrsh	r1, [r4, r3]
 80252c8:	f000 f832 	bl	8025330 <_isatty_r>
 80252cc:	2800      	cmp	r0, #0
 80252ce:	d005      	beq.n	80252dc <__smakebuf_r+0x78>
 80252d0:	2303      	movs	r3, #3
 80252d2:	89a2      	ldrh	r2, [r4, #12]
 80252d4:	439a      	bics	r2, r3
 80252d6:	3b02      	subs	r3, #2
 80252d8:	4313      	orrs	r3, r2
 80252da:	81a3      	strh	r3, [r4, #12]
 80252dc:	89a3      	ldrh	r3, [r4, #12]
 80252de:	9a01      	ldr	r2, [sp, #4]
 80252e0:	4313      	orrs	r3, r2
 80252e2:	81a3      	strh	r3, [r4, #12]
 80252e4:	e7cc      	b.n	8025280 <__smakebuf_r+0x1c>

080252e6 <memmove>:
 80252e6:	b510      	push	{r4, lr}
 80252e8:	4288      	cmp	r0, r1
 80252ea:	d806      	bhi.n	80252fa <memmove+0x14>
 80252ec:	2300      	movs	r3, #0
 80252ee:	429a      	cmp	r2, r3
 80252f0:	d008      	beq.n	8025304 <memmove+0x1e>
 80252f2:	5ccc      	ldrb	r4, [r1, r3]
 80252f4:	54c4      	strb	r4, [r0, r3]
 80252f6:	3301      	adds	r3, #1
 80252f8:	e7f9      	b.n	80252ee <memmove+0x8>
 80252fa:	188b      	adds	r3, r1, r2
 80252fc:	4298      	cmp	r0, r3
 80252fe:	d2f5      	bcs.n	80252ec <memmove+0x6>
 8025300:	3a01      	subs	r2, #1
 8025302:	d200      	bcs.n	8025306 <memmove+0x20>
 8025304:	bd10      	pop	{r4, pc}
 8025306:	5c8b      	ldrb	r3, [r1, r2]
 8025308:	5483      	strb	r3, [r0, r2]
 802530a:	e7f9      	b.n	8025300 <memmove+0x1a>

0802530c <_fstat_r>:
 802530c:	2300      	movs	r3, #0
 802530e:	b570      	push	{r4, r5, r6, lr}
 8025310:	4d06      	ldr	r5, [pc, #24]	@ (802532c <_fstat_r+0x20>)
 8025312:	0004      	movs	r4, r0
 8025314:	0008      	movs	r0, r1
 8025316:	0011      	movs	r1, r2
 8025318:	602b      	str	r3, [r5, #0]
 802531a:	f7ea fdbb 	bl	800fe94 <_fstat>
 802531e:	1c43      	adds	r3, r0, #1
 8025320:	d103      	bne.n	802532a <_fstat_r+0x1e>
 8025322:	682b      	ldr	r3, [r5, #0]
 8025324:	2b00      	cmp	r3, #0
 8025326:	d000      	beq.n	802532a <_fstat_r+0x1e>
 8025328:	6023      	str	r3, [r4, #0]
 802532a:	bd70      	pop	{r4, r5, r6, pc}
 802532c:	2000358c 	.word	0x2000358c

08025330 <_isatty_r>:
 8025330:	2300      	movs	r3, #0
 8025332:	b570      	push	{r4, r5, r6, lr}
 8025334:	4d06      	ldr	r5, [pc, #24]	@ (8025350 <_isatty_r+0x20>)
 8025336:	0004      	movs	r4, r0
 8025338:	0008      	movs	r0, r1
 802533a:	602b      	str	r3, [r5, #0]
 802533c:	f7ea fdb8 	bl	800feb0 <_isatty>
 8025340:	1c43      	adds	r3, r0, #1
 8025342:	d103      	bne.n	802534c <_isatty_r+0x1c>
 8025344:	682b      	ldr	r3, [r5, #0]
 8025346:	2b00      	cmp	r3, #0
 8025348:	d000      	beq.n	802534c <_isatty_r+0x1c>
 802534a:	6023      	str	r3, [r4, #0]
 802534c:	bd70      	pop	{r4, r5, r6, pc}
 802534e:	46c0      	nop			@ (mov r8, r8)
 8025350:	2000358c 	.word	0x2000358c

08025354 <_sbrk_r>:
 8025354:	2300      	movs	r3, #0
 8025356:	b570      	push	{r4, r5, r6, lr}
 8025358:	4d06      	ldr	r5, [pc, #24]	@ (8025374 <_sbrk_r+0x20>)
 802535a:	0004      	movs	r4, r0
 802535c:	0008      	movs	r0, r1
 802535e:	602b      	str	r3, [r5, #0]
 8025360:	f7ea fdba 	bl	800fed8 <_sbrk>
 8025364:	1c43      	adds	r3, r0, #1
 8025366:	d103      	bne.n	8025370 <_sbrk_r+0x1c>
 8025368:	682b      	ldr	r3, [r5, #0]
 802536a:	2b00      	cmp	r3, #0
 802536c:	d000      	beq.n	8025370 <_sbrk_r+0x1c>
 802536e:	6023      	str	r3, [r4, #0]
 8025370:	bd70      	pop	{r4, r5, r6, pc}
 8025372:	46c0      	nop			@ (mov r8, r8)
 8025374:	2000358c 	.word	0x2000358c

08025378 <__assert_func>:
 8025378:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802537a:	0014      	movs	r4, r2
 802537c:	001a      	movs	r2, r3
 802537e:	4b09      	ldr	r3, [pc, #36]	@ (80253a4 <__assert_func+0x2c>)
 8025380:	0005      	movs	r5, r0
 8025382:	681b      	ldr	r3, [r3, #0]
 8025384:	000e      	movs	r6, r1
 8025386:	68d8      	ldr	r0, [r3, #12]
 8025388:	4b07      	ldr	r3, [pc, #28]	@ (80253a8 <__assert_func+0x30>)
 802538a:	2c00      	cmp	r4, #0
 802538c:	d101      	bne.n	8025392 <__assert_func+0x1a>
 802538e:	4b07      	ldr	r3, [pc, #28]	@ (80253ac <__assert_func+0x34>)
 8025390:	001c      	movs	r4, r3
 8025392:	4907      	ldr	r1, [pc, #28]	@ (80253b0 <__assert_func+0x38>)
 8025394:	9301      	str	r3, [sp, #4]
 8025396:	9402      	str	r4, [sp, #8]
 8025398:	002b      	movs	r3, r5
 802539a:	9600      	str	r6, [sp, #0]
 802539c:	f000 f866 	bl	802546c <fiprintf>
 80253a0:	f000 f874 	bl	802548c <abort>
 80253a4:	200003dc 	.word	0x200003dc
 80253a8:	080296f1 	.word	0x080296f1
 80253ac:	0802972c 	.word	0x0802972c
 80253b0:	080296fe 	.word	0x080296fe

080253b4 <_calloc_r>:
 80253b4:	b570      	push	{r4, r5, r6, lr}
 80253b6:	0c0b      	lsrs	r3, r1, #16
 80253b8:	0c15      	lsrs	r5, r2, #16
 80253ba:	2b00      	cmp	r3, #0
 80253bc:	d11e      	bne.n	80253fc <_calloc_r+0x48>
 80253be:	2d00      	cmp	r5, #0
 80253c0:	d10c      	bne.n	80253dc <_calloc_r+0x28>
 80253c2:	b289      	uxth	r1, r1
 80253c4:	b294      	uxth	r4, r2
 80253c6:	434c      	muls	r4, r1
 80253c8:	0021      	movs	r1, r4
 80253ca:	f7fe fe53 	bl	8024074 <_malloc_r>
 80253ce:	1e05      	subs	r5, r0, #0
 80253d0:	d01a      	beq.n	8025408 <_calloc_r+0x54>
 80253d2:	0022      	movs	r2, r4
 80253d4:	2100      	movs	r1, #0
 80253d6:	f7fd fb0f 	bl	80229f8 <memset>
 80253da:	e016      	b.n	802540a <_calloc_r+0x56>
 80253dc:	1c2b      	adds	r3, r5, #0
 80253de:	1c0c      	adds	r4, r1, #0
 80253e0:	b289      	uxth	r1, r1
 80253e2:	b292      	uxth	r2, r2
 80253e4:	434a      	muls	r2, r1
 80253e6:	b29b      	uxth	r3, r3
 80253e8:	b2a1      	uxth	r1, r4
 80253ea:	4359      	muls	r1, r3
 80253ec:	0c14      	lsrs	r4, r2, #16
 80253ee:	190c      	adds	r4, r1, r4
 80253f0:	0c23      	lsrs	r3, r4, #16
 80253f2:	d107      	bne.n	8025404 <_calloc_r+0x50>
 80253f4:	0424      	lsls	r4, r4, #16
 80253f6:	b292      	uxth	r2, r2
 80253f8:	4314      	orrs	r4, r2
 80253fa:	e7e5      	b.n	80253c8 <_calloc_r+0x14>
 80253fc:	2d00      	cmp	r5, #0
 80253fe:	d101      	bne.n	8025404 <_calloc_r+0x50>
 8025400:	1c14      	adds	r4, r2, #0
 8025402:	e7ed      	b.n	80253e0 <_calloc_r+0x2c>
 8025404:	230c      	movs	r3, #12
 8025406:	6003      	str	r3, [r0, #0]
 8025408:	2500      	movs	r5, #0
 802540a:	0028      	movs	r0, r5
 802540c:	bd70      	pop	{r4, r5, r6, pc}

0802540e <_realloc_r>:
 802540e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025410:	0006      	movs	r6, r0
 8025412:	000c      	movs	r4, r1
 8025414:	0015      	movs	r5, r2
 8025416:	2900      	cmp	r1, #0
 8025418:	d105      	bne.n	8025426 <_realloc_r+0x18>
 802541a:	0011      	movs	r1, r2
 802541c:	f7fe fe2a 	bl	8024074 <_malloc_r>
 8025420:	0004      	movs	r4, r0
 8025422:	0020      	movs	r0, r4
 8025424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025426:	2a00      	cmp	r2, #0
 8025428:	d103      	bne.n	8025432 <_realloc_r+0x24>
 802542a:	f7fe fa53 	bl	80238d4 <_free_r>
 802542e:	2400      	movs	r4, #0
 8025430:	e7f7      	b.n	8025422 <_realloc_r+0x14>
 8025432:	f000 f832 	bl	802549a <_malloc_usable_size_r>
 8025436:	0007      	movs	r7, r0
 8025438:	4285      	cmp	r5, r0
 802543a:	d802      	bhi.n	8025442 <_realloc_r+0x34>
 802543c:	0843      	lsrs	r3, r0, #1
 802543e:	42ab      	cmp	r3, r5
 8025440:	d3ef      	bcc.n	8025422 <_realloc_r+0x14>
 8025442:	0029      	movs	r1, r5
 8025444:	0030      	movs	r0, r6
 8025446:	f7fe fe15 	bl	8024074 <_malloc_r>
 802544a:	9001      	str	r0, [sp, #4]
 802544c:	2800      	cmp	r0, #0
 802544e:	d0ee      	beq.n	802542e <_realloc_r+0x20>
 8025450:	002a      	movs	r2, r5
 8025452:	42bd      	cmp	r5, r7
 8025454:	d900      	bls.n	8025458 <_realloc_r+0x4a>
 8025456:	003a      	movs	r2, r7
 8025458:	0021      	movs	r1, r4
 802545a:	9801      	ldr	r0, [sp, #4]
 802545c:	f7fd fba8 	bl	8022bb0 <memcpy>
 8025460:	0021      	movs	r1, r4
 8025462:	0030      	movs	r0, r6
 8025464:	f7fe fa36 	bl	80238d4 <_free_r>
 8025468:	9c01      	ldr	r4, [sp, #4]
 802546a:	e7da      	b.n	8025422 <_realloc_r+0x14>

0802546c <fiprintf>:
 802546c:	b40e      	push	{r1, r2, r3}
 802546e:	b517      	push	{r0, r1, r2, r4, lr}
 8025470:	4c05      	ldr	r4, [pc, #20]	@ (8025488 <fiprintf+0x1c>)
 8025472:	ab05      	add	r3, sp, #20
 8025474:	cb04      	ldmia	r3!, {r2}
 8025476:	0001      	movs	r1, r0
 8025478:	6820      	ldr	r0, [r4, #0]
 802547a:	9301      	str	r3, [sp, #4]
 802547c:	f7ff fcfa 	bl	8024e74 <_vfiprintf_r>
 8025480:	bc1e      	pop	{r1, r2, r3, r4}
 8025482:	bc08      	pop	{r3}
 8025484:	b003      	add	sp, #12
 8025486:	4718      	bx	r3
 8025488:	200003dc 	.word	0x200003dc

0802548c <abort>:
 802548c:	2006      	movs	r0, #6
 802548e:	b510      	push	{r4, lr}
 8025490:	f000 f834 	bl	80254fc <raise>
 8025494:	2001      	movs	r0, #1
 8025496:	f7ea fcc9 	bl	800fe2c <_exit>

0802549a <_malloc_usable_size_r>:
 802549a:	1f0b      	subs	r3, r1, #4
 802549c:	681b      	ldr	r3, [r3, #0]
 802549e:	1f18      	subs	r0, r3, #4
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	da01      	bge.n	80254a8 <_malloc_usable_size_r+0xe>
 80254a4:	580b      	ldr	r3, [r1, r0]
 80254a6:	18c0      	adds	r0, r0, r3
 80254a8:	4770      	bx	lr

080254aa <_raise_r>:
 80254aa:	b570      	push	{r4, r5, r6, lr}
 80254ac:	0004      	movs	r4, r0
 80254ae:	000d      	movs	r5, r1
 80254b0:	291f      	cmp	r1, #31
 80254b2:	d904      	bls.n	80254be <_raise_r+0x14>
 80254b4:	2316      	movs	r3, #22
 80254b6:	6003      	str	r3, [r0, #0]
 80254b8:	2001      	movs	r0, #1
 80254ba:	4240      	negs	r0, r0
 80254bc:	bd70      	pop	{r4, r5, r6, pc}
 80254be:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80254c0:	2b00      	cmp	r3, #0
 80254c2:	d004      	beq.n	80254ce <_raise_r+0x24>
 80254c4:	008a      	lsls	r2, r1, #2
 80254c6:	189b      	adds	r3, r3, r2
 80254c8:	681a      	ldr	r2, [r3, #0]
 80254ca:	2a00      	cmp	r2, #0
 80254cc:	d108      	bne.n	80254e0 <_raise_r+0x36>
 80254ce:	0020      	movs	r0, r4
 80254d0:	f000 f830 	bl	8025534 <_getpid_r>
 80254d4:	002a      	movs	r2, r5
 80254d6:	0001      	movs	r1, r0
 80254d8:	0020      	movs	r0, r4
 80254da:	f000 f819 	bl	8025510 <_kill_r>
 80254de:	e7ed      	b.n	80254bc <_raise_r+0x12>
 80254e0:	2a01      	cmp	r2, #1
 80254e2:	d009      	beq.n	80254f8 <_raise_r+0x4e>
 80254e4:	1c51      	adds	r1, r2, #1
 80254e6:	d103      	bne.n	80254f0 <_raise_r+0x46>
 80254e8:	2316      	movs	r3, #22
 80254ea:	6003      	str	r3, [r0, #0]
 80254ec:	2001      	movs	r0, #1
 80254ee:	e7e5      	b.n	80254bc <_raise_r+0x12>
 80254f0:	2100      	movs	r1, #0
 80254f2:	0028      	movs	r0, r5
 80254f4:	6019      	str	r1, [r3, #0]
 80254f6:	4790      	blx	r2
 80254f8:	2000      	movs	r0, #0
 80254fa:	e7df      	b.n	80254bc <_raise_r+0x12>

080254fc <raise>:
 80254fc:	b510      	push	{r4, lr}
 80254fe:	4b03      	ldr	r3, [pc, #12]	@ (802550c <raise+0x10>)
 8025500:	0001      	movs	r1, r0
 8025502:	6818      	ldr	r0, [r3, #0]
 8025504:	f7ff ffd1 	bl	80254aa <_raise_r>
 8025508:	bd10      	pop	{r4, pc}
 802550a:	46c0      	nop			@ (mov r8, r8)
 802550c:	200003dc 	.word	0x200003dc

08025510 <_kill_r>:
 8025510:	2300      	movs	r3, #0
 8025512:	b570      	push	{r4, r5, r6, lr}
 8025514:	4d06      	ldr	r5, [pc, #24]	@ (8025530 <_kill_r+0x20>)
 8025516:	0004      	movs	r4, r0
 8025518:	0008      	movs	r0, r1
 802551a:	0011      	movs	r1, r2
 802551c:	602b      	str	r3, [r5, #0]
 802551e:	f7ea fc75 	bl	800fe0c <_kill>
 8025522:	1c43      	adds	r3, r0, #1
 8025524:	d103      	bne.n	802552e <_kill_r+0x1e>
 8025526:	682b      	ldr	r3, [r5, #0]
 8025528:	2b00      	cmp	r3, #0
 802552a:	d000      	beq.n	802552e <_kill_r+0x1e>
 802552c:	6023      	str	r3, [r4, #0]
 802552e:	bd70      	pop	{r4, r5, r6, pc}
 8025530:	2000358c 	.word	0x2000358c

08025534 <_getpid_r>:
 8025534:	b510      	push	{r4, lr}
 8025536:	f7ea fc63 	bl	800fe00 <_getpid>
 802553a:	bd10      	pop	{r4, pc}

0802553c <expf>:
 802553c:	b570      	push	{r4, r5, r6, lr}
 802553e:	1c04      	adds	r4, r0, #0
 8025540:	f000 f8e6 	bl	8025710 <__ieee754_expf>
 8025544:	1c05      	adds	r5, r0, #0
 8025546:	1c20      	adds	r0, r4, #0
 8025548:	f000 f83c 	bl	80255c4 <finitef>
 802554c:	2800      	cmp	r0, #0
 802554e:	d00b      	beq.n	8025568 <expf+0x2c>
 8025550:	490c      	ldr	r1, [pc, #48]	@ (8025584 <expf+0x48>)
 8025552:	1c20      	adds	r0, r4, #0
 8025554:	f7db f800 	bl	8000558 <__aeabi_fcmpgt>
 8025558:	2800      	cmp	r0, #0
 802555a:	d007      	beq.n	802556c <expf+0x30>
 802555c:	f7fd faf0 	bl	8022b40 <__errno>
 8025560:	25ff      	movs	r5, #255	@ 0xff
 8025562:	2322      	movs	r3, #34	@ 0x22
 8025564:	05ed      	lsls	r5, r5, #23
 8025566:	6003      	str	r3, [r0, #0]
 8025568:	1c28      	adds	r0, r5, #0
 802556a:	bd70      	pop	{r4, r5, r6, pc}
 802556c:	4906      	ldr	r1, [pc, #24]	@ (8025588 <expf+0x4c>)
 802556e:	1c20      	adds	r0, r4, #0
 8025570:	f7da ffde 	bl	8000530 <__aeabi_fcmplt>
 8025574:	2800      	cmp	r0, #0
 8025576:	d0f7      	beq.n	8025568 <expf+0x2c>
 8025578:	f7fd fae2 	bl	8022b40 <__errno>
 802557c:	2322      	movs	r3, #34	@ 0x22
 802557e:	2500      	movs	r5, #0
 8025580:	6003      	str	r3, [r0, #0]
 8025582:	e7f1      	b.n	8025568 <expf+0x2c>
 8025584:	42b17217 	.word	0x42b17217
 8025588:	c2cff1b5 	.word	0xc2cff1b5

0802558c <sqrtf>:
 802558c:	b570      	push	{r4, r5, r6, lr}
 802558e:	1c05      	adds	r5, r0, #0
 8025590:	f000 f822 	bl	80255d8 <__ieee754_sqrtf>
 8025594:	1c29      	adds	r1, r5, #0
 8025596:	1c04      	adds	r4, r0, #0
 8025598:	1c28      	adds	r0, r5, #0
 802559a:	f7db ffe3 	bl	8001564 <__aeabi_fcmpun>
 802559e:	2800      	cmp	r0, #0
 80255a0:	d10e      	bne.n	80255c0 <sqrtf+0x34>
 80255a2:	2100      	movs	r1, #0
 80255a4:	1c28      	adds	r0, r5, #0
 80255a6:	f7da ffc3 	bl	8000530 <__aeabi_fcmplt>
 80255aa:	2800      	cmp	r0, #0
 80255ac:	d008      	beq.n	80255c0 <sqrtf+0x34>
 80255ae:	f7fd fac7 	bl	8022b40 <__errno>
 80255b2:	2321      	movs	r3, #33	@ 0x21
 80255b4:	2100      	movs	r1, #0
 80255b6:	6003      	str	r3, [r0, #0]
 80255b8:	1c08      	adds	r0, r1, #0
 80255ba:	f7db fb0b 	bl	8000bd4 <__aeabi_fdiv>
 80255be:	1c04      	adds	r4, r0, #0
 80255c0:	1c20      	adds	r0, r4, #0
 80255c2:	bd70      	pop	{r4, r5, r6, pc}

080255c4 <finitef>:
 80255c4:	22ff      	movs	r2, #255	@ 0xff
 80255c6:	0043      	lsls	r3, r0, #1
 80255c8:	085b      	lsrs	r3, r3, #1
 80255ca:	2001      	movs	r0, #1
 80255cc:	05d2      	lsls	r2, r2, #23
 80255ce:	4293      	cmp	r3, r2
 80255d0:	db00      	blt.n	80255d4 <finitef+0x10>
 80255d2:	2000      	movs	r0, #0
 80255d4:	4770      	bx	lr
	...

080255d8 <__ieee754_sqrtf>:
 80255d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80255da:	0003      	movs	r3, r0
 80255dc:	0042      	lsls	r2, r0, #1
 80255de:	1c04      	adds	r4, r0, #0
 80255e0:	20ff      	movs	r0, #255	@ 0xff
 80255e2:	0852      	lsrs	r2, r2, #1
 80255e4:	05c0      	lsls	r0, r0, #23
 80255e6:	4282      	cmp	r2, r0
 80255e8:	d30a      	bcc.n	8025600 <__ieee754_sqrtf+0x28>
 80255ea:	1c21      	adds	r1, r4, #0
 80255ec:	1c20      	adds	r0, r4, #0
 80255ee:	f7db fcd7 	bl	8000fa0 <__aeabi_fmul>
 80255f2:	1c01      	adds	r1, r0, #0
 80255f4:	1c20      	adds	r0, r4, #0
 80255f6:	f7db f963 	bl	80008c0 <__aeabi_fadd>
 80255fa:	1c04      	adds	r4, r0, #0
 80255fc:	1c20      	adds	r0, r4, #0
 80255fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025600:	2a00      	cmp	r2, #0
 8025602:	d0fb      	beq.n	80255fc <__ieee754_sqrtf+0x24>
 8025604:	2c00      	cmp	r4, #0
 8025606:	da07      	bge.n	8025618 <__ieee754_sqrtf+0x40>
 8025608:	1c21      	adds	r1, r4, #0
 802560a:	1c20      	adds	r0, r4, #0
 802560c:	f7db fe06 	bl	800121c <__aeabi_fsub>
 8025610:	1c01      	adds	r1, r0, #0
 8025612:	f7db fadf 	bl	8000bd4 <__aeabi_fdiv>
 8025616:	e7f0      	b.n	80255fa <__ieee754_sqrtf+0x22>
 8025618:	0022      	movs	r2, r4
 802561a:	15e1      	asrs	r1, r4, #23
 802561c:	4002      	ands	r2, r0
 802561e:	4204      	tst	r4, r0
 8025620:	d046      	beq.n	80256b0 <__ieee754_sqrtf+0xd8>
 8025622:	2280      	movs	r2, #128	@ 0x80
 8025624:	000f      	movs	r7, r1
 8025626:	025b      	lsls	r3, r3, #9
 8025628:	0a5b      	lsrs	r3, r3, #9
 802562a:	0412      	lsls	r2, r2, #16
 802562c:	3f7f      	subs	r7, #127	@ 0x7f
 802562e:	4313      	orrs	r3, r2
 8025630:	07c9      	lsls	r1, r1, #31
 8025632:	d400      	bmi.n	8025636 <__ieee754_sqrtf+0x5e>
 8025634:	005b      	lsls	r3, r3, #1
 8025636:	2400      	movs	r4, #0
 8025638:	2180      	movs	r1, #128	@ 0x80
 802563a:	2019      	movs	r0, #25
 802563c:	0026      	movs	r6, r4
 802563e:	107f      	asrs	r7, r7, #1
 8025640:	005b      	lsls	r3, r3, #1
 8025642:	0449      	lsls	r1, r1, #17
 8025644:	1875      	adds	r5, r6, r1
 8025646:	001a      	movs	r2, r3
 8025648:	429d      	cmp	r5, r3
 802564a:	dc02      	bgt.n	8025652 <__ieee754_sqrtf+0x7a>
 802564c:	186e      	adds	r6, r5, r1
 802564e:	1b5a      	subs	r2, r3, r5
 8025650:	1864      	adds	r4, r4, r1
 8025652:	3801      	subs	r0, #1
 8025654:	0053      	lsls	r3, r2, #1
 8025656:	0849      	lsrs	r1, r1, #1
 8025658:	2800      	cmp	r0, #0
 802565a:	d1f3      	bne.n	8025644 <__ieee754_sqrtf+0x6c>
 802565c:	2a00      	cmp	r2, #0
 802565e:	d019      	beq.n	8025694 <__ieee754_sqrtf+0xbc>
 8025660:	4d17      	ldr	r5, [pc, #92]	@ (80256c0 <__ieee754_sqrtf+0xe8>)
 8025662:	4e18      	ldr	r6, [pc, #96]	@ (80256c4 <__ieee754_sqrtf+0xec>)
 8025664:	6828      	ldr	r0, [r5, #0]
 8025666:	6831      	ldr	r1, [r6, #0]
 8025668:	682b      	ldr	r3, [r5, #0]
 802566a:	9301      	str	r3, [sp, #4]
 802566c:	f7db fdd6 	bl	800121c <__aeabi_fsub>
 8025670:	1c01      	adds	r1, r0, #0
 8025672:	9801      	ldr	r0, [sp, #4]
 8025674:	f7da ff66 	bl	8000544 <__aeabi_fcmple>
 8025678:	2800      	cmp	r0, #0
 802567a:	d00b      	beq.n	8025694 <__ieee754_sqrtf+0xbc>
 802567c:	6828      	ldr	r0, [r5, #0]
 802567e:	6831      	ldr	r1, [r6, #0]
 8025680:	f7db f91e 	bl	80008c0 <__aeabi_fadd>
 8025684:	682d      	ldr	r5, [r5, #0]
 8025686:	1c01      	adds	r1, r0, #0
 8025688:	1c28      	adds	r0, r5, #0
 802568a:	f7da ff51 	bl	8000530 <__aeabi_fcmplt>
 802568e:	2800      	cmp	r0, #0
 8025690:	d011      	beq.n	80256b6 <__ieee754_sqrtf+0xde>
 8025692:	3402      	adds	r4, #2
 8025694:	23fc      	movs	r3, #252	@ 0xfc
 8025696:	1064      	asrs	r4, r4, #1
 8025698:	059b      	lsls	r3, r3, #22
 802569a:	18e3      	adds	r3, r4, r3
 802569c:	05fc      	lsls	r4, r7, #23
 802569e:	18e4      	adds	r4, r4, r3
 80256a0:	e7ac      	b.n	80255fc <__ieee754_sqrtf+0x24>
 80256a2:	005b      	lsls	r3, r3, #1
 80256a4:	3201      	adds	r2, #1
 80256a6:	4203      	tst	r3, r0
 80256a8:	d0fb      	beq.n	80256a2 <__ieee754_sqrtf+0xca>
 80256aa:	3a01      	subs	r2, #1
 80256ac:	1a89      	subs	r1, r1, r2
 80256ae:	e7b8      	b.n	8025622 <__ieee754_sqrtf+0x4a>
 80256b0:	2080      	movs	r0, #128	@ 0x80
 80256b2:	0400      	lsls	r0, r0, #16
 80256b4:	e7f7      	b.n	80256a6 <__ieee754_sqrtf+0xce>
 80256b6:	2301      	movs	r3, #1
 80256b8:	3401      	adds	r4, #1
 80256ba:	439c      	bics	r4, r3
 80256bc:	e7ea      	b.n	8025694 <__ieee754_sqrtf+0xbc>
 80256be:	46c0      	nop			@ (mov r8, r8)
 80256c0:	20000430 	.word	0x20000430
 80256c4:	2000042c 	.word	0x2000042c

080256c8 <roundf>:
 80256c8:	0dc3      	lsrs	r3, r0, #23
 80256ca:	b2db      	uxtb	r3, r3
 80256cc:	3b7f      	subs	r3, #127	@ 0x7f
 80256ce:	0002      	movs	r2, r0
 80256d0:	b510      	push	{r4, lr}
 80256d2:	2b16      	cmp	r3, #22
 80256d4:	dc13      	bgt.n	80256fe <roundf+0x36>
 80256d6:	2b00      	cmp	r3, #0
 80256d8:	da07      	bge.n	80256ea <roundf+0x22>
 80256da:	0fc2      	lsrs	r2, r0, #31
 80256dc:	07d0      	lsls	r0, r2, #31
 80256de:	3301      	adds	r3, #1
 80256e0:	d102      	bne.n	80256e8 <roundf+0x20>
 80256e2:	23fe      	movs	r3, #254	@ 0xfe
 80256e4:	059b      	lsls	r3, r3, #22
 80256e6:	4318      	orrs	r0, r3
 80256e8:	bd10      	pop	{r4, pc}
 80256ea:	4908      	ldr	r1, [pc, #32]	@ (802570c <roundf+0x44>)
 80256ec:	4119      	asrs	r1, r3
 80256ee:	4208      	tst	r0, r1
 80256f0:	d0fa      	beq.n	80256e8 <roundf+0x20>
 80256f2:	2080      	movs	r0, #128	@ 0x80
 80256f4:	03c0      	lsls	r0, r0, #15
 80256f6:	4118      	asrs	r0, r3
 80256f8:	1880      	adds	r0, r0, r2
 80256fa:	4388      	bics	r0, r1
 80256fc:	e7f4      	b.n	80256e8 <roundf+0x20>
 80256fe:	2b80      	cmp	r3, #128	@ 0x80
 8025700:	d1f2      	bne.n	80256e8 <roundf+0x20>
 8025702:	1c01      	adds	r1, r0, #0
 8025704:	f7db f8dc 	bl	80008c0 <__aeabi_fadd>
 8025708:	e7ee      	b.n	80256e8 <roundf+0x20>
 802570a:	46c0      	nop			@ (mov r8, r8)
 802570c:	007fffff 	.word	0x007fffff

08025710 <__ieee754_expf>:
 8025710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025712:	21ff      	movs	r1, #255	@ 0xff
 8025714:	0043      	lsls	r3, r0, #1
 8025716:	1c04      	adds	r4, r0, #0
 8025718:	085b      	lsrs	r3, r3, #1
 802571a:	05c9      	lsls	r1, r1, #23
 802571c:	428b      	cmp	r3, r1
 802571e:	d904      	bls.n	802572a <__ieee754_expf+0x1a>
 8025720:	1c01      	adds	r1, r0, #0
 8025722:	1c20      	adds	r0, r4, #0
 8025724:	f7db f8cc 	bl	80008c0 <__aeabi_fadd>
 8025728:	e00d      	b.n	8025746 <__ieee754_expf+0x36>
 802572a:	0fc6      	lsrs	r6, r0, #31
 802572c:	428b      	cmp	r3, r1
 802572e:	d104      	bne.n	802573a <__ieee754_expf+0x2a>
 8025730:	2e00      	cmp	r6, #0
 8025732:	d000      	beq.n	8025736 <__ieee754_expf+0x26>
 8025734:	e0ba      	b.n	80258ac <__ieee754_expf+0x19c>
 8025736:	1c20      	adds	r0, r4, #0
 8025738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802573a:	495d      	ldr	r1, [pc, #372]	@ (80258b0 <__ieee754_expf+0x1a0>)
 802573c:	4288      	cmp	r0, r1
 802573e:	dd04      	ble.n	802574a <__ieee754_expf+0x3a>
 8025740:	2000      	movs	r0, #0
 8025742:	f000 f8f1 	bl	8025928 <__math_oflowf>
 8025746:	1c04      	adds	r4, r0, #0
 8025748:	e7f5      	b.n	8025736 <__ieee754_expf+0x26>
 802574a:	2800      	cmp	r0, #0
 802574c:	da06      	bge.n	802575c <__ieee754_expf+0x4c>
 802574e:	4a59      	ldr	r2, [pc, #356]	@ (80258b4 <__ieee754_expf+0x1a4>)
 8025750:	4293      	cmp	r3, r2
 8025752:	d903      	bls.n	802575c <__ieee754_expf+0x4c>
 8025754:	2000      	movs	r0, #0
 8025756:	f000 f8e1 	bl	802591c <__math_uflowf>
 802575a:	e7f4      	b.n	8025746 <__ieee754_expf+0x36>
 802575c:	4a56      	ldr	r2, [pc, #344]	@ (80258b8 <__ieee754_expf+0x1a8>)
 802575e:	4293      	cmp	r3, r2
 8025760:	d96e      	bls.n	8025840 <__ieee754_expf+0x130>
 8025762:	4a56      	ldr	r2, [pc, #344]	@ (80258bc <__ieee754_expf+0x1ac>)
 8025764:	00b5      	lsls	r5, r6, #2
 8025766:	4293      	cmp	r3, r2
 8025768:	d84e      	bhi.n	8025808 <__ieee754_expf+0xf8>
 802576a:	4b55      	ldr	r3, [pc, #340]	@ (80258c0 <__ieee754_expf+0x1b0>)
 802576c:	1c20      	adds	r0, r4, #0
 802576e:	5959      	ldr	r1, [r3, r5]
 8025770:	f7db fd54 	bl	800121c <__aeabi_fsub>
 8025774:	4b53      	ldr	r3, [pc, #332]	@ (80258c4 <__ieee754_expf+0x1b4>)
 8025776:	1c07      	adds	r7, r0, #0
 8025778:	595b      	ldr	r3, [r3, r5]
 802577a:	2501      	movs	r5, #1
 802577c:	1bad      	subs	r5, r5, r6
 802577e:	9300      	str	r3, [sp, #0]
 8025780:	1bad      	subs	r5, r5, r6
 8025782:	9900      	ldr	r1, [sp, #0]
 8025784:	1c38      	adds	r0, r7, #0
 8025786:	f7db fd49 	bl	800121c <__aeabi_fsub>
 802578a:	1c04      	adds	r4, r0, #0
 802578c:	1c21      	adds	r1, r4, #0
 802578e:	1c20      	adds	r0, r4, #0
 8025790:	f7db fc06 	bl	8000fa0 <__aeabi_fmul>
 8025794:	494c      	ldr	r1, [pc, #304]	@ (80258c8 <__ieee754_expf+0x1b8>)
 8025796:	1c06      	adds	r6, r0, #0
 8025798:	f7db fc02 	bl	8000fa0 <__aeabi_fmul>
 802579c:	494b      	ldr	r1, [pc, #300]	@ (80258cc <__ieee754_expf+0x1bc>)
 802579e:	f7db fd3d 	bl	800121c <__aeabi_fsub>
 80257a2:	1c31      	adds	r1, r6, #0
 80257a4:	f7db fbfc 	bl	8000fa0 <__aeabi_fmul>
 80257a8:	4949      	ldr	r1, [pc, #292]	@ (80258d0 <__ieee754_expf+0x1c0>)
 80257aa:	f7db f889 	bl	80008c0 <__aeabi_fadd>
 80257ae:	1c31      	adds	r1, r6, #0
 80257b0:	f7db fbf6 	bl	8000fa0 <__aeabi_fmul>
 80257b4:	4947      	ldr	r1, [pc, #284]	@ (80258d4 <__ieee754_expf+0x1c4>)
 80257b6:	f7db fd31 	bl	800121c <__aeabi_fsub>
 80257ba:	1c31      	adds	r1, r6, #0
 80257bc:	f7db fbf0 	bl	8000fa0 <__aeabi_fmul>
 80257c0:	4945      	ldr	r1, [pc, #276]	@ (80258d8 <__ieee754_expf+0x1c8>)
 80257c2:	f7db f87d 	bl	80008c0 <__aeabi_fadd>
 80257c6:	1c31      	adds	r1, r6, #0
 80257c8:	f7db fbea 	bl	8000fa0 <__aeabi_fmul>
 80257cc:	1c01      	adds	r1, r0, #0
 80257ce:	1c20      	adds	r0, r4, #0
 80257d0:	f7db fd24 	bl	800121c <__aeabi_fsub>
 80257d4:	1c01      	adds	r1, r0, #0
 80257d6:	1c06      	adds	r6, r0, #0
 80257d8:	1c20      	adds	r0, r4, #0
 80257da:	f7db fbe1 	bl	8000fa0 <__aeabi_fmul>
 80257de:	9001      	str	r0, [sp, #4]
 80257e0:	2d00      	cmp	r5, #0
 80257e2:	d140      	bne.n	8025866 <__ieee754_expf+0x156>
 80257e4:	2180      	movs	r1, #128	@ 0x80
 80257e6:	1c30      	adds	r0, r6, #0
 80257e8:	05c9      	lsls	r1, r1, #23
 80257ea:	f7db fd17 	bl	800121c <__aeabi_fsub>
 80257ee:	1c01      	adds	r1, r0, #0
 80257f0:	9801      	ldr	r0, [sp, #4]
 80257f2:	f7db f9ef 	bl	8000bd4 <__aeabi_fdiv>
 80257f6:	1c21      	adds	r1, r4, #0
 80257f8:	f7db fd10 	bl	800121c <__aeabi_fsub>
 80257fc:	1c01      	adds	r1, r0, #0
 80257fe:	20fe      	movs	r0, #254	@ 0xfe
 8025800:	0580      	lsls	r0, r0, #22
 8025802:	f7db fd0b 	bl	800121c <__aeabi_fsub>
 8025806:	e79e      	b.n	8025746 <__ieee754_expf+0x36>
 8025808:	4934      	ldr	r1, [pc, #208]	@ (80258dc <__ieee754_expf+0x1cc>)
 802580a:	1c20      	adds	r0, r4, #0
 802580c:	f7db fbc8 	bl	8000fa0 <__aeabi_fmul>
 8025810:	4b33      	ldr	r3, [pc, #204]	@ (80258e0 <__ieee754_expf+0x1d0>)
 8025812:	5959      	ldr	r1, [r3, r5]
 8025814:	f7db f854 	bl	80008c0 <__aeabi_fadd>
 8025818:	f7db feba 	bl	8001590 <__aeabi_f2iz>
 802581c:	0005      	movs	r5, r0
 802581e:	f7db fed7 	bl	80015d0 <__aeabi_i2f>
 8025822:	4930      	ldr	r1, [pc, #192]	@ (80258e4 <__ieee754_expf+0x1d4>)
 8025824:	1c06      	adds	r6, r0, #0
 8025826:	f7db fbbb 	bl	8000fa0 <__aeabi_fmul>
 802582a:	1c01      	adds	r1, r0, #0
 802582c:	1c20      	adds	r0, r4, #0
 802582e:	f7db fcf5 	bl	800121c <__aeabi_fsub>
 8025832:	492d      	ldr	r1, [pc, #180]	@ (80258e8 <__ieee754_expf+0x1d8>)
 8025834:	1c07      	adds	r7, r0, #0
 8025836:	1c30      	adds	r0, r6, #0
 8025838:	f7db fbb2 	bl	8000fa0 <__aeabi_fmul>
 802583c:	9000      	str	r0, [sp, #0]
 802583e:	e7a0      	b.n	8025782 <__ieee754_expf+0x72>
 8025840:	22d0      	movs	r2, #208	@ 0xd0
 8025842:	0592      	lsls	r2, r2, #22
 8025844:	4293      	cmp	r3, r2
 8025846:	d20c      	bcs.n	8025862 <__ieee754_expf+0x152>
 8025848:	4928      	ldr	r1, [pc, #160]	@ (80258ec <__ieee754_expf+0x1dc>)
 802584a:	1c20      	adds	r0, r4, #0
 802584c:	f7db f838 	bl	80008c0 <__aeabi_fadd>
 8025850:	21fe      	movs	r1, #254	@ 0xfe
 8025852:	0589      	lsls	r1, r1, #22
 8025854:	f7da fe80 	bl	8000558 <__aeabi_fcmpgt>
 8025858:	1e05      	subs	r5, r0, #0
 802585a:	d097      	beq.n	802578c <__ieee754_expf+0x7c>
 802585c:	21fe      	movs	r1, #254	@ 0xfe
 802585e:	0589      	lsls	r1, r1, #22
 8025860:	e75f      	b.n	8025722 <__ieee754_expf+0x12>
 8025862:	2500      	movs	r5, #0
 8025864:	e792      	b.n	802578c <__ieee754_expf+0x7c>
 8025866:	2080      	movs	r0, #128	@ 0x80
 8025868:	1c31      	adds	r1, r6, #0
 802586a:	05c0      	lsls	r0, r0, #23
 802586c:	f7db fcd6 	bl	800121c <__aeabi_fsub>
 8025870:	1c01      	adds	r1, r0, #0
 8025872:	9801      	ldr	r0, [sp, #4]
 8025874:	f7db f9ae 	bl	8000bd4 <__aeabi_fdiv>
 8025878:	1c01      	adds	r1, r0, #0
 802587a:	9800      	ldr	r0, [sp, #0]
 802587c:	f7db fcce 	bl	800121c <__aeabi_fsub>
 8025880:	1c39      	adds	r1, r7, #0
 8025882:	f7db fccb 	bl	800121c <__aeabi_fsub>
 8025886:	1c01      	adds	r1, r0, #0
 8025888:	20fe      	movs	r0, #254	@ 0xfe
 802588a:	0580      	lsls	r0, r0, #22
 802588c:	f7db fcc6 	bl	800121c <__aeabi_fsub>
 8025890:	002b      	movs	r3, r5
 8025892:	337d      	adds	r3, #125	@ 0x7d
 8025894:	db02      	blt.n	802589c <__ieee754_expf+0x18c>
 8025896:	05ec      	lsls	r4, r5, #23
 8025898:	1824      	adds	r4, r4, r0
 802589a:	e74c      	b.n	8025736 <__ieee754_expf+0x26>
 802589c:	21d8      	movs	r1, #216	@ 0xd8
 802589e:	3564      	adds	r5, #100	@ 0x64
 80258a0:	05ed      	lsls	r5, r5, #23
 80258a2:	1828      	adds	r0, r5, r0
 80258a4:	0509      	lsls	r1, r1, #20
 80258a6:	f7db fb7b 	bl	8000fa0 <__aeabi_fmul>
 80258aa:	e74c      	b.n	8025746 <__ieee754_expf+0x36>
 80258ac:	2400      	movs	r4, #0
 80258ae:	e742      	b.n	8025736 <__ieee754_expf+0x26>
 80258b0:	42b17217 	.word	0x42b17217
 80258b4:	42cff1b5 	.word	0x42cff1b5
 80258b8:	3eb17218 	.word	0x3eb17218
 80258bc:	3f851591 	.word	0x3f851591
 80258c0:	08029738 	.word	0x08029738
 80258c4:	08029730 	.word	0x08029730
 80258c8:	3331bb4c 	.word	0x3331bb4c
 80258cc:	35ddea0e 	.word	0x35ddea0e
 80258d0:	388ab355 	.word	0x388ab355
 80258d4:	3b360b61 	.word	0x3b360b61
 80258d8:	3e2aaaab 	.word	0x3e2aaaab
 80258dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80258e0:	08029740 	.word	0x08029740
 80258e4:	3f317180 	.word	0x3f317180
 80258e8:	3717f7d1 	.word	0x3717f7d1
 80258ec:	7149f2ca 	.word	0x7149f2ca

080258f0 <with_errnof>:
 80258f0:	b570      	push	{r4, r5, r6, lr}
 80258f2:	000d      	movs	r5, r1
 80258f4:	1c04      	adds	r4, r0, #0
 80258f6:	f7fd f923 	bl	8022b40 <__errno>
 80258fa:	6005      	str	r5, [r0, #0]
 80258fc:	1c20      	adds	r0, r4, #0
 80258fe:	bd70      	pop	{r4, r5, r6, pc}

08025900 <xflowf>:
 8025900:	b510      	push	{r4, lr}
 8025902:	1c0b      	adds	r3, r1, #0
 8025904:	2800      	cmp	r0, #0
 8025906:	d002      	beq.n	802590e <xflowf+0xe>
 8025908:	2380      	movs	r3, #128	@ 0x80
 802590a:	061b      	lsls	r3, r3, #24
 802590c:	18cb      	adds	r3, r1, r3
 802590e:	1c18      	adds	r0, r3, #0
 8025910:	f7db fb46 	bl	8000fa0 <__aeabi_fmul>
 8025914:	2122      	movs	r1, #34	@ 0x22
 8025916:	f7ff ffeb 	bl	80258f0 <with_errnof>
 802591a:	bd10      	pop	{r4, pc}

0802591c <__math_uflowf>:
 802591c:	2180      	movs	r1, #128	@ 0x80
 802591e:	b510      	push	{r4, lr}
 8025920:	0549      	lsls	r1, r1, #21
 8025922:	f7ff ffed 	bl	8025900 <xflowf>
 8025926:	bd10      	pop	{r4, pc}

08025928 <__math_oflowf>:
 8025928:	21e0      	movs	r1, #224	@ 0xe0
 802592a:	b510      	push	{r4, lr}
 802592c:	05c9      	lsls	r1, r1, #23
 802592e:	f7ff ffe7 	bl	8025900 <xflowf>
 8025932:	bd10      	pop	{r4, pc}

08025934 <_init>:
 8025934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025936:	46c0      	nop			@ (mov r8, r8)
 8025938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802593a:	bc08      	pop	{r3}
 802593c:	469e      	mov	lr, r3
 802593e:	4770      	bx	lr

08025940 <_fini>:
 8025940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025942:	46c0      	nop			@ (mov r8, r8)
 8025944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025946:	bc08      	pop	{r3}
 8025948:	469e      	mov	lr, r3
 802594a:	4770      	bx	lr
