
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022620  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b78  080226e0  080226e0  000236e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025258  08025258  00027420  2**0
                  CONTENTS
  4 .ARM          00000008  08025258  08025258  00026258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025260  08025260  00027420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025260  08025260  00026260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025264  08025264  00026264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08025268  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  20000420  08025688  00027420  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003900  08025688  00027900  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032b35  00000000  00000000  00027448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009155  00000000  00000000  00059f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a50  00000000  00000000  000630d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f5f  00000000  00000000  00065b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223be  00000000  00000000  00067a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040679  00000000  00000000  00089e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0371  00000000  00000000  000ca4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016a82f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acb4  00000000  00000000  0016a8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00175594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00175601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00177b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080226c8 	.word	0x080226c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	080226c8 	.word	0x080226c8

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08024474 	.word	0x08024474
 8000e0c:	080244b4 	.word	0x080244b4
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	080244f0 	.word	0x080244f0
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b fe70 	bl	800f348 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b fec7 	bl	800f418 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b fe7a 	bl	800f3a4 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b fdf6 	bl	800f348 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b fe25 	bl	800f3c0 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b fe09 	bl	800f3a4 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000998 	.word	0x20000998

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a fda6 	bl	800e308 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000994 	.word	0x20000994

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fc84 	bl	80060e4 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fce1 	bl	80061a8 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	2000056c 	.word	0x2000056c
 80037f8:	20000570 	.word	0x20000570

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	200009a8 	.word	0x200009a8
 800385c:	0808000c 	.word	0x0808000c
 8003860:	200009b4 	.word	0x200009b4
 8003864:	200009b8 	.word	0x200009b8

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200009bc 	.word	0x200009bc
 80038c8:	08080090 	.word	0x08080090
 80038cc:	200009dc 	.word	0x200009dc
 80038d0:	200009e0 	.word	0x200009e0

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000564 	.word	0x20000564
 80038f8:	20000568 	.word	0x20000568

080038fc <setHIDS>:
void setHIDS(float temp, float humid){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <setHIDS+0x20>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <setHIDS+0x24>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	20000564 	.word	0x20000564
 8003920:	20000568 	.word	0x20000568

08003924 <setVOC>:
void setVOC(uint16_t voc){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setVOC+0x1c>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	801a      	strh	r2, [r3, #0]
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000574 	.word	0x20000574

08003944 <setMic>:
void setMic(float dB){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <setMic+0x18>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	20000578 	.word	0x20000578

08003960 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	0002      	movs	r2, r0
 8003968:	1dbb      	adds	r3, r7, #6
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	1c0a      	adds	r2, r1, #0
 8003970:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003972:	1dbb      	adds	r3, r7, #6
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	0018      	movs	r0, r3
 8003978:	f7fd fe2a 	bl	80015d0 <__aeabi_i2f>
 800397c:	1c03      	adds	r3, r0, #0
 800397e:	490d      	ldr	r1, [pc, #52]	@ (80039b4 <setPMs+0x54>)
 8003980:	1c18      	adds	r0, r3, #0
 8003982:	f7fd f927 	bl	8000bd4 <__aeabi_fdiv>
 8003986:	1c03      	adds	r3, r0, #0
 8003988:	1c1a      	adds	r2, r3, #0
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <setPMs+0x58>)
 800398c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd fe1c 	bl	80015d0 <__aeabi_i2f>
 8003998:	1c03      	adds	r3, r0, #0
 800399a:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <setPMs+0x54>)
 800399c:	1c18      	adds	r0, r3, #0
 800399e:	f7fd f919 	bl	8000bd4 <__aeabi_fdiv>
 80039a2:	1c03      	adds	r3, r0, #0
 80039a4:	1c1a      	adds	r2, r3, #0
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <setPMs+0x5c>)
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	41200000 	.word	0x41200000
 80039b8:	2000057c 	.word	0x2000057c
 80039bc:	20000580 	.word	0x20000580

080039c0 <SetConfigMode>:

void SetConfigMode(){
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039c4:	4b02      	ldr	r3, [pc, #8]	@ (80039d0 <SetConfigMode+0x10>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000054b 	.word	0x2000054b

080039d4 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039d8:	f00a fce0 	bl	800e39c <HAL_GetUIDw0>
 80039dc:	0002      	movs	r2, r0
 80039de:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <ESP_GetUID+0x28>)
 80039e0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039e2:	f00a fce5 	bl	800e3b0 <HAL_GetUIDw1>
 80039e6:	0002      	movs	r2, r0
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <ESP_GetUID+0x28>)
 80039ea:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ec:	f00a fcea 	bl	800e3c4 <HAL_GetUIDw2>
 80039f0:	0002      	movs	r2, r0
 80039f2:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <ESP_GetUID+0x28>)
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000550 	.word	0x20000550

08003a00 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003a08:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <ESP_Init+0x2c>)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a0e:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <ESP_Init+0x30>)
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a14:	f7ff ffde 	bl	80039d4 <ESP_GetUID>
  beurs = checkEEprom();
 8003a18:	f7ff fef0 	bl	80037fc <checkEEprom>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	001a      	movs	r2, r3
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <ESP_Init+0x34>)
 8003a22:	701a      	strb	r2, [r3, #0]
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000440 	.word	0x20000440
 8003a30:	20000028 	.word	0x20000028
 8003a34:	2000054e 	.word	0x2000054e

08003a38 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	000a      	movs	r2, r1
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <ESP_Send+0x54>)
 8003a4a:	4911      	ldr	r1, [pc, #68]	@ (8003a90 <ESP_Send+0x58>)
 8003a4c:	2003      	movs	r0, #3
 8003a4e:	f00a f80f 	bl	800da70 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <ESP_Send+0x5c>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	250f      	movs	r5, #15
 8003a58:	197c      	adds	r4, r7, r5
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0019      	movs	r1, r3
 8003a62:	f012 ff65 	bl	8016930 <HAL_UART_Transmit_DMA>
 8003a66:	0003      	movs	r3, r0
 8003a68:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a6a:	197b      	adds	r3, r7, r5
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a72:	4a09      	ldr	r2, [pc, #36]	@ (8003a98 <ESP_Send+0x60>)
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <ESP_Send+0x64>)
 8003a76:	0019      	movs	r1, r3
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f009 fff9 	bl	800da70 <CreateLine>
    return false;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <ESP_Send+0x4c>
  }
  return true;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	080226e0 	.word	0x080226e0
 8003a90:	080226f0 	.word	0x080226f0
 8003a94:	20000440 	.word	0x20000440
 8003a98:	080226f4 	.word	0x080226f4
 8003a9c:	08022714 	.word	0x08022714

08003aa0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003aae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba4 <ESP_Receive+0x104>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba8 <ESP_Receive+0x108>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	250f      	movs	r5, #15
 8003aba:	197c      	adds	r4, r7, r5
 8003abc:	1cbb      	adds	r3, r7, #2
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	f012 ffc4 	bl	8016a50 <HAL_UART_Receive_DMA>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003acc:	002c      	movs	r4, r5
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d060      	beq.n	8003b98 <ESP_Receive+0xf8>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ad6:	4b34      	ldr	r3, [pc, #208]	@ (8003ba8 <ESP_Receive+0x108>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2284      	movs	r2, #132	@ 0x84
 8003adc:	589b      	ldr	r3, [r3, r2]
 8003ade:	4a33      	ldr	r2, [pc, #204]	@ (8003bac <ESP_Receive+0x10c>)
 8003ae0:	4933      	ldr	r1, [pc, #204]	@ (8003bb0 <ESP_Receive+0x110>)
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f009 ffc4 	bl	800da70 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ae8:	193b      	adds	r3, r7, r4
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	d005      	beq.n	8003afe <ESP_Receive+0x5e>
      Error("Parity error in UART to ESP module");
 8003af2:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <ESP_Receive+0x114>)
 8003af4:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb0 <ESP_Receive+0x110>)
 8003af6:	0019      	movs	r1, r3
 8003af8:	2001      	movs	r0, #1
 8003afa:	f009 ffb9 	bl	800da70 <CreateLine>
    }
    if (status & HAL_UART_ERROR_NE) {
 8003afe:	230f      	movs	r3, #15
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	d005      	beq.n	8003b16 <ESP_Receive+0x76>
      Error("Noise error in UART to ESP module");
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb8 <ESP_Receive+0x118>)
 8003b0c:	4b28      	ldr	r3, [pc, #160]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	2001      	movs	r0, #1
 8003b12:	f009 ffad 	bl	800da70 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b16:	230f      	movs	r3, #15
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d005      	beq.n	8003b2e <ESP_Receive+0x8e>
      Error("Frame error in UART to ESP module");
 8003b22:	4a26      	ldr	r2, [pc, #152]	@ (8003bbc <ESP_Receive+0x11c>)
 8003b24:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b26:	0019      	movs	r1, r3
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f009 ffa1 	bl	800da70 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b2e:	230f      	movs	r3, #15
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2208      	movs	r2, #8
 8003b36:	4013      	ands	r3, r2
 8003b38:	d005      	beq.n	8003b46 <ESP_Receive+0xa6>
      Error("Overrun error in UART to ESP module");
 8003b3a:	4a21      	ldr	r2, [pc, #132]	@ (8003bc0 <ESP_Receive+0x120>)
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b3e:	0019      	movs	r1, r3
 8003b40:	2001      	movs	r0, #1
 8003b42:	f009 ff95 	bl	800da70 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b46:	230f      	movs	r3, #15
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d005      	beq.n	8003b5e <ESP_Receive+0xbe>
      Error("DMA transfer error in UART to ESP module");
 8003b52:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc4 <ESP_Receive+0x124>)
 8003b54:	4b16      	ldr	r3, [pc, #88]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b56:	0019      	movs	r1, r3
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f009 ff89 	bl	800da70 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b5e:	230f      	movs	r3, #15
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	d005      	beq.n	8003b76 <ESP_Receive+0xd6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b6a:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <ESP_Receive+0x128>)
 8003b6c:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b6e:	0019      	movs	r1, r3
 8003b70:	2001      	movs	r0, #1
 8003b72:	f009 ff7d 	bl	800da70 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b76:	230f      	movs	r3, #15
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2240      	movs	r2, #64	@ 0x40
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d005      	beq.n	8003b8e <ESP_Receive+0xee>
      Error("Invalid Callback error in UART to ESP module");
 8003b82:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <ESP_Receive+0x12c>)
 8003b84:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b86:	0019      	movs	r1, r3
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f009 ff71 	bl	800da70 <CreateLine>
    }
#endif
    RxComplete = true;
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <ESP_Receive+0x104>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
    return false;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <ESP_Receive+0xfa>
  }
  return true;
 8003b98:	2301      	movs	r3, #1
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	20000444 	.word	0x20000444
 8003ba8:	20000440 	.word	0x20000440
 8003bac:	08022718 	.word	0x08022718
 8003bb0:	08022714 	.word	0x08022714
 8003bb4:	08022748 	.word	0x08022748
 8003bb8:	0802276c 	.word	0x0802276c
 8003bbc:	08022790 	.word	0x08022790
 8003bc0:	080227b4 	.word	0x080227b4
 8003bc4:	080227d8 	.word	0x080227d8
 8003bc8:	08022804 	.word	0x08022804
 8003bcc:	08022834 	.word	0x08022834

08003bd0 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <HAL_UART_ErrorCallback+0x34>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10c      	bne.n	8003bfc <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2284      	movs	r2, #132	@ 0x84
 8003be6:	589b      	ldr	r3, [r3, r2]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d007      	beq.n	8003bfc <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2284      	movs	r2, #132	@ 0x84
 8003bf0:	589b      	ldr	r3, [r3, r2]
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_UART_ErrorCallback+0x38>)
 8003bf4:	4905      	ldr	r1, [pc, #20]	@ (8003c0c <HAL_UART_ErrorCallback+0x3c>)
 8003bf6:	2003      	movs	r0, #3
 8003bf8:	f009 ff3a 	bl	800da70 <CreateLine>
    }
  }
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000440 	.word	0x20000440
 8003c08:	08022864 	.word	0x08022864
 8003c0c:	080226f0 	.word	0x080226f0

08003c10 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e010      	b.n	8003c42 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	001a      	movs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1898      	adds	r0, r3, r2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	18d3      	adds	r3, r2, r3
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	001a      	movs	r2, r3
 8003c34:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <uint8ArrayToString+0x44>)
 8003c36:	0019      	movs	r1, r3
 8003c38:	f01b fc64 	bl	801f504 <siprintf>
  for (int i = 0; i < 12; i++)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b0b      	cmp	r3, #11
 8003c46:	ddeb      	ble.n	8003c20 <uint8ArrayToString+0x10>
  }
}
 8003c48:	46c0      	nop			@ (mov r8, r8)
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	08022890 	.word	0x08022890

08003c58 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5a:	b089      	sub	sp, #36	@ 0x24
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	0002      	movs	r2, r0
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003c64:	4be5      	ldr	r3, [pc, #916]	@ (8003ffc <CreateMessage+0x3a4>)
 8003c66:	48e6      	ldr	r0, [pc, #920]	@ (8004000 <CreateMessage+0x3a8>)
 8003c68:	220c      	movs	r2, #12
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	f7ff fd44 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003c70:	4be4      	ldr	r3, [pc, #912]	@ (8004004 <CreateMessage+0x3ac>)
 8003c72:	48e5      	ldr	r0, [pc, #916]	@ (8004008 <CreateMessage+0x3b0>)
 8003c74:	220c      	movs	r2, #12
 8003c76:	0019      	movs	r1, r3
 8003c78:	f7ff fd3e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003c7c:	4be3      	ldr	r3, [pc, #908]	@ (800400c <CreateMessage+0x3b4>)
 8003c7e:	48e4      	ldr	r0, [pc, #912]	@ (8004010 <CreateMessage+0x3b8>)
 8003c80:	220c      	movs	r2, #12
 8003c82:	0019      	movs	r1, r3
 8003c84:	f7ff fd38 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003c88:	4be2      	ldr	r3, [pc, #904]	@ (8004014 <CreateMessage+0x3bc>)
 8003c8a:	48e3      	ldr	r0, [pc, #908]	@ (8004018 <CreateMessage+0x3c0>)
 8003c8c:	220c      	movs	r2, #12
 8003c8e:	0019      	movs	r1, r3
 8003c90:	f7ff fd32 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003c94:	4be1      	ldr	r3, [pc, #900]	@ (800401c <CreateMessage+0x3c4>)
 8003c96:	48e2      	ldr	r0, [pc, #904]	@ (8004020 <CreateMessage+0x3c8>)
 8003c98:	220c      	movs	r2, #12
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	f7ff fd2c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003ca0:	4be0      	ldr	r3, [pc, #896]	@ (8004024 <CreateMessage+0x3cc>)
 8003ca2:	48e1      	ldr	r0, [pc, #900]	@ (8004028 <CreateMessage+0x3d0>)
 8003ca4:	220c      	movs	r2, #12
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	f7ff fd26 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003cac:	4bdf      	ldr	r3, [pc, #892]	@ (800402c <CreateMessage+0x3d4>)
 8003cae:	48e0      	ldr	r0, [pc, #896]	@ (8004030 <CreateMessage+0x3d8>)
 8003cb0:	220c      	movs	r2, #12
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	f7ff fd20 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003cb8:	4bde      	ldr	r3, [pc, #888]	@ (8004034 <CreateMessage+0x3dc>)
 8003cba:	48df      	ldr	r0, [pc, #892]	@ (8004038 <CreateMessage+0x3e0>)
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	f7ff fd1a 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003cc4:	f7ff fdd0 	bl	8003868 <checkName>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d006      	beq.n	8003cda <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003ccc:	4bdb      	ldr	r3, [pc, #876]	@ (800403c <CreateMessage+0x3e4>)
 8003cce:	48dc      	ldr	r0, [pc, #880]	@ (8004040 <CreateMessage+0x3e8>)
 8003cd0:	221e      	movs	r2, #30
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	f7ff fd10 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003cd8:	e005      	b.n	8003ce6 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003cda:	4bd8      	ldr	r3, [pc, #864]	@ (800403c <CreateMessage+0x3e4>)
 8003cdc:	4ad9      	ldr	r2, [pc, #868]	@ (8004044 <CreateMessage+0x3ec>)
 8003cde:	6811      	ldr	r1, [r2, #0]
 8003ce0:	6019      	str	r1, [r3, #0]
 8003ce2:	7912      	ldrb	r2, [r2, #4]
 8003ce4:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003ce6:	f7ff fd75 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	00da      	lsls	r2, r3, #3
 8003cee:	4bd6      	ldr	r3, [pc, #856]	@ (8004048 <CreateMessage+0x3f0>)
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f01b fd4a 	bl	801f78c <memset>
  uint16_t index = 0;
 8003cf8:	260e      	movs	r6, #14
 8003cfa:	19bb      	adds	r3, r7, r6
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003d00:	19bb      	adds	r3, r7, r6
 8003d02:	881a      	ldrh	r2, [r3, #0]
 8003d04:	4bd0      	ldr	r3, [pc, #832]	@ (8004048 <CreateMessage+0x3f0>)
 8003d06:	18d3      	adds	r3, r2, r3
 8003d08:	4ad0      	ldr	r2, [pc, #832]	@ (800404c <CreateMessage+0x3f4>)
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f01b fbf9 	bl	801f504 <siprintf>
  index = strlen(message);
 8003d12:	4bcd      	ldr	r3, [pc, #820]	@ (8004048 <CreateMessage+0x3f0>)
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fc fa29 	bl	800016c <strlen>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	19bb      	adds	r3, r7, r6
 8003d1e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003d20:	4ab6      	ldr	r2, [pc, #728]	@ (8003ffc <CreateMessage+0x3a4>)
 8003d22:	4bcb      	ldr	r3, [pc, #812]	@ (8004050 <CreateMessage+0x3f8>)
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7ff ff72 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003d2c:	19bb      	adds	r3, r7, r6
 8003d2e:	881a      	ldrh	r2, [r3, #0]
 8003d30:	4bc5      	ldr	r3, [pc, #788]	@ (8004048 <CreateMessage+0x3f0>)
 8003d32:	18d4      	adds	r4, r2, r3
 8003d34:	4bc7      	ldr	r3, [pc, #796]	@ (8004054 <CreateMessage+0x3fc>)
 8003d36:	689d      	ldr	r5, [r3, #8]
 8003d38:	4bc7      	ldr	r3, [pc, #796]	@ (8004058 <CreateMessage+0x400>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1c18      	adds	r0, r3, #0
 8003d3e:	f7ff fb91 	bl	8003464 <__aeabi_f2d>
 8003d42:	0002      	movs	r2, r0
 8003d44:	000b      	movs	r3, r1
 8003d46:	48bd      	ldr	r0, [pc, #756]	@ (800403c <CreateMessage+0x3e4>)
 8003d48:	49c4      	ldr	r1, [pc, #784]	@ (800405c <CreateMessage+0x404>)
 8003d4a:	9202      	str	r2, [sp, #8]
 8003d4c:	9303      	str	r3, [sp, #12]
 8003d4e:	4bc0      	ldr	r3, [pc, #768]	@ (8004050 <CreateMessage+0x3f8>)
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	0003      	movs	r3, r0
 8003d54:	002a      	movs	r2, r5
 8003d56:	0020      	movs	r0, r4
 8003d58:	f01b fbd4 	bl	801f504 <siprintf>
  index = strlen(message);
 8003d5c:	4bba      	ldr	r3, [pc, #744]	@ (8004048 <CreateMessage+0x3f0>)
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fc fa04 	bl	800016c <strlen>
 8003d64:	0002      	movs	r2, r0
 8003d66:	19bb      	adds	r3, r7, r6
 8003d68:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003d6a:	4aa6      	ldr	r2, [pc, #664]	@ (8004004 <CreateMessage+0x3ac>)
 8003d6c:	4bb8      	ldr	r3, [pc, #736]	@ (8004050 <CreateMessage+0x3f8>)
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff ff4d 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003d76:	19bb      	adds	r3, r7, r6
 8003d78:	881a      	ldrh	r2, [r3, #0]
 8003d7a:	4bb3      	ldr	r3, [pc, #716]	@ (8004048 <CreateMessage+0x3f0>)
 8003d7c:	18d4      	adds	r4, r2, r3
 8003d7e:	4bb5      	ldr	r3, [pc, #724]	@ (8004054 <CreateMessage+0x3fc>)
 8003d80:	689d      	ldr	r5, [r3, #8]
 8003d82:	4bb7      	ldr	r3, [pc, #732]	@ (8004060 <CreateMessage+0x408>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	1c18      	adds	r0, r3, #0
 8003d88:	f7ff fb6c 	bl	8003464 <__aeabi_f2d>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	000b      	movs	r3, r1
 8003d90:	48aa      	ldr	r0, [pc, #680]	@ (800403c <CreateMessage+0x3e4>)
 8003d92:	49b4      	ldr	r1, [pc, #720]	@ (8004064 <CreateMessage+0x40c>)
 8003d94:	9202      	str	r2, [sp, #8]
 8003d96:	9303      	str	r3, [sp, #12]
 8003d98:	4bad      	ldr	r3, [pc, #692]	@ (8004050 <CreateMessage+0x3f8>)
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	002a      	movs	r2, r5
 8003da0:	0020      	movs	r0, r4
 8003da2:	f01b fbaf 	bl	801f504 <siprintf>
  index = strlen(message);
 8003da6:	4ba8      	ldr	r3, [pc, #672]	@ (8004048 <CreateMessage+0x3f0>)
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fc f9df 	bl	800016c <strlen>
 8003dae:	0002      	movs	r2, r0
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003db4:	4a95      	ldr	r2, [pc, #596]	@ (800400c <CreateMessage+0x3b4>)
 8003db6:	4ba6      	ldr	r3, [pc, #664]	@ (8004050 <CreateMessage+0x3f8>)
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff ff28 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003dc0:	19bb      	adds	r3, r7, r6
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	4ba0      	ldr	r3, [pc, #640]	@ (8004048 <CreateMessage+0x3f0>)
 8003dc6:	18d4      	adds	r4, r2, r3
 8003dc8:	4ba2      	ldr	r3, [pc, #648]	@ (8004054 <CreateMessage+0x3fc>)
 8003dca:	689d      	ldr	r5, [r3, #8]
 8003dcc:	4ba6      	ldr	r3, [pc, #664]	@ (8004068 <CreateMessage+0x410>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c18      	adds	r0, r3, #0
 8003dd2:	f7ff fb47 	bl	8003464 <__aeabi_f2d>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	000b      	movs	r3, r1
 8003dda:	4898      	ldr	r0, [pc, #608]	@ (800403c <CreateMessage+0x3e4>)
 8003ddc:	49a3      	ldr	r1, [pc, #652]	@ (800406c <CreateMessage+0x414>)
 8003dde:	9202      	str	r2, [sp, #8]
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	4b9b      	ldr	r3, [pc, #620]	@ (8004050 <CreateMessage+0x3f8>)
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	0003      	movs	r3, r0
 8003de8:	002a      	movs	r2, r5
 8003dea:	0020      	movs	r0, r4
 8003dec:	f01b fb8a 	bl	801f504 <siprintf>
  index = strlen(message);
 8003df0:	4b95      	ldr	r3, [pc, #596]	@ (8004048 <CreateMessage+0x3f0>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fc f9ba 	bl	800016c <strlen>
 8003df8:	0002      	movs	r2, r0
 8003dfa:	19bb      	adds	r3, r7, r6
 8003dfc:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003dfe:	4a85      	ldr	r2, [pc, #532]	@ (8004014 <CreateMessage+0x3bc>)
 8003e00:	4b93      	ldr	r3, [pc, #588]	@ (8004050 <CreateMessage+0x3f8>)
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff ff03 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003e0a:	19bb      	adds	r3, r7, r6
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	4b8e      	ldr	r3, [pc, #568]	@ (8004048 <CreateMessage+0x3f0>)
 8003e10:	18d0      	adds	r0, r2, r3
 8003e12:	4b90      	ldr	r3, [pc, #576]	@ (8004054 <CreateMessage+0x3fc>)
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	4b96      	ldr	r3, [pc, #600]	@ (8004070 <CreateMessage+0x418>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	4c88      	ldr	r4, [pc, #544]	@ (800403c <CreateMessage+0x3e4>)
 8003e1c:	4995      	ldr	r1, [pc, #596]	@ (8004074 <CreateMessage+0x41c>)
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	4b8b      	ldr	r3, [pc, #556]	@ (8004050 <CreateMessage+0x3f8>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	0023      	movs	r3, r4
 8003e26:	f01b fb6d 	bl	801f504 <siprintf>
  index = strlen(message);
 8003e2a:	4b87      	ldr	r3, [pc, #540]	@ (8004048 <CreateMessage+0x3f0>)
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fc f99d 	bl	800016c <strlen>
 8003e32:	0002      	movs	r2, r0
 8003e34:	19bb      	adds	r3, r7, r6
 8003e36:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003e38:	1dfb      	adds	r3, r7, #7
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4053      	eors	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d100      	bne.n	8003e48 <CreateMessage+0x1f0>
 8003e46:	e094      	b.n	8003f72 <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003e48:	4a74      	ldr	r2, [pc, #464]	@ (800401c <CreateMessage+0x3c4>)
 8003e4a:	4b81      	ldr	r3, [pc, #516]	@ (8004050 <CreateMessage+0x3f8>)
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff fede 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003e54:	19bb      	adds	r3, r7, r6
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	4b7b      	ldr	r3, [pc, #492]	@ (8004048 <CreateMessage+0x3f0>)
 8003e5a:	18d4      	adds	r4, r2, r3
 8003e5c:	4b7d      	ldr	r3, [pc, #500]	@ (8004054 <CreateMessage+0x3fc>)
 8003e5e:	689d      	ldr	r5, [r3, #8]
 8003e60:	4b85      	ldr	r3, [pc, #532]	@ (8004078 <CreateMessage+0x420>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1c18      	adds	r0, r3, #0
 8003e66:	f7ff fafd 	bl	8003464 <__aeabi_f2d>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	000b      	movs	r3, r1
 8003e6e:	4873      	ldr	r0, [pc, #460]	@ (800403c <CreateMessage+0x3e4>)
 8003e70:	4982      	ldr	r1, [pc, #520]	@ (800407c <CreateMessage+0x424>)
 8003e72:	9202      	str	r2, [sp, #8]
 8003e74:	9303      	str	r3, [sp, #12]
 8003e76:	4b76      	ldr	r3, [pc, #472]	@ (8004050 <CreateMessage+0x3f8>)
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	002a      	movs	r2, r5
 8003e7e:	0020      	movs	r0, r4
 8003e80:	f01b fb40 	bl	801f504 <siprintf>
    index = strlen(message);
 8003e84:	4b70      	ldr	r3, [pc, #448]	@ (8004048 <CreateMessage+0x3f0>)
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fc f970 	bl	800016c <strlen>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	19bb      	adds	r3, r7, r6
 8003e90:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003e92:	4a64      	ldr	r2, [pc, #400]	@ (8004024 <CreateMessage+0x3cc>)
 8003e94:	4b6e      	ldr	r3, [pc, #440]	@ (8004050 <CreateMessage+0x3f8>)
 8003e96:	0011      	movs	r1, r2
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff feb9 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003e9e:	19bb      	adds	r3, r7, r6
 8003ea0:	881a      	ldrh	r2, [r3, #0]
 8003ea2:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <CreateMessage+0x3f0>)
 8003ea4:	18d4      	adds	r4, r2, r3
 8003ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8004054 <CreateMessage+0x3fc>)
 8003ea8:	689d      	ldr	r5, [r3, #8]
 8003eaa:	4b75      	ldr	r3, [pc, #468]	@ (8004080 <CreateMessage+0x428>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1c18      	adds	r0, r3, #0
 8003eb0:	f7ff fad8 	bl	8003464 <__aeabi_f2d>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	000b      	movs	r3, r1
 8003eb8:	4860      	ldr	r0, [pc, #384]	@ (800403c <CreateMessage+0x3e4>)
 8003eba:	4972      	ldr	r1, [pc, #456]	@ (8004084 <CreateMessage+0x42c>)
 8003ebc:	9202      	str	r2, [sp, #8]
 8003ebe:	9303      	str	r3, [sp, #12]
 8003ec0:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <CreateMessage+0x3f8>)
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	002a      	movs	r2, r5
 8003ec8:	0020      	movs	r0, r4
 8003eca:	f01b fb1b 	bl	801f504 <siprintf>
    index = strlen(message);
 8003ece:	4b5e      	ldr	r3, [pc, #376]	@ (8004048 <CreateMessage+0x3f0>)
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7fc f94b 	bl	800016c <strlen>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	19bb      	adds	r3, r7, r6
 8003eda:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003edc:	4a53      	ldr	r2, [pc, #332]	@ (800402c <CreateMessage+0x3d4>)
 8003ede:	4b5c      	ldr	r3, [pc, #368]	@ (8004050 <CreateMessage+0x3f8>)
 8003ee0:	0011      	movs	r1, r2
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff fe94 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003ee8:	19bb      	adds	r3, r7, r6
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	4b56      	ldr	r3, [pc, #344]	@ (8004048 <CreateMessage+0x3f0>)
 8003eee:	18d4      	adds	r4, r2, r3
 8003ef0:	4b58      	ldr	r3, [pc, #352]	@ (8004054 <CreateMessage+0x3fc>)
 8003ef2:	689d      	ldr	r5, [r3, #8]
 8003ef4:	4b64      	ldr	r3, [pc, #400]	@ (8004088 <CreateMessage+0x430>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1c18      	adds	r0, r3, #0
 8003efa:	f7ff fab3 	bl	8003464 <__aeabi_f2d>
 8003efe:	0002      	movs	r2, r0
 8003f00:	000b      	movs	r3, r1
 8003f02:	484e      	ldr	r0, [pc, #312]	@ (800403c <CreateMessage+0x3e4>)
 8003f04:	4961      	ldr	r1, [pc, #388]	@ (800408c <CreateMessage+0x434>)
 8003f06:	9202      	str	r2, [sp, #8]
 8003f08:	9303      	str	r3, [sp, #12]
 8003f0a:	4b51      	ldr	r3, [pc, #324]	@ (8004050 <CreateMessage+0x3f8>)
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	0003      	movs	r3, r0
 8003f10:	002a      	movs	r2, r5
 8003f12:	0020      	movs	r0, r4
 8003f14:	f01b faf6 	bl	801f504 <siprintf>
    index = strlen(message);
 8003f18:	4b4b      	ldr	r3, [pc, #300]	@ (8004048 <CreateMessage+0x3f0>)
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fc f926 	bl	800016c <strlen>
 8003f20:	0002      	movs	r2, r0
 8003f22:	19bb      	adds	r3, r7, r6
 8003f24:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003f26:	4a43      	ldr	r2, [pc, #268]	@ (8004034 <CreateMessage+0x3dc>)
 8003f28:	4b49      	ldr	r3, [pc, #292]	@ (8004050 <CreateMessage+0x3f8>)
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff fe6f 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003f32:	19bb      	adds	r3, r7, r6
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <CreateMessage+0x3f0>)
 8003f38:	18d4      	adds	r4, r2, r3
 8003f3a:	4b46      	ldr	r3, [pc, #280]	@ (8004054 <CreateMessage+0x3fc>)
 8003f3c:	689d      	ldr	r5, [r3, #8]
 8003f3e:	4b54      	ldr	r3, [pc, #336]	@ (8004090 <CreateMessage+0x438>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	1c18      	adds	r0, r3, #0
 8003f44:	f7ff fa8e 	bl	8003464 <__aeabi_f2d>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	000b      	movs	r3, r1
 8003f4c:	483b      	ldr	r0, [pc, #236]	@ (800403c <CreateMessage+0x3e4>)
 8003f4e:	4951      	ldr	r1, [pc, #324]	@ (8004094 <CreateMessage+0x43c>)
 8003f50:	9202      	str	r2, [sp, #8]
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	4b3e      	ldr	r3, [pc, #248]	@ (8004050 <CreateMessage+0x3f8>)
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	0003      	movs	r3, r0
 8003f5a:	002a      	movs	r2, r5
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f01b fad1 	bl	801f504 <siprintf>
    index = strlen(message);
 8003f62:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <CreateMessage+0x3f0>)
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc f901 	bl	800016c <strlen>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	19bb      	adds	r3, r7, r6
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	e025      	b.n	8003fbe <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <CreateMessage+0x3c4>)
 8003f74:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <CreateMessage+0x3f8>)
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fe49 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f7e:	260e      	movs	r6, #14
 8003f80:	19bb      	adds	r3, r7, r6
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	4b30      	ldr	r3, [pc, #192]	@ (8004048 <CreateMessage+0x3f0>)
 8003f86:	18d4      	adds	r4, r2, r3
 8003f88:	4b32      	ldr	r3, [pc, #200]	@ (8004054 <CreateMessage+0x3fc>)
 8003f8a:	689d      	ldr	r5, [r3, #8]
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004078 <CreateMessage+0x420>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	1c18      	adds	r0, r3, #0
 8003f92:	f7ff fa67 	bl	8003464 <__aeabi_f2d>
 8003f96:	0002      	movs	r2, r0
 8003f98:	000b      	movs	r3, r1
 8003f9a:	4828      	ldr	r0, [pc, #160]	@ (800403c <CreateMessage+0x3e4>)
 8003f9c:	493e      	ldr	r1, [pc, #248]	@ (8004098 <CreateMessage+0x440>)
 8003f9e:	9202      	str	r2, [sp, #8]
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <CreateMessage+0x3f8>)
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	002a      	movs	r2, r5
 8003faa:	0020      	movs	r0, r4
 8003fac:	f01b faaa 	bl	801f504 <siprintf>
    index = strlen(message);
 8003fb0:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <CreateMessage+0x3f0>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7fc f8da 	bl	800016c <strlen>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	19bb      	adds	r3, r7, r6
 8003fbc:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8003fbe:	240e      	movs	r4, #14
 8003fc0:	193b      	adds	r3, r7, r4
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	4a35      	ldr	r2, [pc, #212]	@ (800409c <CreateMessage+0x444>)
 8003fc6:	4936      	ldr	r1, [pc, #216]	@ (80040a0 <CreateMessage+0x448>)
 8003fc8:	2003      	movs	r0, #3
 8003fca:	f009 fd51 	bl	800da70 <CreateLine>
  index = sprintf(&message[index], "]");
 8003fce:	193b      	adds	r3, r7, r4
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004048 <CreateMessage+0x3f0>)
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	4a33      	ldr	r2, [pc, #204]	@ (80040a4 <CreateMessage+0x44c>)
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f01b fa92 	bl	801f504 <siprintf>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003fe6:	4b18      	ldr	r3, [pc, #96]	@ (8004048 <CreateMessage+0x3f0>)
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7fc f8bf 	bl	800016c <strlen>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	b29b      	uxth	r3, r3
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b005      	add	sp, #20
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	200009e4 	.word	0x200009e4
 8004000:	0808000c 	.word	0x0808000c
 8004004:	200009f0 	.word	0x200009f0
 8004008:	08080018 	.word	0x08080018
 800400c:	200009fc 	.word	0x200009fc
 8004010:	08080048 	.word	0x08080048
 8004014:	20000a08 	.word	0x20000a08
 8004018:	08080030 	.word	0x08080030
 800401c:	20000a14 	.word	0x20000a14
 8004020:	0808006c 	.word	0x0808006c
 8004024:	20000a20 	.word	0x20000a20
 8004028:	08080078 	.word	0x08080078
 800402c:	20000a2c 	.word	0x20000a2c
 8004030:	08080054 	.word	0x08080054
 8004034:	20000a38 	.word	0x20000a38
 8004038:	08080060 	.word	0x08080060
 800403c:	20000a44 	.word	0x20000a44
 8004040:	08080090 	.word	0x08080090
 8004044:	08024550 	.word	0x08024550
 8004048:	20000584 	.word	0x20000584
 800404c:	08022898 	.word	0x08022898
 8004050:	20000a64 	.word	0x20000a64
 8004054:	20000550 	.word	0x20000550
 8004058:	20000564 	.word	0x20000564
 800405c:	0802289c 	.word	0x0802289c
 8004060:	20000568 	.word	0x20000568
 8004064:	080228f0 	.word	0x080228f0
 8004068:	20000578 	.word	0x20000578
 800406c:	08022948 	.word	0x08022948
 8004070:	20000574 	.word	0x20000574
 8004074:	080229a4 	.word	0x080229a4
 8004078:	2000056c 	.word	0x2000056c
 800407c:	080229f8 	.word	0x080229f8
 8004080:	20000570 	.word	0x20000570
 8004084:	08022a58 	.word	0x08022a58
 8004088:	2000057c 	.word	0x2000057c
 800408c:	08022ab8 	.word	0x08022ab8
 8004090:	20000580 	.word	0x20000580
 8004094:	08022b14 	.word	0x08022b14
 8004098:	08022b6c 	.word	0x08022b6c
 800409c:	08022bc4 	.word	0x08022bc4
 80040a0:	080226f0 	.word	0x080226f0
 80040a4:	08022bdc 	.word	0x08022bdc

080040a8 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 80040ac:	2064      	movs	r0, #100	@ 0x64
 80040ae:	f00a f935 	bl	800e31c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <StartProg+0x60>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	2101      	movs	r1, #1
 80040b8:	0018      	movs	r0, r3
 80040ba:	f00b fba0 	bl	800f7fe <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80040be:	2064      	movs	r0, #100	@ 0x64
 80040c0:	f00a f92c 	bl	800e31c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80040c4:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <StartProg+0x60>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	2102      	movs	r1, #2
 80040ca:	0018      	movs	r0, r3
 80040cc:	f00b fb97 	bl	800f7fe <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80040d0:	23fa      	movs	r3, #250	@ 0xfa
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	0018      	movs	r0, r3
 80040d6:	f00a f921 	bl	800e31c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80040da:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <StartProg+0x60>)
 80040dc:	2201      	movs	r2, #1
 80040de:	2101      	movs	r1, #1
 80040e0:	0018      	movs	r0, r3
 80040e2:	f00b fb8c 	bl	800f7fe <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80040e6:	23fa      	movs	r3, #250	@ 0xfa
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	0018      	movs	r0, r3
 80040ec:	f00a f916 	bl	800e31c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80040f0:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <StartProg+0x60>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	2102      	movs	r1, #2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f00b fb81 	bl	800f7fe <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80040fc:	2028      	movs	r0, #40	@ 0x28
 80040fe:	f00a f90d 	bl	800e31c <HAL_Delay>
}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	50001c00 	.word	0x50001c00

0800410c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410e:	b0d9      	sub	sp, #356	@ 0x164
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	0008      	movs	r0, r1
 8004116:	0011      	movs	r1, r2
 8004118:	4ba1      	ldr	r3, [pc, #644]	@ (80043a0 <ParseBuffer+0x294>)
 800411a:	24b0      	movs	r4, #176	@ 0xb0
 800411c:	0064      	lsls	r4, r4, #1
 800411e:	191b      	adds	r3, r3, r4
 8004120:	19db      	adds	r3, r3, r7
 8004122:	1c02      	adds	r2, r0, #0
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	4b9f      	ldr	r3, [pc, #636]	@ (80043a4 <ParseBuffer+0x298>)
 8004128:	191b      	adds	r3, r3, r4
 800412a:	19db      	adds	r3, r3, r7
 800412c:	1c0a      	adds	r2, r1, #0
 800412e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	005a      	lsls	r2, r3, #1
 8004134:	2348      	movs	r3, #72	@ 0x48
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	2100      	movs	r1, #0
 800413a:	0018      	movs	r0, r3
 800413c:	f01b fb26 	bl	801f78c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004140:	2360      	movs	r3, #96	@ 0x60
 8004142:	33ff      	adds	r3, #255	@ 0xff
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2203      	movs	r2, #3
 8004148:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800414a:	23ae      	movs	r3, #174	@ 0xae
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2200      	movs	r2, #0
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	e013      	b.n	800417e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004156:	20ae      	movs	r0, #174	@ 0xae
 8004158:	0040      	lsls	r0, r0, #1
 800415a:	183b      	adds	r3, r7, r0
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	18d2      	adds	r2, r2, r3
 8004162:	183b      	adds	r3, r7, r0
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	7811      	ldrb	r1, [r2, #0]
 8004168:	4a8f      	ldr	r2, [pc, #572]	@ (80043a8 <ParseBuffer+0x29c>)
 800416a:	24b0      	movs	r4, #176	@ 0xb0
 800416c:	0064      	lsls	r4, r4, #1
 800416e:	1912      	adds	r2, r2, r4
 8004170:	19d2      	adds	r2, r2, r7
 8004172:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8004174:	183b      	adds	r3, r7, r0
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	183b      	adds	r3, r7, r0
 800417a:	3201      	adds	r2, #1
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	23ae      	movs	r3, #174	@ 0xae
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	18fa      	adds	r2, r7, r3
 8004184:	4b86      	ldr	r3, [pc, #536]	@ (80043a0 <ParseBuffer+0x294>)
 8004186:	24b0      	movs	r4, #176	@ 0xb0
 8004188:	0064      	lsls	r4, r4, #1
 800418a:	191b      	adds	r3, r3, r4
 800418c:	19db      	adds	r3, r3, r7
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d3df      	bcc.n	8004156 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8004196:	4b82      	ldr	r3, [pc, #520]	@ (80043a0 <ParseBuffer+0x294>)
 8004198:	191b      	adds	r3, r3, r4
 800419a:	19db      	adds	r3, r3, r7
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	4a82      	ldr	r2, [pc, #520]	@ (80043a8 <ParseBuffer+0x29c>)
 80041a0:	1912      	adds	r2, r2, r4
 80041a2:	19d2      	adds	r2, r2, r7
 80041a4:	2100      	movs	r1, #0
 80041a6:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80041a8:	2648      	movs	r6, #72	@ 0x48
 80041aa:	19bb      	adds	r3, r7, r6
 80041ac:	4a7f      	ldr	r2, [pc, #508]	@ (80043ac <ParseBuffer+0x2a0>)
 80041ae:	4980      	ldr	r1, [pc, #512]	@ (80043b0 <ParseBuffer+0x2a4>)
 80041b0:	2003      	movs	r0, #3
 80041b2:	f009 fc5d 	bl	800da70 <CreateLine>
#endif
  char * ParsePoint = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	22ac      	movs	r2, #172	@ 0xac
 80041ba:	0052      	lsls	r2, r2, #1
 80041bc:	18b9      	adds	r1, r7, r2
 80041be:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80041c0:	4b7c      	ldr	r3, [pc, #496]	@ (80043b4 <ParseBuffer+0x2a8>)
 80041c2:	0025      	movs	r5, r4
 80041c4:	195b      	adds	r3, r3, r5
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	4a7b      	ldr	r2, [pc, #492]	@ (80043b8 <ParseBuffer+0x2ac>)
 80041ca:	8811      	ldrh	r1, [r2, #0]
 80041cc:	8019      	strh	r1, [r3, #0]
 80041ce:	7892      	ldrb	r2, [r2, #2]
 80041d0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80041d2:	4b7a      	ldr	r3, [pc, #488]	@ (80043bc <ParseBuffer+0x2b0>)
 80041d4:	195b      	adds	r3, r3, r5
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	4a79      	ldr	r2, [pc, #484]	@ (80043c0 <ParseBuffer+0x2b4>)
 80041da:	6811      	ldr	r1, [r2, #0]
 80041dc:	6019      	str	r1, [r3, #0]
 80041de:	8892      	ldrh	r2, [r2, #4]
 80041e0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80041e2:	4b78      	ldr	r3, [pc, #480]	@ (80043c4 <ParseBuffer+0x2b8>)
 80041e4:	195b      	adds	r3, r3, r5
 80041e6:	19db      	adds	r3, r3, r7
 80041e8:	4a77      	ldr	r2, [pc, #476]	@ (80043c8 <ParseBuffer+0x2bc>)
 80041ea:	6811      	ldr	r1, [r2, #0]
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	7912      	ldrb	r2, [r2, #4]
 80041f0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80041f2:	4b76      	ldr	r3, [pc, #472]	@ (80043cc <ParseBuffer+0x2c0>)
 80041f4:	195b      	adds	r3, r3, r5
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	4a75      	ldr	r2, [pc, #468]	@ (80043d0 <ParseBuffer+0x2c4>)
 80041fa:	6811      	ldr	r1, [r2, #0]
 80041fc:	6019      	str	r1, [r3, #0]
 80041fe:	8892      	ldrh	r2, [r2, #4]
 8004200:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004202:	4b74      	ldr	r3, [pc, #464]	@ (80043d4 <ParseBuffer+0x2c8>)
 8004204:	195b      	adds	r3, r3, r5
 8004206:	19db      	adds	r3, r3, r7
 8004208:	223e      	movs	r2, #62	@ 0x3e
 800420a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800420c:	4b72      	ldr	r3, [pc, #456]	@ (80043d8 <ParseBuffer+0x2cc>)
 800420e:	195b      	adds	r3, r3, r5
 8004210:	19db      	adds	r3, r3, r7
 8004212:	4a72      	ldr	r2, [pc, #456]	@ (80043dc <ParseBuffer+0x2d0>)
 8004214:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004216:	c313      	stmia	r3!, {r0, r1, r4}
 8004218:	8811      	ldrh	r1, [r2, #0]
 800421a:	8019      	strh	r1, [r3, #0]
 800421c:	7892      	ldrb	r2, [r2, #2]
 800421e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004220:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <ParseBuffer+0x2d4>)
 8004222:	195b      	adds	r3, r3, r5
 8004224:	19db      	adds	r3, r3, r7
 8004226:	4a6f      	ldr	r2, [pc, #444]	@ (80043e4 <ParseBuffer+0x2d8>)
 8004228:	ca13      	ldmia	r2!, {r0, r1, r4}
 800422a:	c313      	stmia	r3!, {r0, r1, r4}
 800422c:	8812      	ldrh	r2, [r2, #0]
 800422e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004230:	4b5c      	ldr	r3, [pc, #368]	@ (80043a4 <ParseBuffer+0x298>)
 8004232:	195b      	adds	r3, r3, r5
 8004234:	19db      	adds	r3, r3, r7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 800423c:	2344      	movs	r3, #68	@ 0x44
 800423e:	18fa      	adds	r2, r7, r3
 8004240:	19bb      	adds	r3, r7, r6
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f01b fadc 	bl	801f802 <strstr>
 800424a:	0003      	movs	r3, r0
 800424c:	22ac      	movs	r2, #172	@ 0xac
 800424e:	0052      	lsls	r2, r2, #1
 8004250:	18ba      	adds	r2, r7, r2
 8004252:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004254:	4b53      	ldr	r3, [pc, #332]	@ (80043a4 <ParseBuffer+0x298>)
 8004256:	22b0      	movs	r2, #176	@ 0xb0
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	189b      	adds	r3, r3, r2
 800425c:	19db      	adds	r3, r3, r7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10c      	bne.n	800427e <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004264:	232c      	movs	r3, #44	@ 0x2c
 8004266:	18fa      	adds	r2, r7, r3
 8004268:	2348      	movs	r3, #72	@ 0x48
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	0011      	movs	r1, r2
 800426e:	0018      	movs	r0, r3
 8004270:	f01b fac7 	bl	801f802 <strstr>
 8004274:	0003      	movs	r3, r0
 8004276:	22ac      	movs	r2, #172	@ 0xac
 8004278:	0052      	lsls	r2, r2, #1
 800427a:	18ba      	adds	r2, r7, r2
 800427c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800427e:	4b49      	ldr	r3, [pc, #292]	@ (80043a4 <ParseBuffer+0x298>)
 8004280:	22b0      	movs	r2, #176	@ 0xb0
 8004282:	0052      	lsls	r2, r2, #1
 8004284:	189b      	adds	r3, r3, r2
 8004286:	19db      	adds	r3, r3, r7
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d10c      	bne.n	80042a8 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800428e:	2328      	movs	r3, #40	@ 0x28
 8004290:	18fa      	adds	r2, r7, r3
 8004292:	2348      	movs	r3, #72	@ 0x48
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f01b fab2 	bl	801f802 <strstr>
 800429e:	0003      	movs	r3, r0
 80042a0:	22ac      	movs	r2, #172	@ 0xac
 80042a2:	0052      	lsls	r2, r2, #1
 80042a4:	18ba      	adds	r2, r7, r2
 80042a6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80042a8:	4b3e      	ldr	r3, [pc, #248]	@ (80043a4 <ParseBuffer+0x298>)
 80042aa:	22b0      	movs	r2, #176	@ 0xb0
 80042ac:	0052      	lsls	r2, r2, #1
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	19db      	adds	r3, r3, r7
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d10c      	bne.n	80042d2 <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80042b8:	2308      	movs	r3, #8
 80042ba:	18fa      	adds	r2, r7, r3
 80042bc:	2348      	movs	r3, #72	@ 0x48
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f01b fa9d 	bl	801f802 <strstr>
 80042c8:	0003      	movs	r3, r0
 80042ca:	22ac      	movs	r2, #172	@ 0xac
 80042cc:	0052      	lsls	r2, r2, #1
 80042ce:	18ba      	adds	r2, r7, r2
 80042d0:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80042d2:	233c      	movs	r3, #60	@ 0x3c
 80042d4:	18fa      	adds	r2, r7, r3
 80042d6:	2448      	movs	r4, #72	@ 0x48
 80042d8:	193b      	adds	r3, r7, r4
 80042da:	0011      	movs	r1, r2
 80042dc:	0018      	movs	r0, r3
 80042de:	f01b fa90 	bl	801f802 <strstr>
 80042e2:	0003      	movs	r3, r0
 80042e4:	22aa      	movs	r2, #170	@ 0xaa
 80042e6:	0052      	lsls	r2, r2, #1
 80042e8:	18ba      	adds	r2, r7, r2
 80042ea:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80042ec:	2318      	movs	r3, #24
 80042ee:	18fa      	adds	r2, r7, r3
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	0011      	movs	r1, r2
 80042f4:	0018      	movs	r0, r3
 80042f6:	f01b fa84 	bl	801f802 <strstr>
 80042fa:	0003      	movs	r3, r0
 80042fc:	22a8      	movs	r2, #168	@ 0xa8
 80042fe:	0052      	lsls	r2, r2, #1
 8004300:	18ba      	adds	r2, r7, r2
 8004302:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004304:	4a38      	ldr	r2, [pc, #224]	@ (80043e8 <ParseBuffer+0x2dc>)
 8004306:	193b      	adds	r3, r7, r4
 8004308:	0011      	movs	r1, r2
 800430a:	0018      	movs	r0, r3
 800430c:	f01b fa79 	bl	801f802 <strstr>
 8004310:	0003      	movs	r3, r0
 8004312:	22a6      	movs	r2, #166	@ 0xa6
 8004314:	0052      	lsls	r2, r2, #1
 8004316:	18ba      	adds	r2, r7, r2
 8004318:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800431a:	2334      	movs	r3, #52	@ 0x34
 800431c:	18fa      	adds	r2, r7, r3
 800431e:	193b      	adds	r3, r7, r4
 8004320:	0011      	movs	r1, r2
 8004322:	0018      	movs	r0, r3
 8004324:	f01b fa6d 	bl	801f802 <strstr>
 8004328:	0003      	movs	r3, r0
 800432a:	22a4      	movs	r2, #164	@ 0xa4
 800432c:	0052      	lsls	r2, r2, #1
 800432e:	18ba      	adds	r2, r7, r2
 8004330:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004332:	4b1b      	ldr	r3, [pc, #108]	@ (80043a0 <ParseBuffer+0x294>)
 8004334:	21b0      	movs	r1, #176	@ 0xb0
 8004336:	0049      	lsls	r1, r1, #1
 8004338:	185b      	adds	r3, r3, r1
 800433a:	19db      	adds	r3, r3, r7
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d800      	bhi.n	8004344 <ParseBuffer+0x238>
 8004342:	e0c0      	b.n	80044c6 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004344:	22ac      	movs	r2, #172	@ 0xac
 8004346:	0052      	lsls	r2, r2, #1
 8004348:	18bb      	adds	r3, r7, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d053      	beq.n	80043f8 <ParseBuffer+0x2ec>
 8004350:	18bb      	adds	r3, r7, r2
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b4f      	cmp	r3, #79	@ 0x4f
 8004358:	d14e      	bne.n	80043f8 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800435a:	2360      	movs	r3, #96	@ 0x60
 800435c:	33ff      	adds	r3, #255	@ 0xff
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004364:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <ParseBuffer+0x2e0>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b12      	cmp	r3, #18
 800436a:	d145      	bne.n	80043f8 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <ParseBuffer+0x294>)
 800436e:	185b      	adds	r3, r3, r1
 8004370:	19db      	adds	r3, r3, r7
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	2b2b      	cmp	r3, #43	@ 0x2b
 8004376:	d10b      	bne.n	8004390 <ParseBuffer+0x284>
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <ParseBuffer+0x29c>)
 800437a:	185b      	adds	r3, r3, r1
 800437c:	19db      	adds	r3, r3, r7
 800437e:	2221      	movs	r2, #33	@ 0x21
 8004380:	5c9b      	ldrb	r3, [r3, r2]
 8004382:	2b32      	cmp	r3, #50	@ 0x32
 8004384:	d104      	bne.n	8004390 <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004386:	193b      	adds	r3, r7, r4
 8004388:	0018      	movs	r0, r3
 800438a:	f002 f8dd 	bl	8006548 <ParseTime>
 800438e:	e033      	b.n	80043f8 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 8004390:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <ParseBuffer+0x2e4>)
 8004392:	4b18      	ldr	r3, [pc, #96]	@ (80043f4 <ParseBuffer+0x2e8>)
 8004394:	0019      	movs	r1, r3
 8004396:	2001      	movs	r0, #1
 8004398:	f009 fb6a 	bl	800da70 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800439c:	2306      	movs	r3, #6
 800439e:	e096      	b.n	80044ce <ParseBuffer+0x3c2>
 80043a0:	fffffea2 	.word	0xfffffea2
 80043a4:	fffffea1 	.word	0xfffffea1
 80043a8:	fffffee8 	.word	0xfffffee8
 80043ac:	08022be0 	.word	0x08022be0
 80043b0:	080226f0 	.word	0x080226f0
 80043b4:	fffffee4 	.word	0xfffffee4
 80043b8:	08022c0c 	.word	0x08022c0c
 80043bc:	fffffedc 	.word	0xfffffedc
 80043c0:	08022c10 	.word	0x08022c10
 80043c4:	fffffed4 	.word	0xfffffed4
 80043c8:	08022c18 	.word	0x08022c18
 80043cc:	fffffecc 	.word	0xfffffecc
 80043d0:	08022c20 	.word	0x08022c20
 80043d4:	fffffec8 	.word	0xfffffec8
 80043d8:	fffffeb8 	.word	0xfffffeb8
 80043dc:	08022c28 	.word	0x08022c28
 80043e0:	fffffea8 	.word	0xfffffea8
 80043e4:	08022c38 	.word	0x08022c38
 80043e8:	08024530 	.word	0x08024530
 80043ec:	200009a2 	.word	0x200009a2
 80043f0:	08022bf8 	.word	0x08022bf8
 80043f4:	08022714 	.word	0x08022714
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80043f8:	22ac      	movs	r2, #172	@ 0xac
 80043fa:	0052      	lsls	r2, r2, #1
 80043fc:	18bb      	adds	r3, r7, r2
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <ParseBuffer+0x30c>
 8004404:	18bb      	adds	r3, r7, r2
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b72      	cmp	r3, #114	@ 0x72
 800440c:	d104      	bne.n	8004418 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 800440e:	2360      	movs	r3, #96	@ 0x60
 8004410:	33ff      	adds	r3, #255	@ 0xff
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	2202      	movs	r2, #2
 8004416:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004418:	22ac      	movs	r2, #172	@ 0xac
 800441a:	0052      	lsls	r2, r2, #1
 800441c:	18bb      	adds	r3, r7, r2
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <ParseBuffer+0x32c>
 8004424:	18bb      	adds	r3, r7, r2
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b3e      	cmp	r3, #62	@ 0x3e
 800442c:	d104      	bne.n	8004438 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800442e:	2360      	movs	r3, #96	@ 0x60
 8004430:	33ff      	adds	r3, #255	@ 0xff
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	2205      	movs	r2, #5
 8004436:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004438:	22ac      	movs	r2, #172	@ 0xac
 800443a:	0052      	lsls	r2, r2, #1
 800443c:	18bb      	adds	r3, r7, r2
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d009      	beq.n	8004458 <ParseBuffer+0x34c>
 8004444:	18bb      	adds	r3, r7, r2
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b2b      	cmp	r3, #43	@ 0x2b
 800444c:	d104      	bne.n	8004458 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800444e:	2360      	movs	r3, #96	@ 0x60
 8004450:	33ff      	adds	r3, #255	@ 0xff
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	220b      	movs	r2, #11
 8004456:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004458:	22aa      	movs	r2, #170	@ 0xaa
 800445a:	0052      	lsls	r2, r2, #1
 800445c:	18bb      	adds	r3, r7, r2
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <ParseBuffer+0x362>
 8004464:	18bb      	adds	r3, r7, r2
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b45      	cmp	r3, #69	@ 0x45
 800446c:	d00a      	beq.n	8004484 <ParseBuffer+0x378>
 800446e:	22a4      	movs	r2, #164	@ 0xa4
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	18bb      	adds	r3, r7, r2
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <ParseBuffer+0x382>
 800447a:	18bb      	adds	r3, r7, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b46      	cmp	r3, #70	@ 0x46
 8004482:	d104      	bne.n	800448e <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 8004484:	2360      	movs	r3, #96	@ 0x60
 8004486:	33ff      	adds	r3, #255	@ 0xff
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800448e:	22a8      	movs	r2, #168	@ 0xa8
 8004490:	0052      	lsls	r2, r2, #1
 8004492:	18bb      	adds	r3, r7, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <ParseBuffer+0x39e>
 800449a:	18bb      	adds	r3, r7, r2
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b57      	cmp	r3, #87	@ 0x57
 80044a2:	d102      	bne.n	80044aa <ParseBuffer+0x39e>
      ConnectionMade = true;
 80044a4:	4b0c      	ldr	r3, [pc, #48]	@ (80044d8 <ParseBuffer+0x3cc>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80044aa:	22a6      	movs	r2, #166	@ 0xa6
 80044ac:	0052      	lsls	r2, r2, #1
 80044ae:	18bb      	adds	r3, r7, r2
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <ParseBuffer+0x3ba>
 80044b6:	18bb      	adds	r3, r7, r2
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b32      	cmp	r3, #50	@ 0x32
 80044be:	d102      	bne.n	80044c6 <ParseBuffer+0x3ba>
      beurs = true;
 80044c0:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <ParseBuffer+0x3d0>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80044c6:	2360      	movs	r3, #96	@ 0x60
 80044c8:	33ff      	adds	r3, #255	@ 0xff
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	781b      	ldrb	r3, [r3, #0]

}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b059      	add	sp, #356	@ 0x164
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	2000054c 	.word	0x2000054c
 80044dc:	2000054e 	.word	0x2000054e

080044e0 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80044e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <PollAwake+0x34>)
 80044e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7fb fe3d 	bl	800016c <strlen>
 80044f2:	0003      	movs	r3, r0
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0011      	movs	r1, r2
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7ff fa9c 	bl	8003a38 <ESP_Send>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d001      	beq.n	8004508 <PollAwake+0x28>
    return true;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <PollAwake+0x2a>
  }
  else{
    return false;
 8004508:	2300      	movs	r3, #0
  }
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b002      	add	sp, #8
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	08022c48 	.word	0x08022c48

08004518 <RFPower>:
bool RFPower(){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800451e:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <RFPower+0x34>)
 8004520:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f7fb fe21 	bl	800016c <strlen>
 800452a:	0003      	movs	r3, r0
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff fa80 	bl	8003a38 <ESP_Send>
 8004538:	1e03      	subs	r3, r0, #0
 800453a:	d001      	beq.n	8004540 <RFPower+0x28>
    return true;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <RFPower+0x2a>
  }
  else{
    return false;
 8004540:	2300      	movs	r3, #0
  }
}
 8004542:	0018      	movs	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	b002      	add	sp, #8
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	08022c50 	.word	0x08022c50

08004550 <CheckRFPower>:
bool CheckRFPower(){
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004556:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <CheckRFPower+0x34>)
 8004558:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f7fb fe05 	bl	800016c <strlen>
 8004562:	0003      	movs	r3, r0
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0011      	movs	r1, r2
 800456a:	0018      	movs	r0, r3
 800456c:	f7ff fa64 	bl	8003a38 <ESP_Send>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d001      	beq.n	8004578 <CheckRFPower+0x28>
    return true;
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004578:	2300      	movs	r3, #0
  }
}
 800457a:	0018      	movs	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	b002      	add	sp, #8
 8004580:	bd80      	pop	{r7, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	08022c60 	.word	0x08022c60

08004588 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800458e:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <ATRestore+0x34>)
 8004590:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f7fb fde9 	bl	800016c <strlen>
 800459a:	0003      	movs	r3, r0
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0011      	movs	r1, r2
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7ff fa48 	bl	8003a38 <ESP_Send>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d001      	beq.n	80045b0 <ATRestore+0x28>
    return true;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <ATRestore+0x2a>
  }
  else{
    return false;
 80045b0:	2300      	movs	r3, #0
  }
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b002      	add	sp, #8
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	08022c70 	.word	0x08022c70

080045c0 <CWINIT>:
bool CWINIT(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <CWINIT+0x34>)
 80045c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7fb fdcd 	bl	800016c <strlen>
 80045d2:	0003      	movs	r3, r0
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	0011      	movs	r1, r2
 80045da:	0018      	movs	r0, r3
 80045dc:	f7ff fa2c 	bl	8003a38 <ESP_Send>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d001      	beq.n	80045e8 <CWINIT+0x28>
    return true;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <CWINIT+0x2a>
  }
  else{
    return false;
 80045e8:	2300      	movs	r3, #0
  }
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b002      	add	sp, #8
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	08022c80 	.word	0x08022c80

080045f8 <CWMODE1>:
bool CWMODE1(){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80045fe:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <CWMODE1+0x34>)
 8004600:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f7fb fdb1 	bl	800016c <strlen>
 800460a:	0003      	movs	r3, r0
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f7ff fa10 	bl	8003a38 <ESP_Send>
 8004618:	1e03      	subs	r3, r0, #0
 800461a:	d001      	beq.n	8004620 <CWMODE1+0x28>
    return true;
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004620:	2300      	movs	r3, #0
  }
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	08022c90 	.word	0x08022c90

08004630 <CWMODE2>:
bool CWMODE2(){
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004636:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <CWMODE2+0x34>)
 8004638:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	0018      	movs	r0, r3
 800463e:	f7fb fd95 	bl	800016c <strlen>
 8004642:	0003      	movs	r3, r0
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0011      	movs	r1, r2
 800464a:	0018      	movs	r0, r3
 800464c:	f7ff f9f4 	bl	8003a38 <ESP_Send>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <CWMODE2+0x28>
    return true;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <CWMODE2+0x2a>
  }
  else{
    return false;
 8004658:	2300      	movs	r3, #0
  }
}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b002      	add	sp, #8
 8004660:	bd80      	pop	{r7, pc}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	08022ca0 	.word	0x08022ca0

08004668 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <CWAUTOCONN+0x34>)
 8004670:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f7fb fd79 	bl	800016c <strlen>
 800467a:	0003      	movs	r3, r0
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0011      	movs	r1, r2
 8004682:	0018      	movs	r0, r3
 8004684:	f7ff f9d8 	bl	8003a38 <ESP_Send>
 8004688:	1e03      	subs	r3, r0, #0
 800468a:	d001      	beq.n	8004690 <CWAUTOCONN+0x28>
    return true;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004690:	2300      	movs	r3, #0
  }
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b002      	add	sp, #8
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	08022cb0 	.word	0x08022cb0

080046a0 <CWJAP>:
bool CWJAP(){
 80046a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a2:	46c6      	mov	lr, r8
 80046a4:	b500      	push	{lr}
 80046a6:	b0a2      	sub	sp, #136	@ 0x88
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	466b      	mov	r3, sp
 80046ac:	4698      	mov	r8, r3
  beursTest = true;
 80046ae:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <CWJAP+0xf4>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80046b4:	2618      	movs	r6, #24
 80046b6:	19bb      	adds	r3, r7, r6
 80046b8:	2264      	movs	r2, #100	@ 0x64
 80046ba:	2100      	movs	r1, #0
 80046bc:	0018      	movs	r0, r3
 80046be:	f01b f865 	bl	801f78c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80046c2:	4b35      	ldr	r3, [pc, #212]	@ (8004798 <CWJAP+0xf8>)
 80046c4:	4a35      	ldr	r2, [pc, #212]	@ (800479c <CWJAP+0xfc>)
 80046c6:	4936      	ldr	r1, [pc, #216]	@ (80047a0 <CWJAP+0x100>)
 80046c8:	19b8      	adds	r0, r7, r6
 80046ca:	f01a ff1b 	bl	801f504 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80046ce:	19bb      	adds	r3, r7, r6
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fb fd4b 	bl	800016c <strlen>
 80046d6:	0002      	movs	r2, r0
 80046d8:	216f      	movs	r1, #111	@ 0x6f
 80046da:	0030      	movs	r0, r6
 80046dc:	180b      	adds	r3, r1, r0
 80046de:	19db      	adds	r3, r3, r7
 80046e0:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80046e2:	180b      	adds	r3, r1, r0
 80046e4:	19db      	adds	r3, r3, r7
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	1e5a      	subs	r2, r3, #1
 80046ec:	2180      	movs	r1, #128	@ 0x80
 80046ee:	1879      	adds	r1, r7, r1
 80046f0:	600a      	str	r2, [r1, #0]
 80046f2:	001a      	movs	r2, r3
 80046f4:	60ba      	str	r2, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	60fa      	str	r2, [r7, #12]
 80046fa:	68b8      	ldr	r0, [r7, #8]
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	0002      	movs	r2, r0
 8004700:	0f52      	lsrs	r2, r2, #29
 8004702:	000e      	movs	r6, r1
 8004704:	00f6      	lsls	r6, r6, #3
 8004706:	617e      	str	r6, [r7, #20]
 8004708:	697e      	ldr	r6, [r7, #20]
 800470a:	4316      	orrs	r6, r2
 800470c:	617e      	str	r6, [r7, #20]
 800470e:	0002      	movs	r2, r0
 8004710:	00d2      	lsls	r2, r2, #3
 8004712:	613a      	str	r2, [r7, #16]
 8004714:	001a      	movs	r2, r3
 8004716:	603a      	str	r2, [r7, #0]
 8004718:	2200      	movs	r2, #0
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	0002      	movs	r2, r0
 8004722:	0f52      	lsrs	r2, r2, #29
 8004724:	000e      	movs	r6, r1
 8004726:	00f5      	lsls	r5, r6, #3
 8004728:	4315      	orrs	r5, r2
 800472a:	0002      	movs	r2, r0
 800472c:	00d4      	lsls	r4, r2, #3
 800472e:	3307      	adds	r3, #7
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	466a      	mov	r2, sp
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	469d      	mov	sp, r3
 800473a:	466b      	mov	r3, sp
 800473c:	3300      	adds	r3, #0
 800473e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004740:	246f      	movs	r4, #111	@ 0x6f
 8004742:	2518      	movs	r5, #24
 8004744:	1963      	adds	r3, r4, r5
 8004746:	19db      	adds	r3, r3, r7
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	001a      	movs	r2, r3
 800474e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004750:	2100      	movs	r1, #0
 8004752:	0018      	movs	r0, r3
 8004754:	f01b f81a 	bl	801f78c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004758:	1963      	adds	r3, r4, r5
 800475a:	19db      	adds	r3, r3, r7
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	1979      	adds	r1, r7, r5
 8004760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004762:	0018      	movs	r0, r3
 8004764:	f01b f839 	bl	801f7da <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004768:	1963      	adds	r3, r4, r5
 800476a:	19db      	adds	r3, r3, r7
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b29a      	uxth	r2, r3
 8004770:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff f95f 	bl	8003a38 <ESP_Send>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d001      	beq.n	8004782 <CWJAP+0xe2>
    return true;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <CWJAP+0xe4>
  }
  else{
    return false;
 8004782:	2300      	movs	r3, #0
 8004784:	46c5      	mov	sp, r8
  }
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b022      	add	sp, #136	@ 0x88
 800478c:	bc80      	pop	{r7}
 800478e:	46b8      	mov	r8, r7
 8004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	2000054d 	.word	0x2000054d
 8004798:	0802453c 	.word	0x0802453c
 800479c:	08024530 	.word	0x08024530
 80047a0:	08022cc4 	.word	0x08022cc4

080047a4 <CWMODE3>:
bool CWMODE3(){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <CWMODE3+0x34>)
 80047ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fb fcdb 	bl	800016c <strlen>
 80047b6:	0003      	movs	r3, r0
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0011      	movs	r1, r2
 80047be:	0018      	movs	r0, r3
 80047c0:	f7ff f93a 	bl	8003a38 <ESP_Send>
 80047c4:	1e03      	subs	r3, r0, #0
 80047c6:	d001      	beq.n	80047cc <CWMODE3+0x28>
    return true;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <CWMODE3+0x2a>
  }
  else{
    return false;
 80047cc:	2300      	movs	r3, #0
  }
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	08022cdc 	.word	0x08022cdc

080047dc <CWSTATE>:
bool CWSTATE(){
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <CWSTATE+0x34>)
 80047e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7fb fcbf 	bl	800016c <strlen>
 80047ee:	0003      	movs	r3, r0
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0011      	movs	r1, r2
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7ff f91e 	bl	8003a38 <ESP_Send>
 80047fc:	1e03      	subs	r3, r0, #0
 80047fe:	d001      	beq.n	8004804 <CWSTATE+0x28>
    return true;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004804:	2300      	movs	r3, #0
  }
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	08022cec 	.word	0x08022cec

08004814 <CWSAP>:
bool CWSAP(){
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <CWSAP+0x34>)
 800481c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f7fb fca3 	bl	800016c <strlen>
 8004826:	0003      	movs	r3, r0
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0011      	movs	r1, r2
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff f902 	bl	8003a38 <ESP_Send>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <CWSAP+0x28>
    return true;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <CWSAP+0x2a>
  }
  else{
    return false;
 800483c:	2300      	movs	r3, #0
  }
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	08022cfc 	.word	0x08022cfc

0800484c <CIPMUX>:
bool CIPMUX(){
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <CIPMUX+0x34>)
 8004854:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0003      	movs	r3, r0
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0011      	movs	r1, r2
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff f8e6 	bl	8003a38 <ESP_Send>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <CIPMUX+0x28>
    return true;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004874:	2300      	movs	r3, #0
  }
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	08022d20 	.word	0x08022d20

08004884 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <WEBSERVER+0x34>)
 800488c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fb fc6b 	bl	800016c <strlen>
 8004896:	0003      	movs	r3, r0
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0011      	movs	r1, r2
 800489e:	0018      	movs	r0, r3
 80048a0:	f7ff f8ca 	bl	8003a38 <ESP_Send>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d001      	beq.n	80048ac <WEBSERVER+0x28>
    return true;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <WEBSERVER+0x2a>
  }
  else{
    return false;
 80048ac:	2300      	movs	r3, #0
  }
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	08022d30 	.word	0x08022d30

080048bc <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b0c5      	sub	sp, #276	@ 0x114
 80048c0:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	005a      	lsls	r2, r3, #1
 80048c6:	1d3b      	adds	r3, r7, #4
 80048c8:	2100      	movs	r1, #0
 80048ca:	0018      	movs	r0, r3
 80048cc:	f01a ff5e 	bl	801f78c <memset>
  uint16_t length = CreateMessage(beurs);
 80048d0:	4b22      	ldr	r3, [pc, #136]	@ (800495c <HTTPCPOST+0xa0>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	1dfc      	adds	r4, r7, #7
 80048d6:	34ff      	adds	r4, #255	@ 0xff
 80048d8:	0018      	movs	r0, r3
 80048da:	f7ff f9bd 	bl	8003c58 <CreateMessage>
 80048de:	0003      	movs	r3, r0
 80048e0:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80048e2:	4b1e      	ldr	r3, [pc, #120]	@ (800495c <HTTPCPOST+0xa0>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80048ea:	1dfb      	adds	r3, r7, #7
 80048ec:	33ff      	adds	r3, #255	@ 0xff
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004960 <HTTPCPOST+0xa4>)
 80048f2:	491c      	ldr	r1, [pc, #112]	@ (8004964 <HTTPCPOST+0xa8>)
 80048f4:	1d38      	adds	r0, r7, #4
 80048f6:	f01a fe05 	bl	801f504 <siprintf>
 80048fa:	e016      	b.n	800492a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80048fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <HTTPCPOST+0xac>)
 80048fe:	481b      	ldr	r0, [pc, #108]	@ (800496c <HTTPCPOST+0xb0>)
 8004900:	220c      	movs	r2, #12
 8004902:	0019      	movs	r1, r3
 8004904:	f7fe fef8 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004908:	4a17      	ldr	r2, [pc, #92]	@ (8004968 <HTTPCPOST+0xac>)
 800490a:	4b19      	ldr	r3, [pc, #100]	@ (8004970 <HTTPCPOST+0xb4>)
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f7ff f97e 	bl	8003c10 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004914:	1dfb      	adds	r3, r7, #7
 8004916:	33ff      	adds	r3, #255	@ 0xff
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	4c15      	ldr	r4, [pc, #84]	@ (8004970 <HTTPCPOST+0xb4>)
 800491c:	4a15      	ldr	r2, [pc, #84]	@ (8004974 <HTTPCPOST+0xb8>)
 800491e:	4916      	ldr	r1, [pc, #88]	@ (8004978 <HTTPCPOST+0xbc>)
 8004920:	1d38      	adds	r0, r7, #4
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	0023      	movs	r3, r4
 8004926:	f01a fded 	bl	801f504 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	0018      	movs	r0, r3
 800492e:	f7fb fc1d 	bl	800016c <strlen>
 8004932:	0002      	movs	r2, r0
 8004934:	1d7b      	adds	r3, r7, #5
 8004936:	33ff      	adds	r3, #255	@ 0xff
 8004938:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800493a:	1d7b      	adds	r3, r7, #5
 800493c:	33ff      	adds	r3, #255	@ 0xff
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	0011      	movs	r1, r2
 8004944:	0018      	movs	r0, r3
 8004946:	f7ff f877 	bl	8003a38 <ESP_Send>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d001      	beq.n	8004952 <HTTPCPOST+0x96>
    return true;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004952:	2300      	movs	r3, #0
  }
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b043      	add	sp, #268	@ 0x10c
 800495a:	bd90      	pop	{r4, r7, pc}
 800495c:	2000054e 	.word	0x2000054e
 8004960:	08024558 	.word	0x08024558
 8004964:	08022d48 	.word	0x08022d48
 8004968:	20000a80 	.word	0x20000a80
 800496c:	08080000 	.word	0x08080000
 8004970:	20000a8c 	.word	0x20000a8c
 8004974:	08024594 	.word	0x08024594
 8004978:	08022d80 	.word	0x08022d80

0800497c <SENDDATA>:
bool SENDDATA(){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004982:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <SENDDATA+0x34>)
 8004984:	0018      	movs	r0, r3
 8004986:	f7fb fbf1 	bl	800016c <strlen>
 800498a:	0002      	movs	r2, r0
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	4b06      	ldr	r3, [pc, #24]	@ (80049b0 <SENDDATA+0x34>)
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f7ff f84d 	bl	8003a38 <ESP_Send>
 800499e:	1e03      	subs	r3, r0, #0
 80049a0:	d001      	beq.n	80049a6 <SENDDATA+0x2a>
    return true;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <SENDDATA+0x2c>
  }
  else{
    return false;
 80049a6:	2300      	movs	r3, #0
  }
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000584 	.word	0x20000584

080049b4 <SLEEP>:
bool SLEEP(){
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80049ba:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <SLEEP+0x34>)
 80049bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fb fbd3 	bl	800016c <strlen>
 80049c6:	0003      	movs	r3, r0
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0011      	movs	r1, r2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff f832 	bl	8003a38 <ESP_Send>
 80049d4:	1e03      	subs	r3, r0, #0
 80049d6:	d001      	beq.n	80049dc <SLEEP+0x28>
    return true;
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <SLEEP+0x2a>
  }
  else{
    return false;
 80049dc:	2300      	movs	r3, #0
  }
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b002      	add	sp, #8
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	08022dc0 	.word	0x08022dc0

080049ec <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <CIPSNTPCFG+0x3c>)
 80049f4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7fb fbb7 	bl	800016c <strlen>
 80049fe:	0003      	movs	r3, r0
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0011      	movs	r1, r2
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7ff f816 	bl	8003a38 <ESP_Send>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d006      	beq.n	8004a1e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004a10:	23fa      	movs	r3, #250	@ 0xfa
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	0018      	movs	r0, r3
 8004a16:	f009 fc81 	bl	800e31c <HAL_Delay>
    return true;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004a1e:	2300      	movs	r3, #0
  }
}
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	08022dd0 	.word	0x08022dd0

08004a2c <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <CIPSNTPTIME+0x34>)
 8004a34:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f7fb fb97 	bl	800016c <strlen>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0011      	movs	r1, r2
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7fe fff6 	bl	8003a38 <ESP_Send>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d001      	beq.n	8004a54 <CIPSNTPTIME+0x28>
    return true;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004a54:	2300      	movs	r3, #0
  }
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	08022e20 	.word	0x08022e20

08004a64 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <CIPSNTPINTV+0x34>)
 8004a6c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7fb fb7b 	bl	800016c <strlen>
 8004a76:	0003      	movs	r3, r0
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7fe ffda 	bl	8003a38 <ESP_Send>
 8004a84:	1e03      	subs	r3, r0, #0
 8004a86:	d001      	beq.n	8004a8c <CIPSNTPINTV+0x28>
    return true;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004a8c:	2300      	movs	r3, #0
  }
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b002      	add	sp, #8
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	08022e34 	.word	0x08022e34

08004a9c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004a9c:	b5b0      	push	{r4, r5, r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	1dfb      	adds	r3, r7, #7
 8004aa6:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004aa8:	4b73      	ldr	r3, [pc, #460]	@ (8004c78 <DMA_ProcessBuffer+0x1dc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	200e      	movs	r0, #14
 8004ab2:	183b      	adds	r3, r7, r0
 8004ab4:	2180      	movs	r1, #128	@ 0x80
 8004ab6:	0049      	lsls	r1, r1, #1
 8004ab8:	1a8a      	subs	r2, r1, r2
 8004aba:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004abc:	230d      	movs	r3, #13
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004ac4:	183b      	adds	r3, r7, r0
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d903      	bls.n	8004ad8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004ad0:	183b      	adds	r3, r7, r0
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	0052      	lsls	r2, r2, #1
 8004ad6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004ad8:	4b68      	ldr	r3, [pc, #416]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	001a      	movs	r2, r3
 8004ae0:	230e      	movs	r3, #14
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d131      	bne.n	8004b4e <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004aea:	4b65      	ldr	r3, [pc, #404]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b14      	cmp	r3, #20
 8004af0:	d91b      	bls.n	8004b2a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004af2:	4b63      	ldr	r3, [pc, #396]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004af8:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <DMA_ProcessBuffer+0x1e8>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <DMA_ProcessBuffer+0x74>
 8004b00:	4b61      	ldr	r3, [pc, #388]	@ (8004c88 <DMA_ProcessBuffer+0x1ec>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004b08:	230d      	movs	r3, #13
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004b10:	4b5c      	ldr	r3, [pc, #368]	@ (8004c84 <DMA_ProcessBuffer+0x1e8>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d103      	bne.n	8004b20 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004b18:	4b5c      	ldr	r3, [pc, #368]	@ (8004c8c <DMA_ProcessBuffer+0x1f0>)
 8004b1a:	220b      	movs	r2, #11
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	e016      	b.n	8004b4e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004b20:	230d      	movs	r3, #13
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	2206      	movs	r2, #6
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	e011      	b.n	8004b4e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004b2a:	4b55      	ldr	r3, [pc, #340]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b34:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004b36:	f009 fbe7 	bl	800e308 <HAL_GetTick>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	33f5      	adds	r3, #245	@ 0xf5
 8004b3e:	33ff      	adds	r3, #255	@ 0xff
 8004b40:	001a      	movs	r2, r3
 8004b42:	4b53      	ldr	r3, [pc, #332]	@ (8004c90 <DMA_ProcessBuffer+0x1f4>)
 8004b44:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004b46:	230d      	movs	r3, #13
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	001a      	movs	r2, r3
 8004b56:	210e      	movs	r1, #14
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d100      	bne.n	8004b62 <DMA_ProcessBuffer+0xc6>
 8004b60:	e082      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004b68:	4b4a      	ldr	r3, [pc, #296]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d109      	bne.n	8004b8c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	4b45      	ldr	r3, [pc, #276]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b80:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004b82:	230d      	movs	r3, #13
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	220a      	movs	r2, #10
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e06d      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004b8c:	4b41      	ldr	r3, [pc, #260]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	001a      	movs	r2, r3
 8004b94:	210e      	movs	r1, #14
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004b9e:	187b      	adds	r3, r7, r1
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004ba6:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004ba8:	230d      	movs	r3, #13
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	220a      	movs	r2, #10
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e05a      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004bb2:	4b32      	ldr	r3, [pc, #200]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	001a      	movs	r2, r3
 8004bba:	210e      	movs	r1, #14
 8004bbc:	187b      	adds	r3, r7, r1
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d917      	bls.n	8004bf4 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	001a      	movs	r2, r3
 8004bcc:	4b32      	ldr	r3, [pc, #200]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004bce:	18d0      	adds	r0, r2, r3
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	b299      	uxth	r1, r3
 8004be0:	230d      	movs	r3, #13
 8004be2:	18fc      	adds	r4, r7, r3
 8004be4:	1dfb      	adds	r3, r7, #7
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	001a      	movs	r2, r3
 8004bea:	f7ff fa8f 	bl	800410c <ParseBuffer>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	7023      	strb	r3, [r4, #0]
 8004bf2:	e026      	b.n	8004c42 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004bf4:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	4b26      	ldr	r3, [pc, #152]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004bfe:	18d0      	adds	r0, r2, r3
 8004c00:	4b1e      	ldr	r3, [pc, #120]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	001a      	movs	r2, r3
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	b299      	uxth	r1, r3
 8004c10:	250d      	movs	r5, #13
 8004c12:	197c      	adds	r4, r7, r5
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	001a      	movs	r2, r3
 8004c1a:	f7ff fa77 	bl	800410c <ParseBuffer>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004c22:	210e      	movs	r1, #14
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004c2c:	197c      	adds	r4, r7, r5
 8004c2e:	1dfb      	adds	r3, r7, #7
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	8819      	ldrh	r1, [r3, #0]
 8004c36:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff fa67 	bl	800410c <ParseBuffer>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004c42:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	0018      	movs	r0, r3
 8004c4a:	240e      	movs	r4, #14
 8004c4c:	193b      	adds	r3, r7, r4
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <DMA_ProcessBuffer+0x200>)
 8004c52:	4913      	ldr	r1, [pc, #76]	@ (8004ca0 <DMA_ProcessBuffer+0x204>)
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	0003      	movs	r3, r0
 8004c58:	2003      	movs	r0, #3
 8004c5a:	f008 ff09 	bl	800da70 <CreateLine>
          OldPos = pos;
 8004c5e:	193b      	adds	r3, r7, r4
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c66:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004c68:	230d      	movs	r3, #13
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bdb0      	pop	{r4, r5, r7, pc}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	20002444 	.word	0x20002444
 8004c7c:	20000aa5 	.word	0x20000aa5
 8004c80:	200009a0 	.word	0x200009a0
 8004c84:	200009a2 	.word	0x200009a2
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	20000028 	.word	0x20000028
 8004c90:	20000994 	.word	0x20000994
 8004c94:	20000aa6 	.word	0x20000aa6
 8004c98:	20000448 	.word	0x20000448
 8004c9c:	08022e4c 	.word	0x08022e4c
 8004ca0:	080226f0 	.word	0x080226f0

08004ca4 <clearDMABuffer>:

void clearDMABuffer(){
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	005a      	lsls	r2, r3, #1
 8004cac:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <clearDMABuffer+0x18>)
 8004cae:	2100      	movs	r1, #0
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f01a fd6b 	bl	801f78c <memset>
}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000448 	.word	0x20000448

08004cc0 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	1c0a      	adds	r2, r1, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004cda:	1dbb      	adds	r3, r7, #6
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	1dfa      	adds	r2, r7, #7
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	4251      	negs	r1, r2
 8004cea:	414a      	adcs	r2, r1
 8004cec:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	1dfa      	adds	r2, r7, #7
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	3a02      	subs	r2, #2
 8004d00:	4251      	negs	r1, r2
 8004d02:	414a      	adcs	r2, r1
 8004d04:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004d06:	1dbb      	adds	r3, r7, #6
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d107      	bne.n	8004d1e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004d0e:	230f      	movs	r3, #15
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	1dfa      	adds	r2, r7, #7
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	3a05      	subs	r2, #5
 8004d18:	4251      	negs	r1, r2
 8004d1a:	414a      	adcs	r2, r1
 8004d1c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004d1e:	1dbb      	adds	r3, r7, #6
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d107      	bne.n	8004d36 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004d26:	230f      	movs	r3, #15
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	1dfa      	adds	r2, r7, #7
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	3a0b      	subs	r2, #11
 8004d30:	4251      	negs	r1, r2
 8004d32:	414a      	adcs	r2, r1
 8004d34:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004d36:	230f      	movs	r3, #15
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	1dfb      	adds	r3, r7, #7
 8004d4e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004d50:	230f      	movs	r3, #15
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004d58:	1dfb      	adds	r3, r7, #7
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b14      	cmp	r3, #20
 8004d5e:	d900      	bls.n	8004d62 <AT_Send+0x1e>
 8004d60:	e18c      	b.n	800507c <AT_Send+0x338>
 8004d62:	009a      	lsls	r2, r3, #2
 8004d64:	4bc9      	ldr	r3, [pc, #804]	@ (800508c <AT_Send+0x348>)
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004d6c:	4bc8      	ldr	r3, [pc, #800]	@ (8005090 <AT_Send+0x34c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f008 fe27 	bl	800d9c4 <TimestampIsReached>
 8004d76:	1e03      	subs	r3, r0, #0
 8004d78:	d100      	bne.n	8004d7c <AT_Send+0x38>
 8004d7a:	e17e      	b.n	800507a <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004d7c:	230f      	movs	r3, #15
 8004d7e:	18fc      	adds	r4, r7, r3
 8004d80:	f7ff fbae 	bl	80044e0 <PollAwake>
 8004d84:	0003      	movs	r3, r0
 8004d86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d88:	f009 fabe 	bl	800e308 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	3332      	adds	r3, #50	@ 0x32
 8004d90:	001a      	movs	r2, r3
 8004d92:	4bbf      	ldr	r3, [pc, #764]	@ (8005090 <AT_Send+0x34c>)
 8004d94:	601a      	str	r2, [r3, #0]
  }
  break;
 8004d96:	e170      	b.n	800507a <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004d98:	4abe      	ldr	r2, [pc, #760]	@ (8005094 <AT_Send+0x350>)
 8004d9a:	4bbf      	ldr	r3, [pc, #764]	@ (8005098 <AT_Send+0x354>)
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	2003      	movs	r0, #3
 8004da0:	f008 fe66 	bl	800da70 <CreateLine>
    ATCommandSend = RFPower();
 8004da4:	230f      	movs	r3, #15
 8004da6:	18fc      	adds	r4, r7, r3
 8004da8:	f7ff fbb6 	bl	8004518 <RFPower>
 8004dac:	0003      	movs	r3, r0
 8004dae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004db0:	f009 faaa 	bl	800e308 <HAL_GetTick>
 8004db4:	0003      	movs	r3, r0
 8004db6:	330a      	adds	r3, #10
 8004db8:	001a      	movs	r2, r3
 8004dba:	4bb5      	ldr	r3, [pc, #724]	@ (8005090 <AT_Send+0x34c>)
 8004dbc:	601a      	str	r2, [r3, #0]
    break;
 8004dbe:	e15d      	b.n	800507c <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004dc0:	4ab6      	ldr	r2, [pc, #728]	@ (800509c <AT_Send+0x358>)
 8004dc2:	4bb5      	ldr	r3, [pc, #724]	@ (8005098 <AT_Send+0x354>)
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	2003      	movs	r0, #3
 8004dc8:	f008 fe52 	bl	800da70 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004dcc:	230f      	movs	r3, #15
 8004dce:	18fc      	adds	r4, r7, r3
 8004dd0:	f7ff fbbe 	bl	8004550 <CheckRFPower>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dd8:	f009 fa96 	bl	800e308 <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	330a      	adds	r3, #10
 8004de0:	001a      	movs	r2, r3
 8004de2:	4bab      	ldr	r3, [pc, #684]	@ (8005090 <AT_Send+0x34c>)
 8004de4:	601a      	str	r2, [r3, #0]
    break;
 8004de6:	e149      	b.n	800507c <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004de8:	4aad      	ldr	r2, [pc, #692]	@ (80050a0 <AT_Send+0x35c>)
 8004dea:	4bab      	ldr	r3, [pc, #684]	@ (8005098 <AT_Send+0x354>)
 8004dec:	0019      	movs	r1, r3
 8004dee:	2003      	movs	r0, #3
 8004df0:	f008 fe3e 	bl	800da70 <CreateLine>
    ATCommandSend = ATRestore();
 8004df4:	230f      	movs	r3, #15
 8004df6:	18fc      	adds	r4, r7, r3
 8004df8:	f7ff fbc6 	bl	8004588 <ATRestore>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e00:	f009 fa82 	bl	800e308 <HAL_GetTick>
 8004e04:	0003      	movs	r3, r0
 8004e06:	3332      	adds	r3, #50	@ 0x32
 8004e08:	001a      	movs	r2, r3
 8004e0a:	4ba1      	ldr	r3, [pc, #644]	@ (8005090 <AT_Send+0x34c>)
 8004e0c:	601a      	str	r2, [r3, #0]
    break;
 8004e0e:	e135      	b.n	800507c <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004e10:	4aa4      	ldr	r2, [pc, #656]	@ (80050a4 <AT_Send+0x360>)
 8004e12:	4ba1      	ldr	r3, [pc, #644]	@ (8005098 <AT_Send+0x354>)
 8004e14:	0019      	movs	r1, r3
 8004e16:	2003      	movs	r0, #3
 8004e18:	f008 fe2a 	bl	800da70 <CreateLine>
    ATCommandSend = CWINIT();
 8004e1c:	230f      	movs	r3, #15
 8004e1e:	18fc      	adds	r4, r7, r3
 8004e20:	f7ff fbce 	bl	80045c0 <CWINIT>
 8004e24:	0003      	movs	r3, r0
 8004e26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e28:	f009 fa6e 	bl	800e308 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	33f5      	adds	r3, #245	@ 0xf5
 8004e30:	33ff      	adds	r3, #255	@ 0xff
 8004e32:	001a      	movs	r2, r3
 8004e34:	4b96      	ldr	r3, [pc, #600]	@ (8005090 <AT_Send+0x34c>)
 8004e36:	601a      	str	r2, [r3, #0]
    break;
 8004e38:	e120      	b.n	800507c <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004e3a:	4a9b      	ldr	r2, [pc, #620]	@ (80050a8 <AT_Send+0x364>)
 8004e3c:	4b96      	ldr	r3, [pc, #600]	@ (8005098 <AT_Send+0x354>)
 8004e3e:	0019      	movs	r1, r3
 8004e40:	2003      	movs	r0, #3
 8004e42:	f008 fe15 	bl	800da70 <CreateLine>
    ATCommandSend = CWSTATE();
 8004e46:	230f      	movs	r3, #15
 8004e48:	18fc      	adds	r4, r7, r3
 8004e4a:	f7ff fcc7 	bl	80047dc <CWSTATE>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e52:	f009 fa59 	bl	800e308 <HAL_GetTick>
 8004e56:	0003      	movs	r3, r0
 8004e58:	33f5      	adds	r3, #245	@ 0xf5
 8004e5a:	33ff      	adds	r3, #255	@ 0xff
 8004e5c:	001a      	movs	r2, r3
 8004e5e:	4b8c      	ldr	r3, [pc, #560]	@ (8005090 <AT_Send+0x34c>)
 8004e60:	601a      	str	r2, [r3, #0]
    break;
 8004e62:	e10b      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004e64:	4a91      	ldr	r2, [pc, #580]	@ (80050ac <AT_Send+0x368>)
 8004e66:	4b8c      	ldr	r3, [pc, #560]	@ (8005098 <AT_Send+0x354>)
 8004e68:	0019      	movs	r1, r3
 8004e6a:	2003      	movs	r0, #3
 8004e6c:	f008 fe00 	bl	800da70 <CreateLine>
    ATCommandSend = CWMODE1();
 8004e70:	230f      	movs	r3, #15
 8004e72:	18fc      	adds	r4, r7, r3
 8004e74:	f7ff fbc0 	bl	80045f8 <CWMODE1>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e7c:	f009 fa44 	bl	800e308 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	330a      	adds	r3, #10
 8004e84:	001a      	movs	r2, r3
 8004e86:	4b82      	ldr	r3, [pc, #520]	@ (8005090 <AT_Send+0x34c>)
 8004e88:	601a      	str	r2, [r3, #0]
    break;
 8004e8a:	e0f7      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004e8c:	4a87      	ldr	r2, [pc, #540]	@ (80050ac <AT_Send+0x368>)
 8004e8e:	4b82      	ldr	r3, [pc, #520]	@ (8005098 <AT_Send+0x354>)
 8004e90:	0019      	movs	r1, r3
 8004e92:	2003      	movs	r0, #3
 8004e94:	f008 fdec 	bl	800da70 <CreateLine>
    ATCommandSend = CWMODE2();
 8004e98:	230f      	movs	r3, #15
 8004e9a:	18fc      	adds	r4, r7, r3
 8004e9c:	f7ff fbc8 	bl	8004630 <CWMODE2>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ea4:	f009 fa30 	bl	800e308 <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	330a      	adds	r3, #10
 8004eac:	001a      	movs	r2, r3
 8004eae:	4b78      	ldr	r3, [pc, #480]	@ (8005090 <AT_Send+0x34c>)
 8004eb0:	601a      	str	r2, [r3, #0]
    break;
 8004eb2:	e0e3      	b.n	800507c <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004eb4:	4a7e      	ldr	r2, [pc, #504]	@ (80050b0 <AT_Send+0x36c>)
 8004eb6:	4b78      	ldr	r3, [pc, #480]	@ (8005098 <AT_Send+0x354>)
 8004eb8:	0019      	movs	r1, r3
 8004eba:	2003      	movs	r0, #3
 8004ebc:	f008 fdd8 	bl	800da70 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fc      	adds	r4, r7, r3
 8004ec4:	f7ff fbd0 	bl	8004668 <CWAUTOCONN>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ecc:	f009 fa1c 	bl	800e308 <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	330a      	adds	r3, #10
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8005090 <AT_Send+0x34c>)
 8004ed8:	601a      	str	r2, [r3, #0]
    break;
 8004eda:	e0cf      	b.n	800507c <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004edc:	4a75      	ldr	r2, [pc, #468]	@ (80050b4 <AT_Send+0x370>)
 8004ede:	4b6e      	ldr	r3, [pc, #440]	@ (8005098 <AT_Send+0x354>)
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	2003      	movs	r0, #3
 8004ee4:	f008 fdc4 	bl	800da70 <CreateLine>
    ATCommandSend = CWJAP();
 8004ee8:	230f      	movs	r3, #15
 8004eea:	18fc      	adds	r4, r7, r3
 8004eec:	f7ff fbd8 	bl	80046a0 <CWJAP>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004ef4:	f009 fa08 	bl	800e308 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	3332      	adds	r3, #50	@ 0x32
 8004efc:	001a      	movs	r2, r3
 8004efe:	4b64      	ldr	r3, [pc, #400]	@ (8005090 <AT_Send+0x34c>)
 8004f00:	601a      	str	r2, [r3, #0]
    break;
 8004f02:	e0bb      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004f04:	4a6c      	ldr	r2, [pc, #432]	@ (80050b8 <AT_Send+0x374>)
 8004f06:	4b64      	ldr	r3, [pc, #400]	@ (8005098 <AT_Send+0x354>)
 8004f08:	0019      	movs	r1, r3
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	f008 fdb0 	bl	800da70 <CreateLine>
    ATCommandSend = CWMODE3();
 8004f10:	230f      	movs	r3, #15
 8004f12:	18fc      	adds	r4, r7, r3
 8004f14:	f7ff fc46 	bl	80047a4 <CWMODE3>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f1c:	f009 f9f4 	bl	800e308 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	330a      	adds	r3, #10
 8004f24:	001a      	movs	r2, r3
 8004f26:	4b5a      	ldr	r3, [pc, #360]	@ (8005090 <AT_Send+0x34c>)
 8004f28:	601a      	str	r2, [r3, #0]
    break;
 8004f2a:	e0a7      	b.n	800507c <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004f2c:	4a63      	ldr	r2, [pc, #396]	@ (80050bc <AT_Send+0x378>)
 8004f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005098 <AT_Send+0x354>)
 8004f30:	0019      	movs	r1, r3
 8004f32:	2003      	movs	r0, #3
 8004f34:	f008 fd9c 	bl	800da70 <CreateLine>
    ATCommandSend = CWSAP();
 8004f38:	230f      	movs	r3, #15
 8004f3a:	18fc      	adds	r4, r7, r3
 8004f3c:	f7ff fc6a 	bl	8004814 <CWSAP>
 8004f40:	0003      	movs	r3, r0
 8004f42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f44:	f009 f9e0 	bl	800e308 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	330a      	adds	r3, #10
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	4b50      	ldr	r3, [pc, #320]	@ (8005090 <AT_Send+0x34c>)
 8004f50:	601a      	str	r2, [r3, #0]
    break;
 8004f52:	e093      	b.n	800507c <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004f54:	230f      	movs	r3, #15
 8004f56:	18fc      	adds	r4, r7, r3
 8004f58:	f7ff fc78 	bl	800484c <CIPMUX>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f60:	f009 f9d2 	bl	800e308 <HAL_GetTick>
 8004f64:	0003      	movs	r3, r0
 8004f66:	330a      	adds	r3, #10
 8004f68:	001a      	movs	r2, r3
 8004f6a:	4b49      	ldr	r3, [pc, #292]	@ (8005090 <AT_Send+0x34c>)
 8004f6c:	601a      	str	r2, [r3, #0]
    break;
 8004f6e:	e085      	b.n	800507c <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004f70:	230f      	movs	r3, #15
 8004f72:	18fc      	adds	r4, r7, r3
 8004f74:	f7ff fc86 	bl	8004884 <WEBSERVER>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f7c:	f009 f9c4 	bl	800e308 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	330a      	adds	r3, #10
 8004f84:	001a      	movs	r2, r3
 8004f86:	4b42      	ldr	r3, [pc, #264]	@ (8005090 <AT_Send+0x34c>)
 8004f88:	601a      	str	r2, [r3, #0]
    break;
 8004f8a:	e077      	b.n	800507c <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004f8c:	230f      	movs	r3, #15
 8004f8e:	18fc      	adds	r4, r7, r3
 8004f90:	f7ff fc94 	bl	80048bc <HTTPCPOST>
 8004f94:	0003      	movs	r3, r0
 8004f96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f98:	f009 f9b6 	bl	800e308 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	33f5      	adds	r3, #245	@ 0xf5
 8004fa0:	33ff      	adds	r3, #255	@ 0xff
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8005090 <AT_Send+0x34c>)
 8004fa6:	601a      	str	r2, [r3, #0]
    break;
 8004fa8:	e068      	b.n	800507c <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 8004faa:	4a45      	ldr	r2, [pc, #276]	@ (80050c0 <AT_Send+0x37c>)
 8004fac:	4b3a      	ldr	r3, [pc, #232]	@ (8005098 <AT_Send+0x354>)
 8004fae:	0019      	movs	r1, r3
 8004fb0:	2003      	movs	r0, #3
 8004fb2:	f008 fd5d 	bl	800da70 <CreateLine>
    ATCommandSend = SENDDATA();
 8004fb6:	230f      	movs	r3, #15
 8004fb8:	18fc      	adds	r4, r7, r3
 8004fba:	f7ff fcdf 	bl	800497c <SENDDATA>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004fc2:	f009 f9a1 	bl	800e308 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	33f5      	adds	r3, #245	@ 0xf5
 8004fca:	33ff      	adds	r3, #255	@ 0xff
 8004fcc:	001a      	movs	r2, r3
 8004fce:	4b30      	ldr	r3, [pc, #192]	@ (8005090 <AT_Send+0x34c>)
 8004fd0:	601a      	str	r2, [r3, #0]
    break;
 8004fd2:	e053      	b.n	800507c <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	@ (80050c4 <AT_Send+0x380>)
 8004fd6:	4b30      	ldr	r3, [pc, #192]	@ (8005098 <AT_Send+0x354>)
 8004fd8:	0019      	movs	r1, r3
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f008 fd48 	bl	800da70 <CreateLine>
    ATCommandSend = SLEEP();
 8004fe0:	230f      	movs	r3, #15
 8004fe2:	18fc      	adds	r4, r7, r3
 8004fe4:	f7ff fce6 	bl	80049b4 <SLEEP>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fec:	f009 f98c 	bl	800e308 <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	330a      	adds	r3, #10
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	4b26      	ldr	r3, [pc, #152]	@ (8005090 <AT_Send+0x34c>)
 8004ff8:	601a      	str	r2, [r3, #0]
    break;
 8004ffa:	e03f      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004ffc:	4a32      	ldr	r2, [pc, #200]	@ (80050c8 <AT_Send+0x384>)
 8004ffe:	4b26      	ldr	r3, [pc, #152]	@ (8005098 <AT_Send+0x354>)
 8005000:	0019      	movs	r1, r3
 8005002:	2003      	movs	r0, #3
 8005004:	f008 fd34 	bl	800da70 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005008:	230f      	movs	r3, #15
 800500a:	18fc      	adds	r4, r7, r3
 800500c:	f7ff fcee 	bl	80049ec <CIPSNTPCFG>
 8005010:	0003      	movs	r3, r0
 8005012:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005014:	f009 f978 	bl	800e308 <HAL_GetTick>
 8005018:	0003      	movs	r3, r0
 800501a:	330a      	adds	r3, #10
 800501c:	001a      	movs	r2, r3
 800501e:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <AT_Send+0x34c>)
 8005020:	601a      	str	r2, [r3, #0]
    break;
 8005022:	e02b      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005024:	4a29      	ldr	r2, [pc, #164]	@ (80050cc <AT_Send+0x388>)
 8005026:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <AT_Send+0x354>)
 8005028:	0019      	movs	r1, r3
 800502a:	2003      	movs	r0, #3
 800502c:	f008 fd20 	bl	800da70 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005030:	230f      	movs	r3, #15
 8005032:	18fc      	adds	r4, r7, r3
 8005034:	f7ff fcfa 	bl	8004a2c <CIPSNTPTIME>
 8005038:	0003      	movs	r3, r0
 800503a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800503c:	f009 f964 	bl	800e308 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	33f5      	adds	r3, #245	@ 0xf5
 8005044:	33ff      	adds	r3, #255	@ 0xff
 8005046:	001a      	movs	r2, r3
 8005048:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <AT_Send+0x34c>)
 800504a:	601a      	str	r2, [r3, #0]
    break;
 800504c:	e016      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800504e:	4a20      	ldr	r2, [pc, #128]	@ (80050d0 <AT_Send+0x38c>)
 8005050:	4b11      	ldr	r3, [pc, #68]	@ (8005098 <AT_Send+0x354>)
 8005052:	0019      	movs	r1, r3
 8005054:	2003      	movs	r0, #3
 8005056:	f008 fd0b 	bl	800da70 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800505a:	230f      	movs	r3, #15
 800505c:	18fc      	adds	r4, r7, r3
 800505e:	f7ff fd01 	bl	8004a64 <CIPSNTPINTV>
 8005062:	0003      	movs	r3, r0
 8005064:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005066:	f009 f94f 	bl	800e308 <HAL_GetTick>
 800506a:	0003      	movs	r3, r0
 800506c:	330a      	adds	r3, #10
 800506e:	001a      	movs	r2, r3
 8005070:	4b07      	ldr	r3, [pc, #28]	@ (8005090 <AT_Send+0x34c>)
 8005072:	601a      	str	r2, [r3, #0]
    break;
 8005074:	e002      	b.n	800507c <AT_Send+0x338>
  case AT_END:
    break;
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	e000      	b.n	800507c <AT_Send+0x338>
  break;
 800507a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800507c:	230f      	movs	r3, #15
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	781b      	ldrb	r3, [r3, #0]
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b005      	add	sp, #20
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	080245bc 	.word	0x080245bc
 8005090:	20000994 	.word	0x20000994
 8005094:	08022e74 	.word	0x08022e74
 8005098:	080226f0 	.word	0x080226f0
 800509c:	08022e88 	.word	0x08022e88
 80050a0:	08022e9c 	.word	0x08022e9c
 80050a4:	08022eac 	.word	0x08022eac
 80050a8:	08022ec0 	.word	0x08022ec0
 80050ac:	08022ed8 	.word	0x08022ed8
 80050b0:	08022ef0 	.word	0x08022ef0
 80050b4:	08022f08 	.word	0x08022f08
 80050b8:	08022f1c 	.word	0x08022f1c
 80050bc:	08022f38 	.word	0x08022f38
 80050c0:	08022f54 	.word	0x08022f54
 80050c4:	08022f64 	.word	0x08022f64
 80050c8:	08022f88 	.word	0x08022f88
 80050cc:	08022f9c 	.word	0x08022f9c
 80050d0:	08022fb4 	.word	0x08022fb4

080050d4 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80050da:	1dfb      	adds	r3, r7, #7
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80050e0:	4b7a      	ldr	r3, [pc, #488]	@ (80052cc <ESP_WakeTest+0x1f8>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	d900      	bls.n	80050ea <ESP_WakeTest+0x16>
 80050e8:	e0d6      	b.n	8005298 <ESP_WakeTest+0x1c4>
 80050ea:	009a      	lsls	r2, r3, #2
 80050ec:	4b78      	ldr	r3, [pc, #480]	@ (80052d0 <ESP_WakeTest+0x1fc>)
 80050ee:	18d3      	adds	r3, r2, r3
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 80050f4:	4b77      	ldr	r3, [pc, #476]	@ (80052d4 <ESP_WakeTest+0x200>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2201      	movs	r2, #1
 80050fa:	4053      	eors	r3, r2
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d036      	beq.n	8005170 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005102:	2380      	movs	r3, #128	@ 0x80
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	4874      	ldr	r0, [pc, #464]	@ (80052d8 <ESP_WakeTest+0x204>)
 8005108:	2200      	movs	r2, #0
 800510a:	0019      	movs	r1, r3
 800510c:	f00a fb77 	bl	800f7fe <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005110:	2032      	movs	r0, #50	@ 0x32
 8005112:	f009 f903 	bl	800e31c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	486f      	ldr	r0, [pc, #444]	@ (80052d8 <ESP_WakeTest+0x204>)
 800511c:	2201      	movs	r2, #1
 800511e:	0019      	movs	r1, r3
 8005120:	f00a fb6d 	bl	800f7fe <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005124:	200a      	movs	r0, #10
 8005126:	f009 f8f9 	bl	800e31c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800512a:	4b6c      	ldr	r3, [pc, #432]	@ (80052dc <ESP_WakeTest+0x208>)
 800512c:	2200      	movs	r2, #0
 800512e:	2101      	movs	r1, #1
 8005130:	0018      	movs	r0, r3
 8005132:	f00a fb64 	bl	800f7fe <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005136:	200a      	movs	r0, #10
 8005138:	f009 f8f0 	bl	800e31c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800513c:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <ESP_WakeTest+0x208>)
 800513e:	2201      	movs	r2, #1
 8005140:	2102      	movs	r1, #2
 8005142:	0018      	movs	r0, r3
 8005144:	f00a fb5b 	bl	800f7fe <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005148:	200a      	movs	r0, #10
 800514a:	f009 f8e7 	bl	800e31c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800514e:	4b63      	ldr	r3, [pc, #396]	@ (80052dc <ESP_WakeTest+0x208>)
 8005150:	2201      	movs	r2, #1
 8005152:	2101      	movs	r1, #1
 8005154:	0018      	movs	r0, r3
 8005156:	f00a fb52 	bl	800f7fe <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800515a:	f009 f8d5 	bl	800e308 <HAL_GetTick>
 800515e:	0003      	movs	r3, r0
 8005160:	22af      	movs	r2, #175	@ 0xaf
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	189a      	adds	r2, r3, r2
 8005166:	4b5e      	ldr	r3, [pc, #376]	@ (80052e0 <ESP_WakeTest+0x20c>)
 8005168:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800516a:	4b5a      	ldr	r3, [pc, #360]	@ (80052d4 <ESP_WakeTest+0x200>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	005a      	lsls	r2, r3, #1
 8005174:	4b5b      	ldr	r3, [pc, #364]	@ (80052e4 <ESP_WakeTest+0x210>)
 8005176:	0011      	movs	r1, r2
 8005178:	0018      	movs	r0, r3
 800517a:	f7fe fc91 	bl	8003aa0 <ESP_Receive>
 800517e:	1e03      	subs	r3, r0, #0
 8005180:	d100      	bne.n	8005184 <ESP_WakeTest+0xb0>
 8005182:	e099      	b.n	80052b8 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005184:	4b51      	ldr	r3, [pc, #324]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
      }
      break;
 800518a:	e095      	b.n	80052b8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 800518c:	4b54      	ldr	r3, [pc, #336]	@ (80052e0 <ESP_WakeTest+0x20c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	0018      	movs	r0, r3
 8005192:	f008 fc17 	bl	800d9c4 <TimestampIsReached>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d100      	bne.n	800519c <ESP_WakeTest+0xc8>
 800519a:	e08f      	b.n	80052bc <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 800519c:	4b52      	ldr	r3, [pc, #328]	@ (80052e8 <ESP_WakeTest+0x214>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	1dfc      	adds	r4, r7, #7
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7ff fdce 	bl	8004d44 <AT_Send>
 80051a8:	0003      	movs	r3, r0
 80051aa:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80051ac:	1dfb      	adds	r3, r7, #7
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d100      	bne.n	80051b6 <ESP_WakeTest+0xe2>
 80051b4:	e082      	b.n	80052bc <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80051b6:	4b45      	ldr	r3, [pc, #276]	@ (80052cc <ESP_WakeTest+0x1f8>)
 80051b8:	2202      	movs	r2, #2
 80051ba:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80051bc:	e07e      	b.n	80052bc <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 80051be:	4b48      	ldr	r3, [pc, #288]	@ (80052e0 <ESP_WakeTest+0x20c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f008 fbfe 	bl	800d9c4 <TimestampIsReached>
 80051c8:	1e03      	subs	r3, r0, #0
 80051ca:	d100      	bne.n	80051ce <ESP_WakeTest+0xfa>
 80051cc:	e078      	b.n	80052c0 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80051ce:	4b47      	ldr	r3, [pc, #284]	@ (80052ec <ESP_WakeTest+0x218>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7ff fc62 	bl	8004a9c <DMA_ProcessBuffer>
 80051d8:	0003      	movs	r3, r0
 80051da:	001a      	movs	r2, r3
 80051dc:	4b44      	ldr	r3, [pc, #272]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051de:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80051e0:	4b43      	ldr	r3, [pc, #268]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	4b41      	ldr	r3, [pc, #260]	@ (80052ec <ESP_WakeTest+0x218>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	1dbc      	adds	r4, r7, #6
 80051ea:	0019      	movs	r1, r3
 80051ec:	0010      	movs	r0, r2
 80051ee:	f7ff fd67 	bl	8004cc0 <ATCompare>
 80051f2:	0003      	movs	r3, r0
 80051f4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80051f6:	4b3e      	ldr	r3, [pc, #248]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d102      	bne.n	8005204 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80051fe:	4b33      	ldr	r3, [pc, #204]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005204:	4b3a      	ldr	r3, [pc, #232]	@ (80052f0 <ESP_WakeTest+0x21c>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b07      	cmp	r3, #7
 800520a:	d104      	bne.n	8005216 <ESP_WakeTest+0x142>
          StartProg();
 800520c:	f7fe ff4c 	bl	80040a8 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005210:	4b2e      	ldr	r3, [pc, #184]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005212:	2205      	movs	r2, #5
 8005214:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005216:	4b36      	ldr	r3, [pc, #216]	@ (80052f0 <ESP_WakeTest+0x21c>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d109      	bne.n	8005232 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800521e:	f009 f873 	bl	800e308 <HAL_GetTick>
 8005222:	0003      	movs	r3, r0
 8005224:	3332      	adds	r3, #50	@ 0x32
 8005226:	001a      	movs	r2, r3
 8005228:	4b2d      	ldr	r3, [pc, #180]	@ (80052e0 <ESP_WakeTest+0x20c>)
 800522a:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800522c:	4b27      	ldr	r3, [pc, #156]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8005232:	1dbb      	adds	r3, r7, #6
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d042      	beq.n	80052c0 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 800523a:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800523c:	2203      	movs	r2, #3
 800523e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005240:	e03e      	b.n	80052c0 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005242:	4b2c      	ldr	r3, [pc, #176]	@ (80052f4 <ESP_WakeTest+0x220>)
 8005244:	22fa      	movs	r2, #250	@ 0xfa
 8005246:	0112      	lsls	r2, r2, #4
 8005248:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800524a:	4b2a      	ldr	r3, [pc, #168]	@ (80052f4 <ESP_WakeTest+0x220>)
 800524c:	4a2a      	ldr	r2, [pc, #168]	@ (80052f8 <ESP_WakeTest+0x224>)
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005250:	4b28      	ldr	r3, [pc, #160]	@ (80052f4 <ESP_WakeTest+0x220>)
 8005252:	22fa      	movs	r2, #250	@ 0xfa
 8005254:	0112      	lsls	r2, r2, #4
 8005256:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005258:	4b1c      	ldr	r3, [pc, #112]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800525a:	2204      	movs	r2, #4
 800525c:	701a      	strb	r2, [r3, #0]

      break;
 800525e:	e030      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
//      Debug("TestState: ESP_TEST_DEINIT");
      testRound = false;
 8005260:	4b26      	ldr	r3, [pc, #152]	@ (80052fc <ESP_WakeTest+0x228>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005266:	4b1b      	ldr	r3, [pc, #108]	@ (80052d4 <ESP_WakeTest+0x200>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800526c:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <ESP_WakeTest+0x208>)
 800526e:	2200      	movs	r2, #0
 8005270:	2101      	movs	r1, #1
 8005272:	0018      	movs	r0, r3
 8005274:	f00a fac3 	bl	800f7fe <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005278:	2380      	movs	r3, #128	@ 0x80
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4816      	ldr	r0, [pc, #88]	@ (80052d8 <ESP_WakeTest+0x204>)
 800527e:	2200      	movs	r2, #0
 8005280:	0019      	movs	r1, r3
 8005282:	f00a fabc 	bl	800f7fe <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005286:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <ESP_WakeTest+0x208>)
 8005288:	2200      	movs	r2, #0
 800528a:	2102      	movs	r1, #2
 800528c:	0018      	movs	r0, r3
 800528e:	f00a fab6 	bl	800f7fe <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005292:	f002 fbf1 	bl	8007a78 <SetESPMeasurementDone>
      break;
 8005296:	e014      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
      break;
 800529e:	e010      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 80052a0:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052a2:	22fa      	movs	r2, #250	@ 0xfa
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80052a8:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052aa:	22fa      	movs	r2, #250	@ 0xfa
 80052ac:	0112      	lsls	r2, r2, #4
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80052b6:	e004      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052b8:	46c0      	nop			@ (mov r8, r8)
 80052ba:	e002      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052bc:	46c0      	nop			@ (mov r8, r8)
 80052be:	e000      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052c0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b003      	add	sp, #12
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	46c0      	nop			@ (mov r8, r8)
 80052cc:	200009a4 	.word	0x200009a4
 80052d0:	08024610 	.word	0x08024610
 80052d4:	20000548 	.word	0x20000548
 80052d8:	50000800 	.word	0x50000800
 80052dc:	50001c00 	.word	0x50001c00
 80052e0:	20000994 	.word	0x20000994
 80052e4:	20000448 	.word	0x20000448
 80052e8:	200009a2 	.word	0x200009a2
 80052ec:	200009a1 	.word	0x200009a1
 80052f0:	20000029 	.word	0x20000029
 80052f4:	40000400 	.word	0x40000400
 80052f8:	00000bb8 	.word	0x00000bb8
 80052fc:	20000000 	.word	0x20000000

08005300 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 800530c:	4be0      	ldr	r3, [pc, #896]	@ (8005690 <ESP_Upkeep+0x390>)
 800530e:	781a      	ldrb	r2, [r3, #0]
 8005310:	4be0      	ldr	r3, [pc, #896]	@ (8005694 <ESP_Upkeep+0x394>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d01f      	beq.n	8005358 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005318:	4bdd      	ldr	r3, [pc, #884]	@ (8005690 <ESP_Upkeep+0x390>)
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	4bdd      	ldr	r3, [pc, #884]	@ (8005694 <ESP_Upkeep+0x394>)
 800531e:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005320:	4bdc      	ldr	r3, [pc, #880]	@ (8005694 <ESP_Upkeep+0x394>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d103      	bne.n	8005330 <ESP_Upkeep+0x30>
 8005328:	4bdb      	ldr	r3, [pc, #876]	@ (8005698 <ESP_Upkeep+0x398>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b0e      	cmp	r3, #14
 800532e:	d013      	beq.n	8005358 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005330:	4bd8      	ldr	r3, [pc, #864]	@ (8005694 <ESP_Upkeep+0x394>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	001d      	movs	r5, r3
 8005336:	4bd8      	ldr	r3, [pc, #864]	@ (8005698 <ESP_Upkeep+0x398>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	0018      	movs	r0, r3
 800533c:	4bd7      	ldr	r3, [pc, #860]	@ (800569c <ESP_Upkeep+0x39c>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	001c      	movs	r4, r3
 8005342:	4bd7      	ldr	r3, [pc, #860]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	4ad7      	ldr	r2, [pc, #860]	@ (80056a4 <ESP_Upkeep+0x3a4>)
 8005348:	49d7      	ldr	r1, [pc, #860]	@ (80056a8 <ESP_Upkeep+0x3a8>)
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	9401      	str	r4, [sp, #4]
 800534e:	9000      	str	r0, [sp, #0]
 8005350:	002b      	movs	r3, r5
 8005352:	2003      	movs	r0, #3
 8005354:	f008 fb8c 	bl	800da70 <CreateLine>
    }
  }

  switch (EspState) {
 8005358:	4bcd      	ldr	r3, [pc, #820]	@ (8005690 <ESP_Upkeep+0x390>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b0f      	cmp	r3, #15
 800535e:	d901      	bls.n	8005364 <ESP_Upkeep+0x64>
 8005360:	f000 fc09 	bl	8005b76 <ESP_Upkeep+0x876>
 8005364:	009a      	lsls	r2, r3, #2
 8005366:	4bd1      	ldr	r3, [pc, #836]	@ (80056ac <ESP_Upkeep+0x3ac>)
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 800536e:	4bc8      	ldr	r3, [pc, #800]	@ (8005690 <ESP_Upkeep+0x390>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
      break;
 8005374:	f000 fc18 	bl	8005ba8 <ESP_Upkeep+0x8a8>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005378:	4bcd      	ldr	r3, [pc, #820]	@ (80056b0 <ESP_Upkeep+0x3b0>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2201      	movs	r2, #1
 800537e:	4053      	eors	r3, r2
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d036      	beq.n	80053f4 <ESP_Upkeep+0xf4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	48ca      	ldr	r0, [pc, #808]	@ (80056b4 <ESP_Upkeep+0x3b4>)
 800538c:	2200      	movs	r2, #0
 800538e:	0019      	movs	r1, r3
 8005390:	f00a fa35 	bl	800f7fe <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005394:	2001      	movs	r0, #1
 8005396:	f008 ffc1 	bl	800e31c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800539a:	2380      	movs	r3, #128	@ 0x80
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	48c5      	ldr	r0, [pc, #788]	@ (80056b4 <ESP_Upkeep+0x3b4>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	0019      	movs	r1, r3
 80053a4:	f00a fa2b 	bl	800f7fe <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053a8:	2001      	movs	r0, #1
 80053aa:	f008 ffb7 	bl	800e31c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80053ae:	4bc2      	ldr	r3, [pc, #776]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	2101      	movs	r1, #1
 80053b4:	0018      	movs	r0, r3
 80053b6:	f00a fa22 	bl	800f7fe <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f008 ffae 	bl	800e31c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80053c0:	4bbd      	ldr	r3, [pc, #756]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	2102      	movs	r1, #2
 80053c6:	0018      	movs	r0, r3
 80053c8:	f00a fa19 	bl	800f7fe <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053cc:	2001      	movs	r0, #1
 80053ce:	f008 ffa5 	bl	800e31c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80053d2:	4bb9      	ldr	r3, [pc, #740]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	2101      	movs	r1, #1
 80053d8:	0018      	movs	r0, r3
 80053da:	f00a fa10 	bl	800f7fe <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80053de:	f008 ff93 	bl	800e308 <HAL_GetTick>
 80053e2:	0003      	movs	r3, r0
 80053e4:	22af      	movs	r2, #175	@ 0xaf
 80053e6:	0092      	lsls	r2, r2, #2
 80053e8:	189a      	adds	r2, r3, r2
 80053ea:	4bb4      	ldr	r3, [pc, #720]	@ (80056bc <ESP_Upkeep+0x3bc>)
 80053ec:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80053ee:	4bb0      	ldr	r3, [pc, #704]	@ (80056b0 <ESP_Upkeep+0x3b0>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	005a      	lsls	r2, r3, #1
 80053f8:	4bb1      	ldr	r3, [pc, #708]	@ (80056c0 <ESP_Upkeep+0x3c0>)
 80053fa:	0011      	movs	r1, r2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fe fb4f 	bl	8003aa0 <ESP_Receive>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d101      	bne.n	800540a <ESP_Upkeep+0x10a>
 8005406:	f000 fbc2 	bl	8005b8e <ESP_Upkeep+0x88e>
        EspState = ESP_STATE_WAIT_AWAKE;
 800540a:	4ba1      	ldr	r3, [pc, #644]	@ (8005690 <ESP_Upkeep+0x390>)
 800540c:	220f      	movs	r2, #15
 800540e:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005410:	f008 ff7a 	bl	800e308 <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	22fa      	movs	r2, #250	@ 0xfa
 8005418:	00d2      	lsls	r2, r2, #3
 800541a:	189a      	adds	r2, r3, r2
 800541c:	4ba9      	ldr	r3, [pc, #676]	@ (80056c4 <ESP_Upkeep+0x3c4>)
 800541e:	601a      	str	r2, [r3, #0]
      }
      break;
 8005420:	f000 fbb5 	bl	8005b8e <ESP_Upkeep+0x88e>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8005424:	2001      	movs	r0, #1
 8005426:	f7ff fb39 	bl	8004a9c <DMA_ProcessBuffer>
 800542a:	0003      	movs	r3, r0
 800542c:	001a      	movs	r2, r3
 800542e:	4ba6      	ldr	r3, [pc, #664]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 8005430:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005432:	4ba5      	ldr	r3, [pc, #660]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	1dbc      	adds	r4, r7, #6
 8005438:	2101      	movs	r1, #1
 800543a:	0018      	movs	r0, r3
 800543c:	f7ff fc40 	bl	8004cc0 <ATCompare>
 8005440:	0003      	movs	r3, r0
 8005442:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005444:	1dbb      	adds	r3, r7, #6
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d108      	bne.n	800545e <ESP_Upkeep+0x15e>
 800544c:	4b9d      	ldr	r3, [pc, #628]	@ (80056c4 <ESP_Upkeep+0x3c4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0018      	movs	r0, r3
 8005452:	f008 fab7 	bl	800d9c4 <TimestampIsReached>
 8005456:	1e03      	subs	r3, r0, #0
 8005458:	d101      	bne.n	800545e <ESP_Upkeep+0x15e>
 800545a:	f000 fb9a 	bl	8005b92 <ESP_Upkeep+0x892>
          EspState = ESP_STATE_MODE_SELECT;
 800545e:	4b8c      	ldr	r3, [pc, #560]	@ (8005690 <ESP_Upkeep+0x390>)
 8005460:	220b      	movs	r2, #11
 8005462:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005464:	f000 fb95 	bl	8005b92 <ESP_Upkeep+0x892>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005468:	4b98      	ldr	r3, [pc, #608]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800546a:	2209      	movs	r2, #9
 800546c:	2114      	movs	r1, #20
 800546e:	0018      	movs	r0, r3
 8005470:	f01a f98c 	bl	801f78c <memset>
      if(!InitIsDone || WifiReset){
 8005474:	4b96      	ldr	r3, [pc, #600]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2201      	movs	r2, #1
 800547a:	4053      	eors	r3, r2
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <ESP_Upkeep+0x18a>
 8005482:	4b94      	ldr	r3, [pc, #592]	@ (80056d4 <ESP_Upkeep+0x3d4>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01a      	beq.n	80054c0 <ESP_Upkeep+0x1c0>
        memcpy(ATCommandArray, AT_INIT, 7);
 800548a:	4b90      	ldr	r3, [pc, #576]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800548c:	4a92      	ldr	r2, [pc, #584]	@ (80056d8 <ESP_Upkeep+0x3d8>)
 800548e:	6811      	ldr	r1, [r2, #0]
 8005490:	6019      	str	r1, [r3, #0]
 8005492:	8891      	ldrh	r1, [r2, #4]
 8005494:	8099      	strh	r1, [r3, #4]
 8005496:	7992      	ldrb	r2, [r2, #6]
 8005498:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 800549a:	4b7d      	ldr	r3, [pc, #500]	@ (8005690 <ESP_Upkeep+0x390>)
 800549c:	2204      	movs	r2, #4
 800549e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054a0:	4b8e      	ldr	r3, [pc, #568]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80054a6:	4b7d      	ldr	r3, [pc, #500]	@ (800569c <ESP_Upkeep+0x39c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80054ac:	4b8b      	ldr	r3, [pc, #556]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	001a      	movs	r2, r3
 80054b2:	4b86      	ldr	r3, [pc, #536]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80054b4:	5c9a      	ldrb	r2, [r3, r2]
 80054b6:	4b78      	ldr	r3, [pc, #480]	@ (8005698 <ESP_Upkeep+0x398>)
 80054b8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054ba:	4b79      	ldr	r3, [pc, #484]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80054c0:	4b83      	ldr	r3, [pc, #524]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01f      	beq.n	8005508 <ESP_Upkeep+0x208>
 80054c8:	4b85      	ldr	r3, [pc, #532]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2201      	movs	r2, #1
 80054ce:	4053      	eors	r3, r2
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <ESP_Upkeep+0x208>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80054d6:	4b7d      	ldr	r3, [pc, #500]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80054d8:	4a82      	ldr	r2, [pc, #520]	@ (80056e4 <ESP_Upkeep+0x3e4>)
 80054da:	6811      	ldr	r1, [r2, #0]
 80054dc:	6019      	str	r1, [r3, #0]
 80054de:	8892      	ldrh	r2, [r2, #4]
 80054e0:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054e2:	4b6b      	ldr	r3, [pc, #428]	@ (8005690 <ESP_Upkeep+0x390>)
 80054e4:	2204      	movs	r2, #4
 80054e6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054e8:	4b7c      	ldr	r3, [pc, #496]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80054ee:	4b6b      	ldr	r3, [pc, #428]	@ (800569c <ESP_Upkeep+0x39c>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80054f4:	4b79      	ldr	r3, [pc, #484]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	001a      	movs	r2, r3
 80054fa:	4b74      	ldr	r3, [pc, #464]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80054fc:	5c9a      	ldrb	r2, [r3, r2]
 80054fe:	4b66      	ldr	r3, [pc, #408]	@ (8005698 <ESP_Upkeep+0x398>)
 8005500:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005502:	4b67      	ldr	r3, [pc, #412]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005508:	4b71      	ldr	r3, [pc, #452]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d021      	beq.n	8005554 <ESP_Upkeep+0x254>
 8005510:	4b73      	ldr	r3, [pc, #460]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01d      	beq.n	8005554 <ESP_Upkeep+0x254>
 8005518:	4b73      	ldr	r3, [pc, #460]	@ (80056e8 <ESP_Upkeep+0x3e8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2201      	movs	r2, #1
 800551e:	4053      	eors	r3, r2
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <ESP_Upkeep+0x254>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005526:	4b71      	ldr	r3, [pc, #452]	@ (80056ec <ESP_Upkeep+0x3ec>)
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	4b68      	ldr	r3, [pc, #416]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800552c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800552e:	4b58      	ldr	r3, [pc, #352]	@ (8005690 <ESP_Upkeep+0x390>)
 8005530:	2204      	movs	r2, #4
 8005532:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005534:	4b69      	ldr	r3, [pc, #420]	@ (80056dc <ESP_Upkeep+0x3dc>)
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800553a:	4b58      	ldr	r3, [pc, #352]	@ (800569c <ESP_Upkeep+0x39c>)
 800553c:	2204      	movs	r2, #4
 800553e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005540:	4b66      	ldr	r3, [pc, #408]	@ (80056dc <ESP_Upkeep+0x3dc>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	001a      	movs	r2, r3
 8005546:	4b61      	ldr	r3, [pc, #388]	@ (80056cc <ESP_Upkeep+0x3cc>)
 8005548:	5c9a      	ldrb	r2, [r3, r2]
 800554a:	4b53      	ldr	r3, [pc, #332]	@ (8005698 <ESP_Upkeep+0x398>)
 800554c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800554e:	4b54      	ldr	r3, [pc, #336]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005554:	4b5e      	ldr	r3, [pc, #376]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02e      	beq.n	80055ba <ESP_Upkeep+0x2ba>
 800555c:	4b60      	ldr	r3, [pc, #384]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02a      	beq.n	80055ba <ESP_Upkeep+0x2ba>
 8005564:	4b60      	ldr	r3, [pc, #384]	@ (80056e8 <ESP_Upkeep+0x3e8>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d026      	beq.n	80055ba <ESP_Upkeep+0x2ba>
 800556c:	4b60      	ldr	r3, [pc, #384]	@ (80056f0 <ESP_Upkeep+0x3f0>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2201      	movs	r2, #1
 8005572:	4053      	eors	r3, r2
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01f      	beq.n	80055ba <ESP_Upkeep+0x2ba>
        memcpy(ATCommandArray, AT_SEND, 3);
 800557a:	4b54      	ldr	r3, [pc, #336]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800557c:	4a5d      	ldr	r2, [pc, #372]	@ (80056f4 <ESP_Upkeep+0x3f4>)
 800557e:	8811      	ldrh	r1, [r2, #0]
 8005580:	8019      	strh	r1, [r3, #0]
 8005582:	7892      	ldrb	r2, [r2, #2]
 8005584:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005586:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <ESP_Upkeep+0x390>)
 8005588:	2204      	movs	r2, #4
 800558a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800558c:	4b53      	ldr	r3, [pc, #332]	@ (80056dc <ESP_Upkeep+0x3dc>)
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005592:	4b42      	ldr	r3, [pc, #264]	@ (800569c <ESP_Upkeep+0x39c>)
 8005594:	2202      	movs	r2, #2
 8005596:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005598:	f008 feb6 	bl	800e308 <HAL_GetTick>
 800559c:	0002      	movs	r2, r0
 800559e:	4b56      	ldr	r3, [pc, #344]	@ (80056f8 <ESP_Upkeep+0x3f8>)
 80055a0:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80055a2:	f007 fba3 	bl	800ccec <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80055a6:	4b4d      	ldr	r3, [pc, #308]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	001a      	movs	r2, r3
 80055ac:	4b47      	ldr	r3, [pc, #284]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80055ae:	5c9a      	ldrb	r2, [r3, r2]
 80055b0:	4b39      	ldr	r3, [pc, #228]	@ (8005698 <ESP_Upkeep+0x398>)
 80055b2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055b4:	4b3a      	ldr	r3, [pc, #232]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80055ba:	4b50      	ldr	r3, [pc, #320]	@ (80056fc <ESP_Upkeep+0x3fc>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d022      	beq.n	8005608 <ESP_Upkeep+0x308>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80055c2:	4b42      	ldr	r3, [pc, #264]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80055c4:	4a4e      	ldr	r2, [pc, #312]	@ (8005700 <ESP_Upkeep+0x400>)
 80055c6:	6811      	ldr	r1, [r2, #0]
 80055c8:	6019      	str	r1, [r3, #0]
 80055ca:	7912      	ldrb	r2, [r2, #4]
 80055cc:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80055ce:	4a4d      	ldr	r2, [pc, #308]	@ (8005704 <ESP_Upkeep+0x404>)
 80055d0:	4b35      	ldr	r3, [pc, #212]	@ (80056a8 <ESP_Upkeep+0x3a8>)
 80055d2:	0019      	movs	r1, r3
 80055d4:	2003      	movs	r0, #3
 80055d6:	f008 fa4b 	bl	800da70 <CreateLine>
        DisableConnectedDevices();
 80055da:	f002 fc7f 	bl	8007edc <DisableConnectedDevices>
        EspState = ESP_STATE_SEND;
 80055de:	4b2c      	ldr	r3, [pc, #176]	@ (8005690 <ESP_Upkeep+0x390>)
 80055e0:	2204      	movs	r2, #4
 80055e2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80055e4:	4b3d      	ldr	r3, [pc, #244]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80055ea:	4b2c      	ldr	r3, [pc, #176]	@ (800569c <ESP_Upkeep+0x39c>)
 80055ec:	2203      	movs	r2, #3
 80055ee:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 80055f0:	f007 fb7c 	bl	800ccec <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80055f4:	4b39      	ldr	r3, [pc, #228]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	001a      	movs	r2, r3
 80055fa:	4b34      	ldr	r3, [pc, #208]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80055fc:	5c9a      	ldrb	r2, [r3, r2]
 80055fe:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <ESP_Upkeep+0x398>)
 8005600:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005602:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005608:	4b31      	ldr	r3, [pc, #196]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d100      	bne.n	8005612 <ESP_Upkeep+0x312>
 8005610:	e2c1      	b.n	8005b96 <ESP_Upkeep+0x896>
 8005612:	4b33      	ldr	r3, [pc, #204]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d100      	bne.n	800561c <ESP_Upkeep+0x31c>
 800561a:	e2bc      	b.n	8005b96 <ESP_Upkeep+0x896>
 800561c:	4b32      	ldr	r3, [pc, #200]	@ (80056e8 <ESP_Upkeep+0x3e8>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d100      	bne.n	8005626 <ESP_Upkeep+0x326>
 8005624:	e2b7      	b.n	8005b96 <ESP_Upkeep+0x896>
 8005626:	4b32      	ldr	r3, [pc, #200]	@ (80056f0 <ESP_Upkeep+0x3f0>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d100      	bne.n	8005630 <ESP_Upkeep+0x330>
 800562e:	e2b2      	b.n	8005b96 <ESP_Upkeep+0x896>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005630:	4b35      	ldr	r3, [pc, #212]	@ (8005708 <ESP_Upkeep+0x408>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4b25      	ldr	r3, [pc, #148]	@ (80056cc <ESP_Upkeep+0x3cc>)
 8005636:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005638:	4b15      	ldr	r3, [pc, #84]	@ (8005690 <ESP_Upkeep+0x390>)
 800563a:	2204      	movs	r2, #4
 800563c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800563e:	4b27      	ldr	r3, [pc, #156]	@ (80056dc <ESP_Upkeep+0x3dc>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005644:	4b15      	ldr	r3, [pc, #84]	@ (800569c <ESP_Upkeep+0x39c>)
 8005646:	2205      	movs	r2, #5
 8005648:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800564a:	f008 fe5d 	bl	800e308 <HAL_GetTick>
 800564e:	0002      	movs	r2, r0
 8005650:	4b29      	ldr	r3, [pc, #164]	@ (80056f8 <ESP_Upkeep+0x3f8>)
 8005652:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005654:	f007 fb4a 	bl	800ccec <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005658:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <ESP_Upkeep+0x3dc>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	001a      	movs	r2, r3
 800565e:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <ESP_Upkeep+0x3cc>)
 8005660:	5c9a      	ldrb	r2, [r3, r2]
 8005662:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <ESP_Upkeep+0x398>)
 8005664:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005666:	4b0e      	ldr	r3, [pc, #56]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
      }
    break;
 800566c:	e293      	b.n	8005b96 <ESP_Upkeep+0x896>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800566e:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <ESP_Upkeep+0x398>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	1dfc      	adds	r4, r7, #7
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff fb65 	bl	8004d44 <AT_Send>
 800567a:	0003      	movs	r3, r0
 800567c:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800567e:	1dfb      	adds	r3, r7, #7
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d100      	bne.n	8005688 <ESP_Upkeep+0x388>
 8005686:	e288      	b.n	8005b9a <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005688:	4b01      	ldr	r3, [pc, #4]	@ (8005690 <ESP_Upkeep+0x390>)
 800568a:	2203      	movs	r2, #3
 800568c:	701a      	strb	r2, [r3, #0]
        }
    break;
 800568e:	e284      	b.n	8005b9a <ESP_Upkeep+0x89a>
 8005690:	20000028 	.word	0x20000028
 8005694:	20000002 	.word	0x20000002
 8005698:	200009a2 	.word	0x200009a2
 800569c:	200009a3 	.word	0x200009a3
 80056a0:	200009a1 	.word	0x200009a1
 80056a4:	08022fd4 	.word	0x08022fd4
 80056a8:	080226f0 	.word	0x080226f0
 80056ac:	08024628 	.word	0x08024628
 80056b0:	20000548 	.word	0x20000548
 80056b4:	50000800 	.word	0x50000800
 80056b8:	50001c00 	.word	0x50001c00
 80056bc:	20000994 	.word	0x20000994
 80056c0:	20000448 	.word	0x20000448
 80056c4:	20000aa8 	.word	0x20000aa8
 80056c8:	2000002a 	.word	0x2000002a
 80056cc:	20000984 	.word	0x20000984
 80056d0:	20000549 	.word	0x20000549
 80056d4:	2000054a 	.word	0x2000054a
 80056d8:	20000004 	.word	0x20000004
 80056dc:	2000098e 	.word	0x2000098e
 80056e0:	2000054c 	.word	0x2000054c
 80056e4:	20000014 	.word	0x20000014
 80056e8:	2000054d 	.word	0x2000054d
 80056ec:	20000010 	.word	0x20000010
 80056f0:	20000001 	.word	0x20000001
 80056f4:	2000000c 	.word	0x2000000c
 80056f8:	2000055c 	.word	0x2000055c
 80056fc:	2000054b 	.word	0x2000054b
 8005700:	2000001c 	.word	0x2000001c
 8005704:	08023000 	.word	0x08023000
 8005708:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 800570c:	4be0      	ldr	r3, [pc, #896]	@ (8005a90 <ESP_Upkeep+0x790>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	0018      	movs	r0, r3
 8005712:	f008 f957 	bl	800d9c4 <TimestampIsReached>
 8005716:	1e03      	subs	r3, r0, #0
 8005718:	d100      	bne.n	800571c <ESP_Upkeep+0x41c>
 800571a:	e240      	b.n	8005b9e <ESP_Upkeep+0x89e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800571c:	4bdd      	ldr	r3, [pc, #884]	@ (8005a94 <ESP_Upkeep+0x794>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	0018      	movs	r0, r3
 8005722:	f7ff f9bb 	bl	8004a9c <DMA_ProcessBuffer>
 8005726:	0003      	movs	r3, r0
 8005728:	001a      	movs	r2, r3
 800572a:	4bdb      	ldr	r3, [pc, #876]	@ (8005a98 <ESP_Upkeep+0x798>)
 800572c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800572e:	4bda      	ldr	r3, [pc, #872]	@ (8005a98 <ESP_Upkeep+0x798>)
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	4bd8      	ldr	r3, [pc, #864]	@ (8005a94 <ESP_Upkeep+0x794>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	1d7c      	adds	r4, r7, #5
 8005738:	0019      	movs	r1, r3
 800573a:	0010      	movs	r0, r2
 800573c:	f7ff fac0 	bl	8004cc0 <ATCompare>
 8005740:	0003      	movs	r3, r0
 8005742:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005744:	4bd4      	ldr	r3, [pc, #848]	@ (8005a98 <ESP_Upkeep+0x798>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d139      	bne.n	80057c0 <ESP_Upkeep+0x4c0>
          if(ATCommand == AT_SENDDATA){
 800574c:	4bd3      	ldr	r3, [pc, #844]	@ (8005a9c <ESP_Upkeep+0x79c>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d108      	bne.n	8005766 <ESP_Upkeep+0x466>
            ATCommand = AT_HTTPCPOST;
 8005754:	4bd1      	ldr	r3, [pc, #836]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005756:	220e      	movs	r2, #14
 8005758:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800575a:	4bce      	ldr	r3, [pc, #824]	@ (8005a94 <ESP_Upkeep+0x794>)
 800575c:	2202      	movs	r2, #2
 800575e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005760:	4bcf      	ldr	r3, [pc, #828]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005766:	4bcf      	ldr	r3, [pc, #828]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005768:	2204      	movs	r2, #4
 800576a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800576c:	4bce      	ldr	r3, [pc, #824]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4bcc      	ldr	r3, [pc, #816]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 8005776:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 8005778:	4bcb      	ldr	r3, [pc, #812]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d11f      	bne.n	80057c0 <ESP_Upkeep+0x4c0>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005780:	f008 fdc2 	bl	800e308 <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	4ac9      	ldr	r2, [pc, #804]	@ (8005aac <ESP_Upkeep+0x7ac>)
 8005788:	189a      	adds	r2, r3, r2
 800578a:	4bc1      	ldr	r3, [pc, #772]	@ (8005a90 <ESP_Upkeep+0x790>)
 800578c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800578e:	4bc8      	ldr	r3, [pc, #800]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 8005794:	f007 fac2 	bl	800cd1c <ResetESPIndicator>
            clearDMABuffer();
 8005798:	f7ff fa84 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 800579c:	f008 fdb4 	bl	800e308 <HAL_GetTick>
 80057a0:	0002      	movs	r2, r0
 80057a2:	4bc4      	ldr	r3, [pc, #784]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 80057a4:	601a      	str	r2, [r3, #0]
            Debug("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80057a6:	4bc3      	ldr	r3, [pc, #780]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4bc3      	ldr	r3, [pc, #780]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	4ac2      	ldr	r2, [pc, #776]	@ (8005abc <ESP_Upkeep+0x7bc>)
 80057b2:	49c3      	ldr	r1, [pc, #780]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 80057b4:	2003      	movs	r0, #3
 80057b6:	f008 f95b 	bl	800da70 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80057ba:	4bba      	ldr	r3, [pc, #744]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80057bc:	220d      	movs	r2, #13
 80057be:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80057c0:	4bb5      	ldr	r3, [pc, #724]	@ (8005a98 <ESP_Upkeep+0x798>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d106      	bne.n	80057d6 <ESP_Upkeep+0x4d6>
          ESPTimeStamp = HAL_GetTick() + 10;
 80057c8:	f008 fd9e 	bl	800e308 <HAL_GetTick>
 80057cc:	0003      	movs	r3, r0
 80057ce:	330a      	adds	r3, #10
 80057d0:	001a      	movs	r2, r3
 80057d2:	4baf      	ldr	r3, [pc, #700]	@ (8005a90 <ESP_Upkeep+0x790>)
 80057d4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80057d6:	4bb0      	ldr	r3, [pc, #704]	@ (8005a98 <ESP_Upkeep+0x798>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b0a      	cmp	r3, #10
 80057dc:	d106      	bne.n	80057ec <ESP_Upkeep+0x4ec>
          ESPTimeStamp = HAL_GetTick() + 10;
 80057de:	f008 fd93 	bl	800e308 <HAL_GetTick>
 80057e2:	0003      	movs	r3, r0
 80057e4:	330a      	adds	r3, #10
 80057e6:	001a      	movs	r2, r3
 80057e8:	4ba9      	ldr	r3, [pc, #676]	@ (8005a90 <ESP_Upkeep+0x790>)
 80057ea:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80057ec:	4baa      	ldr	r3, [pc, #680]	@ (8005a98 <ESP_Upkeep+0x798>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b06      	cmp	r3, #6
 80057f2:	d146      	bne.n	8005882 <ESP_Upkeep+0x582>
//====
          timeoutcntr++;
 80057f4:	4bb3      	ldr	r3, [pc, #716]	@ (8005ac4 <ESP_Upkeep+0x7c4>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	4bb1      	ldr	r3, [pc, #708]	@ (8005ac4 <ESP_Upkeep+0x7c4>)
 80057fe:	701a      	strb	r2, [r3, #0]
          if (timeoutcntr == ESP_MAX_RETRANSMITIONS) {
 8005800:	4bb0      	ldr	r3, [pc, #704]	@ (8005ac4 <ESP_Upkeep+0x7c4>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d125      	bne.n	8005854 <ESP_Upkeep+0x554>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005808:	f008 fd7e 	bl	800e308 <HAL_GetTick>
 800580c:	0003      	movs	r3, r0
 800580e:	4aa7      	ldr	r2, [pc, #668]	@ (8005aac <ESP_Upkeep+0x7ac>)
 8005810:	189a      	adds	r2, r3, r2
 8005812:	4b9f      	ldr	r3, [pc, #636]	@ (8005a90 <ESP_Upkeep+0x790>)
 8005814:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005816:	4ba6      	ldr	r3, [pc, #664]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005818:	2201      	movs	r2, #1
 800581a:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 800581c:	f007 fa7e 	bl	800cd1c <ResetESPIndicator>
            clearDMABuffer();
 8005820:	f7ff fa40 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005824:	f008 fd70 	bl	800e308 <HAL_GetTick>
 8005828:	0002      	movs	r2, r0
 800582a:	4ba2      	ldr	r3, [pc, #648]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 800582c:	601a      	str	r2, [r3, #0]
            Debug("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800582e:	4ba1      	ldr	r3, [pc, #644]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4ba1      	ldr	r3, [pc, #644]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	4aa3      	ldr	r2, [pc, #652]	@ (8005ac8 <ESP_Upkeep+0x7c8>)
 800583a:	49a1      	ldr	r1, [pc, #644]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 800583c:	2003      	movs	r0, #3
 800583e:	f008 f917 	bl	800da70 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005842:	4b98      	ldr	r3, [pc, #608]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005844:	220d      	movs	r2, #13
 8005846:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005848:	4b94      	ldr	r3, [pc, #592]	@ (8005a9c <ESP_Upkeep+0x79c>)
 800584a:	2214      	movs	r2, #20
 800584c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 800584e:	4b91      	ldr	r3, [pc, #580]	@ (8005a94 <ESP_Upkeep+0x794>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
          }
//====
          if(ATCommand != AT_SENDDATA){
 8005854:	4b91      	ldr	r3, [pc, #580]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b0f      	cmp	r3, #15
 800585a:	d003      	beq.n	8005864 <ESP_Upkeep+0x564>
            EspState = ESP_STATE_SEND;
 800585c:	4b91      	ldr	r3, [pc, #580]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 800585e:	2204      	movs	r2, #4
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e00e      	b.n	8005882 <ESP_Upkeep+0x582>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005864:	4b8d      	ldr	r3, [pc, #564]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005866:	220e      	movs	r2, #14
 8005868:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800586a:	4b8d      	ldr	r3, [pc, #564]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	b2da      	uxtb	r2, r3
 8005872:	4b8b      	ldr	r3, [pc, #556]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 8005874:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005876:	4b87      	ldr	r3, [pc, #540]	@ (8005a94 <ESP_Upkeep+0x794>)
 8005878:	2202      	movs	r2, #2
 800587a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 800587c:	4b89      	ldr	r3, [pc, #548]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 800587e:	2204      	movs	r2, #4
 8005880:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005882:	1d7b      	adds	r3, r7, #5
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d100      	bne.n	800588c <ESP_Upkeep+0x58c>
 800588a:	e188      	b.n	8005b9e <ESP_Upkeep+0x89e>
          EspState = ESP_STATE_NEXT_AT;
 800588c:	4b85      	ldr	r3, [pc, #532]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 800588e:	2205      	movs	r2, #5
 8005890:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005892:	e184      	b.n	8005b9e <ESP_Upkeep+0x89e>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005894:	4b82      	ldr	r3, [pc, #520]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	3301      	adds	r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	4b80      	ldr	r3, [pc, #512]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 800589e:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80058a0:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	001a      	movs	r2, r3
 80058a6:	4b89      	ldr	r3, [pc, #548]	@ (8005acc <ESP_Upkeep+0x7cc>)
 80058a8:	5c9a      	ldrb	r2, [r3, r2]
 80058aa:	4b7c      	ldr	r3, [pc, #496]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058ac:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80058ae:	4b7b      	ldr	r3, [pc, #492]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d102      	bne.n	80058bc <ESP_Upkeep+0x5bc>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80058b6:	4b77      	ldr	r3, [pc, #476]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80058bc:	4b77      	ldr	r3, [pc, #476]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b0e      	cmp	r3, #14
 80058c2:	d102      	bne.n	80058ca <ESP_Upkeep+0x5ca>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80058c4:	4b73      	ldr	r3, [pc, #460]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058c6:	2202      	movs	r2, #2
 80058c8:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80058ca:	4b74      	ldr	r3, [pc, #464]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b0e      	cmp	r3, #14
 80058d0:	d006      	beq.n	80058e0 <ESP_Upkeep+0x5e0>
 80058d2:	4b72      	ldr	r3, [pc, #456]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d002      	beq.n	80058e0 <ESP_Upkeep+0x5e0>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058da:	4b6e      	ldr	r3, [pc, #440]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80058e0:	4b6e      	ldr	r3, [pc, #440]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b11      	cmp	r3, #17
 80058e6:	d102      	bne.n	80058ee <ESP_Upkeep+0x5ee>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80058e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058ea:	2205      	movs	r2, #5
 80058ec:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80058ee:	4b6d      	ldr	r3, [pc, #436]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80058f0:	2204      	movs	r2, #4
 80058f2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80058f4:	4b69      	ldr	r3, [pc, #420]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b14      	cmp	r3, #20
 80058fa:	d000      	beq.n	80058fe <ESP_Upkeep+0x5fe>
 80058fc:	e151      	b.n	8005ba2 <ESP_Upkeep+0x8a2>
        if(Mode == AT_MODE_SEND){
 80058fe:	4b74      	ldr	r3, [pc, #464]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d122      	bne.n	800594c <ESP_Upkeep+0x64c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005906:	f008 fcff 	bl	800e308 <HAL_GetTick>
 800590a:	0003      	movs	r3, r0
 800590c:	4a67      	ldr	r2, [pc, #412]	@ (8005aac <ESP_Upkeep+0x7ac>)
 800590e:	189a      	adds	r2, r3, r2
 8005910:	4b5f      	ldr	r3, [pc, #380]	@ (8005a90 <ESP_Upkeep+0x790>)
 8005912:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005914:	f007 fa02 	bl	800cd1c <ResetESPIndicator>
          clearDMABuffer();
 8005918:	f7ff f9c4 	bl	8004ca4 <clearDMABuffer>
          stop = HAL_GetTick();
 800591c:	f008 fcf4 	bl	800e308 <HAL_GetTick>
 8005920:	0002      	movs	r2, r0
 8005922:	4b64      	ldr	r3, [pc, #400]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005924:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 8005926:	4b63      	ldr	r3, [pc, #396]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b63      	ldr	r3, [pc, #396]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	4a68      	ldr	r2, [pc, #416]	@ (8005ad4 <ESP_Upkeep+0x7d4>)
 8005932:	4963      	ldr	r1, [pc, #396]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 8005934:	2003      	movs	r0, #3
 8005936:	f008 f89b 	bl	800da70 <CreateLine>
          showTime();
 800593a:	f000 fcc9 	bl	80062d0 <showTime>
          ESPTransmitDone = true;
 800593e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005944:	4b57      	ldr	r3, [pc, #348]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005946:	220d      	movs	r2, #13
 8005948:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 800594a:	e12a      	b.n	8005ba2 <ESP_Upkeep+0x8a2>
        else if (Mode == AT_MODE_GETTIME) {
 800594c:	4b60      	ldr	r3, [pc, #384]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b05      	cmp	r3, #5
 8005952:	d12e      	bne.n	80059b2 <ESP_Upkeep+0x6b2>
            setTime = false;
 8005954:	4b60      	ldr	r3, [pc, #384]	@ (8005ad8 <ESP_Upkeep+0x7d8>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 800595a:	f008 fcd5 	bl	800e308 <HAL_GetTick>
 800595e:	0003      	movs	r3, r0
 8005960:	4a5e      	ldr	r2, [pc, #376]	@ (8005adc <ESP_Upkeep+0x7dc>)
 8005962:	189a      	adds	r2, r3, r2
 8005964:	4b5e      	ldr	r3, [pc, #376]	@ (8005ae0 <ESP_Upkeep+0x7e0>)
 8005966:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005968:	4b5d      	ldr	r3, [pc, #372]	@ (8005ae0 <ESP_Upkeep+0x7e0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ae4 <ESP_Upkeep+0x7e4>)
 800596e:	4954      	ldr	r1, [pc, #336]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 8005970:	2003      	movs	r0, #3
 8005972:	f008 f87d 	bl	800da70 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005976:	4b5c      	ldr	r3, [pc, #368]	@ (8005ae8 <ESP_Upkeep+0x7e8>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4b45      	ldr	r3, [pc, #276]	@ (8005a90 <ESP_Upkeep+0x790>)
 800597c:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 800597e:	f007 f9cd 	bl	800cd1c <ResetESPIndicator>
            clearDMABuffer();
 8005982:	f7ff f98f 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005986:	f008 fcbf 	bl	800e308 <HAL_GetTick>
 800598a:	0002      	movs	r2, r0
 800598c:	4b49      	ldr	r3, [pc, #292]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 800598e:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 8005990:	4b48      	ldr	r3, [pc, #288]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b48      	ldr	r3, [pc, #288]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	4a54      	ldr	r2, [pc, #336]	@ (8005aec <ESP_Upkeep+0x7ec>)
 800599c:	4948      	ldr	r1, [pc, #288]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 800599e:	2003      	movs	r0, #3
 80059a0:	f008 f866 	bl	800da70 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80059a4:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80059a6:	220d      	movs	r2, #13
 80059a8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 80059aa:	4b49      	ldr	r3, [pc, #292]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 80059ac:	2202      	movs	r2, #2
 80059ae:	701a      	strb	r2, [r3, #0]
    break;
 80059b0:	e0f7      	b.n	8005ba2 <ESP_Upkeep+0x8a2>
          EspState = ESP_STATE_RESET;
 80059b2:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80059b4:	2209      	movs	r2, #9
 80059b6:	701a      	strb	r2, [r3, #0]
    break;
 80059b8:	e0f3      	b.n	8005ba2 <ESP_Upkeep+0x8a2>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80059ba:	4b4d      	ldr	r3, [pc, #308]	@ (8005af0 <ESP_Upkeep+0x7f0>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80059c0:	4b4c      	ldr	r3, [pc, #304]	@ (8005af4 <ESP_Upkeep+0x7f4>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	2101      	movs	r1, #1
 80059c6:	0018      	movs	r0, r3
 80059c8:	f009 ff19 	bl	800f7fe <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80059cc:	2001      	movs	r0, #1
 80059ce:	f008 fca5 	bl	800e31c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	4848      	ldr	r0, [pc, #288]	@ (8005af8 <ESP_Upkeep+0x7f8>)
 80059d8:	2200      	movs	r2, #0
 80059da:	0019      	movs	r1, r3
 80059dc:	f009 ff0f 	bl	800f7fe <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f008 fc9b 	bl	800e31c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80059e6:	4b43      	ldr	r3, [pc, #268]	@ (8005af4 <ESP_Upkeep+0x7f4>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	2102      	movs	r1, #2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f009 ff06 	bl	800f7fe <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80059f2:	4b2c      	ldr	r3, [pc, #176]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80059f4:	2209      	movs	r2, #9
 80059f6:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80059f8:	2001      	movs	r0, #1
 80059fa:	f008 fc8f 	bl	800e31c <HAL_Delay>
      errorcntr = 0;
 80059fe:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
      break;
 8005a04:	e0d0      	b.n	8005ba8 <ESP_Upkeep+0x8a8>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005a06:	4b22      	ldr	r3, [pc, #136]	@ (8005a90 <ESP_Upkeep+0x790>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f007 ffda 	bl	800d9c4 <TimestampIsReached>
 8005a10:	1e03      	subs	r3, r0, #0
 8005a12:	d104      	bne.n	8005a1e <ESP_Upkeep+0x71e>
 8005a14:	4b39      	ldr	r3, [pc, #228]	@ (8005afc <ESP_Upkeep+0x7fc>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d100      	bne.n	8005a1e <ESP_Upkeep+0x71e>
 8005a1c:	e07a      	b.n	8005b14 <ESP_Upkeep+0x814>
        ESPTransmitDone = false;
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005a24:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <ESP_Upkeep+0x738>
          InitIsDone = true;
 8005a2c:	4b34      	ldr	r3, [pc, #208]	@ (8005b00 <ESP_Upkeep+0x800>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a32:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a34:	220b      	movs	r2, #11
 8005a36:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005a38:	4b25      	ldr	r3, [pc, #148]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d108      	bne.n	8005a52 <ESP_Upkeep+0x752>
          ConnectionMade = true;
 8005a40:	4b30      	ldr	r3, [pc, #192]	@ (8005b04 <ESP_Upkeep+0x804>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005a46:	4b30      	ldr	r3, [pc, #192]	@ (8005b08 <ESP_Upkeep+0x808>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a4c:	4b15      	ldr	r3, [pc, #84]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a4e:	220b      	movs	r2, #11
 8005a50:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005a52:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d102      	bne.n	8005a60 <ESP_Upkeep+0x760>
          EspState = ESP_STATE_INIT;
 8005a5a:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d108      	bne.n	8005a7a <ESP_Upkeep+0x77a>
          EspState = ESP_STATE_CONFIG;
 8005a68:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a6a:	220e      	movs	r2, #14
 8005a6c:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 8005a6e:	4a27      	ldr	r2, [pc, #156]	@ (8005b0c <ESP_Upkeep+0x80c>)
 8005a70:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 8005a72:	0019      	movs	r1, r3
 8005a74:	2003      	movs	r0, #3
 8005a76:	f007 fffb 	bl	800da70 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005a7a:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d167      	bne.n	8005b52 <ESP_Upkeep+0x852>
          EspState = ESP_STATE_MODE_SELECT;
 8005a82:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a84:	220b      	movs	r2, #11
 8005a86:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005a88:	4b21      	ldr	r3, [pc, #132]	@ (8005b10 <ESP_Upkeep+0x810>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005a8e:	e060      	b.n	8005b52 <ESP_Upkeep+0x852>
 8005a90:	20000994 	.word	0x20000994
 8005a94:	200009a1 	.word	0x200009a1
 8005a98:	2000002a 	.word	0x2000002a
 8005a9c:	200009a2 	.word	0x200009a2
 8005aa0:	2000098e 	.word	0x2000098e
 8005aa4:	20000028 	.word	0x20000028
 8005aa8:	2000098f 	.word	0x2000098f
 8005aac:	000493e0 	.word	0x000493e0
 8005ab0:	2000054f 	.word	0x2000054f
 8005ab4:	20000560 	.word	0x20000560
 8005ab8:	2000055c 	.word	0x2000055c
 8005abc:	08023030 	.word	0x08023030
 8005ac0:	080226f0 	.word	0x080226f0
 8005ac4:	20000990 	.word	0x20000990
 8005ac8:	08023064 	.word	0x08023064
 8005acc:	20000984 	.word	0x20000984
 8005ad0:	200009a3 	.word	0x200009a3
 8005ad4:	08023094 	.word	0x08023094
 8005ad8:	20000001 	.word	0x20000001
 8005adc:	002c4020 	.word	0x002c4020
 8005ae0:	20000998 	.word	0x20000998
 8005ae4:	080230ac 	.word	0x080230ac
 8005ae8:	2000099c 	.word	0x2000099c
 8005aec:	080230f0 	.word	0x080230f0
 8005af0:	20000548 	.word	0x20000548
 8005af4:	50001c00 	.word	0x50001c00
 8005af8:	50000800 	.word	0x50000800
 8005afc:	2000054b 	.word	0x2000054b
 8005b00:	20000549 	.word	0x20000549
 8005b04:	2000054c 	.word	0x2000054c
 8005b08:	2000054e 	.word	0x2000054e
 8005b0c:	08023110 	.word	0x08023110
 8005b10:	2000054d 	.word	0x2000054d
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005b14:	4b27      	ldr	r3, [pc, #156]	@ (8005bb4 <ESP_Upkeep+0x8b4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f007 ff53 	bl	800d9c4 <TimestampIsReached>
 8005b1e:	1e03      	subs	r3, r0, #0
 8005b20:	d041      	beq.n	8005ba6 <ESP_Upkeep+0x8a6>
        if(Mode == AT_MODE_SEND ) {
 8005b22:	4b25      	ldr	r3, [pc, #148]	@ (8005bb8 <ESP_Upkeep+0x8b8>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d13d      	bne.n	8005ba6 <ESP_Upkeep+0x8a6>
            Mode = AT_MODE_GETTIME;
 8005b2a:	4b23      	ldr	r3, [pc, #140]	@ (8005bb8 <ESP_Upkeep+0x8b8>)
 8005b2c:	2205      	movs	r2, #5
 8005b2e:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005b30:	4b22      	ldr	r3, [pc, #136]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005b32:	2202      	movs	r2, #2
 8005b34:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005b36:	4b22      	ldr	r3, [pc, #136]	@ (8005bc0 <ESP_Upkeep+0x8c0>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b22      	ldr	r3, [pc, #136]	@ (8005bc4 <ESP_Upkeep+0x8c4>)
 8005b3c:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005b3e:	4b22      	ldr	r3, [pc, #136]	@ (8005bc8 <ESP_Upkeep+0x8c8>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005b44:	4a21      	ldr	r2, [pc, #132]	@ (8005bcc <ESP_Upkeep+0x8cc>)
 8005b46:	4b22      	ldr	r3, [pc, #136]	@ (8005bd0 <ESP_Upkeep+0x8d0>)
 8005b48:	0019      	movs	r1, r3
 8005b4a:	2003      	movs	r0, #3
 8005b4c:	f007 ff90 	bl	800da70 <CreateLine>
        }
      }
      break;
 8005b50:	e029      	b.n	8005ba6 <ESP_Upkeep+0x8a6>
 8005b52:	e028      	b.n	8005ba6 <ESP_Upkeep+0x8a6>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 8005b54:	f016 fc02 	bl	801c35c <GetUsbRxPointer>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f8b0 	bl	8005cc0 <Process_PC_Config>
      break;
 8005b60:	e022      	b.n	8005ba8 <ESP_Upkeep+0x8a8>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005b62:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd4 <ESP_Upkeep+0x8d4>)
 8005b64:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd0 <ESP_Upkeep+0x8d0>)
 8005b66:	0019      	movs	r1, r3
 8005b68:	2003      	movs	r0, #3
 8005b6a:	f007 ff81 	bl	800da70 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005b6e:	4b13      	ldr	r3, [pc, #76]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005b70:	2202      	movs	r2, #2
 8005b72:	701a      	strb	r2, [r3, #0]
      break;
 8005b74:	e018      	b.n	8005ba8 <ESP_Upkeep+0x8a8>

    default:
      // Handle unexpected state
      Debug("Something unknown went wrong with the ESP_STATE");
 8005b76:	4a18      	ldr	r2, [pc, #96]	@ (8005bd8 <ESP_Upkeep+0x8d8>)
 8005b78:	4b15      	ldr	r3, [pc, #84]	@ (8005bd0 <ESP_Upkeep+0x8d0>)
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	f007 ff77 	bl	800da70 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005b82:	4b0e      	ldr	r3, [pc, #56]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005b84:	2207      	movs	r2, #7
 8005b86:	701a      	strb	r2, [r3, #0]
      break;
 8005b88:	e00e      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
      break;
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	e00c      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
      break;
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	e00a      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
        break;
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	e008      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
    break;
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	e006      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
    break;
 8005b9a:	46c0      	nop			@ (mov r8, r8)
 8005b9c:	e004      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
      break;
 8005b9e:	46c0      	nop			@ (mov r8, r8)
 8005ba0:	e002      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
    break;
 8005ba2:	46c0      	nop			@ (mov r8, r8)
 8005ba4:	e000      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
      break;
 8005ba6:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005ba8:	4b04      	ldr	r3, [pc, #16]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b002      	add	sp, #8
 8005bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8005bb4:	20000998 	.word	0x20000998
 8005bb8:	200009a3 	.word	0x200009a3
 8005bbc:	20000028 	.word	0x20000028
 8005bc0:	20000994 	.word	0x20000994
 8005bc4:	2000099c 	.word	0x2000099c
 8005bc8:	20000001 	.word	0x20000001
 8005bcc:	08023128 	.word	0x08023128
 8005bd0:	080226f0 	.word	0x080226f0
 8005bd4:	08023138 	.word	0x08023138
 8005bd8:	0802314c 	.word	0x0802314c

08005bdc <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005be4:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <I2CSensors_Init+0x30>)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005bea:	4a09      	ldr	r2, [pc, #36]	@ (8005c10 <I2CSensors_Init+0x34>)
 8005bec:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <I2CSensors_Init+0x38>)
 8005bee:	0011      	movs	r1, r2
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f008 f897 	bl	800dd24 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005bf6:	4a06      	ldr	r2, [pc, #24]	@ (8005c10 <I2CSensors_Init+0x34>)
 8005bf8:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <I2CSensors_Init+0x38>)
 8005bfa:	0011      	movs	r1, r2
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f005 fa13 	bl	800b028 <SGP_Init>
}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b002      	add	sp, #8
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	46c0      	nop			@ (mov r8, r8)
 8005c0c:	20000aac 	.word	0x20000aac
 8005c10:	08005c6d 	.word	0x08005c6d
 8005c14:	08005c19 	.word	0x08005c19

08005c18 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005c18:	b5b0      	push	{r4, r5, r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6039      	str	r1, [r7, #0]
 8005c20:	0011      	movs	r1, r2
 8005c22:	1dfb      	adds	r3, r7, #7
 8005c24:	1c02      	adds	r2, r0, #0
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	1dbb      	adds	r3, r7, #6
 8005c2a:	1c0a      	adds	r2, r1, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c68 <ReadI2C+0x50>)
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	1dfb      	adds	r3, r7, #7
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	18db      	adds	r3, r3, r3
 8005c3a:	b299      	uxth	r1, r3
 8005c3c:	1dbb      	adds	r3, r7, #6
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	250f      	movs	r5, #15
 8005c44:	197c      	adds	r4, r7, r5
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	f00a f9be 	bl	800ffc8 <HAL_I2C_Master_Receive_DMA>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005c50:	197b      	adds	r3, r7, r5
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <ReadI2C+0x44>
        return false;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <ReadI2C+0x46>
    }
    return true;
 8005c5c:	2301      	movs	r3, #1
}
 8005c5e:	0018      	movs	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b004      	add	sp, #16
 8005c64:	bdb0      	pop	{r4, r5, r7, pc}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	20000aac 	.word	0x20000aac

08005c6c <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005c6c:	b5b0      	push	{r4, r5, r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6039      	str	r1, [r7, #0]
 8005c74:	0011      	movs	r1, r2
 8005c76:	1dfb      	adds	r3, r7, #7
 8005c78:	1c02      	adds	r2, r0, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	1dbb      	adds	r3, r7, #6
 8005c7e:	1c0a      	adds	r2, r1, #0
 8005c80:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005c82:	4b0e      	ldr	r3, [pc, #56]	@ (8005cbc <WriteI2C+0x50>)
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	1dfb      	adds	r3, r7, #7
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	18db      	adds	r3, r3, r3
 8005c8e:	b299      	uxth	r1, r3
 8005c90:	1dbb      	adds	r3, r7, #6
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	250f      	movs	r5, #15
 8005c98:	197c      	adds	r4, r7, r5
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	f00a f88e 	bl	800fdbc <HAL_I2C_Master_Transmit_DMA>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ca4:	197b      	adds	r3, r7, r5
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <WriteI2C+0x44>
        return false;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <WriteI2C+0x46>
    }
    return true;
 8005cb0:	2301      	movs	r3, #1
}
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b004      	add	sp, #16
 8005cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	20000aac 	.word	0x20000aac

08005cc0 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b0c3      	sub	sp, #268	@ 0x10c
 8005cc4:	af3e      	add	r7, sp, #248	@ 0xf8
 8005cc6:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005cc8:	f016 fb68 	bl	801c39c <GetUsbRxDataSize>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d971      	bls.n	8005dba <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2123      	movs	r1, #35	@ 0x23
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f019 fd5e 	bl	801f79c <strchr>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d065      	beq.n	8005db6 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	785a      	ldrb	r2, [r3, #1]
 8005cee:	4b34      	ldr	r3, [pc, #208]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005cf0:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	789a      	ldrb	r2, [r3, #2]
 8005cf6:	4b32      	ldr	r3, [pc, #200]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005cf8:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005cfa:	4b31      	ldr	r3, [pc, #196]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005cfc:	785b      	ldrb	r3, [r3, #1]
 8005cfe:	3305      	adds	r3, #5
 8005d00:	001a      	movs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d351      	bcc.n	8005dac <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	1cd9      	adds	r1, r3, #3
 8005d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	001a      	movs	r2, r3
 8005d12:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <Process_PC_Config+0x104>)
 8005d14:	0018      	movs	r0, r3
 8005d16:	f019 fe15 	bl	801f944 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005d1a:	4b29      	ldr	r3, [pc, #164]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	3303      	adds	r3, #3
 8005d20:	001a      	movs	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	b21a      	sxth	r2, r3
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	3304      	adds	r3, #4
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	18cb      	adds	r3, r1, r3
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b21b      	sxth	r3, r3
 8005d3e:	b299      	uxth	r1, r3
 8005d40:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d42:	2381      	movs	r3, #129	@ 0x81
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005d48:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d4a:	2381      	movs	r3, #129	@ 0x81
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	5ad4      	ldrh	r4, [r2, r3]
 8005d50:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	3303      	adds	r3, #3
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f000 f975 	bl	800604c <CRC16_ARC>
 8005d62:	0003      	movs	r3, r0
 8005d64:	429c      	cmp	r4, r3
 8005d66:	d007      	beq.n	8005d78 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005d68:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d6a:	785a      	ldrb	r2, [r3, #1]
 8005d6c:	4b15      	ldr	r3, [pc, #84]	@ (8005dc4 <Process_PC_Config+0x104>)
 8005d6e:	0019      	movs	r1, r3
 8005d70:	2001      	movs	r0, #1
 8005d72:	f000 f919 	bl	8005fa8 <Create_Message>
 8005d76:	e016      	b.n	8005da6 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005d78:	4c11      	ldr	r4, [pc, #68]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d7a:	466b      	mov	r3, sp
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	0023      	movs	r3, r4
 8005d80:	3310      	adds	r3, #16
 8005d82:	22f4      	movs	r2, #244	@ 0xf4
 8005d84:	0019      	movs	r1, r3
 8005d86:	f019 fddd 	bl	801f944 <memcpy>
 8005d8a:	6820      	ldr	r0, [r4, #0]
 8005d8c:	6861      	ldr	r1, [r4, #4]
 8005d8e:	68a2      	ldr	r2, [r4, #8]
 8005d90:	68e3      	ldr	r3, [r4, #12]
 8005d92:	f000 f819 	bl	8005dc8 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005d96:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d98:	7818      	ldrb	r0, [r3, #0]
 8005d9a:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d9c:	785a      	ldrb	r2, [r3, #1]
 8005d9e:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <Process_PC_Config+0x104>)
 8005da0:	0019      	movs	r1, r3
 8005da2:	f000 f901 	bl	8005fa8 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005da6:	f016 fae1 	bl	801c36c <ResetUsbRxDataSize>
                return;
 8005daa:	e006      	b.n	8005dba <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f016 fafe 	bl	801c3b0 <GetUsbRxNextChunk>
 8005db4:	e001      	b.n	8005dba <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005db6:	f016 fad9 	bl	801c36c <ResetUsbRxDataSize>
        }
    }
}
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b005      	add	sp, #20
 8005dbe:	bd90      	pop	{r4, r7, pc}
 8005dc0:	20000ab0 	.word	0x20000ab0
 8005dc4:	20000ab2 	.word	0x20000ab2

08005dc8 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005dc8:	b084      	sub	sp, #16
 8005dca:	b5b0      	push	{r4, r5, r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	2518      	movs	r5, #24
 8005dd2:	197c      	adds	r4, r7, r5
 8005dd4:	6020      	str	r0, [r4, #0]
 8005dd6:	6061      	str	r1, [r4, #4]
 8005dd8:	60a2      	str	r2, [r4, #8]
 8005dda:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005ddc:	197b      	adds	r3, r7, r5
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2bfe      	cmp	r3, #254	@ 0xfe
 8005de2:	d100      	bne.n	8005de6 <ProcessCmd+0x1e>
 8005de4:	e09c      	b.n	8005f20 <ProcessCmd+0x158>
 8005de6:	dd00      	ble.n	8005dea <ProcessCmd+0x22>
 8005de8:	e0bc      	b.n	8005f64 <ProcessCmd+0x19c>
 8005dea:	2b0c      	cmp	r3, #12
 8005dec:	dc0a      	bgt.n	8005e04 <ProcessCmd+0x3c>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da00      	bge.n	8005df4 <ProcessCmd+0x2c>
 8005df2:	e0b7      	b.n	8005f64 <ProcessCmd+0x19c>
 8005df4:	2b0c      	cmp	r3, #12
 8005df6:	d900      	bls.n	8005dfa <ProcessCmd+0x32>
 8005df8:	e0b4      	b.n	8005f64 <ProcessCmd+0x19c>
 8005dfa:	009a      	lsls	r2, r3, #2
 8005dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8005f74 <ProcessCmd+0x1ac>)
 8005dfe:	18d3      	adds	r3, r2, r3
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	469f      	mov	pc, r3
 8005e04:	2bfd      	cmp	r3, #253	@ 0xfd
 8005e06:	d100      	bne.n	8005e0a <ProcessCmd+0x42>
 8005e08:	e084      	b.n	8005f14 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005e0a:	e0ab      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e0c:	2118      	movs	r1, #24
 8005e0e:	187b      	adds	r3, r7, r1
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	001a      	movs	r2, r3
 8005e14:	187b      	adds	r3, r7, r1
 8005e16:	1c99      	adds	r1, r3, #2
 8005e18:	4857      	ldr	r0, [pc, #348]	@ (8005f78 <ProcessCmd+0x1b0>)
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	f7fd fc50 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e20:	e0a0      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e22:	2118      	movs	r1, #24
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	001a      	movs	r2, r3
 8005e2a:	187b      	adds	r3, r7, r1
 8005e2c:	1c99      	adds	r1, r3, #2
 8005e2e:	4853      	ldr	r0, [pc, #332]	@ (8005f7c <ProcessCmd+0x1b4>)
 8005e30:	230c      	movs	r3, #12
 8005e32:	f7fd fc45 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e36:	e095      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e38:	2118      	movs	r1, #24
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	001a      	movs	r2, r3
 8005e40:	187b      	adds	r3, r7, r1
 8005e42:	1c99      	adds	r1, r3, #2
 8005e44:	484e      	ldr	r0, [pc, #312]	@ (8005f80 <ProcessCmd+0x1b8>)
 8005e46:	230c      	movs	r3, #12
 8005e48:	f7fd fc3a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e4c:	e08a      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e4e:	2118      	movs	r1, #24
 8005e50:	187b      	adds	r3, r7, r1
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	001a      	movs	r2, r3
 8005e56:	187b      	adds	r3, r7, r1
 8005e58:	1c99      	adds	r1, r3, #2
 8005e5a:	484a      	ldr	r0, [pc, #296]	@ (8005f84 <ProcessCmd+0x1bc>)
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	f7fd fc2f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e62:	e07f      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e64:	2118      	movs	r1, #24
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	001a      	movs	r2, r3
 8005e6c:	187b      	adds	r3, r7, r1
 8005e6e:	1c99      	adds	r1, r3, #2
 8005e70:	4845      	ldr	r0, [pc, #276]	@ (8005f88 <ProcessCmd+0x1c0>)
 8005e72:	230c      	movs	r3, #12
 8005e74:	f7fd fc24 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e78:	e074      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e7a:	2118      	movs	r1, #24
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	001a      	movs	r2, r3
 8005e82:	187b      	adds	r3, r7, r1
 8005e84:	1c99      	adds	r1, r3, #2
 8005e86:	4841      	ldr	r0, [pc, #260]	@ (8005f8c <ProcessCmd+0x1c4>)
 8005e88:	230c      	movs	r3, #12
 8005e8a:	f7fd fc19 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e8e:	e069      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e90:	2118      	movs	r1, #24
 8005e92:	187b      	adds	r3, r7, r1
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	001a      	movs	r2, r3
 8005e98:	187b      	adds	r3, r7, r1
 8005e9a:	1c99      	adds	r1, r3, #2
 8005e9c:	483c      	ldr	r0, [pc, #240]	@ (8005f90 <ProcessCmd+0x1c8>)
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	f7fd fc0e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ea4:	e05e      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005ea6:	2118      	movs	r1, #24
 8005ea8:	187b      	adds	r3, r7, r1
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	001a      	movs	r2, r3
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	1c99      	adds	r1, r3, #2
 8005eb2:	4838      	ldr	r0, [pc, #224]	@ (8005f94 <ProcessCmd+0x1cc>)
 8005eb4:	231e      	movs	r3, #30
 8005eb6:	f7fd fc03 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005eba:	e053      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ebc:	2118      	movs	r1, #24
 8005ebe:	187b      	adds	r3, r7, r1
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	001a      	movs	r2, r3
 8005ec4:	187b      	adds	r3, r7, r1
 8005ec6:	1c99      	adds	r1, r3, #2
 8005ec8:	4833      	ldr	r0, [pc, #204]	@ (8005f98 <ProcessCmd+0x1d0>)
 8005eca:	230c      	movs	r3, #12
 8005ecc:	f7fd fbf8 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ed0:	e048      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ed2:	2118      	movs	r1, #24
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	001a      	movs	r2, r3
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	1c99      	adds	r1, r3, #2
 8005ede:	482f      	ldr	r0, [pc, #188]	@ (8005f9c <ProcessCmd+0x1d4>)
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	f7fd fbed 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ee6:	e03d      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ee8:	2118      	movs	r1, #24
 8005eea:	187b      	adds	r3, r7, r1
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	001a      	movs	r2, r3
 8005ef0:	187b      	adds	r3, r7, r1
 8005ef2:	1c99      	adds	r1, r3, #2
 8005ef4:	482a      	ldr	r0, [pc, #168]	@ (8005fa0 <ProcessCmd+0x1d8>)
 8005ef6:	230c      	movs	r3, #12
 8005ef8:	f7fd fbe2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005efc:	e032      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005efe:	2118      	movs	r1, #24
 8005f00:	187b      	adds	r3, r7, r1
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	001a      	movs	r2, r3
 8005f06:	187b      	adds	r3, r7, r1
 8005f08:	1c99      	adds	r1, r3, #2
 8005f0a:	4826      	ldr	r0, [pc, #152]	@ (8005fa4 <ProcessCmd+0x1dc>)
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	f7fd fbd7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f12:	e027      	b.n	8005f64 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005f14:	4b18      	ldr	r3, [pc, #96]	@ (8005f78 <ProcessCmd+0x1b0>)
 8005f16:	21ba      	movs	r1, #186	@ 0xba
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fd fc16 	bl	800374a <ClearEEprom>
        break;
 8005f1e:	e021      	b.n	8005f64 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005f20:	2118      	movs	r1, #24
 8005f22:	187b      	adds	r3, r7, r1
 8005f24:	789b      	ldrb	r3, [r3, #2]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	b21a      	sxth	r2, r3
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	78db      	ldrb	r3, [r3, #3]
 8005f2e:	b21b      	sxth	r3, r3
 8005f30:	4313      	orrs	r3, r2
 8005f32:	b21a      	sxth	r2, r3
 8005f34:	1dbb      	adds	r3, r7, #6
 8005f36:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005f38:	1dbb      	adds	r3, r7, #6
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	23c0      	movs	r3, #192	@ 0xc0
 8005f3e:	015b      	lsls	r3, r3, #5
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d207      	bcs.n	8005f54 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005f44:	1dbb      	adds	r3, r7, #6
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	4a0b      	ldr	r2, [pc, #44]	@ (8005f78 <ProcessCmd+0x1b0>)
 8005f4a:	0019      	movs	r1, r3
 8005f4c:	0010      	movs	r0, r2
 8005f4e:	f7fd fbfc 	bl	800374a <ClearEEprom>
            break;
 8005f52:	e006      	b.n	8005f62 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005f54:	23c0      	movs	r3, #192	@ 0xc0
 8005f56:	015b      	lsls	r3, r3, #5
 8005f58:	4a07      	ldr	r2, [pc, #28]	@ (8005f78 <ProcessCmd+0x1b0>)
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	0010      	movs	r0, r2
 8005f5e:	f7fd fbf4 	bl	800374a <ClearEEprom>
            break;
 8005f62:	46c0      	nop			@ (mov r8, r8)
}
 8005f64:	46c0      	nop			@ (mov r8, r8)
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bcb0      	pop	{r4, r5, r7}
 8005f6c:	bc08      	pop	{r3}
 8005f6e:	b004      	add	sp, #16
 8005f70:	4718      	bx	r3
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	08024668 	.word	0x08024668
 8005f78:	08080000 	.word	0x08080000
 8005f7c:	0808000c 	.word	0x0808000c
 8005f80:	08080018 	.word	0x08080018
 8005f84:	08080024 	.word	0x08080024
 8005f88:	08080030 	.word	0x08080030
 8005f8c:	0808003c 	.word	0x0808003c
 8005f90:	08080048 	.word	0x08080048
 8005f94:	08080090 	.word	0x08080090
 8005f98:	08080078 	.word	0x08080078
 8005f9c:	0808006c 	.word	0x0808006c
 8005fa0:	08080060 	.word	0x08080060
 8005fa4:	08080054 	.word	0x08080054

08005fa8 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6039      	str	r1, [r7, #0]
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	1dfb      	adds	r3, r7, #7
 8005fb4:	1c02      	adds	r2, r0, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	1dbb      	adds	r3, r7, #6
 8005fba:	1c0a      	adds	r2, r1, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005fbe:	2223      	movs	r2, #35	@ 0x23
 8005fc0:	4b20      	ldr	r3, [pc, #128]	@ (8006044 <Create_Message+0x9c>)
 8005fc2:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8006044 <Create_Message+0x9c>)
 8005fc6:	1dfa      	adds	r2, r7, #7
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006044 <Create_Message+0x9c>)
 8005fce:	1dba      	adds	r2, r7, #6
 8005fd0:	7812      	ldrb	r2, [r2, #0]
 8005fd2:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005fd4:	1dbb      	adds	r3, r7, #6
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	4b1b      	ldr	r3, [pc, #108]	@ (8006048 <Create_Message+0xa0>)
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f019 fcb1 	bl	801f944 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005fe2:	1dbb      	adds	r3, r7, #6
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	250e      	movs	r5, #14
 8005fea:	197b      	adds	r3, r7, r5
 8005fec:	3203      	adds	r2, #3
 8005fee:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005ff0:	260c      	movs	r6, #12
 8005ff2:	19bc      	adds	r4, r7, r6
 8005ff4:	197b      	adds	r3, r7, r5
 8005ff6:	881a      	ldrh	r2, [r3, #0]
 8005ff8:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <Create_Message+0x9c>)
 8005ffa:	0011      	movs	r1, r2
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 f825 	bl	800604c <CRC16_ARC>
 8006002:	0003      	movs	r3, r0
 8006004:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8006006:	0030      	movs	r0, r6
 8006008:	183b      	adds	r3, r7, r0
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	b29a      	uxth	r2, r3
 8006010:	197b      	adds	r3, r7, r5
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b2d1      	uxtb	r1, r2
 8006016:	4a0b      	ldr	r2, [pc, #44]	@ (8006044 <Create_Message+0x9c>)
 8006018:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800601a:	197b      	adds	r3, r7, r5
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	183a      	adds	r2, r7, r0
 8006022:	8812      	ldrh	r2, [r2, #0]
 8006024:	b2d1      	uxtb	r1, r2
 8006026:	4a07      	ldr	r2, [pc, #28]	@ (8006044 <Create_Message+0x9c>)
 8006028:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800602a:	197b      	adds	r3, r7, r5
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	3302      	adds	r3, #2
 8006030:	b29a      	uxth	r2, r3
 8006032:	4b04      	ldr	r3, [pc, #16]	@ (8006044 <Create_Message+0x9c>)
 8006034:	0011      	movs	r1, r2
 8006036:	0018      	movs	r0, r3
 8006038:	f016 f956 	bl	801c2e8 <CDC_Transmit_FS>
}
 800603c:	46c0      	nop			@ (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	b005      	add	sp, #20
 8006042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006044:	20000bb4 	.word	0x20000bb4
 8006048:	20000bb7 	.word	0x20000bb7

0800604c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	000a      	movs	r2, r1
 8006056:	1cbb      	adds	r3, r7, #2
 8006058:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800605a:	2316      	movs	r3, #22
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	2200      	movs	r2, #0
 8006060:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	e02e      	b.n	80060c6 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	18d3      	adds	r3, r2, r3
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	0019      	movs	r1, r3
 8006072:	2216      	movs	r2, #22
 8006074:	18bb      	adds	r3, r7, r2
 8006076:	18ba      	adds	r2, r7, r2
 8006078:	8812      	ldrh	r2, [r2, #0]
 800607a:	404a      	eors	r2, r1
 800607c:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e01a      	b.n	80060ba <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006084:	2116      	movs	r1, #22
 8006086:	187b      	adds	r3, r7, r1
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	4013      	ands	r3, r2
 800608e:	d00b      	beq.n	80060a8 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8006090:	187b      	adds	r3, r7, r1
 8006092:	187a      	adds	r2, r7, r1
 8006094:	8812      	ldrh	r2, [r2, #0]
 8006096:	0852      	lsrs	r2, r2, #1
 8006098:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800609a:	187b      	adds	r3, r7, r1
 800609c:	187a      	adds	r2, r7, r1
 800609e:	8812      	ldrh	r2, [r2, #0]
 80060a0:	490f      	ldr	r1, [pc, #60]	@ (80060e0 <CRC16_ARC+0x94>)
 80060a2:	404a      	eors	r2, r1
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e005      	b.n	80060b4 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80060a8:	2216      	movs	r2, #22
 80060aa:	18bb      	adds	r3, r7, r2
 80060ac:	18ba      	adds	r2, r7, r2
 80060ae:	8812      	ldrh	r2, [r2, #0]
 80060b0:	0852      	lsrs	r2, r2, #1
 80060b2:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b07      	cmp	r3, #7
 80060be:	dde1      	ble.n	8006084 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	3301      	adds	r3, #1
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	1cbb      	adds	r3, r7, #2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	dbcb      	blt.n	8006068 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80060d0:	2316      	movs	r3, #22
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	881b      	ldrh	r3, [r3, #0]
}
 80060d6:	0018      	movs	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	b006      	add	sp, #24
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	46c0      	nop			@ (mov r8, r8)
 80060e0:	ffffa001 	.word	0xffffa001

080060e4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 80060e8:	4b26      	ldr	r3, [pc, #152]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 80060ea:	4a27      	ldr	r2, [pc, #156]	@ (8006188 <ReadBatteryVoltage+0xa4>)
 80060ec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80060ee:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 80060f0:	2280      	movs	r2, #128	@ 0x80
 80060f2:	0152      	lsls	r2, r2, #5
 80060f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80060f6:	4a23      	ldr	r2, [pc, #140]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 80060f8:	4b24      	ldr	r3, [pc, #144]	@ (800618c <ReadBatteryVoltage+0xa8>)
 80060fa:	0011      	movs	r1, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	f008 fbdb 	bl	800e8b8 <HAL_ADC_ConfigChannel>
 8006102:	1e03      	subs	r3, r0, #0
 8006104:	d001      	beq.n	800610a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006106:	f002 f9c9 	bl	800849c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800610a:	4b20      	ldr	r3, [pc, #128]	@ (800618c <ReadBatteryVoltage+0xa8>)
 800610c:	0018      	movs	r0, r3
 800610e:	f008 fad7 	bl	800e6c0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006112:	4b1e      	ldr	r3, [pc, #120]	@ (800618c <ReadBatteryVoltage+0xa8>)
 8006114:	2101      	movs	r1, #1
 8006116:	0018      	movs	r0, r3
 8006118:	f008 fb26 	bl	800e768 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 800611c:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <ReadBatteryVoltage+0xa8>)
 800611e:	0018      	movs	r0, r3
 8006120:	f008 fbbe 	bl	800e8a0 <HAL_ADC_GetValue>
 8006124:	0002      	movs	r2, r0
 8006126:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <ReadBatteryVoltage+0xac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4353      	muls	r3, r2
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	4919      	ldr	r1, [pc, #100]	@ (8006194 <ReadBatteryVoltage+0xb0>)
 8006130:	0018      	movs	r0, r3
 8006132:	f7fa f837 	bl	80001a4 <__udivsi3>
 8006136:	0003      	movs	r3, r0
 8006138:	001a      	movs	r2, r3
 800613a:	4b17      	ldr	r3, [pc, #92]	@ (8006198 <ReadBatteryVoltage+0xb4>)
 800613c:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800613e:	4b16      	ldr	r3, [pc, #88]	@ (8006198 <ReadBatteryVoltage+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	0018      	movs	r0, r3
 8006144:	f7fb fa90 	bl	8001668 <__aeabi_ui2f>
 8006148:	1c03      	adds	r3, r0, #0
 800614a:	4914      	ldr	r1, [pc, #80]	@ (800619c <ReadBatteryVoltage+0xb8>)
 800614c:	1c18      	adds	r0, r3, #0
 800614e:	f7fa fd41 	bl	8000bd4 <__aeabi_fdiv>
 8006152:	1c03      	adds	r3, r0, #0
 8006154:	1c1a      	adds	r2, r3, #0
 8006156:	4b12      	ldr	r3, [pc, #72]	@ (80061a0 <ReadBatteryVoltage+0xbc>)
 8006158:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800615a:	4b0a      	ldr	r3, [pc, #40]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 800615c:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <ReadBatteryVoltage+0xa4>)
 800615e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006160:	4b08      	ldr	r3, [pc, #32]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 8006162:	4a10      	ldr	r2, [pc, #64]	@ (80061a4 <ReadBatteryVoltage+0xc0>)
 8006164:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006166:	4a07      	ldr	r2, [pc, #28]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 8006168:	4b08      	ldr	r3, [pc, #32]	@ (800618c <ReadBatteryVoltage+0xa8>)
 800616a:	0011      	movs	r1, r2
 800616c:	0018      	movs	r0, r3
 800616e:	f008 fba3 	bl	800e8b8 <HAL_ADC_ConfigChannel>
 8006172:	1e03      	subs	r3, r0, #0
 8006174:	d001      	beq.n	800617a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006176:	f002 f991 	bl	800849c <Error_Handler>
  }
  return trueValue;
 800617a:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <ReadBatteryVoltage+0xbc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 }
 800617e:	1c18      	adds	r0, r3, #0
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000cbc 	.word	0x20000cbc
 8006188:	38004000 	.word	0x38004000
 800618c:	20000cfc 	.word	0x20000cfc
 8006190:	2000002c 	.word	0x2000002c
 8006194:	00000fff 	.word	0x00000fff
 8006198:	20000cc4 	.word	0x20000cc4
 800619c:	447a0000 	.word	0x447a0000
 80061a0:	20000cc8 	.word	0x20000cc8
 80061a4:	00001001 	.word	0x00001001

080061a8 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80061ac:	4b27      	ldr	r3, [pc, #156]	@ (800624c <ReadSolarVoltage+0xa4>)
 80061ae:	4a28      	ldr	r2, [pc, #160]	@ (8006250 <ReadSolarVoltage+0xa8>)
 80061b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80061b2:	4b26      	ldr	r3, [pc, #152]	@ (800624c <ReadSolarVoltage+0xa4>)
 80061b4:	2280      	movs	r2, #128	@ 0x80
 80061b6:	0152      	lsls	r2, r2, #5
 80061b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80061ba:	4a24      	ldr	r2, [pc, #144]	@ (800624c <ReadSolarVoltage+0xa4>)
 80061bc:	4b25      	ldr	r3, [pc, #148]	@ (8006254 <ReadSolarVoltage+0xac>)
 80061be:	0011      	movs	r1, r2
 80061c0:	0018      	movs	r0, r3
 80061c2:	f008 fb79 	bl	800e8b8 <HAL_ADC_ConfigChannel>
 80061c6:	1e03      	subs	r3, r0, #0
 80061c8:	d001      	beq.n	80061ce <ReadSolarVoltage+0x26>
    Error_Handler();
 80061ca:	f002 f967 	bl	800849c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80061ce:	4b21      	ldr	r3, [pc, #132]	@ (8006254 <ReadSolarVoltage+0xac>)
 80061d0:	0018      	movs	r0, r3
 80061d2:	f008 fa75 	bl	800e6c0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80061d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006254 <ReadSolarVoltage+0xac>)
 80061d8:	2101      	movs	r1, #1
 80061da:	0018      	movs	r0, r3
 80061dc:	f008 fac4 	bl	800e768 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80061e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006254 <ReadSolarVoltage+0xac>)
 80061e2:	0018      	movs	r0, r3
 80061e4:	f008 fb5c 	bl	800e8a0 <HAL_ADC_GetValue>
 80061e8:	0002      	movs	r2, r0
 80061ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <ReadSolarVoltage+0xb0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	435a      	muls	r2, r3
 80061f0:	0013      	movs	r3, r2
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	189b      	adds	r3, r3, r2
 80061f6:	4919      	ldr	r1, [pc, #100]	@ (800625c <ReadSolarVoltage+0xb4>)
 80061f8:	0018      	movs	r0, r3
 80061fa:	f7f9 ffd3 	bl	80001a4 <__udivsi3>
 80061fe:	0003      	movs	r3, r0
 8006200:	001a      	movs	r2, r3
 8006202:	4b17      	ldr	r3, [pc, #92]	@ (8006260 <ReadSolarVoltage+0xb8>)
 8006204:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 8006206:	4b16      	ldr	r3, [pc, #88]	@ (8006260 <ReadSolarVoltage+0xb8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	0018      	movs	r0, r3
 800620c:	f7fb fa2c 	bl	8001668 <__aeabi_ui2f>
 8006210:	1c03      	adds	r3, r0, #0
 8006212:	4914      	ldr	r1, [pc, #80]	@ (8006264 <ReadSolarVoltage+0xbc>)
 8006214:	1c18      	adds	r0, r3, #0
 8006216:	f7fa fcdd 	bl	8000bd4 <__aeabi_fdiv>
 800621a:	1c03      	adds	r3, r0, #0
 800621c:	1c1a      	adds	r2, r3, #0
 800621e:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <ReadSolarVoltage+0xc0>)
 8006220:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006222:	4b0a      	ldr	r3, [pc, #40]	@ (800624c <ReadSolarVoltage+0xa4>)
 8006224:	4a0a      	ldr	r2, [pc, #40]	@ (8006250 <ReadSolarVoltage+0xa8>)
 8006226:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006228:	4b08      	ldr	r3, [pc, #32]	@ (800624c <ReadSolarVoltage+0xa4>)
 800622a:	4a10      	ldr	r2, [pc, #64]	@ (800626c <ReadSolarVoltage+0xc4>)
 800622c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800622e:	4a07      	ldr	r2, [pc, #28]	@ (800624c <ReadSolarVoltage+0xa4>)
 8006230:	4b08      	ldr	r3, [pc, #32]	@ (8006254 <ReadSolarVoltage+0xac>)
 8006232:	0011      	movs	r1, r2
 8006234:	0018      	movs	r0, r3
 8006236:	f008 fb3f 	bl	800e8b8 <HAL_ADC_ConfigChannel>
 800623a:	1e03      	subs	r3, r0, #0
 800623c:	d001      	beq.n	8006242 <ReadSolarVoltage+0x9a>
    Error_Handler();
 800623e:	f002 f92d 	bl	800849c <Error_Handler>
  }
  return trueValue;
 8006242:	4b09      	ldr	r3, [pc, #36]	@ (8006268 <ReadSolarVoltage+0xc0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 }
 8006246:	1c18      	adds	r0, r3, #0
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000cbc 	.word	0x20000cbc
 8006250:	3c008000 	.word	0x3c008000
 8006254:	20000cfc 	.word	0x20000cfc
 8006258:	2000002c 	.word	0x2000002c
 800625c:	00000fff 	.word	0x00000fff
 8006260:	20000ccc 	.word	0x20000ccc
 8006264:	447a0000 	.word	0x447a0000
 8006268:	20000cd0 	.word	0x20000cd0
 800626c:	00001001 	.word	0x00001001

08006270 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006274:	23a0      	movs	r3, #160	@ 0xa0
 8006276:	05db      	lsls	r3, r3, #23
 8006278:	2180      	movs	r1, #128	@ 0x80
 800627a:	0018      	movs	r0, r3
 800627c:	f009 faa2 	bl	800f7c4 <HAL_GPIO_ReadPin>
 8006280:	0003      	movs	r3, r0
 8006282:	1e5a      	subs	r2, r3, #1
 8006284:	4193      	sbcs	r3, r2
 8006286:	b2db      	uxtb	r3, r3
}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800628e:	b580      	push	{r7, lr}
 8006290:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006292:	2380      	movs	r3, #128	@ 0x80
 8006294:	021a      	lsls	r2, r3, #8
 8006296:	23a0      	movs	r3, #160	@ 0xa0
 8006298:	05db      	lsls	r3, r3, #23
 800629a:	0011      	movs	r1, r2
 800629c:	0018      	movs	r0, r3
 800629e:	f009 fa91 	bl	800f7c4 <HAL_GPIO_ReadPin>
 80062a2:	0003      	movs	r3, r0
 80062a4:	1e5a      	subs	r2, r3, #1
 80062a6:	4193      	sbcs	r3, r2
 80062a8:	b2db      	uxtb	r3, r3
}
 80062aa:	0018      	movs	r0, r3
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80062b4:	4b05      	ldr	r3, [pc, #20]	@ (80062cc <UserButton_Pressed+0x1c>)
 80062b6:	2104      	movs	r1, #4
 80062b8:	0018      	movs	r0, r3
 80062ba:	f009 fa83 	bl	800f7c4 <HAL_GPIO_ReadPin>
 80062be:	0003      	movs	r3, r0
 80062c0:	425a      	negs	r2, r3
 80062c2:	4153      	adcs	r3, r2
 80062c4:	b2db      	uxtb	r3, r3
}
 80062c6:	0018      	movs	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	50000c00 	.word	0x50000c00

080062d0 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	46d6      	mov	lr, sl
 80062d4:	464f      	mov	r7, r9
 80062d6:	4646      	mov	r6, r8
 80062d8:	b5c0      	push	{r6, r7, lr}
 80062da:	b08e      	sub	sp, #56	@ 0x38
 80062dc:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80062de:	4b21      	ldr	r3, [pc, #132]	@ (8006364 <showTime+0x94>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d036      	beq.n	8006354 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80062e6:	003a      	movs	r2, r7
 80062e8:	1d3b      	adds	r3, r7, #4
 80062ea:	0011      	movs	r1, r2
 80062ec:	0018      	movs	r0, r3
 80062ee:	f000 fa2b 	bl	8006748 <RTC_GetTime>
  UpdateSystemUptime();
 80062f2:	f000 f83f 	bl	8006374 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062f6:	003b      	movs	r3, r7
 80062f8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062fa:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062fc:	003b      	movs	r3, r7
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006302:	4b19      	ldr	r3, [pc, #100]	@ (8006368 <showTime+0x98>)
 8006304:	0092      	lsls	r2, r2, #2
 8006306:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006308:	003b      	movs	r3, r7
 800630a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800630c:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006312:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006318:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800631e:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006320:	4b12      	ldr	r3, [pc, #72]	@ (800636c <showTime+0x9c>)
 8006322:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006324:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006326:	4b11      	ldr	r3, [pc, #68]	@ (800636c <showTime+0x9c>)
 8006328:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800632a:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <showTime+0x9c>)
 800632e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006330:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006332:	4b0e      	ldr	r3, [pc, #56]	@ (800636c <showTime+0x9c>)
 8006334:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006336:	480e      	ldr	r0, [pc, #56]	@ (8006370 <showTime+0xa0>)
 8006338:	9306      	str	r3, [sp, #24]
 800633a:	4643      	mov	r3, r8
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	4663      	mov	r3, ip
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	9603      	str	r6, [sp, #12]
 8006344:	9502      	str	r5, [sp, #8]
 8006346:	9401      	str	r4, [sp, #4]
 8006348:	9100      	str	r1, [sp, #0]
 800634a:	4653      	mov	r3, sl
 800634c:	4649      	mov	r1, r9
 800634e:	f019 f869 	bl	801f424 <iprintf>
 8006352:	e000      	b.n	8006356 <showTime+0x86>
    return;
 8006354:	46c0      	nop			@ (mov r8, r8)
}
 8006356:	46bd      	mov	sp, r7
 8006358:	b006      	add	sp, #24
 800635a:	bce0      	pop	{r5, r6, r7}
 800635c:	46ba      	mov	sl, r7
 800635e:	46b1      	mov	r9, r6
 8006360:	46a8      	mov	r8, r5
 8006362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006364:	20000ce0 	.word	0x20000ce0
 8006368:	2000004c 	.word	0x2000004c
 800636c:	20000cd4 	.word	0x20000cd4
 8006370:	080231c8 	.word	0x080231c8

08006374 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800637a:	003a      	movs	r2, r7
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	0011      	movs	r1, r2
 8006380:	0018      	movs	r0, r3
 8006382:	f000 f9e1 	bl	8006748 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006386:	1d3a      	adds	r2, r7, #4
 8006388:	003b      	movs	r3, r7
 800638a:	0011      	movs	r1, r2
 800638c:	0018      	movs	r0, r3
 800638e:	f000 fb8f 	bl	8006ab0 <makeTime>
 8006392:	0002      	movs	r2, r0
 8006394:	4b1e      	ldr	r3, [pc, #120]	@ (8006410 <UpdateSystemUptime+0x9c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	213c      	movs	r1, #60	@ 0x3c
 80063a4:	0018      	movs	r0, r3
 80063a6:	f7f9 ff83 	bl	80002b0 <__aeabi_uidivmod>
 80063aa:	000b      	movs	r3, r1
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <UpdateSystemUptime+0xa0>)
 80063b0:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	213c      	movs	r1, #60	@ 0x3c
 80063b6:	0018      	movs	r0, r3
 80063b8:	f7f9 fef4 	bl	80001a4 <__udivsi3>
 80063bc:	0003      	movs	r3, r0
 80063be:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	213c      	movs	r1, #60	@ 0x3c
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7f9 ff73 	bl	80002b0 <__aeabi_uidivmod>
 80063ca:	000b      	movs	r3, r1
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <UpdateSystemUptime+0xa0>)
 80063d0:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	213c      	movs	r1, #60	@ 0x3c
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7f9 fee4 	bl	80001a4 <__udivsi3>
 80063dc:	0003      	movs	r3, r0
 80063de:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	2118      	movs	r1, #24
 80063e4:	0018      	movs	r0, r3
 80063e6:	f7f9 ff63 	bl	80002b0 <__aeabi_uidivmod>
 80063ea:	000b      	movs	r3, r1
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	4b09      	ldr	r3, [pc, #36]	@ (8006414 <UpdateSystemUptime+0xa0>)
 80063f0:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2118      	movs	r1, #24
 80063f6:	0018      	movs	r0, r3
 80063f8:	f7f9 fed4 	bl	80001a4 <__udivsi3>
 80063fc:	0003      	movs	r3, r0
 80063fe:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	b29a      	uxth	r2, r3
 8006404:	4b03      	ldr	r3, [pc, #12]	@ (8006414 <UpdateSystemUptime+0xa0>)
 8006406:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006408:	46c0      	nop			@ (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	b008      	add	sp, #32
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000ce0 	.word	0x20000ce0
 8006414:	20000cd4 	.word	0x20000cd4

08006418 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	0008      	movs	r0, r1
 8006422:	0011      	movs	r1, r2
 8006424:	1cfb      	adds	r3, r7, #3
 8006426:	1c02      	adds	r2, r0, #0
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	1cbb      	adds	r3, r7, #2
 800642c:	1c0a      	adds	r2, r1, #0
 800642e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006430:	230e      	movs	r3, #14
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006438:	230f      	movs	r3, #15
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	1cfa      	adds	r2, r7, #3
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	e015      	b.n	8006470 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006444:	200f      	movs	r0, #15
 8006446:	183b      	adds	r3, r7, r0
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	18d2      	adds	r2, r2, r3
 800644e:	240e      	movs	r4, #14
 8006450:	193b      	adds	r3, r7, r4
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	7811      	ldrb	r1, [r2, #0]
 8006456:	2208      	movs	r2, #8
 8006458:	18ba      	adds	r2, r7, r2
 800645a:	54d1      	strb	r1, [r2, r3]
    pos++;
 800645c:	193b      	adds	r3, r7, r4
 800645e:	781a      	ldrb	r2, [r3, #0]
 8006460:	193b      	adds	r3, r7, r4
 8006462:	3201      	adds	r2, #1
 8006464:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006466:	183b      	adds	r3, r7, r0
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	183b      	adds	r3, r7, r0
 800646c:	3201      	adds	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	200f      	movs	r0, #15
 8006472:	183a      	adds	r2, r7, r0
 8006474:	1cbb      	adds	r3, r7, #2
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d9e2      	bls.n	8006444 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800647e:	230e      	movs	r3, #14
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2208      	movs	r2, #8
 8006486:	18ba      	adds	r2, r7, r2
 8006488:	2100      	movs	r1, #0
 800648a:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800648c:	1cfb      	adds	r3, r7, #3
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b13      	cmp	r3, #19
 8006492:	d849      	bhi.n	8006528 <aBuff2int+0x110>
    if (start == 17) { //month
 8006494:	1cfb      	adds	r3, r7, #3
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b11      	cmp	r3, #17
 800649a:	d122      	bne.n	80064e2 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800649c:	183b      	adds	r3, r7, r0
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e018      	b.n	80064d6 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80064a4:	240f      	movs	r4, #15
 80064a6:	193b      	adds	r3, r7, r4
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	4b25      	ldr	r3, [pc, #148]	@ (8006540 <aBuff2int+0x128>)
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	58d2      	ldr	r2, [r2, r3]
 80064b0:	2308      	movs	r3, #8
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	0011      	movs	r1, r2
 80064b6:	0018      	movs	r0, r3
 80064b8:	f7f9 fe4e 	bl	8000158 <strcmp>
 80064bc:	1e03      	subs	r3, r0, #0
 80064be:	d104      	bne.n	80064ca <aBuff2int+0xb2>
          return i+1;
 80064c0:	193b      	adds	r3, r7, r4
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	e035      	b.n	8006536 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80064ca:	210f      	movs	r1, #15
 80064cc:	187b      	adds	r3, r7, r1
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	187b      	adds	r3, r7, r1
 80064d2:	3201      	adds	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	230f      	movs	r3, #15
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b0b      	cmp	r3, #11
 80064de:	d9e1      	bls.n	80064a4 <aBuff2int+0x8c>
 80064e0:	e022      	b.n	8006528 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80064e2:	230f      	movs	r3, #15
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e018      	b.n	800651e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80064ec:	240f      	movs	r4, #15
 80064ee:	193b      	adds	r3, r7, r4
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <aBuff2int+0x12c>)
 80064f4:	0092      	lsls	r2, r2, #2
 80064f6:	58d2      	ldr	r2, [r2, r3]
 80064f8:	2308      	movs	r3, #8
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	0011      	movs	r1, r2
 80064fe:	0018      	movs	r0, r3
 8006500:	f7f9 fe2a 	bl	8000158 <strcmp>
 8006504:	1e03      	subs	r3, r0, #0
 8006506:	d104      	bne.n	8006512 <aBuff2int+0xfa>
          return i+1;
 8006508:	193b      	adds	r3, r7, r4
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	b2db      	uxtb	r3, r3
 8006510:	e011      	b.n	8006536 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006512:	210f      	movs	r1, #15
 8006514:	187b      	adds	r3, r7, r1
 8006516:	781a      	ldrb	r2, [r3, #0]
 8006518:	187b      	adds	r3, r7, r1
 800651a:	3201      	adds	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	230f      	movs	r3, #15
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b06      	cmp	r3, #6
 8006526:	d9e1      	bls.n	80064ec <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006528:	2308      	movs	r3, #8
 800652a:	18fb      	adds	r3, r7, r3
 800652c:	0018      	movs	r0, r3
 800652e:	f017 fb9e 	bl	801dc6e <atoi>
 8006532:	0003      	movs	r3, r0
 8006534:	b2db      	uxtb	r3, r3
}
 8006536:	0018      	movs	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	b005      	add	sp, #20
 800653c:	bd90      	pop	{r4, r7, pc}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	2000004c 	.word	0x2000004c
 8006544:	20000030 	.word	0x20000030

08006548 <ParseTime>:

void ParseTime(char* buffer) {
 8006548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654a:	b08b      	sub	sp, #44	@ 0x2c
 800654c:	af02      	add	r7, sp, #8
 800654e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006550:	2408      	movs	r4, #8
 8006552:	193a      	adds	r2, r7, r4
 8006554:	260c      	movs	r6, #12
 8006556:	19bb      	adds	r3, r7, r6
 8006558:	0011      	movs	r1, r2
 800655a:	0018      	movs	r0, r3
 800655c:	f000 f8f4 	bl	8006748 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2219      	movs	r2, #25
 8006564:	2118      	movs	r1, #24
 8006566:	0018      	movs	r0, r3
 8006568:	f7ff ff56 	bl	8006418 <aBuff2int>
 800656c:	0003      	movs	r3, r0
 800656e:	001a      	movs	r2, r3
 8006570:	19bb      	adds	r3, r7, r6
 8006572:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	221c      	movs	r2, #28
 8006578:	211b      	movs	r1, #27
 800657a:	0018      	movs	r0, r3
 800657c:	f7ff ff4c 	bl	8006418 <aBuff2int>
 8006580:	0003      	movs	r3, r0
 8006582:	001a      	movs	r2, r3
 8006584:	19bb      	adds	r3, r7, r6
 8006586:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	221f      	movs	r2, #31
 800658c:	211e      	movs	r1, #30
 800658e:	0018      	movs	r0, r3
 8006590:	f7ff ff42 	bl	8006418 <aBuff2int>
 8006594:	0003      	movs	r3, r0
 8006596:	001a      	movs	r2, r3
 8006598:	19bb      	adds	r3, r7, r6
 800659a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	@ 0x24
 80065a0:	2123      	movs	r1, #35	@ 0x23
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7ff ff38 	bl	8006418 <aBuff2int>
 80065a8:	0003      	movs	r3, r0
 80065aa:	001a      	movs	r2, r3
 80065ac:	0025      	movs	r5, r4
 80065ae:	197b      	adds	r3, r7, r5
 80065b0:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2213      	movs	r2, #19
 80065b6:	2111      	movs	r1, #17
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7ff ff2d 	bl	8006418 <aBuff2int>
 80065be:	0003      	movs	r3, r0
 80065c0:	001a      	movs	r2, r3
 80065c2:	197b      	adds	r3, r7, r5
 80065c4:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2216      	movs	r2, #22
 80065ca:	2115      	movs	r1, #21
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7ff ff23 	bl	8006418 <aBuff2int>
 80065d2:	0003      	movs	r3, r0
 80065d4:	001a      	movs	r2, r3
 80065d6:	197b      	adds	r3, r7, r5
 80065d8:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	220f      	movs	r2, #15
 80065de:	210d      	movs	r1, #13
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7ff ff19 	bl	8006418 <aBuff2int>
 80065e6:	0003      	movs	r3, r0
 80065e8:	001a      	movs	r2, r3
 80065ea:	197b      	adds	r3, r7, r5
 80065ec:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80065ee:	19bb      	adds	r3, r7, r6
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	001c      	movs	r4, r3
 80065f4:	19bb      	adds	r3, r7, r6
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	0018      	movs	r0, r3
 80065fa:	19bb      	adds	r3, r7, r6
 80065fc:	789b      	ldrb	r3, [r3, #2]
 80065fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <ParseTime+0x128>)
 8006600:	491c      	ldr	r1, [pc, #112]	@ (8006674 <ParseTime+0x12c>)
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	9000      	str	r0, [sp, #0]
 8006606:	0023      	movs	r3, r4
 8006608:	2003      	movs	r0, #3
 800660a:	f007 fa31 	bl	800da70 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800660e:	197b      	adds	r3, r7, r5
 8006610:	789b      	ldrb	r3, [r3, #2]
 8006612:	001c      	movs	r4, r3
 8006614:	197b      	adds	r3, r7, r5
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	0018      	movs	r0, r3
 800661a:	197b      	adds	r3, r7, r5
 800661c:	78db      	ldrb	r3, [r3, #3]
 800661e:	4a16      	ldr	r2, [pc, #88]	@ (8006678 <ParseTime+0x130>)
 8006620:	4914      	ldr	r1, [pc, #80]	@ (8006674 <ParseTime+0x12c>)
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	9000      	str	r0, [sp, #0]
 8006626:	0023      	movs	r3, r4
 8006628:	2003      	movs	r0, #3
 800662a:	f007 fa21 	bl	800da70 <CreateLine>
  RTC_SetTime(&currentTime);
 800662e:	19bb      	adds	r3, r7, r6
 8006630:	0018      	movs	r0, r3
 8006632:	f000 f825 	bl	8006680 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006636:	197b      	adds	r3, r7, r5
 8006638:	0018      	movs	r0, r3
 800663a:	f000 f847 	bl	80066cc <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 800663e:	197b      	adds	r3, r7, r5
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d101      	bne.n	800664a <ParseTime+0x102>
    reset_fanCleaningDone();
 8006646:	f002 fb65 	bl	8008d14 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 800664a:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <ParseTime+0x134>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006652:	230c      	movs	r3, #12
 8006654:	18fa      	adds	r2, r7, r3
 8006656:	2308      	movs	r3, #8
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	0011      	movs	r1, r2
 800665c:	0018      	movs	r0, r3
 800665e:	f000 fa27 	bl	8006ab0 <makeTime>
 8006662:	0002      	movs	r2, r0
 8006664:	4b05      	ldr	r3, [pc, #20]	@ (800667c <ParseTime+0x134>)
 8006666:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 8006668:	46c0      	nop			@ (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b009      	add	sp, #36	@ 0x24
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	08023220 	.word	0x08023220
 8006674:	08023258 	.word	0x08023258
 8006678:	0802325c 	.word	0x0802325c
 800667c:	20000ce0 	.word	0x20000ce0

08006680 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800669a:	4b09      	ldr	r3, [pc, #36]	@ (80066c0 <RTC_SetTime+0x40>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	0018      	movs	r0, r3
 80066a4:	f00e ff3a 	bl	801551c <HAL_RTC_SetTime>
 80066a8:	1e03      	subs	r3, r0, #0
 80066aa:	d005      	beq.n	80066b8 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 80066ac:	4a05      	ldr	r2, [pc, #20]	@ (80066c4 <RTC_SetTime+0x44>)
 80066ae:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <RTC_SetTime+0x48>)
 80066b0:	0019      	movs	r1, r3
 80066b2:	2001      	movs	r0, #1
 80066b4:	f007 f9dc 	bl	800da70 <CreateLine>
    }
}
 80066b8:	46c0      	nop			@ (mov r8, r8)
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b002      	add	sp, #8
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000cdc 	.word	0x20000cdc
 80066c4:	08023290 	.word	0x08023290
 80066c8:	080232ac 	.word	0x080232ac

080066cc <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80066d4:	4b16      	ldr	r3, [pc, #88]	@ (8006730 <RTC_SetDate+0x64>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	0018      	movs	r0, r3
 80066de:	f00f f825 	bl	801572c <HAL_RTC_SetDate>
 80066e2:	1e03      	subs	r3, r0, #0
 80066e4:	d005      	beq.n	80066f2 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 80066e6:	4a13      	ldr	r2, [pc, #76]	@ (8006734 <RTC_SetDate+0x68>)
 80066e8:	4b13      	ldr	r3, [pc, #76]	@ (8006738 <RTC_SetDate+0x6c>)
 80066ea:	0019      	movs	r1, r3
 80066ec:	2001      	movs	r0, #1
 80066ee:	f007 f9bf 	bl	800da70 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80066f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006730 <RTC_SetDate+0x64>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2101      	movs	r1, #1
 80066f8:	0018      	movs	r0, r3
 80066fa:	f00f fb5d 	bl	8015db8 <HAL_RTCEx_BKUPRead>
 80066fe:	0003      	movs	r3, r0
 8006700:	4a0e      	ldr	r2, [pc, #56]	@ (800673c <RTC_SetDate+0x70>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d010      	beq.n	8006728 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8006706:	4a0e      	ldr	r2, [pc, #56]	@ (8006740 <RTC_SetDate+0x74>)
 8006708:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <RTC_SetDate+0x78>)
 800670a:	0019      	movs	r1, r3
 800670c:	2003      	movs	r0, #3
 800670e:	f007 f9af 	bl	800da70 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006712:	f00d fe83 	bl	801441c <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8006716:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <RTC_SetDate+0x64>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a08      	ldr	r2, [pc, #32]	@ (800673c <RTC_SetDate+0x70>)
 800671c:	2101      	movs	r1, #1
 800671e:	0018      	movs	r0, r3
 8006720:	f00f fb32 	bl	8015d88 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006724:	f00d fe88 	bl	8014438 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006728:	46c0      	nop			@ (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000cdc 	.word	0x20000cdc
 8006734:	080232b0 	.word	0x080232b0
 8006738:	080232ac 	.word	0x080232ac
 800673c:	0000bebe 	.word	0x0000bebe
 8006740:	080232cc 	.word	0x080232cc
 8006744:	08023258 	.word	0x08023258

08006748 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006752:	250f      	movs	r5, #15
 8006754:	197b      	adds	r3, r7, r5
 8006756:	2201      	movs	r2, #1
 8006758:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800675a:	230e      	movs	r3, #14
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006762:	260c      	movs	r6, #12
 8006764:	19bc      	adds	r4, r7, r6
 8006766:	f006 fb0b 	bl	800cd80 <powerCheck>
 800676a:	0003      	movs	r3, r0
 800676c:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800676e:	19bb      	adds	r3, r7, r6
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006776:	197b      	adds	r3, r7, r5
 8006778:	781a      	ldrb	r2, [r3, #0]
 800677a:	197b      	adds	r3, r7, r5
 800677c:	3201      	adds	r2, #1
 800677e:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006780:	230d      	movs	r3, #13
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	e039      	b.n	80067fe <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800678a:	4b23      	ldr	r3, [pc, #140]	@ (8006818 <RTC_GetTime+0xd0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	0018      	movs	r0, r3
 8006794:	f00e ff6c 	bl	8015670 <HAL_RTC_GetTime>
 8006798:	1e03      	subs	r3, r0, #0
 800679a:	d005      	beq.n	80067a8 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 800679c:	4a1f      	ldr	r2, [pc, #124]	@ (800681c <RTC_GetTime+0xd4>)
 800679e:	4b20      	ldr	r3, [pc, #128]	@ (8006820 <RTC_GetTime+0xd8>)
 80067a0:	0019      	movs	r1, r3
 80067a2:	2001      	movs	r0, #1
 80067a4:	f007 f964 	bl	800da70 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80067a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006818 <RTC_GetTime+0xd0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	2200      	movs	r2, #0
 80067b0:	0018      	movs	r0, r3
 80067b2:	f00f f84f 	bl	8015854 <HAL_RTC_GetDate>
 80067b6:	1e03      	subs	r3, r0, #0
 80067b8:	d005      	beq.n	80067c6 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80067ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006824 <RTC_GetTime+0xdc>)
 80067bc:	4b18      	ldr	r3, [pc, #96]	@ (8006820 <RTC_GetTime+0xd8>)
 80067be:	0019      	movs	r1, r3
 80067c0:	2001      	movs	r0, #1
 80067c2:	f007 f955 	bl	800da70 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80067c6:	230c      	movs	r3, #12
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d110      	bne.n	80067f2 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	210e      	movs	r1, #14
 80067d6:	187a      	adds	r2, r7, r1
 80067d8:	7812      	ldrb	r2, [r2, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d018      	beq.n	8006810 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80067de:	187b      	adds	r3, r7, r1
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	701a      	strb	r2, [r3, #0]
        t++;
 80067e6:	210f      	movs	r1, #15
 80067e8:	187b      	adds	r3, r7, r1
 80067ea:	781a      	ldrb	r2, [r3, #0]
 80067ec:	187b      	adds	r3, r7, r1
 80067ee:	3201      	adds	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80067f2:	210d      	movs	r1, #13
 80067f4:	187b      	adds	r3, r7, r1
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	187b      	adds	r3, r7, r1
 80067fa:	3201      	adds	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	230d      	movs	r3, #13
 8006800:	18fa      	adds	r2, r7, r3
 8006802:	230f      	movs	r3, #15
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	7812      	ldrb	r2, [r2, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d3bd      	bcc.n	800678a <RTC_GetTime+0x42>
 800680e:	e000      	b.n	8006812 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006810:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006812:	46bd      	mov	sp, r7
 8006814:	b005      	add	sp, #20
 8006816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006818:	20000cdc 	.word	0x20000cdc
 800681c:	080232e4 	.word	0x080232e4
 8006820:	080232ac 	.word	0x080232ac
 8006824:	08023300 	.word	0x08023300

08006828 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800682e:	003a      	movs	r2, r7
 8006830:	1d3b      	adds	r3, r7, #4
 8006832:	0011      	movs	r1, r2
 8006834:	0018      	movs	r0, r3
 8006836:	f7ff ff87 	bl	8006748 <RTC_GetTime>
  return currentDate.WeekDay;
 800683a:	003b      	movs	r3, r7
 800683c:	781b      	ldrb	r3, [r3, #0]
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b006      	add	sp, #24
 8006844:	bd80      	pop	{r7, pc}

08006846 <getPosixTime>:

uint32_t getPosixTime(void) {
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800684c:	003a      	movs	r2, r7
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	0011      	movs	r1, r2
 8006852:	0018      	movs	r0, r3
 8006854:	f7ff ff78 	bl	8006748 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006858:	1d3a      	adds	r2, r7, #4
 800685a:	003b      	movs	r3, r7
 800685c:	0011      	movs	r1, r2
 800685e:	0018      	movs	r0, r3
 8006860:	f000 f926 	bl	8006ab0 <makeTime>
 8006864:	0003      	movs	r3, r0
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b006      	add	sp, #24
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	b08d      	sub	sp, #52	@ 0x34
 8006874:	af04      	add	r7, sp, #16
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800687a:	240c      	movs	r4, #12
 800687c:	193a      	adds	r2, r7, r4
 800687e:	2508      	movs	r5, #8
 8006880:	1979      	adds	r1, r7, r5
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0018      	movs	r0, r3
 8006886:	f000 f9dd 	bl	8006c44 <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800688a:	002a      	movs	r2, r5
 800688c:	18bb      	adds	r3, r7, r2
 800688e:	789b      	ldrb	r3, [r3, #2]
 8006890:	001e      	movs	r6, r3
 8006892:	18bb      	adds	r3, r7, r2
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	469c      	mov	ip, r3
 8006898:	18bb      	adds	r3, r7, r2
 800689a:	78db      	ldrb	r3, [r3, #3]
 800689c:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800689e:	0021      	movs	r1, r4
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80068a4:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80068a6:	187b      	adds	r3, r7, r1
 80068a8:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80068aa:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80068ac:	187b      	adds	r3, r7, r1
 80068ae:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80068b0:	4906      	ldr	r1, [pc, #24]	@ (80068cc <getUTCfromPosixTime+0x5c>)
 80068b2:	6838      	ldr	r0, [r7, #0]
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	9502      	str	r5, [sp, #8]
 80068b8:	9401      	str	r4, [sp, #4]
 80068ba:	9200      	str	r2, [sp, #0]
 80068bc:	4663      	mov	r3, ip
 80068be:	0032      	movs	r2, r6
 80068c0:	f018 fe20 	bl	801f504 <siprintf>
}
 80068c4:	46c0      	nop			@ (mov r8, r8)
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b009      	add	sp, #36	@ 0x24
 80068ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068cc:	0802331c 	.word	0x0802331c

080068d0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80068d8:	4b10      	ldr	r3, [pc, #64]	@ (800691c <RTC_SetWakeUpTimer+0x4c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	0018      	movs	r0, r3
 80068de:	f00f f9b7 	bl	8015c50 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80068e2:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <RTC_SetWakeUpTimer+0x4c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	22ff      	movs	r2, #255	@ 0xff
 80068ec:	401a      	ands	r2, r3
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <RTC_SetWakeUpTimer+0x4c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	490a      	ldr	r1, [pc, #40]	@ (8006920 <RTC_SetWakeUpTimer+0x50>)
 80068f6:	430a      	orrs	r2, r1
 80068f8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80068fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006924 <RTC_SetWakeUpTimer+0x54>)
 80068fc:	2280      	movs	r2, #128	@ 0x80
 80068fe:	0352      	lsls	r2, r2, #13
 8006900:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006902:	4b06      	ldr	r3, [pc, #24]	@ (800691c <RTC_SetWakeUpTimer+0x4c>)
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3b01      	subs	r3, #1
 800690a:	2204      	movs	r2, #4
 800690c:	0019      	movs	r1, r3
 800690e:	f00f f8c7 	bl	8015aa0 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	20000cdc 	.word	0x20000cdc
 8006920:	fffffb7f 	.word	0xfffffb7f
 8006924:	40010400 	.word	0x40010400

08006928 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 800692c:	4a0c      	ldr	r2, [pc, #48]	@ (8006960 <Enter_Standby_Mode+0x38>)
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <Enter_Standby_Mode+0x3c>)
 8006930:	0019      	movs	r1, r3
 8006932:	2003      	movs	r0, #3
 8006934:	f007 f89c 	bl	800da70 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006938:	2064      	movs	r0, #100	@ 0x64
 800693a:	f007 fcef 	bl	800e31c <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800693e:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <Enter_Standby_Mode+0x40>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	0018      	movs	r0, r3
 8006944:	f00f f984 	bl	8015c50 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006948:	f007 fd0c 	bl	800e364 <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 800694c:	f00d fde0 	bl	8014510 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006950:	f001 fc5a 	bl	8008208 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006954:	f007 fd14 	bl	800e380 <HAL_ResumeTick>
}
 8006958:	46c0      	nop			@ (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	08023370 	.word	0x08023370
 8006964:	08023258 	.word	0x08023258
 8006968:	20000cdc 	.word	0x20000cdc

0800696c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af02      	add	r7, sp, #8
 8006972:	0002      	movs	r2, r0
 8006974:	1dbb      	adds	r3, r7, #6
 8006976:	801a      	strh	r2, [r3, #0]
  if (GetPMSensorPresence()) {
 8006978:	f001 f86a 	bl	8007a50 <GetPMSensorPresence>
 800697c:	1e03      	subs	r3, r0, #0
 800697e:	d001      	beq.n	8006984 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006980:	f002 f9aa 	bl	8008cd8 <sen5x_Power_Off>
  }
  // restart the SGP40 with a soft reset to enter idle mode
  SGP_SoftReset();
 8006984:	f004 ffce 	bl	800b924 <SGP_SoftReset>
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006988:	f7ff fbac 	bl	80060e4 <ReadBatteryVoltage>
 800698c:	1c03      	adds	r3, r0, #0
 800698e:	1c18      	adds	r0, r3, #0
 8006990:	f7fc fd68 	bl	8003464 <__aeabi_f2d>
 8006994:	0002      	movs	r2, r0
 8006996:	000b      	movs	r3, r1
 8006998:	4836      	ldr	r0, [pc, #216]	@ (8006a74 <Enter_Stop_Mode+0x108>)
 800699a:	4937      	ldr	r1, [pc, #220]	@ (8006a78 <Enter_Stop_Mode+0x10c>)
 800699c:	9200      	str	r2, [sp, #0]
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	0002      	movs	r2, r0
 80069a2:	2002      	movs	r0, #2
 80069a4:	f007 f864 	bl	800da70 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 80069a8:	1dbb      	adds	r3, r7, #6
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	4a33      	ldr	r2, [pc, #204]	@ (8006a7c <Enter_Stop_Mode+0x110>)
 80069ae:	4934      	ldr	r1, [pc, #208]	@ (8006a80 <Enter_Stop_Mode+0x114>)
 80069b0:	2003      	movs	r0, #3
 80069b2:	f007 f85d 	bl	800da70 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 80069b6:	f7ff ff46 	bl	8006846 <getPosixTime>
 80069ba:	0002      	movs	r2, r0
 80069bc:	1dbb      	adds	r3, r7, #6
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	18d3      	adds	r3, r2, r3
 80069c2:	4a30      	ldr	r2, [pc, #192]	@ (8006a84 <Enter_Stop_Mode+0x118>)
 80069c4:	0011      	movs	r1, r2
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7ff ff52 	bl	8006870 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 80069cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006a84 <Enter_Stop_Mode+0x118>)
 80069ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006a88 <Enter_Stop_Mode+0x11c>)
 80069d0:	4929      	ldr	r1, [pc, #164]	@ (8006a78 <Enter_Stop_Mode+0x10c>)
 80069d2:	2002      	movs	r0, #2
 80069d4:	f007 f84c 	bl	800da70 <CreateLine>
  HAL_Delay(100);
 80069d8:	2064      	movs	r0, #100	@ 0x64
 80069da:	f007 fc9f 	bl	800e31c <HAL_Delay>
  HAL_SuspendTick();
 80069de:	f007 fcc1 	bl	800e364 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 80069e2:	1dbb      	adds	r3, r7, #6
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff ff72 	bl	80068d0 <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80069ec:	2101      	movs	r1, #1
 80069ee:	2001      	movs	r0, #1
 80069f0:	f00d fd32 	bl	8014458 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80069f4:	f001 fc08 	bl	8008208 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 80069f8:	1dbb      	adds	r3, r7, #6
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f002 f8ef 	bl	8008be0 <sen5x_enable>
 8006a02:	1e03      	subs	r3, r0, #0
 8006a04:	d01e      	beq.n	8006a44 <Enter_Stop_Mode+0xd8>
    showTime();
 8006a06:	f7ff fc63 	bl	80062d0 <showTime>
    set_light_on_state();
 8006a0a:	f002 fd37 	bl	800947c <set_light_on_state>
    if (!userToggle) {
 8006a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8006a8c <Enter_Stop_Mode+0x120>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	4053      	eors	r3, r2
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d013      	beq.n	8006a44 <Enter_Stop_Mode+0xd8>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006a1c:	201b      	movs	r0, #27
 8006a1e:	f7ff ff57 	bl	80068d0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006a22:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <Enter_Stop_Mode+0x110>)
 8006a24:	4916      	ldr	r1, [pc, #88]	@ (8006a80 <Enter_Stop_Mode+0x114>)
 8006a26:	231b      	movs	r3, #27
 8006a28:	2003      	movs	r0, #3
 8006a2a:	f007 f821 	bl	800da70 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006a2e:	2101      	movs	r1, #1
 8006a30:	2001      	movs	r0, #1
 8006a32:	f00d fd11 	bl	8014458 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006a36:	f001 fbe7 	bl	8008208 <SystemClock_Config>
      setsen5xReadTimer(2000);
 8006a3a:	23fa      	movs	r3, #250	@ 0xfa
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f002 f8bc 	bl	8008bbc <setsen5xReadTimer>

    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006a44:	f007 fc9c 	bl	800e380 <HAL_ResumeTick>
  showTime();
 8006a48:	f7ff fc42 	bl	80062d0 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006a4c:	f001 fd48 	bl	80084e0 <ResetDBACalculator>
//  setMeasStamp(300);
//  ESPTransmitDone = false;
  setESPTimeStamp(3000);
 8006a50:	4b0f      	ldr	r3, [pc, #60]	@ (8006a90 <Enter_Stop_Mode+0x124>)
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7fc feac 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f004 ffeb 	bl	800ba34 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f007 f9c0 	bl	800dde4 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006a64:	2000      	movs	r0, #0
 8006a66:	f001 fd29 	bl	80084bc <setMICTimeStamp>
}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	b002      	add	sp, #8
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	08023394 	.word	0x08023394
 8006a78:	080233ac 	.word	0x080233ac
 8006a7c:	080233b0 	.word	0x080233b0
 8006a80:	08023258 	.word	0x08023258
 8006a84:	20000ce4 	.word	0x20000ce4
 8006a88:	080233d4 	.word	0x080233d4
 8006a8c:	2000214e 	.word	0x2000214e
 8006a90:	00000bb8 	.word	0x00000bb8

08006a94 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006a9c:	4b03      	ldr	r3, [pc, #12]	@ (8006aac <InitClock+0x18>)
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b002      	add	sp, #8
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	20000cdc 	.word	0x20000cdc

08006ab0 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	78db      	ldrb	r3, [r3, #3]
 8006abe:	001a      	movs	r2, r3
 8006ac0:	0013      	movs	r3, r2
 8006ac2:	025b      	lsls	r3, r3, #9
 8006ac4:	189b      	adds	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	189b      	adds	r3, r3, r2
 8006ace:	011a      	lsls	r2, r3, #4
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	01d3      	lsls	r3, r2, #7
 8006ad4:	001a      	movs	r2, r3
 8006ad6:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e028      	b.n	8006b30 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a53      	ldr	r2, [pc, #332]	@ (8006c30 <makeTime+0x180>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	db21      	blt.n	8006b2a <makeTime+0x7a>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a52      	ldr	r2, [pc, #328]	@ (8006c34 <makeTime+0x184>)
 8006aea:	4694      	mov	ip, r2
 8006aec:	4463      	add	r3, ip
 8006aee:	001a      	movs	r2, r3
 8006af0:	2303      	movs	r3, #3
 8006af2:	4013      	ands	r3, r2
 8006af4:	d119      	bne.n	8006b2a <makeTime+0x7a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a4e      	ldr	r2, [pc, #312]	@ (8006c34 <makeTime+0x184>)
 8006afa:	4694      	mov	ip, r2
 8006afc:	4463      	add	r3, ip
 8006afe:	2164      	movs	r1, #100	@ 0x64
 8006b00:	0018      	movs	r0, r3
 8006b02:	f7f9 fcbf 	bl	8000484 <__aeabi_idivmod>
 8006b06:	1e0b      	subs	r3, r1, #0
 8006b08:	d10a      	bne.n	8006b20 <makeTime+0x70>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a49      	ldr	r2, [pc, #292]	@ (8006c34 <makeTime+0x184>)
 8006b0e:	4694      	mov	ip, r2
 8006b10:	4463      	add	r3, ip
 8006b12:	22c8      	movs	r2, #200	@ 0xc8
 8006b14:	0051      	lsls	r1, r2, #1
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7f9 fcb4 	bl	8000484 <__aeabi_idivmod>
 8006b1c:	1e0b      	subs	r3, r1, #0
 8006b1e:	d104      	bne.n	8006b2a <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a45      	ldr	r2, [pc, #276]	@ (8006c38 <makeTime+0x188>)
 8006b24:	4694      	mov	ip, r2
 8006b26:	4463      	add	r3, ip
 8006b28:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	78db      	ldrb	r3, [r3, #3]
 8006b34:	001a      	movs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	dbd0      	blt.n	8006ade <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e03c      	b.n	8006bbc <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d125      	bne.n	8006b94 <makeTime+0xe4>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	78db      	ldrb	r3, [r3, #3]
 8006b4c:	4a39      	ldr	r2, [pc, #228]	@ (8006c34 <makeTime+0x184>)
 8006b4e:	4694      	mov	ip, r2
 8006b50:	4463      	add	r3, ip
 8006b52:	001a      	movs	r2, r3
 8006b54:	2303      	movs	r3, #3
 8006b56:	4013      	ands	r3, r2
 8006b58:	d11c      	bne.n	8006b94 <makeTime+0xe4>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	78db      	ldrb	r3, [r3, #3]
 8006b5e:	4a35      	ldr	r2, [pc, #212]	@ (8006c34 <makeTime+0x184>)
 8006b60:	4694      	mov	ip, r2
 8006b62:	4463      	add	r3, ip
 8006b64:	2164      	movs	r1, #100	@ 0x64
 8006b66:	0018      	movs	r0, r3
 8006b68:	f7f9 fc8c 	bl	8000484 <__aeabi_idivmod>
 8006b6c:	1e0b      	subs	r3, r1, #0
 8006b6e:	d10b      	bne.n	8006b88 <makeTime+0xd8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	78db      	ldrb	r3, [r3, #3]
 8006b74:	4a2f      	ldr	r2, [pc, #188]	@ (8006c34 <makeTime+0x184>)
 8006b76:	4694      	mov	ip, r2
 8006b78:	4463      	add	r3, ip
 8006b7a:	22c8      	movs	r2, #200	@ 0xc8
 8006b7c:	0051      	lsls	r1, r2, #1
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7f9 fc80 	bl	8000484 <__aeabi_idivmod>
 8006b84:	1e0b      	subs	r3, r1, #0
 8006b86:	d105      	bne.n	8006b94 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8006c3c <makeTime+0x18c>)
 8006b8c:	4694      	mov	ip, r2
 8006b8e:	4463      	add	r3, ip
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	e010      	b.n	8006bb6 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4a29      	ldr	r2, [pc, #164]	@ (8006c40 <makeTime+0x190>)
 8006b9a:	5cd3      	ldrb	r3, [r2, r3]
 8006b9c:	001a      	movs	r2, r3
 8006b9e:	0013      	movs	r3, r2
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	189b      	adds	r3, r3, r2
 8006ba4:	011a      	lsls	r2, r3, #4
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	0113      	lsls	r3, r2, #4
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	01db      	lsls	r3, r3, #7
 8006bae:	001a      	movs	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	001a      	movs	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	dbbc      	blt.n	8006b42 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	789b      	ldrb	r3, [r3, #2]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	001a      	movs	r2, r3
 8006bd0:	0013      	movs	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	189b      	adds	r3, r3, r2
 8006bd6:	011a      	lsls	r2, r3, #4
 8006bd8:	1ad2      	subs	r2, r2, r3
 8006bda:	0113      	lsls	r3, r2, #4
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	001a      	movs	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	189b      	adds	r3, r3, r2
 8006be6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	001a      	movs	r2, r3
 8006bee:	0013      	movs	r3, r2
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	011a      	lsls	r2, r3, #4
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	0113      	lsls	r3, r2, #4
 8006bfa:	001a      	movs	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	189b      	adds	r3, r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	001a      	movs	r2, r3
 8006c08:	0013      	movs	r3, r2
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	001a      	movs	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	189b      	adds	r3, r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	789b      	ldrb	r3, [r3, #2]
 8006c1c:	001a      	movs	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	189b      	adds	r3, r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006c24:	68bb      	ldr	r3, [r7, #8]
}
 8006c26:	0018      	movs	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b004      	add	sp, #16
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	fffff84f 	.word	0xfffff84f
 8006c34:	000007b2 	.word	0x000007b2
 8006c38:	00015180 	.word	0x00015180
 8006c3c:	00263b80 	.word	0x00263b80
 8006c40:	0802469c 	.word	0x0802469c

08006c44 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b089      	sub	sp, #36	@ 0x24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	213c      	movs	r1, #60	@ 0x3c
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7f9 fb29 	bl	80002b0 <__aeabi_uidivmod>
 8006c5e:	000b      	movs	r3, r1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	213c      	movs	r1, #60	@ 0x3c
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7f9 fa9a 	bl	80001a4 <__udivsi3>
 8006c70:	0003      	movs	r3, r0
 8006c72:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	213c      	movs	r1, #60	@ 0x3c
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f7f9 fb19 	bl	80002b0 <__aeabi_uidivmod>
 8006c7e:	000b      	movs	r3, r1
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	213c      	movs	r1, #60	@ 0x3c
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7f9 fa8a 	bl	80001a4 <__udivsi3>
 8006c90:	0003      	movs	r3, r0
 8006c92:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2118      	movs	r1, #24
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7f9 fb09 	bl	80002b0 <__aeabi_uidivmod>
 8006c9e:	000b      	movs	r3, r1
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2118      	movs	r1, #24
 8006caa:	0018      	movs	r0, r3
 8006cac:	f7f9 fa7a 	bl	80001a4 <__udivsi3>
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	2107      	movs	r1, #7
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f7f9 faf8 	bl	80002b0 <__aeabi_uidivmod>
 8006cc0:	000b      	movs	r3, r1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006ccc:	231f      	movs	r3, #31
 8006cce:	18fb      	adds	r3, r7, r3
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006cd8:	e005      	b.n	8006ce6 <breakPosixTime+0xa2>
    year++;
 8006cda:	211f      	movs	r1, #31
 8006cdc:	187b      	adds	r3, r7, r1
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	3201      	adds	r2, #1
 8006ce4:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ce6:	241f      	movs	r4, #31
 8006ce8:	193b      	adds	r3, r7, r4
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4a64      	ldr	r2, [pc, #400]	@ (8006e80 <breakPosixTime+0x23c>)
 8006cee:	4694      	mov	ip, r2
 8006cf0:	4463      	add	r3, ip
 8006cf2:	001a      	movs	r2, r3
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d119      	bne.n	8006d2e <breakPosixTime+0xea>
 8006cfa:	193b      	adds	r3, r7, r4
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	4a60      	ldr	r2, [pc, #384]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d00:	4694      	mov	ip, r2
 8006d02:	4463      	add	r3, ip
 8006d04:	2164      	movs	r1, #100	@ 0x64
 8006d06:	0018      	movs	r0, r3
 8006d08:	f7f9 fbbc 	bl	8000484 <__aeabi_idivmod>
 8006d0c:	1e0b      	subs	r3, r1, #0
 8006d0e:	d10b      	bne.n	8006d28 <breakPosixTime+0xe4>
 8006d10:	193b      	adds	r3, r7, r4
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	4a5a      	ldr	r2, [pc, #360]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d16:	4694      	mov	ip, r2
 8006d18:	4463      	add	r3, ip
 8006d1a:	22c8      	movs	r2, #200	@ 0xc8
 8006d1c:	0051      	lsls	r1, r2, #1
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7f9 fbb0 	bl	8000484 <__aeabi_idivmod>
 8006d24:	1e0b      	subs	r3, r1, #0
 8006d26:	d102      	bne.n	8006d2e <breakPosixTime+0xea>
 8006d28:	23b7      	movs	r3, #183	@ 0xb7
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	e001      	b.n	8006d32 <breakPosixTime+0xee>
 8006d2e:	236e      	movs	r3, #110	@ 0x6e
 8006d30:	33ff      	adds	r3, #255	@ 0xff
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	18d3      	adds	r3, r2, r3
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d9cc      	bls.n	8006cda <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	241f      	movs	r4, #31
 8006d44:	193a      	adds	r2, r7, r4
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006d4a:	193b      	adds	r3, r7, r4
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d50:	4694      	mov	ip, r2
 8006d52:	4463      	add	r3, ip
 8006d54:	001a      	movs	r2, r3
 8006d56:	2303      	movs	r3, #3
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d119      	bne.n	8006d90 <breakPosixTime+0x14c>
 8006d5c:	193b      	adds	r3, r7, r4
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	4a47      	ldr	r2, [pc, #284]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d62:	4694      	mov	ip, r2
 8006d64:	4463      	add	r3, ip
 8006d66:	2164      	movs	r1, #100	@ 0x64
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f7f9 fb8b 	bl	8000484 <__aeabi_idivmod>
 8006d6e:	1e0b      	subs	r3, r1, #0
 8006d70:	d10b      	bne.n	8006d8a <breakPosixTime+0x146>
 8006d72:	193b      	adds	r3, r7, r4
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4a42      	ldr	r2, [pc, #264]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d78:	4694      	mov	ip, r2
 8006d7a:	4463      	add	r3, ip
 8006d7c:	22c8      	movs	r2, #200	@ 0xc8
 8006d7e:	0051      	lsls	r1, r2, #1
 8006d80:	0018      	movs	r0, r3
 8006d82:	f7f9 fb7f 	bl	8000484 <__aeabi_idivmod>
 8006d86:	1e0b      	subs	r3, r1, #0
 8006d88:	d102      	bne.n	8006d90 <breakPosixTime+0x14c>
 8006d8a:	23b7      	movs	r3, #183	@ 0xb7
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	e001      	b.n	8006d94 <breakPosixTime+0x150>
 8006d90:	236e      	movs	r3, #110	@ 0x6e
 8006d92:	33ff      	adds	r3, #255	@ 0xff
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	61bb      	str	r3, [r7, #24]

  days=0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
  month=0;
 8006da6:	211e      	movs	r1, #30
 8006da8:	187b      	adds	r3, r7, r1
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006dae:	231d      	movs	r3, #29
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006db6:	187b      	adds	r3, r7, r1
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	e048      	b.n	8006e50 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006dbe:	231e      	movs	r3, #30
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d12a      	bne.n	8006e1e <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006dc8:	241f      	movs	r4, #31
 8006dca:	193b      	adds	r3, r7, r4
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4a2c      	ldr	r2, [pc, #176]	@ (8006e80 <breakPosixTime+0x23c>)
 8006dd0:	4694      	mov	ip, r2
 8006dd2:	4463      	add	r3, ip
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d11b      	bne.n	8006e14 <breakPosixTime+0x1d0>
 8006ddc:	193b      	adds	r3, r7, r4
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	4a27      	ldr	r2, [pc, #156]	@ (8006e80 <breakPosixTime+0x23c>)
 8006de2:	4694      	mov	ip, r2
 8006de4:	4463      	add	r3, ip
 8006de6:	2164      	movs	r1, #100	@ 0x64
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7f9 fb4b 	bl	8000484 <__aeabi_idivmod>
 8006dee:	1e0b      	subs	r3, r1, #0
 8006df0:	d10b      	bne.n	8006e0a <breakPosixTime+0x1c6>
 8006df2:	193b      	adds	r3, r7, r4
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	4a22      	ldr	r2, [pc, #136]	@ (8006e80 <breakPosixTime+0x23c>)
 8006df8:	4694      	mov	ip, r2
 8006dfa:	4463      	add	r3, ip
 8006dfc:	22c8      	movs	r2, #200	@ 0xc8
 8006dfe:	0051      	lsls	r1, r2, #1
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7f9 fb3f 	bl	8000484 <__aeabi_idivmod>
 8006e06:	1e0b      	subs	r3, r1, #0
 8006e08:	d104      	bne.n	8006e14 <breakPosixTime+0x1d0>
        monthLength=29;
 8006e0a:	231d      	movs	r3, #29
 8006e0c:	18fb      	adds	r3, r7, r3
 8006e0e:	221d      	movs	r2, #29
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	e00c      	b.n	8006e2e <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006e14:	231d      	movs	r3, #29
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	221c      	movs	r2, #28
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e007      	b.n	8006e2e <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006e1e:	231e      	movs	r3, #30
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	231d      	movs	r3, #29
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	4916      	ldr	r1, [pc, #88]	@ (8006e84 <breakPosixTime+0x240>)
 8006e2a:	5c8a      	ldrb	r2, [r1, r2]
 8006e2c:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8006e2e:	211d      	movs	r1, #29
 8006e30:	187b      	adds	r3, r7, r1
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d310      	bcc.n	8006e5c <breakPosixTime+0x218>
      time -= monthLength;
 8006e3a:	187b      	adds	r3, r7, r1
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8006e44:	211e      	movs	r1, #30
 8006e46:	187b      	adds	r3, r7, r1
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	187b      	adds	r3, r7, r1
 8006e4c:	3201      	adds	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	231e      	movs	r3, #30
 8006e52:	18fb      	adds	r3, r7, r3
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b0b      	cmp	r3, #11
 8006e58:	d9b1      	bls.n	8006dbe <breakPosixTime+0x17a>
 8006e5a:	e000      	b.n	8006e5e <breakPosixTime+0x21a>
    } else {
        break;
 8006e5c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8006e5e:	231e      	movs	r3, #30
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	3301      	adds	r3, #1
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8006e78:	46c0      	nop			@ (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b009      	add	sp, #36	@ 0x24
 8006e7e:	bd90      	pop	{r4, r7, pc}
 8006e80:	000007b2 	.word	0x000007b2
 8006e84:	0802469c 	.word	0x0802469c

08006e88 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006e8e:	003b      	movs	r3, r7
 8006e90:	0018      	movs	r0, r3
 8006e92:	2308      	movs	r3, #8
 8006e94:	001a      	movs	r2, r3
 8006e96:	2100      	movs	r1, #0
 8006e98:	f018 fc78 	bl	801f78c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006e9c:	4b30      	ldr	r3, [pc, #192]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006e9e:	4a31      	ldr	r2, [pc, #196]	@ (8006f64 <MX_ADC_Init+0xdc>)
 8006ea0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eaa:	22c0      	movs	r2, #192	@ 0xc0
 8006eac:	0612      	lsls	r2, r2, #24
 8006eae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006ebc:	4b28      	ldr	r3, [pc, #160]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ec2:	4b27      	ldr	r3, [pc, #156]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006ec8:	4b25      	ldr	r3, [pc, #148]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eca:	2220      	movs	r2, #32
 8006ecc:	2100      	movs	r1, #0
 8006ece:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006ed0:	4b23      	ldr	r3, [pc, #140]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ed2:	2221      	movs	r2, #33	@ 0x21
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ed8:	4b21      	ldr	r3, [pc, #132]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ede:	4b20      	ldr	r3, [pc, #128]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ee0:	22c2      	movs	r2, #194	@ 0xc2
 8006ee2:	32ff      	adds	r2, #255	@ 0xff
 8006ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ee8:	222c      	movs	r2, #44	@ 0x2c
 8006eea:	2100      	movs	r1, #0
 8006eec:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006eee:	4b1c      	ldr	r3, [pc, #112]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006efa:	4b19      	ldr	r3, [pc, #100]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006f00:	4b17      	ldr	r3, [pc, #92]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006f06:	4b16      	ldr	r3, [pc, #88]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006f0c:	4b14      	ldr	r3, [pc, #80]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f007 fa62 	bl	800e3d8 <HAL_ADC_Init>
 8006f14:	1e03      	subs	r3, r0, #0
 8006f16:	d001      	beq.n	8006f1c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006f18:	f001 fac0 	bl	800849c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006f1c:	003b      	movs	r3, r7
 8006f1e:	4a12      	ldr	r2, [pc, #72]	@ (8006f68 <MX_ADC_Init+0xe0>)
 8006f20:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006f22:	003b      	movs	r3, r7
 8006f24:	2280      	movs	r2, #128	@ 0x80
 8006f26:	0152      	lsls	r2, r2, #5
 8006f28:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006f2a:	003a      	movs	r2, r7
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f2e:	0011      	movs	r1, r2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f007 fcc1 	bl	800e8b8 <HAL_ADC_ConfigChannel>
 8006f36:	1e03      	subs	r3, r0, #0
 8006f38:	d001      	beq.n	8006f3e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006f3a:	f001 faaf 	bl	800849c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006f3e:	003b      	movs	r3, r7
 8006f40:	4a0a      	ldr	r2, [pc, #40]	@ (8006f6c <MX_ADC_Init+0xe4>)
 8006f42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006f44:	003a      	movs	r2, r7
 8006f46:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f48:	0011      	movs	r1, r2
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f007 fcb4 	bl	800e8b8 <HAL_ADC_ConfigChannel>
 8006f50:	1e03      	subs	r3, r0, #0
 8006f52:	d001      	beq.n	8006f58 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8006f54:	f001 faa2 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006f58:	46c0      	nop			@ (mov r8, r8)
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b002      	add	sp, #8
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000cfc 	.word	0x20000cfc
 8006f64:	40012400 	.word	0x40012400
 8006f68:	38004000 	.word	0x38004000
 8006f6c:	3c008000 	.word	0x3c008000

08006f70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006f70:	b590      	push	{r4, r7, lr}
 8006f72:	b089      	sub	sp, #36	@ 0x24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f78:	240c      	movs	r4, #12
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	2314      	movs	r3, #20
 8006f80:	001a      	movs	r2, r3
 8006f82:	2100      	movs	r1, #0
 8006f84:	f018 fc02 	bl	801f78c <memset>
  if(adcHandle->Instance==ADC1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a14      	ldr	r2, [pc, #80]	@ (8006fe0 <HAL_ADC_MspInit+0x70>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d121      	bne.n	8006fd6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006f92:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f96:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006f98:	2180      	movs	r1, #128	@ 0x80
 8006f9a:	0089      	lsls	r1, r1, #2
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fa0:	4b10      	ldr	r3, [pc, #64]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006fac:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006fb8:	193b      	adds	r3, r7, r4
 8006fba:	2230      	movs	r2, #48	@ 0x30
 8006fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fbe:	193b      	adds	r3, r7, r4
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc4:	193b      	adds	r3, r7, r4
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fca:	193b      	adds	r3, r7, r4
 8006fcc:	4a06      	ldr	r2, [pc, #24]	@ (8006fe8 <HAL_ADC_MspInit+0x78>)
 8006fce:	0019      	movs	r1, r3
 8006fd0:	0010      	movs	r0, r2
 8006fd2:	f008 fa79 	bl	800f4c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b009      	add	sp, #36	@ 0x24
 8006fdc:	bd90      	pop	{r4, r7, pc}
 8006fde:	46c0      	nop			@ (mov r8, r8)
 8006fe0:	40012400 	.word	0x40012400
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	50000800 	.word	0x50000800

08006fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006ff2:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <MX_DMA_Init+0x48>)
 8006ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <MX_DMA_Init+0x48>)
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <MX_DMA_Init+0x48>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	2201      	movs	r2, #1
 8007004:	4013      	ands	r3, r2
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800700a:	2200      	movs	r2, #0
 800700c:	2100      	movs	r1, #0
 800700e:	200a      	movs	r0, #10
 8007010:	f007 fe0c 	bl	800ec2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007014:	200a      	movs	r0, #10
 8007016:	f007 fe1e 	bl	800ec56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800701a:	2200      	movs	r2, #0
 800701c:	2103      	movs	r1, #3
 800701e:	200b      	movs	r0, #11
 8007020:	f007 fe04 	bl	800ec2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007024:	200b      	movs	r0, #11
 8007026:	f007 fe16 	bl	800ec56 <HAL_NVIC_EnableIRQ>

}
 800702a:	46c0      	nop			@ (mov r8, r8)
 800702c:	46bd      	mov	sp, r7
 800702e:	b002      	add	sp, #8
 8007030:	bd80      	pop	{r7, pc}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	40021000 	.word	0x40021000

08007038 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b7f      	cmp	r3, #127	@ 0x7f
 8007048:	d901      	bls.n	800704e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800704a:	237f      	movs	r3, #127	@ 0x7f
 800704c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800704e:	2017      	movs	r0, #23
 8007050:	183b      	adds	r3, r7, r0
 8007052:	490d      	ldr	r1, [pc, #52]	@ (8007088 <accessLUT10log10+0x50>)
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	188a      	adds	r2, r1, r2
 8007058:	7812      	ldrb	r2, [r2, #0]
 800705a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800705c:	0001      	movs	r1, r0
 800705e:	187b      	adds	r3, r7, r1
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2206      	movs	r2, #6
 8007064:	4113      	asrs	r3, r2
 8007066:	001a      	movs	r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800706c:	187b      	adds	r3, r7, r1
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2106      	movs	r1, #6
 8007076:	408b      	lsls	r3, r1
 8007078:	1ad2      	subs	r2, r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	46bd      	mov	sp, r7
 8007082:	b006      	add	sp, #24
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	080246a8 	.word	0x080246a8

0800708c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800708c:	b5b0      	push	{r4, r5, r7, lr}
 800708e:	b090      	sub	sp, #64	@ 0x40
 8007090:	af00      	add	r7, sp, #0
 8007092:	6138      	str	r0, [r7, #16]
 8007094:	6179      	str	r1, [r7, #20]
 8007096:	60fa      	str	r2, [r7, #12]
 8007098:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800709a:	2308      	movs	r3, #8
 800709c:	001a      	movs	r2, r3
 800709e:	3a20      	subs	r2, #32
 80070a0:	2a00      	cmp	r2, #0
 80070a2:	db03      	blt.n	80070ac <efficient10log10+0x20>
 80070a4:	2101      	movs	r1, #1
 80070a6:	4091      	lsls	r1, r2
 80070a8:	000d      	movs	r5, r1
 80070aa:	e008      	b.n	80070be <efficient10log10+0x32>
 80070ac:	2220      	movs	r2, #32
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	2101      	movs	r1, #1
 80070b2:	40d1      	lsrs	r1, r2
 80070b4:	000a      	movs	r2, r1
 80070b6:	2100      	movs	r1, #0
 80070b8:	4099      	lsls	r1, r3
 80070ba:	000d      	movs	r5, r1
 80070bc:	4315      	orrs	r5, r2
 80070be:	2201      	movs	r2, #1
 80070c0:	409a      	lsls	r2, r3
 80070c2:	0014      	movs	r4, r2
 80070c4:	2201      	movs	r2, #1
 80070c6:	4252      	negs	r2, r2
 80070c8:	17d3      	asrs	r3, r2, #31
 80070ca:	1912      	adds	r2, r2, r4
 80070cc:	416b      	adcs	r3, r5
 80070ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80070d2:	2336      	movs	r3, #54	@ 0x36
 80070d4:	2208      	movs	r2, #8
 80070d6:	189b      	adds	r3, r3, r2
 80070d8:	19db      	adds	r3, r3, r7
 80070da:	2200      	movs	r2, #0
 80070dc:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80070de:	e017      	b.n	8007110 <efficient10log10+0x84>
    {
        P = P >> 1;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	07db      	lsls	r3, r3, #31
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	0852      	lsrs	r2, r2, #1
 80070e8:	603a      	str	r2, [r7, #0]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	603a      	str	r2, [r7, #0]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	687c      	ldr	r4, [r7, #4]
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	617c      	str	r4, [r7, #20]
        bShift++;
 80070fe:	2136      	movs	r1, #54	@ 0x36
 8007100:	2008      	movs	r0, #8
 8007102:	180b      	adds	r3, r1, r0
 8007104:	19db      	adds	r3, r3, r7
 8007106:	881a      	ldrh	r2, [r3, #0]
 8007108:	180b      	adds	r3, r1, r0
 800710a:	19db      	adds	r3, r3, r7
 800710c:	3201      	adds	r2, #1
 800710e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007114:	429a      	cmp	r2, r3
 8007116:	d8e3      	bhi.n	80070e0 <efficient10log10+0x54>
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711c:	429a      	cmp	r2, r3
 800711e:	d103      	bne.n	8007128 <efficient10log10+0x9c>
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	429a      	cmp	r2, r3
 8007126:	d8db      	bhi.n	80070e0 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	2308      	movs	r3, #8
 800712c:	3b01      	subs	r3, #1
 800712e:	2101      	movs	r1, #1
 8007130:	4099      	lsls	r1, r3
 8007132:	000b      	movs	r3, r1
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007140:	231c      	movs	r3, #28
 8007142:	2408      	movs	r4, #8
 8007144:	191b      	adds	r3, r3, r4
 8007146:	19da      	adds	r2, r3, r7
 8007148:	2320      	movs	r3, #32
 800714a:	191b      	adds	r3, r3, r4
 800714c:	19d9      	adds	r1, r3, r7
 800714e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007150:	0018      	movs	r0, r3
 8007152:	f7ff ff71 	bl	8007038 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007156:	2215      	movs	r2, #21
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800715c:	2036      	movs	r0, #54	@ 0x36
 800715e:	1902      	adds	r2, r0, r4
 8007160:	19d2      	adds	r2, r2, r7
 8007162:	8812      	ldrh	r2, [r2, #0]
 8007164:	2103      	movs	r1, #3
 8007166:	434a      	muls	r2, r1
 8007168:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800716a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800716c:	0021      	movs	r1, r4
 800716e:	1843      	adds	r3, r0, r1
 8007170:	19db      	adds	r3, r3, r7
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	2201      	movs	r2, #1
 8007176:	4353      	muls	r3, r2
 8007178:	2203      	movs	r2, #3
 800717a:	4113      	asrs	r3, r2
 800717c:	001a      	movs	r2, r3
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007182:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007184:	2314      	movs	r3, #20
 8007186:	185b      	adds	r3, r3, r1
 8007188:	19da      	adds	r2, r3, r7
 800718a:	2318      	movs	r3, #24
 800718c:	185b      	adds	r3, r3, r1
 800718e:	19db      	adds	r3, r3, r7
 8007190:	0011      	movs	r1, r2
 8007192:	0018      	movs	r0, r3
 8007194:	f000 f80a 	bl	80071ac <correctIntFracNumber>
    integerPart[0] = intPart;
 8007198:	6a3a      	ldr	r2, [r7, #32]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	601a      	str	r2, [r3, #0]
}
 80071a4:	46c0      	nop			@ (mov r8, r8)
 80071a6:	46bd      	mov	sp, r7
 80071a8:	b010      	add	sp, #64	@ 0x40
 80071aa:	bdb0      	pop	{r4, r5, r7, pc}

080071ac <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80071b6:	e00a      	b.n	80071ce <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3b0a      	subs	r3, #10
 80071c8:	001a      	movs	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	dcf0      	bgt.n	80071b8 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80071d6:	e00a      	b.n	80071ee <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	1e5a      	subs	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	330a      	adds	r3, #10
 80071e8:	001a      	movs	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3309      	adds	r3, #9
 80071f4:	dbf0      	blt.n	80071d8 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da0f      	bge.n	800721e <correctIntFracNumber+0x72>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd0b      	ble.n	800721e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3b0a      	subs	r3, #10
 8007216:	001a      	movs	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800721c:	e012      	b.n	8007244 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	dd0e      	ble.n	8007244 <correctIntFracNumber+0x98>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	da0a      	bge.n	8007244 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	1e5a      	subs	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330a      	adds	r3, #10
 800723e:	001a      	movs	r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	601a      	str	r2, [r3, #0]
}
 8007244:	46c0      	nop			@ (mov r8, r8)
 8007246:	46bd      	mov	sp, r7
 8007248:	b002      	add	sp, #8
 800724a:	bd80      	pop	{r7, pc}

0800724c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b08b      	sub	sp, #44	@ 0x2c
 8007250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007252:	2414      	movs	r4, #20
 8007254:	193b      	adds	r3, r7, r4
 8007256:	0018      	movs	r0, r3
 8007258:	2314      	movs	r3, #20
 800725a:	001a      	movs	r2, r3
 800725c:	2100      	movs	r1, #0
 800725e:	f018 fa95 	bl	801f78c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007262:	4b8a      	ldr	r3, [pc, #552]	@ (800748c <MX_GPIO_Init+0x240>)
 8007264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007266:	4b89      	ldr	r3, [pc, #548]	@ (800748c <MX_GPIO_Init+0x240>)
 8007268:	2104      	movs	r1, #4
 800726a:	430a      	orrs	r2, r1
 800726c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800726e:	4b87      	ldr	r3, [pc, #540]	@ (800748c <MX_GPIO_Init+0x240>)
 8007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007272:	2204      	movs	r2, #4
 8007274:	4013      	ands	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800727a:	4b84      	ldr	r3, [pc, #528]	@ (800748c <MX_GPIO_Init+0x240>)
 800727c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800727e:	4b83      	ldr	r3, [pc, #524]	@ (800748c <MX_GPIO_Init+0x240>)
 8007280:	2180      	movs	r1, #128	@ 0x80
 8007282:	430a      	orrs	r2, r1
 8007284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007286:	4b81      	ldr	r3, [pc, #516]	@ (800748c <MX_GPIO_Init+0x240>)
 8007288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728a:	2280      	movs	r2, #128	@ 0x80
 800728c:	4013      	ands	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007292:	4b7e      	ldr	r3, [pc, #504]	@ (800748c <MX_GPIO_Init+0x240>)
 8007294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007296:	4b7d      	ldr	r3, [pc, #500]	@ (800748c <MX_GPIO_Init+0x240>)
 8007298:	2101      	movs	r1, #1
 800729a:	430a      	orrs	r2, r1
 800729c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800729e:	4b7b      	ldr	r3, [pc, #492]	@ (800748c <MX_GPIO_Init+0x240>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	2201      	movs	r2, #1
 80072a4:	4013      	ands	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072aa:	4b78      	ldr	r3, [pc, #480]	@ (800748c <MX_GPIO_Init+0x240>)
 80072ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ae:	4b77      	ldr	r3, [pc, #476]	@ (800748c <MX_GPIO_Init+0x240>)
 80072b0:	2102      	movs	r1, #2
 80072b2:	430a      	orrs	r2, r1
 80072b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072b6:	4b75      	ldr	r3, [pc, #468]	@ (800748c <MX_GPIO_Init+0x240>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	2202      	movs	r2, #2
 80072bc:	4013      	ands	r3, r2
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072c2:	4b72      	ldr	r3, [pc, #456]	@ (800748c <MX_GPIO_Init+0x240>)
 80072c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c6:	4b71      	ldr	r3, [pc, #452]	@ (800748c <MX_GPIO_Init+0x240>)
 80072c8:	2108      	movs	r1, #8
 80072ca:	430a      	orrs	r2, r1
 80072cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072ce:	4b6f      	ldr	r3, [pc, #444]	@ (800748c <MX_GPIO_Init+0x240>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d2:	2208      	movs	r2, #8
 80072d4:	4013      	ands	r3, r2
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80072da:	4b6d      	ldr	r3, [pc, #436]	@ (8007490 <MX_GPIO_Init+0x244>)
 80072dc:	2201      	movs	r2, #1
 80072de:	2101      	movs	r1, #1
 80072e0:	0018      	movs	r0, r3
 80072e2:	f008 fa8c 	bl	800f7fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80072e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007490 <MX_GPIO_Init+0x244>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	2102      	movs	r1, #2
 80072ec:	0018      	movs	r0, r3
 80072ee:	f008 fa86 	bl	800f7fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80072f2:	4968      	ldr	r1, [pc, #416]	@ (8007494 <MX_GPIO_Init+0x248>)
 80072f4:	4b68      	ldr	r3, [pc, #416]	@ (8007498 <MX_GPIO_Init+0x24c>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	0018      	movs	r0, r3
 80072fa:	f008 fa80 	bl	800f7fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80072fe:	2380      	movs	r3, #128	@ 0x80
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	4866      	ldr	r0, [pc, #408]	@ (800749c <MX_GPIO_Init+0x250>)
 8007304:	2201      	movs	r2, #1
 8007306:	0019      	movs	r1, r3
 8007308:	f008 fa79 	bl	800f7fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800730c:	2380      	movs	r3, #128	@ 0x80
 800730e:	015b      	lsls	r3, r3, #5
 8007310:	4862      	ldr	r0, [pc, #392]	@ (800749c <MX_GPIO_Init+0x250>)
 8007312:	2200      	movs	r2, #0
 8007314:	0019      	movs	r1, r3
 8007316:	f008 fa72 	bl	800f7fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800731a:	193b      	adds	r3, r7, r4
 800731c:	4a60      	ldr	r2, [pc, #384]	@ (80074a0 <MX_GPIO_Init+0x254>)
 800731e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007320:	193b      	adds	r3, r7, r4
 8007322:	2203      	movs	r2, #3
 8007324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007326:	193b      	adds	r3, r7, r4
 8007328:	2200      	movs	r2, #0
 800732a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800732c:	193b      	adds	r3, r7, r4
 800732e:	4a5b      	ldr	r2, [pc, #364]	@ (800749c <MX_GPIO_Init+0x250>)
 8007330:	0019      	movs	r1, r3
 8007332:	0010      	movs	r0, r2
 8007334:	f008 f8c8 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007338:	193b      	adds	r3, r7, r4
 800733a:	2203      	movs	r2, #3
 800733c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800733e:	193b      	adds	r3, r7, r4
 8007340:	2201      	movs	r2, #1
 8007342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007344:	193b      	adds	r3, r7, r4
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800734a:	193b      	adds	r3, r7, r4
 800734c:	2200      	movs	r2, #0
 800734e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007350:	193b      	adds	r3, r7, r4
 8007352:	4a4f      	ldr	r2, [pc, #316]	@ (8007490 <MX_GPIO_Init+0x244>)
 8007354:	0019      	movs	r1, r3
 8007356:	0010      	movs	r0, r2
 8007358:	f008 f8b6 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800735c:	193b      	adds	r3, r7, r4
 800735e:	2270      	movs	r2, #112	@ 0x70
 8007360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007362:	193b      	adds	r3, r7, r4
 8007364:	2203      	movs	r2, #3
 8007366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007368:	193b      	adds	r3, r7, r4
 800736a:	2200      	movs	r2, #0
 800736c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800736e:	193a      	adds	r2, r7, r4
 8007370:	23a0      	movs	r3, #160	@ 0xa0
 8007372:	05db      	lsls	r3, r3, #23
 8007374:	0011      	movs	r1, r2
 8007376:	0018      	movs	r0, r3
 8007378:	f008 f8a6 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800737c:	193b      	adds	r3, r7, r4
 800737e:	22c0      	movs	r2, #192	@ 0xc0
 8007380:	0052      	lsls	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007384:	193b      	adds	r3, r7, r4
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738a:	193b      	adds	r3, r7, r4
 800738c:	2200      	movs	r2, #0
 800738e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007390:	193a      	adds	r2, r7, r4
 8007392:	23a0      	movs	r3, #160	@ 0xa0
 8007394:	05db      	lsls	r3, r3, #23
 8007396:	0011      	movs	r1, r2
 8007398:	0018      	movs	r0, r3
 800739a:	f008 f895 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800739e:	193b      	adds	r3, r7, r4
 80073a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007494 <MX_GPIO_Init+0x248>)
 80073a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073a4:	193b      	adds	r3, r7, r4
 80073a6:	2201      	movs	r2, #1
 80073a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073aa:	193b      	adds	r3, r7, r4
 80073ac:	2200      	movs	r2, #0
 80073ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b0:	193b      	adds	r3, r7, r4
 80073b2:	2200      	movs	r2, #0
 80073b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073b6:	193b      	adds	r3, r7, r4
 80073b8:	4a37      	ldr	r2, [pc, #220]	@ (8007498 <MX_GPIO_Init+0x24c>)
 80073ba:	0019      	movs	r1, r3
 80073bc:	0010      	movs	r0, r2
 80073be:	f008 f883 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80073c2:	193b      	adds	r3, r7, r4
 80073c4:	4a37      	ldr	r2, [pc, #220]	@ (80074a4 <MX_GPIO_Init+0x258>)
 80073c6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073c8:	193b      	adds	r3, r7, r4
 80073ca:	2203      	movs	r2, #3
 80073cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ce:	193b      	adds	r3, r7, r4
 80073d0:	2200      	movs	r2, #0
 80073d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d4:	193b      	adds	r3, r7, r4
 80073d6:	4a30      	ldr	r2, [pc, #192]	@ (8007498 <MX_GPIO_Init+0x24c>)
 80073d8:	0019      	movs	r1, r3
 80073da:	0010      	movs	r0, r2
 80073dc:	f008 f874 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80073e0:	0021      	movs	r1, r4
 80073e2:	187b      	adds	r3, r7, r1
 80073e4:	2280      	movs	r2, #128	@ 0x80
 80073e6:	0092      	lsls	r2, r2, #2
 80073e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073ea:	000c      	movs	r4, r1
 80073ec:	193b      	adds	r3, r7, r4
 80073ee:	2200      	movs	r2, #0
 80073f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f2:	193b      	adds	r3, r7, r4
 80073f4:	2200      	movs	r2, #0
 80073f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80073f8:	193b      	adds	r3, r7, r4
 80073fa:	4a28      	ldr	r2, [pc, #160]	@ (800749c <MX_GPIO_Init+0x250>)
 80073fc:	0019      	movs	r1, r3
 80073fe:	0010      	movs	r0, r2
 8007400:	f008 f862 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007404:	193b      	adds	r3, r7, r4
 8007406:	2280      	movs	r2, #128	@ 0x80
 8007408:	0212      	lsls	r2, r2, #8
 800740a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800740c:	193b      	adds	r3, r7, r4
 800740e:	2288      	movs	r2, #136	@ 0x88
 8007410:	0352      	lsls	r2, r2, #13
 8007412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007414:	193b      	adds	r3, r7, r4
 8007416:	2200      	movs	r2, #0
 8007418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800741a:	193a      	adds	r2, r7, r4
 800741c:	23a0      	movs	r3, #160	@ 0xa0
 800741e:	05db      	lsls	r3, r3, #23
 8007420:	0011      	movs	r1, r2
 8007422:	0018      	movs	r0, r3
 8007424:	f008 f850 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007428:	0021      	movs	r1, r4
 800742a:	187b      	adds	r3, r7, r1
 800742c:	22c0      	movs	r2, #192	@ 0xc0
 800742e:	0152      	lsls	r2, r2, #5
 8007430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007432:	000c      	movs	r4, r1
 8007434:	193b      	adds	r3, r7, r4
 8007436:	2201      	movs	r2, #1
 8007438:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743a:	193b      	adds	r3, r7, r4
 800743c:	2200      	movs	r2, #0
 800743e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007440:	193b      	adds	r3, r7, r4
 8007442:	2200      	movs	r2, #0
 8007444:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007446:	193b      	adds	r3, r7, r4
 8007448:	4a14      	ldr	r2, [pc, #80]	@ (800749c <MX_GPIO_Init+0x250>)
 800744a:	0019      	movs	r1, r3
 800744c:	0010      	movs	r0, r2
 800744e:	f008 f83b 	bl	800f4c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007452:	0021      	movs	r1, r4
 8007454:	187b      	adds	r3, r7, r1
 8007456:	2204      	movs	r2, #4
 8007458:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800745a:	187b      	adds	r3, r7, r1
 800745c:	2200      	movs	r2, #0
 800745e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007460:	187b      	adds	r3, r7, r1
 8007462:	2201      	movs	r2, #1
 8007464:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007466:	187b      	adds	r3, r7, r1
 8007468:	4a0f      	ldr	r2, [pc, #60]	@ (80074a8 <MX_GPIO_Init+0x25c>)
 800746a:	0019      	movs	r1, r3
 800746c:	0010      	movs	r0, r2
 800746e:	f008 f82b 	bl	800f4c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	2007      	movs	r0, #7
 8007478:	f007 fbd8 	bl	800ec2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800747c:	2007      	movs	r0, #7
 800747e:	f007 fbea 	bl	800ec56 <HAL_NVIC_EnableIRQ>

}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	46bd      	mov	sp, r7
 8007486:	b00b      	add	sp, #44	@ 0x2c
 8007488:	bd90      	pop	{r4, r7, pc}
 800748a:	46c0      	nop			@ (mov r8, r8)
 800748c:	40021000 	.word	0x40021000
 8007490:	50001c00 	.word	0x50001c00
 8007494:	00000301 	.word	0x00000301
 8007498:	50000400 	.word	0x50000400
 800749c:	50000800 	.word	0x50000800
 80074a0:	0000200c 	.word	0x0000200c
 80074a4:	0000403e 	.word	0x0000403e
 80074a8:	50000c00 	.word	0x50000c00

080074ac <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2100      	movs	r1, #0
 80074ba:	0018      	movs	r0, r3
 80074bc:	f00e fd7a 	bl	8015fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2108      	movs	r1, #8
 80074c4:	0018      	movs	r0, r3
 80074c6:	f00e fd75 	bl	8015fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	210c      	movs	r1, #12
 80074ce:	0018      	movs	r0, r3
 80074d0:	f00e fd70 	bl	8015fb4 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80074d4:	2380      	movs	r3, #128	@ 0x80
 80074d6:	05db      	lsls	r3, r3, #23
 80074d8:	22fa      	movs	r2, #250	@ 0xfa
 80074da:	0112      	lsls	r2, r2, #4
 80074dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80074de:	2380      	movs	r3, #128	@ 0x80
 80074e0:	05db      	lsls	r3, r3, #23
 80074e2:	22fa      	movs	r2, #250	@ 0xfa
 80074e4:	0112      	lsls	r2, r2, #4
 80074e6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80074e8:	2380      	movs	r3, #128	@ 0x80
 80074ea:	05db      	lsls	r3, r3, #23
 80074ec:	22fa      	movs	r2, #250	@ 0xfa
 80074ee:	0112      	lsls	r2, r2, #4
 80074f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80074f2:	2380      	movs	r3, #128	@ 0x80
 80074f4:	05db      	lsls	r3, r3, #23
 80074f6:	22fa      	movs	r2, #250	@ 0xfa
 80074f8:	0112      	lsls	r2, r2, #4
 80074fa:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2100      	movs	r1, #0
 8007500:	0018      	movs	r0, r3
 8007502:	f00e fd57 	bl	8015fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2104      	movs	r1, #4
 800750a:	0018      	movs	r0, r3
 800750c:	f00e fd52 	bl	8015fb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2108      	movs	r1, #8
 8007514:	0018      	movs	r0, r3
 8007516:	f00e fd4d 	bl	8015fb4 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800751a:	4b0a      	ldr	r3, [pc, #40]	@ (8007544 <GPIO_InitPWMLEDs+0x98>)
 800751c:	22fa      	movs	r2, #250	@ 0xfa
 800751e:	0112      	lsls	r2, r2, #4
 8007520:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007522:	4b08      	ldr	r3, [pc, #32]	@ (8007544 <GPIO_InitPWMLEDs+0x98>)
 8007524:	22fa      	movs	r2, #250	@ 0xfa
 8007526:	0112      	lsls	r2, r2, #4
 8007528:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800752a:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <GPIO_InitPWMLEDs+0x98>)
 800752c:	22fa      	movs	r2, #250	@ 0xfa
 800752e:	0112      	lsls	r2, r2, #4
 8007530:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007532:	4b04      	ldr	r3, [pc, #16]	@ (8007544 <GPIO_InitPWMLEDs+0x98>)
 8007534:	22fa      	movs	r2, #250	@ 0xfa
 8007536:	0112      	lsls	r2, r2, #4
 8007538:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b002      	add	sp, #8
 8007540:	bd80      	pop	{r7, pc}
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	40000400 	.word	0x40000400

08007548 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800754c:	4b1b      	ldr	r3, [pc, #108]	@ (80075bc <MX_I2C1_Init+0x74>)
 800754e:	4a1c      	ldr	r2, [pc, #112]	@ (80075c0 <MX_I2C1_Init+0x78>)
 8007550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007552:	4b1a      	ldr	r3, [pc, #104]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007554:	4a1b      	ldr	r2, [pc, #108]	@ (80075c4 <MX_I2C1_Init+0x7c>)
 8007556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007558:	4b18      	ldr	r3, [pc, #96]	@ (80075bc <MX_I2C1_Init+0x74>)
 800755a:	2200      	movs	r2, #0
 800755c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800755e:	4b17      	ldr	r3, [pc, #92]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007560:	2201      	movs	r2, #1
 8007562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007564:	4b15      	ldr	r3, [pc, #84]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007566:	2200      	movs	r2, #0
 8007568:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800756a:	4b14      	ldr	r3, [pc, #80]	@ (80075bc <MX_I2C1_Init+0x74>)
 800756c:	2200      	movs	r2, #0
 800756e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007570:	4b12      	ldr	r3, [pc, #72]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007572:	2200      	movs	r2, #0
 8007574:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007576:	4b11      	ldr	r3, [pc, #68]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007578:	2200      	movs	r2, #0
 800757a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800757c:	4b0f      	ldr	r3, [pc, #60]	@ (80075bc <MX_I2C1_Init+0x74>)
 800757e:	2200      	movs	r2, #0
 8007580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007582:	4b0e      	ldr	r3, [pc, #56]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007584:	0018      	movs	r0, r3
 8007586:	f008 f973 	bl	800f870 <HAL_I2C_Init>
 800758a:	1e03      	subs	r3, r0, #0
 800758c:	d001      	beq.n	8007592 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800758e:	f000 ff85 	bl	800849c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007594:	2100      	movs	r1, #0
 8007596:	0018      	movs	r0, r3
 8007598:	f00a fd44 	bl	8012024 <HAL_I2CEx_ConfigAnalogFilter>
 800759c:	1e03      	subs	r3, r0, #0
 800759e:	d001      	beq.n	80075a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80075a0:	f000 ff7c 	bl	800849c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80075a4:	4b05      	ldr	r3, [pc, #20]	@ (80075bc <MX_I2C1_Init+0x74>)
 80075a6:	2100      	movs	r1, #0
 80075a8:	0018      	movs	r0, r3
 80075aa:	f00a fd87 	bl	80120bc <HAL_I2CEx_ConfigDigitalFilter>
 80075ae:	1e03      	subs	r3, r0, #0
 80075b0:	d001      	beq.n	80075b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80075b2:	f000 ff73 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80075b6:	46c0      	nop			@ (mov r8, r8)
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000d58 	.word	0x20000d58
 80075c0:	40005400 	.word	0x40005400
 80075c4:	00503d58 	.word	0x00503d58

080075c8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80075cc:	4b1b      	ldr	r3, [pc, #108]	@ (800763c <MX_I2C2_Init+0x74>)
 80075ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007640 <MX_I2C2_Init+0x78>)
 80075d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80075d2:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <MX_I2C2_Init+0x74>)
 80075d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007644 <MX_I2C2_Init+0x7c>)
 80075d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80075d8:	4b18      	ldr	r3, [pc, #96]	@ (800763c <MX_I2C2_Init+0x74>)
 80075da:	2200      	movs	r2, #0
 80075dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80075de:	4b17      	ldr	r3, [pc, #92]	@ (800763c <MX_I2C2_Init+0x74>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80075e4:	4b15      	ldr	r3, [pc, #84]	@ (800763c <MX_I2C2_Init+0x74>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80075ea:	4b14      	ldr	r3, [pc, #80]	@ (800763c <MX_I2C2_Init+0x74>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80075f0:	4b12      	ldr	r3, [pc, #72]	@ (800763c <MX_I2C2_Init+0x74>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075f6:	4b11      	ldr	r3, [pc, #68]	@ (800763c <MX_I2C2_Init+0x74>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075fc:	4b0f      	ldr	r3, [pc, #60]	@ (800763c <MX_I2C2_Init+0x74>)
 80075fe:	2200      	movs	r2, #0
 8007600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007602:	4b0e      	ldr	r3, [pc, #56]	@ (800763c <MX_I2C2_Init+0x74>)
 8007604:	0018      	movs	r0, r3
 8007606:	f008 f933 	bl	800f870 <HAL_I2C_Init>
 800760a:	1e03      	subs	r3, r0, #0
 800760c:	d001      	beq.n	8007612 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800760e:	f000 ff45 	bl	800849c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007612:	4b0a      	ldr	r3, [pc, #40]	@ (800763c <MX_I2C2_Init+0x74>)
 8007614:	2100      	movs	r1, #0
 8007616:	0018      	movs	r0, r3
 8007618:	f00a fd04 	bl	8012024 <HAL_I2CEx_ConfigAnalogFilter>
 800761c:	1e03      	subs	r3, r0, #0
 800761e:	d001      	beq.n	8007624 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007620:	f000 ff3c 	bl	800849c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007624:	4b05      	ldr	r3, [pc, #20]	@ (800763c <MX_I2C2_Init+0x74>)
 8007626:	2100      	movs	r1, #0
 8007628:	0018      	movs	r0, r3
 800762a:	f00a fd47 	bl	80120bc <HAL_I2CEx_ConfigDigitalFilter>
 800762e:	1e03      	subs	r3, r0, #0
 8007630:	d001      	beq.n	8007636 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007632:	f000 ff33 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000dac 	.word	0x20000dac
 8007640:	40005800 	.word	0x40005800
 8007644:	00503d58 	.word	0x00503d58

08007648 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b08b      	sub	sp, #44	@ 0x2c
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007650:	2414      	movs	r4, #20
 8007652:	193b      	adds	r3, r7, r4
 8007654:	0018      	movs	r0, r3
 8007656:	2314      	movs	r3, #20
 8007658:	001a      	movs	r2, r3
 800765a:	2100      	movs	r1, #0
 800765c:	f018 f896 	bl	801f78c <memset>
  if(i2cHandle->Instance==I2C1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a5d      	ldr	r2, [pc, #372]	@ (80077dc <HAL_I2C_MspInit+0x194>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d000      	beq.n	800766c <HAL_I2C_MspInit+0x24>
 800766a:	e083      	b.n	8007774 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800766c:	4b5c      	ldr	r3, [pc, #368]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 800766e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007670:	4b5b      	ldr	r3, [pc, #364]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 8007672:	2102      	movs	r1, #2
 8007674:	430a      	orrs	r2, r1
 8007676:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007678:	4b59      	ldr	r3, [pc, #356]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767c:	2202      	movs	r2, #2
 800767e:	4013      	ands	r3, r2
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007684:	0021      	movs	r1, r4
 8007686:	187b      	adds	r3, r7, r1
 8007688:	22c0      	movs	r2, #192	@ 0xc0
 800768a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800768c:	187b      	adds	r3, r7, r1
 800768e:	2212      	movs	r2, #18
 8007690:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007692:	187b      	adds	r3, r7, r1
 8007694:	2200      	movs	r2, #0
 8007696:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007698:	187b      	adds	r3, r7, r1
 800769a:	2203      	movs	r2, #3
 800769c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800769e:	187b      	adds	r3, r7, r1
 80076a0:	2201      	movs	r2, #1
 80076a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076a4:	187b      	adds	r3, r7, r1
 80076a6:	4a4f      	ldr	r2, [pc, #316]	@ (80077e4 <HAL_I2C_MspInit+0x19c>)
 80076a8:	0019      	movs	r1, r3
 80076aa:	0010      	movs	r0, r2
 80076ac:	f007 ff0c 	bl	800f4c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80076b0:	4b4b      	ldr	r3, [pc, #300]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 80076b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076b4:	4b4a      	ldr	r3, [pc, #296]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 80076b6:	2180      	movs	r1, #128	@ 0x80
 80076b8:	0389      	lsls	r1, r1, #14
 80076ba:	430a      	orrs	r2, r1
 80076bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80076be:	4b4a      	ldr	r3, [pc, #296]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076c0:	4a4a      	ldr	r2, [pc, #296]	@ (80077ec <HAL_I2C_MspInit+0x1a4>)
 80076c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80076c4:	4b48      	ldr	r3, [pc, #288]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076c6:	2206      	movs	r2, #6
 80076c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80076ca:	4b47      	ldr	r3, [pc, #284]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076d0:	4b45      	ldr	r3, [pc, #276]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80076d6:	4b44      	ldr	r3, [pc, #272]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076d8:	2280      	movs	r2, #128	@ 0x80
 80076da:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076dc:	4b42      	ldr	r3, [pc, #264]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076de:	2200      	movs	r2, #0
 80076e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076e2:	4b41      	ldr	r3, [pc, #260]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80076e8:	4b3f      	ldr	r3, [pc, #252]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80076ee:	4b3e      	ldr	r3, [pc, #248]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80076f4:	4b3c      	ldr	r3, [pc, #240]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076f6:	0018      	movs	r0, r3
 80076f8:	f007 faca 	bl	800ec90 <HAL_DMA_Init>
 80076fc:	1e03      	subs	r3, r0, #0
 80076fe:	d001      	beq.n	8007704 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007700:	f000 fecc 	bl	800849c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a38      	ldr	r2, [pc, #224]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 8007708:	63da      	str	r2, [r3, #60]	@ 0x3c
 800770a:	4b37      	ldr	r3, [pc, #220]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007710:	4b37      	ldr	r3, [pc, #220]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007712:	4a38      	ldr	r2, [pc, #224]	@ (80077f4 <HAL_I2C_MspInit+0x1ac>)
 8007714:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007716:	4b36      	ldr	r3, [pc, #216]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007718:	2206      	movs	r2, #6
 800771a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800771c:	4b34      	ldr	r3, [pc, #208]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800771e:	2210      	movs	r2, #16
 8007720:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007722:	4b33      	ldr	r3, [pc, #204]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007724:	2200      	movs	r2, #0
 8007726:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007728:	4b31      	ldr	r3, [pc, #196]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800772a:	2280      	movs	r2, #128	@ 0x80
 800772c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800772e:	4b30      	ldr	r3, [pc, #192]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007730:	2200      	movs	r2, #0
 8007732:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007734:	4b2e      	ldr	r3, [pc, #184]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007736:	2200      	movs	r2, #0
 8007738:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800773a:	4b2d      	ldr	r3, [pc, #180]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800773c:	2200      	movs	r2, #0
 800773e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007740:	4b2b      	ldr	r3, [pc, #172]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007742:	2200      	movs	r2, #0
 8007744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007746:	4b2a      	ldr	r3, [pc, #168]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007748:	0018      	movs	r0, r3
 800774a:	f007 faa1 	bl	800ec90 <HAL_DMA_Init>
 800774e:	1e03      	subs	r3, r0, #0
 8007750:	d001      	beq.n	8007756 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007752:	f000 fea3 	bl	800849c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a25      	ldr	r2, [pc, #148]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38
 800775c:	4b24      	ldr	r3, [pc, #144]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	2017      	movs	r0, #23
 8007768:	f007 fa60 	bl	800ec2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800776c:	2017      	movs	r0, #23
 800776e:	f007 fa72 	bl	800ec56 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007772:	e02e      	b.n	80077d2 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1f      	ldr	r2, [pc, #124]	@ (80077f8 <HAL_I2C_MspInit+0x1b0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d129      	bne.n	80077d2 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800777e:	4b18      	ldr	r3, [pc, #96]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 8007780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007782:	4b17      	ldr	r3, [pc, #92]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 8007784:	2102      	movs	r1, #2
 8007786:	430a      	orrs	r2, r1
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c
 800778a:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	2202      	movs	r2, #2
 8007790:	4013      	ands	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007796:	2114      	movs	r1, #20
 8007798:	187b      	adds	r3, r7, r1
 800779a:	22c0      	movs	r2, #192	@ 0xc0
 800779c:	0112      	lsls	r2, r2, #4
 800779e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077a0:	187b      	adds	r3, r7, r1
 80077a2:	2212      	movs	r2, #18
 80077a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a6:	187b      	adds	r3, r7, r1
 80077a8:	2200      	movs	r2, #0
 80077aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ac:	187b      	adds	r3, r7, r1
 80077ae:	2203      	movs	r2, #3
 80077b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80077b2:	187b      	adds	r3, r7, r1
 80077b4:	2206      	movs	r2, #6
 80077b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077b8:	187b      	adds	r3, r7, r1
 80077ba:	4a0a      	ldr	r2, [pc, #40]	@ (80077e4 <HAL_I2C_MspInit+0x19c>)
 80077bc:	0019      	movs	r1, r3
 80077be:	0010      	movs	r0, r2
 80077c0:	f007 fe82 	bl	800f4c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80077c4:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 80077c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077c8:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 80077ca:	2180      	movs	r1, #128	@ 0x80
 80077cc:	03c9      	lsls	r1, r1, #15
 80077ce:	430a      	orrs	r2, r1
 80077d0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80077d2:	46c0      	nop			@ (mov r8, r8)
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b00b      	add	sp, #44	@ 0x2c
 80077d8:	bd90      	pop	{r4, r7, pc}
 80077da:	46c0      	nop			@ (mov r8, r8)
 80077dc:	40005400 	.word	0x40005400
 80077e0:	40021000 	.word	0x40021000
 80077e4:	50000400 	.word	0x50000400
 80077e8:	20000e00 	.word	0x20000e00
 80077ec:	40020030 	.word	0x40020030
 80077f0:	20000e48 	.word	0x20000e48
 80077f4:	4002001c 	.word	0x4002001c
 80077f8:	40005800 	.word	0x40005800

080077fc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007800:	4b10      	ldr	r3, [pc, #64]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007802:	4a11      	ldr	r2, [pc, #68]	@ (8007848 <MX_I2S2_Init+0x4c>)
 8007804:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007806:	4b0f      	ldr	r3, [pc, #60]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007808:	22c0      	movs	r2, #192	@ 0xc0
 800780a:	0092      	lsls	r2, r2, #2
 800780c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800780e:	4b0d      	ldr	r3, [pc, #52]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007810:	2200      	movs	r2, #0
 8007812:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007814:	4b0b      	ldr	r3, [pc, #44]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007816:	2203      	movs	r2, #3
 8007818:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800781a:	4b0a      	ldr	r3, [pc, #40]	@ (8007844 <MX_I2S2_Init+0x48>)
 800781c:	2200      	movs	r2, #0
 800781e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007820:	4b08      	ldr	r3, [pc, #32]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007822:	22fa      	movs	r2, #250	@ 0xfa
 8007824:	0192      	lsls	r2, r2, #6
 8007826:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007828:	4b06      	ldr	r3, [pc, #24]	@ (8007844 <MX_I2S2_Init+0x48>)
 800782a:	2200      	movs	r2, #0
 800782c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800782e:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007830:	0018      	movs	r0, r3
 8007832:	f00a fc8f 	bl	8012154 <HAL_I2S_Init>
 8007836:	1e03      	subs	r3, r0, #0
 8007838:	d001      	beq.n	800783e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800783a:	f000 fe2f 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800783e:	46c0      	nop			@ (mov r8, r8)
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000e90 	.word	0x20000e90
 8007848:	40003800 	.word	0x40003800

0800784c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800784c:	b590      	push	{r4, r7, lr}
 800784e:	b089      	sub	sp, #36	@ 0x24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007854:	240c      	movs	r4, #12
 8007856:	193b      	adds	r3, r7, r4
 8007858:	0018      	movs	r0, r3
 800785a:	2314      	movs	r3, #20
 800785c:	001a      	movs	r2, r3
 800785e:	2100      	movs	r1, #0
 8007860:	f017 ff94 	bl	801f78c <memset>
  if(i2sHandle->Instance==SPI2)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a2d      	ldr	r2, [pc, #180]	@ (8007920 <HAL_I2S_MspInit+0xd4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d154      	bne.n	8007918 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800786e:	4b2d      	ldr	r3, [pc, #180]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 8007870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007872:	4b2c      	ldr	r3, [pc, #176]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 8007874:	2180      	movs	r1, #128	@ 0x80
 8007876:	01c9      	lsls	r1, r1, #7
 8007878:	430a      	orrs	r2, r1
 800787a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800787c:	4b29      	ldr	r3, [pc, #164]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 800787e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 8007882:	2102      	movs	r1, #2
 8007884:	430a      	orrs	r2, r1
 8007886:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007888:	4b26      	ldr	r3, [pc, #152]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	2202      	movs	r2, #2
 800788e:	4013      	ands	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007894:	193b      	adds	r3, r7, r4
 8007896:	22b0      	movs	r2, #176	@ 0xb0
 8007898:	0212      	lsls	r2, r2, #8
 800789a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800789c:	0021      	movs	r1, r4
 800789e:	187b      	adds	r3, r7, r1
 80078a0:	2202      	movs	r2, #2
 80078a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a4:	187b      	adds	r3, r7, r1
 80078a6:	2200      	movs	r2, #0
 80078a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078aa:	187b      	adds	r3, r7, r1
 80078ac:	2200      	movs	r2, #0
 80078ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	2200      	movs	r2, #0
 80078b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078b6:	187b      	adds	r3, r7, r1
 80078b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007928 <HAL_I2S_MspInit+0xdc>)
 80078ba:	0019      	movs	r1, r3
 80078bc:	0010      	movs	r0, r2
 80078be:	f007 fe03 	bl	800f4c8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80078c2:	4b1a      	ldr	r3, [pc, #104]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007930 <HAL_I2S_MspInit+0xe4>)
 80078c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80078c8:	4b18      	ldr	r3, [pc, #96]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078ca:	2202      	movs	r2, #2
 80078cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078ce:	4b17      	ldr	r3, [pc, #92]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078d4:	4b15      	ldr	r3, [pc, #84]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078da:	4b14      	ldr	r3, [pc, #80]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078dc:	2280      	movs	r2, #128	@ 0x80
 80078de:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80078e0:	4b12      	ldr	r3, [pc, #72]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078e2:	2280      	movs	r2, #128	@ 0x80
 80078e4:	0052      	lsls	r2, r2, #1
 80078e6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80078e8:	4b10      	ldr	r3, [pc, #64]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078ea:	2280      	movs	r2, #128	@ 0x80
 80078ec:	00d2      	lsls	r2, r2, #3
 80078ee:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80078f0:	4b0e      	ldr	r3, [pc, #56]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078f2:	2220      	movs	r2, #32
 80078f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078fe:	0018      	movs	r0, r3
 8007900:	f007 f9c6 	bl	800ec90 <HAL_DMA_Init>
 8007904:	1e03      	subs	r3, r0, #0
 8007906:	d001      	beq.n	800790c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007908:	f000 fdc8 	bl	800849c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a07      	ldr	r2, [pc, #28]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 8007910:	631a      	str	r2, [r3, #48]	@ 0x30
 8007912:	4b06      	ldr	r3, [pc, #24]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007918:	46c0      	nop			@ (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b009      	add	sp, #36	@ 0x24
 800791e:	bd90      	pop	{r4, r7, pc}
 8007920:	40003800 	.word	0x40003800
 8007924:	40021000 	.word	0x40021000
 8007928:	50000400 	.word	0x50000400
 800792c:	20000ecc 	.word	0x20000ecc
 8007930:	40020044 	.word	0x40020044

08007934 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  testDone = true;
 8007938:	4b1e      	ldr	r3, [pc, #120]	@ (80079b4 <SetTestDone+0x80>)
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 800793e:	23fa      	movs	r3, #250	@ 0xfa
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	0018      	movs	r0, r3
 8007944:	f006 fcea 	bl	800e31c <HAL_Delay>
  SetDBLED(false, false, true);
 8007948:	2201      	movs	r2, #1
 800794a:	2100      	movs	r1, #0
 800794c:	2000      	movs	r0, #0
 800794e:	f005 f8bb 	bl	800cac8 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007952:	4a19      	ldr	r2, [pc, #100]	@ (80079b8 <SetTestDone+0x84>)
 8007954:	23fa      	movs	r3, #250	@ 0xfa
 8007956:	0119      	lsls	r1, r3, #4
 8007958:	23fa      	movs	r3, #250	@ 0xfa
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	0018      	movs	r0, r3
 800795e:	f005 f87f 	bl	800ca60 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007962:	4a15      	ldr	r2, [pc, #84]	@ (80079b8 <SetTestDone+0x84>)
 8007964:	23fa      	movs	r3, #250	@ 0xfa
 8007966:	0119      	lsls	r1, r3, #4
 8007968:	23fa      	movs	r3, #250	@ 0xfa
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	0018      	movs	r0, r3
 800796e:	f005 f8f5 	bl	800cb5c <SetVocLED>
  HAL_Delay(1000);
 8007972:	23fa      	movs	r3, #250	@ 0xfa
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	0018      	movs	r0, r3
 8007978:	f006 fcd0 	bl	800e31c <HAL_Delay>
  SetDBLED(false, false, false);
 800797c:	2200      	movs	r2, #0
 800797e:	2100      	movs	r1, #0
 8007980:	2000      	movs	r0, #0
 8007982:	f005 f8a1 	bl	800cac8 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007986:	23fa      	movs	r3, #250	@ 0xfa
 8007988:	011a      	lsls	r2, r3, #4
 800798a:	23fa      	movs	r3, #250	@ 0xfa
 800798c:	0119      	lsls	r1, r3, #4
 800798e:	23fa      	movs	r3, #250	@ 0xfa
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	0018      	movs	r0, r3
 8007994:	f005 f864 	bl	800ca60 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007998:	23fa      	movs	r3, #250	@ 0xfa
 800799a:	011a      	lsls	r2, r3, #4
 800799c:	23fa      	movs	r3, #250	@ 0xfa
 800799e:	0119      	lsls	r1, r3, #4
 80079a0:	23fa      	movs	r3, #250	@ 0xfa
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	0018      	movs	r0, r3
 80079a6:	f005 f8d9 	bl	800cb5c <SetVocLED>
  InitDone();
 80079aa:	f004 fff5 	bl	800c998 <InitDone>
}
 80079ae:	46c0      	nop			@ (mov r8, r8)
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000f14 	.word	0x20000f14
 80079b8:	00000bb8 	.word	0x00000bb8

080079bc <FlashLEDs>:

void FlashLEDs(){
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 80079c2:	1dfb      	adds	r3, r7, #7
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	e021      	b.n	8007a0e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 80079ca:	2201      	movs	r2, #1
 80079cc:	2101      	movs	r1, #1
 80079ce:	2001      	movs	r0, #1
 80079d0:	f005 f87a 	bl	800cac8 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 80079d4:	4a12      	ldr	r2, [pc, #72]	@ (8007a20 <FlashLEDs+0x64>)
 80079d6:	23fa      	movs	r3, #250	@ 0xfa
 80079d8:	0119      	lsls	r1, r3, #4
 80079da:	23fa      	movs	r3, #250	@ 0xfa
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	0018      	movs	r0, r3
 80079e0:	f005 f83e 	bl	800ca60 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 80079e4:	4a0e      	ldr	r2, [pc, #56]	@ (8007a20 <FlashLEDs+0x64>)
 80079e6:	23fa      	movs	r3, #250	@ 0xfa
 80079e8:	0119      	lsls	r1, r3, #4
 80079ea:	23fa      	movs	r3, #250	@ 0xfa
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	0018      	movs	r0, r3
 80079f0:	f005 f8b4 	bl	800cb5c <SetVocLED>
    HAL_Delay(250);
 80079f4:	20fa      	movs	r0, #250	@ 0xfa
 80079f6:	f006 fc91 	bl	800e31c <HAL_Delay>
    SetLEDsOff();
 80079fa:	f005 f9a5 	bl	800cd48 <SetLEDsOff>
    HAL_Delay(250);
 80079fe:	20fa      	movs	r0, #250	@ 0xfa
 8007a00:	f006 fc8c 	bl	800e31c <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007a04:	1dfb      	adds	r3, r7, #7
 8007a06:	781a      	ldrb	r2, [r3, #0]
 8007a08:	1dfb      	adds	r3, r7, #7
 8007a0a:	3201      	adds	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	1dfb      	adds	r3, r7, #7
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d9d9      	bls.n	80079ca <FlashLEDs+0xe>
  }
}
 8007a16:	46c0      	nop			@ (mov r8, r8)
 8007a18:	46c0      	nop			@ (mov r8, r8)
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	b002      	add	sp, #8
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	00000bb8 	.word	0x00000bb8

08007a24 <testInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void testInit(){
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8007a28:	4b08      	ldr	r3, [pc, #32]	@ (8007a4c <testInit+0x28>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8007a2e:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <testInit+0x28>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8007a34:	4b05      	ldr	r3, [pc, #20]	@ (8007a4c <testInit+0x28>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8007a3a:	4b04      	ldr	r3, [pc, #16]	@ (8007a4c <testInit+0x28>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8007a40:	4b02      	ldr	r3, [pc, #8]	@ (8007a4c <testInit+0x28>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	711a      	strb	r2, [r3, #4]
}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000f34 	.word	0x20000f34

08007a50 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8007a54:	4b02      	ldr	r3, [pc, #8]	@ (8007a60 <GetPMSensorPresence+0x10>)
 8007a56:	789b      	ldrb	r3, [r3, #2]
}
 8007a58:	0018      	movs	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	20000f34 	.word	0x20000f34

08007a64 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8007a68:	4b02      	ldr	r3, [pc, #8]	@ (8007a74 <IsPMSensorEnabled+0x10>)
 8007a6a:	789b      	ldrb	r3, [r3, #2]
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	46c0      	nop			@ (mov r8, r8)
 8007a74:	2000007c 	.word	0x2000007c

08007a78 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8007a7c:	4b02      	ldr	r3, [pc, #8]	@ (8007a88 <SetESPMeasurementDone+0x10>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	711a      	strb	r2, [r3, #4]
}
 8007a82:	46c0      	nop			@ (mov r8, r8)
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000f34 	.word	0x20000f34

08007a8c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
  testInit();
 8007a9a:	f7ff ffc3 	bl	8007a24 <testInit>
  I2CSensors_Init(sensorI2C);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7fe f89b 	bl	8005bdc <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 8007aa6:	f006 fa0b 	bl	800dec0 <HIDS_DeviceConnected>
 8007aaa:	0003      	movs	r3, r0
 8007aac:	001a      	movs	r2, r3
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4053      	eors	r3, r2
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00c      	beq.n	8007ad2 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8007ab8:	4a72      	ldr	r2, [pc, #456]	@ (8007c84 <Device_Init+0x1f8>)
 8007aba:	4b73      	ldr	r3, [pc, #460]	@ (8007c88 <Device_Init+0x1fc>)
 8007abc:	0019      	movs	r1, r3
 8007abe:	2001      	movs	r0, #1
 8007ac0:	f005 ffd6 	bl	800da70 <CreateLine>
     SensorProbe.HT_Present = false;
 8007ac4:	4b71      	ldr	r3, [pc, #452]	@ (8007c8c <Device_Init+0x200>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8007aca:	4b71      	ldr	r3, [pc, #452]	@ (8007c90 <Device_Init+0x204>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e008      	b.n	8007ae4 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8007ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8007c8c <Device_Init+0x200>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8007ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8007c94 <Device_Init+0x208>)
 8007ada:	4b6f      	ldr	r3, [pc, #444]	@ (8007c98 <Device_Init+0x20c>)
 8007adc:	0019      	movs	r1, r3
 8007ade:	2003      	movs	r0, #3
 8007ae0:	f005 ffc6 	bl	800da70 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8007ae4:	f003 fd3a 	bl	800b55c <SGP_DeviceConnected>
 8007ae8:	0003      	movs	r3, r0
 8007aea:	001a      	movs	r2, r3
 8007aec:	2301      	movs	r3, #1
 8007aee:	4053      	eors	r3, r2
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8007af6:	4b65      	ldr	r3, [pc, #404]	@ (8007c8c <Device_Init+0x200>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8007afc:	4a67      	ldr	r2, [pc, #412]	@ (8007c9c <Device_Init+0x210>)
 8007afe:	4b62      	ldr	r3, [pc, #392]	@ (8007c88 <Device_Init+0x1fc>)
 8007b00:	0019      	movs	r1, r3
 8007b02:	2001      	movs	r0, #1
 8007b04:	f005 ffb4 	bl	800da70 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8007b08:	4b61      	ldr	r3, [pc, #388]	@ (8007c90 <Device_Init+0x204>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	705a      	strb	r2, [r3, #1]
 8007b0e:	e008      	b.n	8007b22 <Device_Init+0x96>
  }
  else{
    SensorProbe.VOC_Present = true;
 8007b10:	4b5e      	ldr	r3, [pc, #376]	@ (8007c8c <Device_Init+0x200>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8007b16:	4a62      	ldr	r2, [pc, #392]	@ (8007ca0 <Device_Init+0x214>)
 8007b18:	4b5f      	ldr	r3, [pc, #380]	@ (8007c98 <Device_Init+0x20c>)
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	2003      	movs	r0, #3
 8007b1e:	f005 ffa7 	bl	800da70 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8007b22:	4b5a      	ldr	r3, [pc, #360]	@ (8007c8c <Device_Init+0x200>)
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <Device_Init+0xb2>
 8007b2a:	4b58      	ldr	r3, [pc, #352]	@ (8007c8c <Device_Init+0x200>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <Device_Init+0xb2>
    SetDBLED(false, true, false);
 8007b32:	2200      	movs	r2, #0
 8007b34:	2101      	movs	r1, #1
 8007b36:	2000      	movs	r0, #0
 8007b38:	f004 ffc6 	bl	800cac8 <SetDBLED>
 8007b3c:	e018      	b.n	8007b70 <Device_Init+0xe4>
  }
  else{
    SetDBLED(true, false, false);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	2001      	movs	r0, #1
 8007b44:	f004 ffc0 	bl	800cac8 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8007b48:	4b56      	ldr	r3, [pc, #344]	@ (8007ca4 <Device_Init+0x218>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f007 fe55 	bl	800f7fe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8007b54:	2380      	movs	r3, #128	@ 0x80
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4852      	ldr	r0, [pc, #328]	@ (8007ca4 <Device_Init+0x218>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	0019      	movs	r1, r3
 8007b5e:	f007 fe4e 	bl	800f7fe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007b62:	2380      	movs	r3, #128	@ 0x80
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	484f      	ldr	r0, [pc, #316]	@ (8007ca4 <Device_Init+0x218>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	f007 fe47 	bl	800f7fe <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 8007b70:	4b47      	ldr	r3, [pc, #284]	@ (8007c90 <Device_Init+0x204>)
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d028      	beq.n	8007bca <Device_Init+0x13e>
    Info("Device_Init calls enableMicrophone");
 8007b78:	4a4b      	ldr	r2, [pc, #300]	@ (8007ca8 <Device_Init+0x21c>)
 8007b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8007cac <Device_Init+0x220>)
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	2002      	movs	r0, #2
 8007b80:	f005 ff76 	bl	800da70 <CreateLine>
    if (!enableMicrophone(true)) {
 8007b84:	2001      	movs	r0, #1
 8007b86:	f004 f8e5 	bl	800bd54 <enableMicrophone>
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	001a      	movs	r2, r3
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4053      	eors	r3, r2
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00c      	beq.n	8007bb2 <Device_Init+0x126>
      Error("Microphone device not connected! DMA Error.");
 8007b98:	4a45      	ldr	r2, [pc, #276]	@ (8007cb0 <Device_Init+0x224>)
 8007b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c88 <Device_Init+0x1fc>)
 8007b9c:	0019      	movs	r1, r3
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f005 ff66 	bl	800da70 <CreateLine>
      SensorProbe.MIC_Present = false;
 8007ba4:	4b39      	ldr	r3, [pc, #228]	@ (8007c8c <Device_Init+0x200>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8007baa:	4b39      	ldr	r3, [pc, #228]	@ (8007c90 <Device_Init+0x204>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	70da      	strb	r2, [r3, #3]
 8007bb0:	e00b      	b.n	8007bca <Device_Init+0x13e>
    }
    else{
      SensorProbe.MIC_Present = true;
 8007bb2:	4b36      	ldr	r3, [pc, #216]	@ (8007c8c <Device_Init+0x200>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8007bb8:	4b35      	ldr	r3, [pc, #212]	@ (8007c90 <Device_Init+0x204>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8007bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8007cb4 <Device_Init+0x228>)
 8007bc0:	4b35      	ldr	r3, [pc, #212]	@ (8007c98 <Device_Init+0x20c>)
 8007bc2:	0019      	movs	r1, r3
 8007bc4:	2003      	movs	r0, #3
 8007bc6:	f005 ff53 	bl	800da70 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8007bca:	f001 f8ad 	bl	8008d28 <probe_sen5x>
 8007bce:	1e03      	subs	r3, r0, #0
 8007bd0:	d10c      	bne.n	8007bec <Device_Init+0x160>
    Debug("PM sensor initialised.");
 8007bd2:	4a39      	ldr	r2, [pc, #228]	@ (8007cb8 <Device_Init+0x22c>)
 8007bd4:	4b30      	ldr	r3, [pc, #192]	@ (8007c98 <Device_Init+0x20c>)
 8007bd6:	0019      	movs	r1, r3
 8007bd8:	2003      	movs	r0, #3
 8007bda:	f005 ff49 	bl	800da70 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8007bde:	4b2b      	ldr	r3, [pc, #172]	@ (8007c8c <Device_Init+0x200>)
 8007be0:	2201      	movs	r2, #1
 8007be2:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8007be4:	4b2a      	ldr	r3, [pc, #168]	@ (8007c90 <Device_Init+0x204>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	709a      	strb	r2, [r3, #2]
 8007bea:	e00d      	b.n	8007c08 <Device_Init+0x17c>
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8007bec:	f001 f874 	bl	8008cd8 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8007bf0:	4a32      	ldr	r2, [pc, #200]	@ (8007cbc <Device_Init+0x230>)
 8007bf2:	4b29      	ldr	r3, [pc, #164]	@ (8007c98 <Device_Init+0x20c>)
 8007bf4:	0019      	movs	r1, r3
 8007bf6:	2003      	movs	r0, #3
 8007bf8:	f005 ff3a 	bl	800da70 <CreateLine>
    SensorProbe.MIC_Present = false;
 8007bfc:	4b23      	ldr	r3, [pc, #140]	@ (8007c8c <Device_Init+0x200>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	70da      	strb	r2, [r3, #3]
    Sensor.PM_measurementEnabled = false;
 8007c02:	4b23      	ldr	r3, [pc, #140]	@ (8007c90 <Device_Init+0x204>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8007c08:	4b20      	ldr	r3, [pc, #128]	@ (8007c8c <Device_Init+0x200>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <Device_Init+0x188>
 8007c10:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc0 <Device_Init+0x234>)
 8007c12:	e000      	b.n	8007c16 <Device_Init+0x18a>
 8007c14:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc4 <Device_Init+0x238>)
 8007c16:	4a2c      	ldr	r2, [pc, #176]	@ (8007cc8 <Device_Init+0x23c>)
 8007c18:	4924      	ldr	r1, [pc, #144]	@ (8007cac <Device_Init+0x220>)
 8007c1a:	2002      	movs	r0, #2
 8007c1c:	f005 ff28 	bl	800da70 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8007c20:	4b1a      	ldr	r3, [pc, #104]	@ (8007c8c <Device_Init+0x200>)
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <Device_Init+0x1a0>
 8007c28:	4b25      	ldr	r3, [pc, #148]	@ (8007cc0 <Device_Init+0x234>)
 8007c2a:	e000      	b.n	8007c2e <Device_Init+0x1a2>
 8007c2c:	4b25      	ldr	r3, [pc, #148]	@ (8007cc4 <Device_Init+0x238>)
 8007c2e:	4a27      	ldr	r2, [pc, #156]	@ (8007ccc <Device_Init+0x240>)
 8007c30:	491e      	ldr	r1, [pc, #120]	@ (8007cac <Device_Init+0x220>)
 8007c32:	2002      	movs	r0, #2
 8007c34:	f005 ff1c 	bl	800da70 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 8007c38:	4b14      	ldr	r3, [pc, #80]	@ (8007c8c <Device_Init+0x200>)
 8007c3a:	789b      	ldrb	r3, [r3, #2]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <Device_Init+0x1b8>
 8007c40:	4b1f      	ldr	r3, [pc, #124]	@ (8007cc0 <Device_Init+0x234>)
 8007c42:	e000      	b.n	8007c46 <Device_Init+0x1ba>
 8007c44:	4b1f      	ldr	r3, [pc, #124]	@ (8007cc4 <Device_Init+0x238>)
 8007c46:	4a22      	ldr	r2, [pc, #136]	@ (8007cd0 <Device_Init+0x244>)
 8007c48:	4918      	ldr	r1, [pc, #96]	@ (8007cac <Device_Init+0x220>)
 8007c4a:	2002      	movs	r0, #2
 8007c4c:	f005 ff10 	bl	800da70 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8007c50:	4b0e      	ldr	r3, [pc, #56]	@ (8007c8c <Device_Init+0x200>)
 8007c52:	78db      	ldrb	r3, [r3, #3]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <Device_Init+0x1d0>
 8007c58:	4b19      	ldr	r3, [pc, #100]	@ (8007cc0 <Device_Init+0x234>)
 8007c5a:	e000      	b.n	8007c5e <Device_Init+0x1d2>
 8007c5c:	4b19      	ldr	r3, [pc, #100]	@ (8007cc4 <Device_Init+0x238>)
 8007c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd4 <Device_Init+0x248>)
 8007c60:	4912      	ldr	r1, [pc, #72]	@ (8007cac <Device_Init+0x220>)
 8007c62:	2002      	movs	r0, #2
 8007c64:	f005 ff04 	bl	800da70 <CreateLine>
  ESP_Init(espUart);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	f7fb fec8 	bl	8003a00 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8007c70:	4a19      	ldr	r2, [pc, #100]	@ (8007cd8 <Device_Init+0x24c>)
 8007c72:	4b09      	ldr	r3, [pc, #36]	@ (8007c98 <Device_Init+0x20c>)
 8007c74:	0019      	movs	r1, r3
 8007c76:	2003      	movs	r0, #3
 8007c78:	f005 fefa 	bl	800da70 <CreateLine>
}
 8007c7c:	46c0      	nop			@ (mov r8, r8)
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b004      	add	sp, #16
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	080233f4 	.word	0x080233f4
 8007c88:	08023424 	.word	0x08023424
 8007c8c:	20000f34 	.word	0x20000f34
 8007c90:	2000007c 	.word	0x2000007c
 8007c94:	08023428 	.word	0x08023428
 8007c98:	08023454 	.word	0x08023454
 8007c9c:	08023458 	.word	0x08023458
 8007ca0:	08023474 	.word	0x08023474
 8007ca4:	50000400 	.word	0x50000400
 8007ca8:	0802348c 	.word	0x0802348c
 8007cac:	080234b0 	.word	0x080234b0
 8007cb0:	080234b4 	.word	0x080234b4
 8007cb4:	080234e0 	.word	0x080234e0
 8007cb8:	0802350c 	.word	0x0802350c
 8007cbc:	08023524 	.word	0x08023524
 8007cc0:	08023548 	.word	0x08023548
 8007cc4:	0802354c 	.word	0x0802354c
 8007cc8:	08023550 	.word	0x08023550
 8007ccc:	0802356c 	.word	0x0802356c
 8007cd0:	08023588 	.word	0x08023588
 8007cd4:	080235a4 	.word	0x080235a4
 8007cd8:	080235c0 	.word	0x080235c0

08007cdc <Device_Test>:

void Device_Test(){
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8007ce0:	4b31      	ldr	r3, [pc, #196]	@ (8007da8 <Device_Test+0xcc>)
 8007ce2:	78db      	ldrb	r3, [r3, #3]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4053      	eors	r3, r2
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d021      	beq.n	8007d32 <Device_Test+0x56>
    if(MIC_TestMeasurementDone()){
 8007cee:	f000 fd71 	bl	80087d4 <MIC_TestMeasurementDone>
 8007cf2:	1e03      	subs	r3, r0, #0
 8007cf4:	d00e      	beq.n	8007d14 <Device_Test+0x38>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8007da8 <Device_Test+0xcc>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8007cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8007dac <Device_Test+0xd0>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007d02:	23fa      	movs	r3, #250	@ 0xfa
 8007d04:	011a      	lsls	r2, r3, #4
 8007d06:	492a      	ldr	r1, [pc, #168]	@ (8007db0 <Device_Test+0xd4>)
 8007d08:	23fa      	movs	r3, #250	@ 0xfa
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f004 fea7 	bl	800ca60 <SetStatusLED>
 8007d12:	e00e      	b.n	8007d32 <Device_Test+0x56>
    }
    else{
      if (micSettlingComplete()) {
 8007d14:	f003 fffa 	bl	800bd0c <micSettlingComplete>
 8007d18:	1e03      	subs	r3, r0, #0
 8007d1a:	d00a      	beq.n	8007d32 <Device_Test+0x56>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 8007d1c:	4b23      	ldr	r3, [pc, #140]	@ (8007dac <Device_Test+0xd0>)
 8007d1e:	2201      	movs	r2, #1
 8007d20:	70da      	strb	r2, [r3, #3]
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007d22:	23fa      	movs	r3, #250	@ 0xfa
 8007d24:	011a      	lsls	r2, r3, #4
 8007d26:	23fa      	movs	r3, #250	@ 0xfa
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	4821      	ldr	r0, [pc, #132]	@ (8007db0 <Device_Test+0xd4>)
 8007d2c:	0019      	movs	r1, r3
 8007d2e:	f004 fe97 	bl	800ca60 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 8007d32:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <Device_Test+0xcc>)
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	4053      	eors	r3, r2
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <Device_Test+0x68>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 8007d40:	f7fd f9c8 	bl	80050d4 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8007d44:	4b18      	ldr	r3, [pc, #96]	@ (8007da8 <Device_Test+0xcc>)
 8007d46:	791b      	ldrb	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <Device_Test+0x78>
 8007d4c:	4b16      	ldr	r3, [pc, #88]	@ (8007da8 <Device_Test+0xcc>)
 8007d4e:	78db      	ldrb	r3, [r3, #3]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <Device_Test+0x86>
 8007d54:	4b17      	ldr	r3, [pc, #92]	@ (8007db4 <Device_Test+0xd8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f005 fe33 	bl	800d9c4 <TimestampIsReached>
 8007d5e:	1e03      	subs	r3, r0, #0
 8007d60:	d01f      	beq.n	8007da2 <Device_Test+0xc6>
    Info("Test completed");
 8007d62:	4a15      	ldr	r2, [pc, #84]	@ (8007db8 <Device_Test+0xdc>)
 8007d64:	4b15      	ldr	r3, [pc, #84]	@ (8007dbc <Device_Test+0xe0>)
 8007d66:	0019      	movs	r1, r3
 8007d68:	2002      	movs	r0, #2
 8007d6a:	f005 fe81 	bl	800da70 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007da8 <Device_Test+0xcc>)
 8007d70:	791b      	ldrb	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <Device_Test+0x9e>
 8007d76:	4b12      	ldr	r3, [pc, #72]	@ (8007dc0 <Device_Test+0xe4>)
 8007d78:	e000      	b.n	8007d7c <Device_Test+0xa0>
 8007d7a:	4b12      	ldr	r3, [pc, #72]	@ (8007dc4 <Device_Test+0xe8>)
 8007d7c:	4a12      	ldr	r2, [pc, #72]	@ (8007dc8 <Device_Test+0xec>)
 8007d7e:	490f      	ldr	r1, [pc, #60]	@ (8007dbc <Device_Test+0xe0>)
 8007d80:	2002      	movs	r0, #2
 8007d82:	f005 fe75 	bl	800da70 <CreateLine>
    Info("MIC function:%s", SensorProbe.MIC_Present?"passed": "failed");
 8007d86:	4b08      	ldr	r3, [pc, #32]	@ (8007da8 <Device_Test+0xcc>)
 8007d88:	78db      	ldrb	r3, [r3, #3]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <Device_Test+0xb6>
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc0 <Device_Test+0xe4>)
 8007d90:	e000      	b.n	8007d94 <Device_Test+0xb8>
 8007d92:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc4 <Device_Test+0xe8>)
 8007d94:	4a0d      	ldr	r2, [pc, #52]	@ (8007dcc <Device_Test+0xf0>)
 8007d96:	4909      	ldr	r1, [pc, #36]	@ (8007dbc <Device_Test+0xe0>)
 8007d98:	2002      	movs	r0, #2
 8007d9a:	f005 fe69 	bl	800da70 <CreateLine>
    SetTestDone();
 8007d9e:	f7ff fdc9 	bl	8007934 <SetTestDone>
  }
}
 8007da2:	46c0      	nop			@ (mov r8, r8)
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000f34 	.word	0x20000f34
 8007dac:	2000007c 	.word	0x2000007c
 8007db0:	00000bb8 	.word	0x00000bb8
 8007db4:	20000f2c 	.word	0x20000f2c
 8007db8:	080235e4 	.word	0x080235e4
 8007dbc:	080234b0 	.word	0x080234b0
 8007dc0:	080235f4 	.word	0x080235f4
 8007dc4:	080235fc 	.word	0x080235fc
 8007dc8:	08023604 	.word	0x08023604
 8007dcc:	08023618 	.word	0x08023618

08007dd0 <AllDevicesReady>:

bool AllDevicesReady() {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8007dd4:	4b27      	ldr	r3, [pc, #156]	@ (8007e74 <AllDevicesReady+0xa4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f005 fdf3 	bl	800d9c4 <TimestampIsReached>
 8007dde:	1e03      	subs	r3, r0, #0
 8007de0:	d043      	beq.n	8007e6a <AllDevicesReady+0x9a>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8007de2:	4b25      	ldr	r3, [pc, #148]	@ (8007e78 <AllDevicesReady+0xa8>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b06      	cmp	r3, #6
 8007de8:	d102      	bne.n	8007df0 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8007dea:	4b24      	ldr	r3, [pc, #144]	@ (8007e7c <AllDevicesReady+0xac>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
    }
    if (SGPstate == SGP_STATE_WAIT) {
 8007df0:	4b23      	ldr	r3, [pc, #140]	@ (8007e80 <AllDevicesReady+0xb0>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b06      	cmp	r3, #6
 8007df6:	d102      	bne.n	8007dfe <AllDevicesReady+0x2e>
      Sensor.VOC_measurementEnabled = false;
 8007df8:	4b20      	ldr	r3, [pc, #128]	@ (8007e7c <AllDevicesReady+0xac>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8007dfe:	4b21      	ldr	r3, [pc, #132]	@ (8007e84 <AllDevicesReady+0xb4>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d102      	bne.n	8007e0c <AllDevicesReady+0x3c>
      Sensor.PM_measurementEnabled = false;
 8007e06:	4b1d      	ldr	r3, [pc, #116]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	709a      	strb	r2, [r3, #2]
    }
    if (mic_Status == MIC_STATE_WAIT){
 8007e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8007e88 <AllDevicesReady+0xb8>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d102      	bne.n	8007e1a <AllDevicesReady+0x4a>
      Sensor.MIC_measurementEnabled = false;
 8007e14:	4b19      	ldr	r3, [pc, #100]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	70da      	strb	r2, [r3, #3]
    }
    if (ESP_Status == ESP_STATE_RESET) {
 8007e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007e8c <AllDevicesReady+0xbc>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d123      	bne.n	8007e6a <AllDevicesReady+0x9a>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007e22:	4b16      	ldr	r3, [pc, #88]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2201      	movs	r2, #1
 8007e28:	4053      	eors	r3, r2
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d016      	beq.n	8007e5e <AllDevicesReady+0x8e>
 8007e30:	4b12      	ldr	r3, [pc, #72]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2201      	movs	r2, #1
 8007e36:	4053      	eors	r3, r2
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00f      	beq.n	8007e5e <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e40:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007e42:	2201      	movs	r2, #1
 8007e44:	4053      	eors	r3, r2
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	2201      	movs	r2, #1
 8007e52:	4053      	eors	r3, r2
 8007e54:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <AllDevicesReady+0x8e>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <AllDevicesReady+0x90>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	1c1a      	adds	r2, r3, #0
 8007e62:	2301      	movs	r3, #1
 8007e64:	4013      	ands	r3, r2
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	e000      	b.n	8007e6c <AllDevicesReady+0x9c>
    }
  }
  return false;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	46c0      	nop			@ (mov r8, r8)
 8007e74:	20000f2c 	.word	0x20000f2c
 8007e78:	20000f18 	.word	0x20000f18
 8007e7c:	2000007c 	.word	0x2000007c
 8007e80:	20000f17 	.word	0x20000f17
 8007e84:	20000081 	.word	0x20000081
 8007e88:	20000f3b 	.word	0x20000f3b
 8007e8c:	20000f3a 	.word	0x20000f3a

08007e90 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8007e94:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed4 <EnabledConnectedDevices+0x44>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed8 <EnabledConnectedDevices+0x48>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.VOC_Present) {
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed4 <EnabledConnectedDevices+0x44>)
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <EnabledConnectedDevices+0x20>
    Sensor.VOC_measurementEnabled = true;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed8 <EnabledConnectedDevices+0x48>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8007eb0:	4b08      	ldr	r3, [pc, #32]	@ (8007ed4 <EnabledConnectedDevices+0x44>)
 8007eb2:	789b      	ldrb	r3, [r3, #2]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <EnabledConnectedDevices+0x2e>
    Sensor.PM_measurementEnabled = true;
 8007eb8:	4b07      	ldr	r3, [pc, #28]	@ (8007ed8 <EnabledConnectedDevices+0x48>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8007ebe:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <EnabledConnectedDevices+0x44>)
 8007ec0:	78db      	ldrb	r3, [r3, #3]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <EnabledConnectedDevices+0x3c>
    Sensor.MIC_measurementEnabled = true;
 8007ec6:	4b04      	ldr	r3, [pc, #16]	@ (8007ed8 <EnabledConnectedDevices+0x48>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	70da      	strb	r2, [r3, #3]
  }
}
 8007ecc:	46c0      	nop			@ (mov r8, r8)
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	46c0      	nop			@ (mov r8, r8)
 8007ed4:	20000f34 	.word	0x20000f34
 8007ed8:	2000007c 	.word	0x2000007c

08007edc <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
    Sensor.HT_measurementEnabled = false;
 8007ee0:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <DisableConnectedDevices+0x24>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
    Sensor.VOC_measurementEnabled = false;
 8007ee6:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <DisableConnectedDevices+0x24>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	705a      	strb	r2, [r3, #1]
    Sensor.PM_measurementEnabled = false;
 8007eec:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <DisableConnectedDevices+0x24>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	709a      	strb	r2, [r3, #2]
    Sensor.MIC_measurementEnabled = false;
 8007ef2:	4b03      	ldr	r3, [pc, #12]	@ (8007f00 <DisableConnectedDevices+0x24>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	70da      	strb	r2, [r3, #3]
}
 8007ef8:	46c0      	nop			@ (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	46c0      	nop			@ (mov r8, r8)
 8007f00:	2000007c 	.word	0x2000007c

08007f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f08:	f006 f998 	bl	800e23c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f0c:	f000 f97c 	bl	8008208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f10:	f7ff f99c 	bl	800724c <MX_GPIO_Init>
  MX_DMA_Init();
 8007f14:	f7ff f86a 	bl	8006fec <MX_DMA_Init>
  MX_I2C1_Init();
 8007f18:	f7ff fb16 	bl	8007548 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007f1c:	f7ff fc6e 	bl	80077fc <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007f20:	f005 fbb4 	bl	800d68c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007f24:	f7ff fb50 	bl	80075c8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007f28:	f005 f9a8 	bl	800d27c <MX_TIM2_Init>
  MX_TIM3_Init();
 8007f2c:	f005 fa1a 	bl	800d364 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007f30:	f005 fbe0 	bl	800d6f4 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007f34:	f7fe ffa8 	bl	8006e88 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007f38:	f014 f936 	bl	801c1a8 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007f3c:	f000 fdb0 	bl	8008aa0 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007f40:	f005 fb6e 	bl	800d620 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007f44:	f005 fa8c 	bl	800d460 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007f48:	4a8c      	ldr	r2, [pc, #560]	@ (800817c <main+0x278>)
 8007f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8008180 <main+0x27c>)
 8007f4c:	0011      	movs	r1, r2
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7ff faac 	bl	80074ac <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007f54:	f7fe f9ac 	bl	80062b0 <UserButton_Pressed>
 8007f58:	1e03      	subs	r3, r0, #0
 8007f5a:	d004      	beq.n	8007f66 <main+0x62>
    EnableESPProg();
 8007f5c:	f014 f9f4 	bl	801c348 <EnableESPProg>
    ESP_Programming = true;
 8007f60:	4b88      	ldr	r3, [pc, #544]	@ (8008184 <main+0x280>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8007f66:	2003      	movs	r0, #3
 8007f68:	f005 fdec 	bl	800db44 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007f6c:	f005 fdfa 	bl	800db64 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007f70:	4985      	ldr	r1, [pc, #532]	@ (8008188 <main+0x284>)
 8007f72:	4b86      	ldr	r3, [pc, #536]	@ (800818c <main+0x288>)
 8007f74:	2201      	movs	r2, #1
 8007f76:	0018      	movs	r0, r3
 8007f78:	f00e fc7c 	bl	8016874 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007f7c:	4b84      	ldr	r3, [pc, #528]	@ (8008190 <main+0x28c>)
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f7fe fd88 	bl	8006a94 <InitClock>
  Debug("Clock init done");
 8007f84:	4a83      	ldr	r2, [pc, #524]	@ (8008194 <main+0x290>)
 8007f86:	4b84      	ldr	r3, [pc, #528]	@ (8008198 <main+0x294>)
 8007f88:	0019      	movs	r1, r3
 8007f8a:	2003      	movs	r0, #3
 8007f8c:	f005 fd70 	bl	800da70 <CreateLine>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007f90:	4a82      	ldr	r2, [pc, #520]	@ (800819c <main+0x298>)
 8007f92:	4983      	ldr	r1, [pc, #524]	@ (80081a0 <main+0x29c>)
 8007f94:	4883      	ldr	r0, [pc, #524]	@ (80081a4 <main+0x2a0>)
 8007f96:	230b      	movs	r3, #11
 8007f98:	f003 fe74 	bl	800bc84 <soundInit>
 8007f9c:	0003      	movs	r3, r0
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4053      	eors	r3, r2
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d006      	beq.n	8007fb8 <main+0xb4>
    errorHandler(__func__, __LINE__, __FILE__);
 8007faa:	4a7f      	ldr	r2, [pc, #508]	@ (80081a8 <main+0x2a4>)
 8007fac:	23de      	movs	r3, #222	@ 0xde
 8007fae:	0059      	lsls	r1, r3, #1
 8007fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80081ac <main+0x2a8>)
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f005 fe0a 	bl	800dbcc <errorHandler>
  }

//  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007fb8:	4b7d      	ldr	r3, [pc, #500]	@ (80081b0 <main+0x2ac>)
 8007fba:	4a7e      	ldr	r2, [pc, #504]	@ (80081b4 <main+0x2b0>)
 8007fbc:	4978      	ldr	r1, [pc, #480]	@ (80081a0 <main+0x29c>)
 8007fbe:	487e      	ldr	r0, [pc, #504]	@ (80081b8 <main+0x2b4>)
 8007fc0:	f7ff fd64 	bl	8007a8c <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007fc4:	f006 f9a0 	bl	800e308 <HAL_GetTick>
 8007fc8:	0003      	movs	r3, r0
 8007fca:	4a7c      	ldr	r2, [pc, #496]	@ (80081bc <main+0x2b8>)
 8007fcc:	189a      	adds	r2, r3, r2
 8007fce:	4b7c      	ldr	r3, [pc, #496]	@ (80081c0 <main+0x2bc>)
 8007fd0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80081c4 <main+0x2c0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f005 fcf4 	bl	800d9c4 <TimestampIsReached>
 8007fdc:	1e03      	subs	r3, r0, #0
 8007fde:	d00e      	beq.n	8007ffe <main+0xfa>
      charge = Battery_Upkeep();
 8007fe0:	f004 ffd6 	bl	800cf90 <Battery_Upkeep>
 8007fe4:	0003      	movs	r3, r0
 8007fe6:	001a      	movs	r2, r3
 8007fe8:	4b77      	ldr	r3, [pc, #476]	@ (80081c8 <main+0x2c4>)
 8007fea:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007fec:	f006 f98c 	bl	800e308 <HAL_GetTick>
 8007ff0:	0003      	movs	r3, r0
 8007ff2:	4a76      	ldr	r2, [pc, #472]	@ (80081cc <main+0x2c8>)
 8007ff4:	189a      	adds	r2, r3, r2
 8007ff6:	4b73      	ldr	r3, [pc, #460]	@ (80081c4 <main+0x2c0>)
 8007ff8:	601a      	str	r2, [r3, #0]
        showTime();
 8007ffa:	f7fe f969 	bl	80062d0 <showTime>
    }

    //==== disable for power measurements in test condition
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007ffe:	4b72      	ldr	r3, [pc, #456]	@ (80081c8 <main+0x2c4>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d003      	beq.n	800800e <main+0x10a>
 8008006:	4b70      	ldr	r3, [pc, #448]	@ (80081c8 <main+0x2c4>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <main+0x10e>
          FlashLEDs();
 800800e:	f7ff fcd5 	bl	80079bc <FlashLEDs>
        }
        if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8008012:	4b6d      	ldr	r3, [pc, #436]	@ (80081c8 <main+0x2c4>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d109      	bne.n	800802e <main+0x12a>
 800801a:	4b6d      	ldr	r3, [pc, #436]	@ (80081d0 <main+0x2cc>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b09      	cmp	r3, #9
 8008020:	d105      	bne.n	800802e <main+0x12a>
          batteryEmpty = true;
 8008022:	4b6c      	ldr	r3, [pc, #432]	@ (80081d4 <main+0x2d0>)
 8008024:	2201      	movs	r2, #1
 8008026:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8008028:	f7fe fc7e 	bl	8006928 <Enter_Standby_Mode>
 800802c:	e002      	b.n	8008034 <main+0x130>
        }
        else{
          batteryEmpty = false;
 800802e:	4b69      	ldr	r3, [pc, #420]	@ (80081d4 <main+0x2d0>)
 8008030:	2200      	movs	r2, #0
 8008032:	701a      	strb	r2, [r3, #0]
        }
    //====

    if (!usbPluggedIn) {
 8008034:	4b68      	ldr	r3, [pc, #416]	@ (80081d8 <main+0x2d4>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2201      	movs	r2, #1
 800803a:	4053      	eors	r3, r2
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d023      	beq.n	800808a <main+0x186>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8008042:	4b66      	ldr	r3, [pc, #408]	@ (80081dc <main+0x2d8>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2201      	movs	r2, #1
 8008048:	4053      	eors	r3, r2
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01c      	beq.n	800808a <main+0x186>
 8008050:	f7ff febe 	bl	8007dd0 <AllDevicesReady>
 8008054:	1e03      	subs	r3, r0, #0
 8008056:	d018      	beq.n	800808a <main+0x186>
 8008058:	4b61      	ldr	r3, [pc, #388]	@ (80081e0 <main+0x2dc>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d014      	beq.n	800808a <main+0x186>
//        Debug("SensorProbe.ESP_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM => %d", SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
        EnabledConnectedDevices();
 8008060:	f7ff ff16 	bl	8007e90 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8008064:	4b5f      	ldr	r3, [pc, #380]	@ (80081e4 <main+0x2e0>)
 8008066:	789b      	ldrb	r3, [r3, #2]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <main+0x16e>
 800806c:	23d7      	movs	r3, #215	@ 0xd7
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	e001      	b.n	8008076 <main+0x172>
 8008072:	23dc      	movs	r3, #220	@ 0xdc
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	0018      	movs	r0, r3
 8008078:	f7fe fc78 	bl	800696c <Enter_Stop_Mode>
        deviceTimeOut = HAL_GetTick() + 3000;
 800807c:	f006 f944 	bl	800e308 <HAL_GetTick>
 8008080:	0003      	movs	r3, r0
 8008082:	4a59      	ldr	r2, [pc, #356]	@ (80081e8 <main+0x2e4>)
 8008084:	189a      	adds	r2, r3, r2
 8008086:	4b4e      	ldr	r3, [pc, #312]	@ (80081c0 <main+0x2bc>)
 8008088:	601a      	str	r2, [r3, #0]
      }
    }
    if(testDone && !ESP_Programming && !batteryEmpty){
 800808a:	4b58      	ldr	r3, [pc, #352]	@ (80081ec <main+0x2e8>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d05a      	beq.n	8008148 <main+0x244>
 8008092:	4b3c      	ldr	r3, [pc, #240]	@ (8008184 <main+0x280>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2201      	movs	r2, #1
 8008098:	4053      	eors	r3, r2
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d053      	beq.n	8008148 <main+0x244>
 80080a0:	4b4c      	ldr	r3, [pc, #304]	@ (80081d4 <main+0x2d0>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2201      	movs	r2, #1
 80080a6:	4053      	eors	r3, r2
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d04c      	beq.n	8008148 <main+0x244>
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 80080ae:	4b50      	ldr	r3, [pc, #320]	@ (80081f0 <main+0x2ec>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d00d      	beq.n	80080d2 <main+0x1ce>
 80080b6:	4b4e      	ldr	r3, [pc, #312]	@ (80081f0 <main+0x2ec>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d009      	beq.n	80080d2 <main+0x1ce>
 80080be:	4b4d      	ldr	r3, [pc, #308]	@ (80081f4 <main+0x2f0>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <main+0x1ce>
        HIDSstate = HIDS_Upkeep();
 80080c6:	f006 f803 	bl	800e0d0 <HIDS_Upkeep>
 80080ca:	0003      	movs	r3, r0
 80080cc:	001a      	movs	r2, r3
 80080ce:	4b4a      	ldr	r3, [pc, #296]	@ (80081f8 <main+0x2f4>)
 80080d0:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 80080d2:	4b49      	ldr	r3, [pc, #292]	@ (80081f8 <main+0x2f4>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d00d      	beq.n	80080f6 <main+0x1f2>
 80080da:	4b47      	ldr	r3, [pc, #284]	@ (80081f8 <main+0x2f4>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d009      	beq.n	80080f6 <main+0x1f2>
 80080e2:	4b44      	ldr	r3, [pc, #272]	@ (80081f4 <main+0x2f0>)
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <main+0x1f2>
        SGPstate = SGP_Upkeep();
 80080ea:	f003 fc41 	bl	800b970 <SGP_Upkeep>
 80080ee:	0003      	movs	r3, r0
 80080f0:	001a      	movs	r2, r3
 80080f2:	4b3f      	ldr	r3, [pc, #252]	@ (80081f0 <main+0x2ec>)
 80080f4:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 80080f6:	4b3f      	ldr	r3, [pc, #252]	@ (80081f4 <main+0x2f0>)
 80080f8:	78db      	ldrb	r3, [r3, #3]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <main+0x206>
        mic_Status = Mic_Upkeep();
 80080fe:	f000 fb99 	bl	8008834 <Mic_Upkeep>
 8008102:	0003      	movs	r3, r0
 8008104:	001a      	movs	r2, r3
 8008106:	4b3d      	ldr	r3, [pc, #244]	@ (80081fc <main+0x2f8>)
 8008108:	701a      	strb	r2, [r3, #0]
      }
      if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && Sensor.PM_measurementEnabled) {
 800810a:	4b2f      	ldr	r3, [pc, #188]	@ (80081c8 <main+0x2c4>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d803      	bhi.n	800811a <main+0x216>
 8008112:	4b2d      	ldr	r3, [pc, #180]	@ (80081c8 <main+0x2c4>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d106      	bne.n	8008128 <main+0x224>
 800811a:	4b36      	ldr	r3, [pc, #216]	@ (80081f4 <main+0x2f0>)
 800811c:	789b      	ldrb	r3, [r3, #2]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <main+0x224>
        sen5x_statemachine();
 8008122:	f001 f9e9 	bl	80094f8 <sen5x_statemachine>
 8008126:	e009      	b.n	800813c <main+0x238>
      }
      else {
        if (Sensor.PM_measurementEnabled) {
 8008128:	4b32      	ldr	r3, [pc, #200]	@ (80081f4 <main+0x2f0>)
 800812a:	789b      	ldrb	r3, [r3, #2]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <main+0x238>
          Info("Battery level insufficient for sen5x operation");
 8008130:	4a33      	ldr	r2, [pc, #204]	@ (8008200 <main+0x2fc>)
 8008132:	4b34      	ldr	r3, [pc, #208]	@ (8008204 <main+0x300>)
 8008134:	0019      	movs	r1, r3
 8008136:	2002      	movs	r0, #2
 8008138:	f005 fc9a 	bl	800da70 <CreateLine>
        }
      }
      ESP_Status = ESP_Upkeep();
 800813c:	f7fd f8e0 	bl	8005300 <ESP_Upkeep>
 8008140:	0003      	movs	r3, r0
 8008142:	001a      	movs	r2, r3
 8008144:	4b22      	ldr	r3, [pc, #136]	@ (80081d0 <main+0x2cc>)
 8008146:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8008148:	4b28      	ldr	r3, [pc, #160]	@ (80081ec <main+0x2e8>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2201      	movs	r2, #1
 800814e:	4053      	eors	r3, r2
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00f      	beq.n	8008176 <main+0x272>
 8008156:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <main+0x280>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2201      	movs	r2, #1
 800815c:	4053      	eors	r3, r2
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <main+0x272>
 8008164:	4b1b      	ldr	r3, [pc, #108]	@ (80081d4 <main+0x2d0>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	4053      	eors	r3, r2
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <main+0x272>
      Device_Test();  // for device with startup time
 8008172:	f7ff fdb3 	bl	8007cdc <Device_Test>
    }
    configCheck();
 8008176:	f004 fe67 	bl	800ce48 <configCheck>
    if(TimestampIsReached(batteryReadTimer)){
 800817a:	e72a      	b.n	8007fd2 <main+0xce>
 800817c:	2000219c 	.word	0x2000219c
 8008180:	2000215c 	.word	0x2000215c
 8008184:	20000f15 	.word	0x20000f15
 8008188:	20000f1c 	.word	0x20000f1c
 800818c:	200022d4 	.word	0x200022d4
 8008190:	200011a0 	.word	0x200011a0
 8008194:	08023628 	.word	0x08023628
 8008198:	08023454 	.word	0x08023454
 800819c:	200021dc 	.word	0x200021dc
 80081a0:	20000e90 	.word	0x20000e90
 80081a4:	20000ecc 	.word	0x20000ecc
 80081a8:	08023638 	.word	0x08023638
 80081ac:	08024778 	.word	0x08024778
 80081b0:	2000238c 	.word	0x2000238c
 80081b4:	20000cfc 	.word	0x20000cfc
 80081b8:	20000d58 	.word	0x20000d58
 80081bc:	00001388 	.word	0x00001388
 80081c0:	20000f2c 	.word	0x20000f2c
 80081c4:	20000f30 	.word	0x20000f30
 80081c8:	20000f39 	.word	0x20000f39
 80081cc:	0000c350 	.word	0x0000c350
 80081d0:	20000f3a 	.word	0x20000f3a
 80081d4:	20000f16 	.word	0x20000f16
 80081d8:	2000214d 	.word	0x2000214d
 80081dc:	2000214e 	.word	0x2000214e
 80081e0:	2000054f 	.word	0x2000054f
 80081e4:	20000f34 	.word	0x20000f34
 80081e8:	00000bb8 	.word	0x00000bb8
 80081ec:	20000f14 	.word	0x20000f14
 80081f0:	20000f17 	.word	0x20000f17
 80081f4:	2000007c 	.word	0x2000007c
 80081f8:	20000f18 	.word	0x20000f18
 80081fc:	20000f3b 	.word	0x20000f3b
 8008200:	0802364c 	.word	0x0802364c
 8008204:	080234b0 	.word	0x080234b0

08008208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b09d      	sub	sp, #116	@ 0x74
 800820c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800820e:	2438      	movs	r4, #56	@ 0x38
 8008210:	193b      	adds	r3, r7, r4
 8008212:	0018      	movs	r0, r3
 8008214:	2338      	movs	r3, #56	@ 0x38
 8008216:	001a      	movs	r2, r3
 8008218:	2100      	movs	r1, #0
 800821a:	f017 fab7 	bl	801f78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800821e:	2324      	movs	r3, #36	@ 0x24
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	0018      	movs	r0, r3
 8008224:	2314      	movs	r3, #20
 8008226:	001a      	movs	r2, r3
 8008228:	2100      	movs	r1, #0
 800822a:	f017 faaf 	bl	801f78c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800822e:	003b      	movs	r3, r7
 8008230:	0018      	movs	r0, r3
 8008232:	2324      	movs	r3, #36	@ 0x24
 8008234:	001a      	movs	r2, r3
 8008236:	2100      	movs	r1, #0
 8008238:	f017 faa8 	bl	801f78c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800823c:	4b34      	ldr	r3, [pc, #208]	@ (8008310 <SystemClock_Config+0x108>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a34      	ldr	r2, [pc, #208]	@ (8008314 <SystemClock_Config+0x10c>)
 8008242:	401a      	ands	r2, r3
 8008244:	4b32      	ldr	r3, [pc, #200]	@ (8008310 <SystemClock_Config+0x108>)
 8008246:	2180      	movs	r1, #128	@ 0x80
 8008248:	0109      	lsls	r1, r1, #4
 800824a:	430a      	orrs	r2, r1
 800824c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800824e:	f00c f8e5 	bl	801441c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8008252:	4b31      	ldr	r3, [pc, #196]	@ (8008318 <SystemClock_Config+0x110>)
 8008254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008256:	4a2f      	ldr	r2, [pc, #188]	@ (8008314 <SystemClock_Config+0x10c>)
 8008258:	401a      	ands	r2, r3
 800825a:	4b2f      	ldr	r3, [pc, #188]	@ (8008318 <SystemClock_Config+0x110>)
 800825c:	2180      	movs	r1, #128	@ 0x80
 800825e:	0149      	lsls	r1, r1, #5
 8008260:	430a      	orrs	r2, r1
 8008262:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008264:	193b      	adds	r3, r7, r4
 8008266:	2226      	movs	r2, #38	@ 0x26
 8008268:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800826a:	193b      	adds	r3, r7, r4
 800826c:	2280      	movs	r2, #128	@ 0x80
 800826e:	0052      	lsls	r2, r2, #1
 8008270:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008272:	0021      	movs	r1, r4
 8008274:	187b      	adds	r3, r7, r1
 8008276:	2201      	movs	r2, #1
 8008278:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800827a:	187b      	adds	r3, r7, r1
 800827c:	2210      	movs	r2, #16
 800827e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008280:	187b      	adds	r3, r7, r1
 8008282:	2201      	movs	r2, #1
 8008284:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008286:	187b      	adds	r3, r7, r1
 8008288:	2200      	movs	r2, #0
 800828a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800828c:	187b      	adds	r3, r7, r1
 800828e:	0018      	movs	r0, r3
 8008290:	f00c f954 	bl	801453c <HAL_RCC_OscConfig>
 8008294:	1e03      	subs	r3, r0, #0
 8008296:	d001      	beq.n	800829c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008298:	f000 f900 	bl	800849c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800829c:	2124      	movs	r1, #36	@ 0x24
 800829e:	187b      	adds	r3, r7, r1
 80082a0:	220f      	movs	r2, #15
 80082a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80082a4:	187b      	adds	r3, r7, r1
 80082a6:	2201      	movs	r2, #1
 80082a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082aa:	187b      	adds	r3, r7, r1
 80082ac:	2200      	movs	r2, #0
 80082ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	2200      	movs	r2, #0
 80082b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082b6:	187b      	adds	r3, r7, r1
 80082b8:	2200      	movs	r2, #0
 80082ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80082bc:	187b      	adds	r3, r7, r1
 80082be:	2100      	movs	r1, #0
 80082c0:	0018      	movs	r0, r3
 80082c2:	f00c fd0f 	bl	8014ce4 <HAL_RCC_ClockConfig>
 80082c6:	1e03      	subs	r3, r0, #0
 80082c8:	d001      	beq.n	80082ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80082ca:	f000 f8e7 	bl	800849c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80082ce:	003b      	movs	r3, r7
 80082d0:	226d      	movs	r2, #109	@ 0x6d
 80082d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80082d4:	003b      	movs	r3, r7
 80082d6:	2200      	movs	r2, #0
 80082d8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80082da:	003b      	movs	r3, r7
 80082dc:	2200      	movs	r2, #0
 80082de:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80082e0:	003b      	movs	r3, r7
 80082e2:	2200      	movs	r2, #0
 80082e4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80082e6:	003b      	movs	r3, r7
 80082e8:	2280      	movs	r2, #128	@ 0x80
 80082ea:	0252      	lsls	r2, r2, #9
 80082ec:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80082ee:	003b      	movs	r3, r7
 80082f0:	2280      	movs	r2, #128	@ 0x80
 80082f2:	04d2      	lsls	r2, r2, #19
 80082f4:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082f6:	003b      	movs	r3, r7
 80082f8:	0018      	movs	r0, r3
 80082fa:	f00c ff17 	bl	801512c <HAL_RCCEx_PeriphCLKConfig>
 80082fe:	1e03      	subs	r3, r0, #0
 8008300:	d001      	beq.n	8008306 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8008302:	f000 f8cb 	bl	800849c <Error_Handler>
  }
}
 8008306:	46c0      	nop			@ (mov r8, r8)
 8008308:	46bd      	mov	sp, r7
 800830a:	b01d      	add	sp, #116	@ 0x74
 800830c:	bd90      	pop	{r4, r7, pc}
 800830e:	46c0      	nop			@ (mov r8, r8)
 8008310:	40007000 	.word	0x40007000
 8008314:	ffffe7ff 	.word	0xffffe7ff
 8008318:	40021000 	.word	0x40021000

0800831c <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	000a      	movs	r2, r1
 8008326:	1cbb      	adds	r3, r7, #2
 8008328:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 800832a:	4c06      	ldr	r4, [pc, #24]	@ (8008344 <printString+0x28>)
 800832c:	1cbb      	adds	r3, r7, #2
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4805      	ldr	r0, [pc, #20]	@ (8008348 <printString+0x2c>)
 8008334:	0023      	movs	r3, r4
 8008336:	f00e f9fd 	bl	8016734 <HAL_UART_Transmit>
}
 800833a:	46c0      	nop			@ (mov r8, r8)
 800833c:	46bd      	mov	sp, r7
 800833e:	b003      	add	sp, #12
 8008340:	bd90      	pop	{r4, r7, pc}
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	0000ffff 	.word	0x0000ffff
 8008348:	200022d4 	.word	0x200022d4

0800834c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008354:	4936      	ldr	r1, [pc, #216]	@ (8008430 <HAL_UART_RxCpltCallback+0xe4>)
 8008356:	4b37      	ldr	r3, [pc, #220]	@ (8008434 <HAL_UART_RxCpltCallback+0xe8>)
 8008358:	2201      	movs	r2, #1
 800835a:	0018      	movs	r0, r3
 800835c:	f00e fa8a 	bl	8016874 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8008360:	4b33      	ldr	r3, [pc, #204]	@ (8008430 <HAL_UART_RxCpltCallback+0xe4>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	3b61      	subs	r3, #97	@ 0x61
 8008366:	2b13      	cmp	r3, #19
 8008368:	d830      	bhi.n	80083cc <HAL_UART_RxCpltCallback+0x80>
 800836a:	009a      	lsls	r2, r3, #2
 800836c:	4b32      	ldr	r3, [pc, #200]	@ (8008438 <HAL_UART_RxCpltCallback+0xec>)
 800836e:	18d3      	adds	r3, r2, r3
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008374:	4b31      	ldr	r3, [pc, #196]	@ (800843c <HAL_UART_RxCpltCallback+0xf0>)
 8008376:	0018      	movs	r0, r3
 8008378:	f017 f8ba 	bl	801f4f0 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800837c:	2003      	movs	r0, #3
 800837e:	f005 fbe1 	bl	800db44 <SetVerboseLevel>
      break;
 8008382:	e04a      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008384:	f7fb fa0a 	bl	800379c <forceNTPupdate>
    break;
 8008388:	e047      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800838a:	4b2d      	ldr	r3, [pc, #180]	@ (8008440 <HAL_UART_RxCpltCallback+0xf4>)
 800838c:	0018      	movs	r0, r3
 800838e:	f017 f8af 	bl	801f4f0 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008392:	2002      	movs	r0, #2
 8008394:	f005 fbd6 	bl	800db44 <SetVerboseLevel>
      break;
 8008398:	e03f      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800839a:	4b2a      	ldr	r3, [pc, #168]	@ (8008444 <HAL_UART_RxCpltCallback+0xf8>)
 800839c:	0018      	movs	r0, r3
 800839e:	f017 f8a7 	bl	801f4f0 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 80083a2:	2001      	movs	r0, #1
 80083a4:	f005 fbce 	bl	800db44 <SetVerboseLevel>
      break;
 80083a8:	e037      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 80083aa:	4b27      	ldr	r3, [pc, #156]	@ (8008448 <HAL_UART_RxCpltCallback+0xfc>)
 80083ac:	0018      	movs	r0, r3
 80083ae:	f017 f89f 	bl	801f4f0 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80083b2:	2000      	movs	r0, #0
 80083b4:	f005 fbc6 	bl	800db44 <SetVerboseLevel>
      break;
 80083b8:	e02f      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80083ba:	f005 ffa5 	bl	800e308 <HAL_GetTick>
 80083be:	0002      	movs	r2, r0
 80083c0:	4b22      	ldr	r3, [pc, #136]	@ (800844c <HAL_UART_RxCpltCallback+0x100>)
 80083c2:	601a      	str	r2, [r3, #0]
      break;
 80083c4:	e029      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80083c6:	f7fd ff83 	bl	80062d0 <showTime>
      break;
 80083ca:	e026      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 80083cc:	4a20      	ldr	r2, [pc, #128]	@ (8008450 <HAL_UART_RxCpltCallback+0x104>)
 80083ce:	4b21      	ldr	r3, [pc, #132]	@ (8008454 <HAL_UART_RxCpltCallback+0x108>)
 80083d0:	0019      	movs	r1, r3
 80083d2:	2001      	movs	r0, #1
 80083d4:	f005 fb4c 	bl	800da70 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 80083d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008458 <HAL_UART_RxCpltCallback+0x10c>)
 80083da:	0018      	movs	r0, r3
 80083dc:	f017 f888 	bl	801f4f0 <puts>
      printf("a - VerboseLevel set to all\r\n");
 80083e0:	4b1e      	ldr	r3, [pc, #120]	@ (800845c <HAL_UART_RxCpltCallback+0x110>)
 80083e2:	0018      	movs	r0, r3
 80083e4:	f017 f884 	bl	801f4f0 <puts>
      printf("f - Force NTP time synchronization\r\n");
 80083e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008460 <HAL_UART_RxCpltCallback+0x114>)
 80083ea:	0018      	movs	r0, r3
 80083ec:	f017 f880 	bl	801f4f0 <puts>
      printf("i - VerboseLevel set to info\r\n");
 80083f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008464 <HAL_UART_RxCpltCallback+0x118>)
 80083f2:	0018      	movs	r0, r3
 80083f4:	f017 f87c 	bl	801f4f0 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 80083f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008468 <HAL_UART_RxCpltCallback+0x11c>)
 80083fa:	0018      	movs	r0, r3
 80083fc:	f017 f878 	bl	801f4f0 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008400:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <HAL_UART_RxCpltCallback+0x120>)
 8008402:	0018      	movs	r0, r3
 8008404:	f017 f874 	bl	801f4f0 <puts>
      printf("s - Start particle measurement\r\n");
 8008408:	4b19      	ldr	r3, [pc, #100]	@ (8008470 <HAL_UART_RxCpltCallback+0x124>)
 800840a:	0018      	movs	r0, r3
 800840c:	f017 f870 	bl	801f4f0 <puts>
      printf("t - Show actual systemtime\r\n");
 8008410:	4b18      	ldr	r3, [pc, #96]	@ (8008474 <HAL_UART_RxCpltCallback+0x128>)
 8008412:	0018      	movs	r0, r3
 8008414:	f017 f86c 	bl	801f4f0 <puts>
  break;
 8008418:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800841a:	4905      	ldr	r1, [pc, #20]	@ (8008430 <HAL_UART_RxCpltCallback+0xe4>)
 800841c:	4b05      	ldr	r3, [pc, #20]	@ (8008434 <HAL_UART_RxCpltCallback+0xe8>)
 800841e:	2201      	movs	r2, #1
 8008420:	0018      	movs	r0, r3
 8008422:	f00e fa27 	bl	8016874 <HAL_UART_Receive_IT>
}
 8008426:	46c0      	nop			@ (mov r8, r8)
 8008428:	46bd      	mov	sp, r7
 800842a:	b002      	add	sp, #8
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	20000f1c 	.word	0x20000f1c
 8008434:	200022d4 	.word	0x200022d4
 8008438:	08024728 	.word	0x08024728
 800843c:	0802367c 	.word	0x0802367c
 8008440:	08023698 	.word	0x08023698
 8008444:	080236b4 	.word	0x080236b4
 8008448:	080236d4 	.word	0x080236d4
 800844c:	200011c8 	.word	0x200011c8
 8008450:	080236f0 	.word	0x080236f0
 8008454:	08023424 	.word	0x08023424
 8008458:	08023720 	.word	0x08023720
 800845c:	08023738 	.word	0x08023738
 8008460:	08023758 	.word	0x08023758
 8008464:	0802377c 	.word	0x0802377c
 8008468:	0802379c 	.word	0x0802379c
 800846c:	080237c0 	.word	0x080237c0
 8008470:	080237e0 	.word	0x080237e0
 8008474:	08023800 	.word	0x08023800

08008478 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	0002      	movs	r2, r0
 8008480:	1dbb      	adds	r3, r7, #6
 8008482:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008484:	1dbb      	adds	r3, r7, #6
 8008486:	881a      	ldrh	r2, [r3, #0]
 8008488:	2380      	movs	r3, #128	@ 0x80
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	429a      	cmp	r2, r3
 800848e:	d101      	bne.n	8008494 <HAL_GPIO_EXTI_Callback+0x1c>
    setuserToggle();
 8008490:	f004 fd92 	bl	800cfb8 <setuserToggle>
  }
}
 8008494:	46c0      	nop			@ (mov r8, r8)
 8008496:	46bd      	mov	sp, r7
 8008498:	b002      	add	sp, #8
 800849a:	bd80      	pop	{r7, pc}

0800849c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 80084a0:	4a04      	ldr	r2, [pc, #16]	@ (80084b4 <Error_Handler+0x18>)
 80084a2:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <Error_Handler+0x1c>)
 80084a4:	0019      	movs	r1, r3
 80084a6:	2001      	movs	r0, #1
 80084a8:	f005 fae2 	bl	800da70 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80084ac:	b672      	cpsid	i
}
 80084ae:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 80084b0:	46c0      	nop			@ (mov r8, r8)
 80084b2:	e7fd      	b.n	80084b0 <Error_Handler+0x14>
 80084b4:	0802381c 	.word	0x0802381c
 80084b8:	08023424 	.word	0x08023424

080084bc <setMICTimeStamp>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void setMICTimeStamp(uint32_t ticks) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80084c4:	f005 ff20 	bl	800e308 <HAL_GetTick>
 80084c8:	0002      	movs	r2, r0
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	18d2      	adds	r2, r2, r3
 80084ce:	4b03      	ldr	r3, [pc, #12]	@ (80084dc <setMICTimeStamp+0x20>)
 80084d0:	601a      	str	r2, [r3, #0]
}
 80084d2:	46c0      	nop			@ (mov r8, r8)
 80084d4:	46bd      	mov	sp, r7
 80084d6:	b002      	add	sp, #8
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	46c0      	nop			@ (mov r8, r8)
 80084dc:	20000f88 	.word	0x20000f88

080084e0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
  counter = 0;
 80084e4:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <ResetDBACalculator+0x1c>)
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80084ea:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <ResetDBACalculator+0x20>)
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80084f0:	4b04      	ldr	r3, [pc, #16]	@ (8008504 <ResetDBACalculator+0x24>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	701a      	strb	r2, [r3, #0]
}
 80084f6:	46c0      	nop			@ (mov r8, r8)
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000f84 	.word	0x20000f84
 8008500:	20000080 	.word	0x20000080
 8008504:	20000f85 	.word	0x20000f85

08008508 <MIC_Print>:

void MIC_Print(void) {
 8008508:	b5b0      	push	{r4, r5, r7, lr}
 800850a:	b08a      	sub	sp, #40	@ 0x28
 800850c:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800850e:	4b9f      	ldr	r3, [pc, #636]	@ (800878c <MIC_Print+0x284>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b9f      	ldr	r3, [pc, #636]	@ (8008790 <MIC_Print+0x288>)
 8008514:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008516:	4b9f      	ldr	r3, [pc, #636]	@ (8008794 <MIC_Print+0x28c>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	001a      	movs	r2, r3
 800851c:	4b9c      	ldr	r3, [pc, #624]	@ (8008790 <MIC_Print+0x288>)
 800851e:	6819      	ldr	r1, [r3, #0]
 8008520:	4b9d      	ldr	r3, [pc, #628]	@ (8008798 <MIC_Print+0x290>)
 8008522:	0092      	lsls	r2, r2, #2
 8008524:	50d1      	str	r1, [r2, r3]
  counter++;
 8008526:	4b9b      	ldr	r3, [pc, #620]	@ (8008794 <MIC_Print+0x28c>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	b2da      	uxtb	r2, r3
 800852e:	4b99      	ldr	r3, [pc, #612]	@ (8008794 <MIC_Print+0x28c>)
 8008530:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008532:	4b98      	ldr	r3, [pc, #608]	@ (8008794 <MIC_Print+0x28c>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b09      	cmp	r3, #9
 8008538:	d80b      	bhi.n	8008552 <MIC_Print+0x4a>
 800853a:	4b98      	ldr	r3, [pc, #608]	@ (800879c <MIC_Print+0x294>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2201      	movs	r2, #1
 8008540:	4053      	eors	r3, r2
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d004      	beq.n	8008552 <MIC_Print+0x4a>
    denominator = counter;
 8008548:	4b92      	ldr	r3, [pc, #584]	@ (8008794 <MIC_Print+0x28c>)
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	4b94      	ldr	r3, [pc, #592]	@ (80087a0 <MIC_Print+0x298>)
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e005      	b.n	800855e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008552:	4b93      	ldr	r3, [pc, #588]	@ (80087a0 <MIC_Print+0x298>)
 8008554:	220a      	movs	r2, #10
 8008556:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008558:	4b90      	ldr	r3, [pc, #576]	@ (800879c <MIC_Print+0x294>)
 800855a:	2201      	movs	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
  }
  dBAmax = 0.0;
 800855e:	4b91      	ldr	r3, [pc, #580]	@ (80087a4 <MIC_Print+0x29c>)
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
  dBAsum = 0.0;
 8008564:	4b90      	ldr	r3, [pc, #576]	@ (80087a8 <MIC_Print+0x2a0>)
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800856a:	230f      	movs	r3, #15
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e03e      	b.n	80085f2 <MIC_Print+0xea>
    dBAsum += dBASamples[i];
 8008574:	240f      	movs	r4, #15
 8008576:	193b      	adds	r3, r7, r4
 8008578:	781a      	ldrb	r2, [r3, #0]
 800857a:	4b87      	ldr	r3, [pc, #540]	@ (8008798 <MIC_Print+0x290>)
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	58d2      	ldr	r2, [r2, r3]
 8008580:	4b89      	ldr	r3, [pc, #548]	@ (80087a8 <MIC_Print+0x2a0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	1c19      	adds	r1, r3, #0
 8008586:	1c10      	adds	r0, r2, #0
 8008588:	f7f8 f99a 	bl	80008c0 <__aeabi_fadd>
 800858c:	1c03      	adds	r3, r0, #0
 800858e:	1c1a      	adds	r2, r3, #0
 8008590:	4b85      	ldr	r3, [pc, #532]	@ (80087a8 <MIC_Print+0x2a0>)
 8008592:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008594:	193b      	adds	r3, r7, r4
 8008596:	781a      	ldrb	r2, [r3, #0]
 8008598:	4b7f      	ldr	r3, [pc, #508]	@ (8008798 <MIC_Print+0x290>)
 800859a:	0092      	lsls	r2, r2, #2
 800859c:	58d2      	ldr	r2, [r2, r3]
 800859e:	4b81      	ldr	r3, [pc, #516]	@ (80087a4 <MIC_Print+0x29c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	1c19      	adds	r1, r3, #0
 80085a4:	1c10      	adds	r0, r2, #0
 80085a6:	f7f7 ffd7 	bl	8000558 <__aeabi_fcmpgt>
 80085aa:	1e03      	subs	r3, r0, #0
 80085ac:	d006      	beq.n	80085bc <MIC_Print+0xb4>
      dBAmax = dBASamples[i];
 80085ae:	193b      	adds	r3, r7, r4
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	4b79      	ldr	r3, [pc, #484]	@ (8008798 <MIC_Print+0x290>)
 80085b4:	0092      	lsls	r2, r2, #2
 80085b6:	58d2      	ldr	r2, [r2, r3]
 80085b8:	4b7a      	ldr	r3, [pc, #488]	@ (80087a4 <MIC_Print+0x29c>)
 80085ba:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80085bc:	4b7a      	ldr	r3, [pc, #488]	@ (80087a8 <MIC_Print+0x2a0>)
 80085be:	681c      	ldr	r4, [r3, #0]
 80085c0:	4b77      	ldr	r3, [pc, #476]	@ (80087a0 <MIC_Print+0x298>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	0018      	movs	r0, r3
 80085c6:	f7f9 f84f 	bl	8001668 <__aeabi_ui2f>
 80085ca:	1c03      	adds	r3, r0, #0
 80085cc:	1c19      	adds	r1, r3, #0
 80085ce:	1c20      	adds	r0, r4, #0
 80085d0:	f7f8 fb00 	bl	8000bd4 <__aeabi_fdiv>
 80085d4:	1c03      	adds	r3, r0, #0
 80085d6:	1c1a      	adds	r2, r3, #0
 80085d8:	4b74      	ldr	r3, [pc, #464]	@ (80087ac <MIC_Print+0x2a4>)
 80085da:	601a      	str	r2, [r3, #0]
  setMic(dBAAverage);
 80085dc:	4b73      	ldr	r3, [pc, #460]	@ (80087ac <MIC_Print+0x2a4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	1c18      	adds	r0, r3, #0
 80085e2:	f7fb f9af 	bl	8003944 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 80085e6:	210f      	movs	r1, #15
 80085e8:	187b      	adds	r3, r7, r1
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	187b      	adds	r3, r7, r1
 80085ee:	3201      	adds	r2, #1
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	4b6b      	ldr	r3, [pc, #428]	@ (80087a0 <MIC_Print+0x298>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	220f      	movs	r2, #15
 80085f8:	18ba      	adds	r2, r7, r2
 80085fa:	7812      	ldrb	r2, [r2, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d3b9      	bcc.n	8008574 <MIC_Print+0x6c>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008600:	4b63      	ldr	r3, [pc, #396]	@ (8008790 <MIC_Print+0x288>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1c18      	adds	r0, r3, #0
 8008606:	f7fa ff2d 	bl	8003464 <__aeabi_f2d>
 800860a:	6038      	str	r0, [r7, #0]
 800860c:	6079      	str	r1, [r7, #4]
 800860e:	4b65      	ldr	r3, [pc, #404]	@ (80087a4 <MIC_Print+0x29c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	1c18      	adds	r0, r3, #0
 8008614:	f7fa ff26 	bl	8003464 <__aeabi_f2d>
 8008618:	0004      	movs	r4, r0
 800861a:	000d      	movs	r5, r1
 800861c:	4b63      	ldr	r3, [pc, #396]	@ (80087ac <MIC_Print+0x2a4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	1c18      	adds	r0, r3, #0
 8008622:	f7fa ff1f 	bl	8003464 <__aeabi_f2d>
 8008626:	0002      	movs	r2, r0
 8008628:	000b      	movs	r3, r1
 800862a:	4961      	ldr	r1, [pc, #388]	@ (80087b0 <MIC_Print+0x2a8>)
 800862c:	9204      	str	r2, [sp, #16]
 800862e:	9305      	str	r3, [sp, #20]
 8008630:	9402      	str	r4, [sp, #8]
 8008632:	9503      	str	r5, [sp, #12]
 8008634:	4b5f      	ldr	r3, [pc, #380]	@ (80087b4 <MIC_Print+0x2ac>)
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	0008      	movs	r0, r1
 800863e:	f000 fa0d 	bl	8008a5c <print>

  if(counter > NUMBER_OF_SAMPLES){
 8008642:	4b54      	ldr	r3, [pc, #336]	@ (8008794 <MIC_Print+0x28c>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b0a      	cmp	r3, #10
 8008648:	d902      	bls.n	8008650 <MIC_Print+0x148>
    counter = 0;
 800864a:	4b52      	ldr	r3, [pc, #328]	@ (8008794 <MIC_Print+0x28c>)
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008650:	4b4f      	ldr	r3, [pc, #316]	@ (8008790 <MIC_Print+0x288>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4958      	ldr	r1, [pc, #352]	@ (80087b8 <MIC_Print+0x2b0>)
 8008656:	1c18      	adds	r0, r3, #0
 8008658:	f7f7 ff88 	bl	800056c <__aeabi_fcmpge>
 800865c:	1e03      	subs	r3, r0, #0
 800865e:	d004      	beq.n	800866a <MIC_Print+0x162>
    SetDBLED(true, true, true);
 8008660:	2201      	movs	r2, #1
 8008662:	2101      	movs	r1, #1
 8008664:	2001      	movs	r0, #1
 8008666:	f004 fa2f 	bl	800cac8 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800866a:	4b49      	ldr	r3, [pc, #292]	@ (8008790 <MIC_Print+0x288>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4953      	ldr	r1, [pc, #332]	@ (80087bc <MIC_Print+0x2b4>)
 8008670:	1c18      	adds	r0, r3, #0
 8008672:	f7f7 ff7b 	bl	800056c <__aeabi_fcmpge>
 8008676:	1e03      	subs	r3, r0, #0
 8008678:	d00c      	beq.n	8008694 <MIC_Print+0x18c>
 800867a:	4b45      	ldr	r3, [pc, #276]	@ (8008790 <MIC_Print+0x288>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	494e      	ldr	r1, [pc, #312]	@ (80087b8 <MIC_Print+0x2b0>)
 8008680:	1c18      	adds	r0, r3, #0
 8008682:	f7f7 ff55 	bl	8000530 <__aeabi_fcmplt>
 8008686:	1e03      	subs	r3, r0, #0
 8008688:	d004      	beq.n	8008694 <MIC_Print+0x18c>
    SetDBLED(true, false, false);
 800868a:	2200      	movs	r2, #0
 800868c:	2100      	movs	r1, #0
 800868e:	2001      	movs	r0, #1
 8008690:	f004 fa1a 	bl	800cac8 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008694:	4b3e      	ldr	r3, [pc, #248]	@ (8008790 <MIC_Print+0x288>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4949      	ldr	r1, [pc, #292]	@ (80087c0 <MIC_Print+0x2b8>)
 800869a:	1c18      	adds	r0, r3, #0
 800869c:	f7f7 ff66 	bl	800056c <__aeabi_fcmpge>
 80086a0:	1e03      	subs	r3, r0, #0
 80086a2:	d00c      	beq.n	80086be <MIC_Print+0x1b6>
 80086a4:	4b3a      	ldr	r3, [pc, #232]	@ (8008790 <MIC_Print+0x288>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4944      	ldr	r1, [pc, #272]	@ (80087bc <MIC_Print+0x2b4>)
 80086aa:	1c18      	adds	r0, r3, #0
 80086ac:	f7f7 ff40 	bl	8000530 <__aeabi_fcmplt>
 80086b0:	1e03      	subs	r3, r0, #0
 80086b2:	d004      	beq.n	80086be <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 80086b4:	2200      	movs	r2, #0
 80086b6:	2101      	movs	r1, #1
 80086b8:	2001      	movs	r0, #1
 80086ba:	f004 fa05 	bl	800cac8 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 80086be:	4b34      	ldr	r3, [pc, #208]	@ (8008790 <MIC_Print+0x288>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4940      	ldr	r1, [pc, #256]	@ (80087c4 <MIC_Print+0x2bc>)
 80086c4:	1c18      	adds	r0, r3, #0
 80086c6:	f7f7 ff51 	bl	800056c <__aeabi_fcmpge>
 80086ca:	1e03      	subs	r3, r0, #0
 80086cc:	d00c      	beq.n	80086e8 <MIC_Print+0x1e0>
 80086ce:	4b30      	ldr	r3, [pc, #192]	@ (8008790 <MIC_Print+0x288>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	493b      	ldr	r1, [pc, #236]	@ (80087c0 <MIC_Print+0x2b8>)
 80086d4:	1c18      	adds	r0, r3, #0
 80086d6:	f7f7 ff2b 	bl	8000530 <__aeabi_fcmplt>
 80086da:	1e03      	subs	r3, r0, #0
 80086dc:	d004      	beq.n	80086e8 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 80086de:	2200      	movs	r2, #0
 80086e0:	2101      	movs	r1, #1
 80086e2:	2000      	movs	r0, #0
 80086e4:	f004 f9f0 	bl	800cac8 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 80086e8:	4b29      	ldr	r3, [pc, #164]	@ (8008790 <MIC_Print+0x288>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4936      	ldr	r1, [pc, #216]	@ (80087c8 <MIC_Print+0x2c0>)
 80086ee:	1c18      	adds	r0, r3, #0
 80086f0:	f7f7 ff3c 	bl	800056c <__aeabi_fcmpge>
 80086f4:	1e03      	subs	r3, r0, #0
 80086f6:	d00c      	beq.n	8008712 <MIC_Print+0x20a>
 80086f8:	4b25      	ldr	r3, [pc, #148]	@ (8008790 <MIC_Print+0x288>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4931      	ldr	r1, [pc, #196]	@ (80087c4 <MIC_Print+0x2bc>)
 80086fe:	1c18      	adds	r0, r3, #0
 8008700:	f7f7 ff16 	bl	8000530 <__aeabi_fcmplt>
 8008704:	1e03      	subs	r3, r0, #0
 8008706:	d004      	beq.n	8008712 <MIC_Print+0x20a>
    SetDBLED(false, true, true);
 8008708:	2201      	movs	r2, #1
 800870a:	2101      	movs	r1, #1
 800870c:	2000      	movs	r0, #0
 800870e:	f004 f9db 	bl	800cac8 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008712:	4b1f      	ldr	r3, [pc, #124]	@ (8008790 <MIC_Print+0x288>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	492d      	ldr	r1, [pc, #180]	@ (80087cc <MIC_Print+0x2c4>)
 8008718:	1c18      	adds	r0, r3, #0
 800871a:	f7f7 ff27 	bl	800056c <__aeabi_fcmpge>
 800871e:	1e03      	subs	r3, r0, #0
 8008720:	d00c      	beq.n	800873c <MIC_Print+0x234>
 8008722:	4b1b      	ldr	r3, [pc, #108]	@ (8008790 <MIC_Print+0x288>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4928      	ldr	r1, [pc, #160]	@ (80087c8 <MIC_Print+0x2c0>)
 8008728:	1c18      	adds	r0, r3, #0
 800872a:	f7f7 ff01 	bl	8000530 <__aeabi_fcmplt>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d004      	beq.n	800873c <MIC_Print+0x234>
    SetDBLED(false, false, true);
 8008732:	2201      	movs	r2, #1
 8008734:	2100      	movs	r1, #0
 8008736:	2000      	movs	r0, #0
 8008738:	f004 f9c6 	bl	800cac8 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800873c:	4b14      	ldr	r3, [pc, #80]	@ (8008790 <MIC_Print+0x288>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4923      	ldr	r1, [pc, #140]	@ (80087d0 <MIC_Print+0x2c8>)
 8008742:	1c18      	adds	r0, r3, #0
 8008744:	f7f7 ff12 	bl	800056c <__aeabi_fcmpge>
 8008748:	1e03      	subs	r3, r0, #0
 800874a:	d00c      	beq.n	8008766 <MIC_Print+0x25e>
 800874c:	4b10      	ldr	r3, [pc, #64]	@ (8008790 <MIC_Print+0x288>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	491e      	ldr	r1, [pc, #120]	@ (80087cc <MIC_Print+0x2c4>)
 8008752:	1c18      	adds	r0, r3, #0
 8008754:	f7f7 feec 	bl	8000530 <__aeabi_fcmplt>
 8008758:	1e03      	subs	r3, r0, #0
 800875a:	d004      	beq.n	8008766 <MIC_Print+0x25e>
    SetDBLED(true, false, true);
 800875c:	2201      	movs	r2, #1
 800875e:	2100      	movs	r1, #0
 8008760:	2001      	movs	r0, #1
 8008762:	f004 f9b1 	bl	800cac8 <SetDBLED>
  }
  if(dBA < 35){//off
 8008766:	4b0a      	ldr	r3, [pc, #40]	@ (8008790 <MIC_Print+0x288>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4919      	ldr	r1, [pc, #100]	@ (80087d0 <MIC_Print+0x2c8>)
 800876c:	1c18      	adds	r0, r3, #0
 800876e:	f7f7 fedf 	bl	8000530 <__aeabi_fcmplt>
 8008772:	1e03      	subs	r3, r0, #0
 8008774:	d100      	bne.n	8008778 <MIC_Print+0x270>
    SetDBLED(false, false, false);
  }
}
 8008776:	e004      	b.n	8008782 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
 8008778:	2200      	movs	r2, #0
 800877a:	2100      	movs	r1, #0
 800877c:	2000      	movs	r0, #0
 800877e:	f004 f9a3 	bl	800cac8 <SetDBLED>
}
 8008782:	46c0      	nop			@ (mov r8, r8)
 8008784:	46bd      	mov	sp, r7
 8008786:	b004      	add	sp, #16
 8008788:	bdb0      	pop	{r4, r5, r7, pc}
 800878a:	46c0      	nop			@ (mov r8, r8)
 800878c:	20000f7c 	.word	0x20000f7c
 8008790:	20000f48 	.word	0x20000f48
 8008794:	20000f84 	.word	0x20000f84
 8008798:	20000f4c 	.word	0x20000f4c
 800879c:	20000f85 	.word	0x20000f85
 80087a0:	20000080 	.word	0x20000080
 80087a4:	20000f80 	.word	0x20000f80
 80087a8:	20000f78 	.word	0x20000f78
 80087ac:	20000f74 	.word	0x20000f74
 80087b0:	08023848 	.word	0x08023848
 80087b4:	20000f3c 	.word	0x20000f3c
 80087b8:	42b40000 	.word	0x42b40000
 80087bc:	42a00000 	.word	0x42a00000
 80087c0:	428c0000 	.word	0x428c0000
 80087c4:	42700000 	.word	0x42700000
 80087c8:	42480000 	.word	0x42480000
 80087cc:	42200000 	.word	0x42200000
 80087d0:	420c0000 	.word	0x420c0000

080087d4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80087da:	4b11      	ldr	r3, [pc, #68]	@ (8008820 <MIC_TestMeasurementDone+0x4c>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	4a10      	ldr	r2, [pc, #64]	@ (8008824 <MIC_TestMeasurementDone+0x50>)
 80087e2:	4911      	ldr	r1, [pc, #68]	@ (8008828 <MIC_TestMeasurementDone+0x54>)
 80087e4:	2002      	movs	r0, #2
 80087e6:	f005 f943 	bl	800da70 <CreateLine>
  if(DataReady) {
 80087ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008820 <MIC_TestMeasurementDone+0x4c>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d010      	beq.n	8008816 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 80087f4:	1dfb      	adds	r3, r7, #7
 80087f6:	4a0d      	ldr	r2, [pc, #52]	@ (800882c <MIC_TestMeasurementDone+0x58>)
 80087f8:	7812      	ldrb	r2, [r2, #0]
 80087fa:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80087fc:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <MIC_TestMeasurementDone+0x58>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	4a0b      	ldr	r2, [pc, #44]	@ (8008830 <MIC_TestMeasurementDone+0x5c>)
 8008804:	4908      	ldr	r1, [pc, #32]	@ (8008828 <MIC_TestMeasurementDone+0x54>)
 8008806:	2002      	movs	r0, #2
 8008808:	f005 f932 	bl	800da70 <CreateLine>
    ResetMICIndicator();
 800880c:	f004 fa3a 	bl	800cc84 <ResetMICIndicator>
    return Check;
 8008810:	1dfb      	adds	r3, r7, #7
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	e000      	b.n	8008818 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008816:	2300      	movs	r3, #0
}
 8008818:	0018      	movs	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	b002      	add	sp, #8
 800881e:	bd80      	pop	{r7, pc}
 8008820:	200012b3 	.word	0x200012b3
 8008824:	08023890 	.word	0x08023890
 8008828:	080238bc 	.word	0x080238bc
 800882c:	200012b4 	.word	0x200012b4
 8008830:	080238c0 	.word	0x080238c0

08008834 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800883a:	4b78      	ldr	r3, [pc, #480]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b03      	cmp	r3, #3
 8008840:	d100      	bne.n	8008844 <Mic_Upkeep+0x10>
 8008842:	e0b8      	b.n	80089b6 <Mic_Upkeep+0x182>
 8008844:	dd00      	ble.n	8008848 <Mic_Upkeep+0x14>
 8008846:	e0d3      	b.n	80089f0 <Mic_Upkeep+0x1bc>
 8008848:	2b02      	cmp	r3, #2
 800884a:	d037      	beq.n	80088bc <Mic_Upkeep+0x88>
 800884c:	dd00      	ble.n	8008850 <Mic_Upkeep+0x1c>
 800884e:	e0cf      	b.n	80089f0 <Mic_Upkeep+0x1bc>
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <Mic_Upkeep+0x26>
 8008854:	2b01      	cmp	r3, #1
 8008856:	d014      	beq.n	8008882 <Mic_Upkeep+0x4e>
 8008858:	e0ca      	b.n	80089f0 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800885a:	2001      	movs	r0, #1
 800885c:	f003 fa7a 	bl	800bd54 <enableMicrophone>
 8008860:	0003      	movs	r3, r0
 8008862:	001a      	movs	r2, r3
 8008864:	2301      	movs	r3, #1
 8008866:	4053      	eors	r3, r2
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800886e:	4a6c      	ldr	r2, [pc, #432]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 8008870:	4b6c      	ldr	r3, [pc, #432]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 8008872:	217c      	movs	r1, #124	@ 0x7c
 8008874:	0018      	movs	r0, r3
 8008876:	f005 f9a9 	bl	800dbcc <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800887a:	4b68      	ldr	r3, [pc, #416]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 800887c:	2201      	movs	r2, #1
 800887e:	701a      	strb	r2, [r3, #0]
    break;
 8008880:	e0c5      	b.n	8008a0e <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008882:	f003 fa43 	bl	800bd0c <micSettlingComplete>
 8008886:	1e03      	subs	r3, r0, #0
 8008888:	d105      	bne.n	8008896 <Mic_Upkeep+0x62>
 800888a:	4b67      	ldr	r3, [pc, #412]	@ (8008a28 <Mic_Upkeep+0x1f4>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d100      	bne.n	8008896 <Mic_Upkeep+0x62>
 8008894:	e0b6      	b.n	8008a04 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008896:	f003 fac7 	bl	800be28 <startSPLcalculation>
 800889a:	0003      	movs	r3, r0
 800889c:	001a      	movs	r2, r3
 800889e:	2301      	movs	r3, #1
 80088a0:	4053      	eors	r3, r2
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80088a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 80088aa:	4b5e      	ldr	r3, [pc, #376]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 80088ac:	2185      	movs	r1, #133	@ 0x85
 80088ae:	0018      	movs	r0, r3
 80088b0:	f005 f98c 	bl	800dbcc <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80088b4:	4b59      	ldr	r3, [pc, #356]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 80088b6:	2202      	movs	r2, #2
 80088b8:	701a      	strb	r2, [r3, #0]
    }
    break;
 80088ba:	e0a3      	b.n	8008a04 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80088bc:	4b5b      	ldr	r3, [pc, #364]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088be:	2201      	movs	r2, #1
 80088c0:	2101      	movs	r1, #1
 80088c2:	0018      	movs	r0, r3
 80088c4:	f003 f904 	bl	800bad0 <getSoundData>
 80088c8:	1e03      	subs	r3, r0, #0
 80088ca:	d100      	bne.n	80088ce <Mic_Upkeep+0x9a>
 80088cc:	e09c      	b.n	8008a08 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80088ce:	f003 f9fd 	bl	800bccc <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80088d2:	4b56      	ldr	r3, [pc, #344]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	001a      	movs	r2, r3
 80088d8:	4b54      	ldr	r3, [pc, #336]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	4954      	ldr	r1, [pc, #336]	@ (8008a30 <Mic_Upkeep+0x1fc>)
 80088de:	0038      	movs	r0, r7
 80088e0:	f016 fe10 	bl	801f504 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80088e4:	4b51      	ldr	r3, [pc, #324]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088e6:	89db      	ldrh	r3, [r3, #14]
 80088e8:	001a      	movs	r2, r3
 80088ea:	4b50      	ldr	r3, [pc, #320]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088ec:	7c1b      	ldrb	r3, [r3, #16]
 80088ee:	4951      	ldr	r1, [pc, #324]	@ (8008a34 <Mic_Upkeep+0x200>)
 80088f0:	4851      	ldr	r0, [pc, #324]	@ (8008a38 <Mic_Upkeep+0x204>)
 80088f2:	f016 fe07 	bl	801f504 <siprintf>
      dBValue = atof(dBbuffer);
 80088f6:	003b      	movs	r3, r7
 80088f8:	0018      	movs	r0, r3
 80088fa:	f015 f9b3 	bl	801dc64 <atof>
 80088fe:	0002      	movs	r2, r0
 8008900:	000b      	movs	r3, r1
 8008902:	0010      	movs	r0, r2
 8008904:	0019      	movs	r1, r3
 8008906:	f7fa fdf5 	bl	80034f4 <__aeabi_d2f>
 800890a:	1c02      	adds	r2, r0, #0
 800890c:	4b4b      	ldr	r3, [pc, #300]	@ (8008a3c <Mic_Upkeep+0x208>)
 800890e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008910:	4b4a      	ldr	r3, [pc, #296]	@ (8008a3c <Mic_Upkeep+0x208>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	494a      	ldr	r1, [pc, #296]	@ (8008a40 <Mic_Upkeep+0x20c>)
 8008916:	1c18      	adds	r0, r3, #0
 8008918:	f7f8 fb42 	bl	8000fa0 <__aeabi_fmul>
 800891c:	1c03      	adds	r3, r0, #0
 800891e:	1c18      	adds	r0, r3, #0
 8008920:	f7fa fda0 	bl	8003464 <__aeabi_f2d>
 8008924:	2200      	movs	r2, #0
 8008926:	4b47      	ldr	r3, [pc, #284]	@ (8008a44 <Mic_Upkeep+0x210>)
 8008928:	f7f8 fee0 	bl	80016ec <__aeabi_dadd>
 800892c:	0002      	movs	r2, r0
 800892e:	000b      	movs	r3, r1
 8008930:	0010      	movs	r0, r2
 8008932:	0019      	movs	r1, r3
 8008934:	f7fa fd08 	bl	8003348 <__aeabi_d2iz>
 8008938:	0003      	movs	r3, r0
 800893a:	0018      	movs	r0, r3
 800893c:	f7fa fd40 	bl	80033c0 <__aeabi_i2d>
 8008940:	2200      	movs	r2, #0
 8008942:	4b41      	ldr	r3, [pc, #260]	@ (8008a48 <Mic_Upkeep+0x214>)
 8008944:	f7f9 fa36 	bl	8001db4 <__aeabi_ddiv>
 8008948:	0002      	movs	r2, r0
 800894a:	000b      	movs	r3, r1
 800894c:	0010      	movs	r0, r2
 800894e:	0019      	movs	r1, r3
 8008950:	f7fa fdd0 	bl	80034f4 <__aeabi_d2f>
 8008954:	1c02      	adds	r2, r0, #0
 8008956:	4b39      	ldr	r3, [pc, #228]	@ (8008a3c <Mic_Upkeep+0x208>)
 8008958:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800895a:	f7ff fdd5 	bl	8008508 <MIC_Print>
      if (!startSPLcalculation()) {
 800895e:	f003 fa63 	bl	800be28 <startSPLcalculation>
 8008962:	0003      	movs	r3, r0
 8008964:	001a      	movs	r2, r3
 8008966:	2301      	movs	r3, #1
 8008968:	4053      	eors	r3, r2
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008970:	4a2b      	ldr	r2, [pc, #172]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 8008972:	4b2c      	ldr	r3, [pc, #176]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 8008974:	2195      	movs	r1, #149	@ 0x95
 8008976:	0018      	movs	r0, r3
 8008978:	f005 f928 	bl	800dbcc <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800897c:	2000      	movs	r0, #0
 800897e:	f003 f9e9 	bl	800bd54 <enableMicrophone>
 8008982:	0003      	movs	r3, r0
 8008984:	001a      	movs	r2, r3
 8008986:	2301      	movs	r3, #1
 8008988:	4053      	eors	r3, r2
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008990:	4a23      	ldr	r2, [pc, #140]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 8008992:	4b24      	ldr	r3, [pc, #144]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 8008994:	2198      	movs	r1, #152	@ 0x98
 8008996:	0018      	movs	r0, r3
 8008998:	f005 f918 	bl	800dbcc <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800899c:	f005 fcb4 	bl	800e308 <HAL_GetTick>
 80089a0:	0003      	movs	r3, r0
 80089a2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a4c <Mic_Upkeep+0x218>)
 80089a4:	189a      	adds	r2, r3, r2
 80089a6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a50 <Mic_Upkeep+0x21c>)
 80089a8:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80089aa:	4b1c      	ldr	r3, [pc, #112]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 80089ac:	2203      	movs	r2, #3
 80089ae:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80089b0:	f004 f968 	bl	800cc84 <ResetMICIndicator>
    }
    break;
 80089b4:	e028      	b.n	8008a08 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 80089b6:	4b26      	ldr	r3, [pc, #152]	@ (8008a50 <Mic_Upkeep+0x21c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	0018      	movs	r0, r3
 80089bc:	f005 f802 	bl	800d9c4 <TimestampIsReached>
 80089c0:	1e03      	subs	r3, r0, #0
 80089c2:	d023      	beq.n	8008a0c <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 80089c4:	2001      	movs	r0, #1
 80089c6:	f003 f9c5 	bl	800bd54 <enableMicrophone>
 80089ca:	0003      	movs	r3, r0
 80089cc:	001a      	movs	r2, r3
 80089ce:	2301      	movs	r3, #1
 80089d0:	4053      	eors	r3, r2
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 80089d8:	4a11      	ldr	r2, [pc, #68]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 80089da:	4b12      	ldr	r3, [pc, #72]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 80089dc:	21a3      	movs	r1, #163	@ 0xa3
 80089de:	0018      	movs	r0, r3
 80089e0:	f005 f8f4 	bl	800dbcc <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 80089e4:	4b0d      	ldr	r3, [pc, #52]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80089ea:	f004 f919 	bl	800cc20 <SetMICIndicator>
    }
    break;
 80089ee:	e00d      	b.n	8008a0c <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 80089f0:	4a18      	ldr	r2, [pc, #96]	@ (8008a54 <Mic_Upkeep+0x220>)
 80089f2:	4b19      	ldr	r3, [pc, #100]	@ (8008a58 <Mic_Upkeep+0x224>)
 80089f4:	0019      	movs	r1, r3
 80089f6:	2003      	movs	r0, #3
 80089f8:	f005 f83a 	bl	800da70 <CreateLine>
    MicState = MIC_STATE_INIT;
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
    break;
 8008a02:	e004      	b.n	8008a0e <Mic_Upkeep+0x1da>
    break;
 8008a04:	46c0      	nop			@ (mov r8, r8)
 8008a06:	e002      	b.n	8008a0e <Mic_Upkeep+0x1da>
    break;
 8008a08:	46c0      	nop			@ (mov r8, r8)
 8008a0a:	e000      	b.n	8008a0e <Mic_Upkeep+0x1da>
    break;
 8008a0c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008a0e:	4b03      	ldr	r3, [pc, #12]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b002      	add	sp, #8
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			@ (mov r8, r8)
 8008a1c:	20000f9e 	.word	0x20000f9e
 8008a20:	080238d8 	.word	0x080238d8
 8008a24:	08024780 	.word	0x08024780
 8008a28:	200012b3 	.word	0x200012b3
 8008a2c:	20000f8c 	.word	0x20000f8c
 8008a30:	080238f4 	.word	0x080238f4
 8008a34:	080238fc 	.word	0x080238fc
 8008a38:	20000f3c 	.word	0x20000f3c
 8008a3c:	20000f7c 	.word	0x20000f7c
 8008a40:	42c80000 	.word	0x42c80000
 8008a44:	3fe00000 	.word	0x3fe00000
 8008a48:	40590000 	.word	0x40590000
 8008a4c:	000002f3 	.word	0x000002f3
 8008a50:	20000f88 	.word	0x20000f88
 8008a54:	08023904 	.word	0x08023904
 8008a58:	08023924 	.word	0x08023924

08008a5c <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008a5c:	b40f      	push	{r0, r1, r2, r3}
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008a64:	2314      	movs	r3, #20
 8008a66:	18fb      	adds	r3, r7, r3
 8008a68:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	2180      	movs	r1, #128	@ 0x80
 8008a70:	0089      	lsls	r1, r1, #2
 8008a72:	480a      	ldr	r0, [pc, #40]	@ (8008a9c <print+0x40>)
 8008a74:	f016 fdde 	bl	801f634 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008a78:	4b08      	ldr	r3, [pc, #32]	@ (8008a9c <print+0x40>)
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f7f7 fb76 	bl	800016c <strlen>
 8008a80:	0003      	movs	r3, r0
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <print+0x40>)
 8008a86:	0011      	movs	r1, r2
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f7ff fc47 	bl	800831c <printString>
}
 8008a8e:	46c0      	nop			@ (mov r8, r8)
 8008a90:	46bd      	mov	sp, r7
 8008a92:	b002      	add	sp, #8
 8008a94:	bc80      	pop	{r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	b004      	add	sp, #16
 8008a9a:	4718      	bx	r3
 8008a9c:	20000fa0 	.word	0x20000fa0

08008aa0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008aa6:	1d3b      	adds	r3, r7, #4
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	2314      	movs	r3, #20
 8008aac:	001a      	movs	r2, r3
 8008aae:	2100      	movs	r1, #0
 8008ab0:	f016 fe6c 	bl	801f78c <memset>
  RTC_DateTypeDef sDate = {0};
 8008ab4:	003b      	movs	r3, r7
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008aba:	4b2e      	ldr	r3, [pc, #184]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008abc:	4a2e      	ldr	r2, [pc, #184]	@ (8008b78 <MX_RTC_Init+0xd8>)
 8008abe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ac8:	227f      	movs	r2, #127	@ 0x7f
 8008aca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008acc:	4b29      	ldr	r3, [pc, #164]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ace:	22ff      	movs	r2, #255	@ 0xff
 8008ad0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008ad2:	4b28      	ldr	r3, [pc, #160]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008ad8:	4b26      	ldr	r3, [pc, #152]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008ade:	4b25      	ldr	r3, [pc, #148]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008ae4:	4b23      	ldr	r3, [pc, #140]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008aea:	4b22      	ldr	r3, [pc, #136]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008aec:	0018      	movs	r0, r3
 8008aee:	f00c fc79 	bl	80153e4 <HAL_RTC_Init>
 8008af2:	1e03      	subs	r3, r0, #0
 8008af4:	d001      	beq.n	8008afa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008af6:	f7ff fcd1 	bl	800849c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	220d      	movs	r2, #13
 8008afe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008b00:	1d3b      	adds	r3, r7, #4
 8008b02:	2200      	movs	r2, #0
 8008b04:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008b06:	1d3b      	adds	r3, r7, #4
 8008b08:	2200      	movs	r2, #0
 8008b0a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008b0c:	1d3b      	adds	r3, r7, #4
 8008b0e:	2200      	movs	r2, #0
 8008b10:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	2200      	movs	r2, #0
 8008b16:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008b18:	1d39      	adds	r1, r7, #4
 8008b1a:	4b16      	ldr	r3, [pc, #88]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f00c fcfc 	bl	801551c <HAL_RTC_SetTime>
 8008b24:	1e03      	subs	r3, r0, #0
 8008b26:	d001      	beq.n	8008b2c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008b28:	f7ff fcb8 	bl	800849c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008b2c:	003b      	movs	r3, r7
 8008b2e:	2206      	movs	r2, #6
 8008b30:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008b32:	003b      	movs	r3, r7
 8008b34:	2211      	movs	r2, #17
 8008b36:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008b38:	003b      	movs	r3, r7
 8008b3a:	2217      	movs	r2, #23
 8008b3c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008b3e:	003b      	movs	r3, r7
 8008b40:	2218      	movs	r2, #24
 8008b42:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008b44:	0039      	movs	r1, r7
 8008b46:	4b0b      	ldr	r3, [pc, #44]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f00c fdee 	bl	801572c <HAL_RTC_SetDate>
 8008b50:	1e03      	subs	r3, r0, #0
 8008b52:	d001      	beq.n	8008b58 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008b54:	f7ff fca2 	bl	800849c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008b58:	4b06      	ldr	r3, [pc, #24]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f00c ff9e 	bl	8015aa0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008b64:	1e03      	subs	r3, r0, #0
 8008b66:	d001      	beq.n	8008b6c <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008b68:	f7ff fc98 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008b6c:	46c0      	nop			@ (mov r8, r8)
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b006      	add	sp, #24
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	200011a0 	.word	0x200011a0
 8008b78:	40002800 	.word	0x40002800

08008b7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a0a      	ldr	r2, [pc, #40]	@ (8008bb4 <HAL_RTC_MspInit+0x38>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d10e      	bne.n	8008bac <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <HAL_RTC_MspInit+0x3c>)
 8008b90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b92:	4b09      	ldr	r3, [pc, #36]	@ (8008bb8 <HAL_RTC_MspInit+0x3c>)
 8008b94:	2180      	movs	r1, #128	@ 0x80
 8008b96:	02c9      	lsls	r1, r1, #11
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	2002      	movs	r0, #2
 8008ba2:	f006 f843 	bl	800ec2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008ba6:	2002      	movs	r0, #2
 8008ba8:	f006 f855 	bl	800ec56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008bac:	46c0      	nop			@ (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b002      	add	sp, #8
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40002800 	.word	0x40002800
 8008bb8:	40021000 	.word	0x40021000

08008bbc <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008bc4:	f005 fba0 	bl	800e308 <HAL_GetTick>
 8008bc8:	0002      	movs	r2, r0
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	18d2      	adds	r2, r2, r3
 8008bce:	4b03      	ldr	r3, [pc, #12]	@ (8008bdc <setsen5xReadTimer+0x20>)
 8008bd0:	601a      	str	r2, [r3, #0]
}
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	b002      	add	sp, #8
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	46c0      	nop			@ (mov r8, r8)
 8008bdc:	200011c8 	.word	0x200011c8

08008be0 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8008be8:	f7fe ff3c 	bl	8007a64 <IsPMSensorEnabled>
 8008bec:	1e03      	subs	r3, r0, #0
 8008bee:	d033      	beq.n	8008c58 <sen5x_enable+0x78>
    Debug("sen5x measurement is enabled");
 8008bf0:	4a21      	ldr	r2, [pc, #132]	@ (8008c78 <sen5x_enable+0x98>)
 8008bf2:	4b22      	ldr	r3, [pc, #136]	@ (8008c7c <sen5x_enable+0x9c>)
 8008bf4:	0019      	movs	r1, r3
 8008bf6:	2003      	movs	r0, #3
 8008bf8:	f004 ff3a 	bl	800da70 <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8008bfc:	4b20      	ldr	r3, [pc, #128]	@ (8008c80 <sen5x_enable+0xa0>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	1e5a      	subs	r2, r3, #1
 8008c02:	4193      	sbcs	r3, r2
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2201      	movs	r2, #1
 8008c08:	4053      	eors	r3, r2
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	1c1a      	adds	r2, r3, #0
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4013      	ands	r3, r2
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	4b1a      	ldr	r3, [pc, #104]	@ (8008c80 <sen5x_enable+0xa0>)
 8008c16:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008c18:	4b19      	ldr	r3, [pc, #100]	@ (8008c80 <sen5x_enable+0xa0>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <sen5x_enable+0x56>
      setsen5xReadTimer(0);
 8008c20:	2000      	movs	r0, #0
 8008c22:	f7ff ffcb 	bl	8008bbc <setsen5xReadTimer>
      Debug("SEN5X status of sen5x_Enable %d", sen5x_Enable);
 8008c26:	4b16      	ldr	r3, [pc, #88]	@ (8008c80 <sen5x_enable+0xa0>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4a16      	ldr	r2, [pc, #88]	@ (8008c84 <sen5x_enable+0xa4>)
 8008c2c:	4913      	ldr	r1, [pc, #76]	@ (8008c7c <sen5x_enable+0x9c>)
 8008c2e:	2003      	movs	r0, #3
 8008c30:	f004 ff1e 	bl	800da70 <CreateLine>
 8008c34:	e016      	b.n	8008c64 <sen5x_enable+0x84>
    }
    else {
      Debug("This cycle the sen5x is disabled");
 8008c36:	4a14      	ldr	r2, [pc, #80]	@ (8008c88 <sen5x_enable+0xa8>)
 8008c38:	4b10      	ldr	r3, [pc, #64]	@ (8008c7c <sen5x_enable+0x9c>)
 8008c3a:	0019      	movs	r1, r3
 8008c3c:	2003      	movs	r0, #3
 8008c3e:	f004 ff17 	bl	800da70 <CreateLine>
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008c42:	f005 fb61 	bl	800e308 <HAL_GetTick>
 8008c46:	0002      	movs	r2, r0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4910      	ldr	r1, [pc, #64]	@ (8008c8c <sen5x_enable+0xac>)
 8008c4c:	434b      	muls	r3, r1
 8008c4e:	18d3      	adds	r3, r2, r3
 8008c50:	0018      	movs	r0, r3
 8008c52:	f7ff ffb3 	bl	8008bbc <setsen5xReadTimer>
 8008c56:	e005      	b.n	8008c64 <sen5x_enable+0x84>
    }
  }
  else {
    Debug("sen5x measurement is disabled");
 8008c58:	4a0d      	ldr	r2, [pc, #52]	@ (8008c90 <sen5x_enable+0xb0>)
 8008c5a:	4b08      	ldr	r3, [pc, #32]	@ (8008c7c <sen5x_enable+0x9c>)
 8008c5c:	0019      	movs	r1, r3
 8008c5e:	2003      	movs	r0, #3
 8008c60:	f004 ff06 	bl	800da70 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8008c64:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <sen5x_enable+0xb4>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008c6a:	4b05      	ldr	r3, [pc, #20]	@ (8008c80 <sen5x_enable+0xa0>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
}
 8008c6e:	0018      	movs	r0, r3
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b002      	add	sp, #8
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	08023928 	.word	0x08023928
 8008c7c:	08023948 	.word	0x08023948
 8008c80:	200011c6 	.word	0x200011c6
 8008c84:	0802394c 	.word	0x0802394c
 8008c88:	0802396c 	.word	0x0802396c
 8008c8c:	00000bb8 	.word	0x00000bb8
 8008c90:	08023990 	.word	0x08023990
 8008c94:	20000081 	.word	0x20000081

08008c98 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc8 <sen5x_Power_On+0x30>)
 8008c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008ccc <sen5x_Power_On+0x34>)
 8008ca0:	0019      	movs	r1, r3
 8008ca2:	2003      	movs	r0, #3
 8008ca4:	f004 fee4 	bl	800da70 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008ca8:	2380      	movs	r3, #128	@ 0x80
 8008caa:	015b      	lsls	r3, r3, #5
 8008cac:	4808      	ldr	r0, [pc, #32]	@ (8008cd0 <sen5x_Power_On+0x38>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	0019      	movs	r1, r3
 8008cb2:	f006 fda4 	bl	800f7fe <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008cb6:	4b07      	ldr	r3, [pc, #28]	@ (8008cd4 <sen5x_Power_On+0x3c>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 8008cbc:	2037      	movs	r0, #55	@ 0x37
 8008cbe:	f005 fb2d 	bl	800e31c <HAL_Delay>
  return;
 8008cc2:	46c0      	nop			@ (mov r8, r8)
}
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	080239b0 	.word	0x080239b0
 8008ccc:	08023948 	.word	0x08023948
 8008cd0:	50000800 	.word	0x50000800
 8008cd4:	200011c5 	.word	0x200011c5

08008cd8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008cdc:	4a09      	ldr	r2, [pc, #36]	@ (8008d04 <sen5x_Power_Off+0x2c>)
 8008cde:	4b0a      	ldr	r3, [pc, #40]	@ (8008d08 <sen5x_Power_Off+0x30>)
 8008ce0:	0019      	movs	r1, r3
 8008ce2:	2003      	movs	r0, #3
 8008ce4:	f004 fec4 	bl	800da70 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008ce8:	2380      	movs	r3, #128	@ 0x80
 8008cea:	015b      	lsls	r3, r3, #5
 8008cec:	4807      	ldr	r0, [pc, #28]	@ (8008d0c <sen5x_Power_Off+0x34>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	0019      	movs	r1, r3
 8008cf2:	f006 fd84 	bl	800f7fe <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008cf6:	4b06      	ldr	r3, [pc, #24]	@ (8008d10 <sen5x_Power_Off+0x38>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
  return;
 8008cfc:	46c0      	nop			@ (mov r8, r8)
}
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	46c0      	nop			@ (mov r8, r8)
 8008d04:	080239cc 	.word	0x080239cc
 8008d08:	08023948 	.word	0x08023948
 8008d0c:	50000800 	.word	0x50000800
 8008d10:	200011c5 	.word	0x200011c5

08008d14 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008d18:	4b02      	ldr	r3, [pc, #8]	@ (8008d24 <reset_fanCleaningDone+0x10>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
}
 8008d1e:	46c0      	nop			@ (mov r8, r8)
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	200011c4 	.word	0x200011c4

08008d28 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2a:	b09b      	sub	sp, #108	@ 0x6c
 8008d2c:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8008d2e:	2456      	movs	r4, #86	@ 0x56
 8008d30:	193b      	adds	r3, r7, r4
 8008d32:	2200      	movs	r2, #0
 8008d34:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008d36:	2355      	movs	r3, #85	@ 0x55
 8008d38:	18fb      	adds	r3, r7, r3
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 8008d3e:	2354      	movs	r3, #84	@ 0x54
 8008d40:	18fb      	adds	r3, r7, r3
 8008d42:	2220      	movs	r2, #32
 8008d44:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008d46:	f7ff ffa7 	bl	8008c98 <sen5x_Power_On>
  error = sen5x_device_reset();
 8008d4a:	0025      	movs	r5, r4
 8008d4c:	193c      	adds	r4, r7, r4
 8008d4e:	f001 f811 	bl	8009d74 <sen5x_device_reset>
 8008d52:	0003      	movs	r3, r0
 8008d54:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008d56:	002c      	movs	r4, r5
 8008d58:	193b      	adds	r3, r7, r4
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00b      	beq.n	8008d7a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008d62:	193b      	adds	r3, r7, r4
 8008d64:	2200      	movs	r2, #0
 8008d66:	5e9b      	ldrsh	r3, [r3, r2]
 8008d68:	4a6d      	ldr	r2, [pc, #436]	@ (8008f20 <probe_sen5x+0x1f8>)
 8008d6a:	496e      	ldr	r1, [pc, #440]	@ (8008f24 <probe_sen5x+0x1fc>)
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f004 fe7f 	bl	800da70 <CreateLine>
      return error;
 8008d72:	193b      	adds	r3, r7, r4
 8008d74:	2200      	movs	r2, #0
 8008d76:	5e9b      	ldrsh	r3, [r3, r2]
 8008d78:	e0ce      	b.n	8008f18 <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008d7a:	2556      	movs	r5, #86	@ 0x56
 8008d7c:	197c      	adds	r4, r7, r5
 8008d7e:	2355      	movs	r3, #85	@ 0x55
 8008d80:	18fb      	adds	r3, r7, r3
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	232c      	movs	r3, #44	@ 0x2c
 8008d86:	18fb      	adds	r3, r7, r3
 8008d88:	0011      	movs	r1, r2
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f000 fede 	bl	8009b4c <sen5x_get_serial_number>
 8008d90:	0003      	movs	r3, r0
 8008d92:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008d94:	197b      	adds	r3, r7, r5
 8008d96:	2200      	movs	r2, #0
 8008d98:	5e9b      	ldrsh	r3, [r3, r2]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008d9e:	197b      	adds	r3, r7, r5
 8008da0:	2200      	movs	r2, #0
 8008da2:	5e9a      	ldrsh	r2, [r3, r2]
 8008da4:	4b60      	ldr	r3, [pc, #384]	@ (8008f28 <probe_sen5x+0x200>)
 8008da6:	0011      	movs	r1, r2
 8008da8:	0018      	movs	r0, r3
 8008daa:	f016 fb3b 	bl	801f424 <iprintf>
      return error;
 8008dae:	197b      	adds	r3, r7, r5
 8008db0:	2200      	movs	r2, #0
 8008db2:	5e9b      	ldrsh	r3, [r3, r2]
 8008db4:	e0b0      	b.n	8008f18 <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008db6:	232c      	movs	r3, #44	@ 0x2c
 8008db8:	18fa      	adds	r2, r7, r3
 8008dba:	4b5c      	ldr	r3, [pc, #368]	@ (8008f2c <probe_sen5x+0x204>)
 8008dbc:	0011      	movs	r1, r2
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f016 fb30 	bl	801f424 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008dc4:	2556      	movs	r5, #86	@ 0x56
 8008dc6:	197c      	adds	r4, r7, r5
 8008dc8:	2354      	movs	r3, #84	@ 0x54
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	230c      	movs	r3, #12
 8008dd0:	18fb      	adds	r3, r7, r3
 8008dd2:	0011      	movs	r1, r2
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f000 fe63 	bl	8009aa0 <sen5x_get_product_name>
 8008dda:	0003      	movs	r3, r0
 8008ddc:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008dde:	197b      	adds	r3, r7, r5
 8008de0:	2200      	movs	r2, #0
 8008de2:	5e9b      	ldrsh	r3, [r3, r2]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008de8:	197b      	adds	r3, r7, r5
 8008dea:	2200      	movs	r2, #0
 8008dec:	5e9a      	ldrsh	r2, [r3, r2]
 8008dee:	4b50      	ldr	r3, [pc, #320]	@ (8008f30 <probe_sen5x+0x208>)
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f016 fb16 	bl	801f424 <iprintf>
      return error;
 8008df8:	197b      	adds	r3, r7, r5
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	5e9b      	ldrsh	r3, [r3, r2]
 8008dfe:	e08b      	b.n	8008f18 <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008e00:	230c      	movs	r3, #12
 8008e02:	18fa      	adds	r2, r7, r3
 8008e04:	4b4b      	ldr	r3, [pc, #300]	@ (8008f34 <probe_sen5x+0x20c>)
 8008e06:	0011      	movs	r1, r2
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f016 fb0b 	bl	801f424 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008e0e:	2656      	movs	r6, #86	@ 0x56
 8008e10:	19bc      	adds	r4, r7, r6
 8008e12:	2308      	movs	r3, #8
 8008e14:	18fd      	adds	r5, r7, r3
 8008e16:	2309      	movs	r3, #9
 8008e18:	18fa      	adds	r2, r7, r3
 8008e1a:	230a      	movs	r3, #10
 8008e1c:	18f9      	adds	r1, r7, r3
 8008e1e:	230b      	movs	r3, #11
 8008e20:	18f8      	adds	r0, r7, r3
 8008e22:	1d7b      	adds	r3, r7, #5
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	1dbb      	adds	r3, r7, #6
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	1dfb      	adds	r3, r7, #7
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	002b      	movs	r3, r5
 8008e30:	f000 fee2 	bl	8009bf8 <sen5x_get_version>
 8008e34:	0003      	movs	r3, r0
 8008e36:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008e38:	19bb      	adds	r3, r7, r6
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	5e9b      	ldrsh	r3, [r3, r2]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008e42:	19bb      	adds	r3, r7, r6
 8008e44:	2200      	movs	r2, #0
 8008e46:	5e9a      	ldrsh	r2, [r3, r2]
 8008e48:	4b3b      	ldr	r3, [pc, #236]	@ (8008f38 <probe_sen5x+0x210>)
 8008e4a:	0011      	movs	r1, r2
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f016 fae9 	bl	801f424 <iprintf>
      return error;
 8008e52:	19bb      	adds	r3, r7, r6
 8008e54:	2200      	movs	r2, #0
 8008e56:	5e9b      	ldrsh	r3, [r3, r2]
 8008e58:	e05e      	b.n	8008f18 <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008e5a:	230b      	movs	r3, #11
 8008e5c:	18fb      	adds	r3, r7, r3
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	0019      	movs	r1, r3
 8008e62:	230a      	movs	r3, #10
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	001a      	movs	r2, r3
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	18fb      	adds	r3, r7, r3
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	001c      	movs	r4, r3
 8008e72:	1dfb      	adds	r3, r7, #7
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	4831      	ldr	r0, [pc, #196]	@ (8008f3c <probe_sen5x+0x214>)
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	0023      	movs	r3, r4
 8008e7c:	f016 fad2 	bl	801f424 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008e80:	2300      	movs	r3, #0
 8008e82:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008e84:	264e      	movs	r6, #78	@ 0x4e
 8008e86:	19bb      	adds	r3, r7, r6
 8008e88:	2200      	movs	r2, #0
 8008e8a:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008e8c:	234c      	movs	r3, #76	@ 0x4c
 8008e8e:	18fb      	adds	r3, r7, r3
 8008e90:	2200      	movs	r2, #0
 8008e92:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008e94:	492a      	ldr	r1, [pc, #168]	@ (8008f40 <probe_sen5x+0x218>)
 8008e96:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008e98:	f7f8 f882 	bl	8000fa0 <__aeabi_fmul>
 8008e9c:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008e9e:	1c18      	adds	r0, r3, #0
 8008ea0:	f7f8 fb76 	bl	8001590 <__aeabi_f2iz>
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	b218      	sxth	r0, r3
 8008ea8:	2556      	movs	r5, #86	@ 0x56
 8008eaa:	197c      	adds	r4, r7, r5
 8008eac:	234c      	movs	r3, #76	@ 0x4c
 8008eae:	18fb      	adds	r3, r7, r3
 8008eb0:	881a      	ldrh	r2, [r3, #0]
 8008eb2:	19bb      	adds	r3, r7, r6
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	5e5b      	ldrsh	r3, [r3, r1]
 8008eb8:	0019      	movs	r1, r3
 8008eba:	f000 fd8d 	bl	80099d8 <sen5x_set_temperature_offset_parameters>
 8008ebe:	0003      	movs	r3, r0
 8008ec0:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008ec2:	197b      	adds	r3, r7, r5
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008ecc:	197b      	adds	r3, r7, r5
 8008ece:	2200      	movs	r2, #0
 8008ed0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f44 <probe_sen5x+0x21c>)
 8008ed4:	4913      	ldr	r1, [pc, #76]	@ (8008f24 <probe_sen5x+0x1fc>)
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	f004 fdca 	bl	800da70 <CreateLine>
      return error;
 8008edc:	197b      	adds	r3, r7, r5
 8008ede:	2200      	movs	r2, #0
 8008ee0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ee2:	e019      	b.n	8008f18 <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008ee4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008ee6:	f7fa fabd 	bl	8003464 <__aeabi_f2d>
 8008eea:	0002      	movs	r2, r0
 8008eec:	000b      	movs	r3, r1
 8008eee:	4816      	ldr	r0, [pc, #88]	@ (8008f48 <probe_sen5x+0x220>)
 8008ef0:	4916      	ldr	r1, [pc, #88]	@ (8008f4c <probe_sen5x+0x224>)
 8008ef2:	9200      	str	r2, [sp, #0]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	0002      	movs	r2, r0
 8008ef8:	2002      	movs	r0, #2
 8008efa:	f004 fdb9 	bl	800da70 <CreateLine>
  }
  sen5x_Power_Off();
 8008efe:	f7ff feeb 	bl	8008cd8 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008f02:	f005 fa01 	bl	800e308 <HAL_GetTick>
 8008f06:	0003      	movs	r3, r0
 8008f08:	4a11      	ldr	r2, [pc, #68]	@ (8008f50 <probe_sen5x+0x228>)
 8008f0a:	189a      	adds	r2, r3, r2
 8008f0c:	4b11      	ldr	r3, [pc, #68]	@ (8008f54 <probe_sen5x+0x22c>)
 8008f0e:	601a      	str	r2, [r3, #0]
  return error;
 8008f10:	2356      	movs	r3, #86	@ 0x56
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	2200      	movs	r2, #0
 8008f16:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008f18:	0018      	movs	r0, r3
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	b017      	add	sp, #92	@ 0x5c
 8008f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f20:	080239e8 	.word	0x080239e8
 8008f24:	08023a14 	.word	0x08023a14
 8008f28:	08023a18 	.word	0x08023a18
 8008f2c:	08023a48 	.word	0x08023a48
 8008f30:	08023a5c 	.word	0x08023a5c
 8008f34:	08023a8c 	.word	0x08023a8c
 8008f38:	08023aa0 	.word	0x08023aa0
 8008f3c:	08023acc 	.word	0x08023acc
 8008f40:	43480000 	.word	0x43480000
 8008f44:	08023af0 	.word	0x08023af0
 8008f48:	08023b30 	.word	0x08023b30
 8008f4c:	08023b68 	.word	0x08023b68
 8008f50:	000061a8 	.word	0x000061a8
 8008f54:	200011c8 	.word	0x200011c8

08008f58 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008f58:	b590      	push	{r4, r7, lr}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8008f5e:	1dbb      	adds	r3, r7, #6
 8008f60:	2200      	movs	r2, #0
 8008f62:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement(); // start full measurement mode
 8008f64:	1dbc      	adds	r4, r7, #6
 8008f66:	f000 fbc3 	bl	80096f0 <sen5x_start_measurement>
 8008f6a:	0003      	movs	r3, r0
 8008f6c:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008f6e:	1dbb      	adds	r3, r7, #6
 8008f70:	2200      	movs	r2, #0
 8008f72:	5e9b      	ldrsh	r3, [r3, r2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d007      	beq.n	8008f88 <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008f78:	1dbb      	adds	r3, r7, #6
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8008f7e:	4a06      	ldr	r2, [pc, #24]	@ (8008f98 <sen5x_lightup_measurement+0x40>)
 8008f80:	4906      	ldr	r1, [pc, #24]	@ (8008f9c <sen5x_lightup_measurement+0x44>)
 8008f82:	2001      	movs	r0, #1
 8008f84:	f004 fd74 	bl	800da70 <CreateLine>
  }
  return error;
 8008f88:	1dbb      	adds	r3, r7, #6
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008f8e:	0018      	movs	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b003      	add	sp, #12
 8008f94:	bd90      	pop	{r4, r7, pc}
 8008f96:	46c0      	nop			@ (mov r8, r8)
 8008f98:	08023b6c 	.word	0x08023b6c
 8008f9c:	08023a14 	.word	0x08023a14

08008fa0 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008fa0:	b590      	push	{r4, r7, lr}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008fa6:	1dbb      	adds	r3, r7, #6
 8008fa8:	2200      	movs	r2, #0
 8008faa:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8008fac:	1dbc      	adds	r4, r7, #6
 8008fae:	f000 fbcd 	bl	800974c <sen5x_stop_measurement>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008fb6:	1dbb      	adds	r3, r7, #6
 8008fb8:	2200      	movs	r2, #0
 8008fba:	5e9b      	ldrsh	r3, [r3, r2]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8008fc0:	1dbb      	adds	r3, r7, #6
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	5e9b      	ldrsh	r3, [r3, r2]
 8008fc6:	4a06      	ldr	r2, [pc, #24]	@ (8008fe0 <sen5x_extinguish_measurement+0x40>)
 8008fc8:	4906      	ldr	r1, [pc, #24]	@ (8008fe4 <sen5x_extinguish_measurement+0x44>)
 8008fca:	2001      	movs	r0, #1
 8008fcc:	f004 fd50 	bl	800da70 <CreateLine>
  }
  return error;
 8008fd0:	1dbb      	adds	r3, r7, #6
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	b003      	add	sp, #12
 8008fdc:	bd90      	pop	{r4, r7, pc}
 8008fde:	46c0      	nop			@ (mov r8, r8)
 8008fe0:	08023b9c 	.word	0x08023b9c
 8008fe4:	08023a14 	.word	0x08023a14

08008fe8 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8008fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fea:	b08d      	sub	sp, #52	@ 0x34
 8008fec:	af04      	add	r7, sp, #16
 8008fee:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8008ff0:	261e      	movs	r6, #30
 8008ff2:	19bb      	adds	r3, r7, r6
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8008ff8:	19bc      	adds	r4, r7, r6
 8008ffa:	2316      	movs	r3, #22
 8008ffc:	18fd      	adds	r5, r7, r3
 8008ffe:	2318      	movs	r3, #24
 8009000:	18fa      	adds	r2, r7, r3
 8009002:	231a      	movs	r3, #26
 8009004:	18f9      	adds	r1, r7, r3
 8009006:	231c      	movs	r3, #28
 8009008:	18f8      	adds	r0, r7, r3
 800900a:	230e      	movs	r3, #14
 800900c:	18fb      	adds	r3, r7, r3
 800900e:	9303      	str	r3, [sp, #12]
 8009010:	2310      	movs	r3, #16
 8009012:	18fb      	adds	r3, r7, r3
 8009014:	9302      	str	r3, [sp, #8]
 8009016:	2312      	movs	r3, #18
 8009018:	18fb      	adds	r3, r7, r3
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	2314      	movs	r3, #20
 800901e:	18fb      	adds	r3, r7, r3
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	002b      	movs	r3, r5
 8009024:	f000 fc14 	bl	8009850 <sen5x_read_measured_values>
 8009028:	0003      	movs	r3, r0
 800902a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800902c:	19bb      	adds	r3, r7, r6
 800902e:	2200      	movs	r2, #0
 8009030:	5e9b      	ldrsh	r3, [r3, r2]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <sen5x_read_measurement+0x56>
    return error;
 8009036:	19bb      	adds	r3, r7, r6
 8009038:	2200      	movs	r2, #0
 800903a:	5e9b      	ldrsh	r3, [r3, r2]
 800903c:	e034      	b.n	80090a8 <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800903e:	231c      	movs	r3, #28
 8009040:	18fb      	adds	r3, r7, r3
 8009042:	881a      	ldrh	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009048:	211a      	movs	r1, #26
 800904a:	187b      	adds	r3, r7, r1
 800904c:	881a      	ldrh	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009052:	2318      	movs	r3, #24
 8009054:	18fb      	adds	r3, r7, r3
 8009056:	881a      	ldrh	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800905c:	2016      	movs	r0, #22
 800905e:	183b      	adds	r3, r7, r0
 8009060:	881a      	ldrh	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8009066:	2314      	movs	r3, #20
 8009068:	18fb      	adds	r3, r7, r3
 800906a:	2200      	movs	r2, #0
 800906c:	5e9a      	ldrsh	r2, [r3, r2]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009072:	2312      	movs	r3, #18
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	2200      	movs	r2, #0
 8009078:	5e9a      	ldrsh	r2, [r3, r2]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800907e:	2310      	movs	r3, #16
 8009080:	18fb      	adds	r3, r7, r3
 8009082:	2200      	movs	r2, #0
 8009084:	5e9a      	ldrsh	r2, [r3, r2]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800908a:	230e      	movs	r3, #14
 800908c:	18fb      	adds	r3, r7, r3
 800908e:	2200      	movs	r2, #0
 8009090:	5e9a      	ldrsh	r2, [r3, r2]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 8009096:	187b      	adds	r3, r7, r1
 8009098:	881a      	ldrh	r2, [r3, #0]
 800909a:	183b      	adds	r3, r7, r0
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	0019      	movs	r1, r3
 80090a0:	0010      	movs	r0, r2
 80090a2:	f7fa fc5d 	bl	8003960 <setPMs>
  return 0;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	0018      	movs	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b009      	add	sp, #36	@ 0x24
 80090ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090b0 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 80090b6:	1dbb      	adds	r3, r7, #6
 80090b8:	2200      	movs	r2, #0
 80090ba:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
  if (sen5x_read_measurement(&sen5x_data)) {
 80090bc:	4b77      	ldr	r3, [pc, #476]	@ (800929c <sen5x_measurement+0x1ec>)
 80090be:	0018      	movs	r0, r3
 80090c0:	f7ff ff92 	bl	8008fe8 <sen5x_read_measurement>
 80090c4:	1e03      	subs	r3, r0, #0
 80090c6:	d00b      	beq.n	80090e0 <sen5x_measurement+0x30>
    Error("Error executing sen5x_read_measured_values(): %i", error);
 80090c8:	1dbb      	adds	r3, r7, #6
 80090ca:	2200      	movs	r2, #0
 80090cc:	5e9b      	ldrsh	r3, [r3, r2]
 80090ce:	4a74      	ldr	r2, [pc, #464]	@ (80092a0 <sen5x_measurement+0x1f0>)
 80090d0:	4974      	ldr	r1, [pc, #464]	@ (80092a4 <sen5x_measurement+0x1f4>)
 80090d2:	2001      	movs	r0, #1
 80090d4:	f004 fccc 	bl	800da70 <CreateLine>
    return error;
 80090d8:	1dbb      	adds	r3, r7, #6
 80090da:	2200      	movs	r2, #0
 80090dc:	5e9b      	ldrsh	r3, [r3, r2]
 80090de:	e0d8      	b.n	8009292 <sen5x_measurement+0x1e2>
  }
  if (sen5xSamples != 1) {
 80090e0:	4b71      	ldr	r3, [pc, #452]	@ (80092a8 <sen5x_measurement+0x1f8>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d001      	beq.n	80090ec <sen5x_measurement+0x3c>
    return 0; // first sample reads zero's
 80090e8:	2300      	movs	r3, #0
 80090ea:	e0d2      	b.n	8009292 <sen5x_measurement+0x1e2>
  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80090ec:	4b6b      	ldr	r3, [pc, #428]	@ (800929c <sen5x_measurement+0x1ec>)
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	4a6e      	ldr	r2, [pc, #440]	@ (80092ac <sen5x_measurement+0x1fc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d013      	beq.n	800911e <sen5x_measurement+0x6e>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80090f6:	4b69      	ldr	r3, [pc, #420]	@ (800929c <sen5x_measurement+0x1ec>)
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	0018      	movs	r0, r3
 80090fc:	f7f8 fa68 	bl	80015d0 <__aeabi_i2f>
 8009100:	1c03      	adds	r3, r0, #0
 8009102:	496b      	ldr	r1, [pc, #428]	@ (80092b0 <sen5x_measurement+0x200>)
 8009104:	1c18      	adds	r0, r3, #0
 8009106:	f7f7 fd65 	bl	8000bd4 <__aeabi_fdiv>
 800910a:	1c03      	adds	r3, r0, #0
 800910c:	1c18      	adds	r0, r3, #0
 800910e:	f7fa f9a9 	bl	8003464 <__aeabi_f2d>
 8009112:	0002      	movs	r2, r0
 8009114:	000b      	movs	r3, r1
 8009116:	4967      	ldr	r1, [pc, #412]	@ (80092b4 <sen5x_measurement+0x204>)
 8009118:	0008      	movs	r0, r1
 800911a:	f016 f983 	bl	801f424 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800911e:	4b5f      	ldr	r3, [pc, #380]	@ (800929c <sen5x_measurement+0x1ec>)
 8009120:	885b      	ldrh	r3, [r3, #2]
 8009122:	4a62      	ldr	r2, [pc, #392]	@ (80092ac <sen5x_measurement+0x1fc>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d013      	beq.n	8009150 <sen5x_measurement+0xa0>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009128:	4b5c      	ldr	r3, [pc, #368]	@ (800929c <sen5x_measurement+0x1ec>)
 800912a:	885b      	ldrh	r3, [r3, #2]
 800912c:	0018      	movs	r0, r3
 800912e:	f7f8 fa4f 	bl	80015d0 <__aeabi_i2f>
 8009132:	1c03      	adds	r3, r0, #0
 8009134:	495e      	ldr	r1, [pc, #376]	@ (80092b0 <sen5x_measurement+0x200>)
 8009136:	1c18      	adds	r0, r3, #0
 8009138:	f7f7 fd4c 	bl	8000bd4 <__aeabi_fdiv>
 800913c:	1c03      	adds	r3, r0, #0
 800913e:	1c18      	adds	r0, r3, #0
 8009140:	f7fa f990 	bl	8003464 <__aeabi_f2d>
 8009144:	0002      	movs	r2, r0
 8009146:	000b      	movs	r3, r1
 8009148:	495b      	ldr	r1, [pc, #364]	@ (80092b8 <sen5x_measurement+0x208>)
 800914a:	0008      	movs	r0, r1
 800914c:	f016 f96a 	bl	801f424 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009150:	4b52      	ldr	r3, [pc, #328]	@ (800929c <sen5x_measurement+0x1ec>)
 8009152:	889b      	ldrh	r3, [r3, #4]
 8009154:	4a55      	ldr	r2, [pc, #340]	@ (80092ac <sen5x_measurement+0x1fc>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d013      	beq.n	8009182 <sen5x_measurement+0xd2>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800915a:	4b50      	ldr	r3, [pc, #320]	@ (800929c <sen5x_measurement+0x1ec>)
 800915c:	889b      	ldrh	r3, [r3, #4]
 800915e:	0018      	movs	r0, r3
 8009160:	f7f8 fa36 	bl	80015d0 <__aeabi_i2f>
 8009164:	1c03      	adds	r3, r0, #0
 8009166:	4952      	ldr	r1, [pc, #328]	@ (80092b0 <sen5x_measurement+0x200>)
 8009168:	1c18      	adds	r0, r3, #0
 800916a:	f7f7 fd33 	bl	8000bd4 <__aeabi_fdiv>
 800916e:	1c03      	adds	r3, r0, #0
 8009170:	1c18      	adds	r0, r3, #0
 8009172:	f7fa f977 	bl	8003464 <__aeabi_f2d>
 8009176:	0002      	movs	r2, r0
 8009178:	000b      	movs	r3, r1
 800917a:	4950      	ldr	r1, [pc, #320]	@ (80092bc <sen5x_measurement+0x20c>)
 800917c:	0008      	movs	r0, r1
 800917e:	f016 f951 	bl	801f424 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009182:	4b46      	ldr	r3, [pc, #280]	@ (800929c <sen5x_measurement+0x1ec>)
 8009184:	88db      	ldrh	r3, [r3, #6]
 8009186:	4a49      	ldr	r2, [pc, #292]	@ (80092ac <sen5x_measurement+0x1fc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d013      	beq.n	80091b4 <sen5x_measurement+0x104>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800918c:	4b43      	ldr	r3, [pc, #268]	@ (800929c <sen5x_measurement+0x1ec>)
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	0018      	movs	r0, r3
 8009192:	f7f8 fa1d 	bl	80015d0 <__aeabi_i2f>
 8009196:	1c03      	adds	r3, r0, #0
 8009198:	4945      	ldr	r1, [pc, #276]	@ (80092b0 <sen5x_measurement+0x200>)
 800919a:	1c18      	adds	r0, r3, #0
 800919c:	f7f7 fd1a 	bl	8000bd4 <__aeabi_fdiv>
 80091a0:	1c03      	adds	r3, r0, #0
 80091a2:	1c18      	adds	r0, r3, #0
 80091a4:	f7fa f95e 	bl	8003464 <__aeabi_f2d>
 80091a8:	0002      	movs	r2, r0
 80091aa:	000b      	movs	r3, r1
 80091ac:	4944      	ldr	r1, [pc, #272]	@ (80092c0 <sen5x_measurement+0x210>)
 80091ae:	0008      	movs	r0, r1
 80091b0:	f016 f938 	bl	801f424 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 80091b4:	4b39      	ldr	r3, [pc, #228]	@ (800929c <sen5x_measurement+0x1ec>)
 80091b6:	2208      	movs	r2, #8
 80091b8:	5e9b      	ldrsh	r3, [r3, r2]
 80091ba:	4a42      	ldr	r2, [pc, #264]	@ (80092c4 <sen5x_measurement+0x214>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d014      	beq.n	80091ea <sen5x_measurement+0x13a>
        printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 80091c0:	4b36      	ldr	r3, [pc, #216]	@ (800929c <sen5x_measurement+0x1ec>)
 80091c2:	2208      	movs	r2, #8
 80091c4:	5e9b      	ldrsh	r3, [r3, r2]
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7f8 fa02 	bl	80015d0 <__aeabi_i2f>
 80091cc:	1c03      	adds	r3, r0, #0
 80091ce:	493e      	ldr	r1, [pc, #248]	@ (80092c8 <sen5x_measurement+0x218>)
 80091d0:	1c18      	adds	r0, r3, #0
 80091d2:	f7f7 fcff 	bl	8000bd4 <__aeabi_fdiv>
 80091d6:	1c03      	adds	r3, r0, #0
 80091d8:	1c18      	adds	r0, r3, #0
 80091da:	f7fa f943 	bl	8003464 <__aeabi_f2d>
 80091de:	0002      	movs	r2, r0
 80091e0:	000b      	movs	r3, r1
 80091e2:	493a      	ldr	r1, [pc, #232]	@ (80092cc <sen5x_measurement+0x21c>)
 80091e4:	0008      	movs	r0, r1
 80091e6:	f016 f91d 	bl	801f424 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80091ea:	4b2c      	ldr	r3, [pc, #176]	@ (800929c <sen5x_measurement+0x1ec>)
 80091ec:	220a      	movs	r2, #10
 80091ee:	5e9b      	ldrsh	r3, [r3, r2]
 80091f0:	4a34      	ldr	r2, [pc, #208]	@ (80092c4 <sen5x_measurement+0x214>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d014      	beq.n	8009220 <sen5x_measurement+0x170>
        printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80091f6:	4b29      	ldr	r3, [pc, #164]	@ (800929c <sen5x_measurement+0x1ec>)
 80091f8:	220a      	movs	r2, #10
 80091fa:	5e9b      	ldrsh	r3, [r3, r2]
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7f8 f9e7 	bl	80015d0 <__aeabi_i2f>
 8009202:	1c03      	adds	r3, r0, #0
 8009204:	4932      	ldr	r1, [pc, #200]	@ (80092d0 <sen5x_measurement+0x220>)
 8009206:	1c18      	adds	r0, r3, #0
 8009208:	f7f7 fce4 	bl	8000bd4 <__aeabi_fdiv>
 800920c:	1c03      	adds	r3, r0, #0
 800920e:	1c18      	adds	r0, r3, #0
 8009210:	f7fa f928 	bl	8003464 <__aeabi_f2d>
 8009214:	0002      	movs	r2, r0
 8009216:	000b      	movs	r3, r1
 8009218:	492e      	ldr	r1, [pc, #184]	@ (80092d4 <sen5x_measurement+0x224>)
 800921a:	0008      	movs	r0, r1
 800921c:	f016 f902 	bl	801f424 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009220:	4b1e      	ldr	r3, [pc, #120]	@ (800929c <sen5x_measurement+0x1ec>)
 8009222:	220c      	movs	r2, #12
 8009224:	5e9b      	ldrsh	r3, [r3, r2]
 8009226:	4a27      	ldr	r2, [pc, #156]	@ (80092c4 <sen5x_measurement+0x214>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d014      	beq.n	8009256 <sen5x_measurement+0x1a6>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 800922c:	4b1b      	ldr	r3, [pc, #108]	@ (800929c <sen5x_measurement+0x1ec>)
 800922e:	220c      	movs	r2, #12
 8009230:	5e9b      	ldrsh	r3, [r3, r2]
 8009232:	0018      	movs	r0, r3
 8009234:	f7f8 f9cc 	bl	80015d0 <__aeabi_i2f>
 8009238:	1c03      	adds	r3, r0, #0
 800923a:	491d      	ldr	r1, [pc, #116]	@ (80092b0 <sen5x_measurement+0x200>)
 800923c:	1c18      	adds	r0, r3, #0
 800923e:	f7f7 fcc9 	bl	8000bd4 <__aeabi_fdiv>
 8009242:	1c03      	adds	r3, r0, #0
 8009244:	1c18      	adds	r0, r3, #0
 8009246:	f7fa f90d 	bl	8003464 <__aeabi_f2d>
 800924a:	0002      	movs	r2, r0
 800924c:	000b      	movs	r3, r1
 800924e:	4922      	ldr	r1, [pc, #136]	@ (80092d8 <sen5x_measurement+0x228>)
 8009250:	0008      	movs	r0, r1
 8009252:	f016 f8e7 	bl	801f424 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 8009256:	4b11      	ldr	r3, [pc, #68]	@ (800929c <sen5x_measurement+0x1ec>)
 8009258:	220e      	movs	r2, #14
 800925a:	5e9b      	ldrsh	r3, [r3, r2]
 800925c:	4a19      	ldr	r2, [pc, #100]	@ (80092c4 <sen5x_measurement+0x214>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d014      	beq.n	800928c <sen5x_measurement+0x1dc>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009262:	4b0e      	ldr	r3, [pc, #56]	@ (800929c <sen5x_measurement+0x1ec>)
 8009264:	220e      	movs	r2, #14
 8009266:	5e9b      	ldrsh	r3, [r3, r2]
 8009268:	0018      	movs	r0, r3
 800926a:	f7f8 f9b1 	bl	80015d0 <__aeabi_i2f>
 800926e:	1c03      	adds	r3, r0, #0
 8009270:	490f      	ldr	r1, [pc, #60]	@ (80092b0 <sen5x_measurement+0x200>)
 8009272:	1c18      	adds	r0, r3, #0
 8009274:	f7f7 fcae 	bl	8000bd4 <__aeabi_fdiv>
 8009278:	1c03      	adds	r3, r0, #0
 800927a:	1c18      	adds	r0, r3, #0
 800927c:	f7fa f8f2 	bl	8003464 <__aeabi_f2d>
 8009280:	0002      	movs	r2, r0
 8009282:	000b      	movs	r3, r1
 8009284:	4915      	ldr	r1, [pc, #84]	@ (80092dc <sen5x_measurement+0x22c>)
 8009286:	0008      	movs	r0, r1
 8009288:	f016 f8cc 	bl	801f424 <iprintf>
  }
  return error;
 800928c:	1dbb      	adds	r3, r7, #6
 800928e:	2200      	movs	r2, #0
 8009290:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	b002      	add	sp, #8
 8009298:	bd80      	pop	{r7, pc}
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	200011d0 	.word	0x200011d0
 80092a0:	08023bcc 	.word	0x08023bcc
 80092a4:	08023a14 	.word	0x08023a14
 80092a8:	200011cc 	.word	0x200011cc
 80092ac:	0000ffff 	.word	0x0000ffff
 80092b0:	41200000 	.word	0x41200000
 80092b4:	08023c00 	.word	0x08023c00
 80092b8:	08023c2c 	.word	0x08023c2c
 80092bc:	08023c58 	.word	0x08023c58
 80092c0:	08023c84 	.word	0x08023c84
 80092c4:	00007fff 	.word	0x00007fff
 80092c8:	42c80000 	.word	0x42c80000
 80092cc:	08023cb0 	.word	0x08023cb0
 80092d0:	43480000 	.word	0x43480000
 80092d4:	08023cd0 	.word	0x08023cd0
 80092d8:	08023cf0 	.word	0x08023cf0
 80092dc:	08023d08 	.word	0x08023d08

080092e0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80092e0:	b590      	push	{r4, r7, lr}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	6039      	str	r1, [r7, #0]
 80092e8:	0011      	movs	r1, r2
 80092ea:	1dfb      	adds	r3, r7, #7
 80092ec:	1c02      	adds	r2, r0, #0
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	1d3b      	adds	r3, r7, #4
 80092f2:	1c0a      	adds	r2, r1, #0
 80092f4:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 80092f6:	1dfb      	adds	r3, r7, #7
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	18db      	adds	r3, r3, r3
 80092fe:	b299      	uxth	r1, r3
 8009300:	1d3b      	adds	r3, r7, #4
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	4805      	ldr	r0, [pc, #20]	@ (800931c <sensirion_i2c_hal_read+0x3c>)
 8009308:	2464      	movs	r4, #100	@ 0x64
 800930a:	9400      	str	r4, [sp, #0]
 800930c:	f006 fc4e 	bl	800fbac <HAL_I2C_Master_Receive>
 8009310:	0003      	movs	r3, r0
 8009312:	b25b      	sxtb	r3, r3
}
 8009314:	0018      	movs	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	b003      	add	sp, #12
 800931a:	bd90      	pop	{r4, r7, pc}
 800931c:	20000dac 	.word	0x20000dac

08009320 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b085      	sub	sp, #20
 8009324:	af02      	add	r7, sp, #8
 8009326:	6039      	str	r1, [r7, #0]
 8009328:	0011      	movs	r1, r2
 800932a:	1dfb      	adds	r3, r7, #7
 800932c:	1c02      	adds	r2, r0, #0
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	1d3b      	adds	r3, r7, #4
 8009332:	1c0a      	adds	r2, r1, #0
 8009334:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009336:	1dfb      	adds	r3, r7, #7
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	b29b      	uxth	r3, r3
 800933c:	18db      	adds	r3, r3, r3
 800933e:	b299      	uxth	r1, r3
 8009340:	1d3b      	adds	r3, r7, #4
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	4805      	ldr	r0, [pc, #20]	@ (800935c <sensirion_i2c_hal_write+0x3c>)
 8009348:	2464      	movs	r4, #100	@ 0x64
 800934a:	9400      	str	r4, [sp, #0]
 800934c:	f006 fb26 	bl	800f99c <HAL_I2C_Master_Transmit>
 8009350:	0003      	movs	r3, r0
 8009352:	b25b      	sxtb	r3, r3
}
 8009354:	0018      	movs	r0, r3
 8009356:	46bd      	mov	sp, r7
 8009358:	b003      	add	sp, #12
 800935a:	bd90      	pop	{r4, r7, pc}
 800935c:	20000dac 	.word	0x20000dac

08009360 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	22fa      	movs	r2, #250	@ 0xfa
 800936c:	0091      	lsls	r1, r2, #2
 800936e:	0018      	movs	r0, r3
 8009370:	f7f6 ff18 	bl	80001a4 <__udivsi3>
 8009374:	0003      	movs	r3, r0
 8009376:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	22fa      	movs	r2, #250	@ 0xfa
 800937c:	0091      	lsls	r1, r2, #2
 800937e:	0018      	movs	r0, r3
 8009380:	f7f6 ff96 	bl	80002b0 <__aeabi_uidivmod>
 8009384:	1e0b      	subs	r3, r1, #0
 8009386:	d002      	beq.n	800938e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3301      	adds	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	0018      	movs	r0, r3
 8009392:	f004 ffc3 	bl	800e31c <HAL_Delay>
}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	46bd      	mov	sp, r7
 800939a:	b004      	add	sp, #16
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 80093aa:	1d3b      	adds	r3, r7, #4
 80093ac:	0018      	movs	r0, r3
 80093ae:	f000 fc8f 	bl	8009cd0 <sen5x_read_device_status>
 80093b2:	1e03      	subs	r3, r0, #0
 80093b4:	d007      	beq.n	80093c6 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 80093b6:	4a28      	ldr	r2, [pc, #160]	@ (8009458 <sen5x_check_for_errors+0xb8>)
 80093b8:	4b28      	ldr	r3, [pc, #160]	@ (800945c <sen5x_check_for_errors+0xbc>)
 80093ba:	0019      	movs	r1, r3
 80093bc:	2001      	movs	r0, #1
 80093be:	f004 fb57 	bl	800da70 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e043      	b.n	800944e <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	e03e      	b.n	800944e <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	2380      	movs	r3, #128	@ 0x80
 80093d4:	039b      	lsls	r3, r3, #14
 80093d6:	4013      	ands	r3, r2
 80093d8:	d005      	beq.n	80093e6 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 80093da:	4a21      	ldr	r2, [pc, #132]	@ (8009460 <sen5x_check_for_errors+0xc0>)
 80093dc:	4b21      	ldr	r3, [pc, #132]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 80093de:	0019      	movs	r1, r3
 80093e0:	2003      	movs	r0, #3
 80093e2:	f004 fb45 	bl	800da70 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	2380      	movs	r3, #128	@ 0x80
 80093ea:	031b      	lsls	r3, r3, #12
 80093ec:	4013      	ands	r3, r2
 80093ee:	d005      	beq.n	80093fc <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 80093f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009468 <sen5x_check_for_errors+0xc8>)
 80093f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 80093f4:	0019      	movs	r1, r3
 80093f6:	2003      	movs	r0, #3
 80093f8:	f004 fb3a 	bl	800da70 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2280      	movs	r2, #128	@ 0x80
 8009400:	4013      	ands	r3, r2
 8009402:	d005      	beq.n	8009410 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009404:	4a19      	ldr	r2, [pc, #100]	@ (800946c <sen5x_check_for_errors+0xcc>)
 8009406:	4b17      	ldr	r3, [pc, #92]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 8009408:	0019      	movs	r1, r3
 800940a:	2003      	movs	r0, #3
 800940c:	f004 fb30 	bl	800da70 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2240      	movs	r2, #64	@ 0x40
 8009414:	4013      	ands	r3, r2
 8009416:	d005      	beq.n	8009424 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009418:	4a15      	ldr	r2, [pc, #84]	@ (8009470 <sen5x_check_for_errors+0xd0>)
 800941a:	4b12      	ldr	r3, [pc, #72]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 800941c:	0019      	movs	r1, r3
 800941e:	2003      	movs	r0, #3
 8009420:	f004 fb26 	bl	800da70 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	4013      	ands	r3, r2
 800942a:	d005      	beq.n	8009438 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800942c:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <sen5x_check_for_errors+0xd4>)
 800942e:	4b0d      	ldr	r3, [pc, #52]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 8009430:	0019      	movs	r1, r3
 8009432:	2003      	movs	r0, #3
 8009434:	f004 fb1c 	bl	800da70 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2210      	movs	r2, #16
 800943c:	4013      	ands	r3, r2
 800943e:	d005      	beq.n	800944c <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009440:	4a0d      	ldr	r2, [pc, #52]	@ (8009478 <sen5x_check_for_errors+0xd8>)
 8009442:	4b08      	ldr	r3, [pc, #32]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 8009444:	0019      	movs	r1, r3
 8009446:	2003      	movs	r0, #3
 8009448:	f004 fb12 	bl	800da70 <CreateLine>
  }
  return 1;
 800944c:	2301      	movs	r3, #1
}
 800944e:	0018      	movs	r0, r3
 8009450:	46bd      	mov	sp, r7
 8009452:	b002      	add	sp, #8
 8009454:	bd80      	pop	{r7, pc}
 8009456:	46c0      	nop			@ (mov r8, r8)
 8009458:	08023d20 	.word	0x08023d20
 800945c:	08023a14 	.word	0x08023a14
 8009460:	08023d4c 	.word	0x08023d4c
 8009464:	08023948 	.word	0x08023948
 8009468:	08023d6c 	.word	0x08023d6c
 800946c:	08023d88 	.word	0x08023d88
 8009470:	08023dac 	.word	0x08023dac
 8009474:	08023dcc 	.word	0x08023dcc
 8009478:	08023de0 	.word	0x08023de0

0800947c <set_light_on_state>:

void set_light_on_state(void) {
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009480:	4b15      	ldr	r3, [pc, #84]	@ (80094d8 <set_light_on_state+0x5c>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2201      	movs	r2, #1
 8009486:	4053      	eors	r3, r2
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d008      	beq.n	80094a0 <set_light_on_state+0x24>
    sen5x_Power_On();
 800948e:	f7ff fc03 	bl	8008c98 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009492:	4a12      	ldr	r2, [pc, #72]	@ (80094dc <set_light_on_state+0x60>)
 8009494:	4b12      	ldr	r3, [pc, #72]	@ (80094e0 <set_light_on_state+0x64>)
 8009496:	0019      	movs	r1, r3
 8009498:	2003      	movs	r0, #3
 800949a:	f004 fae9 	bl	800da70 <CreateLine>
 800949e:	e00a      	b.n	80094b6 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 80094a0:	f004 ff32 	bl	800e308 <HAL_GetTick>
 80094a4:	0002      	movs	r2, r0
 80094a6:	4b0f      	ldr	r3, [pc, #60]	@ (80094e4 <set_light_on_state+0x68>)
 80094a8:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 80094aa:	4a0f      	ldr	r2, [pc, #60]	@ (80094e8 <set_light_on_state+0x6c>)
 80094ac:	4b0c      	ldr	r3, [pc, #48]	@ (80094e0 <set_light_on_state+0x64>)
 80094ae:	0019      	movs	r1, r3
 80094b0:	2003      	movs	r0, #3
 80094b2:	f004 fadd 	bl	800da70 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start full measurement mode
 80094b6:	f7ff fd4f 	bl	8008f58 <sen5x_lightup_measurement>
 80094ba:	1e03      	subs	r3, r0, #0
 80094bc:	d005      	beq.n	80094ca <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 80094be:	4a0b      	ldr	r2, [pc, #44]	@ (80094ec <set_light_on_state+0x70>)
 80094c0:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <set_light_on_state+0x74>)
 80094c2:	0019      	movs	r1, r3
 80094c4:	2001      	movs	r0, #1
 80094c6:	f004 fad3 	bl	800da70 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 80094ca:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <set_light_on_state+0x78>)
 80094cc:	2203      	movs	r2, #3
 80094ce:	701a      	strb	r2, [r3, #0]
}
 80094d0:	46c0      	nop			@ (mov r8, r8)
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	46c0      	nop			@ (mov r8, r8)
 80094d8:	200011c5 	.word	0x200011c5
 80094dc:	08023e1c 	.word	0x08023e1c
 80094e0:	08023948 	.word	0x08023948
 80094e4:	200011c8 	.word	0x200011c8
 80094e8:	08023e48 	.word	0x08023e48
 80094ec:	08023e60 	.word	0x08023e60
 80094f0:	08023a14 	.word	0x08023a14
 80094f4:	20000081 	.word	0x20000081

080094f8 <sen5x_statemachine>:

void sen5x_statemachine() {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
  bool data_ready = false;
 80094fe:	1dfb      	adds	r3, r7, #7
 8009500:	2200      	movs	r2, #0
 8009502:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009504:	4b68      	ldr	r3, [pc, #416]	@ (80096a8 <sen5x_statemachine+0x1b0>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	0018      	movs	r0, r3
 800950a:	f004 fa5b 	bl	800d9c4 <TimestampIsReached>
 800950e:	1e03      	subs	r3, r0, #0
 8009510:	d100      	bne.n	8009514 <sen5x_statemachine+0x1c>
 8009512:	e0c4      	b.n	800969e <sen5x_statemachine+0x1a6>
    switch (PMsamplesState) {
 8009514:	4b65      	ldr	r3, [pc, #404]	@ (80096ac <sen5x_statemachine+0x1b4>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b05      	cmp	r3, #5
 800951a:	d900      	bls.n	800951e <sen5x_statemachine+0x26>
 800951c:	e0bf      	b.n	800969e <sen5x_statemachine+0x1a6>
 800951e:	009a      	lsls	r2, r3, #2
 8009520:	4b63      	ldr	r3, [pc, #396]	@ (80096b0 <sen5x_statemachine+0x1b8>)
 8009522:	18d3      	adds	r3, r2, r3
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009528:	4a62      	ldr	r2, [pc, #392]	@ (80096b4 <sen5x_statemachine+0x1bc>)
 800952a:	4b63      	ldr	r3, [pc, #396]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 800952c:	0019      	movs	r1, r3
 800952e:	2001      	movs	r0, #1
 8009530:	f004 fa9e 	bl	800da70 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009534:	f004 fee8 	bl	800e308 <HAL_GetTick>
 8009538:	0003      	movs	r3, r0
 800953a:	4a60      	ldr	r2, [pc, #384]	@ (80096bc <sen5x_statemachine+0x1c4>)
 800953c:	189a      	adds	r2, r3, r2
 800953e:	4b5a      	ldr	r3, [pc, #360]	@ (80096a8 <sen5x_statemachine+0x1b0>)
 8009540:	601a      	str	r2, [r3, #0]
      break;
 8009542:	e0ac      	b.n	800969e <sen5x_statemachine+0x1a6>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009544:	f004 fee0 	bl	800e308 <HAL_GetTick>
 8009548:	0003      	movs	r3, r0
 800954a:	4a5d      	ldr	r2, [pc, #372]	@ (80096c0 <sen5x_statemachine+0x1c8>)
 800954c:	189a      	adds	r2, r3, r2
 800954e:	4b56      	ldr	r3, [pc, #344]	@ (80096a8 <sen5x_statemachine+0x1b0>)
 8009550:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009552:	f7ff ff93 	bl	800947c <set_light_on_state>
      break;
 8009556:	e0a2      	b.n	800969e <sen5x_statemachine+0x1a6>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 8009558:	4b54      	ldr	r3, [pc, #336]	@ (80096ac <sen5x_statemachine+0x1b4>)
 800955a:	2202      	movs	r2, #2
 800955c:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800955e:	4b59      	ldr	r3, [pc, #356]	@ (80096c4 <sen5x_statemachine+0x1cc>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b05      	cmp	r3, #5
 8009564:	d905      	bls.n	8009572 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009566:	4b51      	ldr	r3, [pc, #324]	@ (80096ac <sen5x_statemachine+0x1b4>)
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800956c:	f7ff fbb4 	bl	8008cd8 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009570:	e092      	b.n	8009698 <sen5x_statemachine+0x1a0>
        if (sen5x_check_for_errors()) {
 8009572:	f7ff ff15 	bl	80093a0 <sen5x_check_for_errors>
 8009576:	1e03      	subs	r3, r0, #0
 8009578:	d100      	bne.n	800957c <sen5x_statemachine+0x84>
 800957a:	e08d      	b.n	8009698 <sen5x_statemachine+0x1a0>
          if (sen5x_device_reset()) {
 800957c:	f000 fbfa 	bl	8009d74 <sen5x_device_reset>
 8009580:	1e03      	subs	r3, r0, #0
 8009582:	d006      	beq.n	8009592 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009584:	4a50      	ldr	r2, [pc, #320]	@ (80096c8 <sen5x_statemachine+0x1d0>)
 8009586:	4b4c      	ldr	r3, [pc, #304]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 8009588:	0019      	movs	r1, r3
 800958a:	2001      	movs	r0, #1
 800958c:	f004 fa70 	bl	800da70 <CreateLine>
 8009590:	e005      	b.n	800959e <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009592:	4a4e      	ldr	r2, [pc, #312]	@ (80096cc <sen5x_statemachine+0x1d4>)
 8009594:	4b4e      	ldr	r3, [pc, #312]	@ (80096d0 <sen5x_statemachine+0x1d8>)
 8009596:	0019      	movs	r1, r3
 8009598:	2002      	movs	r0, #2
 800959a:	f004 fa69 	bl	800da70 <CreateLine>
          sen5xErrors++;
 800959e:	4b49      	ldr	r3, [pc, #292]	@ (80096c4 <sen5x_statemachine+0x1cc>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	3301      	adds	r3, #1
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	4b47      	ldr	r3, [pc, #284]	@ (80096c4 <sen5x_statemachine+0x1cc>)
 80095a8:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 80095aa:	f004 fead 	bl	800e308 <HAL_GetTick>
 80095ae:	0003      	movs	r3, r0
 80095b0:	3396      	adds	r3, #150	@ 0x96
 80095b2:	001a      	movs	r2, r3
 80095b4:	4b3c      	ldr	r3, [pc, #240]	@ (80096a8 <sen5x_statemachine+0x1b0>)
 80095b6:	601a      	str	r2, [r3, #0]
      break;
 80095b8:	e06e      	b.n	8009698 <sen5x_statemachine+0x1a0>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 80095ba:	1dfb      	adds	r3, r7, #7
 80095bc:	0018      	movs	r0, r3
 80095be:	f000 f8f5 	bl	80097ac <sen5x_read_data_ready>
      if (data_ready) {
 80095c2:	1dfb      	adds	r3, r7, #7
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d068      	beq.n	800969c <sen5x_statemachine+0x1a4>
        if (sen5x_measurement()) {
 80095ca:	f7ff fd71 	bl	80090b0 <sen5x_measurement>
 80095ce:	1e03      	subs	r3, r0, #0
 80095d0:	d005      	beq.n	80095de <sen5x_statemachine+0xe6>
          Error("Error executing sen5x_measurement()");
 80095d2:	4a40      	ldr	r2, [pc, #256]	@ (80096d4 <sen5x_statemachine+0x1dc>)
 80095d4:	4b38      	ldr	r3, [pc, #224]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 80095d6:	0019      	movs	r1, r3
 80095d8:	2001      	movs	r0, #1
 80095da:	f004 fa49 	bl	800da70 <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 80095de:	4b3e      	ldr	r3, [pc, #248]	@ (80096d8 <sen5x_statemachine+0x1e0>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d002      	beq.n	80095ec <sen5x_statemachine+0xf4>
            PMsamplesState = CLEAN_FAN;
 80095e6:	4b31      	ldr	r3, [pc, #196]	@ (80096ac <sen5x_statemachine+0x1b4>)
 80095e8:	2204      	movs	r2, #4
 80095ea:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 80095ec:	4b3a      	ldr	r3, [pc, #232]	@ (80096d8 <sen5x_statemachine+0x1e0>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	3301      	adds	r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	4b38      	ldr	r3, [pc, #224]	@ (80096d8 <sen5x_statemachine+0x1e0>)
 80095f6:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 32) { // about two times a minute
 80095f8:	4b37      	ldr	r3, [pc, #220]	@ (80096d8 <sen5x_statemachine+0x1e0>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	d14d      	bne.n	800969c <sen5x_statemachine+0x1a4>
          sen5xSamples = 1;  // enable display on serial
 8009600:	4b35      	ldr	r3, [pc, #212]	@ (80096d8 <sen5x_statemachine+0x1e0>)
 8009602:	2201      	movs	r2, #1
 8009604:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8009606:	e049      	b.n	800969c <sen5x_statemachine+0x1a4>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009608:	f7fd f90e 	bl	8006828 <RTC_GetWeekday>
 800960c:	0003      	movs	r3, r0
 800960e:	2b01      	cmp	r3, #1
 8009610:	d118      	bne.n	8009644 <sen5x_statemachine+0x14c>
 8009612:	4b32      	ldr	r3, [pc, #200]	@ (80096dc <sen5x_statemachine+0x1e4>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2201      	movs	r2, #1
 8009618:	4053      	eors	r3, r2
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b00      	cmp	r3, #0
 800961e:	d011      	beq.n	8009644 <sen5x_statemachine+0x14c>
        sen5x_start_fan_cleaning();
 8009620:	f000 f9aa 	bl	8009978 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009624:	4a2e      	ldr	r2, [pc, #184]	@ (80096e0 <sen5x_statemachine+0x1e8>)
 8009626:	4b2a      	ldr	r3, [pc, #168]	@ (80096d0 <sen5x_statemachine+0x1d8>)
 8009628:	0019      	movs	r1, r3
 800962a:	2002      	movs	r0, #2
 800962c:	f004 fa20 	bl	800da70 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;
 8009630:	f004 fe6a 	bl	800e308 <HAL_GetTick>
 8009634:	0003      	movs	r3, r0
 8009636:	4a2b      	ldr	r2, [pc, #172]	@ (80096e4 <sen5x_statemachine+0x1ec>)
 8009638:	189a      	adds	r2, r3, r2
 800963a:	4b1b      	ldr	r3, [pc, #108]	@ (80096a8 <sen5x_statemachine+0x1b0>)
 800963c:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800963e:	4b27      	ldr	r3, [pc, #156]	@ (80096dc <sen5x_statemachine+0x1e4>)
 8009640:	2201      	movs	r2, #1
 8009642:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009644:	4b19      	ldr	r3, [pc, #100]	@ (80096ac <sen5x_statemachine+0x1b4>)
 8009646:	2205      	movs	r2, #5
 8009648:	701a      	strb	r2, [r3, #0]
      break;
 800964a:	e028      	b.n	800969e <sen5x_statemachine+0x1a6>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 800964c:	4b26      	ldr	r3, [pc, #152]	@ (80096e8 <sen5x_statemachine+0x1f0>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2201      	movs	r2, #1
 8009652:	4053      	eors	r3, r2
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d012      	beq.n	8009680 <sen5x_statemachine+0x188>
        if (sen5x_extinguish_measurement()) {
 800965a:	f7ff fca1 	bl	8008fa0 <sen5x_extinguish_measurement>
 800965e:	1e03      	subs	r3, r0, #0
 8009660:	d005      	beq.n	800966e <sen5x_statemachine+0x176>
          Error("Error executing sen5x_extinguish_measurement()");
 8009662:	4a22      	ldr	r2, [pc, #136]	@ (80096ec <sen5x_statemachine+0x1f4>)
 8009664:	4b14      	ldr	r3, [pc, #80]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 8009666:	0019      	movs	r1, r3
 8009668:	2001      	movs	r0, #1
 800966a:	f004 fa01 	bl	800da70 <CreateLine>
        }
        sen5xSamples = 0;
 800966e:	4b1a      	ldr	r3, [pc, #104]	@ (80096d8 <sen5x_statemachine+0x1e0>)
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009674:	f7ff fb30 	bl	8008cd8 <sen5x_Power_Off>
        PMsamplesState = LIGHT_OUT;
 8009678:	4b0c      	ldr	r3, [pc, #48]	@ (80096ac <sen5x_statemachine+0x1b4>)
 800967a:	2201      	movs	r2, #1
 800967c:	701a      	strb	r2, [r3, #0]
 800967e:	e002      	b.n	8009686 <sen5x_statemachine+0x18e>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009680:	4b0a      	ldr	r3, [pc, #40]	@ (80096ac <sen5x_statemachine+0x1b4>)
 8009682:	2203      	movs	r2, #3
 8009684:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000; //some more less then an hour
 8009686:	f004 fe3f 	bl	800e308 <HAL_GetTick>
 800968a:	0003      	movs	r3, r0
 800968c:	22fa      	movs	r2, #250	@ 0xfa
 800968e:	0092      	lsls	r2, r2, #2
 8009690:	189a      	adds	r2, r3, r2
 8009692:	4b05      	ldr	r3, [pc, #20]	@ (80096a8 <sen5x_statemachine+0x1b0>)
 8009694:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009696:	e002      	b.n	800969e <sen5x_statemachine+0x1a6>
      break;
 8009698:	46c0      	nop			@ (mov r8, r8)
 800969a:	e000      	b.n	800969e <sen5x_statemachine+0x1a6>
      break;
 800969c:	46c0      	nop			@ (mov r8, r8)
}
 800969e:	46c0      	nop			@ (mov r8, r8)
 80096a0:	46bd      	mov	sp, r7
 80096a2:	b002      	add	sp, #8
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	46c0      	nop			@ (mov r8, r8)
 80096a8:	200011c8 	.word	0x200011c8
 80096ac:	20000081 	.word	0x20000081
 80096b0:	0802478c 	.word	0x0802478c
 80096b4:	08023e8c 	.word	0x08023e8c
 80096b8:	08023a14 	.word	0x08023a14
 80096bc:	002fefd8 	.word	0x002fefd8
 80096c0:	00005910 	.word	0x00005910
 80096c4:	200011cd 	.word	0x200011cd
 80096c8:	08023ebc 	.word	0x08023ebc
 80096cc:	08023ed4 	.word	0x08023ed4
 80096d0:	08023b68 	.word	0x08023b68
 80096d4:	08023eec 	.word	0x08023eec
 80096d8:	200011cc 	.word	0x200011cc
 80096dc:	200011c4 	.word	0x200011c4
 80096e0:	08023f10 	.word	0x08023f10
 80096e4:	00002710 	.word	0x00002710
 80096e8:	2000214d 	.word	0x2000214d
 80096ec:	08023f28 	.word	0x08023f28

080096f0 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80096f6:	1dbb      	adds	r3, r7, #6
 80096f8:	2200      	movs	r2, #0
 80096fa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 80096fc:	1dbc      	adds	r4, r7, #6
 80096fe:	1dbb      	adds	r3, r7, #6
 8009700:	8819      	ldrh	r1, [r3, #0]
 8009702:	003b      	movs	r3, r7
 8009704:	2221      	movs	r2, #33	@ 0x21
 8009706:	0018      	movs	r0, r3
 8009708:	f001 fb26 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 800970c:	0003      	movs	r3, r0
 800970e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009710:	1d3c      	adds	r4, r7, #4
 8009712:	1dbb      	adds	r3, r7, #6
 8009714:	881a      	ldrh	r2, [r3, #0]
 8009716:	003b      	movs	r3, r7
 8009718:	0019      	movs	r1, r3
 800971a:	2069      	movs	r0, #105	@ 0x69
 800971c:	f001 fba0 	bl	800ae60 <sensirion_i2c_write_data>
 8009720:	0003      	movs	r3, r0
 8009722:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009724:	1d3b      	adds	r3, r7, #4
 8009726:	2200      	movs	r2, #0
 8009728:	5e9b      	ldrsh	r3, [r3, r2]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d003      	beq.n	8009736 <sen5x_start_measurement+0x46>
        return error;
 800972e:	1d3b      	adds	r3, r7, #4
 8009730:	2200      	movs	r2, #0
 8009732:	5e9b      	ldrsh	r3, [r3, r2]
 8009734:	e004      	b.n	8009740 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009736:	4b04      	ldr	r3, [pc, #16]	@ (8009748 <sen5x_start_measurement+0x58>)
 8009738:	0018      	movs	r0, r3
 800973a:	f7ff fe11 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800973e:	2300      	movs	r3, #0
}
 8009740:	0018      	movs	r0, r3
 8009742:	46bd      	mov	sp, r7
 8009744:	b003      	add	sp, #12
 8009746:	bd90      	pop	{r4, r7, pc}
 8009748:	0000c350 	.word	0x0000c350

0800974c <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 800974c:	b590      	push	{r4, r7, lr}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009752:	1dbb      	adds	r3, r7, #6
 8009754:	2200      	movs	r2, #0
 8009756:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009758:	1dbc      	adds	r4, r7, #6
 800975a:	2382      	movs	r3, #130	@ 0x82
 800975c:	005a      	lsls	r2, r3, #1
 800975e:	1dbb      	adds	r3, r7, #6
 8009760:	8819      	ldrh	r1, [r3, #0]
 8009762:	003b      	movs	r3, r7
 8009764:	0018      	movs	r0, r3
 8009766:	f001 faf7 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 800976a:	0003      	movs	r3, r0
 800976c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800976e:	1d3c      	adds	r4, r7, #4
 8009770:	1dbb      	adds	r3, r7, #6
 8009772:	881a      	ldrh	r2, [r3, #0]
 8009774:	003b      	movs	r3, r7
 8009776:	0019      	movs	r1, r3
 8009778:	2069      	movs	r0, #105	@ 0x69
 800977a:	f001 fb71 	bl	800ae60 <sensirion_i2c_write_data>
 800977e:	0003      	movs	r3, r0
 8009780:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009782:	1d3b      	adds	r3, r7, #4
 8009784:	2200      	movs	r2, #0
 8009786:	5e9b      	ldrsh	r3, [r3, r2]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <sen5x_stop_measurement+0x48>
        return error;
 800978c:	1d3b      	adds	r3, r7, #4
 800978e:	2200      	movs	r2, #0
 8009790:	5e9b      	ldrsh	r3, [r3, r2]
 8009792:	e004      	b.n	800979e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009794:	4b04      	ldr	r3, [pc, #16]	@ (80097a8 <sen5x_stop_measurement+0x5c>)
 8009796:	0018      	movs	r0, r3
 8009798:	f7ff fde2 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800979c:	2300      	movs	r3, #0
}
 800979e:	0018      	movs	r0, r3
 80097a0:	46bd      	mov	sp, r7
 80097a2:	b003      	add	sp, #12
 80097a4:	bd90      	pop	{r4, r7, pc}
 80097a6:	46c0      	nop			@ (mov r8, r8)
 80097a8:	00030d40 	.word	0x00030d40

080097ac <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 80097ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 80097b4:	250e      	movs	r5, #14
 80097b6:	197b      	adds	r3, r7, r5
 80097b8:	2200      	movs	r2, #0
 80097ba:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 80097bc:	197c      	adds	r4, r7, r5
 80097be:	4a22      	ldr	r2, [pc, #136]	@ (8009848 <sen5x_read_data_ready+0x9c>)
 80097c0:	197b      	adds	r3, r7, r5
 80097c2:	8819      	ldrh	r1, [r3, #0]
 80097c4:	2308      	movs	r3, #8
 80097c6:	18fb      	adds	r3, r7, r3
 80097c8:	0018      	movs	r0, r3
 80097ca:	f001 fac5 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 80097ce:	0003      	movs	r3, r0
 80097d0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80097d2:	260c      	movs	r6, #12
 80097d4:	19bc      	adds	r4, r7, r6
 80097d6:	197b      	adds	r3, r7, r5
 80097d8:	881a      	ldrh	r2, [r3, #0]
 80097da:	2308      	movs	r3, #8
 80097dc:	18fb      	adds	r3, r7, r3
 80097de:	0019      	movs	r1, r3
 80097e0:	2069      	movs	r0, #105	@ 0x69
 80097e2:	f001 fb3d 	bl	800ae60 <sensirion_i2c_write_data>
 80097e6:	0003      	movs	r3, r0
 80097e8:	8023      	strh	r3, [r4, #0]
    if (error) {
 80097ea:	19bb      	adds	r3, r7, r6
 80097ec:	2200      	movs	r2, #0
 80097ee:	5e9b      	ldrsh	r3, [r3, r2]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <sen5x_read_data_ready+0x50>
        return error;
 80097f4:	19bb      	adds	r3, r7, r6
 80097f6:	2200      	movs	r2, #0
 80097f8:	5e9b      	ldrsh	r3, [r3, r2]
 80097fa:	e020      	b.n	800983e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80097fc:	4b13      	ldr	r3, [pc, #76]	@ (800984c <sen5x_read_data_ready+0xa0>)
 80097fe:	0018      	movs	r0, r3
 8009800:	f7ff fdae 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009804:	250c      	movs	r5, #12
 8009806:	197c      	adds	r4, r7, r5
 8009808:	2308      	movs	r3, #8
 800980a:	18fb      	adds	r3, r7, r3
 800980c:	2202      	movs	r2, #2
 800980e:	0019      	movs	r1, r3
 8009810:	2069      	movs	r0, #105	@ 0x69
 8009812:	f001 fb3d 	bl	800ae90 <sensirion_i2c_read_data_inplace>
 8009816:	0003      	movs	r3, r0
 8009818:	8023      	strh	r3, [r4, #0]
    if (error) {
 800981a:	197b      	adds	r3, r7, r5
 800981c:	2200      	movs	r2, #0
 800981e:	5e9b      	ldrsh	r3, [r3, r2]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <sen5x_read_data_ready+0x80>
        return error;
 8009824:	197b      	adds	r3, r7, r5
 8009826:	2200      	movs	r2, #0
 8009828:	5e9b      	ldrsh	r3, [r3, r2]
 800982a:	e008      	b.n	800983e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800982c:	2308      	movs	r3, #8
 800982e:	18fb      	adds	r3, r7, r3
 8009830:	785b      	ldrb	r3, [r3, #1]
 8009832:	1e5a      	subs	r2, r3, #1
 8009834:	4193      	sbcs	r3, r2
 8009836:	b2da      	uxtb	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800983c:	2300      	movs	r3, #0
}
 800983e:	0018      	movs	r0, r3
 8009840:	46bd      	mov	sp, r7
 8009842:	b005      	add	sp, #20
 8009844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009846:	46c0      	nop			@ (mov r8, r8)
 8009848:	00000202 	.word	0x00000202
 800984c:	00004e20 	.word	0x00004e20

08009850 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009852:	b08d      	sub	sp, #52	@ 0x34
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800985e:	252e      	movs	r5, #46	@ 0x2e
 8009860:	197b      	adds	r3, r7, r5
 8009862:	2200      	movs	r2, #0
 8009864:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009866:	197c      	adds	r4, r7, r5
 8009868:	23f1      	movs	r3, #241	@ 0xf1
 800986a:	009a      	lsls	r2, r3, #2
 800986c:	197b      	adds	r3, r7, r5
 800986e:	8819      	ldrh	r1, [r3, #0]
 8009870:	2314      	movs	r3, #20
 8009872:	18fb      	adds	r3, r7, r3
 8009874:	0018      	movs	r0, r3
 8009876:	f001 fa6f 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 800987a:	0003      	movs	r3, r0
 800987c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800987e:	262c      	movs	r6, #44	@ 0x2c
 8009880:	19bc      	adds	r4, r7, r6
 8009882:	197b      	adds	r3, r7, r5
 8009884:	881a      	ldrh	r2, [r3, #0]
 8009886:	2314      	movs	r3, #20
 8009888:	18fb      	adds	r3, r7, r3
 800988a:	0019      	movs	r1, r3
 800988c:	2069      	movs	r0, #105	@ 0x69
 800988e:	f001 fae7 	bl	800ae60 <sensirion_i2c_write_data>
 8009892:	0003      	movs	r3, r0
 8009894:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009896:	19bb      	adds	r3, r7, r6
 8009898:	2200      	movs	r2, #0
 800989a:	5e9b      	ldrsh	r3, [r3, r2]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <sen5x_read_measured_values+0x58>
        return error;
 80098a0:	19bb      	adds	r3, r7, r6
 80098a2:	2200      	movs	r2, #0
 80098a4:	5e9b      	ldrsh	r3, [r3, r2]
 80098a6:	e060      	b.n	800996a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80098a8:	4b32      	ldr	r3, [pc, #200]	@ (8009974 <sen5x_read_measured_values+0x124>)
 80098aa:	0018      	movs	r0, r3
 80098ac:	f7ff fd58 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 80098b0:	252c      	movs	r5, #44	@ 0x2c
 80098b2:	197c      	adds	r4, r7, r5
 80098b4:	2314      	movs	r3, #20
 80098b6:	18fb      	adds	r3, r7, r3
 80098b8:	2210      	movs	r2, #16
 80098ba:	0019      	movs	r1, r3
 80098bc:	2069      	movs	r0, #105	@ 0x69
 80098be:	f001 fae7 	bl	800ae90 <sensirion_i2c_read_data_inplace>
 80098c2:	0003      	movs	r3, r0
 80098c4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098c6:	197b      	adds	r3, r7, r5
 80098c8:	2200      	movs	r2, #0
 80098ca:	5e9b      	ldrsh	r3, [r3, r2]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <sen5x_read_measured_values+0x88>
        return error;
 80098d0:	197b      	adds	r3, r7, r5
 80098d2:	2200      	movs	r2, #0
 80098d4:	5e9b      	ldrsh	r3, [r3, r2]
 80098d6:	e048      	b.n	800996a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80098d8:	2414      	movs	r4, #20
 80098da:	193b      	adds	r3, r7, r4
 80098dc:	0018      	movs	r0, r3
 80098de:	f000 fa79 	bl	8009dd4 <sensirion_common_bytes_to_uint16_t>
 80098e2:	0003      	movs	r3, r0
 80098e4:	001a      	movs	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80098ea:	193b      	adds	r3, r7, r4
 80098ec:	3302      	adds	r3, #2
 80098ee:	0018      	movs	r0, r3
 80098f0:	f000 fa70 	bl	8009dd4 <sensirion_common_bytes_to_uint16_t>
 80098f4:	0003      	movs	r3, r0
 80098f6:	001a      	movs	r2, r3
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 80098fc:	193b      	adds	r3, r7, r4
 80098fe:	3304      	adds	r3, #4
 8009900:	0018      	movs	r0, r3
 8009902:	f000 fa67 	bl	8009dd4 <sensirion_common_bytes_to_uint16_t>
 8009906:	0003      	movs	r3, r0
 8009908:	001a      	movs	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800990e:	193b      	adds	r3, r7, r4
 8009910:	3306      	adds	r3, #6
 8009912:	0018      	movs	r0, r3
 8009914:	f000 fa5e 	bl	8009dd4 <sensirion_common_bytes_to_uint16_t>
 8009918:	0003      	movs	r3, r0
 800991a:	001a      	movs	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009920:	193b      	adds	r3, r7, r4
 8009922:	3308      	adds	r3, #8
 8009924:	0018      	movs	r0, r3
 8009926:	f000 fa81 	bl	8009e2c <sensirion_common_bytes_to_int16_t>
 800992a:	0003      	movs	r3, r0
 800992c:	001a      	movs	r2, r3
 800992e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009930:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009932:	193b      	adds	r3, r7, r4
 8009934:	330a      	adds	r3, #10
 8009936:	0018      	movs	r0, r3
 8009938:	f000 fa78 	bl	8009e2c <sensirion_common_bytes_to_int16_t>
 800993c:	0003      	movs	r3, r0
 800993e:	001a      	movs	r2, r3
 8009940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009942:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009944:	193b      	adds	r3, r7, r4
 8009946:	330c      	adds	r3, #12
 8009948:	0018      	movs	r0, r3
 800994a:	f000 fa6f 	bl	8009e2c <sensirion_common_bytes_to_int16_t>
 800994e:	0003      	movs	r3, r0
 8009950:	001a      	movs	r2, r3
 8009952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009954:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009956:	193b      	adds	r3, r7, r4
 8009958:	330e      	adds	r3, #14
 800995a:	0018      	movs	r0, r3
 800995c:	f000 fa66 	bl	8009e2c <sensirion_common_bytes_to_int16_t>
 8009960:	0003      	movs	r3, r0
 8009962:	001a      	movs	r2, r3
 8009964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009966:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009968:	2300      	movs	r3, #0
}
 800996a:	0018      	movs	r0, r3
 800996c:	46bd      	mov	sp, r7
 800996e:	b00d      	add	sp, #52	@ 0x34
 8009970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009972:	46c0      	nop			@ (mov r8, r8)
 8009974:	00004e20 	.word	0x00004e20

08009978 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800997e:	1dbb      	adds	r3, r7, #6
 8009980:	2200      	movs	r2, #0
 8009982:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009984:	1dbc      	adds	r4, r7, #6
 8009986:	4a12      	ldr	r2, [pc, #72]	@ (80099d0 <sen5x_start_fan_cleaning+0x58>)
 8009988:	1dbb      	adds	r3, r7, #6
 800998a:	8819      	ldrh	r1, [r3, #0]
 800998c:	003b      	movs	r3, r7
 800998e:	0018      	movs	r0, r3
 8009990:	f001 f9e2 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 8009994:	0003      	movs	r3, r0
 8009996:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009998:	1d3c      	adds	r4, r7, #4
 800999a:	1dbb      	adds	r3, r7, #6
 800999c:	881a      	ldrh	r2, [r3, #0]
 800999e:	003b      	movs	r3, r7
 80099a0:	0019      	movs	r1, r3
 80099a2:	2069      	movs	r0, #105	@ 0x69
 80099a4:	f001 fa5c 	bl	800ae60 <sensirion_i2c_write_data>
 80099a8:	0003      	movs	r3, r0
 80099aa:	8023      	strh	r3, [r4, #0]
    if (error) {
 80099ac:	1d3b      	adds	r3, r7, #4
 80099ae:	2200      	movs	r2, #0
 80099b0:	5e9b      	ldrsh	r3, [r3, r2]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <sen5x_start_fan_cleaning+0x46>
        return error;
 80099b6:	1d3b      	adds	r3, r7, #4
 80099b8:	2200      	movs	r2, #0
 80099ba:	5e9b      	ldrsh	r3, [r3, r2]
 80099bc:	e004      	b.n	80099c8 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 80099be:	4b05      	ldr	r3, [pc, #20]	@ (80099d4 <sen5x_start_fan_cleaning+0x5c>)
 80099c0:	0018      	movs	r0, r3
 80099c2:	f7ff fccd 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	0018      	movs	r0, r3
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b003      	add	sp, #12
 80099ce:	bd90      	pop	{r4, r7, pc}
 80099d0:	00005607 	.word	0x00005607
 80099d4:	00004e20 	.word	0x00004e20

080099d8 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 80099d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	0004      	movs	r4, r0
 80099e0:	0008      	movs	r0, r1
 80099e2:	0011      	movs	r1, r2
 80099e4:	1dbb      	adds	r3, r7, #6
 80099e6:	1c22      	adds	r2, r4, #0
 80099e8:	801a      	strh	r2, [r3, #0]
 80099ea:	1d3b      	adds	r3, r7, #4
 80099ec:	1c02      	adds	r2, r0, #0
 80099ee:	801a      	strh	r2, [r3, #0]
 80099f0:	1cbb      	adds	r3, r7, #2
 80099f2:	1c0a      	adds	r2, r1, #0
 80099f4:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 80099f6:	2516      	movs	r5, #22
 80099f8:	197b      	adds	r3, r7, r5
 80099fa:	2200      	movs	r2, #0
 80099fc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 80099fe:	197c      	adds	r4, r7, r5
 8009a00:	4a25      	ldr	r2, [pc, #148]	@ (8009a98 <sen5x_set_temperature_offset_parameters+0xc0>)
 8009a02:	197b      	adds	r3, r7, r5
 8009a04:	8819      	ldrh	r1, [r3, #0]
 8009a06:	2608      	movs	r6, #8
 8009a08:	19bb      	adds	r3, r7, r6
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	f001 f9a4 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 8009a10:	0003      	movs	r3, r0
 8009a12:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009a14:	197c      	adds	r4, r7, r5
 8009a16:	1dbb      	adds	r3, r7, #6
 8009a18:	2200      	movs	r2, #0
 8009a1a:	5e9a      	ldrsh	r2, [r3, r2]
 8009a1c:	197b      	adds	r3, r7, r5
 8009a1e:	8819      	ldrh	r1, [r3, #0]
 8009a20:	19bb      	adds	r3, r7, r6
 8009a22:	0018      	movs	r0, r3
 8009a24:	f001 fa03 	bl	800ae2e <sensirion_i2c_add_int16_t_to_buffer>
 8009a28:	0003      	movs	r3, r0
 8009a2a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009a2c:	197c      	adds	r4, r7, r5
 8009a2e:	1d3b      	adds	r3, r7, #4
 8009a30:	2200      	movs	r2, #0
 8009a32:	5e9a      	ldrsh	r2, [r3, r2]
 8009a34:	197b      	adds	r3, r7, r5
 8009a36:	8819      	ldrh	r1, [r3, #0]
 8009a38:	19bb      	adds	r3, r7, r6
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f001 f9f7 	bl	800ae2e <sensirion_i2c_add_int16_t_to_buffer>
 8009a40:	0003      	movs	r3, r0
 8009a42:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009a44:	197c      	adds	r4, r7, r5
 8009a46:	1cbb      	adds	r3, r7, #2
 8009a48:	881a      	ldrh	r2, [r3, #0]
 8009a4a:	197b      	adds	r3, r7, r5
 8009a4c:	8819      	ldrh	r1, [r3, #0]
 8009a4e:	19bb      	adds	r3, r7, r6
 8009a50:	0018      	movs	r0, r3
 8009a52:	f001 f9ad 	bl	800adb0 <sensirion_i2c_add_uint16_t_to_buffer>
 8009a56:	0003      	movs	r3, r0
 8009a58:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009a5a:	2214      	movs	r2, #20
 8009a5c:	18bc      	adds	r4, r7, r2
 8009a5e:	197b      	adds	r3, r7, r5
 8009a60:	881a      	ldrh	r2, [r3, #0]
 8009a62:	19bb      	adds	r3, r7, r6
 8009a64:	0019      	movs	r1, r3
 8009a66:	2069      	movs	r0, #105	@ 0x69
 8009a68:	f001 f9fa 	bl	800ae60 <sensirion_i2c_write_data>
 8009a6c:	0003      	movs	r3, r0
 8009a6e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a70:	2214      	movs	r2, #20
 8009a72:	18bb      	adds	r3, r7, r2
 8009a74:	2100      	movs	r1, #0
 8009a76:	5e5b      	ldrsh	r3, [r3, r1]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 8009a7c:	18bb      	adds	r3, r7, r2
 8009a7e:	2200      	movs	r2, #0
 8009a80:	5e9b      	ldrsh	r3, [r3, r2]
 8009a82:	e004      	b.n	8009a8e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009a84:	4b05      	ldr	r3, [pc, #20]	@ (8009a9c <sen5x_set_temperature_offset_parameters+0xc4>)
 8009a86:	0018      	movs	r0, r3
 8009a88:	f7ff fc6a 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	0018      	movs	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	b007      	add	sp, #28
 8009a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a96:	46c0      	nop			@ (mov r8, r8)
 8009a98:	000060b2 	.word	0x000060b2
 8009a9c:	00004e20 	.word	0x00004e20

08009aa0 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa2:	b091      	sub	sp, #68	@ 0x44
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	000a      	movs	r2, r1
 8009aaa:	1cfb      	adds	r3, r7, #3
 8009aac:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009aae:	253e      	movs	r5, #62	@ 0x3e
 8009ab0:	197b      	adds	r3, r7, r5
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8009ab6:	197c      	adds	r4, r7, r5
 8009ab8:	4a22      	ldr	r2, [pc, #136]	@ (8009b44 <sen5x_get_product_name+0xa4>)
 8009aba:	197b      	adds	r3, r7, r5
 8009abc:	8819      	ldrh	r1, [r3, #0]
 8009abe:	230c      	movs	r3, #12
 8009ac0:	18fb      	adds	r3, r7, r3
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	f001 f948 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 8009ac8:	0003      	movs	r3, r0
 8009aca:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009acc:	263c      	movs	r6, #60	@ 0x3c
 8009ace:	19bc      	adds	r4, r7, r6
 8009ad0:	197b      	adds	r3, r7, r5
 8009ad2:	881a      	ldrh	r2, [r3, #0]
 8009ad4:	230c      	movs	r3, #12
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	0019      	movs	r1, r3
 8009ada:	2069      	movs	r0, #105	@ 0x69
 8009adc:	f001 f9c0 	bl	800ae60 <sensirion_i2c_write_data>
 8009ae0:	0003      	movs	r3, r0
 8009ae2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ae4:	19bb      	adds	r3, r7, r6
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	5e9b      	ldrsh	r3, [r3, r2]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <sen5x_get_product_name+0x56>
        return error;
 8009aee:	19bb      	adds	r3, r7, r6
 8009af0:	2200      	movs	r2, #0
 8009af2:	5e9b      	ldrsh	r3, [r3, r2]
 8009af4:	e021      	b.n	8009b3a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009af6:	4b14      	ldr	r3, [pc, #80]	@ (8009b48 <sen5x_get_product_name+0xa8>)
 8009af8:	0018      	movs	r0, r3
 8009afa:	f7ff fc31 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009afe:	253c      	movs	r5, #60	@ 0x3c
 8009b00:	197c      	adds	r4, r7, r5
 8009b02:	230c      	movs	r3, #12
 8009b04:	18fb      	adds	r3, r7, r3
 8009b06:	2220      	movs	r2, #32
 8009b08:	0019      	movs	r1, r3
 8009b0a:	2069      	movs	r0, #105	@ 0x69
 8009b0c:	f001 f9c0 	bl	800ae90 <sensirion_i2c_read_data_inplace>
 8009b10:	0003      	movs	r3, r0
 8009b12:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b14:	197b      	adds	r3, r7, r5
 8009b16:	2200      	movs	r2, #0
 8009b18:	5e9b      	ldrsh	r3, [r3, r2]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <sen5x_get_product_name+0x86>
        return error;
 8009b1e:	197b      	adds	r3, r7, r5
 8009b20:	2200      	movs	r2, #0
 8009b22:	5e9b      	ldrsh	r3, [r3, r2]
 8009b24:	e009      	b.n	8009b3a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8009b26:	1cfb      	adds	r3, r7, #3
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	230c      	movs	r3, #12
 8009b30:	18fb      	adds	r3, r7, r3
 8009b32:	0018      	movs	r0, r3
 8009b34:	f000 f988 	bl	8009e48 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	b011      	add	sp, #68	@ 0x44
 8009b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b42:	46c0      	nop			@ (mov r8, r8)
 8009b44:	0000d014 	.word	0x0000d014
 8009b48:	0000c350 	.word	0x0000c350

08009b4c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b4e:	b091      	sub	sp, #68	@ 0x44
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	000a      	movs	r2, r1
 8009b56:	1cfb      	adds	r3, r7, #3
 8009b58:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009b5a:	253e      	movs	r5, #62	@ 0x3e
 8009b5c:	197b      	adds	r3, r7, r5
 8009b5e:	2200      	movs	r2, #0
 8009b60:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009b62:	197c      	adds	r4, r7, r5
 8009b64:	4a22      	ldr	r2, [pc, #136]	@ (8009bf0 <sen5x_get_serial_number+0xa4>)
 8009b66:	197b      	adds	r3, r7, r5
 8009b68:	8819      	ldrh	r1, [r3, #0]
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	18fb      	adds	r3, r7, r3
 8009b6e:	0018      	movs	r0, r3
 8009b70:	f001 f8f2 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 8009b74:	0003      	movs	r3, r0
 8009b76:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b78:	263c      	movs	r6, #60	@ 0x3c
 8009b7a:	19bc      	adds	r4, r7, r6
 8009b7c:	197b      	adds	r3, r7, r5
 8009b7e:	881a      	ldrh	r2, [r3, #0]
 8009b80:	230c      	movs	r3, #12
 8009b82:	18fb      	adds	r3, r7, r3
 8009b84:	0019      	movs	r1, r3
 8009b86:	2069      	movs	r0, #105	@ 0x69
 8009b88:	f001 f96a 	bl	800ae60 <sensirion_i2c_write_data>
 8009b8c:	0003      	movs	r3, r0
 8009b8e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b90:	19bb      	adds	r3, r7, r6
 8009b92:	2200      	movs	r2, #0
 8009b94:	5e9b      	ldrsh	r3, [r3, r2]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <sen5x_get_serial_number+0x56>
        return error;
 8009b9a:	19bb      	adds	r3, r7, r6
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	5e9b      	ldrsh	r3, [r3, r2]
 8009ba0:	e021      	b.n	8009be6 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009ba2:	4b14      	ldr	r3, [pc, #80]	@ (8009bf4 <sen5x_get_serial_number+0xa8>)
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	f7ff fbdb 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009baa:	253c      	movs	r5, #60	@ 0x3c
 8009bac:	197c      	adds	r4, r7, r5
 8009bae:	230c      	movs	r3, #12
 8009bb0:	18fb      	adds	r3, r7, r3
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	0019      	movs	r1, r3
 8009bb6:	2069      	movs	r0, #105	@ 0x69
 8009bb8:	f001 f96a 	bl	800ae90 <sensirion_i2c_read_data_inplace>
 8009bbc:	0003      	movs	r3, r0
 8009bbe:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009bc0:	197b      	adds	r3, r7, r5
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <sen5x_get_serial_number+0x86>
        return error;
 8009bca:	197b      	adds	r3, r7, r5
 8009bcc:	2200      	movs	r2, #0
 8009bce:	5e9b      	ldrsh	r3, [r3, r2]
 8009bd0:	e009      	b.n	8009be6 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009bd2:	1cfb      	adds	r3, r7, #3
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	230c      	movs	r3, #12
 8009bdc:	18fb      	adds	r3, r7, r3
 8009bde:	0018      	movs	r0, r3
 8009be0:	f000 f932 	bl	8009e48 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	0018      	movs	r0, r3
 8009be8:	46bd      	mov	sp, r7
 8009bea:	b011      	add	sp, #68	@ 0x44
 8009bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bee:	46c0      	nop			@ (mov r8, r8)
 8009bf0:	0000d033 	.word	0x0000d033
 8009bf4:	0000c350 	.word	0x0000c350

08009bf8 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bfa:	b089      	sub	sp, #36	@ 0x24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009c06:	251e      	movs	r5, #30
 8009c08:	197b      	adds	r3, r7, r5
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009c0e:	197c      	adds	r4, r7, r5
 8009c10:	23d1      	movs	r3, #209	@ 0xd1
 8009c12:	021a      	lsls	r2, r3, #8
 8009c14:	197b      	adds	r3, r7, r5
 8009c16:	8819      	ldrh	r1, [r3, #0]
 8009c18:	2310      	movs	r3, #16
 8009c1a:	18fb      	adds	r3, r7, r3
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	f001 f89b 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 8009c22:	0003      	movs	r3, r0
 8009c24:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009c26:	261c      	movs	r6, #28
 8009c28:	19bc      	adds	r4, r7, r6
 8009c2a:	197b      	adds	r3, r7, r5
 8009c2c:	881a      	ldrh	r2, [r3, #0]
 8009c2e:	2310      	movs	r3, #16
 8009c30:	18fb      	adds	r3, r7, r3
 8009c32:	0019      	movs	r1, r3
 8009c34:	2069      	movs	r0, #105	@ 0x69
 8009c36:	f001 f913 	bl	800ae60 <sensirion_i2c_write_data>
 8009c3a:	0003      	movs	r3, r0
 8009c3c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c3e:	19bb      	adds	r3, r7, r6
 8009c40:	2200      	movs	r2, #0
 8009c42:	5e9b      	ldrsh	r3, [r3, r2]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <sen5x_get_version+0x58>
        return error;
 8009c48:	19bb      	adds	r3, r7, r6
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c4e:	e038      	b.n	8009cc2 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009c50:	4b1e      	ldr	r3, [pc, #120]	@ (8009ccc <sen5x_get_version+0xd4>)
 8009c52:	0018      	movs	r0, r3
 8009c54:	f7ff fb84 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8009c58:	251c      	movs	r5, #28
 8009c5a:	197c      	adds	r4, r7, r5
 8009c5c:	2310      	movs	r3, #16
 8009c5e:	18fb      	adds	r3, r7, r3
 8009c60:	2208      	movs	r2, #8
 8009c62:	0019      	movs	r1, r3
 8009c64:	2069      	movs	r0, #105	@ 0x69
 8009c66:	f001 f913 	bl	800ae90 <sensirion_i2c_read_data_inplace>
 8009c6a:	0003      	movs	r3, r0
 8009c6c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c6e:	197b      	adds	r3, r7, r5
 8009c70:	2200      	movs	r2, #0
 8009c72:	5e9b      	ldrsh	r3, [r3, r2]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <sen5x_get_version+0x88>
        return error;
 8009c78:	197b      	adds	r3, r7, r5
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c7e:	e020      	b.n	8009cc2 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009c80:	2110      	movs	r1, #16
 8009c82:	187b      	adds	r3, r7, r1
 8009c84:	781a      	ldrb	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8009c8a:	187b      	adds	r3, r7, r1
 8009c8c:	785a      	ldrb	r2, [r3, #1]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009c92:	187b      	adds	r3, r7, r1
 8009c94:	789b      	ldrb	r3, [r3, #2]
 8009c96:	1e5a      	subs	r2, r3, #1
 8009c98:	4193      	sbcs	r3, r2
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009ca0:	187b      	adds	r3, r7, r1
 8009ca2:	78da      	ldrb	r2, [r3, #3]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009ca8:	187b      	adds	r3, r7, r1
 8009caa:	791a      	ldrb	r2, [r3, #4]
 8009cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cae:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009cb0:	187b      	adds	r3, r7, r1
 8009cb2:	795a      	ldrb	r2, [r3, #5]
 8009cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cb6:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009cb8:	187b      	adds	r3, r7, r1
 8009cba:	799a      	ldrb	r2, [r3, #6]
 8009cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cbe:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	b009      	add	sp, #36	@ 0x24
 8009cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cca:	46c0      	nop			@ (mov r8, r8)
 8009ccc:	00004e20 	.word	0x00004e20

08009cd0 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009cd8:	2516      	movs	r5, #22
 8009cda:	197b      	adds	r3, r7, r5
 8009cdc:	2200      	movs	r2, #0
 8009cde:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009ce0:	197c      	adds	r4, r7, r5
 8009ce2:	4a22      	ldr	r2, [pc, #136]	@ (8009d6c <sen5x_read_device_status+0x9c>)
 8009ce4:	197b      	adds	r3, r7, r5
 8009ce6:	8819      	ldrh	r1, [r3, #0]
 8009ce8:	230c      	movs	r3, #12
 8009cea:	18fb      	adds	r3, r7, r3
 8009cec:	0018      	movs	r0, r3
 8009cee:	f001 f833 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 8009cf2:	0003      	movs	r3, r0
 8009cf4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009cf6:	2614      	movs	r6, #20
 8009cf8:	19bc      	adds	r4, r7, r6
 8009cfa:	197b      	adds	r3, r7, r5
 8009cfc:	881a      	ldrh	r2, [r3, #0]
 8009cfe:	230c      	movs	r3, #12
 8009d00:	18fb      	adds	r3, r7, r3
 8009d02:	0019      	movs	r1, r3
 8009d04:	2069      	movs	r0, #105	@ 0x69
 8009d06:	f001 f8ab 	bl	800ae60 <sensirion_i2c_write_data>
 8009d0a:	0003      	movs	r3, r0
 8009d0c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d0e:	19bb      	adds	r3, r7, r6
 8009d10:	2200      	movs	r2, #0
 8009d12:	5e9b      	ldrsh	r3, [r3, r2]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d003      	beq.n	8009d20 <sen5x_read_device_status+0x50>
        return error;
 8009d18:	19bb      	adds	r3, r7, r6
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	5e9b      	ldrsh	r3, [r3, r2]
 8009d1e:	e020      	b.n	8009d62 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009d20:	4b13      	ldr	r3, [pc, #76]	@ (8009d70 <sen5x_read_device_status+0xa0>)
 8009d22:	0018      	movs	r0, r3
 8009d24:	f7ff fb1c 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009d28:	2514      	movs	r5, #20
 8009d2a:	197c      	adds	r4, r7, r5
 8009d2c:	230c      	movs	r3, #12
 8009d2e:	18fb      	adds	r3, r7, r3
 8009d30:	2204      	movs	r2, #4
 8009d32:	0019      	movs	r1, r3
 8009d34:	2069      	movs	r0, #105	@ 0x69
 8009d36:	f001 f8ab 	bl	800ae90 <sensirion_i2c_read_data_inplace>
 8009d3a:	0003      	movs	r3, r0
 8009d3c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d3e:	197b      	adds	r3, r7, r5
 8009d40:	2200      	movs	r2, #0
 8009d42:	5e9b      	ldrsh	r3, [r3, r2]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <sen5x_read_device_status+0x80>
        return error;
 8009d48:	197b      	adds	r3, r7, r5
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	5e9b      	ldrsh	r3, [r3, r2]
 8009d4e:	e008      	b.n	8009d62 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009d50:	230c      	movs	r3, #12
 8009d52:	18fb      	adds	r3, r7, r3
 8009d54:	0018      	movs	r0, r3
 8009d56:	f000 f850 	bl	8009dfa <sensirion_common_bytes_to_uint32_t>
 8009d5a:	0002      	movs	r2, r0
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	0018      	movs	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	b007      	add	sp, #28
 8009d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6a:	46c0      	nop			@ (mov r8, r8)
 8009d6c:	0000d206 	.word	0x0000d206
 8009d70:	00004e20 	.word	0x00004e20

08009d74 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009d74:	b590      	push	{r4, r7, lr}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d7a:	1dbb      	adds	r3, r7, #6
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009d80:	1dbc      	adds	r4, r7, #6
 8009d82:	4a12      	ldr	r2, [pc, #72]	@ (8009dcc <sen5x_device_reset+0x58>)
 8009d84:	1dbb      	adds	r3, r7, #6
 8009d86:	8819      	ldrh	r1, [r3, #0]
 8009d88:	003b      	movs	r3, r7
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	f000 ffe4 	bl	800ad58 <sensirion_i2c_add_command_to_buffer>
 8009d90:	0003      	movs	r3, r0
 8009d92:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d94:	1d3c      	adds	r4, r7, #4
 8009d96:	1dbb      	adds	r3, r7, #6
 8009d98:	881a      	ldrh	r2, [r3, #0]
 8009d9a:	003b      	movs	r3, r7
 8009d9c:	0019      	movs	r1, r3
 8009d9e:	2069      	movs	r0, #105	@ 0x69
 8009da0:	f001 f85e 	bl	800ae60 <sensirion_i2c_write_data>
 8009da4:	0003      	movs	r3, r0
 8009da6:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009da8:	1d3b      	adds	r3, r7, #4
 8009daa:	2200      	movs	r2, #0
 8009dac:	5e9b      	ldrsh	r3, [r3, r2]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <sen5x_device_reset+0x46>
        return error;
 8009db2:	1d3b      	adds	r3, r7, #4
 8009db4:	2200      	movs	r2, #0
 8009db6:	5e9b      	ldrsh	r3, [r3, r2]
 8009db8:	e004      	b.n	8009dc4 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009dba:	4b05      	ldr	r3, [pc, #20]	@ (8009dd0 <sen5x_device_reset+0x5c>)
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f7ff facf 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	0018      	movs	r0, r3
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	b003      	add	sp, #12
 8009dca:	bd90      	pop	{r4, r7, pc}
 8009dcc:	0000d304 	.word	0x0000d304
 8009dd0:	00030d40 	.word	0x00030d40

08009dd4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	021b      	lsls	r3, r3, #8
 8009de2:	b21a      	sxth	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3301      	adds	r3, #1
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	b21b      	sxth	r3, r3
 8009dec:	4313      	orrs	r3, r2
 8009dee:	b21b      	sxth	r3, r3
 8009df0:	b29b      	uxth	r3, r3
}
 8009df2:	0018      	movs	r0, r3
 8009df4:	46bd      	mov	sp, r7
 8009df6:	b002      	add	sp, #8
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	061a      	lsls	r2, r3, #24
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	041b      	lsls	r3, r3, #16
 8009e10:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3302      	adds	r3, #2
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009e1a:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	3203      	adds	r2, #3
 8009e20:	7812      	ldrb	r2, [r2, #0]
 8009e22:	4313      	orrs	r3, r2
}
 8009e24:	0018      	movs	r0, r3
 8009e26:	46bd      	mov	sp, r7
 8009e28:	b002      	add	sp, #8
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	0018      	movs	r0, r3
 8009e38:	f7ff ffcc 	bl	8009dd4 <sensirion_common_bytes_to_uint16_t>
 8009e3c:	0003      	movs	r3, r0
 8009e3e:	b21b      	sxth	r3, r3
}
 8009e40:	0018      	movs	r0, r3
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b002      	add	sp, #8
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	1dbb      	adds	r3, r7, #6
 8009e54:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8009e56:	2316      	movs	r3, #22
 8009e58:	18fb      	adds	r3, r7, r3
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	801a      	strh	r2, [r3, #0]
 8009e5e:	e00f      	b.n	8009e80 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009e60:	2016      	movs	r0, #22
 8009e62:	183b      	adds	r3, r7, r0
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	18d2      	adds	r2, r2, r3
 8009e6a:	183b      	adds	r3, r7, r0
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	18cb      	adds	r3, r1, r3
 8009e72:	7812      	ldrb	r2, [r2, #0]
 8009e74:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8009e76:	183b      	adds	r3, r7, r0
 8009e78:	881a      	ldrh	r2, [r3, #0]
 8009e7a:	183b      	adds	r3, r7, r0
 8009e7c:	3201      	adds	r2, #1
 8009e7e:	801a      	strh	r2, [r3, #0]
 8009e80:	2316      	movs	r3, #22
 8009e82:	18fa      	adds	r2, r7, r3
 8009e84:	1dbb      	adds	r3, r7, #6
 8009e86:	8812      	ldrh	r2, [r2, #0]
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d3e8      	bcc.n	8009e60 <sensirion_common_copy_bytes+0x18>
    }
}
 8009e8e:	46c0      	nop			@ (mov r8, r8)
 8009e90:	46c0      	nop			@ (mov r8, r8)
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b006      	add	sp, #24
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d113      	bne.n	8009ede <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	22fe      	movs	r2, #254	@ 0xfe
 8009eba:	0592      	lsls	r2, r2, #22
 8009ebc:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f2c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009ec2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f30 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009ec8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4a19      	ldr	r2, [pc, #100]	@ (8009f34 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009ece:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a19      	ldr	r2, [pc, #100]	@ (8009f38 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009ed4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4a18      	ldr	r2, [pc, #96]	@ (8009f3c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009eda:	61da      	str	r2, [r3, #28]
 8009edc:	e011      	b.n	8009f02 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4a17      	ldr	r2, [pc, #92]	@ (8009f40 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009ee2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4a17      	ldr	r2, [pc, #92]	@ (8009f44 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009ee8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4a16      	ldr	r2, [pc, #88]	@ (8009f48 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009eee:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4a16      	ldr	r2, [pc, #88]	@ (8009f4c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009ef4:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4a15      	ldr	r2, [pc, #84]	@ (8009f50 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009efa:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4a15      	ldr	r2, [pc, #84]	@ (8009f54 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009f00:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4a14      	ldr	r2, [pc, #80]	@ (8009f58 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009f06:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a14      	ldr	r2, [pc, #80]	@ (8009f5c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4a12      	ldr	r2, [pc, #72]	@ (8009f5c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009f12:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4a12      	ldr	r2, [pc, #72]	@ (8009f60 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009f18:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	f000 f831 	bl	8009f84 <GasIndexAlgorithm_reset>
}
 8009f22:	46c0      	nop			@ (mov r8, r8)
 8009f24:	46bd      	mov	sp, r7
 8009f26:	b004      	add	sp, #16
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	46c0      	nop			@ (mov r8, r8)
 8009f2c:	00002710 	.word	0x00002710
 8009f30:	44340000 	.word	0x44340000
 8009f34:	46859800 	.word	0x46859800
 8009f38:	46a05000 	.word	0x46a05000
 8009f3c:	41f00000 	.word	0x41f00000
 8009f40:	42c80000 	.word	0x42c80000
 8009f44:	00004e20 	.word	0x00004e20
 8009f48:	43340000 	.word	0x43340000
 8009f4c:	4528c000 	.word	0x4528c000
 8009f50:	45a32000 	.word	0x45a32000
 8009f54:	43aa0000 	.word	0x43aa0000
 8009f58:	43660000 	.word	0x43660000
 8009f5c:	41400000 	.word	0x41400000
 8009f60:	42480000 	.word	0x42480000

08009f64 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8009f6e:	22fe      	movs	r2, #254	@ 0xfe
 8009f70:	0592      	lsls	r2, r2, #22
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	0018      	movs	r0, r3
 8009f78:	f7ff ff8e 	bl	8009e98 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8009f7c:	46c0      	nop			@ (mov r8, r8)
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	b002      	add	sp, #8
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f000 f805 	bl	8009fb0 <GasIndexAlgorithm__init_instances>
}
 8009fa6:	46c0      	nop			@ (mov r8, r8)
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	b002      	add	sp, #8
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	0018      	movs	r0, r3
 8009fbc:	f000 f8e8 	bl	800a190 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f000 f9a6 	bl	800a314 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009fc8:	1c04      	adds	r4, r0, #0
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f000 f9ab 	bl	800a328 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009fd2:	1c02      	adds	r2, r0, #0
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	1c21      	adds	r1, r4, #0
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f000 fc3b 	bl	800a854 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d107      	bne.n	8009ff6 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009fe6:	23fe      	movs	r3, #254	@ 0xfe
 8009fe8:	059b      	lsls	r3, r3, #22
 8009fea:	4a0a      	ldr	r2, [pc, #40]	@ (800a014 <GasIndexAlgorithm__init_instances+0x64>)
 8009fec:	490a      	ldr	r1, [pc, #40]	@ (800a018 <GasIndexAlgorithm__init_instances+0x68>)
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fc86 	bl	800a900 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8009ff4:	e005      	b.n	800a002 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009ff6:	4b09      	ldr	r3, [pc, #36]	@ (800a01c <GasIndexAlgorithm__init_instances+0x6c>)
 8009ff8:	4a09      	ldr	r2, [pc, #36]	@ (800a020 <GasIndexAlgorithm__init_instances+0x70>)
 8009ffa:	490a      	ldr	r1, [pc, #40]	@ (800a024 <GasIndexAlgorithm__init_instances+0x74>)
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fc7f 	bl	800a900 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	0018      	movs	r0, r3
 800a006:	f000 fd35 	bl	800aa74 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a00a:	46c0      	nop			@ (mov r8, r8)
 800a00c:	46bd      	mov	sp, r7
 800a00e:	b003      	add	sp, #12
 800a010:	bd90      	pop	{r4, r7, pc}
 800a012:	46c0      	nop			@ (mov r8, r8)
 800a014:	bc257a78 	.word	0xbc257a78
 800a018:	44198000 	.word	0x44198000
 800a01c:	42c80000 	.word	0x42c80000
 800a020:	bbd4fdf4 	.word	0xbbd4fdf4
 800a024:	43550000 	.word	0x43550000

0800a028 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a028:	b590      	push	{r4, r7, lr}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a038:	4952      	ldr	r1, [pc, #328]	@ (800a184 <GasIndexAlgorithm_process+0x15c>)
 800a03a:	1c18      	adds	r0, r3, #0
 800a03c:	f7f6 fa82 	bl	8000544 <__aeabi_fcmple>
 800a040:	1e03      	subs	r3, r0, #0
 800a042:	d00c      	beq.n	800a05e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	1c19      	adds	r1, r3, #0
 800a04e:	1c10      	adds	r0, r2, #0
 800a050:	f7f6 fc36 	bl	80008c0 <__aeabi_fadd>
 800a054:	1c03      	adds	r3, r0, #0
 800a056:	1c1a      	adds	r2, r3, #0
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a05c:	e080      	b.n	800a160 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	dd25      	ble.n	800a0b0 <GasIndexAlgorithm_process+0x88>
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	4a48      	ldr	r2, [pc, #288]	@ (800a188 <GasIndexAlgorithm_process+0x160>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	dc21      	bgt.n	800a0b0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	429a      	cmp	r2, r3
 800a074:	dc04      	bgt.n	800a080 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	3301      	adds	r3, #1
 800a07c:	60bb      	str	r3, [r7, #8]
 800a07e:	e00d      	b.n	800a09c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	4a41      	ldr	r2, [pc, #260]	@ (800a18c <GasIndexAlgorithm_process+0x164>)
 800a086:	4694      	mov	ip, r2
 800a088:	4463      	add	r3, ip
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	dd05      	ble.n	800a09c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	4a3d      	ldr	r2, [pc, #244]	@ (800a18c <GasIndexAlgorithm_process+0x164>)
 800a096:	4694      	mov	ip, r2
 800a098:	4463      	add	r3, ip
 800a09a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	f7f7 fa93 	bl	80015d0 <__aeabi_i2f>
 800a0aa:	1c02      	adds	r2, r0, #0
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	f000 f945 	bl	800a34a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a0c0:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a0c2:	d014      	beq.n	800a0ee <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	1c11      	adds	r1, r2, #0
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f000 fbd1 	bl	800a874 <GasIndexAlgorithm__mox_model__process>
 800a0d2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	1c11      	adds	r1, r2, #0
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f000 fc25 	bl	800a930 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a0e6:	1c02      	adds	r2, r0, #0
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0ec:	e003      	b.n	800a0f6 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	689a      	ldr	r2, [r3, #8]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	1c11      	adds	r1, r2, #0
 800a0fe:	0018      	movs	r0, r3
 800a100:	f000 fcec 	bl	800aadc <GasIndexAlgorithm__adaptive_lowpass__process>
 800a104:	1c02      	adds	r2, r0, #0
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10e:	21fc      	movs	r1, #252	@ 0xfc
 800a110:	0589      	lsls	r1, r1, #22
 800a112:	1c18      	adds	r0, r3, #0
 800a114:	f7f6 fa0c 	bl	8000530 <__aeabi_fcmplt>
 800a118:	1e03      	subs	r3, r0, #0
 800a11a:	d003      	beq.n	800a124 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	22fc      	movs	r2, #252	@ 0xfc
 800a120:	0592      	lsls	r2, r2, #22
 800a122:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a128:	2100      	movs	r1, #0
 800a12a:	1c18      	adds	r0, r3, #0
 800a12c:	f7f6 fa14 	bl	8000558 <__aeabi_fcmpgt>
 800a130:	1e03      	subs	r3, r0, #0
 800a132:	d015      	beq.n	800a160 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	1c11      	adds	r1, r2, #0
 800a13c:	0018      	movs	r0, r3
 800a13e:	f000 fa4f 	bl	800a5e0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	0018      	movs	r0, r3
 800a146:	f000 f8e5 	bl	800a314 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a14a:	1c04      	adds	r4, r0, #0
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	0018      	movs	r0, r3
 800a150:	f000 f8ea 	bl	800a328 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a154:	1c02      	adds	r2, r0, #0
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	1c21      	adds	r1, r4, #0
 800a15a:	0018      	movs	r0, r3
 800a15c:	f000 fb7a 	bl	800a854 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a164:	21fc      	movs	r1, #252	@ 0xfc
 800a166:	0589      	lsls	r1, r1, #22
 800a168:	1c18      	adds	r0, r3, #0
 800a16a:	f7f6 fba9 	bl	80008c0 <__aeabi_fadd>
 800a16e:	1c03      	adds	r3, r0, #0
 800a170:	1c18      	adds	r0, r3, #0
 800a172:	f7f7 fa0d 	bl	8001590 <__aeabi_f2iz>
 800a176:	0002      	movs	r2, r0
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	601a      	str	r2, [r3, #0]
    return;
 800a17c:	46c0      	nop			@ (mov r8, r8)
}
 800a17e:	46bd      	mov	sp, r7
 800a180:	b005      	add	sp, #20
 800a182:	bd90      	pop	{r4, r7, pc}
 800a184:	42340000 	.word	0x42340000
 800a188:	0000fde7 	.word	0x0000fde7
 800a18c:	00007fff 	.word	0x00007fff

0800a190 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a190:	b5b0      	push	{r4, r5, r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	223c      	movs	r2, #60	@ 0x3c
 800a19c:	2100      	movs	r1, #0
 800a19e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4952      	ldr	r1, [pc, #328]	@ (800a304 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a1ba:	1c18      	adds	r0, r3, #0
 800a1bc:	f7f6 fd0a 	bl	8000bd4 <__aeabi_fdiv>
 800a1c0:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a1c2:	2188      	movs	r1, #136	@ 0x88
 800a1c4:	05c9      	lsls	r1, r1, #23
 800a1c6:	1c18      	adds	r0, r3, #0
 800a1c8:	f7f6 feea 	bl	8000fa0 <__aeabi_fmul>
 800a1cc:	1c03      	adds	r3, r0, #0
 800a1ce:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	494a      	ldr	r1, [pc, #296]	@ (800a304 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a1da:	1c18      	adds	r0, r3, #0
 800a1dc:	f7f6 fcfa 	bl	8000bd4 <__aeabi_fdiv>
 800a1e0:	1c03      	adds	r3, r0, #0
 800a1e2:	1c19      	adds	r1, r3, #0
 800a1e4:	1c20      	adds	r0, r4, #0
 800a1e6:	f7f6 fb6b 	bl	80008c0 <__aeabi_fadd>
 800a1ea:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a1ec:	1c19      	adds	r1, r3, #0
 800a1ee:	1c28      	adds	r0, r5, #0
 800a1f0:	f7f6 fcf0 	bl	8000bd4 <__aeabi_fdiv>
 800a1f4:	1c03      	adds	r3, r0, #0
 800a1f6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	4940      	ldr	r1, [pc, #256]	@ (800a304 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a202:	1c18      	adds	r0, r3, #0
 800a204:	f7f6 fce6 	bl	8000bd4 <__aeabi_fdiv>
 800a208:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a20a:	2185      	movs	r1, #133	@ 0x85
 800a20c:	05c9      	lsls	r1, r1, #23
 800a20e:	1c18      	adds	r0, r3, #0
 800a210:	f7f6 fec6 	bl	8000fa0 <__aeabi_fmul>
 800a214:	1c03      	adds	r3, r0, #0
 800a216:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	4938      	ldr	r1, [pc, #224]	@ (800a304 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a222:	1c18      	adds	r0, r3, #0
 800a224:	f7f6 fcd6 	bl	8000bd4 <__aeabi_fdiv>
 800a228:	1c03      	adds	r3, r0, #0
 800a22a:	1c19      	adds	r1, r3, #0
 800a22c:	1c20      	adds	r0, r4, #0
 800a22e:	f7f6 fb47 	bl	80008c0 <__aeabi_fadd>
 800a232:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a234:	1c19      	adds	r1, r3, #0
 800a236:	1c28      	adds	r0, r5, #0
 800a238:	f7f6 fccc 	bl	8000bd4 <__aeabi_fdiv>
 800a23c:	1c03      	adds	r3, r0, #0
 800a23e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d118      	bne.n	800a27e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a250:	2188      	movs	r1, #136	@ 0x88
 800a252:	05c9      	lsls	r1, r1, #23
 800a254:	1c18      	adds	r0, r3, #0
 800a256:	f7f6 fea3 	bl	8000fa0 <__aeabi_fmul>
 800a25a:	1c03      	adds	r3, r0, #0
 800a25c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a262:	4929      	ldr	r1, [pc, #164]	@ (800a308 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a264:	1c18      	adds	r0, r3, #0
 800a266:	f7f6 fb2b 	bl	80008c0 <__aeabi_fadd>
 800a26a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a26c:	1c19      	adds	r1, r3, #0
 800a26e:	1c20      	adds	r0, r4, #0
 800a270:	f7f6 fcb0 	bl	8000bd4 <__aeabi_fdiv>
 800a274:	1c03      	adds	r3, r0, #0
 800a276:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a27c:	e017      	b.n	800a2ae <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a282:	2188      	movs	r1, #136	@ 0x88
 800a284:	05c9      	lsls	r1, r1, #23
 800a286:	1c18      	adds	r0, r3, #0
 800a288:	f7f6 fe8a 	bl	8000fa0 <__aeabi_fmul>
 800a28c:	1c03      	adds	r3, r0, #0
 800a28e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a294:	491d      	ldr	r1, [pc, #116]	@ (800a30c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a296:	1c18      	adds	r0, r3, #0
 800a298:	f7f6 fb12 	bl	80008c0 <__aeabi_fadd>
 800a29c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a29e:	1c19      	adds	r1, r3, #0
 800a2a0:	1c20      	adds	r0, r4, #0
 800a2a2:	f7f6 fc97 	bl	8000bd4 <__aeabi_fdiv>
 800a2a6:	1c03      	adds	r3, r0, #0
 800a2a8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a2b2:	2185      	movs	r1, #133	@ 0x85
 800a2b4:	05c9      	lsls	r1, r1, #23
 800a2b6:	1c18      	adds	r0, r3, #0
 800a2b8:	f7f6 fe72 	bl	8000fa0 <__aeabi_fmul>
 800a2bc:	1c03      	adds	r3, r0, #0
 800a2be:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4912      	ldr	r1, [pc, #72]	@ (800a310 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a2c6:	1c18      	adds	r0, r3, #0
 800a2c8:	f7f6 fafa 	bl	80008c0 <__aeabi_fadd>
 800a2cc:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a2ce:	1c19      	adds	r1, r3, #0
 800a2d0:	1c20      	adds	r0, r4, #0
 800a2d2:	f7f6 fc7f 	bl	8000bd4 <__aeabi_fdiv>
 800a2d6:	1c03      	adds	r3, r0, #0
 800a2d8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a2fc:	46c0      	nop			@ (mov r8, r8)
 800a2fe:	46bd      	mov	sp, r7
 800a300:	b002      	add	sp, #8
 800a302:	bdb0      	pop	{r4, r5, r7, pc}
 800a304:	45610000 	.word	0x45610000
 800a308:	44960000 	.word	0x44960000
 800a30c:	41a00000 	.word	0x41a00000
 800a310:	451c4000 	.word	0x451c4000

0800a314 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a320:	1c18      	adds	r0, r3, #0
 800a322:	46bd      	mov	sp, r7
 800a324:	b002      	add	sp, #8
 800a326:	bd80      	pop	{r7, pc}

0800a328 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a338:	1c19      	adds	r1, r3, #0
 800a33a:	1c10      	adds	r0, r2, #0
 800a33c:	f7f6 fac0 	bl	80008c0 <__aeabi_fadd>
 800a340:	1c03      	adds	r3, r0, #0
}
 800a342:	1c18      	adds	r0, r3, #0
 800a344:	46bd      	mov	sp, r7
 800a346:	b002      	add	sp, #8
 800a348:	bd80      	pop	{r7, pc}

0800a34a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	223c      	movs	r2, #60	@ 0x3c
 800a356:	5c9b      	ldrb	r3, [r3, r2]
}
 800a358:	0018      	movs	r0, r3
 800a35a:	46bd      	mov	sp, r7
 800a35c:	b002      	add	sp, #8
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a360:	b5b0      	push	{r4, r5, r7, lr}
 800a362:	b08c      	sub	sp, #48	@ 0x30
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a36c:	1c19      	adds	r1, r3, #0
 800a36e:	4895      	ldr	r0, [pc, #596]	@ (800a5c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a370:	f7f6 ff54 	bl	800121c <__aeabi_fsub>
 800a374:	1c03      	adds	r3, r0, #0
 800a376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a37c:	1c19      	adds	r1, r3, #0
 800a37e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a380:	f7f6 f8ea 	bl	8000558 <__aeabi_fcmpgt>
 800a384:	1e03      	subs	r3, r0, #0
 800a386:	d00b      	beq.n	800a3a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a390:	1c19      	adds	r1, r3, #0
 800a392:	1c10      	adds	r0, r2, #0
 800a394:	f7f6 fa94 	bl	80008c0 <__aeabi_fadd>
 800a398:	1c03      	adds	r3, r0, #0
 800a39a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3a4:	1c19      	adds	r1, r3, #0
 800a3a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3a8:	f7f6 f8d6 	bl	8000558 <__aeabi_fcmpgt>
 800a3ac:	1e03      	subs	r3, r0, #0
 800a3ae:	d00b      	beq.n	800a3c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a3b8:	1c19      	adds	r1, r3, #0
 800a3ba:	1c10      	adds	r0, r2, #0
 800a3bc:	f7f6 fa80 	bl	80008c0 <__aeabi_fadd>
 800a3c0:	1c03      	adds	r3, r0, #0
 800a3c2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6959      	ldr	r1, [r3, #20]
 800a3cc:	4a7e      	ldr	r2, [pc, #504]	@ (800a5c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	f000 f9f1 	bl	800a7b8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	1c11      	adds	r1, r2, #0
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f000 f9fa 	bl	800a7d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a3e4:	1c03      	adds	r3, r0, #0
 800a3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a3f4:	1c19      	adds	r1, r3, #0
 800a3f6:	1c10      	adds	r0, r2, #0
 800a3f8:	f7f6 ff10 	bl	800121c <__aeabi_fsub>
 800a3fc:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a3fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a400:	1c18      	adds	r0, r3, #0
 800a402:	f7f6 fdcd 	bl	8000fa0 <__aeabi_fmul>
 800a406:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a408:	1c19      	adds	r1, r3, #0
 800a40a:	1c20      	adds	r0, r4, #0
 800a40c:	f7f6 fa58 	bl	80008c0 <__aeabi_fadd>
 800a410:	1c03      	adds	r3, r0, #0
 800a412:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a41c:	1c19      	adds	r1, r3, #0
 800a41e:	486b      	ldr	r0, [pc, #428]	@ (800a5cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a420:	f7f6 fefc 	bl	800121c <__aeabi_fsub>
 800a424:	1c03      	adds	r3, r0, #0
 800a426:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	1c11      	adds	r1, r2, #0
 800a430:	0018      	movs	r0, r3
 800a432:	f000 f9d1 	bl	800a7d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a436:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a438:	1c19      	adds	r1, r3, #0
 800a43a:	1c28      	adds	r0, r5, #0
 800a43c:	f7f6 fdb0 	bl	8000fa0 <__aeabi_fmul>
 800a440:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a442:	1c19      	adds	r1, r3, #0
 800a444:	1c20      	adds	r0, r4, #0
 800a446:	f7f6 fa3b 	bl	80008c0 <__aeabi_fadd>
 800a44a:	1c03      	adds	r3, r0, #0
 800a44c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a44e:	4a60      	ldr	r2, [pc, #384]	@ (800a5d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a450:	6a39      	ldr	r1, [r7, #32]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	0018      	movs	r0, r3
 800a456:	f000 f9af 	bl	800a7b8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	1c11      	adds	r1, r2, #0
 800a462:	0018      	movs	r0, r3
 800a464:	f000 f9b8 	bl	800a7d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a468:	1c03      	adds	r3, r0, #0
 800a46a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a46c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a46e:	69f8      	ldr	r0, [r7, #28]
 800a470:	f7f6 fd96 	bl	8000fa0 <__aeabi_fmul>
 800a474:	1c03      	adds	r3, r0, #0
 800a476:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6999      	ldr	r1, [r3, #24]
 800a480:	4a51      	ldr	r2, [pc, #324]	@ (800a5c8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	0018      	movs	r0, r3
 800a486:	f000 f997 	bl	800a7b8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	1c11      	adds	r1, r2, #0
 800a492:	0018      	movs	r0, r3
 800a494:	f000 f9a0 	bl	800a7d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a498:	1c03      	adds	r3, r0, #0
 800a49a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a4a8:	1c19      	adds	r1, r3, #0
 800a4aa:	1c10      	adds	r0, r2, #0
 800a4ac:	f7f6 feb6 	bl	800121c <__aeabi_fsub>
 800a4b0:	1c03      	adds	r3, r0, #0
 800a4b2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a4b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4b6:	69b8      	ldr	r0, [r7, #24]
 800a4b8:	f7f6 feb0 	bl	800121c <__aeabi_fsub>
 800a4bc:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a4be:	1c19      	adds	r1, r3, #0
 800a4c0:	1c28      	adds	r0, r5, #0
 800a4c2:	f7f6 fd6d 	bl	8000fa0 <__aeabi_fmul>
 800a4c6:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a4c8:	1c19      	adds	r1, r3, #0
 800a4ca:	1c20      	adds	r0, r4, #0
 800a4cc:	f7f6 f9f8 	bl	80008c0 <__aeabi_fadd>
 800a4d0:	1c03      	adds	r3, r0, #0
 800a4d2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a4dc:	1c19      	adds	r1, r3, #0
 800a4de:	483b      	ldr	r0, [pc, #236]	@ (800a5cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a4e0:	f7f6 fe9c 	bl	800121c <__aeabi_fsub>
 800a4e4:	1c03      	adds	r3, r0, #0
 800a4e6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	1c11      	adds	r1, r2, #0
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	f000 f971 	bl	800a7d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a4f6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a4f8:	1c19      	adds	r1, r3, #0
 800a4fa:	1c28      	adds	r0, r5, #0
 800a4fc:	f7f6 fd50 	bl	8000fa0 <__aeabi_fmul>
 800a500:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a502:	1c19      	adds	r1, r3, #0
 800a504:	1c20      	adds	r0, r4, #0
 800a506:	f7f6 f9db 	bl	80008c0 <__aeabi_fadd>
 800a50a:	1c03      	adds	r3, r0, #0
 800a50c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a50e:	4a30      	ldr	r2, [pc, #192]	@ (800a5d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a510:	6939      	ldr	r1, [r7, #16]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	0018      	movs	r0, r3
 800a516:	f000 f94f 	bl	800a7b8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	1c11      	adds	r1, r2, #0
 800a522:	0018      	movs	r0, r3
 800a524:	f000 f958 	bl	800a7d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a528:	1c03      	adds	r3, r0, #0
 800a52a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a52c:	6979      	ldr	r1, [r7, #20]
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f7f6 fd36 	bl	8000fa0 <__aeabi_fmul>
 800a534:	1c03      	adds	r3, r0, #0
 800a536:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4923      	ldr	r1, [pc, #140]	@ (800a5d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a546:	1c18      	adds	r0, r3, #0
 800a548:	f7f6 fb44 	bl	8000bd4 <__aeabi_fdiv>
 800a54c:	1c03      	adds	r3, r0, #0
 800a54e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a550:	69f9      	ldr	r1, [r7, #28]
 800a552:	20fe      	movs	r0, #254	@ 0xfe
 800a554:	0580      	lsls	r0, r0, #22
 800a556:	f7f6 fe61 	bl	800121c <__aeabi_fsub>
 800a55a:	1c03      	adds	r3, r0, #0
 800a55c:	491e      	ldr	r1, [pc, #120]	@ (800a5d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a55e:	1c18      	adds	r0, r3, #0
 800a560:	f7f6 fd1e 	bl	8000fa0 <__aeabi_fmul>
 800a564:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a566:	491d      	ldr	r1, [pc, #116]	@ (800a5dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a568:	1c18      	adds	r0, r3, #0
 800a56a:	f7f6 fe57 	bl	800121c <__aeabi_fsub>
 800a56e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a570:	1c19      	adds	r1, r3, #0
 800a572:	1c28      	adds	r0, r5, #0
 800a574:	f7f6 fd14 	bl	8000fa0 <__aeabi_fmul>
 800a578:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a57a:	1c19      	adds	r1, r3, #0
 800a57c:	1c20      	adds	r0, r4, #0
 800a57e:	f7f6 f99f 	bl	80008c0 <__aeabi_fadd>
 800a582:	1c03      	adds	r3, r0, #0
 800a584:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a58e:	2100      	movs	r1, #0
 800a590:	1c18      	adds	r0, r3, #0
 800a592:	f7f5 ffcd 	bl	8000530 <__aeabi_fcmplt>
 800a596:	1e03      	subs	r3, r0, #0
 800a598:	d002      	beq.n	800a5a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a5a8:	1c19      	adds	r1, r3, #0
 800a5aa:	1c10      	adds	r0, r2, #0
 800a5ac:	f7f5 ffd4 	bl	8000558 <__aeabi_fcmpgt>
 800a5b0:	1e03      	subs	r3, r0, #0
 800a5b2:	d100      	bne.n	800a5b6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a5b4:	e002      	b.n	800a5bc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a5bc:	46c0      	nop			@ (mov r8, r8)
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	b00c      	add	sp, #48	@ 0x30
 800a5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5c4:	46fffe00 	.word	0x46fffe00
 800a5c8:	3c23d70a 	.word	0x3c23d70a
 800a5cc:	43ff0000 	.word	0x43ff0000
 800a5d0:	3db851ec 	.word	0x3db851ec
 800a5d4:	42700000 	.word	0x42700000
 800a5d8:	3fa66666 	.word	0x3fa66666
 800a5dc:	3e99999a 	.word	0x3e99999a

0800a5e0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	223c      	movs	r2, #60	@ 0x3c
 800a5ee:	5c9b      	ldrb	r3, [r3, r2]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	4053      	eors	r3, r2
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00a      	beq.n	800a610 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	223c      	movs	r2, #60	@ 0x3c
 800a5fe:	2101      	movs	r1, #1
 800a600:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a60e:	e0c8      	b.n	800a7a2 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a614:	4965      	ldr	r1, [pc, #404]	@ (800a7ac <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a616:	1c18      	adds	r0, r3, #0
 800a618:	f7f5 ffa8 	bl	800056c <__aeabi_fcmpge>
 800a61c:	1e03      	subs	r3, r0, #0
 800a61e:	d107      	bne.n	800a630 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a624:	4962      	ldr	r1, [pc, #392]	@ (800a7b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a626:	1c18      	adds	r0, r3, #0
 800a628:	f7f5 ff8c 	bl	8000544 <__aeabi_fcmple>
 800a62c:	1e03      	subs	r3, r0, #0
 800a62e:	d00e      	beq.n	800a64e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a638:	1c19      	adds	r1, r3, #0
 800a63a:	1c10      	adds	r0, r2, #0
 800a63c:	f7f6 f940 	bl	80008c0 <__aeabi_fadd>
 800a640:	1c03      	adds	r3, r0, #0
 800a642:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a652:	1c19      	adds	r1, r3, #0
 800a654:	6838      	ldr	r0, [r7, #0]
 800a656:	f7f6 fde1 	bl	800121c <__aeabi_fsub>
 800a65a:	1c03      	adds	r3, r0, #0
 800a65c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	0018      	movs	r0, r3
 800a662:	f7ff fe7d 	bl	800a360 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66a:	1c19      	adds	r1, r3, #0
 800a66c:	6838      	ldr	r0, [r7, #0]
 800a66e:	f7f6 fdd5 	bl	800121c <__aeabi_fsub>
 800a672:	1c03      	adds	r3, r0, #0
 800a674:	2185      	movs	r1, #133	@ 0x85
 800a676:	05c9      	lsls	r1, r1, #23
 800a678:	1c18      	adds	r0, r3, #0
 800a67a:	f7f6 faab 	bl	8000bd4 <__aeabi_fdiv>
 800a67e:	1c03      	adds	r3, r0, #0
 800a680:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a682:	2100      	movs	r1, #0
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7f5 ff53 	bl	8000530 <__aeabi_fcmplt>
 800a68a:	1e03      	subs	r3, r0, #0
 800a68c:	d008      	beq.n	800a6a0 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	1c18      	adds	r0, r3, #0
 800a696:	f7f6 fdc1 	bl	800121c <__aeabi_fsub>
 800a69a:	1c03      	adds	r3, r0, #0
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	e007      	b.n	800a6b0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6a4:	1c19      	adds	r1, r3, #0
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7f6 f90a 	bl	80008c0 <__aeabi_fadd>
 800a6ac:	1c03      	adds	r3, r0, #0
 800a6ae:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a6b0:	23fe      	movs	r3, #254	@ 0xfe
 800a6b2:	059b      	lsls	r3, r3, #22
 800a6b4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a6b6:	493f      	ldr	r1, [pc, #252]	@ (800a7b4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a6b8:	6978      	ldr	r0, [r7, #20]
 800a6ba:	f7f5 ff4d 	bl	8000558 <__aeabi_fcmpgt>
 800a6be:	1e03      	subs	r3, r0, #0
 800a6c0:	d010      	beq.n	800a6e4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a6c2:	493c      	ldr	r1, [pc, #240]	@ (800a7b4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a6c4:	6978      	ldr	r0, [r7, #20]
 800a6c6:	f7f6 fa85 	bl	8000bd4 <__aeabi_fdiv>
 800a6ca:	1c03      	adds	r3, r0, #0
 800a6cc:	1c1c      	adds	r4, r3, #0
 800a6ce:	4939      	ldr	r1, [pc, #228]	@ (800a7b4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a6d0:	6978      	ldr	r0, [r7, #20]
 800a6d2:	f7f6 fa7f 	bl	8000bd4 <__aeabi_fdiv>
 800a6d6:	1c03      	adds	r3, r0, #0
 800a6d8:	1c19      	adds	r1, r3, #0
 800a6da:	1c20      	adds	r0, r4, #0
 800a6dc:	f7f6 fc60 	bl	8000fa0 <__aeabi_fmul>
 800a6e0:	1c03      	adds	r3, r0, #0
 800a6e2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a6e8:	1c19      	adds	r1, r3, #0
 800a6ea:	2085      	movs	r0, #133	@ 0x85
 800a6ec:	05c0      	lsls	r0, r0, #23
 800a6ee:	f7f6 fd95 	bl	800121c <__aeabi_fsub>
 800a6f2:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a6f4:	6939      	ldr	r1, [r7, #16]
 800a6f6:	1c18      	adds	r0, r3, #0
 800a6f8:	f7f6 fc52 	bl	8000fa0 <__aeabi_fmul>
 800a6fc:	1c03      	adds	r3, r0, #0
 800a6fe:	1c18      	adds	r0, r3, #0
 800a700:	f017 fe0e 	bl	8022320 <sqrtf>
 800a704:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a70e:	2185      	movs	r1, #133	@ 0x85
 800a710:	05c9      	lsls	r1, r1, #23
 800a712:	6938      	ldr	r0, [r7, #16]
 800a714:	f7f6 fc44 	bl	8000fa0 <__aeabi_fmul>
 800a718:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a71a:	1c19      	adds	r1, r3, #0
 800a71c:	1c28      	adds	r0, r5, #0
 800a71e:	f7f6 fa59 	bl	8000bd4 <__aeabi_fdiv>
 800a722:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a724:	1c19      	adds	r1, r3, #0
 800a726:	1c20      	adds	r0, r4, #0
 800a728:	f7f6 fc3a 	bl	8000fa0 <__aeabi_fmul>
 800a72c:	1c03      	adds	r3, r0, #0
 800a72e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a734:	68f9      	ldr	r1, [r7, #12]
 800a736:	1c18      	adds	r0, r3, #0
 800a738:	f7f6 fc32 	bl	8000fa0 <__aeabi_fmul>
 800a73c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a73e:	6939      	ldr	r1, [r7, #16]
 800a740:	1c18      	adds	r0, r3, #0
 800a742:	f7f6 fa47 	bl	8000bd4 <__aeabi_fdiv>
 800a746:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a748:	68f9      	ldr	r1, [r7, #12]
 800a74a:	1c18      	adds	r0, r3, #0
 800a74c:	f7f6 fc28 	bl	8000fa0 <__aeabi_fmul>
 800a750:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a752:	1c19      	adds	r1, r3, #0
 800a754:	1c20      	adds	r0, r4, #0
 800a756:	f7f6 f8b3 	bl	80008c0 <__aeabi_fadd>
 800a75a:	1c03      	adds	r3, r0, #0
 800a75c:	1c18      	adds	r0, r3, #0
 800a75e:	f017 fddf 	bl	8022320 <sqrtf>
 800a762:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a764:	1c19      	adds	r1, r3, #0
 800a766:	1c30      	adds	r0, r6, #0
 800a768:	f7f6 fc1a 	bl	8000fa0 <__aeabi_fmul>
 800a76c:	1c03      	adds	r3, r0, #0
 800a76e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a77c:	68f9      	ldr	r1, [r7, #12]
 800a77e:	1c18      	adds	r0, r3, #0
 800a780:	f7f6 fc0e 	bl	8000fa0 <__aeabi_fmul>
 800a784:	1c03      	adds	r3, r0, #0
 800a786:	2182      	movs	r1, #130	@ 0x82
 800a788:	05c9      	lsls	r1, r1, #23
 800a78a:	1c18      	adds	r0, r3, #0
 800a78c:	f7f6 fa22 	bl	8000bd4 <__aeabi_fdiv>
 800a790:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a792:	1c19      	adds	r1, r3, #0
 800a794:	1c20      	adds	r0, r4, #0
 800a796:	f7f6 f893 	bl	80008c0 <__aeabi_fadd>
 800a79a:	1c03      	adds	r3, r0, #0
 800a79c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a7a2:	46c0      	nop			@ (mov r8, r8)
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	b007      	add	sp, #28
 800a7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7aa:	46c0      	nop			@ (mov r8, r8)
 800a7ac:	42c80000 	.word	0x42c80000
 800a7b0:	c2c80000 	.word	0xc2c80000
 800a7b4:	44b40000 	.word	0x44b40000

0800a7b8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7d0:	46c0      	nop			@ (mov r8, r8)
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	b004      	add	sp, #16
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a7d8:	b590      	push	{r4, r7, lr}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ea:	1c19      	adds	r1, r3, #0
 800a7ec:	6838      	ldr	r0, [r7, #0]
 800a7ee:	f7f6 fd15 	bl	800121c <__aeabi_fsub>
 800a7f2:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a7f4:	1c19      	adds	r1, r3, #0
 800a7f6:	1c20      	adds	r0, r4, #0
 800a7f8:	f7f6 fbd2 	bl	8000fa0 <__aeabi_fmul>
 800a7fc:	1c03      	adds	r3, r0, #0
 800a7fe:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a800:	4912      	ldr	r1, [pc, #72]	@ (800a84c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7f5 fe94 	bl	8000530 <__aeabi_fcmplt>
 800a808:	1e03      	subs	r3, r0, #0
 800a80a:	d002      	beq.n	800a812 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a80c:	23fe      	movs	r3, #254	@ 0xfe
 800a80e:	059b      	lsls	r3, r3, #22
 800a810:	e018      	b.n	800a844 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a812:	490f      	ldr	r1, [pc, #60]	@ (800a850 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f7f5 fe9f 	bl	8000558 <__aeabi_fcmpgt>
 800a81a:	1e03      	subs	r3, r0, #0
 800a81c:	d001      	beq.n	800a822 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a81e:	2300      	movs	r3, #0
 800a820:	e010      	b.n	800a844 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	1c18      	adds	r0, r3, #0
 800a826:	f017 fd53 	bl	80222d0 <expf>
 800a82a:	1c03      	adds	r3, r0, #0
 800a82c:	21fe      	movs	r1, #254	@ 0xfe
 800a82e:	0589      	lsls	r1, r1, #22
 800a830:	1c18      	adds	r0, r3, #0
 800a832:	f7f6 f845 	bl	80008c0 <__aeabi_fadd>
 800a836:	1c03      	adds	r3, r0, #0
 800a838:	1c19      	adds	r1, r3, #0
 800a83a:	20fe      	movs	r0, #254	@ 0xfe
 800a83c:	0580      	lsls	r0, r0, #22
 800a83e:	f7f6 f9c9 	bl	8000bd4 <__aeabi_fdiv>
 800a842:	1c03      	adds	r3, r0, #0
    }
}
 800a844:	1c18      	adds	r0, r3, #0
 800a846:	46bd      	mov	sp, r7
 800a848:	b005      	add	sp, #20
 800a84a:	bd90      	pop	{r4, r7, pc}
 800a84c:	c2480000 	.word	0xc2480000
 800a850:	42480000 	.word	0x42480000

0800a854 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a86c:	46c0      	nop			@ (mov r8, r8)
 800a86e:	46bd      	mov	sp, r7
 800a870:	b004      	add	sp, #16
 800a872:	bd80      	pop	{r7, pc}

0800a874 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a874:	b590      	push	{r4, r7, lr}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d114      	bne.n	800a8b0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a88a:	1c19      	adds	r1, r3, #0
 800a88c:	6838      	ldr	r0, [r7, #0]
 800a88e:	f7f6 fcc5 	bl	800121c <__aeabi_fsub>
 800a892:	1c03      	adds	r3, r0, #0
 800a894:	4918      	ldr	r1, [pc, #96]	@ (800a8f8 <GasIndexAlgorithm__mox_model__process+0x84>)
 800a896:	1c18      	adds	r0, r3, #0
 800a898:	f7f6 f99c 	bl	8000bd4 <__aeabi_fdiv>
 800a89c:	1c03      	adds	r3, r0, #0
 800a89e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a8a4:	1c19      	adds	r1, r3, #0
 800a8a6:	1c10      	adds	r0, r2, #0
 800a8a8:	f7f6 fb7a 	bl	8000fa0 <__aeabi_fmul>
 800a8ac:	1c03      	adds	r3, r0, #0
 800a8ae:	e01f      	b.n	800a8f0 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8b4:	1c19      	adds	r1, r3, #0
 800a8b6:	6838      	ldr	r0, [r7, #0]
 800a8b8:	f7f6 fcb0 	bl	800121c <__aeabi_fsub>
 800a8bc:	1c03      	adds	r3, r0, #0
 800a8be:	1c1a      	adds	r2, r3, #0
 800a8c0:	2380      	movs	r3, #128	@ 0x80
 800a8c2:	061b      	lsls	r3, r3, #24
 800a8c4:	4053      	eors	r3, r2
 800a8c6:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8cc:	490b      	ldr	r1, [pc, #44]	@ (800a8fc <GasIndexAlgorithm__mox_model__process+0x88>)
 800a8ce:	1c18      	adds	r0, r3, #0
 800a8d0:	f7f5 fff6 	bl	80008c0 <__aeabi_fadd>
 800a8d4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a8d6:	1c19      	adds	r1, r3, #0
 800a8d8:	1c20      	adds	r0, r4, #0
 800a8da:	f7f6 f97b 	bl	8000bd4 <__aeabi_fdiv>
 800a8de:	1c03      	adds	r3, r0, #0
 800a8e0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a8e6:	1c19      	adds	r1, r3, #0
 800a8e8:	1c10      	adds	r0, r2, #0
 800a8ea:	f7f6 fb59 	bl	8000fa0 <__aeabi_fmul>
 800a8ee:	1c03      	adds	r3, r0, #0
    }
}
 800a8f0:	1c18      	adds	r0, r3, #0
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	b003      	add	sp, #12
 800a8f6:	bd90      	pop	{r4, r7, pc}
 800a8f8:	44fa0000 	.word	0x44fa0000
 800a8fc:	435c0000 	.word	0x435c0000

0800a900 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2180      	movs	r1, #128	@ 0x80
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2184      	movs	r1, #132	@ 0x84
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2188      	movs	r1, #136	@ 0x88
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	505a      	str	r2, [r3, r1]
}
 800a926:	46c0      	nop			@ (mov r8, r8)
 800a928:	46bd      	mov	sp, r7
 800a92a:	b004      	add	sp, #16
 800a92c:	bd80      	pop	{r7, pc}
	...

0800a930 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2280      	movs	r2, #128	@ 0x80
 800a93e:	589c      	ldr	r4, [r3, r2]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2284      	movs	r2, #132	@ 0x84
 800a944:	589b      	ldr	r3, [r3, r2]
 800a946:	1c19      	adds	r1, r3, #0
 800a948:	6838      	ldr	r0, [r7, #0]
 800a94a:	f7f6 fc67 	bl	800121c <__aeabi_fsub>
 800a94e:	1c03      	adds	r3, r0, #0
 800a950:	1c19      	adds	r1, r3, #0
 800a952:	1c20      	adds	r0, r4, #0
 800a954:	f7f6 fb24 	bl	8000fa0 <__aeabi_fmul>
 800a958:	1c03      	adds	r3, r0, #0
 800a95a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800a95c:	4940      	ldr	r1, [pc, #256]	@ (800aa60 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800a95e:	68b8      	ldr	r0, [r7, #8]
 800a960:	f7f5 fde6 	bl	8000530 <__aeabi_fcmplt>
 800a964:	1e03      	subs	r3, r0, #0
 800a966:	d001      	beq.n	800a96c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800a968:	4b3e      	ldr	r3, [pc, #248]	@ (800aa64 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a96a:	e075      	b.n	800aa58 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800a96c:	493e      	ldr	r1, [pc, #248]	@ (800aa68 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800a96e:	68b8      	ldr	r0, [r7, #8]
 800a970:	f7f5 fdf2 	bl	8000558 <__aeabi_fcmpgt>
 800a974:	1e03      	subs	r3, r0, #0
 800a976:	d001      	beq.n	800a97c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800a978:	2300      	movs	r3, #0
 800a97a:	e06d      	b.n	800aa58 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800a97c:	2100      	movs	r1, #0
 800a97e:	6838      	ldr	r0, [r7, #0]
 800a980:	f7f5 fdf4 	bl	800056c <__aeabi_fcmpge>
 800a984:	1e03      	subs	r3, r0, #0
 800a986:	d047      	beq.n	800aa18 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2288      	movs	r2, #136	@ 0x88
 800a98c:	589b      	ldr	r3, [r3, r2]
 800a98e:	21fe      	movs	r1, #254	@ 0xfe
 800a990:	0589      	lsls	r1, r1, #22
 800a992:	1c18      	adds	r0, r3, #0
 800a994:	f7f5 fdc6 	bl	8000524 <__aeabi_fcmpeq>
 800a998:	1e03      	subs	r3, r0, #0
 800a99a:	d00e      	beq.n	800a9ba <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	1c19      	adds	r1, r3, #0
 800a9a2:	20fe      	movs	r0, #254	@ 0xfe
 800a9a4:	0580      	lsls	r0, r0, #22
 800a9a6:	f7f6 fc39 	bl	800121c <__aeabi_fsub>
 800a9aa:	1c03      	adds	r3, r0, #0
 800a9ac:	492f      	ldr	r1, [pc, #188]	@ (800aa6c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800a9ae:	1c18      	adds	r0, r3, #0
 800a9b0:	f7f6 faf6 	bl	8000fa0 <__aeabi_fmul>
 800a9b4:	1c03      	adds	r3, r0, #0
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e012      	b.n	800a9e0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	492c      	ldr	r1, [pc, #176]	@ (800aa70 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800a9c0:	1c18      	adds	r0, r3, #0
 800a9c2:	f7f6 faed 	bl	8000fa0 <__aeabi_fmul>
 800a9c6:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800a9c8:	1c19      	adds	r1, r3, #0
 800a9ca:	4826      	ldr	r0, [pc, #152]	@ (800aa64 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a9cc:	f7f6 fc26 	bl	800121c <__aeabi_fsub>
 800a9d0:	1c03      	adds	r3, r0, #0
 800a9d2:	2181      	movs	r1, #129	@ 0x81
 800a9d4:	05c9      	lsls	r1, r1, #23
 800a9d6:	1c18      	adds	r0, r3, #0
 800a9d8:	f7f6 f8fc 	bl	8000bd4 <__aeabi_fdiv>
 800a9dc:	1c03      	adds	r3, r0, #0
 800a9de:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800a9e0:	4920      	ldr	r1, [pc, #128]	@ (800aa64 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f7f5 ff6c 	bl	80008c0 <__aeabi_fadd>
 800a9e8:	1c03      	adds	r3, r0, #0
 800a9ea:	1c1c      	adds	r4, r3, #0
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	1c18      	adds	r0, r3, #0
 800a9f0:	f017 fc6e 	bl	80222d0 <expf>
 800a9f4:	1c03      	adds	r3, r0, #0
 800a9f6:	21fe      	movs	r1, #254	@ 0xfe
 800a9f8:	0589      	lsls	r1, r1, #22
 800a9fa:	1c18      	adds	r0, r3, #0
 800a9fc:	f7f5 ff60 	bl	80008c0 <__aeabi_fadd>
 800aa00:	1c03      	adds	r3, r0, #0
 800aa02:	1c19      	adds	r1, r3, #0
 800aa04:	1c20      	adds	r0, r4, #0
 800aa06:	f7f6 f8e5 	bl	8000bd4 <__aeabi_fdiv>
 800aa0a:	1c03      	adds	r3, r0, #0
 800aa0c:	68f9      	ldr	r1, [r7, #12]
 800aa0e:	1c18      	adds	r0, r3, #0
 800aa10:	f7f6 fc04 	bl	800121c <__aeabi_fsub>
 800aa14:	1c03      	adds	r3, r0, #0
 800aa16:	e01f      	b.n	800aa58 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2188      	movs	r1, #136	@ 0x88
 800aa20:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800aa22:	1c19      	adds	r1, r3, #0
 800aa24:	1c10      	adds	r0, r2, #0
 800aa26:	f7f6 f8d5 	bl	8000bd4 <__aeabi_fdiv>
 800aa2a:	1c03      	adds	r3, r0, #0
 800aa2c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	1c18      	adds	r0, r3, #0
 800aa32:	f017 fc4d 	bl	80222d0 <expf>
 800aa36:	1c03      	adds	r3, r0, #0
 800aa38:	21fe      	movs	r1, #254	@ 0xfe
 800aa3a:	0589      	lsls	r1, r1, #22
 800aa3c:	1c18      	adds	r0, r3, #0
 800aa3e:	f7f5 ff3f 	bl	80008c0 <__aeabi_fadd>
 800aa42:	1c03      	adds	r3, r0, #0
 800aa44:	1c19      	adds	r1, r3, #0
 800aa46:	4807      	ldr	r0, [pc, #28]	@ (800aa64 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aa48:	f7f6 f8c4 	bl	8000bd4 <__aeabi_fdiv>
 800aa4c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800aa4e:	1c19      	adds	r1, r3, #0
 800aa50:	1c20      	adds	r0, r4, #0
 800aa52:	f7f6 faa5 	bl	8000fa0 <__aeabi_fmul>
 800aa56:	1c03      	adds	r3, r0, #0
        }
    }
}
 800aa58:	1c18      	adds	r0, r3, #0
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	b005      	add	sp, #20
 800aa5e:	bd90      	pop	{r4, r7, pc}
 800aa60:	c2480000 	.word	0xc2480000
 800aa64:	43fa0000 	.word	0x43fa0000
 800aa68:	42480000 	.word	0x42480000
 800aa6c:	3f8041ab 	.word	0x3f8041ab
 800aa70:	40a00000 	.word	0x40a00000

0800aa74 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800aa74:	b590      	push	{r4, r7, lr}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4913      	ldr	r1, [pc, #76]	@ (800aad4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800aa86:	1c18      	adds	r0, r3, #0
 800aa88:	f7f5 ff1a 	bl	80008c0 <__aeabi_fadd>
 800aa8c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800aa8e:	1c19      	adds	r1, r3, #0
 800aa90:	1c20      	adds	r0, r4, #0
 800aa92:	f7f6 f89f 	bl	8000bd4 <__aeabi_fdiv>
 800aa96:	1c03      	adds	r3, r0, #0
 800aa98:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	228c      	movs	r2, #140	@ 0x8c
 800aa9e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	490b      	ldr	r1, [pc, #44]	@ (800aad8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800aaaa:	1c18      	adds	r0, r3, #0
 800aaac:	f7f5 ff08 	bl	80008c0 <__aeabi_fadd>
 800aab0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800aab2:	1c19      	adds	r1, r3, #0
 800aab4:	1c20      	adds	r0, r4, #0
 800aab6:	f7f6 f88d 	bl	8000bd4 <__aeabi_fdiv>
 800aaba:	1c03      	adds	r3, r0, #0
 800aabc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2290      	movs	r2, #144	@ 0x90
 800aac2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2294      	movs	r2, #148	@ 0x94
 800aac8:	2100      	movs	r1, #0
 800aaca:	5499      	strb	r1, [r3, r2]
}
 800aacc:	46c0      	nop			@ (mov r8, r8)
 800aace:	46bd      	mov	sp, r7
 800aad0:	b003      	add	sp, #12
 800aad2:	bd90      	pop	{r4, r7, pc}
 800aad4:	41a00000 	.word	0x41a00000
 800aad8:	43fa0000 	.word	0x43fa0000

0800aadc <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2294      	movs	r2, #148	@ 0x94
 800aaea:	5c9b      	ldrb	r3, [r3, r2]
 800aaec:	2201      	movs	r2, #1
 800aaee:	4053      	eors	r3, r2
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00f      	beq.n	800ab16 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2198      	movs	r1, #152	@ 0x98
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	219c      	movs	r1, #156	@ 0x9c
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	21a0      	movs	r1, #160	@ 0xa0
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2294      	movs	r2, #148	@ 0x94
 800ab12:	2101      	movs	r1, #1
 800ab14:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	228c      	movs	r2, #140	@ 0x8c
 800ab1a:	589b      	ldr	r3, [r3, r2]
 800ab1c:	1c19      	adds	r1, r3, #0
 800ab1e:	20fe      	movs	r0, #254	@ 0xfe
 800ab20:	0580      	lsls	r0, r0, #22
 800ab22:	f7f6 fb7b 	bl	800121c <__aeabi_fsub>
 800ab26:	1c03      	adds	r3, r0, #0
 800ab28:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2298      	movs	r2, #152	@ 0x98
 800ab2e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ab30:	1c19      	adds	r1, r3, #0
 800ab32:	f7f6 fa35 	bl	8000fa0 <__aeabi_fmul>
 800ab36:	1c03      	adds	r3, r0, #0
 800ab38:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	228c      	movs	r2, #140	@ 0x8c
 800ab3e:	589b      	ldr	r3, [r3, r2]
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	1c18      	adds	r0, r3, #0
 800ab44:	f7f6 fa2c 	bl	8000fa0 <__aeabi_fmul>
 800ab48:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800ab4a:	1c19      	adds	r1, r3, #0
 800ab4c:	1c20      	adds	r0, r4, #0
 800ab4e:	f7f5 feb7 	bl	80008c0 <__aeabi_fadd>
 800ab52:	1c03      	adds	r3, r0, #0
 800ab54:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2298      	movs	r2, #152	@ 0x98
 800ab5a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2290      	movs	r2, #144	@ 0x90
 800ab60:	589b      	ldr	r3, [r3, r2]
 800ab62:	1c19      	adds	r1, r3, #0
 800ab64:	20fe      	movs	r0, #254	@ 0xfe
 800ab66:	0580      	lsls	r0, r0, #22
 800ab68:	f7f6 fb58 	bl	800121c <__aeabi_fsub>
 800ab6c:	1c03      	adds	r3, r0, #0
 800ab6e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	229c      	movs	r2, #156	@ 0x9c
 800ab74:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ab76:	1c19      	adds	r1, r3, #0
 800ab78:	f7f6 fa12 	bl	8000fa0 <__aeabi_fmul>
 800ab7c:	1c03      	adds	r3, r0, #0
 800ab7e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2290      	movs	r2, #144	@ 0x90
 800ab84:	589b      	ldr	r3, [r3, r2]
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	1c18      	adds	r0, r3, #0
 800ab8a:	f7f6 fa09 	bl	8000fa0 <__aeabi_fmul>
 800ab8e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800ab90:	1c19      	adds	r1, r3, #0
 800ab92:	1c20      	adds	r0, r4, #0
 800ab94:	f7f5 fe94 	bl	80008c0 <__aeabi_fadd>
 800ab98:	1c03      	adds	r3, r0, #0
 800ab9a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	229c      	movs	r2, #156	@ 0x9c
 800aba0:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2298      	movs	r2, #152	@ 0x98
 800aba6:	589a      	ldr	r2, [r3, r2]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	219c      	movs	r1, #156	@ 0x9c
 800abac:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800abae:	1c19      	adds	r1, r3, #0
 800abb0:	1c10      	adds	r0, r2, #0
 800abb2:	f7f6 fb33 	bl	800121c <__aeabi_fsub>
 800abb6:	1c03      	adds	r3, r0, #0
 800abb8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800abba:	2100      	movs	r1, #0
 800abbc:	6978      	ldr	r0, [r7, #20]
 800abbe:	f7f5 fcb7 	bl	8000530 <__aeabi_fcmplt>
 800abc2:	1e03      	subs	r3, r0, #0
 800abc4:	d004      	beq.n	800abd0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2280      	movs	r2, #128	@ 0x80
 800abca:	0612      	lsls	r2, r2, #24
 800abcc:	4053      	eors	r3, r2
 800abce:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800abd0:	4923      	ldr	r1, [pc, #140]	@ (800ac60 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800abd2:	6978      	ldr	r0, [r7, #20]
 800abd4:	f7f6 f9e4 	bl	8000fa0 <__aeabi_fmul>
 800abd8:	1c03      	adds	r3, r0, #0
 800abda:	1c18      	adds	r0, r3, #0
 800abdc:	f017 fb78 	bl	80222d0 <expf>
 800abe0:	1c03      	adds	r3, r0, #0
 800abe2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800abe4:	491f      	ldr	r1, [pc, #124]	@ (800ac64 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800abe6:	6938      	ldr	r0, [r7, #16]
 800abe8:	f7f6 f9da 	bl	8000fa0 <__aeabi_fmul>
 800abec:	1c03      	adds	r3, r0, #0
 800abee:	491e      	ldr	r1, [pc, #120]	@ (800ac68 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800abf0:	1c18      	adds	r0, r3, #0
 800abf2:	f7f5 fe65 	bl	80008c0 <__aeabi_fadd>
 800abf6:	1c03      	adds	r3, r0, #0
 800abf8:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685c      	ldr	r4, [r3, #4]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	68f9      	ldr	r1, [r7, #12]
 800ac04:	1c18      	adds	r0, r3, #0
 800ac06:	f7f5 fe5b 	bl	80008c0 <__aeabi_fadd>
 800ac0a:	1c03      	adds	r3, r0, #0
 800ac0c:	1c19      	adds	r1, r3, #0
 800ac0e:	1c20      	adds	r0, r4, #0
 800ac10:	f7f5 ffe0 	bl	8000bd4 <__aeabi_fdiv>
 800ac14:	1c03      	adds	r3, r0, #0
 800ac16:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800ac18:	68b9      	ldr	r1, [r7, #8]
 800ac1a:	20fe      	movs	r0, #254	@ 0xfe
 800ac1c:	0580      	lsls	r0, r0, #22
 800ac1e:	f7f6 fafd 	bl	800121c <__aeabi_fsub>
 800ac22:	1c03      	adds	r3, r0, #0
 800ac24:	1c18      	adds	r0, r3, #0
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	22a0      	movs	r2, #160	@ 0xa0
 800ac2a:	589b      	ldr	r3, [r3, r2]
 800ac2c:	1c19      	adds	r1, r3, #0
 800ac2e:	f7f6 f9b7 	bl	8000fa0 <__aeabi_fmul>
 800ac32:	1c03      	adds	r3, r0, #0
 800ac34:	1c1c      	adds	r4, r3, #0
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	68b8      	ldr	r0, [r7, #8]
 800ac3a:	f7f6 f9b1 	bl	8000fa0 <__aeabi_fmul>
 800ac3e:	1c03      	adds	r3, r0, #0
 800ac40:	1c19      	adds	r1, r3, #0
 800ac42:	1c20      	adds	r0, r4, #0
 800ac44:	f7f5 fe3c 	bl	80008c0 <__aeabi_fadd>
 800ac48:	1c03      	adds	r3, r0, #0
 800ac4a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	22a0      	movs	r2, #160	@ 0xa0
 800ac50:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	22a0      	movs	r2, #160	@ 0xa0
 800ac56:	589b      	ldr	r3, [r3, r2]
}
 800ac58:	1c18      	adds	r0, r3, #0
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	b007      	add	sp, #28
 800ac5e:	bd90      	pop	{r4, r7, pc}
 800ac60:	be4ccccd 	.word	0xbe4ccccd
 800ac64:	43f00000 	.word	0x43f00000
 800ac68:	41a00000 	.word	0x41a00000

0800ac6c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	000a      	movs	r2, r1
 800ac76:	1cbb      	adds	r3, r7, #2
 800ac78:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800ac7a:	230d      	movs	r3, #13
 800ac7c:	18fb      	adds	r3, r7, r3
 800ac7e:	22ff      	movs	r2, #255	@ 0xff
 800ac80:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ac82:	230e      	movs	r3, #14
 800ac84:	18fb      	adds	r3, r7, r3
 800ac86:	2200      	movs	r2, #0
 800ac88:	801a      	strh	r2, [r3, #0]
 800ac8a:	e037      	b.n	800acfc <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800ac8c:	230e      	movs	r3, #14
 800ac8e:	18fb      	adds	r3, r7, r3
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	18d3      	adds	r3, r2, r3
 800ac96:	7819      	ldrb	r1, [r3, #0]
 800ac98:	220d      	movs	r2, #13
 800ac9a:	18bb      	adds	r3, r7, r2
 800ac9c:	18ba      	adds	r2, r7, r2
 800ac9e:	7812      	ldrb	r2, [r2, #0]
 800aca0:	404a      	eors	r2, r1
 800aca2:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800aca4:	230c      	movs	r3, #12
 800aca6:	18fb      	adds	r3, r7, r3
 800aca8:	2208      	movs	r2, #8
 800acaa:	701a      	strb	r2, [r3, #0]
 800acac:	e01b      	b.n	800ace6 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800acae:	210d      	movs	r1, #13
 800acb0:	187b      	adds	r3, r7, r1
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	b25b      	sxtb	r3, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	da09      	bge.n	800acce <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800acba:	187b      	adds	r3, r7, r1
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	b25b      	sxtb	r3, r3
 800acc2:	2231      	movs	r2, #49	@ 0x31
 800acc4:	4053      	eors	r3, r2
 800acc6:	b25a      	sxtb	r2, r3
 800acc8:	187b      	adds	r3, r7, r1
 800acca:	701a      	strb	r2, [r3, #0]
 800accc:	e005      	b.n	800acda <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800acce:	230d      	movs	r3, #13
 800acd0:	18fa      	adds	r2, r7, r3
 800acd2:	18fb      	adds	r3, r7, r3
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	18db      	adds	r3, r3, r3
 800acd8:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800acda:	220c      	movs	r2, #12
 800acdc:	18bb      	adds	r3, r7, r2
 800acde:	18ba      	adds	r2, r7, r2
 800ace0:	7812      	ldrb	r2, [r2, #0]
 800ace2:	3a01      	subs	r2, #1
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	230c      	movs	r3, #12
 800ace8:	18fb      	adds	r3, r7, r3
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d1de      	bne.n	800acae <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800acf0:	220e      	movs	r2, #14
 800acf2:	18bb      	adds	r3, r7, r2
 800acf4:	18ba      	adds	r2, r7, r2
 800acf6:	8812      	ldrh	r2, [r2, #0]
 800acf8:	3201      	adds	r2, #1
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	230e      	movs	r3, #14
 800acfe:	18fa      	adds	r2, r7, r3
 800ad00:	1cbb      	adds	r3, r7, #2
 800ad02:	8812      	ldrh	r2, [r2, #0]
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d3c0      	bcc.n	800ac8c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800ad0a:	230d      	movs	r3, #13
 800ad0c:	18fb      	adds	r3, r7, r3
 800ad0e:	781b      	ldrb	r3, [r3, #0]
}
 800ad10:	0018      	movs	r0, r3
 800ad12:	46bd      	mov	sp, r7
 800ad14:	b004      	add	sp, #16
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	0008      	movs	r0, r1
 800ad22:	0011      	movs	r1, r2
 800ad24:	1cbb      	adds	r3, r7, #2
 800ad26:	1c02      	adds	r2, r0, #0
 800ad28:	801a      	strh	r2, [r3, #0]
 800ad2a:	1c7b      	adds	r3, r7, #1
 800ad2c:	1c0a      	adds	r2, r1, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800ad30:	1cbb      	adds	r3, r7, #2
 800ad32:	881a      	ldrh	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	0011      	movs	r1, r2
 800ad38:	0018      	movs	r0, r3
 800ad3a:	f7ff ff97 	bl	800ac6c <sensirion_i2c_generate_crc>
 800ad3e:	0003      	movs	r3, r0
 800ad40:	001a      	movs	r2, r3
 800ad42:	1c7b      	adds	r3, r7, #1
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d001      	beq.n	800ad4e <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	0018      	movs	r0, r3
 800ad52:	46bd      	mov	sp, r7
 800ad54:	b002      	add	sp, #8
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	0008      	movs	r0, r1
 800ad62:	0011      	movs	r1, r2
 800ad64:	1cbb      	adds	r3, r7, #2
 800ad66:	1c02      	adds	r2, r0, #0
 800ad68:	801a      	strh	r2, [r3, #0]
 800ad6a:	003b      	movs	r3, r7
 800ad6c:	1c0a      	adds	r2, r1, #0
 800ad6e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800ad70:	003b      	movs	r3, r7
 800ad72:	881b      	ldrh	r3, [r3, #0]
 800ad74:	0a1b      	lsrs	r3, r3, #8
 800ad76:	b299      	uxth	r1, r3
 800ad78:	1cbb      	adds	r3, r7, #2
 800ad7a:	881b      	ldrh	r3, [r3, #0]
 800ad7c:	1cba      	adds	r2, r7, #2
 800ad7e:	1c58      	adds	r0, r3, #1
 800ad80:	8010      	strh	r0, [r2, #0]
 800ad82:	001a      	movs	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	189b      	adds	r3, r3, r2
 800ad88:	b2ca      	uxtb	r2, r1
 800ad8a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800ad8c:	1cbb      	adds	r3, r7, #2
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	1cba      	adds	r2, r7, #2
 800ad92:	1c59      	adds	r1, r3, #1
 800ad94:	8011      	strh	r1, [r2, #0]
 800ad96:	001a      	movs	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	189b      	adds	r3, r3, r2
 800ad9c:	003a      	movs	r2, r7
 800ad9e:	8812      	ldrh	r2, [r2, #0]
 800ada0:	b2d2      	uxtb	r2, r2
 800ada2:	701a      	strb	r2, [r3, #0]
    return offset;
 800ada4:	1cbb      	adds	r3, r7, #2
 800ada6:	881b      	ldrh	r3, [r3, #0]
}
 800ada8:	0018      	movs	r0, r3
 800adaa:	46bd      	mov	sp, r7
 800adac:	b002      	add	sp, #8
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800adb0:	b590      	push	{r4, r7, lr}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	0008      	movs	r0, r1
 800adba:	0011      	movs	r1, r2
 800adbc:	1cbb      	adds	r3, r7, #2
 800adbe:	1c02      	adds	r2, r0, #0
 800adc0:	801a      	strh	r2, [r3, #0]
 800adc2:	003b      	movs	r3, r7
 800adc4:	1c0a      	adds	r2, r1, #0
 800adc6:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800adc8:	003b      	movs	r3, r7
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	0a1b      	lsrs	r3, r3, #8
 800adce:	b299      	uxth	r1, r3
 800add0:	1cbb      	adds	r3, r7, #2
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	1cba      	adds	r2, r7, #2
 800add6:	1c58      	adds	r0, r3, #1
 800add8:	8010      	strh	r0, [r2, #0]
 800adda:	001a      	movs	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	189b      	adds	r3, r3, r2
 800ade0:	b2ca      	uxtb	r2, r1
 800ade2:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800ade4:	1cbb      	adds	r3, r7, #2
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	1cba      	adds	r2, r7, #2
 800adea:	1c59      	adds	r1, r3, #1
 800adec:	8011      	strh	r1, [r2, #0]
 800adee:	001a      	movs	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	189b      	adds	r3, r3, r2
 800adf4:	003a      	movs	r2, r7
 800adf6:	8812      	ldrh	r2, [r2, #0]
 800adf8:	b2d2      	uxtb	r2, r2
 800adfa:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800adfc:	1cbb      	adds	r3, r7, #2
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	3b02      	subs	r3, #2
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800ae06:	1cbb      	adds	r3, r7, #2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	18d4      	adds	r4, r2, r3
 800ae0e:	2102      	movs	r1, #2
 800ae10:	f7ff ff2c 	bl	800ac6c <sensirion_i2c_generate_crc>
 800ae14:	0003      	movs	r3, r0
 800ae16:	7023      	strb	r3, [r4, #0]
    offset++;
 800ae18:	1cbb      	adds	r3, r7, #2
 800ae1a:	881a      	ldrh	r2, [r3, #0]
 800ae1c:	1cbb      	adds	r3, r7, #2
 800ae1e:	3201      	adds	r2, #1
 800ae20:	801a      	strh	r2, [r3, #0]

    return offset;
 800ae22:	1cbb      	adds	r3, r7, #2
 800ae24:	881b      	ldrh	r3, [r3, #0]
}
 800ae26:	0018      	movs	r0, r3
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	b003      	add	sp, #12
 800ae2c:	bd90      	pop	{r4, r7, pc}

0800ae2e <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	0008      	movs	r0, r1
 800ae38:	0011      	movs	r1, r2
 800ae3a:	1cbb      	adds	r3, r7, #2
 800ae3c:	1c02      	adds	r2, r0, #0
 800ae3e:	801a      	strh	r2, [r3, #0]
 800ae40:	003b      	movs	r3, r7
 800ae42:	1c0a      	adds	r2, r1, #0
 800ae44:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800ae46:	003b      	movs	r3, r7
 800ae48:	881a      	ldrh	r2, [r3, #0]
 800ae4a:	1cbb      	adds	r3, r7, #2
 800ae4c:	8819      	ldrh	r1, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	0018      	movs	r0, r3
 800ae52:	f7ff ffad 	bl	800adb0 <sensirion_i2c_add_uint16_t_to_buffer>
 800ae56:	0003      	movs	r3, r0
}
 800ae58:	0018      	movs	r0, r3
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	b002      	add	sp, #8
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6039      	str	r1, [r7, #0]
 800ae68:	0011      	movs	r1, r2
 800ae6a:	1dfb      	adds	r3, r7, #7
 800ae6c:	1c02      	adds	r2, r0, #0
 800ae6e:	701a      	strb	r2, [r3, #0]
 800ae70:	1d3b      	adds	r3, r7, #4
 800ae72:	1c0a      	adds	r2, r1, #0
 800ae74:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800ae76:	1d3b      	adds	r3, r7, #4
 800ae78:	881a      	ldrh	r2, [r3, #0]
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	1dfb      	adds	r3, r7, #7
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	0018      	movs	r0, r3
 800ae82:	f7fe fa4d 	bl	8009320 <sensirion_i2c_hal_write>
 800ae86:	0003      	movs	r3, r0
}
 800ae88:	0018      	movs	r0, r3
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	b002      	add	sp, #8
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800ae90:	b5b0      	push	{r4, r5, r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6039      	str	r1, [r7, #0]
 800ae98:	0011      	movs	r1, r2
 800ae9a:	1dfb      	adds	r3, r7, #7
 800ae9c:	1c02      	adds	r2, r0, #0
 800ae9e:	701a      	strb	r2, [r3, #0]
 800aea0:	1d3b      	adds	r3, r7, #4
 800aea2:	1c0a      	adds	r2, r1, #0
 800aea4:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800aea6:	1d3b      	adds	r3, r7, #4
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	085b      	lsrs	r3, r3, #1
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	220a      	movs	r2, #10
 800aeb0:	18ba      	adds	r2, r7, r2
 800aeb2:	1c19      	adds	r1, r3, #0
 800aeb4:	1c0b      	adds	r3, r1, #0
 800aeb6:	18db      	adds	r3, r3, r3
 800aeb8:	185b      	adds	r3, r3, r1
 800aeba:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800aebc:	1d3b      	adds	r3, r7, #4
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	2201      	movs	r2, #1
 800aec2:	4013      	ands	r3, r2
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800aeca:	2304      	movs	r3, #4
 800aecc:	e06b      	b.n	800afa6 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800aece:	230a      	movs	r3, #10
 800aed0:	18fb      	adds	r3, r7, r3
 800aed2:	881a      	ldrh	r2, [r3, #0]
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	1dfb      	adds	r3, r7, #7
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	0018      	movs	r0, r3
 800aedc:	f7fe fa00 	bl	80092e0 <sensirion_i2c_hal_read>
 800aee0:	0003      	movs	r3, r0
 800aee2:	001a      	movs	r2, r3
 800aee4:	2108      	movs	r1, #8
 800aee6:	187b      	adds	r3, r7, r1
 800aee8:	801a      	strh	r2, [r3, #0]
    if (error) {
 800aeea:	000a      	movs	r2, r1
 800aeec:	18bb      	adds	r3, r7, r2
 800aeee:	2100      	movs	r1, #0
 800aef0:	5e5b      	ldrsh	r3, [r3, r1]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800aef6:	18bb      	adds	r3, r7, r2
 800aef8:	2200      	movs	r2, #0
 800aefa:	5e9b      	ldrsh	r3, [r3, r2]
 800aefc:	e053      	b.n	800afa6 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800aefe:	230e      	movs	r3, #14
 800af00:	18fb      	adds	r3, r7, r3
 800af02:	2200      	movs	r2, #0
 800af04:	801a      	strh	r2, [r3, #0]
 800af06:	230c      	movs	r3, #12
 800af08:	18fb      	adds	r3, r7, r3
 800af0a:	2200      	movs	r2, #0
 800af0c:	801a      	strh	r2, [r3, #0]
 800af0e:	e041      	b.n	800af94 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800af10:	210e      	movs	r1, #14
 800af12:	187b      	adds	r3, r7, r1
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800af1a:	187b      	adds	r3, r7, r1
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	3302      	adds	r3, #2
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	001a      	movs	r2, r3
 800af28:	2102      	movs	r1, #2
 800af2a:	f7ff fef5 	bl	800ad18 <sensirion_i2c_check_crc>
 800af2e:	0003      	movs	r3, r0
 800af30:	001a      	movs	r2, r3
 800af32:	2108      	movs	r1, #8
 800af34:	187b      	adds	r3, r7, r1
 800af36:	801a      	strh	r2, [r3, #0]
        if (error) {
 800af38:	000a      	movs	r2, r1
 800af3a:	18bb      	adds	r3, r7, r2
 800af3c:	2100      	movs	r1, #0
 800af3e:	5e5b      	ldrsh	r3, [r3, r1]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800af44:	18bb      	adds	r3, r7, r2
 800af46:	2200      	movs	r2, #0
 800af48:	5e9b      	ldrsh	r3, [r3, r2]
 800af4a:	e02c      	b.n	800afa6 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800af4c:	240e      	movs	r4, #14
 800af4e:	193b      	adds	r3, r7, r4
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	18d2      	adds	r2, r2, r3
 800af56:	250c      	movs	r5, #12
 800af58:	197b      	adds	r3, r7, r5
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	1979      	adds	r1, r7, r5
 800af5e:	1c58      	adds	r0, r3, #1
 800af60:	8008      	strh	r0, [r1, #0]
 800af62:	0019      	movs	r1, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	185b      	adds	r3, r3, r1
 800af68:	7812      	ldrb	r2, [r2, #0]
 800af6a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800af6c:	193b      	adds	r3, r7, r4
 800af6e:	881b      	ldrh	r3, [r3, #0]
 800af70:	3301      	adds	r3, #1
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	18d2      	adds	r2, r2, r3
 800af76:	197b      	adds	r3, r7, r5
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	1979      	adds	r1, r7, r5
 800af7c:	1c58      	adds	r0, r3, #1
 800af7e:	8008      	strh	r0, [r1, #0]
 800af80:	0019      	movs	r1, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	185b      	adds	r3, r3, r1
 800af86:	7812      	ldrb	r2, [r2, #0]
 800af88:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800af8a:	193b      	adds	r3, r7, r4
 800af8c:	193a      	adds	r2, r7, r4
 800af8e:	8812      	ldrh	r2, [r2, #0]
 800af90:	3203      	adds	r2, #3
 800af92:	801a      	strh	r2, [r3, #0]
 800af94:	230e      	movs	r3, #14
 800af96:	18fa      	adds	r2, r7, r3
 800af98:	230a      	movs	r3, #10
 800af9a:	18fb      	adds	r3, r7, r3
 800af9c:	8812      	ldrh	r2, [r2, #0]
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d3b5      	bcc.n	800af10 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	0018      	movs	r0, r3
 800afa8:	46bd      	mov	sp, r7
 800afaa:	b004      	add	sp, #16
 800afac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800afb0 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800afb0:	b590      	push	{r4, r7, lr}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6039      	str	r1, [r7, #0]
 800afb8:	0011      	movs	r1, r2
 800afba:	1dfb      	adds	r3, r7, #7
 800afbc:	1c02      	adds	r2, r0, #0
 800afbe:	701a      	strb	r2, [r3, #0]
 800afc0:	1dbb      	adds	r3, r7, #6
 800afc2:	1c0a      	adds	r2, r1, #0
 800afc4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800afc6:	4b08      	ldr	r3, [pc, #32]	@ (800afe8 <ReadRegister+0x38>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d008      	beq.n	800afe0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800afce:	4b06      	ldr	r3, [pc, #24]	@ (800afe8 <ReadRegister+0x38>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	1dba      	adds	r2, r7, #6
 800afd4:	7814      	ldrb	r4, [r2, #0]
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	1dfa      	adds	r2, r7, #7
 800afda:	7810      	ldrb	r0, [r2, #0]
 800afdc:	0022      	movs	r2, r4
 800afde:	4798      	blx	r3
  }
}
 800afe0:	46c0      	nop			@ (mov r8, r8)
 800afe2:	46bd      	mov	sp, r7
 800afe4:	b003      	add	sp, #12
 800afe6:	bd90      	pop	{r4, r7, pc}
 800afe8:	200011e0 	.word	0x200011e0

0800afec <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800afec:	b590      	push	{r4, r7, lr}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6039      	str	r1, [r7, #0]
 800aff4:	0011      	movs	r1, r2
 800aff6:	1dfb      	adds	r3, r7, #7
 800aff8:	1c02      	adds	r2, r0, #0
 800affa:	701a      	strb	r2, [r3, #0]
 800affc:	1dbb      	adds	r3, r7, #6
 800affe:	1c0a      	adds	r2, r1, #0
 800b000:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b002:	4b08      	ldr	r3, [pc, #32]	@ (800b024 <WriteRegister+0x38>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d008      	beq.n	800b01c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b00a:	4b06      	ldr	r3, [pc, #24]	@ (800b024 <WriteRegister+0x38>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	1dba      	adds	r2, r7, #6
 800b010:	7814      	ldrb	r4, [r2, #0]
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	1dfa      	adds	r2, r7, #7
 800b016:	7810      	ldrb	r0, [r2, #0]
 800b018:	0022      	movs	r2, r4
 800b01a:	4798      	blx	r3
  }
}
 800b01c:	46c0      	nop			@ (mov r8, r8)
 800b01e:	46bd      	mov	sp, r7
 800b020:	b003      	add	sp, #12
 800b022:	bd90      	pop	{r4, r7, pc}
 800b024:	200011e4 	.word	0x200011e4

0800b028 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b032:	4b07      	ldr	r3, [pc, #28]	@ (800b050 <SGP_Init+0x28>)
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b038:	4b06      	ldr	r3, [pc, #24]	@ (800b054 <SGP_Init+0x2c>)
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b03e:	4b06      	ldr	r3, [pc, #24]	@ (800b058 <SGP_Init+0x30>)
 800b040:	2100      	movs	r1, #0
 800b042:	0018      	movs	r0, r3
 800b044:	f7fe ff8e 	bl	8009f64 <GasIndexAlgorithm_init>
}
 800b048:	46c0      	nop			@ (mov r8, r8)
 800b04a:	46bd      	mov	sp, r7
 800b04c:	b002      	add	sp, #8
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	200011e0 	.word	0x200011e0
 800b054:	200011e4 	.word	0x200011e4
 800b058:	200011fc 	.word	0x200011fc

0800b05c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b060:	4b13      	ldr	r3, [pc, #76]	@ (800b0b0 <SGP_StartMeasurement+0x54>)
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00d      	beq.n	800b084 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b068:	4b12      	ldr	r3, [pc, #72]	@ (800b0b4 <SGP_StartMeasurement+0x58>)
 800b06a:	2208      	movs	r2, #8
 800b06c:	0019      	movs	r1, r3
 800b06e:	2059      	movs	r0, #89	@ 0x59
 800b070:	f7ff ffbc 	bl	800afec <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b074:	f003 f948 	bl	800e308 <HAL_GetTick>
 800b078:	0003      	movs	r3, r0
 800b07a:	331e      	adds	r3, #30
 800b07c:	001a      	movs	r2, r3
 800b07e:	4b0e      	ldr	r3, [pc, #56]	@ (800b0b8 <SGP_StartMeasurement+0x5c>)
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	e00c      	b.n	800b09e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b084:	4b0d      	ldr	r3, [pc, #52]	@ (800b0bc <SGP_StartMeasurement+0x60>)
 800b086:	2208      	movs	r2, #8
 800b088:	0019      	movs	r1, r3
 800b08a:	2059      	movs	r0, #89	@ 0x59
 800b08c:	f7ff ffae 	bl	800afec <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b090:	f003 f93a 	bl	800e308 <HAL_GetTick>
 800b094:	0003      	movs	r3, r0
 800b096:	33aa      	adds	r3, #170	@ 0xaa
 800b098:	001a      	movs	r2, r3
 800b09a:	4b09      	ldr	r3, [pc, #36]	@ (800b0c0 <SGP_StartMeasurement+0x64>)
 800b09c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b09e:	4b09      	ldr	r3, [pc, #36]	@ (800b0c4 <SGP_StartMeasurement+0x68>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b0a4:	4b08      	ldr	r3, [pc, #32]	@ (800b0c8 <SGP_StartMeasurement+0x6c>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	701a      	strb	r2, [r3, #0]
}
 800b0aa:	46c0      	nop			@ (mov r8, r8)
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	200012a4 	.word	0x200012a4
 800b0b4:	20000094 	.word	0x20000094
 800b0b8:	200000a8 	.word	0x200000a8
 800b0bc:	2000008c 	.word	0x2000008c
 800b0c0:	200000a0 	.word	0x200000a0
 800b0c4:	200011f8 	.word	0x200011f8
 800b0c8:	200011f9 	.word	0x200011f9

0800b0cc <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b0d0:	4b04      	ldr	r3, [pc, #16]	@ (800b0e4 <SGP_HeatedUp+0x18>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	f002 fc75 	bl	800d9c4 <TimestampIsReached>
 800b0da:	0003      	movs	r3, r0
}
 800b0dc:	0018      	movs	r0, r3
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	46c0      	nop			@ (mov r8, r8)
 800b0e4:	200000a0 	.word	0x200000a0

0800b0e8 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b0ec:	4b04      	ldr	r3, [pc, #16]	@ (800b100 <SGP_MeasurementReady+0x18>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	f002 fc67 	bl	800d9c4 <TimestampIsReached>
 800b0f6:	0003      	movs	r3, r0
}
 800b0f8:	0018      	movs	r0, r3
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	46c0      	nop			@ (mov r8, r8)
 800b100:	200000a8 	.word	0x200000a8

0800b104 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b108:	4b04      	ldr	r3, [pc, #16]	@ (800b11c <SGP_MeasurementDone+0x18>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	0018      	movs	r0, r3
 800b10e:	f002 fc59 	bl	800d9c4 <TimestampIsReached>
 800b112:	0003      	movs	r3, r0
}
 800b114:	0018      	movs	r0, r3
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	46c0      	nop			@ (mov r8, r8)
 800b11c:	200000a4 	.word	0x200000a4

0800b120 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b124:	4b04      	ldr	r3, [pc, #16]	@ (800b138 <SGP_TurnHeaterOff+0x18>)
 800b126:	2202      	movs	r2, #2
 800b128:	0019      	movs	r1, r3
 800b12a:	2059      	movs	r0, #89	@ 0x59
 800b12c:	f7ff ff5e 	bl	800afec <WriteRegister>
}
 800b130:	46c0      	nop			@ (mov r8, r8)
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	46c0      	nop			@ (mov r8, r8)
 800b138:	20000084 	.word	0x20000084

0800b13c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b13c:	b5b0      	push	{r4, r5, r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af02      	add	r7, sp, #8
 800b142:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b144:	f7ff ffc2 	bl	800b0cc <SGP_HeatedUp>
 800b148:	1e03      	subs	r3, r0, #0
 800b14a:	d032      	beq.n	800b1b2 <SGP_GetMeasurementValues+0x76>
 800b14c:	4bd4      	ldr	r3, [pc, #848]	@ (800b4a0 <SGP_GetMeasurementValues+0x364>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	2201      	movs	r2, #1
 800b152:	4053      	eors	r3, r2
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d02b      	beq.n	800b1b2 <SGP_GetMeasurementValues+0x76>
 800b15a:	4bd2      	ldr	r3, [pc, #840]	@ (800b4a4 <SGP_GetMeasurementValues+0x368>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2201      	movs	r2, #1
 800b160:	4053      	eors	r3, r2
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	d024      	beq.n	800b1b2 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b168:	4bcd      	ldr	r3, [pc, #820]	@ (800b4a0 <SGP_GetMeasurementValues+0x364>)
 800b16a:	2201      	movs	r2, #1
 800b16c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b16e:	4bce      	ldr	r3, [pc, #824]	@ (800b4a8 <SGP_GetMeasurementValues+0x36c>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00d      	beq.n	800b192 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b176:	4bcd      	ldr	r3, [pc, #820]	@ (800b4ac <SGP_GetMeasurementValues+0x370>)
 800b178:	2208      	movs	r2, #8
 800b17a:	0019      	movs	r1, r3
 800b17c:	2059      	movs	r0, #89	@ 0x59
 800b17e:	f7ff ff35 	bl	800afec <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b182:	f003 f8c1 	bl	800e308 <HAL_GetTick>
 800b186:	0003      	movs	r3, r0
 800b188:	331e      	adds	r3, #30
 800b18a:	001a      	movs	r2, r3
 800b18c:	4bc8      	ldr	r3, [pc, #800]	@ (800b4b0 <SGP_GetMeasurementValues+0x374>)
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	e00c      	b.n	800b1ac <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b192:	4bc8      	ldr	r3, [pc, #800]	@ (800b4b4 <SGP_GetMeasurementValues+0x378>)
 800b194:	2208      	movs	r2, #8
 800b196:	0019      	movs	r1, r3
 800b198:	2059      	movs	r0, #89	@ 0x59
 800b19a:	f7ff ff27 	bl	800afec <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b19e:	f003 f8b3 	bl	800e308 <HAL_GetTick>
 800b1a2:	0003      	movs	r3, r0
 800b1a4:	331e      	adds	r3, #30
 800b1a6:	001a      	movs	r2, r3
 800b1a8:	4bc1      	ldr	r3, [pc, #772]	@ (800b4b0 <SGP_GetMeasurementValues+0x374>)
 800b1aa:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b1ac:	4bbd      	ldr	r3, [pc, #756]	@ (800b4a4 <SGP_GetMeasurementValues+0x368>)
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b1b2:	4bbb      	ldr	r3, [pc, #748]	@ (800b4a0 <SGP_GetMeasurementValues+0x364>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d100      	bne.n	800b1bc <SGP_GetMeasurementValues+0x80>
 800b1ba:	e1a9      	b.n	800b510 <SGP_GetMeasurementValues+0x3d4>
 800b1bc:	f7ff ff94 	bl	800b0e8 <SGP_MeasurementReady>
 800b1c0:	1e03      	subs	r3, r0, #0
 800b1c2:	d100      	bne.n	800b1c6 <SGP_GetMeasurementValues+0x8a>
 800b1c4:	e1a4      	b.n	800b510 <SGP_GetMeasurementValues+0x3d4>
 800b1c6:	4bbc      	ldr	r3, [pc, #752]	@ (800b4b8 <SGP_GetMeasurementValues+0x37c>)
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	4053      	eors	r3, r2
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d100      	bne.n	800b1d6 <SGP_GetMeasurementValues+0x9a>
 800b1d4:	e19c      	b.n	800b510 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b1d6:	4bb8      	ldr	r3, [pc, #736]	@ (800b4b8 <SGP_GetMeasurementValues+0x37c>)
 800b1d8:	2201      	movs	r2, #1
 800b1da:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b1dc:	4bb7      	ldr	r3, [pc, #732]	@ (800b4bc <SGP_GetMeasurementValues+0x380>)
 800b1de:	2203      	movs	r2, #3
 800b1e0:	0019      	movs	r1, r3
 800b1e2:	2059      	movs	r0, #89	@ 0x59
 800b1e4:	f7ff fee4 	bl	800afb0 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b1e8:	4bb4      	ldr	r3, [pc, #720]	@ (800b4bc <SGP_GetMeasurementValues+0x380>)
 800b1ea:	2203      	movs	r2, #3
 800b1ec:	2103      	movs	r1, #3
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	f000 f9f4 	bl	800b5dc <CheckCRC>
 800b1f4:	0003      	movs	r3, r0
 800b1f6:	001a      	movs	r2, r3
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	4053      	eors	r3, r2
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d02a      	beq.n	800b258 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b202:	4aaf      	ldr	r2, [pc, #700]	@ (800b4c0 <SGP_GetMeasurementValues+0x384>)
 800b204:	4baf      	ldr	r3, [pc, #700]	@ (800b4c4 <SGP_GetMeasurementValues+0x388>)
 800b206:	0019      	movs	r1, r3
 800b208:	2001      	movs	r0, #1
 800b20a:	f002 fc31 	bl	800da70 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b20e:	4aae      	ldr	r2, [pc, #696]	@ (800b4c8 <SGP_GetMeasurementValues+0x38c>)
 800b210:	4bae      	ldr	r3, [pc, #696]	@ (800b4cc <SGP_GetMeasurementValues+0x390>)
 800b212:	0019      	movs	r1, r3
 800b214:	2002      	movs	r0, #2
 800b216:	f002 fc2b 	bl	800da70 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b21a:	230f      	movs	r3, #15
 800b21c:	18fb      	adds	r3, r7, r3
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]
 800b222:	e012      	b.n	800b24a <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b224:	240f      	movs	r4, #15
 800b226:	193b      	adds	r3, r7, r4
 800b228:	7818      	ldrb	r0, [r3, #0]
 800b22a:	193b      	adds	r3, r7, r4
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	4aa3      	ldr	r2, [pc, #652]	@ (800b4bc <SGP_GetMeasurementValues+0x380>)
 800b230:	5cd3      	ldrb	r3, [r2, r3]
 800b232:	4aa7      	ldr	r2, [pc, #668]	@ (800b4d0 <SGP_GetMeasurementValues+0x394>)
 800b234:	49a7      	ldr	r1, [pc, #668]	@ (800b4d4 <SGP_GetMeasurementValues+0x398>)
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	0003      	movs	r3, r0
 800b23a:	2003      	movs	r0, #3
 800b23c:	f002 fc18 	bl	800da70 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b240:	193b      	adds	r3, r7, r4
 800b242:	781a      	ldrb	r2, [r3, #0]
 800b244:	193b      	adds	r3, r7, r4
 800b246:	3201      	adds	r2, #1
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	230f      	movs	r3, #15
 800b24c:	18fb      	adds	r3, r7, r3
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	2b02      	cmp	r3, #2
 800b252:	d9e7      	bls.n	800b224 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b254:	2300      	movs	r3, #0
 800b256:	e173      	b.n	800b540 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b258:	f003 f856 	bl	800e308 <HAL_GetTick>
 800b25c:	0003      	movs	r3, r0
 800b25e:	22fa      	movs	r2, #250	@ 0xfa
 800b260:	0092      	lsls	r2, r2, #2
 800b262:	189a      	adds	r2, r3, r2
 800b264:	4b9c      	ldr	r3, [pc, #624]	@ (800b4d8 <SGP_GetMeasurementValues+0x39c>)
 800b266:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b268:	f7ff ff5a 	bl	800b120 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b26c:	4b9b      	ldr	r3, [pc, #620]	@ (800b4dc <SGP_GetMeasurementValues+0x3a0>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	3301      	adds	r3, #1
 800b272:	b2da      	uxtb	r2, r3
 800b274:	4b99      	ldr	r3, [pc, #612]	@ (800b4dc <SGP_GetMeasurementValues+0x3a0>)
 800b276:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b278:	4b98      	ldr	r3, [pc, #608]	@ (800b4dc <SGP_GetMeasurementValues+0x3a0>)
 800b27a:	781a      	ldrb	r2, [r3, #0]
 800b27c:	4b98      	ldr	r3, [pc, #608]	@ (800b4e0 <SGP_GetMeasurementValues+0x3a4>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d200      	bcs.n	800b286 <SGP_GetMeasurementValues+0x14a>
 800b284:	e144      	b.n	800b510 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b286:	4b8d      	ldr	r3, [pc, #564]	@ (800b4bc <SGP_GetMeasurementValues+0x380>)
 800b288:	785b      	ldrb	r3, [r3, #1]
 800b28a:	021b      	lsls	r3, r3, #8
 800b28c:	b21a      	sxth	r2, r3
 800b28e:	4b8b      	ldr	r3, [pc, #556]	@ (800b4bc <SGP_GetMeasurementValues+0x380>)
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	b21b      	sxth	r3, r3
 800b294:	4313      	orrs	r3, r2
 800b296:	b21a      	sxth	r2, r3
 800b298:	240c      	movs	r4, #12
 800b29a:	193b      	adds	r3, r7, r4
 800b29c:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b2a2:	193b      	adds	r3, r7, r4
 800b2a4:	8819      	ldrh	r1, [r3, #0]
 800b2a6:	2308      	movs	r3, #8
 800b2a8:	18fa      	adds	r2, r7, r3
 800b2aa:	4b8e      	ldr	r3, [pc, #568]	@ (800b4e4 <SGP_GetMeasurementValues+0x3a8>)
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	f7fe febb 	bl	800a028 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b2b2:	4b8d      	ldr	r3, [pc, #564]	@ (800b4e8 <SGP_GetMeasurementValues+0x3ac>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	4b8b      	ldr	r3, [pc, #556]	@ (800b4e8 <SGP_GetMeasurementValues+0x3ac>)
 800b2bc:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b2be:	4b8a      	ldr	r3, [pc, #552]	@ (800b4e8 <SGP_GetMeasurementValues+0x3ac>)
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d10d      	bne.n	800b2e2 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b2c6:	193b      	adds	r3, r7, r4
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	4a88      	ldr	r2, [pc, #544]	@ (800b4ec <SGP_GetMeasurementValues+0x3b0>)
 800b2cc:	4981      	ldr	r1, [pc, #516]	@ (800b4d4 <SGP_GetMeasurementValues+0x398>)
 800b2ce:	2003      	movs	r0, #3
 800b2d0:	f002 fbce 	bl	800da70 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	4a86      	ldr	r2, [pc, #536]	@ (800b4f0 <SGP_GetMeasurementValues+0x3b4>)
 800b2d8:	497e      	ldr	r1, [pc, #504]	@ (800b4d4 <SGP_GetMeasurementValues+0x398>)
 800b2da:	2003      	movs	r0, #3
 800b2dc:	f002 fbc8 	bl	800da70 <CreateLine>
 800b2e0:	e006      	b.n	800b2f0 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b2e2:	4b81      	ldr	r3, [pc, #516]	@ (800b4e8 <SGP_GetMeasurementValues+0x3ac>)
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b0b      	cmp	r3, #11
 800b2e8:	d102      	bne.n	800b2f0 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b2ea:	4b7f      	ldr	r3, [pc, #508]	@ (800b4e8 <SGP_GetMeasurementValues+0x3ac>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dd5a      	ble.n	800b3b4 <SGP_GetMeasurementValues+0x278>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b64      	cmp	r3, #100	@ 0x64
 800b304:	dc56      	bgt.n	800b3b4 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	0018      	movs	r0, r3
 800b30c:	f7f8 f858 	bl	80033c0 <__aeabi_i2d>
 800b310:	2200      	movs	r2, #0
 800b312:	4b78      	ldr	r3, [pc, #480]	@ (800b4f4 <SGP_GetMeasurementValues+0x3b8>)
 800b314:	f7f6 fd4e 	bl	8001db4 <__aeabi_ddiv>
 800b318:	0002      	movs	r2, r0
 800b31a:	000b      	movs	r3, r1
 800b31c:	2000      	movs	r0, #0
 800b31e:	4976      	ldr	r1, [pc, #472]	@ (800b4f8 <SGP_GetMeasurementValues+0x3bc>)
 800b320:	f7f7 fc54 	bl	8002bcc <__aeabi_dsub>
 800b324:	0002      	movs	r2, r0
 800b326:	000b      	movs	r3, r1
 800b328:	0014      	movs	r4, r2
 800b32a:	001d      	movs	r5, r3
 800b32c:	4b73      	ldr	r3, [pc, #460]	@ (800b4fc <SGP_GetMeasurementValues+0x3c0>)
 800b32e:	881b      	ldrh	r3, [r3, #0]
 800b330:	0018      	movs	r0, r3
 800b332:	f7f8 f845 	bl	80033c0 <__aeabi_i2d>
 800b336:	0002      	movs	r2, r0
 800b338:	000b      	movs	r3, r1
 800b33a:	0020      	movs	r0, r4
 800b33c:	0029      	movs	r1, r5
 800b33e:	f7f7 f97d 	bl	800263c <__aeabi_dmul>
 800b342:	0002      	movs	r2, r0
 800b344:	000b      	movs	r3, r1
 800b346:	0010      	movs	r0, r2
 800b348:	0019      	movs	r1, r3
 800b34a:	f7f5 f97f 	bl	800064c <__aeabi_d2uiz>
 800b34e:	0003      	movs	r3, r0
 800b350:	b29a      	uxth	r2, r3
 800b352:	4b6b      	ldr	r3, [pc, #428]	@ (800b500 <SGP_GetMeasurementValues+0x3c4>)
 800b354:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	0018      	movs	r0, r3
 800b35c:	f7f8 f830 	bl	80033c0 <__aeabi_i2d>
 800b360:	2200      	movs	r2, #0
 800b362:	4b64      	ldr	r3, [pc, #400]	@ (800b4f4 <SGP_GetMeasurementValues+0x3b8>)
 800b364:	f7f6 fd26 	bl	8001db4 <__aeabi_ddiv>
 800b368:	0002      	movs	r2, r0
 800b36a:	000b      	movs	r3, r1
 800b36c:	0014      	movs	r4, r2
 800b36e:	001d      	movs	r5, r3
 800b370:	4b62      	ldr	r3, [pc, #392]	@ (800b4fc <SGP_GetMeasurementValues+0x3c0>)
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	0018      	movs	r0, r3
 800b376:	f7f8 f823 	bl	80033c0 <__aeabi_i2d>
 800b37a:	0002      	movs	r2, r0
 800b37c:	000b      	movs	r3, r1
 800b37e:	0020      	movs	r0, r4
 800b380:	0029      	movs	r1, r5
 800b382:	f7f7 f95b 	bl	800263c <__aeabi_dmul>
 800b386:	0002      	movs	r2, r0
 800b388:	000b      	movs	r3, r1
 800b38a:	0010      	movs	r0, r2
 800b38c:	0019      	movs	r1, r3
 800b38e:	f7f5 f95d 	bl	800064c <__aeabi_d2uiz>
 800b392:	0003      	movs	r3, r0
 800b394:	b29a      	uxth	r2, r3
 800b396:	4b5b      	ldr	r3, [pc, #364]	@ (800b504 <SGP_GetMeasurementValues+0x3c8>)
 800b398:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800b39a:	4b58      	ldr	r3, [pc, #352]	@ (800b4fc <SGP_GetMeasurementValues+0x3c0>)
 800b39c:	881a      	ldrh	r2, [r3, #0]
 800b39e:	4b5a      	ldr	r3, [pc, #360]	@ (800b508 <SGP_GetMeasurementValues+0x3cc>)
 800b3a0:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b3a2:	4b59      	ldr	r3, [pc, #356]	@ (800b508 <SGP_GetMeasurementValues+0x3cc>)
 800b3a4:	8818      	ldrh	r0, [r3, #0]
 800b3a6:	4b56      	ldr	r3, [pc, #344]	@ (800b500 <SGP_GetMeasurementValues+0x3c4>)
 800b3a8:	8819      	ldrh	r1, [r3, #0]
 800b3aa:	4b56      	ldr	r3, [pc, #344]	@ (800b504 <SGP_GetMeasurementValues+0x3c8>)
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	001a      	movs	r2, r3
 800b3b0:	f001 fbd4 	bl	800cb5c <SetVocLED>
      }
      if(*vocIndex > 100){
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b64      	cmp	r3, #100	@ 0x64
 800b3ba:	dd66      	ble.n	800b48a <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	f7f7 fffd 	bl	80033c0 <__aeabi_i2d>
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	4b4a      	ldr	r3, [pc, #296]	@ (800b4f4 <SGP_GetMeasurementValues+0x3b8>)
 800b3ca:	f7f7 fbff 	bl	8002bcc <__aeabi_dsub>
 800b3ce:	0002      	movs	r2, r0
 800b3d0:	000b      	movs	r3, r1
 800b3d2:	0010      	movs	r0, r2
 800b3d4:	0019      	movs	r1, r3
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	4b4c      	ldr	r3, [pc, #304]	@ (800b50c <SGP_GetMeasurementValues+0x3d0>)
 800b3da:	f7f6 fceb 	bl	8001db4 <__aeabi_ddiv>
 800b3de:	0002      	movs	r2, r0
 800b3e0:	000b      	movs	r3, r1
 800b3e2:	0014      	movs	r4, r2
 800b3e4:	001d      	movs	r5, r3
 800b3e6:	4b45      	ldr	r3, [pc, #276]	@ (800b4fc <SGP_GetMeasurementValues+0x3c0>)
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f7f7 ffe8 	bl	80033c0 <__aeabi_i2d>
 800b3f0:	0002      	movs	r2, r0
 800b3f2:	000b      	movs	r3, r1
 800b3f4:	0020      	movs	r0, r4
 800b3f6:	0029      	movs	r1, r5
 800b3f8:	f7f7 f920 	bl	800263c <__aeabi_dmul>
 800b3fc:	0002      	movs	r2, r0
 800b3fe:	000b      	movs	r3, r1
 800b400:	0010      	movs	r0, r2
 800b402:	0019      	movs	r1, r3
 800b404:	f7f5 f922 	bl	800064c <__aeabi_d2uiz>
 800b408:	0003      	movs	r3, r0
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	4b3c      	ldr	r3, [pc, #240]	@ (800b500 <SGP_GetMeasurementValues+0x3c4>)
 800b40e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	0018      	movs	r0, r3
 800b416:	f7f7 ffd3 	bl	80033c0 <__aeabi_i2d>
 800b41a:	2200      	movs	r2, #0
 800b41c:	4b35      	ldr	r3, [pc, #212]	@ (800b4f4 <SGP_GetMeasurementValues+0x3b8>)
 800b41e:	f7f7 fbd5 	bl	8002bcc <__aeabi_dsub>
 800b422:	0002      	movs	r2, r0
 800b424:	000b      	movs	r3, r1
 800b426:	0010      	movs	r0, r2
 800b428:	0019      	movs	r1, r3
 800b42a:	2200      	movs	r2, #0
 800b42c:	4b37      	ldr	r3, [pc, #220]	@ (800b50c <SGP_GetMeasurementValues+0x3d0>)
 800b42e:	f7f6 fcc1 	bl	8001db4 <__aeabi_ddiv>
 800b432:	0002      	movs	r2, r0
 800b434:	000b      	movs	r3, r1
 800b436:	2000      	movs	r0, #0
 800b438:	492f      	ldr	r1, [pc, #188]	@ (800b4f8 <SGP_GetMeasurementValues+0x3bc>)
 800b43a:	f7f7 fbc7 	bl	8002bcc <__aeabi_dsub>
 800b43e:	0002      	movs	r2, r0
 800b440:	000b      	movs	r3, r1
 800b442:	0014      	movs	r4, r2
 800b444:	001d      	movs	r5, r3
 800b446:	4b2d      	ldr	r3, [pc, #180]	@ (800b4fc <SGP_GetMeasurementValues+0x3c0>)
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	0018      	movs	r0, r3
 800b44c:	f7f7 ffb8 	bl	80033c0 <__aeabi_i2d>
 800b450:	0002      	movs	r2, r0
 800b452:	000b      	movs	r3, r1
 800b454:	0020      	movs	r0, r4
 800b456:	0029      	movs	r1, r5
 800b458:	f7f7 f8f0 	bl	800263c <__aeabi_dmul>
 800b45c:	0002      	movs	r2, r0
 800b45e:	000b      	movs	r3, r1
 800b460:	0010      	movs	r0, r2
 800b462:	0019      	movs	r1, r3
 800b464:	f7f5 f8f2 	bl	800064c <__aeabi_d2uiz>
 800b468:	0003      	movs	r3, r0
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	4b26      	ldr	r3, [pc, #152]	@ (800b508 <SGP_GetMeasurementValues+0x3cc>)
 800b46e:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b470:	4b22      	ldr	r3, [pc, #136]	@ (800b4fc <SGP_GetMeasurementValues+0x3c0>)
 800b472:	881a      	ldrh	r2, [r3, #0]
 800b474:	4b23      	ldr	r3, [pc, #140]	@ (800b504 <SGP_GetMeasurementValues+0x3c8>)
 800b476:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b478:	4b23      	ldr	r3, [pc, #140]	@ (800b508 <SGP_GetMeasurementValues+0x3cc>)
 800b47a:	8818      	ldrh	r0, [r3, #0]
 800b47c:	4b20      	ldr	r3, [pc, #128]	@ (800b500 <SGP_GetMeasurementValues+0x3c4>)
 800b47e:	8819      	ldrh	r1, [r3, #0]
 800b480:	4b20      	ldr	r3, [pc, #128]	@ (800b504 <SGP_GetMeasurementValues+0x3c8>)
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	001a      	movs	r2, r3
 800b486:	f001 fb69 	bl	800cb5c <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b48a:	4b14      	ldr	r3, [pc, #80]	@ (800b4dc <SGP_GetMeasurementValues+0x3a0>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b490:	4b05      	ldr	r3, [pc, #20]	@ (800b4a8 <SGP_GetMeasurementValues+0x36c>)
 800b492:	2200      	movs	r2, #0
 800b494:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b496:	4b03      	ldr	r3, [pc, #12]	@ (800b4a4 <SGP_GetMeasurementValues+0x368>)
 800b498:	2200      	movs	r2, #0
 800b49a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e04f      	b.n	800b540 <SGP_GetMeasurementValues+0x404>
 800b4a0:	200011f8 	.word	0x200011f8
 800b4a4:	200012a5 	.word	0x200012a5
 800b4a8:	200012a4 	.word	0x200012a4
 800b4ac:	20000094 	.word	0x20000094
 800b4b0:	200000a8 	.word	0x200000a8
 800b4b4:	2000008c 	.word	0x2000008c
 800b4b8:	200011f9 	.word	0x200011f9
 800b4bc:	200011e8 	.word	0x200011e8
 800b4c0:	08023f58 	.word	0x08023f58
 800b4c4:	08023f80 	.word	0x08023f80
 800b4c8:	08023f84 	.word	0x08023f84
 800b4cc:	08023fa4 	.word	0x08023fa4
 800b4d0:	08023fa8 	.word	0x08023fa8
 800b4d4:	08023fc8 	.word	0x08023fc8
 800b4d8:	200000a4 	.word	0x200000a4
 800b4dc:	200011f1 	.word	0x200011f1
 800b4e0:	2000009e 	.word	0x2000009e
 800b4e4:	200011fc 	.word	0x200011fc
 800b4e8:	200011f2 	.word	0x200011f2
 800b4ec:	08023fcc 	.word	0x08023fcc
 800b4f0:	08023fe8 	.word	0x08023fe8
 800b4f4:	40590000 	.word	0x40590000
 800b4f8:	3ff00000 	.word	0x3ff00000
 800b4fc:	200000ac 	.word	0x200000ac
 800b500:	200012b0 	.word	0x200012b0
 800b504:	200012ae 	.word	0x200012ae
 800b508:	200012ac 	.word	0x200012ac
 800b50c:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b510:	f7ff fdf8 	bl	800b104 <SGP_MeasurementDone>
 800b514:	1e03      	subs	r3, r0, #0
 800b516:	d012      	beq.n	800b53e <SGP_GetMeasurementValues+0x402>
 800b518:	4b0b      	ldr	r3, [pc, #44]	@ (800b548 <SGP_GetMeasurementValues+0x40c>)
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00e      	beq.n	800b53e <SGP_GetMeasurementValues+0x402>
 800b520:	4b0a      	ldr	r3, [pc, #40]	@ (800b54c <SGP_GetMeasurementValues+0x410>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00a      	beq.n	800b53e <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b528:	4a09      	ldr	r2, [pc, #36]	@ (800b550 <SGP_GetMeasurementValues+0x414>)
 800b52a:	4b0a      	ldr	r3, [pc, #40]	@ (800b554 <SGP_GetMeasurementValues+0x418>)
 800b52c:	0019      	movs	r1, r3
 800b52e:	2003      	movs	r0, #3
 800b530:	f002 fa9e 	bl	800da70 <CreateLine>
    SGP_StartMeasurement();
 800b534:	f7ff fd92 	bl	800b05c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b538:	4b07      	ldr	r3, [pc, #28]	@ (800b558 <SGP_GetMeasurementValues+0x41c>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	0018      	movs	r0, r3
 800b542:	46bd      	mov	sp, r7
 800b544:	b004      	add	sp, #16
 800b546:	bdb0      	pop	{r4, r5, r7, pc}
 800b548:	200011f8 	.word	0x200011f8
 800b54c:	200011f9 	.word	0x200011f9
 800b550:	08024004 	.word	0x08024004
 800b554:	08023fc8 	.word	0x08023fc8
 800b558:	200012a5 	.word	0x200012a5

0800b55c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b562:	4b1a      	ldr	r3, [pc, #104]	@ (800b5cc <SGP_DeviceConnected+0x70>)
 800b564:	2202      	movs	r2, #2
 800b566:	0019      	movs	r1, r3
 800b568:	2059      	movs	r0, #89	@ 0x59
 800b56a:	f7ff fd3f 	bl	800afec <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b56e:	2001      	movs	r0, #1
 800b570:	f002 fed4 	bl	800e31c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b574:	4b16      	ldr	r3, [pc, #88]	@ (800b5d0 <SGP_DeviceConnected+0x74>)
 800b576:	2209      	movs	r2, #9
 800b578:	0019      	movs	r1, r3
 800b57a:	2059      	movs	r0, #89	@ 0x59
 800b57c:	f7ff fd18 	bl	800afb0 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b580:	1dfb      	adds	r3, r7, #7
 800b582:	2200      	movs	r2, #0
 800b584:	701a      	strb	r2, [r3, #0]
 800b586:	e011      	b.n	800b5ac <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b588:	1dfb      	adds	r3, r7, #7
 800b58a:	7818      	ldrb	r0, [r3, #0]
 800b58c:	1dfb      	adds	r3, r7, #7
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	4a0f      	ldr	r2, [pc, #60]	@ (800b5d0 <SGP_DeviceConnected+0x74>)
 800b592:	5cd3      	ldrb	r3, [r2, r3]
 800b594:	4a0f      	ldr	r2, [pc, #60]	@ (800b5d4 <SGP_DeviceConnected+0x78>)
 800b596:	4910      	ldr	r1, [pc, #64]	@ (800b5d8 <SGP_DeviceConnected+0x7c>)
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	0003      	movs	r3, r0
 800b59c:	2002      	movs	r0, #2
 800b59e:	f002 fa67 	bl	800da70 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b5a2:	1dfb      	adds	r3, r7, #7
 800b5a4:	781a      	ldrb	r2, [r3, #0]
 800b5a6:	1dfb      	adds	r3, r7, #7
 800b5a8:	3201      	adds	r2, #1
 800b5aa:	701a      	strb	r2, [r3, #0]
 800b5ac:	1dfb      	adds	r3, r7, #7
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b08      	cmp	r3, #8
 800b5b2:	d9e9      	bls.n	800b588 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b5b4:	4b06      	ldr	r3, [pc, #24]	@ (800b5d0 <SGP_DeviceConnected+0x74>)
 800b5b6:	2203      	movs	r2, #3
 800b5b8:	2109      	movs	r1, #9
 800b5ba:	0018      	movs	r0, r3
 800b5bc:	f000 f80e 	bl	800b5dc <CheckCRC>
 800b5c0:	0003      	movs	r3, r0
}
 800b5c2:	0018      	movs	r0, r3
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	b002      	add	sp, #8
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	46c0      	nop			@ (mov r8, r8)
 800b5cc:	20000088 	.word	0x20000088
 800b5d0:	200011e8 	.word	0x200011e8
 800b5d4:	08024024 	.word	0x08024024
 800b5d8:	08023fa4 	.word	0x08023fa4

0800b5dc <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5de:	b08f      	sub	sp, #60	@ 0x3c
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6278      	str	r0, [r7, #36]	@ 0x24
 800b5e4:	0008      	movs	r0, r1
 800b5e6:	0011      	movs	r1, r2
 800b5e8:	2323      	movs	r3, #35	@ 0x23
 800b5ea:	18fb      	adds	r3, r7, r3
 800b5ec:	1c02      	adds	r2, r0, #0
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	2322      	movs	r3, #34	@ 0x22
 800b5f2:	18fb      	adds	r3, r7, r3
 800b5f4:	1c0a      	adds	r2, r1, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b5f8:	2317      	movs	r3, #23
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	189b      	adds	r3, r3, r2
 800b5fe:	19db      	adds	r3, r3, r7
 800b600:	2200      	movs	r2, #0
 800b602:	701a      	strb	r2, [r3, #0]
 800b604:	e09f      	b.n	800b746 <CheckCRC+0x16a>
 800b606:	466b      	mov	r3, sp
 800b608:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b60a:	2322      	movs	r3, #34	@ 0x22
 800b60c:	18fb      	adds	r3, r7, r3
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	001a      	movs	r2, r3
 800b612:	3a01      	subs	r2, #1
 800b614:	633a      	str	r2, [r7, #48]	@ 0x30
 800b616:	60bb      	str	r3, [r7, #8]
 800b618:	2200      	movs	r2, #0
 800b61a:	60fa      	str	r2, [r7, #12]
 800b61c:	68b8      	ldr	r0, [r7, #8]
 800b61e:	68f9      	ldr	r1, [r7, #12]
 800b620:	0002      	movs	r2, r0
 800b622:	0f52      	lsrs	r2, r2, #29
 800b624:	000c      	movs	r4, r1
 800b626:	00e4      	lsls	r4, r4, #3
 800b628:	61fc      	str	r4, [r7, #28]
 800b62a:	69fc      	ldr	r4, [r7, #28]
 800b62c:	4314      	orrs	r4, r2
 800b62e:	61fc      	str	r4, [r7, #28]
 800b630:	0002      	movs	r2, r0
 800b632:	00d2      	lsls	r2, r2, #3
 800b634:	61ba      	str	r2, [r7, #24]
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	2200      	movs	r2, #0
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	6838      	ldr	r0, [r7, #0]
 800b63e:	6879      	ldr	r1, [r7, #4]
 800b640:	0002      	movs	r2, r0
 800b642:	0f52      	lsrs	r2, r2, #29
 800b644:	000c      	movs	r4, r1
 800b646:	00e4      	lsls	r4, r4, #3
 800b648:	617c      	str	r4, [r7, #20]
 800b64a:	697c      	ldr	r4, [r7, #20]
 800b64c:	4314      	orrs	r4, r2
 800b64e:	617c      	str	r4, [r7, #20]
 800b650:	0002      	movs	r2, r0
 800b652:	00d2      	lsls	r2, r2, #3
 800b654:	613a      	str	r2, [r7, #16]
 800b656:	3307      	adds	r3, #7
 800b658:	08db      	lsrs	r3, r3, #3
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	466a      	mov	r2, sp
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	469d      	mov	sp, r3
 800b662:	466b      	mov	r3, sp
 800b664:	3300      	adds	r3, #0
 800b666:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b668:	2316      	movs	r3, #22
 800b66a:	2220      	movs	r2, #32
 800b66c:	189b      	adds	r3, r3, r2
 800b66e:	19db      	adds	r3, r3, r7
 800b670:	2200      	movs	r2, #0
 800b672:	701a      	strb	r2, [r3, #0]
 800b674:	e01e      	b.n	800b6b4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b676:	2317      	movs	r3, #23
 800b678:	2220      	movs	r2, #32
 800b67a:	189b      	adds	r3, r3, r2
 800b67c:	19db      	adds	r3, r3, r7
 800b67e:	781a      	ldrb	r2, [r3, #0]
 800b680:	2116      	movs	r1, #22
 800b682:	2320      	movs	r3, #32
 800b684:	18cb      	adds	r3, r1, r3
 800b686:	19db      	adds	r3, r3, r7
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	18d3      	adds	r3, r2, r3
 800b68c:	001a      	movs	r2, r3
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	189a      	adds	r2, r3, r2
 800b692:	0008      	movs	r0, r1
 800b694:	2320      	movs	r3, #32
 800b696:	18cb      	adds	r3, r1, r3
 800b698:	19db      	adds	r3, r3, r7
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	7811      	ldrb	r1, [r2, #0]
 800b69e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6a0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b6a2:	2320      	movs	r3, #32
 800b6a4:	18c3      	adds	r3, r0, r3
 800b6a6:	19db      	adds	r3, r3, r7
 800b6a8:	781a      	ldrb	r2, [r3, #0]
 800b6aa:	2320      	movs	r3, #32
 800b6ac:	18c3      	adds	r3, r0, r3
 800b6ae:	19db      	adds	r3, r3, r7
 800b6b0:	3201      	adds	r2, #1
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	2316      	movs	r3, #22
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	189b      	adds	r3, r3, r2
 800b6ba:	19da      	adds	r2, r3, r7
 800b6bc:	2322      	movs	r3, #34	@ 0x22
 800b6be:	18fb      	adds	r3, r7, r3
 800b6c0:	7812      	ldrb	r2, [r2, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d3d6      	bcc.n	800b676 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b6c8:	2417      	movs	r4, #23
 800b6ca:	2320      	movs	r3, #32
 800b6cc:	18e3      	adds	r3, r4, r3
 800b6ce:	19db      	adds	r3, r3, r7
 800b6d0:	781a      	ldrb	r2, [r3, #0]
 800b6d2:	2322      	movs	r3, #34	@ 0x22
 800b6d4:	18fb      	adds	r3, r7, r3
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	18d3      	adds	r3, r2, r3
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6de:	18d2      	adds	r2, r2, r3
 800b6e0:	250b      	movs	r5, #11
 800b6e2:	2320      	movs	r3, #32
 800b6e4:	18eb      	adds	r3, r5, r3
 800b6e6:	19db      	adds	r3, r3, r7
 800b6e8:	7812      	ldrb	r2, [r2, #0]
 800b6ea:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b6ec:	2322      	movs	r3, #34	@ 0x22
 800b6ee:	18fb      	adds	r3, r7, r3
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f8:	0011      	movs	r1, r2
 800b6fa:	0018      	movs	r0, r3
 800b6fc:	f000 f838 	bl	800b770 <CalculateCRC>
 800b700:	0003      	movs	r3, r0
 800b702:	001a      	movs	r2, r3
 800b704:	2320      	movs	r3, #32
 800b706:	18eb      	adds	r3, r5, r3
 800b708:	19db      	adds	r3, r3, r7
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d00c      	beq.n	800b72a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b710:	2320      	movs	r3, #32
 800b712:	18e3      	adds	r3, r4, r3
 800b714:	19db      	adds	r3, r3, r7
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	3301      	adds	r3, #1
 800b71a:	4a13      	ldr	r2, [pc, #76]	@ (800b768 <CheckCRC+0x18c>)
 800b71c:	4913      	ldr	r1, [pc, #76]	@ (800b76c <CheckCRC+0x190>)
 800b71e:	2001      	movs	r0, #1
 800b720:	f002 f9a6 	bl	800da70 <CreateLine>
      return false;
 800b724:	2300      	movs	r3, #0
 800b726:	46b5      	mov	sp, r6
 800b728:	e019      	b.n	800b75e <CheckCRC+0x182>
 800b72a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b72c:	2217      	movs	r2, #23
 800b72e:	2320      	movs	r3, #32
 800b730:	18d3      	adds	r3, r2, r3
 800b732:	19db      	adds	r3, r3, r7
 800b734:	2120      	movs	r1, #32
 800b736:	1852      	adds	r2, r2, r1
 800b738:	19d1      	adds	r1, r2, r7
 800b73a:	2222      	movs	r2, #34	@ 0x22
 800b73c:	18ba      	adds	r2, r7, r2
 800b73e:	7809      	ldrb	r1, [r1, #0]
 800b740:	7812      	ldrb	r2, [r2, #0]
 800b742:	188a      	adds	r2, r1, r2
 800b744:	701a      	strb	r2, [r3, #0]
 800b746:	2317      	movs	r3, #23
 800b748:	2220      	movs	r2, #32
 800b74a:	189b      	adds	r3, r3, r2
 800b74c:	19da      	adds	r2, r3, r7
 800b74e:	2323      	movs	r3, #35	@ 0x23
 800b750:	18fb      	adds	r3, r7, r3
 800b752:	7812      	ldrb	r2, [r2, #0]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d200      	bcs.n	800b75c <CheckCRC+0x180>
 800b75a:	e754      	b.n	800b606 <CheckCRC+0x2a>
    }
  }
  return true;
 800b75c:	2301      	movs	r3, #1
}
 800b75e:	0018      	movs	r0, r3
 800b760:	46bd      	mov	sp, r7
 800b762:	b00f      	add	sp, #60	@ 0x3c
 800b764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b766:	46c0      	nop			@ (mov r8, r8)
 800b768:	08024044 	.word	0x08024044
 800b76c:	08023f80 	.word	0x08023f80

0800b770 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	000a      	movs	r2, r1
 800b77a:	1cfb      	adds	r3, r7, #3
 800b77c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b77e:	230f      	movs	r3, #15
 800b780:	18fb      	adds	r3, r7, r3
 800b782:	22ff      	movs	r2, #255	@ 0xff
 800b784:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b786:	230e      	movs	r3, #14
 800b788:	18fb      	adds	r3, r7, r3
 800b78a:	2200      	movs	r2, #0
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e037      	b.n	800b800 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b790:	230e      	movs	r3, #14
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	18d3      	adds	r3, r2, r3
 800b79a:	7819      	ldrb	r1, [r3, #0]
 800b79c:	220f      	movs	r2, #15
 800b79e:	18bb      	adds	r3, r7, r2
 800b7a0:	18ba      	adds	r2, r7, r2
 800b7a2:	7812      	ldrb	r2, [r2, #0]
 800b7a4:	404a      	eors	r2, r1
 800b7a6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b7a8:	230d      	movs	r3, #13
 800b7aa:	18fb      	adds	r3, r7, r3
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	701a      	strb	r2, [r3, #0]
 800b7b0:	e01b      	b.n	800b7ea <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b7b2:	210f      	movs	r1, #15
 800b7b4:	187b      	adds	r3, r7, r1
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	b25b      	sxtb	r3, r3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	da09      	bge.n	800b7d2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b7be:	187b      	adds	r3, r7, r1
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	b25b      	sxtb	r3, r3
 800b7c6:	2231      	movs	r2, #49	@ 0x31
 800b7c8:	4053      	eors	r3, r2
 800b7ca:	b25a      	sxtb	r2, r3
 800b7cc:	187b      	adds	r3, r7, r1
 800b7ce:	701a      	strb	r2, [r3, #0]
 800b7d0:	e005      	b.n	800b7de <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b7d2:	230f      	movs	r3, #15
 800b7d4:	18fa      	adds	r2, r7, r3
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	18db      	adds	r3, r3, r3
 800b7dc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b7de:	210d      	movs	r1, #13
 800b7e0:	187b      	adds	r3, r7, r1
 800b7e2:	781a      	ldrb	r2, [r3, #0]
 800b7e4:	187b      	adds	r3, r7, r1
 800b7e6:	3201      	adds	r2, #1
 800b7e8:	701a      	strb	r2, [r3, #0]
 800b7ea:	230d      	movs	r3, #13
 800b7ec:	18fb      	adds	r3, r7, r3
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b07      	cmp	r3, #7
 800b7f2:	d9de      	bls.n	800b7b2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b7f4:	210e      	movs	r1, #14
 800b7f6:	187b      	adds	r3, r7, r1
 800b7f8:	781a      	ldrb	r2, [r3, #0]
 800b7fa:	187b      	adds	r3, r7, r1
 800b7fc:	3201      	adds	r2, #1
 800b7fe:	701a      	strb	r2, [r3, #0]
 800b800:	230e      	movs	r3, #14
 800b802:	18fa      	adds	r2, r7, r3
 800b804:	1cfb      	adds	r3, r7, #3
 800b806:	7812      	ldrb	r2, [r2, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3c0      	bcc.n	800b790 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b80e:	230f      	movs	r3, #15
 800b810:	18fb      	adds	r3, r7, r3
 800b812:	781b      	ldrb	r3, [r3, #0]
}
 800b814:	0018      	movs	r0, r3
 800b816:	46bd      	mov	sp, r7
 800b818:	b004      	add	sp, #16
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4936      	ldr	r1, [pc, #216]	@ (800b904 <SGP_GetHT+0xe8>)
 800b82c:	1c18      	adds	r0, r3, #0
 800b82e:	f7f5 f847 	bl	80008c0 <__aeabi_fadd>
 800b832:	1c03      	adds	r3, r0, #0
 800b834:	4934      	ldr	r1, [pc, #208]	@ (800b908 <SGP_GetHT+0xec>)
 800b836:	1c18      	adds	r0, r3, #0
 800b838:	f7f5 f9cc 	bl	8000bd4 <__aeabi_fdiv>
 800b83c:	1c03      	adds	r3, r0, #0
 800b83e:	4933      	ldr	r1, [pc, #204]	@ (800b90c <SGP_GetHT+0xf0>)
 800b840:	1c18      	adds	r0, r3, #0
 800b842:	f7f5 fbad 	bl	8000fa0 <__aeabi_fmul>
 800b846:	1c03      	adds	r3, r0, #0
 800b848:	1c18      	adds	r0, r3, #0
 800b84a:	f7f4 fee7 	bl	800061c <__aeabi_f2uiz>
 800b84e:	0003      	movs	r3, r0
 800b850:	b29a      	uxth	r2, r3
 800b852:	4b2f      	ldr	r3, [pc, #188]	@ (800b910 <SGP_GetHT+0xf4>)
 800b854:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	492e      	ldr	r1, [pc, #184]	@ (800b914 <SGP_GetHT+0xf8>)
 800b85c:	1c18      	adds	r0, r3, #0
 800b85e:	f7f5 f9b9 	bl	8000bd4 <__aeabi_fdiv>
 800b862:	1c03      	adds	r3, r0, #0
 800b864:	4929      	ldr	r1, [pc, #164]	@ (800b90c <SGP_GetHT+0xf0>)
 800b866:	1c18      	adds	r0, r3, #0
 800b868:	f7f5 fb9a 	bl	8000fa0 <__aeabi_fmul>
 800b86c:	1c03      	adds	r3, r0, #0
 800b86e:	1c18      	adds	r0, r3, #0
 800b870:	f7f4 fed4 	bl	800061c <__aeabi_f2uiz>
 800b874:	0003      	movs	r3, r0
 800b876:	b29a      	uxth	r2, r3
 800b878:	4b27      	ldr	r3, [pc, #156]	@ (800b918 <SGP_GetHT+0xfc>)
 800b87a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b87c:	4b26      	ldr	r3, [pc, #152]	@ (800b918 <SGP_GetHT+0xfc>)
 800b87e:	881b      	ldrh	r3, [r3, #0]
 800b880:	0a1b      	lsrs	r3, r3, #8
 800b882:	b29b      	uxth	r3, r3
 800b884:	b2da      	uxtb	r2, r3
 800b886:	4b25      	ldr	r3, [pc, #148]	@ (800b91c <SGP_GetHT+0x100>)
 800b888:	709a      	strb	r2, [r3, #2]
 800b88a:	4b24      	ldr	r3, [pc, #144]	@ (800b91c <SGP_GetHT+0x100>)
 800b88c:	789a      	ldrb	r2, [r3, #2]
 800b88e:	210c      	movs	r1, #12
 800b890:	187b      	adds	r3, r7, r1
 800b892:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b894:	4b20      	ldr	r3, [pc, #128]	@ (800b918 <SGP_GetHT+0xfc>)
 800b896:	881b      	ldrh	r3, [r3, #0]
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	4b20      	ldr	r3, [pc, #128]	@ (800b91c <SGP_GetHT+0x100>)
 800b89c:	70da      	strb	r2, [r3, #3]
 800b89e:	4b1f      	ldr	r3, [pc, #124]	@ (800b91c <SGP_GetHT+0x100>)
 800b8a0:	78da      	ldrb	r2, [r3, #3]
 800b8a2:	187b      	adds	r3, r7, r1
 800b8a4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b8a6:	187b      	adds	r3, r7, r1
 800b8a8:	2102      	movs	r1, #2
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	f7ff ff60 	bl	800b770 <CalculateCRC>
 800b8b0:	0003      	movs	r3, r0
 800b8b2:	001a      	movs	r2, r3
 800b8b4:	4b19      	ldr	r3, [pc, #100]	@ (800b91c <SGP_GetHT+0x100>)
 800b8b6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b8b8:	4b15      	ldr	r3, [pc, #84]	@ (800b910 <SGP_GetHT+0xf4>)
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	0a1b      	lsrs	r3, r3, #8
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	4b16      	ldr	r3, [pc, #88]	@ (800b91c <SGP_GetHT+0x100>)
 800b8c4:	715a      	strb	r2, [r3, #5]
 800b8c6:	4b15      	ldr	r3, [pc, #84]	@ (800b91c <SGP_GetHT+0x100>)
 800b8c8:	795a      	ldrb	r2, [r3, #5]
 800b8ca:	2108      	movs	r1, #8
 800b8cc:	187b      	adds	r3, r7, r1
 800b8ce:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800b8d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b910 <SGP_GetHT+0xf4>)
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	4b11      	ldr	r3, [pc, #68]	@ (800b91c <SGP_GetHT+0x100>)
 800b8d8:	719a      	strb	r2, [r3, #6]
 800b8da:	4b10      	ldr	r3, [pc, #64]	@ (800b91c <SGP_GetHT+0x100>)
 800b8dc:	799a      	ldrb	r2, [r3, #6]
 800b8de:	187b      	adds	r3, r7, r1
 800b8e0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800b8e2:	187b      	adds	r3, r7, r1
 800b8e4:	2102      	movs	r1, #2
 800b8e6:	0018      	movs	r0, r3
 800b8e8:	f7ff ff42 	bl	800b770 <CalculateCRC>
 800b8ec:	0003      	movs	r3, r0
 800b8ee:	001a      	movs	r2, r3
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b91c <SGP_GetHT+0x100>)
 800b8f2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800b8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b920 <SGP_GetHT+0x104>)
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	701a      	strb	r2, [r3, #0]
}
 800b8fa:	46c0      	nop			@ (mov r8, r8)
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	b004      	add	sp, #16
 800b900:	bd80      	pop	{r7, pc}
 800b902:	46c0      	nop			@ (mov r8, r8)
 800b904:	42340000 	.word	0x42340000
 800b908:	432f0000 	.word	0x432f0000
 800b90c:	477fff00 	.word	0x477fff00
 800b910:	200012a2 	.word	0x200012a2
 800b914:	42c80000 	.word	0x42c80000
 800b918:	200012a0 	.word	0x200012a0
 800b91c:	20000094 	.word	0x20000094
 800b920:	200012a4 	.word	0x200012a4

0800b924 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800b924:	b580      	push	{r7, lr}
 800b926:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brougt to idle");
 800b928:	4a09      	ldr	r2, [pc, #36]	@ (800b950 <SGP_SoftReset+0x2c>)
 800b92a:	4b0a      	ldr	r3, [pc, #40]	@ (800b954 <SGP_SoftReset+0x30>)
 800b92c:	0019      	movs	r1, r3
 800b92e:	2003      	movs	r0, #3
 800b930:	f002 f89e 	bl	800da70 <CreateLine>
  SGP_TurnHeaterOff();
 800b934:	f7ff fbf4 	bl	800b120 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800b938:	200a      	movs	r0, #10
 800b93a:	f002 fcef 	bl	800e31c <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b93e:	4b06      	ldr	r3, [pc, #24]	@ (800b958 <SGP_SoftReset+0x34>)
 800b940:	2202      	movs	r2, #2
 800b942:	0019      	movs	r1, r3
 800b944:	2059      	movs	r0, #89	@ 0x59
 800b946:	f7ff fb51 	bl	800afec <WriteRegister>
}
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	080240ec 	.word	0x080240ec
 800b954:	08023fc8 	.word	0x08023fc8
 800b958:	2000009c 	.word	0x2000009c

0800b95c <ResetVOCresult>:

void ResetVOCresult(void) {
 800b95c:	b580      	push	{r7, lr}
 800b95e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800b960:	4b02      	ldr	r3, [pc, #8]	@ (800b96c <ResetVOCresult+0x10>)
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]
}
 800b966:	46c0      	nop			@ (mov r8, r8)
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	200012a8 	.word	0x200012a8

0800b970 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800b974:	4b29      	ldr	r3, [pc, #164]	@ (800ba1c <SGP_Upkeep+0xac>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	2b06      	cmp	r3, #6
 800b97a:	d842      	bhi.n	800ba02 <SGP_Upkeep+0x92>
 800b97c:	009a      	lsls	r2, r3, #2
 800b97e:	4b28      	ldr	r3, [pc, #160]	@ (800ba20 <SGP_Upkeep+0xb0>)
 800b980:	18d3      	adds	r3, r2, r3
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800b986:	4a27      	ldr	r2, [pc, #156]	@ (800ba24 <SGP_Upkeep+0xb4>)
 800b988:	4b27      	ldr	r3, [pc, #156]	@ (800ba28 <SGP_Upkeep+0xb8>)
 800b98a:	0019      	movs	r1, r3
 800b98c:	2003      	movs	r0, #3
 800b98e:	f002 f86f 	bl	800da70 <CreateLine>
    break;
 800b992:	e03d      	b.n	800ba10 <SGP_Upkeep+0xa0>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800b994:	f7ff ffe2 	bl	800b95c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800b998:	4b20      	ldr	r3, [pc, #128]	@ (800ba1c <SGP_Upkeep+0xac>)
 800b99a:	2201      	movs	r2, #1
 800b99c:	701a      	strb	r2, [r3, #0]
    break;
 800b99e:	e037      	b.n	800ba10 <SGP_Upkeep+0xa0>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800b9a0:	f7ff fb5c 	bl	800b05c <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800b9a4:	f001 f90e 	bl	800cbc4 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800b9a8:	4b1c      	ldr	r3, [pc, #112]	@ (800ba1c <SGP_Upkeep+0xac>)
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	701a      	strb	r2, [r3, #0]
   break;
 800b9ae:	e02f      	b.n	800ba10 <SGP_Upkeep+0xa0>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800b9b0:	4b1e      	ldr	r3, [pc, #120]	@ (800ba2c <SGP_Upkeep+0xbc>)
 800b9b2:	0018      	movs	r0, r3
 800b9b4:	f7ff fbc2 	bl	800b13c <SGP_GetMeasurementValues>
 800b9b8:	1e03      	subs	r3, r0, #0
 800b9ba:	d026      	beq.n	800ba0a <SGP_Upkeep+0x9a>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800b9bc:	4b17      	ldr	r3, [pc, #92]	@ (800ba1c <SGP_Upkeep+0xac>)
 800b9be:	2203      	movs	r2, #3
 800b9c0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b9c2:	e022      	b.n	800ba0a <SGP_Upkeep+0x9a>

  case SGP_STATE_PROCESS_RESULTS:
//    Debug("Processing results.");
    setVOC(vocIndex);
 800b9c4:	4b19      	ldr	r3, [pc, #100]	@ (800ba2c <SGP_Upkeep+0xbc>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	0018      	movs	r0, r3
 800b9cc:	f7f7 ffaa 	bl	8003924 <setVOC>
    SGP40TimeStamp = HAL_GetTick() + 1000;  // about every 1 seconds
 800b9d0:	f002 fc9a 	bl	800e308 <HAL_GetTick>
 800b9d4:	0003      	movs	r3, r0
 800b9d6:	22fa      	movs	r2, #250	@ 0xfa
 800b9d8:	0092      	lsls	r2, r2, #2
 800b9da:	189a      	adds	r2, r3, r2
 800b9dc:	4b14      	ldr	r3, [pc, #80]	@ (800ba30 <SGP_Upkeep+0xc0>)
 800b9de:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800b9e0:	f001 f908 	bl	800cbf4 <ResetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT;
 800b9e4:	4b0d      	ldr	r3, [pc, #52]	@ (800ba1c <SGP_Upkeep+0xac>)
 800b9e6:	2206      	movs	r2, #6
 800b9e8:	701a      	strb	r2, [r3, #0]
    break;
 800b9ea:	e011      	b.n	800ba10 <SGP_Upkeep+0xa0>

  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800b9ec:	4b10      	ldr	r3, [pc, #64]	@ (800ba30 <SGP_Upkeep+0xc0>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	0018      	movs	r0, r3
 800b9f2:	f001 ffe7 	bl	800d9c4 <TimestampIsReached>
 800b9f6:	1e03      	subs	r3, r0, #0
 800b9f8:	d009      	beq.n	800ba0e <SGP_Upkeep+0x9e>
      SGPState = SGP_STATE_INIT;
 800b9fa:	4b08      	ldr	r3, [pc, #32]	@ (800ba1c <SGP_Upkeep+0xac>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ba00:	e005      	b.n	800ba0e <SGP_Upkeep+0x9e>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800ba02:	4b06      	ldr	r3, [pc, #24]	@ (800ba1c <SGP_Upkeep+0xac>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	701a      	strb	r2, [r3, #0]
    break;
 800ba08:	e002      	b.n	800ba10 <SGP_Upkeep+0xa0>
    break;
 800ba0a:	46c0      	nop			@ (mov r8, r8)
 800ba0c:	e000      	b.n	800ba10 <SGP_Upkeep+0xa0>
    break;
 800ba0e:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800ba10:	4b02      	ldr	r3, [pc, #8]	@ (800ba1c <SGP_Upkeep+0xac>)
 800ba12:	781b      	ldrb	r3, [r3, #0]
}
 800ba14:	0018      	movs	r0, r3
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	46c0      	nop			@ (mov r8, r8)
 800ba1c:	200012b2 	.word	0x200012b2
 800ba20:	080247a4 	.word	0x080247a4
 800ba24:	08024104 	.word	0x08024104
 800ba28:	08023fc8 	.word	0x08023fc8
 800ba2c:	200012a8 	.word	0x200012a8
 800ba30:	200011f4 	.word	0x200011f4

0800ba34 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800ba3c:	f002 fc64 	bl	800e308 <HAL_GetTick>
 800ba40:	0002      	movs	r2, r0
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	18d2      	adds	r2, r2, r3
 800ba46:	4b03      	ldr	r3, [pc, #12]	@ (800ba54 <setSGP40TimeStamp+0x20>)
 800ba48:	601a      	str	r2, [r3, #0]
}
 800ba4a:	46c0      	nop			@ (mov r8, r8)
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	b002      	add	sp, #8
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	46c0      	nop			@ (mov r8, r8)
 800ba54:	200011f4 	.word	0x200011f4

0800ba58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	0002      	movs	r2, r0
 800ba60:	1dfb      	adds	r3, r7, #7
 800ba62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ba64:	1dfb      	adds	r3, r7, #7
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba6a:	d809      	bhi.n	800ba80 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ba6c:	1dfb      	adds	r3, r7, #7
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	001a      	movs	r2, r3
 800ba72:	231f      	movs	r3, #31
 800ba74:	401a      	ands	r2, r3
 800ba76:	4b04      	ldr	r3, [pc, #16]	@ (800ba88 <__NVIC_EnableIRQ+0x30>)
 800ba78:	2101      	movs	r1, #1
 800ba7a:	4091      	lsls	r1, r2
 800ba7c:	000a      	movs	r2, r1
 800ba7e:	601a      	str	r2, [r3, #0]
  }
}
 800ba80:	46c0      	nop			@ (mov r8, r8)
 800ba82:	46bd      	mov	sp, r7
 800ba84:	b002      	add	sp, #8
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	e000e100 	.word	0xe000e100

0800ba8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	0002      	movs	r2, r0
 800ba94:	1dfb      	adds	r3, r7, #7
 800ba96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ba98:	1dfb      	adds	r3, r7, #7
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba9e:	d810      	bhi.n	800bac2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800baa0:	1dfb      	adds	r3, r7, #7
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	001a      	movs	r2, r3
 800baa6:	231f      	movs	r3, #31
 800baa8:	4013      	ands	r3, r2
 800baaa:	4908      	ldr	r1, [pc, #32]	@ (800bacc <__NVIC_DisableIRQ+0x40>)
 800baac:	2201      	movs	r2, #1
 800baae:	409a      	lsls	r2, r3
 800bab0:	0013      	movs	r3, r2
 800bab2:	2280      	movs	r2, #128	@ 0x80
 800bab4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bab6:	f3bf 8f4f 	dsb	sy
}
 800baba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800babc:	f3bf 8f6f 	isb	sy
}
 800bac0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	46bd      	mov	sp, r7
 800bac6:	b002      	add	sp, #8
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	46c0      	nop			@ (mov r8, r8)
 800bacc:	e000e100 	.word	0xe000e100

0800bad0 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800bad0:	b5b0      	push	{r4, r5, r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af02      	add	r7, sp, #8
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	0008      	movs	r0, r1
 800bada:	0011      	movs	r1, r2
 800badc:	1cfb      	adds	r3, r7, #3
 800bade:	1c02      	adds	r2, r0, #0
 800bae0:	701a      	strb	r2, [r3, #0]
 800bae2:	1cbb      	adds	r3, r7, #2
 800bae4:	1c0a      	adds	r2, r1, #0
 800bae6:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800bae8:	4b5b      	ldr	r3, [pc, #364]	@ (800bc58 <getSoundData+0x188>)
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2201      	movs	r2, #1
 800baf0:	4053      	eors	r3, r2
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d107      	bne.n	800bb08 <getSoundData+0x38>
 800baf8:	4b58      	ldr	r3, [pc, #352]	@ (800bc5c <getSoundData+0x18c>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2201      	movs	r2, #1
 800bb00:	4053      	eors	r3, r2
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <getSoundData+0x3c>
    {
        return false;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e0a0      	b.n	800bc4e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800bb0c:	4b54      	ldr	r3, [pc, #336]	@ (800bc60 <getSoundData+0x190>)
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bb16:	4b53      	ldr	r3, [pc, #332]	@ (800bc64 <getSoundData+0x194>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	b25b      	sxtb	r3, r3
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	f7ff ffb5 	bl	800ba8c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800bb22:	f3bf 8f4f 	dsb	sy
}
 800bb26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bb28:	f3bf 8f6f 	isb	sy
}
 800bb2c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800bb2e:	1cfb      	adds	r3, r7, #3
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d04c      	beq.n	800bbd0 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800bb36:	4b4c      	ldr	r3, [pc, #304]	@ (800bc68 <getSoundData+0x198>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d11b      	bne.n	800bb76 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	617b      	str	r3, [r7, #20]
 800bb4e:	e00e      	b.n	800bb6e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	18d3      	adds	r3, r2, r3
 800bb56:	3302      	adds	r3, #2
 800bb58:	2200      	movs	r2, #0
 800bb5a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	18d3      	adds	r3, r2, r3
 800bb62:	3308      	adds	r3, #8
 800bb64:	2200      	movs	r2, #0
 800bb66:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	617b      	str	r3, [r7, #20]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2b05      	cmp	r3, #5
 800bb72:	d9ed      	bls.n	800bb50 <getSoundData+0x80>
 800bb74:	e02c      	b.n	800bbd0 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	1c59      	adds	r1, r3, #1
 800bb7c:	4b3b      	ldr	r3, [pc, #236]	@ (800bc6c <getSoundData+0x19c>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	4b3b      	ldr	r3, [pc, #236]	@ (800bc70 <getSoundData+0x1a0>)
 800bb82:	681c      	ldr	r4, [r3, #0]
 800bb84:	4b38      	ldr	r3, [pc, #224]	@ (800bc68 <getSoundData+0x198>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	0023      	movs	r3, r4
 800bb8c:	f000 fde8 	bl	800c760 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bb90:	2300      	movs	r3, #0
 800bb92:	613b      	str	r3, [r7, #16]
 800bb94:	e019      	b.n	800bbca <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	18d3      	adds	r3, r2, r3
 800bb9c:	1c98      	adds	r0, r3, #2
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	3308      	adds	r3, #8
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800bba6:	4b33      	ldr	r3, [pc, #204]	@ (800bc74 <getSoundData+0x1a4>)
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	0092      	lsls	r2, r2, #2
 800bbac:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800bbae:	4b32      	ldr	r3, [pc, #200]	@ (800bc78 <getSoundData+0x1a8>)
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	0092      	lsls	r2, r2, #2
 800bbb4:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bbb6:	4b2c      	ldr	r3, [pc, #176]	@ (800bc68 <getSoundData+0x198>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	0013      	movs	r3, r2
 800bbbe:	0022      	movs	r2, r4
 800bbc0:	f000 fdce 	bl	800c760 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	613b      	str	r3, [r7, #16]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	2b05      	cmp	r3, #5
 800bbce:	d9e2      	bls.n	800bb96 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800bbd0:	1cbb      	adds	r3, r7, #2
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d028      	beq.n	800bc2a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800bbd8:	240e      	movs	r4, #14
 800bbda:	193b      	adds	r3, r7, r4
 800bbdc:	2200      	movs	r2, #0
 800bbde:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800bbe0:	250d      	movs	r5, #13
 800bbe2:	197b      	adds	r3, r7, r5
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800bbe8:	4b24      	ldr	r3, [pc, #144]	@ (800bc7c <getSoundData+0x1ac>)
 800bbea:	6818      	ldr	r0, [r3, #0]
 800bbec:	4924      	ldr	r1, [pc, #144]	@ (800bc80 <getSoundData+0x1b0>)
 800bbee:	197b      	adds	r3, r7, r5
 800bbf0:	193a      	adds	r2, r7, r4
 800bbf2:	f000 fe59 	bl	800c8a8 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800bbf6:	193b      	adds	r3, r7, r4
 800bbf8:	881a      	ldrh	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	21ff      	movs	r1, #255	@ 0xff
 800bbfe:	4011      	ands	r1, r2
 800bc00:	000c      	movs	r4, r1
 800bc02:	7b99      	ldrb	r1, [r3, #14]
 800bc04:	2000      	movs	r0, #0
 800bc06:	4001      	ands	r1, r0
 800bc08:	1c08      	adds	r0, r1, #0
 800bc0a:	1c21      	adds	r1, r4, #0
 800bc0c:	4301      	orrs	r1, r0
 800bc0e:	7399      	strb	r1, [r3, #14]
 800bc10:	0a12      	lsrs	r2, r2, #8
 800bc12:	b290      	uxth	r0, r2
 800bc14:	7bda      	ldrb	r2, [r3, #15]
 800bc16:	2100      	movs	r1, #0
 800bc18:	400a      	ands	r2, r1
 800bc1a:	1c11      	adds	r1, r2, #0
 800bc1c:	1c02      	adds	r2, r0, #0
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800bc22:	197b      	adds	r3, r7, r5
 800bc24:	781a      	ldrb	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800bc2a:	f000 f86f 	bl	800bd0c <micSettlingComplete>
 800bc2e:	0003      	movs	r3, r0
 800bc30:	001a      	movs	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800bc36:	4b0a      	ldr	r3, [pc, #40]	@ (800bc60 <getSoundData+0x190>)
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bc40:	4b08      	ldr	r3, [pc, #32]	@ (800bc64 <getSoundData+0x194>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	b25b      	sxtb	r3, r3
 800bc46:	0018      	movs	r0, r3
 800bc48:	f7ff ff06 	bl	800ba58 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800bc4c:	2301      	movs	r3, #1
}
 800bc4e:	0018      	movs	r0, r3
 800bc50:	46bd      	mov	sp, r7
 800bc52:	b006      	add	sp, #24
 800bc54:	bdb0      	pop	{r4, r5, r7, pc}
 800bc56:	46c0      	nop			@ (mov r8, r8)
 800bc58:	200012b4 	.word	0x200012b4
 800bc5c:	200012b7 	.word	0x200012b7
 800bc60:	200012b6 	.word	0x200012b6
 800bc64:	20001d04 	.word	0x20001d04
 800bc68:	20001d40 	.word	0x20001d40
 800bc6c:	20001d08 	.word	0x20001d08
 800bc70:	20001d0c 	.word	0x20001d0c
 800bc74:	20001d10 	.word	0x20001d10
 800bc78:	20001d28 	.word	0x20001d28
 800bc7c:	200012bc 	.word	0x200012bc
 800bc80:	3b5c7333 	.word	0x3b5c7333

0800bc84 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	001a      	movs	r2, r3
 800bc92:	1cfb      	adds	r3, r7, #3
 800bc94:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800bc96:	4b09      	ldr	r3, [pc, #36]	@ (800bcbc <soundInit+0x38>)
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800bc9c:	4b08      	ldr	r3, [pc, #32]	@ (800bcc0 <soundInit+0x3c>)
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800bca2:	4b08      	ldr	r3, [pc, #32]	@ (800bcc4 <soundInit+0x40>)
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800bca8:	4b07      	ldr	r3, [pc, #28]	@ (800bcc8 <soundInit+0x44>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	569a      	ldrsb	r2, [r3, r2]
 800bcae:	4b06      	ldr	r3, [pc, #24]	@ (800bcc8 <soundInit+0x44>)
 800bcb0:	701a      	strb	r2, [r3, #0]

    return true;
 800bcb2:	2301      	movs	r3, #1
}
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	b004      	add	sp, #16
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20001cfc 	.word	0x20001cfc
 800bcc0:	20001cf8 	.word	0x20001cf8
 800bcc4:	20001d00 	.word	0x20001d00
 800bcc8:	20001d04 	.word	0x20001d04

0800bccc <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800bcd0:	4b02      	ldr	r3, [pc, #8]	@ (800bcdc <clearMaximumAmplitude+0x10>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
}
 800bcd6:	46c0      	nop			@ (mov r8, r8)
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	200012bc 	.word	0x200012bc

0800bce0 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800bce4:	4b08      	ldr	r3, [pc, #32]	@ (800bd08 <startMicSettlingPeriod+0x28>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2200      	movs	r2, #0
 800bcec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800bcee:	4b06      	ldr	r3, [pc, #24]	@ (800bd08 <startMicSettlingPeriod+0x28>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f00a f8b6 	bl	8015e64 <HAL_TIM_Base_Start>
 800bcf8:	1e03      	subs	r3, r0, #0
 800bcfa:	d001      	beq.n	800bd00 <startMicSettlingPeriod+0x20>
    {
        return false;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e000      	b.n	800bd02 <startMicSettlingPeriod+0x22>
    }
    return true;
 800bd00:	2301      	movs	r3, #1
}
 800bd02:	0018      	movs	r0, r3
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20001cf8 	.word	0x20001cf8

0800bd0c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800bd12:	4b0e      	ldr	r3, [pc, #56]	@ (800bd4c <micSettlingComplete+0x40>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	401a      	ands	r2, r3
 800bd1e:	1dfb      	adds	r3, r7, #7
 800bd20:	3a01      	subs	r2, #1
 800bd22:	4251      	negs	r1, r2
 800bd24:	414a      	adcs	r2, r1
 800bd26:	701a      	strb	r2, [r3, #0]
    if (complete)
 800bd28:	1dfb      	adds	r3, r7, #7
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d007      	beq.n	800bd40 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800bd30:	4b06      	ldr	r3, [pc, #24]	@ (800bd4c <micSettlingComplete+0x40>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	0018      	movs	r0, r3
 800bd36:	f00a f8df 	bl	8015ef8 <HAL_TIM_Base_Stop>
      DataReady = true;
 800bd3a:	4b05      	ldr	r3, [pc, #20]	@ (800bd50 <micSettlingComplete+0x44>)
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800bd40:	1dfb      	adds	r3, r7, #7
 800bd42:	781b      	ldrb	r3, [r3, #0]
}
 800bd44:	0018      	movs	r0, r3
 800bd46:	46bd      	mov	sp, r7
 800bd48:	b002      	add	sp, #8
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	20001cf8 	.word	0x20001cf8
 800bd50:	200012b3 	.word	0x200012b3

0800bd54 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	0002      	movs	r2, r0
 800bd5c:	1dfb      	adds	r3, r7, #7
 800bd5e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800bd60:	4b29      	ldr	r3, [pc, #164]	@ (800be08 <enableMicrophone+0xb4>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	1dfa      	adds	r2, r7, #7
 800bd68:	7812      	ldrb	r2, [r2, #0]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d101      	bne.n	800bd72 <enableMicrophone+0x1e>
    {
        return true;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e045      	b.n	800bdfe <enableMicrophone+0xaa>
    }
    if (bEnable)
 800bd72:	1dfb      	adds	r3, r7, #7
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d025      	beq.n	800bdc6 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800bd7a:	f7ff ffb1 	bl	800bce0 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800bd7e:	4b23      	ldr	r3, [pc, #140]	@ (800be0c <enableMicrophone+0xb8>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2280      	movs	r2, #128	@ 0x80
 800bd84:	0092      	lsls	r2, r2, #2
 800bd86:	4922      	ldr	r1, [pc, #136]	@ (800be10 <enableMicrophone+0xbc>)
 800bd88:	0018      	movs	r0, r3
 800bd8a:	f006 fad5 	bl	8012338 <HAL_I2S_Receive_DMA>
 800bd8e:	1e03      	subs	r3, r0, #0
 800bd90:	d001      	beq.n	800bd96 <enableMicrophone+0x42>
        {
            return false;
 800bd92:	2300      	movs	r3, #0
 800bd94:	e033      	b.n	800bdfe <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800bd96:	f7ff ff99 	bl	800bccc <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800bd9a:	4b1e      	ldr	r3, [pc, #120]	@ (800be14 <enableMicrophone+0xc0>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bda0:	4b1d      	ldr	r3, [pc, #116]	@ (800be18 <enableMicrophone+0xc4>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	b25b      	sxtb	r3, r3
 800bda6:	0018      	movs	r0, r3
 800bda8:	f7ff fe56 	bl	800ba58 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800bdac:	4b1b      	ldr	r3, [pc, #108]	@ (800be1c <enableMicrophone+0xc8>)
 800bdae:	2201      	movs	r2, #1
 800bdb0:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800bdb2:	4b15      	ldr	r3, [pc, #84]	@ (800be08 <enableMicrophone+0xb4>)
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bdb8:	4b19      	ldr	r3, [pc, #100]	@ (800be20 <enableMicrophone+0xcc>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bdbe:	4b19      	ldr	r3, [pc, #100]	@ (800be24 <enableMicrophone+0xd0>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	701a      	strb	r2, [r3, #0]
 800bdc4:	e01a      	b.n	800bdfc <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bdc6:	4b14      	ldr	r3, [pc, #80]	@ (800be18 <enableMicrophone+0xc4>)
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	0018      	movs	r0, r3
 800bdce:	f7ff fe5d 	bl	800ba8c <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800bdd2:	4b12      	ldr	r3, [pc, #72]	@ (800be1c <enableMicrophone+0xc8>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bdd8:	4b11      	ldr	r3, [pc, #68]	@ (800be20 <enableMicrophone+0xcc>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bdde:	4b11      	ldr	r3, [pc, #68]	@ (800be24 <enableMicrophone+0xd0>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800bde4:	4b09      	ldr	r3, [pc, #36]	@ (800be0c <enableMicrophone+0xb8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	0018      	movs	r0, r3
 800bdea:	f006 fb67 	bl	80124bc <HAL_I2S_DMAStop>
 800bdee:	1e03      	subs	r3, r0, #0
 800bdf0:	d001      	beq.n	800bdf6 <enableMicrophone+0xa2>
        {
            return false;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e003      	b.n	800bdfe <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800bdf6:	4b04      	ldr	r3, [pc, #16]	@ (800be08 <enableMicrophone+0xb4>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800bdfc:	2301      	movs	r3, #1
}
 800bdfe:	0018      	movs	r0, r3
 800be00:	46bd      	mov	sp, r7
 800be02:	b002      	add	sp, #8
 800be04:	bd80      	pop	{r7, pc}
 800be06:	46c0      	nop			@ (mov r8, r8)
 800be08:	200012b4 	.word	0x200012b4
 800be0c:	20001cfc 	.word	0x20001cfc
 800be10:	200012f8 	.word	0x200012f8
 800be14:	200012b8 	.word	0x200012b8
 800be18:	20001d04 	.word	0x20001d04
 800be1c:	200012b6 	.word	0x200012b6
 800be20:	200012b5 	.word	0x200012b5
 800be24:	200012b7 	.word	0x200012b7

0800be28 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800be2c:	4b0c      	ldr	r3, [pc, #48]	@ (800be60 <startSPLcalculation+0x38>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2201      	movs	r2, #1
 800be34:	4053      	eors	r3, r2
 800be36:	b2db      	uxtb	r3, r3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <startSPLcalculation+0x18>
    {
        return false;
 800be3c:	2300      	movs	r3, #0
 800be3e:	e00c      	b.n	800be5a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800be40:	4b08      	ldr	r3, [pc, #32]	@ (800be64 <startSPLcalculation+0x3c>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <startSPLcalculation+0x26>
    {
        return true;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e005      	b.n	800be5a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800be4e:	f000 fb63 	bl	800c518 <resetSPLstate>
    SPLcalcEnabled = true;
 800be52:	4b04      	ldr	r3, [pc, #16]	@ (800be64 <startSPLcalculation+0x3c>)
 800be54:	2201      	movs	r2, #1
 800be56:	701a      	strb	r2, [r3, #0]
    return true;
 800be58:	2301      	movs	r3, #1
}
 800be5a:	0018      	movs	r0, r3
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	200012b4 	.word	0x200012b4
 800be64:	200012b5 	.word	0x200012b5

0800be68 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800be70:	4b05      	ldr	r3, [pc, #20]	@ (800be88 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	429a      	cmp	r2, r3
 800be78:	d102      	bne.n	800be80 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800be7a:	2000      	movs	r0, #0
 800be7c:	f000 f81a 	bl	800beb4 <processHalfDMAbuffer>
  }
}
 800be80:	46c0      	nop			@ (mov r8, r8)
 800be82:	46bd      	mov	sp, r7
 800be84:	b002      	add	sp, #8
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20001cfc 	.word	0x20001cfc

0800be8c <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800be94:	4b06      	ldr	r3, [pc, #24]	@ (800beb0 <HAL_I2S_RxCpltCallback+0x24>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d104      	bne.n	800bea8 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800be9e:	2380      	movs	r3, #128	@ 0x80
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	0018      	movs	r0, r3
 800bea4:	f000 f806 	bl	800beb4 <processHalfDMAbuffer>
  }
}
 800bea8:	46c0      	nop			@ (mov r8, r8)
 800beaa:	46bd      	mov	sp, r7
 800beac:	b002      	add	sp, #8
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20001cfc 	.word	0x20001cfc

0800beb4 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	005a      	lsls	r2, r3, #1
 800bec0:	4b15      	ldr	r3, [pc, #84]	@ (800bf18 <processHalfDMAbuffer+0x64>)
 800bec2:	18d3      	adds	r3, r2, r3
 800bec4:	4a15      	ldr	r2, [pc, #84]	@ (800bf1c <processHalfDMAbuffer+0x68>)
 800bec6:	2180      	movs	r1, #128	@ 0x80
 800bec8:	0089      	lsls	r1, r1, #2
 800beca:	0018      	movs	r0, r3
 800becc:	f000 fd35 	bl	800c93a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800bed0:	4b13      	ldr	r3, [pc, #76]	@ (800bf20 <processHalfDMAbuffer+0x6c>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	425a      	negs	r2, r3
 800bed6:	4153      	adcs	r3, r2
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	4b11      	ldr	r3, [pc, #68]	@ (800bf20 <processHalfDMAbuffer+0x6c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2109      	movs	r1, #9
 800bee0:	4299      	cmp	r1, r3
 800bee2:	419b      	sbcs	r3, r3
 800bee4:	425b      	negs	r3, r3
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	480c      	ldr	r0, [pc, #48]	@ (800bf1c <processHalfDMAbuffer+0x68>)
 800beea:	2180      	movs	r1, #128	@ 0x80
 800beec:	f000 fb46 	bl	800c57c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800bef0:	4b0b      	ldr	r3, [pc, #44]	@ (800bf20 <processHalfDMAbuffer+0x6c>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b09      	cmp	r3, #9
 800bef6:	d804      	bhi.n	800bf02 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800bef8:	4b09      	ldr	r3, [pc, #36]	@ (800bf20 <processHalfDMAbuffer+0x6c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	1c5a      	adds	r2, r3, #1
 800befe:	4b08      	ldr	r3, [pc, #32]	@ (800bf20 <processHalfDMAbuffer+0x6c>)
 800bf00:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800bf02:	4b08      	ldr	r3, [pc, #32]	@ (800bf24 <processHalfDMAbuffer+0x70>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800bf0c:	f000 f826 	bl	800bf5c <calculateSPLQ31>
    }
}
 800bf10:	46c0      	nop			@ (mov r8, r8)
 800bf12:	46bd      	mov	sp, r7
 800bf14:	b002      	add	sp, #8
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	200012f8 	.word	0x200012f8
 800bf1c:	20001af8 	.word	0x20001af8
 800bf20:	200012b8 	.word	0x200012b8
 800bf24:	200012b5 	.word	0x200012b5

0800bf28 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bf30:	4b07      	ldr	r3, [pc, #28]	@ (800bf50 <HAL_I2S_ErrorCallback+0x28>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d106      	bne.n	800bf48 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800bf3a:	4a06      	ldr	r2, [pc, #24]	@ (800bf54 <HAL_I2S_ErrorCallback+0x2c>)
 800bf3c:	239f      	movs	r3, #159	@ 0x9f
 800bf3e:	0059      	lsls	r1, r3, #1
 800bf40:	4b05      	ldr	r3, [pc, #20]	@ (800bf58 <HAL_I2S_ErrorCallback+0x30>)
 800bf42:	0018      	movs	r0, r3
 800bf44:	f001 fe42 	bl	800dbcc <errorHandler>
  }
}
 800bf48:	46c0      	nop			@ (mov r8, r8)
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b002      	add	sp, #8
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20001cfc 	.word	0x20001cfc
 800bf54:	0802412c 	.word	0x0802412c
 800bf58:	08024890 	.word	0x08024890

0800bf5c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800bf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf5e:	b0b3      	sub	sp, #204	@ 0xcc
 800bf60:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800bf62:	4ae2      	ldr	r2, [pc, #904]	@ (800c2ec <calculateSPLQ31+0x390>)
 800bf64:	2338      	movs	r3, #56	@ 0x38
 800bf66:	2030      	movs	r0, #48	@ 0x30
 800bf68:	181b      	adds	r3, r3, r0
 800bf6a:	19d9      	adds	r1, r3, r7
 800bf6c:	2334      	movs	r3, #52	@ 0x34
 800bf6e:	181b      	adds	r3, r3, r0
 800bf70:	19d8      	adds	r0, r3, r7
 800bf72:	2380      	movs	r3, #128	@ 0x80
 800bf74:	f000 fc36 	bl	800c7e4 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800bf78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	da00      	bge.n	800bf80 <calculateSPLQ31+0x24>
 800bf7e:	3301      	adds	r3, #1
 800bf80:	105b      	asrs	r3, r3, #1
 800bf82:	001a      	movs	r2, r3
 800bf84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	da00      	bge.n	800bf8c <calculateSPLQ31+0x30>
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	105b      	asrs	r3, r3, #1
 800bf8e:	18d3      	adds	r3, r2, r3
 800bf90:	2188      	movs	r1, #136	@ 0x88
 800bf92:	187a      	adds	r2, r7, r1
 800bf94:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800bf96:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bf98:	187b      	adds	r3, r7, r1
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	2284      	movs	r2, #132	@ 0x84
 800bfa2:	18b9      	adds	r1, r7, r2
 800bfa4:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800bfa6:	18bb      	adds	r3, r7, r2
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4ad1      	ldr	r2, [pc, #836]	@ (800c2f0 <calculateSPLQ31+0x394>)
 800bfac:	0019      	movs	r1, r3
 800bfae:	0010      	movs	r0, r2
 800bfb0:	f000 fc58 	bl	800c864 <getPo2factor>
 800bfb4:	0003      	movs	r3, r0
 800bfb6:	2280      	movs	r2, #128	@ 0x80
 800bfb8:	18ba      	adds	r2, r7, r2
 800bfba:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	2284      	movs	r2, #132	@ 0x84
 800bfc0:	2130      	movs	r1, #48	@ 0x30
 800bfc2:	1852      	adds	r2, r2, r1
 800bfc4:	19d2      	adds	r2, r2, r7
 800bfc6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800bfc8:	2300      	movs	r3, #0
 800bfca:	2280      	movs	r2, #128	@ 0x80
 800bfcc:	1852      	adds	r2, r2, r1
 800bfce:	19d2      	adds	r2, r2, r7
 800bfd0:	6013      	str	r3, [r2, #0]
 800bfd2:	e032      	b.n	800c03a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800bfd4:	4ac5      	ldr	r2, [pc, #788]	@ (800c2ec <calculateSPLQ31+0x390>)
 800bfd6:	2680      	movs	r6, #128	@ 0x80
 800bfd8:	2330      	movs	r3, #48	@ 0x30
 800bfda:	18f1      	adds	r1, r6, r3
 800bfdc:	19cb      	adds	r3, r1, r7
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	589a      	ldr	r2, [r3, r2]
 800bfe4:	2188      	movs	r1, #136	@ 0x88
 800bfe6:	1879      	adds	r1, r7, r1
 800bfe8:	680b      	ldr	r3, [r1, #0]
 800bfea:	1ad2      	subs	r2, r2, r3
 800bfec:	2180      	movs	r1, #128	@ 0x80
 800bfee:	1879      	adds	r1, r7, r1
 800bff0:	680b      	ldr	r3, [r1, #0]
 800bff2:	409a      	lsls	r2, r3
 800bff4:	0011      	movs	r1, r2
 800bff6:	4abf      	ldr	r2, [pc, #764]	@ (800c2f4 <calculateSPLQ31+0x398>)
 800bff8:	2084      	movs	r0, #132	@ 0x84
 800bffa:	2330      	movs	r3, #48	@ 0x30
 800bffc:	18c3      	adds	r3, r0, r3
 800bffe:	19db      	adds	r3, r3, r7
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c006:	2230      	movs	r2, #48	@ 0x30
 800c008:	1883      	adds	r3, r0, r2
 800c00a:	19db      	adds	r3, r3, r7
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3301      	adds	r3, #1
 800c010:	49b8      	ldr	r1, [pc, #736]	@ (800c2f4 <calculateSPLQ31+0x398>)
 800c012:	009a      	lsls	r2, r3, #2
 800c014:	2300      	movs	r3, #0
 800c016:	5053      	str	r3, [r2, r1]
        count += 2;
 800c018:	2230      	movs	r2, #48	@ 0x30
 800c01a:	1883      	adds	r3, r0, r2
 800c01c:	19db      	adds	r3, r3, r7
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3302      	adds	r3, #2
 800c022:	0011      	movs	r1, r2
 800c024:	1882      	adds	r2, r0, r2
 800c026:	19d2      	adds	r2, r2, r7
 800c028:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c02a:	000a      	movs	r2, r1
 800c02c:	18b3      	adds	r3, r6, r2
 800c02e:	19db      	adds	r3, r3, r7
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3301      	adds	r3, #1
 800c034:	18b2      	adds	r2, r6, r2
 800c036:	19d2      	adds	r2, r2, r7
 800c038:	6013      	str	r3, [r2, #0]
 800c03a:	2380      	movs	r3, #128	@ 0x80
 800c03c:	2630      	movs	r6, #48	@ 0x30
 800c03e:	199b      	adds	r3, r3, r6
 800c040:	19db      	adds	r3, r3, r7
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b7f      	cmp	r3, #127	@ 0x7f
 800c046:	d9c5      	bls.n	800bfd4 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c048:	4bab      	ldr	r3, [pc, #684]	@ (800c2f8 <calculateSPLQ31+0x39c>)
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	49a9      	ldr	r1, [pc, #676]	@ (800c2f4 <calculateSPLQ31+0x398>)
 800c04e:	2301      	movs	r3, #1
 800c050:	2200      	movs	r2, #0
 800c052:	f010 ffcd 	bl	801cff0 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c056:	4aa9      	ldr	r2, [pc, #676]	@ (800c2fc <calculateSPLQ31+0x3a0>)
 800c058:	2338      	movs	r3, #56	@ 0x38
 800c05a:	199b      	adds	r3, r3, r6
 800c05c:	19d9      	adds	r1, r3, r7
 800c05e:	2334      	movs	r3, #52	@ 0x34
 800c060:	199b      	adds	r3, r3, r6
 800c062:	19d8      	adds	r0, r3, r7
 800c064:	237e      	movs	r3, #126	@ 0x7e
 800c066:	f000 fbbd 	bl	800c7e4 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c06a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c06c:	2380      	movs	r3, #128	@ 0x80
 800c06e:	061b      	lsls	r3, r3, #24
 800c070:	429a      	cmp	r2, r3
 800c072:	d101      	bne.n	800c078 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c074:	4b9e      	ldr	r3, [pc, #632]	@ (800c2f0 <calculateSPLQ31+0x394>)
 800c076:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c078:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c07a:	2380      	movs	r3, #128	@ 0x80
 800c07c:	061b      	lsls	r3, r3, #24
 800c07e:	429a      	cmp	r2, r3
 800c080:	d101      	bne.n	800c086 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c082:	4b9b      	ldr	r3, [pc, #620]	@ (800c2f0 <calculateSPLQ31+0x394>)
 800c084:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c088:	17da      	asrs	r2, r3, #31
 800c08a:	189b      	adds	r3, r3, r2
 800c08c:	4053      	eors	r3, r2
 800c08e:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c092:	17da      	asrs	r2, r3, #31
 800c094:	189b      	adds	r3, r3, r2
 800c096:	4053      	eors	r3, r2
 800c098:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c09a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c09c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	dd01      	ble.n	800c0a6 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c0a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c0a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c0ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c0ae:	4a90      	ldr	r2, [pc, #576]	@ (800c2f0 <calculateSPLQ31+0x394>)
 800c0b0:	0019      	movs	r1, r3
 800c0b2:	0010      	movs	r0, r2
 800c0b4:	f000 fbd6 	bl	800c864 <getPo2factor>
 800c0b8:	0003      	movs	r3, r0
 800c0ba:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c0bc:	2302      	movs	r3, #2
 800c0be:	22ac      	movs	r2, #172	@ 0xac
 800c0c0:	18ba      	adds	r2, r7, r2
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	e012      	b.n	800c0ec <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c0c6:	4a8b      	ldr	r2, [pc, #556]	@ (800c2f4 <calculateSPLQ31+0x398>)
 800c0c8:	20ac      	movs	r0, #172	@ 0xac
 800c0ca:	183b      	adds	r3, r7, r0
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	589a      	ldr	r2, [r3, r2]
 800c0d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0d4:	409a      	lsls	r2, r3
 800c0d6:	0011      	movs	r1, r2
 800c0d8:	4a86      	ldr	r2, [pc, #536]	@ (800c2f4 <calculateSPLQ31+0x398>)
 800c0da:	183b      	adds	r3, r7, r0
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c0e2:	183b      	adds	r3, r7, r0
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	183a      	adds	r2, r7, r0
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	23ac      	movs	r3, #172	@ 0xac
 800c0ee:	18fb      	adds	r3, r7, r3
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c0f4:	d9e7      	bls.n	800c0c6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c0f6:	4b7d      	ldr	r3, [pc, #500]	@ (800c2ec <calculateSPLQ31+0x390>)
 800c0f8:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c0fa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c0fc:	4b7d      	ldr	r3, [pc, #500]	@ (800c2f4 <calculateSPLQ31+0x398>)
 800c0fe:	2240      	movs	r2, #64	@ 0x40
 800c100:	0018      	movs	r0, r3
 800c102:	f011 fd1f 	bl	801db44 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c106:	2330      	movs	r3, #48	@ 0x30
 800c108:	18fb      	adds	r3, r7, r3
 800c10a:	0018      	movs	r0, r3
 800c10c:	2330      	movs	r3, #48	@ 0x30
 800c10e:	001a      	movs	r2, r3
 800c110:	2100      	movs	r1, #0
 800c112:	f013 fb3b 	bl	801f78c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c116:	2200      	movs	r2, #0
 800c118:	2300      	movs	r3, #0
 800c11a:	21a0      	movs	r1, #160	@ 0xa0
 800c11c:	1879      	adds	r1, r7, r1
 800c11e:	600a      	str	r2, [r1, #0]
 800c120:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c122:	2301      	movs	r3, #1
 800c124:	229c      	movs	r2, #156	@ 0x9c
 800c126:	18ba      	adds	r2, r7, r2
 800c128:	6013      	str	r3, [r2, #0]
 800c12a:	e05b      	b.n	800c1e4 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c12c:	269c      	movs	r6, #156	@ 0x9c
 800c12e:	19bb      	adds	r3, r7, r6
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	009a      	lsls	r2, r3, #2
 800c134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c136:	189b      	adds	r3, r3, r2
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	613b      	str	r3, [r7, #16]
 800c13c:	17db      	asrs	r3, r3, #31
 800c13e:	617b      	str	r3, [r7, #20]
 800c140:	4b6f      	ldr	r3, [pc, #444]	@ (800c300 <calculateSPLQ31+0x3a4>)
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	19bb      	adds	r3, r7, r6
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	005b      	lsls	r3, r3, #1
 800c14a:	18d3      	adds	r3, r2, r3
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	60bb      	str	r3, [r7, #8]
 800c150:	2300      	movs	r3, #0
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6938      	ldr	r0, [r7, #16]
 800c15a:	6979      	ldr	r1, [r7, #20]
 800c15c:	f7f4 fa30 	bl	80005c0 <__aeabi_lmul>
 800c160:	0002      	movs	r2, r0
 800c162:	000b      	movs	r3, r1
 800c164:	0010      	movs	r0, r2
 800c166:	0019      	movs	r1, r3
 800c168:	23a0      	movs	r3, #160	@ 0xa0
 800c16a:	18fa      	adds	r2, r7, r3
 800c16c:	6853      	ldr	r3, [r2, #4]
 800c16e:	6812      	ldr	r2, [r2, #0]
 800c170:	1812      	adds	r2, r2, r0
 800c172:	414b      	adcs	r3, r1
 800c174:	21a0      	movs	r1, #160	@ 0xa0
 800c176:	1879      	adds	r1, r7, r1
 800c178:	600a      	str	r2, [r1, #0]
 800c17a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c17c:	4b61      	ldr	r3, [pc, #388]	@ (800c304 <calculateSPLQ31+0x3a8>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	19bb      	adds	r3, r7, r6
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	18d3      	adds	r3, r2, r3
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b06      	cmp	r3, #6
 800c18a:	d025      	beq.n	800c1d8 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c18c:	4b5d      	ldr	r3, [pc, #372]	@ (800c304 <calculateSPLQ31+0x3a8>)
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	19bb      	adds	r3, r7, r6
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	18d3      	adds	r3, r2, r3
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2230      	movs	r2, #48	@ 0x30
 800c19a:	18ba      	adds	r2, r7, r2
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	18d3      	adds	r3, r2, r3
 800c1a0:	6818      	ldr	r0, [r3, #0]
 800c1a2:	6859      	ldr	r1, [r3, #4]
 800c1a4:	19bb      	adds	r3, r7, r6
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	009a      	lsls	r2, r3, #2
 800c1aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1ac:	189b      	adds	r3, r3, r2
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	603b      	str	r3, [r7, #0]
 800c1b2:	17db      	asrs	r3, r3, #31
 800c1b4:	607b      	str	r3, [r7, #4]
 800c1b6:	4b53      	ldr	r3, [pc, #332]	@ (800c304 <calculateSPLQ31+0x3a8>)
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	19be      	adds	r6, r7, r6
 800c1bc:	6833      	ldr	r3, [r6, #0]
 800c1be:	18d3      	adds	r3, r2, r3
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	001e      	movs	r6, r3
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	1880      	adds	r0, r0, r2
 800c1ca:	4159      	adcs	r1, r3
 800c1cc:	2330      	movs	r3, #48	@ 0x30
 800c1ce:	18fa      	adds	r2, r7, r3
 800c1d0:	00f3      	lsls	r3, r6, #3
 800c1d2:	18d3      	adds	r3, r2, r3
 800c1d4:	6018      	str	r0, [r3, #0]
 800c1d6:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c1d8:	229c      	movs	r2, #156	@ 0x9c
 800c1da:	18bb      	adds	r3, r7, r2
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	18ba      	adds	r2, r7, r2
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	239c      	movs	r3, #156	@ 0x9c
 800c1e6:	18fb      	adds	r3, r7, r3
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b3f      	cmp	r3, #63	@ 0x3f
 800c1ec:	d99e      	bls.n	800c12c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c1ee:	2380      	movs	r3, #128	@ 0x80
 800c1f0:	18fb      	adds	r3, r7, r3
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	001a      	movs	r2, r3
 800c1f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1fa:	005b      	lsls	r3, r3, #1
 800c1fc:	18d3      	adds	r3, r2, r3
 800c1fe:	3b22      	subs	r3, #34	@ 0x22
 800c200:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c202:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c204:	17da      	asrs	r2, r3, #31
 800c206:	189b      	adds	r3, r3, r2
 800c208:	4053      	eors	r3, r2
 800c20a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c20c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c20e:	2b00      	cmp	r3, #0
 800c210:	da62      	bge.n	800c2d8 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c214:	3b20      	subs	r3, #32
 800c216:	2b00      	cmp	r3, #0
 800c218:	db05      	blt.n	800c226 <calculateSPLQ31+0x2ca>
 800c21a:	22a0      	movs	r2, #160	@ 0xa0
 800c21c:	18ba      	adds	r2, r7, r2
 800c21e:	6812      	ldr	r2, [r2, #0]
 800c220:	409a      	lsls	r2, r3
 800c222:	627a      	str	r2, [r7, #36]	@ 0x24
 800c224:	e010      	b.n	800c248 <calculateSPLQ31+0x2ec>
 800c226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c228:	2220      	movs	r2, #32
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	22a0      	movs	r2, #160	@ 0xa0
 800c22e:	18ba      	adds	r2, r7, r2
 800c230:	6812      	ldr	r2, [r2, #0]
 800c232:	40da      	lsrs	r2, r3
 800c234:	0013      	movs	r3, r2
 800c236:	22a4      	movs	r2, #164	@ 0xa4
 800c238:	18ba      	adds	r2, r7, r2
 800c23a:	6811      	ldr	r1, [r2, #0]
 800c23c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c23e:	4091      	lsls	r1, r2
 800c240:	6279      	str	r1, [r7, #36]	@ 0x24
 800c242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c244:	431a      	orrs	r2, r3
 800c246:	627a      	str	r2, [r7, #36]	@ 0x24
 800c248:	21a0      	movs	r1, #160	@ 0xa0
 800c24a:	187b      	adds	r3, r7, r1
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c250:	409a      	lsls	r2, r3
 800c252:	623a      	str	r2, [r7, #32]
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c258:	187a      	adds	r2, r7, r1
 800c25a:	6013      	str	r3, [r2, #0]
 800c25c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c25e:	2300      	movs	r3, #0
 800c260:	2298      	movs	r2, #152	@ 0x98
 800c262:	18ba      	adds	r2, r7, r2
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	e031      	b.n	800c2cc <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c268:	2330      	movs	r3, #48	@ 0x30
 800c26a:	18fa      	adds	r2, r7, r3
 800c26c:	2398      	movs	r3, #152	@ 0x98
 800c26e:	18fb      	adds	r3, r7, r3
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	00db      	lsls	r3, r3, #3
 800c274:	18d3      	adds	r3, r2, r3
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c27c:	3920      	subs	r1, #32
 800c27e:	2900      	cmp	r1, #0
 800c280:	db03      	blt.n	800c28a <calculateSPLQ31+0x32e>
 800c282:	0010      	movs	r0, r2
 800c284:	4088      	lsls	r0, r1
 800c286:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c288:	e00c      	b.n	800c2a4 <calculateSPLQ31+0x348>
 800c28a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c28c:	2020      	movs	r0, #32
 800c28e:	1a41      	subs	r1, r0, r1
 800c290:	0010      	movs	r0, r2
 800c292:	40c8      	lsrs	r0, r1
 800c294:	0001      	movs	r1, r0
 800c296:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c298:	001c      	movs	r4, r3
 800c29a:	4084      	lsls	r4, r0
 800c29c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c29e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2a0:	4308      	orrs	r0, r1
 800c2a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c2a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c2a6:	0013      	movs	r3, r2
 800c2a8:	408b      	lsls	r3, r1
 800c2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2ac:	2330      	movs	r3, #48	@ 0x30
 800c2ae:	18fa      	adds	r2, r7, r3
 800c2b0:	2098      	movs	r0, #152	@ 0x98
 800c2b2:	183b      	adds	r3, r7, r0
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	00db      	lsls	r3, r3, #3
 800c2b8:	18d3      	adds	r3, r2, r3
 800c2ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2be:	6019      	str	r1, [r3, #0]
 800c2c0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2c2:	183b      	adds	r3, r7, r0
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	183a      	adds	r2, r7, r0
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	2398      	movs	r3, #152	@ 0x98
 800c2ce:	18fb      	adds	r3, r7, r3
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b05      	cmp	r3, #5
 800c2d4:	d9c8      	bls.n	800c268 <calculateSPLQ31+0x30c>
 800c2d6:	e06b      	b.n	800c3b0 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c2d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2da:	3b20      	subs	r3, #32
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	db13      	blt.n	800c308 <calculateSPLQ31+0x3ac>
 800c2e0:	22a4      	movs	r2, #164	@ 0xa4
 800c2e2:	18ba      	adds	r2, r7, r2
 800c2e4:	6812      	ldr	r2, [r2, #0]
 800c2e6:	40da      	lsrs	r2, r3
 800c2e8:	61ba      	str	r2, [r7, #24]
 800c2ea:	e01e      	b.n	800c32a <calculateSPLQ31+0x3ce>
 800c2ec:	20001af8 	.word	0x20001af8
 800c2f0:	7fffffff 	.word	0x7fffffff
 800c2f4:	20001d44 	.word	0x20001d44
 800c2f8:	200000b0 	.word	0x200000b0
 800c2fc:	20001d4c 	.word	0x20001d4c
 800c300:	200000b4 	.word	0x200000b4
 800c304:	200000c0 	.word	0x200000c0
 800c308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c30a:	2220      	movs	r2, #32
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	22a4      	movs	r2, #164	@ 0xa4
 800c310:	18ba      	adds	r2, r7, r2
 800c312:	6812      	ldr	r2, [r2, #0]
 800c314:	409a      	lsls	r2, r3
 800c316:	0013      	movs	r3, r2
 800c318:	22a0      	movs	r2, #160	@ 0xa0
 800c31a:	18ba      	adds	r2, r7, r2
 800c31c:	6811      	ldr	r1, [r2, #0]
 800c31e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c320:	40d1      	lsrs	r1, r2
 800c322:	61b9      	str	r1, [r7, #24]
 800c324:	69ba      	ldr	r2, [r7, #24]
 800c326:	431a      	orrs	r2, r3
 800c328:	61ba      	str	r2, [r7, #24]
 800c32a:	23a4      	movs	r3, #164	@ 0xa4
 800c32c:	18fb      	adds	r3, r7, r3
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c332:	40da      	lsrs	r2, r3
 800c334:	61fa      	str	r2, [r7, #28]
 800c336:	69ba      	ldr	r2, [r7, #24]
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	21a0      	movs	r1, #160	@ 0xa0
 800c33c:	1879      	adds	r1, r7, r1
 800c33e:	600a      	str	r2, [r1, #0]
 800c340:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c342:	2300      	movs	r3, #0
 800c344:	2294      	movs	r2, #148	@ 0x94
 800c346:	18ba      	adds	r2, r7, r2
 800c348:	6013      	str	r3, [r2, #0]
 800c34a:	e02c      	b.n	800c3a6 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c34c:	2330      	movs	r3, #48	@ 0x30
 800c34e:	18fa      	adds	r2, r7, r3
 800c350:	2394      	movs	r3, #148	@ 0x94
 800c352:	18fb      	adds	r3, r7, r3
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	18d3      	adds	r3, r2, r3
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c360:	3920      	subs	r1, #32
 800c362:	2900      	cmp	r1, #0
 800c364:	db03      	blt.n	800c36e <calculateSPLQ31+0x412>
 800c366:	0018      	movs	r0, r3
 800c368:	40c8      	lsrs	r0, r1
 800c36a:	0004      	movs	r4, r0
 800c36c:	e00a      	b.n	800c384 <calculateSPLQ31+0x428>
 800c36e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c370:	2020      	movs	r0, #32
 800c372:	1a41      	subs	r1, r0, r1
 800c374:	0018      	movs	r0, r3
 800c376:	4088      	lsls	r0, r1
 800c378:	0001      	movs	r1, r0
 800c37a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c37c:	0016      	movs	r6, r2
 800c37e:	40c6      	lsrs	r6, r0
 800c380:	0034      	movs	r4, r6
 800c382:	430c      	orrs	r4, r1
 800c384:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c386:	40cb      	lsrs	r3, r1
 800c388:	001d      	movs	r5, r3
 800c38a:	2330      	movs	r3, #48	@ 0x30
 800c38c:	18fa      	adds	r2, r7, r3
 800c38e:	2194      	movs	r1, #148	@ 0x94
 800c390:	187b      	adds	r3, r7, r1
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	18d3      	adds	r3, r2, r3
 800c398:	601c      	str	r4, [r3, #0]
 800c39a:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c39c:	187b      	adds	r3, r7, r1
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	187a      	adds	r2, r7, r1
 800c3a4:	6013      	str	r3, [r2, #0]
 800c3a6:	2394      	movs	r3, #148	@ 0x94
 800c3a8:	18fb      	adds	r3, r7, r3
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b05      	cmp	r3, #5
 800c3ae:	d9cd      	bls.n	800c34c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800c3b0:	230f      	movs	r3, #15
 800c3b2:	425d      	negs	r5, r3
 800c3b4:	2305      	movs	r3, #5
 800c3b6:	425e      	negs	r6, r3
 800c3b8:	4b4a      	ldr	r3, [pc, #296]	@ (800c4e4 <calculateSPLQ31+0x588>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	4b4a      	ldr	r3, [pc, #296]	@ (800c4e8 <calculateSPLQ31+0x58c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	21a0      	movs	r1, #160	@ 0xa0
 800c3c6:	1879      	adds	r1, r7, r1
 800c3c8:	6808      	ldr	r0, [r1, #0]
 800c3ca:	6849      	ldr	r1, [r1, #4]
 800c3cc:	4c47      	ldr	r4, [pc, #284]	@ (800c4ec <calculateSPLQ31+0x590>)
 800c3ce:	9403      	str	r4, [sp, #12]
 800c3d0:	4c47      	ldr	r4, [pc, #284]	@ (800c4f0 <calculateSPLQ31+0x594>)
 800c3d2:	9402      	str	r4, [sp, #8]
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	9200      	str	r2, [sp, #0]
 800c3d8:	0033      	movs	r3, r6
 800c3da:	002a      	movs	r2, r5
 800c3dc:	f000 fa86 	bl	800c8ec <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	2290      	movs	r2, #144	@ 0x90
 800c3e4:	18ba      	adds	r2, r7, r2
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	e026      	b.n	800c438 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c3ea:	2330      	movs	r3, #48	@ 0x30
 800c3ec:	18fa      	adds	r2, r7, r3
 800c3ee:	2490      	movs	r4, #144	@ 0x90
 800c3f0:	193b      	adds	r3, r7, r4
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	00db      	lsls	r3, r3, #3
 800c3f6:	18d3      	adds	r3, r2, r3
 800c3f8:	6818      	ldr	r0, [r3, #0]
 800c3fa:	6859      	ldr	r1, [r3, #4]
 800c3fc:	230f      	movs	r3, #15
 800c3fe:	425d      	negs	r5, r3
 800c400:	2305      	movs	r3, #5
 800c402:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800c404:	193b      	adds	r3, r7, r4
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	009a      	lsls	r2, r3, #2
 800c40a:	4b3a      	ldr	r3, [pc, #232]	@ (800c4f4 <calculateSPLQ31+0x598>)
 800c40c:	18d3      	adds	r3, r2, r3
 800c40e:	193a      	adds	r2, r7, r4
 800c410:	6812      	ldr	r2, [r2, #0]
 800c412:	0094      	lsls	r4, r2, #2
 800c414:	4a38      	ldr	r2, [pc, #224]	@ (800c4f8 <calculateSPLQ31+0x59c>)
 800c416:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c418:	9203      	str	r2, [sp, #12]
 800c41a:	9302      	str	r3, [sp, #8]
 800c41c:	2300      	movs	r3, #0
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	2300      	movs	r3, #0
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	0033      	movs	r3, r6
 800c426:	002a      	movs	r2, r5
 800c428:	f000 fa60 	bl	800c8ec <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c42c:	2490      	movs	r4, #144	@ 0x90
 800c42e:	193b      	adds	r3, r7, r4
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	193a      	adds	r2, r7, r4
 800c436:	6013      	str	r3, [r2, #0]
 800c438:	2390      	movs	r3, #144	@ 0x90
 800c43a:	18fb      	adds	r3, r7, r3
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b05      	cmp	r3, #5
 800c440:	d9d3      	bls.n	800c3ea <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800c442:	4b2b      	ldr	r3, [pc, #172]	@ (800c4f0 <calculateSPLQ31+0x594>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b2d      	ldr	r3, [pc, #180]	@ (800c4fc <calculateSPLQ31+0x5a0>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	18d2      	adds	r2, r2, r3
 800c44c:	4b2b      	ldr	r3, [pc, #172]	@ (800c4fc <calculateSPLQ31+0x5a0>)
 800c44e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800c450:	4b26      	ldr	r3, [pc, #152]	@ (800c4ec <calculateSPLQ31+0x590>)
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	4b2a      	ldr	r3, [pc, #168]	@ (800c500 <calculateSPLQ31+0x5a4>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	18d2      	adds	r2, r2, r3
 800c45a:	4b29      	ldr	r3, [pc, #164]	@ (800c500 <calculateSPLQ31+0x5a4>)
 800c45c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c45e:	2300      	movs	r3, #0
 800c460:	228c      	movs	r2, #140	@ 0x8c
 800c462:	18ba      	adds	r2, r7, r2
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	e025      	b.n	800c4b4 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800c468:	4b22      	ldr	r3, [pc, #136]	@ (800c4f4 <calculateSPLQ31+0x598>)
 800c46a:	208c      	movs	r0, #140	@ 0x8c
 800c46c:	183a      	adds	r2, r7, r0
 800c46e:	6812      	ldr	r2, [r2, #0]
 800c470:	0092      	lsls	r2, r2, #2
 800c472:	58d2      	ldr	r2, [r2, r3]
 800c474:	4b23      	ldr	r3, [pc, #140]	@ (800c504 <calculateSPLQ31+0x5a8>)
 800c476:	1839      	adds	r1, r7, r0
 800c478:	6809      	ldr	r1, [r1, #0]
 800c47a:	0089      	lsls	r1, r1, #2
 800c47c:	58cb      	ldr	r3, [r1, r3]
 800c47e:	18d1      	adds	r1, r2, r3
 800c480:	4b20      	ldr	r3, [pc, #128]	@ (800c504 <calculateSPLQ31+0x5a8>)
 800c482:	183a      	adds	r2, r7, r0
 800c484:	6812      	ldr	r2, [r2, #0]
 800c486:	0092      	lsls	r2, r2, #2
 800c488:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800c48a:	4b1b      	ldr	r3, [pc, #108]	@ (800c4f8 <calculateSPLQ31+0x59c>)
 800c48c:	183a      	adds	r2, r7, r0
 800c48e:	6812      	ldr	r2, [r2, #0]
 800c490:	0092      	lsls	r2, r2, #2
 800c492:	58d2      	ldr	r2, [r2, r3]
 800c494:	4b1c      	ldr	r3, [pc, #112]	@ (800c508 <calculateSPLQ31+0x5ac>)
 800c496:	1839      	adds	r1, r7, r0
 800c498:	6809      	ldr	r1, [r1, #0]
 800c49a:	0089      	lsls	r1, r1, #2
 800c49c:	58cb      	ldr	r3, [r1, r3]
 800c49e:	18d1      	adds	r1, r2, r3
 800c4a0:	4b19      	ldr	r3, [pc, #100]	@ (800c508 <calculateSPLQ31+0x5ac>)
 800c4a2:	183a      	adds	r2, r7, r0
 800c4a4:	6812      	ldr	r2, [r2, #0]
 800c4a6:	0092      	lsls	r2, r2, #2
 800c4a8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4aa:	183b      	adds	r3, r7, r0
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	183a      	adds	r2, r7, r0
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	238c      	movs	r3, #140	@ 0x8c
 800c4b6:	18fb      	adds	r3, r7, r3
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b05      	cmp	r3, #5
 800c4bc:	d9d4      	bls.n	800c468 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800c4be:	4b13      	ldr	r3, [pc, #76]	@ (800c50c <calculateSPLQ31+0x5b0>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	4b11      	ldr	r3, [pc, #68]	@ (800c50c <calculateSPLQ31+0x5b0>)
 800c4c6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800c4c8:	4b10      	ldr	r3, [pc, #64]	@ (800c50c <calculateSPLQ31+0x5b0>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b0f      	cmp	r3, #15
 800c4ce:	d905      	bls.n	800c4dc <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800c4d0:	4b0f      	ldr	r3, [pc, #60]	@ (800c510 <calculateSPLQ31+0x5b4>)
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c514 <calculateSPLQ31+0x5b8>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
    }
}
 800c4dc:	46c0      	nop			@ (mov r8, r8)
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	b02f      	add	sp, #188	@ 0xbc
 800c4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e4:	200000b8 	.word	0x200000b8
 800c4e8:	200000bc 	.word	0x200000bc
 800c4ec:	200012c4 	.word	0x200012c4
 800c4f0:	200012c0 	.word	0x200012c0
 800c4f4:	200012c8 	.word	0x200012c8
 800c4f8:	200012e0 	.word	0x200012e0
 800c4fc:	20001d08 	.word	0x20001d08
 800c500:	20001d0c 	.word	0x20001d0c
 800c504:	20001d10 	.word	0x20001d10
 800c508:	20001d28 	.word	0x20001d28
 800c50c:	20001d40 	.word	0x20001d40
 800c510:	200012b7 	.word	0x200012b7
 800c514:	200012b5 	.word	0x200012b5

0800c518 <resetSPLstate>:

static void resetSPLstate(void)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800c51e:	4b11      	ldr	r3, [pc, #68]	@ (800c564 <resetSPLstate+0x4c>)
 800c520:	2200      	movs	r2, #0
 800c522:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800c524:	4b10      	ldr	r3, [pc, #64]	@ (800c568 <resetSPLstate+0x50>)
 800c526:	2200      	movs	r2, #0
 800c528:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800c52a:	4b10      	ldr	r3, [pc, #64]	@ (800c56c <resetSPLstate+0x54>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c530:	2300      	movs	r3, #0
 800c532:	607b      	str	r3, [r7, #4]
 800c534:	e00c      	b.n	800c550 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800c536:	4b0e      	ldr	r3, [pc, #56]	@ (800c570 <resetSPLstate+0x58>)
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	0092      	lsls	r2, r2, #2
 800c53c:	2100      	movs	r1, #0
 800c53e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800c540:	4b0c      	ldr	r3, [pc, #48]	@ (800c574 <resetSPLstate+0x5c>)
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	0092      	lsls	r2, r2, #2
 800c546:	2100      	movs	r1, #0
 800c548:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3301      	adds	r3, #1
 800c54e:	607b      	str	r3, [r7, #4]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b05      	cmp	r3, #5
 800c554:	d9ef      	bls.n	800c536 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800c556:	4b08      	ldr	r3, [pc, #32]	@ (800c578 <resetSPLstate+0x60>)
 800c558:	2200      	movs	r2, #0
 800c55a:	701a      	strb	r2, [r3, #0]
}
 800c55c:	46c0      	nop			@ (mov r8, r8)
 800c55e:	46bd      	mov	sp, r7
 800c560:	b002      	add	sp, #8
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20001d08 	.word	0x20001d08
 800c568:	20001d0c 	.word	0x20001d0c
 800c56c:	20001d40 	.word	0x20001d40
 800c570:	20001d10 	.word	0x20001d10
 800c574:	20001d28 	.word	0x20001d28
 800c578:	200012b7 	.word	0x200012b7

0800c57c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c57c:	b5b0      	push	{r4, r5, r7, lr}
 800c57e:	b090      	sub	sp, #64	@ 0x40
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	0019      	movs	r1, r3
 800c588:	1dfb      	adds	r3, r7, #7
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	1dbb      	adds	r3, r7, #6
 800c58e:	1c0a      	adds	r2, r1, #0
 800c590:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c592:	1dfb      	adds	r3, r7, #7
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d005      	beq.n	800c5a6 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c59a:	4b3b      	ldr	r3, [pc, #236]	@ (800c688 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c5a0:	4b3a      	ldr	r3, [pc, #232]	@ (800c68c <getFilteredMaxAmplitudeQ31+0x110>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c5ae:	2305      	movs	r3, #5
 800c5b0:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5b6:	e040      	b.n	800c63a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	18d3      	adds	r3, r2, r3
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	409a      	lsls	r2, r3
 800c5c6:	0013      	movs	r3, r2
 800c5c8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c5ca:	4b30      	ldr	r3, [pc, #192]	@ (800c68c <getFilteredMaxAmplitudeQ31+0x110>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	425a      	negs	r2, r3
 800c5d0:	4b2e      	ldr	r3, [pc, #184]	@ (800c68c <getFilteredMaxAmplitudeQ31+0x110>)
 800c5d2:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c5d4:	2418      	movs	r4, #24
 800c5d6:	193a      	adds	r2, r7, r4
 800c5d8:	492c      	ldr	r1, [pc, #176]	@ (800c68c <getFilteredMaxAmplitudeQ31+0x110>)
 800c5da:	231c      	movs	r3, #28
 800c5dc:	18f8      	adds	r0, r7, r3
 800c5de:	2301      	movs	r3, #1
 800c5e0:	f011 fb08 	bl	801dbf4 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c5e4:	2514      	movs	r5, #20
 800c5e6:	197a      	adds	r2, r7, r5
 800c5e8:	1939      	adds	r1, r7, r4
 800c5ea:	4829      	ldr	r0, [pc, #164]	@ (800c690 <getFilteredMaxAmplitudeQ31+0x114>)
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	f011 facf 	bl	801db90 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c5f2:	2410      	movs	r4, #16
 800c5f4:	193a      	adds	r2, r7, r4
 800c5f6:	4924      	ldr	r1, [pc, #144]	@ (800c688 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c5f8:	4826      	ldr	r0, [pc, #152]	@ (800c694 <getFilteredMaxAmplitudeQ31+0x118>)
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	f011 fac8 	bl	801db90 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c600:	4a21      	ldr	r2, [pc, #132]	@ (800c688 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c602:	1939      	adds	r1, r7, r4
 800c604:	1978      	adds	r0, r7, r5
 800c606:	2301      	movs	r3, #1
 800c608:	f011 faf4 	bl	801dbf4 <arm_add_q31>

        lastData = fx;
 800c60c:	69fa      	ldr	r2, [r7, #28]
 800c60e:	4b1f      	ldr	r3, [pc, #124]	@ (800c68c <getFilteredMaxAmplitudeQ31+0x110>)
 800c610:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c612:	4b1d      	ldr	r3, [pc, #116]	@ (800c688 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c618:	429a      	cmp	r2, r3
 800c61a:	da03      	bge.n	800c624 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c61c:	4b1a      	ldr	r3, [pc, #104]	@ (800c688 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c622:	e007      	b.n	800c634 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c624:	4b18      	ldr	r3, [pc, #96]	@ (800c688 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c62a:	429a      	cmp	r2, r3
 800c62c:	dd02      	ble.n	800c634 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c62e:	4b16      	ldr	r3, [pc, #88]	@ (800c688 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c636:	3301      	adds	r3, #1
 800c638:	637b      	str	r3, [r7, #52]	@ 0x34
 800c63a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d3ba      	bcc.n	800c5b8 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c644:	17da      	asrs	r2, r3, #31
 800c646:	189b      	adds	r3, r3, r2
 800c648:	4053      	eors	r3, r2
 800c64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c64e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c654:	4293      	cmp	r3, r2
 800c656:	d200      	bcs.n	800c65a <getFilteredMaxAmplitudeQ31+0xde>
 800c658:	0013      	movs	r3, r2
 800c65a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c65c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c660:	40da      	lsrs	r2, r3
 800c662:	0013      	movs	r3, r2
 800c664:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c666:	1dbb      	adds	r3, r7, #6
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d007      	beq.n	800c67e <getFilteredMaxAmplitudeQ31+0x102>
 800c66e:	4b0a      	ldr	r3, [pc, #40]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6a3a      	ldr	r2, [r7, #32]
 800c674:	429a      	cmp	r2, r3
 800c676:	d902      	bls.n	800c67e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c678:	4b07      	ldr	r3, [pc, #28]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c67a:	6a3a      	ldr	r2, [r7, #32]
 800c67c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c67e:	6a3b      	ldr	r3, [r7, #32]
}
 800c680:	0018      	movs	r0, r3
 800c682:	46bd      	mov	sp, r7
 800c684:	b010      	add	sp, #64	@ 0x40
 800c686:	bdb0      	pop	{r4, r5, r7, pc}
 800c688:	20002144 	.word	0x20002144
 800c68c:	20002148 	.word	0x20002148
 800c690:	08024888 	.word	0x08024888
 800c694:	0802488c 	.word	0x0802488c
 800c698:	200012bc 	.word	0x200012bc

0800c69c <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c6a8:	4913      	ldr	r1, [pc, #76]	@ (800c6f8 <floatToIntAndFrac2dp+0x5c>)
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7f4 fc78 	bl	8000fa0 <__aeabi_fmul>
 800c6b0:	1c03      	adds	r3, r0, #0
 800c6b2:	1c18      	adds	r0, r3, #0
 800c6b4:	f015 fed2 	bl	802245c <roundf>
 800c6b8:	1c03      	adds	r3, r0, #0
 800c6ba:	1c18      	adds	r0, r3, #0
 800c6bc:	f7f3 ffae 	bl	800061c <__aeabi_f2uiz>
 800c6c0:	0003      	movs	r3, r0
 800c6c2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2164      	movs	r1, #100	@ 0x64
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	f7f3 fd6b 	bl	80001a4 <__udivsi3>
 800c6ce:	0003      	movs	r3, r0
 800c6d0:	001a      	movs	r2, r3
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2164      	movs	r1, #100	@ 0x64
 800c6e2:	434b      	muls	r3, r1
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	701a      	strb	r2, [r3, #0]
}
 800c6ee:	46c0      	nop			@ (mov r8, r8)
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	b006      	add	sp, #24
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	46c0      	nop			@ (mov r8, r8)
 800c6f8:	42c80000 	.word	0x42c80000

0800c6fc <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c708:	4914      	ldr	r1, [pc, #80]	@ (800c75c <floatToIntAndFrac1dp+0x60>)
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7f4 fc48 	bl	8000fa0 <__aeabi_fmul>
 800c710:	1c03      	adds	r3, r0, #0
 800c712:	1c18      	adds	r0, r3, #0
 800c714:	f015 fea2 	bl	802245c <roundf>
 800c718:	1c03      	adds	r3, r0, #0
 800c71a:	1c18      	adds	r0, r3, #0
 800c71c:	f7f3 ff7e 	bl	800061c <__aeabi_f2uiz>
 800c720:	0003      	movs	r3, r0
 800c722:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	210a      	movs	r1, #10
 800c728:	0018      	movs	r0, r3
 800c72a:	f7f3 fd3b 	bl	80001a4 <__udivsi3>
 800c72e:	0003      	movs	r3, r0
 800c730:	001a      	movs	r2, r3
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	1c19      	adds	r1, r3, #0
 800c742:	0089      	lsls	r1, r1, #2
 800c744:	18cb      	adds	r3, r1, r3
 800c746:	18db      	adds	r3, r3, r3
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	701a      	strb	r2, [r3, #0]
}
 800c752:	46c0      	nop			@ (mov r8, r8)
 800c754:	46bd      	mov	sp, r7
 800c756:	b006      	add	sp, #24
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	46c0      	nop			@ (mov r8, r8)
 800c75c:	41200000 	.word	0x41200000

0800c760 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c760:	b590      	push	{r4, r7, lr}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7f4 ff2e 	bl	80015d0 <__aeabi_i2f>
 800c774:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c776:	6838      	ldr	r0, [r7, #0]
 800c778:	f7f4 ff2a 	bl	80015d0 <__aeabi_i2f>
 800c77c:	1c03      	adds	r3, r0, #0
 800c77e:	4918      	ldr	r1, [pc, #96]	@ (800c7e0 <sumToIntAverage+0x80>)
 800c780:	1c18      	adds	r0, r3, #0
 800c782:	f7f4 fa27 	bl	8000bd4 <__aeabi_fdiv>
 800c786:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c788:	1c19      	adds	r1, r3, #0
 800c78a:	1c20      	adds	r0, r4, #0
 800c78c:	f7f4 f898 	bl	80008c0 <__aeabi_fadd>
 800c790:	1c03      	adds	r3, r0, #0
 800c792:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c796:	f7f4 ff67 	bl	8001668 <__aeabi_ui2f>
 800c79a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c79c:	1c19      	adds	r1, r3, #0
 800c79e:	1c20      	adds	r0, r4, #0
 800c7a0:	f7f4 fa18 	bl	8000bd4 <__aeabi_fdiv>
 800c7a4:	1c03      	adds	r3, r0, #0
 800c7a6:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	2310      	movs	r3, #16
 800c7b0:	18f9      	adds	r1, r7, r3
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	1c18      	adds	r0, r3, #0
 800c7b6:	f7ff ffa1 	bl	800c6fc <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2bff      	cmp	r3, #255	@ 0xff
 800c7be:	d906      	bls.n	800c7ce <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	22ff      	movs	r2, #255	@ 0xff
 800c7c4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2209      	movs	r2, #9
 800c7ca:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c7cc:	e003      	b.n	800c7d6 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	701a      	strb	r2, [r3, #0]
}
 800c7d6:	46c0      	nop			@ (mov r8, r8)
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	b007      	add	sp, #28
 800c7dc:	bd90      	pop	{r4, r7, pc}
 800c7de:	46c0      	nop			@ (mov r8, r8)
 800c7e0:	41200000 	.word	0x41200000

0800c7e4 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
 800c7f0:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2280      	movs	r2, #128	@ 0x80
 800c7f6:	0612      	lsls	r2, r2, #24
 800c7f8:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	4a18      	ldr	r2, [pc, #96]	@ (800c860 <findMinMax+0x7c>)
 800c7fe:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c800:	2300      	movs	r3, #0
 800c802:	617b      	str	r3, [r7, #20]
 800c804:	e022      	b.n	800c84c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	18d3      	adds	r3, r2, r3
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	429a      	cmp	r2, r3
 800c816:	da06      	bge.n	800c826 <findMinMax+0x42>
        {
            min[0] = array[i];
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	18d3      	adds	r3, r2, r3
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	18d3      	adds	r3, r2, r3
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	dd06      	ble.n	800c846 <findMinMax+0x62>
        {
            max[0] = array[i];
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	18d3      	adds	r3, r2, r3
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	3301      	adds	r3, #1
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	429a      	cmp	r2, r3
 800c852:	d3d8      	bcc.n	800c806 <findMinMax+0x22>
        }
    }
}
 800c854:	46c0      	nop			@ (mov r8, r8)
 800c856:	46c0      	nop			@ (mov r8, r8)
 800c858:	46bd      	mov	sp, r7
 800c85a:	b006      	add	sp, #24
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	46c0      	nop			@ (mov r8, r8)
 800c860:	7fffffff 	.word	0x7fffffff

0800c864 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d302      	bcc.n	800c880 <getPo2factor+0x1c>
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d107      	bne.n	800c890 <getPo2factor+0x2c>
    {
        return 0;
 800c880:	2300      	movs	r3, #0
 800c882:	e00d      	b.n	800c8a0 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	085b      	lsrs	r3, r3, #1
 800c888:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3301      	adds	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d2f5      	bcs.n	800c884 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c89e:	68fb      	ldr	r3, [r7, #12]
}
 800c8a0:	0018      	movs	r0, r3
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	b004      	add	sp, #16
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f7f4 fed6 	bl	8001668 <__aeabi_ui2f>
 800c8bc:	1c03      	adds	r3, r0, #0
 800c8be:	1c19      	adds	r1, r3, #0
 800c8c0:	68b8      	ldr	r0, [r7, #8]
 800c8c2:	f7f4 fb6d 	bl	8000fa0 <__aeabi_fmul>
 800c8c6:	1c03      	adds	r3, r0, #0
 800c8c8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	2310      	movs	r3, #16
 800c8d2:	18f9      	adds	r1, r7, r3
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	1c18      	adds	r0, r3, #0
 800c8d8:	f7ff fee0 	bl	800c69c <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	801a      	strh	r2, [r3, #0]
}
 800c8e4:	46c0      	nop			@ (mov r8, r8)
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	b006      	add	sp, #24
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60b8      	str	r0, [r7, #8]
 800c8f4:	60f9      	str	r1, [r7, #12]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fc:	6a3a      	ldr	r2, [r7, #32]
 800c8fe:	68b8      	ldr	r0, [r7, #8]
 800c900:	68f9      	ldr	r1, [r7, #12]
 800c902:	f7fa fbc3 	bl	800708c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800c906:	6a3b      	ldr	r3, [r7, #32]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	18d2      	adds	r2, r2, r3
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	18d2      	adds	r2, r2, r3
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800c916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	18d2      	adds	r2, r2, r3
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	18d2      	adds	r2, r2, r3
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800c926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c928:	6a3b      	ldr	r3, [r7, #32]
 800c92a:	0011      	movs	r1, r2
 800c92c:	0018      	movs	r0, r3
 800c92e:	f7fa fc3d 	bl	80071ac <correctIntFracNumber>
}
 800c932:	46c0      	nop			@ (mov r8, r8)
 800c934:	46bd      	mov	sp, r7
 800c936:	b004      	add	sp, #16
 800c938:	bd80      	pop	{r7, pc}

0800c93a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b086      	sub	sp, #24
 800c93e:	af00      	add	r7, sp, #0
 800c940:	60f8      	str	r0, [r7, #12]
 800c942:	60b9      	str	r1, [r7, #8]
 800c944:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c94a:	2300      	movs	r3, #0
 800c94c:	613b      	str	r3, [r7, #16]
 800c94e:	e019      	b.n	800c984 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	18d3      	adds	r3, r2, r3
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	3201      	adds	r2, #1
 800c960:	0052      	lsls	r2, r2, #1
 800c962:	68f9      	ldr	r1, [r7, #12]
 800c964:	188a      	adds	r2, r1, r2
 800c966:	8812      	ldrh	r2, [r2, #0]
 800c968:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c96a:	0019      	movs	r1, r3
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c974:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c976:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	3301      	adds	r3, #1
 800c97c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	3304      	adds	r3, #4
 800c982:	613b      	str	r3, [r7, #16]
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d3e1      	bcc.n	800c950 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800c98c:	46c0      	nop			@ (mov r8, r8)
 800c98e:	46c0      	nop			@ (mov r8, r8)
 800c990:	46bd      	mov	sp, r7
 800c992:	b006      	add	sp, #24
 800c994:	bd80      	pop	{r7, pc}
	...

0800c998 <InitDone>:
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800c998:	b580      	push	{r7, lr}
 800c99a:	af00      	add	r7, sp, #0
  init = false;
 800c99c:	4b02      	ldr	r3, [pc, #8]	@ (800c9a8 <InitDone+0x10>)
 800c99e:	2200      	movs	r2, #0
 800c9a0:	701a      	strb	r2, [r3, #0]
}
 800c9a2:	46c0      	nop			@ (mov r8, r8)
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	200000c4 	.word	0x200000c4

0800c9ac <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800c9b2:	f7f9 fb97 	bl	80060e4 <ReadBatteryVoltage>
 800c9b6:	1c02      	adds	r2, r0, #0
 800c9b8:	4b25      	ldr	r3, [pc, #148]	@ (800ca50 <batteryChargeCheck+0xa4>)
 800c9ba:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800c9bc:	4b24      	ldr	r3, [pc, #144]	@ (800ca50 <batteryChargeCheck+0xa4>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4924      	ldr	r1, [pc, #144]	@ (800ca54 <batteryChargeCheck+0xa8>)
 800c9c2:	1c18      	adds	r0, r3, #0
 800c9c4:	f7f3 fdb4 	bl	8000530 <__aeabi_fcmplt>
 800c9c8:	1e03      	subs	r3, r0, #0
 800c9ca:	d002      	beq.n	800c9d2 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800c9cc:	1dfb      	adds	r3, r7, #7
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800c9d2:	4b1f      	ldr	r3, [pc, #124]	@ (800ca50 <batteryChargeCheck+0xa4>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	1c18      	adds	r0, r3, #0
 800c9d8:	f7f6 fd44 	bl	8003464 <__aeabi_f2d>
 800c9dc:	4a1e      	ldr	r2, [pc, #120]	@ (800ca58 <batteryChargeCheck+0xac>)
 800c9de:	4b1f      	ldr	r3, [pc, #124]	@ (800ca5c <batteryChargeCheck+0xb0>)
 800c9e0:	f7f3 fd6c 	bl	80004bc <__aeabi_dcmplt>
 800c9e4:	1e03      	subs	r3, r0, #0
 800c9e6:	d00a      	beq.n	800c9fe <batteryChargeCheck+0x52>
 800c9e8:	4b19      	ldr	r3, [pc, #100]	@ (800ca50 <batteryChargeCheck+0xa4>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4919      	ldr	r1, [pc, #100]	@ (800ca54 <batteryChargeCheck+0xa8>)
 800c9ee:	1c18      	adds	r0, r3, #0
 800c9f0:	f7f3 fdbc 	bl	800056c <__aeabi_fcmpge>
 800c9f4:	1e03      	subs	r3, r0, #0
 800c9f6:	d002      	beq.n	800c9fe <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800c9f8:	1dfb      	adds	r3, r7, #7
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800c9fe:	4b14      	ldr	r3, [pc, #80]	@ (800ca50 <batteryChargeCheck+0xa4>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2181      	movs	r1, #129	@ 0x81
 800ca04:	05c9      	lsls	r1, r1, #23
 800ca06:	1c18      	adds	r0, r3, #0
 800ca08:	f7f3 fd92 	bl	8000530 <__aeabi_fcmplt>
 800ca0c:	1e03      	subs	r3, r0, #0
 800ca0e:	d00d      	beq.n	800ca2c <batteryChargeCheck+0x80>
 800ca10:	4b0f      	ldr	r3, [pc, #60]	@ (800ca50 <batteryChargeCheck+0xa4>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	1c18      	adds	r0, r3, #0
 800ca16:	f7f6 fd25 	bl	8003464 <__aeabi_f2d>
 800ca1a:	4a0f      	ldr	r2, [pc, #60]	@ (800ca58 <batteryChargeCheck+0xac>)
 800ca1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca5c <batteryChargeCheck+0xb0>)
 800ca1e:	f7f3 fd6b 	bl	80004f8 <__aeabi_dcmpge>
 800ca22:	1e03      	subs	r3, r0, #0
 800ca24:	d002      	beq.n	800ca2c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800ca26:	1dfb      	adds	r3, r7, #7
 800ca28:	2203      	movs	r2, #3
 800ca2a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800ca2c:	4b08      	ldr	r3, [pc, #32]	@ (800ca50 <batteryChargeCheck+0xa4>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2181      	movs	r1, #129	@ 0x81
 800ca32:	05c9      	lsls	r1, r1, #23
 800ca34:	1c18      	adds	r0, r3, #0
 800ca36:	f7f3 fd99 	bl	800056c <__aeabi_fcmpge>
 800ca3a:	1e03      	subs	r3, r0, #0
 800ca3c:	d002      	beq.n	800ca44 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800ca3e:	1dfb      	adds	r3, r7, #7
 800ca40:	2204      	movs	r2, #4
 800ca42:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800ca44:	1dfb      	adds	r3, r7, #7
 800ca46:	781b      	ldrb	r3, [r3, #0]
}
 800ca48:	0018      	movs	r0, r3
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	b002      	add	sp, #8
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20002154 	.word	0x20002154
 800ca54:	40600000 	.word	0x40600000
 800ca58:	9999999a 	.word	0x9999999a
 800ca5c:	400d9999 	.word	0x400d9999

0800ca60 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800ca60:	b590      	push	{r4, r7, lr}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	0004      	movs	r4, r0
 800ca68:	0008      	movs	r0, r1
 800ca6a:	0011      	movs	r1, r2
 800ca6c:	1dbb      	adds	r3, r7, #6
 800ca6e:	1c22      	adds	r2, r4, #0
 800ca70:	801a      	strh	r2, [r3, #0]
 800ca72:	1d3b      	adds	r3, r7, #4
 800ca74:	1c02      	adds	r2, r0, #0
 800ca76:	801a      	strh	r2, [r3, #0]
 800ca78:	1cbb      	adds	r3, r7, #2
 800ca7a:	1c0a      	adds	r2, r1, #0
 800ca7c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800ca7e:	4b0f      	ldr	r3, [pc, #60]	@ (800cabc <SetStatusLED+0x5c>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d107      	bne.n	800ca96 <SetStatusLED+0x36>
 800ca86:	4b0e      	ldr	r3, [pc, #56]	@ (800cac0 <SetStatusLED+0x60>)
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d103      	bne.n	800ca96 <SetStatusLED+0x36>
 800ca8e:	4b0d      	ldr	r3, [pc, #52]	@ (800cac4 <SetStatusLED+0x64>)
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00e      	beq.n	800cab4 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800ca96:	2380      	movs	r3, #128	@ 0x80
 800ca98:	05db      	lsls	r3, r3, #23
 800ca9a:	1dba      	adds	r2, r7, #6
 800ca9c:	8812      	ldrh	r2, [r2, #0]
 800ca9e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800caa0:	2380      	movs	r3, #128	@ 0x80
 800caa2:	05db      	lsls	r3, r3, #23
 800caa4:	1d3a      	adds	r2, r7, #4
 800caa6:	8812      	ldrh	r2, [r2, #0]
 800caa8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800caaa:	2380      	movs	r3, #128	@ 0x80
 800caac:	05db      	lsls	r3, r3, #23
 800caae:	1cba      	adds	r2, r7, #2
 800cab0:	8812      	ldrh	r2, [r2, #0]
 800cab2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cab4:	46c0      	nop			@ (mov r8, r8)
 800cab6:	46bd      	mov	sp, r7
 800cab8:	b003      	add	sp, #12
 800caba:	bd90      	pop	{r4, r7, pc}
 800cabc:	2000214d 	.word	0x2000214d
 800cac0:	200000c4 	.word	0x200000c4
 800cac4:	2000214e 	.word	0x2000214e

0800cac8 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800cac8:	b590      	push	{r4, r7, lr}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	0004      	movs	r4, r0
 800cad0:	0008      	movs	r0, r1
 800cad2:	0011      	movs	r1, r2
 800cad4:	1dfb      	adds	r3, r7, #7
 800cad6:	1c22      	adds	r2, r4, #0
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	1dbb      	adds	r3, r7, #6
 800cadc:	1c02      	adds	r2, r0, #0
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	1d7b      	adds	r3, r7, #5
 800cae2:	1c0a      	adds	r2, r1, #0
 800cae4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800cae6:	4b19      	ldr	r3, [pc, #100]	@ (800cb4c <SetDBLED+0x84>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d107      	bne.n	800cafe <SetDBLED+0x36>
 800caee:	4b18      	ldr	r3, [pc, #96]	@ (800cb50 <SetDBLED+0x88>)
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d103      	bne.n	800cafe <SetDBLED+0x36>
 800caf6:	4b17      	ldr	r3, [pc, #92]	@ (800cb54 <SetDBLED+0x8c>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d022      	beq.n	800cb44 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800cafe:	1dfb      	adds	r3, r7, #7
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	2201      	movs	r2, #1
 800cb04:	4053      	eors	r3, r2
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	001a      	movs	r2, r3
 800cb0a:	4b13      	ldr	r3, [pc, #76]	@ (800cb58 <SetDBLED+0x90>)
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	0018      	movs	r0, r3
 800cb10:	f002 fe75 	bl	800f7fe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800cb14:	1dbb      	adds	r3, r7, #6
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	4053      	eors	r3, r2
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	001a      	movs	r2, r3
 800cb20:	2380      	movs	r3, #128	@ 0x80
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	480c      	ldr	r0, [pc, #48]	@ (800cb58 <SetDBLED+0x90>)
 800cb26:	0019      	movs	r1, r3
 800cb28:	f002 fe69 	bl	800f7fe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800cb2c:	1d7b      	adds	r3, r7, #5
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2201      	movs	r2, #1
 800cb32:	4053      	eors	r3, r2
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	001a      	movs	r2, r3
 800cb38:	2380      	movs	r3, #128	@ 0x80
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4806      	ldr	r0, [pc, #24]	@ (800cb58 <SetDBLED+0x90>)
 800cb3e:	0019      	movs	r1, r3
 800cb40:	f002 fe5d 	bl	800f7fe <HAL_GPIO_WritePin>
  }
}
 800cb44:	46c0      	nop			@ (mov r8, r8)
 800cb46:	46bd      	mov	sp, r7
 800cb48:	b003      	add	sp, #12
 800cb4a:	bd90      	pop	{r4, r7, pc}
 800cb4c:	2000214d 	.word	0x2000214d
 800cb50:	200000c4 	.word	0x200000c4
 800cb54:	2000214e 	.word	0x2000214e
 800cb58:	50000400 	.word	0x50000400

0800cb5c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800cb5c:	b590      	push	{r4, r7, lr}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	0004      	movs	r4, r0
 800cb64:	0008      	movs	r0, r1
 800cb66:	0011      	movs	r1, r2
 800cb68:	1dbb      	adds	r3, r7, #6
 800cb6a:	1c22      	adds	r2, r4, #0
 800cb6c:	801a      	strh	r2, [r3, #0]
 800cb6e:	1d3b      	adds	r3, r7, #4
 800cb70:	1c02      	adds	r2, r0, #0
 800cb72:	801a      	strh	r2, [r3, #0]
 800cb74:	1cbb      	adds	r3, r7, #2
 800cb76:	1c0a      	adds	r2, r1, #0
 800cb78:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800cb7a:	4b0e      	ldr	r3, [pc, #56]	@ (800cbb4 <SetVocLED+0x58>)
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d107      	bne.n	800cb92 <SetVocLED+0x36>
 800cb82:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb8 <SetVocLED+0x5c>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d103      	bne.n	800cb92 <SetVocLED+0x36>
 800cb8a:	4b0c      	ldr	r3, [pc, #48]	@ (800cbbc <SetVocLED+0x60>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00b      	beq.n	800cbaa <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800cb92:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc0 <SetVocLED+0x64>)
 800cb94:	1dba      	adds	r2, r7, #6
 800cb96:	8812      	ldrh	r2, [r2, #0]
 800cb98:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800cb9a:	4b09      	ldr	r3, [pc, #36]	@ (800cbc0 <SetVocLED+0x64>)
 800cb9c:	1d3a      	adds	r2, r7, #4
 800cb9e:	8812      	ldrh	r2, [r2, #0]
 800cba0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800cba2:	4b07      	ldr	r3, [pc, #28]	@ (800cbc0 <SetVocLED+0x64>)
 800cba4:	1cba      	adds	r2, r7, #2
 800cba6:	8812      	ldrh	r2, [r2, #0]
 800cba8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cbaa:	46c0      	nop			@ (mov r8, r8)
 800cbac:	46bd      	mov	sp, r7
 800cbae:	b003      	add	sp, #12
 800cbb0:	bd90      	pop	{r4, r7, pc}
 800cbb2:	46c0      	nop			@ (mov r8, r8)
 800cbb4:	2000214d 	.word	0x2000214d
 800cbb8:	200000c4 	.word	0x200000c4
 800cbbc:	2000214e 	.word	0x2000214e
 800cbc0:	40000400 	.word	0x40000400

0800cbc4 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cbc8:	4b07      	ldr	r3, [pc, #28]	@ (800cbe8 <SetMeasurementIndicator+0x24>)
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d103      	bne.n	800cbd8 <SetMeasurementIndicator+0x14>
 800cbd0:	4b06      	ldr	r3, [pc, #24]	@ (800cbec <SetMeasurementIndicator+0x28>)
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d003      	beq.n	800cbe0 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800cbd8:	2380      	movs	r3, #128	@ 0x80
 800cbda:	05db      	lsls	r3, r3, #23
 800cbdc:	4a04      	ldr	r2, [pc, #16]	@ (800cbf0 <SetMeasurementIndicator+0x2c>)
 800cbde:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cbe0:	46c0      	nop			@ (mov r8, r8)
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	46c0      	nop			@ (mov r8, r8)
 800cbe8:	2000214d 	.word	0x2000214d
 800cbec:	2000214e 	.word	0x2000214e
 800cbf0:	00000bb8 	.word	0x00000bb8

0800cbf4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cbf8:	4b07      	ldr	r3, [pc, #28]	@ (800cc18 <ResetMeasurementIndicator+0x24>)
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d103      	bne.n	800cc08 <ResetMeasurementIndicator+0x14>
 800cc00:	4b06      	ldr	r3, [pc, #24]	@ (800cc1c <ResetMeasurementIndicator+0x28>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d004      	beq.n	800cc12 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800cc08:	2380      	movs	r3, #128	@ 0x80
 800cc0a:	05db      	lsls	r3, r3, #23
 800cc0c:	22fa      	movs	r2, #250	@ 0xfa
 800cc0e:	0112      	lsls	r2, r2, #4
 800cc10:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cc12:	46c0      	nop			@ (mov r8, r8)
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	2000214d 	.word	0x2000214d
 800cc1c:	2000214e 	.word	0x2000214e

0800cc20 <SetMICIndicator>:
void SetMICIndicator(){
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc24:	4b11      	ldr	r3, [pc, #68]	@ (800cc6c <SetMICIndicator+0x4c>)
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d103      	bne.n	800cc34 <SetMICIndicator+0x14>
 800cc2c:	4b10      	ldr	r3, [pc, #64]	@ (800cc70 <SetMICIndicator+0x50>)
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d004      	beq.n	800cc3e <SetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_ON;
 800cc34:	2380      	movs	r3, #128	@ 0x80
 800cc36:	05db      	lsls	r3, r3, #23
 800cc38:	4a0e      	ldr	r2, [pc, #56]	@ (800cc74 <SetMICIndicator+0x54>)
 800cc3a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_ON;
    }
  }
}
 800cc3c:	e013      	b.n	800cc66 <SetMICIndicator+0x46>
    if (batteryCharge > 3.7) {
 800cc3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc78 <SetMICIndicator+0x58>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	1c18      	adds	r0, r3, #0
 800cc44:	f7f6 fc0e 	bl	8003464 <__aeabi_f2d>
 800cc48:	4a0c      	ldr	r2, [pc, #48]	@ (800cc7c <SetMICIndicator+0x5c>)
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc80 <SetMICIndicator+0x60>)
 800cc4c:	f7f3 fc4a 	bl	80004e4 <__aeabi_dcmpgt>
 800cc50:	1e03      	subs	r3, r0, #0
 800cc52:	d004      	beq.n	800cc5e <SetMICIndicator+0x3e>
      TIM2 -> CCR3 = LED_ON;
 800cc54:	2380      	movs	r3, #128	@ 0x80
 800cc56:	05db      	lsls	r3, r3, #23
 800cc58:	4a06      	ldr	r2, [pc, #24]	@ (800cc74 <SetMICIndicator+0x54>)
 800cc5a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800cc5c:	e003      	b.n	800cc66 <SetMICIndicator+0x46>
      TIM2 -> CCR1 = LED_ON;
 800cc5e:	2380      	movs	r3, #128	@ 0x80
 800cc60:	05db      	lsls	r3, r3, #23
 800cc62:	4a04      	ldr	r2, [pc, #16]	@ (800cc74 <SetMICIndicator+0x54>)
 800cc64:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800cc66:	46c0      	nop			@ (mov r8, r8)
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	2000214d 	.word	0x2000214d
 800cc70:	2000214e 	.word	0x2000214e
 800cc74:	00000bb8 	.word	0x00000bb8
 800cc78:	20002154 	.word	0x20002154
 800cc7c:	9999999a 	.word	0x9999999a
 800cc80:	400d9999 	.word	0x400d9999

0800cc84 <ResetMICIndicator>:
void ResetMICIndicator(){
 800cc84:	b580      	push	{r7, lr}
 800cc86:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc88:	4b13      	ldr	r3, [pc, #76]	@ (800ccd8 <ResetMICIndicator+0x54>)
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d103      	bne.n	800cc98 <ResetMICIndicator+0x14>
 800cc90:	4b12      	ldr	r3, [pc, #72]	@ (800ccdc <ResetMICIndicator+0x58>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d005      	beq.n	800cca4 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800cc98:	2380      	movs	r3, #128	@ 0x80
 800cc9a:	05db      	lsls	r3, r3, #23
 800cc9c:	22fa      	movs	r2, #250	@ 0xfa
 800cc9e:	0112      	lsls	r2, r2, #4
 800cca0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800cca2:	e015      	b.n	800ccd0 <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800cca4:	4b0e      	ldr	r3, [pc, #56]	@ (800cce0 <ResetMICIndicator+0x5c>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	1c18      	adds	r0, r3, #0
 800ccaa:	f7f6 fbdb 	bl	8003464 <__aeabi_f2d>
 800ccae:	4a0d      	ldr	r2, [pc, #52]	@ (800cce4 <ResetMICIndicator+0x60>)
 800ccb0:	4b0d      	ldr	r3, [pc, #52]	@ (800cce8 <ResetMICIndicator+0x64>)
 800ccb2:	f7f3 fc17 	bl	80004e4 <__aeabi_dcmpgt>
 800ccb6:	1e03      	subs	r3, r0, #0
 800ccb8:	d005      	beq.n	800ccc6 <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800ccba:	2380      	movs	r3, #128	@ 0x80
 800ccbc:	05db      	lsls	r3, r3, #23
 800ccbe:	22fa      	movs	r2, #250	@ 0xfa
 800ccc0:	0112      	lsls	r2, r2, #4
 800ccc2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ccc4:	e004      	b.n	800ccd0 <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800ccc6:	2380      	movs	r3, #128	@ 0x80
 800ccc8:	05db      	lsls	r3, r3, #23
 800ccca:	22fa      	movs	r2, #250	@ 0xfa
 800cccc:	0112      	lsls	r2, r2, #4
 800ccce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800ccd0:	46c0      	nop			@ (mov r8, r8)
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	46c0      	nop			@ (mov r8, r8)
 800ccd8:	2000214d 	.word	0x2000214d
 800ccdc:	2000214e 	.word	0x2000214e
 800cce0:	20002154 	.word	0x20002154
 800cce4:	1eb851ec 	.word	0x1eb851ec
 800cce8:	400deb85 	.word	0x400deb85

0800ccec <SetESPIndicator>:
void SetESPIndicator(){
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ccf0:	4b07      	ldr	r3, [pc, #28]	@ (800cd10 <SetESPIndicator+0x24>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d103      	bne.n	800cd00 <SetESPIndicator+0x14>
 800ccf8:	4b06      	ldr	r3, [pc, #24]	@ (800cd14 <SetESPIndicator+0x28>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d003      	beq.n	800cd08 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800cd00:	2380      	movs	r3, #128	@ 0x80
 800cd02:	05db      	lsls	r3, r3, #23
 800cd04:	4a04      	ldr	r2, [pc, #16]	@ (800cd18 <SetESPIndicator+0x2c>)
 800cd06:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cd08:	46c0      	nop			@ (mov r8, r8)
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	46c0      	nop			@ (mov r8, r8)
 800cd10:	2000214d 	.word	0x2000214d
 800cd14:	2000214e 	.word	0x2000214e
 800cd18:	00000bb8 	.word	0x00000bb8

0800cd1c <ResetESPIndicator>:
void ResetESPIndicator(){
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cd20:	4b07      	ldr	r3, [pc, #28]	@ (800cd40 <ResetESPIndicator+0x24>)
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d103      	bne.n	800cd30 <ResetESPIndicator+0x14>
 800cd28:	4b06      	ldr	r3, [pc, #24]	@ (800cd44 <ResetESPIndicator+0x28>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d004      	beq.n	800cd3a <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800cd30:	2380      	movs	r3, #128	@ 0x80
 800cd32:	05db      	lsls	r3, r3, #23
 800cd34:	22fa      	movs	r2, #250	@ 0xfa
 800cd36:	0112      	lsls	r2, r2, #4
 800cd38:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cd3a:	46c0      	nop			@ (mov r8, r8)
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	2000214d 	.word	0x2000214d
 800cd44:	2000214e 	.word	0x2000214e

0800cd48 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800cd4c:	23fa      	movs	r3, #250	@ 0xfa
 800cd4e:	011a      	lsls	r2, r3, #4
 800cd50:	23fa      	movs	r3, #250	@ 0xfa
 800cd52:	0119      	lsls	r1, r3, #4
 800cd54:	23fa      	movs	r3, #250	@ 0xfa
 800cd56:	011b      	lsls	r3, r3, #4
 800cd58:	0018      	movs	r0, r3
 800cd5a:	f7ff fe81 	bl	800ca60 <SetStatusLED>
  SetDBLED(false,false,false);
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2100      	movs	r1, #0
 800cd62:	2000      	movs	r0, #0
 800cd64:	f7ff feb0 	bl	800cac8 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800cd68:	23fa      	movs	r3, #250	@ 0xfa
 800cd6a:	011a      	lsls	r2, r3, #4
 800cd6c:	23fa      	movs	r3, #250	@ 0xfa
 800cd6e:	0119      	lsls	r1, r3, #4
 800cd70:	23fa      	movs	r3, #250	@ 0xfa
 800cd72:	011b      	lsls	r3, r3, #4
 800cd74:	0018      	movs	r0, r3
 800cd76:	f7ff fef1 	bl	800cb5c <SetVocLED>
return;
 800cd7a:	46c0      	nop			@ (mov r8, r8)
}
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <powerCheck>:

Battery_Status powerCheck(){
 800cd80:	b590      	push	{r4, r7, lr}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800cd86:	f7f9 fa73 	bl	8006270 <Check_USB_PowerOn>
 800cd8a:	0003      	movs	r3, r0
 800cd8c:	001a      	movs	r2, r3
 800cd8e:	2301      	movs	r3, #1
 800cd90:	4053      	eors	r3, r2
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d005      	beq.n	800cda4 <powerCheck+0x24>
    status = batteryChargeCheck();
 800cd98:	1dfc      	adds	r4, r7, #7
 800cd9a:	f7ff fe07 	bl	800c9ac <batteryChargeCheck>
 800cd9e:	0003      	movs	r3, r0
 800cda0:	7023      	strb	r3, [r4, #0]
 800cda2:	e002      	b.n	800cdaa <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800cda4:	1dfb      	adds	r3, r7, #7
 800cda6:	2201      	movs	r2, #1
 800cda8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cdaa:	1dfb      	adds	r3, r7, #7
 800cdac:	781b      	ldrb	r3, [r3, #0]
}
 800cdae:	0018      	movs	r0, r3
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	b003      	add	sp, #12
 800cdb4:	bd90      	pop	{r4, r7, pc}
	...

0800cdb8 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	0002      	movs	r2, r0
 800cdc0:	1dfb      	adds	r3, r7, #7
 800cdc2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800cdc4:	1dfb      	adds	r3, r7, #7
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d105      	bne.n	800cdd8 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800cdcc:	4a18      	ldr	r2, [pc, #96]	@ (800ce30 <powerDisplay+0x78>)
 800cdce:	4b19      	ldr	r3, [pc, #100]	@ (800ce34 <powerDisplay+0x7c>)
 800cdd0:	0019      	movs	r1, r3
 800cdd2:	2003      	movs	r0, #3
 800cdd4:	f000 fe4c 	bl	800da70 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800cdd8:	1dfb      	adds	r3, r7, #7
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	2b04      	cmp	r3, #4
 800cdde:	d105      	bne.n	800cdec <powerDisplay+0x34>
    Debug("Battery fully charged");
 800cde0:	4a15      	ldr	r2, [pc, #84]	@ (800ce38 <powerDisplay+0x80>)
 800cde2:	4b14      	ldr	r3, [pc, #80]	@ (800ce34 <powerDisplay+0x7c>)
 800cde4:	0019      	movs	r1, r3
 800cde6:	2003      	movs	r0, #3
 800cde8:	f000 fe42 	bl	800da70 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800cdec:	1dfb      	adds	r3, r7, #7
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	2b03      	cmp	r3, #3
 800cdf2:	d105      	bne.n	800ce00 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800cdf4:	4a11      	ldr	r2, [pc, #68]	@ (800ce3c <powerDisplay+0x84>)
 800cdf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ce34 <powerDisplay+0x7c>)
 800cdf8:	0019      	movs	r1, r3
 800cdfa:	2003      	movs	r0, #3
 800cdfc:	f000 fe38 	bl	800da70 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800ce00:	1dfb      	adds	r3, r7, #7
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d105      	bne.n	800ce14 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800ce08:	4a0d      	ldr	r2, [pc, #52]	@ (800ce40 <powerDisplay+0x88>)
 800ce0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ce34 <powerDisplay+0x7c>)
 800ce0c:	0019      	movs	r1, r3
 800ce0e:	2003      	movs	r0, #3
 800ce10:	f000 fe2e 	bl	800da70 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800ce14:	1dfb      	adds	r3, r7, #7
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d105      	bne.n	800ce28 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800ce1c:	4a09      	ldr	r2, [pc, #36]	@ (800ce44 <powerDisplay+0x8c>)
 800ce1e:	4b05      	ldr	r3, [pc, #20]	@ (800ce34 <powerDisplay+0x7c>)
 800ce20:	0019      	movs	r1, r3
 800ce22:	2003      	movs	r0, #3
 800ce24:	f000 fe24 	bl	800da70 <CreateLine>
  }
}
 800ce28:	46c0      	nop			@ (mov r8, r8)
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	b002      	add	sp, #8
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	0802414c 	.word	0x0802414c
 800ce34:	0802415c 	.word	0x0802415c
 800ce38:	08024160 	.word	0x08024160
 800ce3c:	08024178 	.word	0x08024178
 800ce40:	08024198 	.word	0x08024198
 800ce44:	080241b0 	.word	0x080241b0

0800ce48 <configCheck>:

void configCheck(){
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800ce4c:	f7f9 fa1f 	bl	800628e <BootButton_Pressed>
 800ce50:	1e03      	subs	r3, r0, #0
 800ce52:	d007      	beq.n	800ce64 <configCheck+0x1c>
 800ce54:	f7f9 fa2c 	bl	80062b0 <UserButton_Pressed>
 800ce58:	1e03      	subs	r3, r0, #0
 800ce5a:	d003      	beq.n	800ce64 <configCheck+0x1c>
    configSet = true;
 800ce5c:	4b44      	ldr	r3, [pc, #272]	@ (800cf70 <configCheck+0x128>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	701a      	strb	r2, [r3, #0]
 800ce62:	e00a      	b.n	800ce7a <configCheck+0x32>
  }
  else{
    configSet = false;
 800ce64:	4b42      	ldr	r3, [pc, #264]	@ (800cf70 <configCheck+0x128>)
 800ce66:	2200      	movs	r2, #0
 800ce68:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800ce6a:	f001 fa4d 	bl	800e308 <HAL_GetTick>
 800ce6e:	0003      	movs	r3, r0
 800ce70:	22fa      	movs	r2, #250	@ 0xfa
 800ce72:	00d2      	lsls	r2, r2, #3
 800ce74:	189a      	adds	r2, r3, r2
 800ce76:	4b3f      	ldr	r3, [pc, #252]	@ (800cf74 <configCheck+0x12c>)
 800ce78:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800ce7a:	4b3d      	ldr	r3, [pc, #244]	@ (800cf70 <configCheck+0x128>)
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00d      	beq.n	800ce9e <configCheck+0x56>
 800ce82:	4b3c      	ldr	r3, [pc, #240]	@ (800cf74 <configCheck+0x12c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	0018      	movs	r0, r3
 800ce88:	f000 fd9c 	bl	800d9c4 <TimestampIsReached>
 800ce8c:	1e03      	subs	r3, r0, #0
 800ce8e:	d006      	beq.n	800ce9e <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800ce90:	f7f6 fd96 	bl	80039c0 <SetConfigMode>
    SetDBLED(true, true, true);
 800ce94:	2201      	movs	r2, #1
 800ce96:	2101      	movs	r1, #1
 800ce98:	2001      	movs	r0, #1
 800ce9a:	f7ff fe15 	bl	800cac8 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800ce9e:	f7f9 f9f6 	bl	800628e <BootButton_Pressed>
 800cea2:	0003      	movs	r3, r0
 800cea4:	001a      	movs	r2, r3
 800cea6:	2301      	movs	r3, #1
 800cea8:	4053      	eors	r3, r2
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d029      	beq.n	800cf04 <configCheck+0xbc>
 800ceb0:	f7f9 f9fe 	bl	80062b0 <UserButton_Pressed>
 800ceb4:	1e03      	subs	r3, r0, #0
 800ceb6:	d025      	beq.n	800cf04 <configCheck+0xbc>
 800ceb8:	4b2f      	ldr	r3, [pc, #188]	@ (800cf78 <configCheck+0x130>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	2201      	movs	r2, #1
 800cebe:	4053      	eors	r3, r2
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d01e      	beq.n	800cf04 <configCheck+0xbc>
    SetLEDsOff();
 800cec6:	f7ff ff3f 	bl	800cd48 <SetLEDsOff>
    Debug("userToggle flipped");
 800ceca:	4a2c      	ldr	r2, [pc, #176]	@ (800cf7c <configCheck+0x134>)
 800cecc:	4b2c      	ldr	r3, [pc, #176]	@ (800cf80 <configCheck+0x138>)
 800cece:	0019      	movs	r1, r3
 800ced0:	2003      	movs	r0, #3
 800ced2:	f000 fdcd 	bl	800da70 <CreateLine>
    userToggle = !userToggle;
 800ced6:	4b2b      	ldr	r3, [pc, #172]	@ (800cf84 <configCheck+0x13c>)
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	1e5a      	subs	r2, r3, #1
 800cedc:	4193      	sbcs	r3, r2
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	2201      	movs	r2, #1
 800cee2:	4053      	eors	r3, r2
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	1c1a      	adds	r2, r3, #0
 800cee8:	2301      	movs	r3, #1
 800ceea:	4013      	ands	r3, r2
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	4b25      	ldr	r3, [pc, #148]	@ (800cf84 <configCheck+0x13c>)
 800cef0:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800cef2:	4b24      	ldr	r3, [pc, #144]	@ (800cf84 <configCheck+0x13c>)
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d001      	beq.n	800cefe <configCheck+0xb6>
      EnabledConnectedDevices();
 800cefa:	f7fa ffc9 	bl	8007e90 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800cefe:	4b1e      	ldr	r3, [pc, #120]	@ (800cf78 <configCheck+0x130>)
 800cf00:	2201      	movs	r2, #1
 800cf02:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800cf04:	f7f9 f9c3 	bl	800628e <BootButton_Pressed>
 800cf08:	0003      	movs	r3, r0
 800cf0a:	001a      	movs	r2, r3
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	4053      	eors	r3, r2
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00b      	beq.n	800cf2e <configCheck+0xe6>
 800cf16:	f7f9 f9cb 	bl	80062b0 <UserButton_Pressed>
 800cf1a:	0003      	movs	r3, r0
 800cf1c:	001a      	movs	r2, r3
 800cf1e:	2301      	movs	r3, #1
 800cf20:	4053      	eors	r3, r2
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <configCheck+0xe6>
    buttonHeld = false;
 800cf28:	4b13      	ldr	r3, [pc, #76]	@ (800cf78 <configCheck+0x130>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800cf2e:	f7f9 f99f 	bl	8006270 <Check_USB_PowerOn>
 800cf32:	1e03      	subs	r3, r0, #0
 800cf34:	d005      	beq.n	800cf42 <configCheck+0xfa>
    usbPluggedIn = true;
 800cf36:	4b14      	ldr	r3, [pc, #80]	@ (800cf88 <configCheck+0x140>)
 800cf38:	2201      	movs	r2, #1
 800cf3a:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800cf3c:	f7fa ffa8 	bl	8007e90 <EnabledConnectedDevices>
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800cf40:	e012      	b.n	800cf68 <configCheck+0x120>
    if(!userToggle && !init){
 800cf42:	4b10      	ldr	r3, [pc, #64]	@ (800cf84 <configCheck+0x13c>)
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2201      	movs	r2, #1
 800cf48:	4053      	eors	r3, r2
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d008      	beq.n	800cf62 <configCheck+0x11a>
 800cf50:	4b0e      	ldr	r3, [pc, #56]	@ (800cf8c <configCheck+0x144>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	2201      	movs	r2, #1
 800cf56:	4053      	eors	r3, r2
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <configCheck+0x11a>
      SetLEDsOff();
 800cf5e:	f7ff fef3 	bl	800cd48 <SetLEDsOff>
    usbPluggedIn = false;
 800cf62:	4b09      	ldr	r3, [pc, #36]	@ (800cf88 <configCheck+0x140>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	701a      	strb	r2, [r3, #0]
}
 800cf68:	46c0      	nop			@ (mov r8, r8)
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	46c0      	nop			@ (mov r8, r8)
 800cf70:	2000214c 	.word	0x2000214c
 800cf74:	20002150 	.word	0x20002150
 800cf78:	2000214f 	.word	0x2000214f
 800cf7c:	080241d4 	.word	0x080241d4
 800cf80:	0802415c 	.word	0x0802415c
 800cf84:	2000214e 	.word	0x2000214e
 800cf88:	2000214d 	.word	0x2000214d
 800cf8c:	200000c4 	.word	0x200000c4

0800cf90 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800cf90:	b590      	push	{r4, r7, lr}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800cf96:	1dfc      	adds	r4, r7, #7
 800cf98:	f7ff fef2 	bl	800cd80 <powerCheck>
 800cf9c:	0003      	movs	r3, r0
 800cf9e:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800cfa0:	1dfb      	adds	r3, r7, #7
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	0018      	movs	r0, r3
 800cfa6:	f7ff ff07 	bl	800cdb8 <powerDisplay>
  return status;
 800cfaa:	1dfb      	adds	r3, r7, #7
 800cfac:	781b      	ldrb	r3, [r3, #0]

}
 800cfae:	0018      	movs	r0, r3
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	b003      	add	sp, #12
 800cfb4:	bd90      	pop	{r4, r7, pc}
	...

0800cfb8 <setuserToggle>:

void setuserToggle(void) {
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800cfbc:	f7ff fee0 	bl	800cd80 <powerCheck>
 800cfc0:	0003      	movs	r3, r0
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d002      	beq.n	800cfcc <setuserToggle+0x14>
    userToggle = true;
 800cfc6:	4b03      	ldr	r3, [pc, #12]	@ (800cfd4 <setuserToggle+0x1c>)
 800cfc8:	2201      	movs	r2, #1
 800cfca:	701a      	strb	r2, [r3, #0]
  }
}
 800cfcc:	46c0      	nop			@ (mov r8, r8)
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	46c0      	nop			@ (mov r8, r8)
 800cfd4:	2000214e 	.word	0x2000214e

0800cfd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cfdc:	4b07      	ldr	r3, [pc, #28]	@ (800cffc <HAL_MspInit+0x24>)
 800cfde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfe0:	4b06      	ldr	r3, [pc, #24]	@ (800cffc <HAL_MspInit+0x24>)
 800cfe2:	2101      	movs	r1, #1
 800cfe4:	430a      	orrs	r2, r1
 800cfe6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800cfe8:	4b04      	ldr	r3, [pc, #16]	@ (800cffc <HAL_MspInit+0x24>)
 800cfea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfec:	4b03      	ldr	r3, [pc, #12]	@ (800cffc <HAL_MspInit+0x24>)
 800cfee:	2180      	movs	r1, #128	@ 0x80
 800cff0:	0549      	lsls	r1, r1, #21
 800cff2:	430a      	orrs	r2, r1
 800cff4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cff6:	46c0      	nop			@ (mov r8, r8)
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	40021000 	.word	0x40021000

0800d000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d004:	46c0      	nop			@ (mov r8, r8)
 800d006:	e7fd      	b.n	800d004 <NMI_Handler+0x4>

0800d008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d00c:	46c0      	nop			@ (mov r8, r8)
 800d00e:	e7fd      	b.n	800d00c <HardFault_Handler+0x4>

0800d010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d014:	46c0      	nop			@ (mov r8, r8)
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d01e:	46c0      	nop			@ (mov r8, r8)
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d028:	f001 f95c 	bl	800e2e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d02c:	46c0      	nop			@ (mov r8, r8)
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
	...

0800d034 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800d038:	4b03      	ldr	r3, [pc, #12]	@ (800d048 <RTC_IRQHandler+0x14>)
 800d03a:	0018      	movs	r0, r3
 800d03c:	f008 fe6c 	bl	8015d18 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800d040:	46c0      	nop			@ (mov r8, r8)
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	46c0      	nop			@ (mov r8, r8)
 800d048:	200011a0 	.word	0x200011a0

0800d04c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800d050:	2380      	movs	r3, #128	@ 0x80
 800d052:	021b      	lsls	r3, r3, #8
 800d054:	0018      	movs	r0, r3
 800d056:	f002 fbef 	bl	800f838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800d05a:	46c0      	nop			@ (mov r8, r8)
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d064:	4b05      	ldr	r3, [pc, #20]	@ (800d07c <DMA1_Channel2_3_IRQHandler+0x1c>)
 800d066:	0018      	movs	r0, r3
 800d068:	f001 ff77 	bl	800ef5a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800d06c:	4b04      	ldr	r3, [pc, #16]	@ (800d080 <DMA1_Channel2_3_IRQHandler+0x20>)
 800d06e:	0018      	movs	r0, r3
 800d070:	f001 ff73 	bl	800ef5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800d074:	46c0      	nop			@ (mov r8, r8)
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	46c0      	nop			@ (mov r8, r8)
 800d07c:	20000e48 	.word	0x20000e48
 800d080:	20000e00 	.word	0x20000e00

0800d084 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800d088:	4b07      	ldr	r3, [pc, #28]	@ (800d0a8 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800d08a:	0018      	movs	r0, r3
 800d08c:	f001 ff65 	bl	800ef5a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800d090:	4b06      	ldr	r3, [pc, #24]	@ (800d0ac <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800d092:	0018      	movs	r0, r3
 800d094:	f001 ff61 	bl	800ef5a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800d098:	4b05      	ldr	r3, [pc, #20]	@ (800d0b0 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800d09a:	0018      	movs	r0, r3
 800d09c:	f001 ff5d 	bl	800ef5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800d0a0:	46c0      	nop			@ (mov r8, r8)
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	46c0      	nop			@ (mov r8, r8)
 800d0a8:	20000ecc 	.word	0x20000ecc
 800d0ac:	20002444 	.word	0x20002444
 800d0b0:	2000248c 	.word	0x2000248c

0800d0b4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800d0b8:	4b03      	ldr	r3, [pc, #12]	@ (800d0c8 <USART4_5_IRQHandler+0x14>)
 800d0ba:	0018      	movs	r0, r3
 800d0bc:	f009 fd26 	bl	8016b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800d0c0:	46c0      	nop			@ (mov r8, r8)
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	46c0      	nop			@ (mov r8, r8)
 800d0c8:	2000238c 	.word	0x2000238c

0800d0cc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800d0d0:	4b09      	ldr	r3, [pc, #36]	@ (800d0f8 <I2C1_IRQHandler+0x2c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	699a      	ldr	r2, [r3, #24]
 800d0d6:	23e0      	movs	r3, #224	@ 0xe0
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	4013      	ands	r3, r2
 800d0dc:	d004      	beq.n	800d0e8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800d0de:	4b06      	ldr	r3, [pc, #24]	@ (800d0f8 <I2C1_IRQHandler+0x2c>)
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	f003 f891 	bl	8010208 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800d0e6:	e003      	b.n	800d0f0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800d0e8:	4b03      	ldr	r3, [pc, #12]	@ (800d0f8 <I2C1_IRQHandler+0x2c>)
 800d0ea:	0018      	movs	r0, r3
 800d0ec:	f003 f872 	bl	80101d4 <HAL_I2C_EV_IRQHandler>
}
 800d0f0:	46c0      	nop			@ (mov r8, r8)
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	46c0      	nop			@ (mov r8, r8)
 800d0f8:	20000d58 	.word	0x20000d58

0800d0fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d100:	4b03      	ldr	r3, [pc, #12]	@ (800d110 <USART1_IRQHandler+0x14>)
 800d102:	0018      	movs	r0, r3
 800d104:	f009 fd02 	bl	8016b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d108:	46c0      	nop			@ (mov r8, r8)
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	46c0      	nop			@ (mov r8, r8)
 800d110:	200022d4 	.word	0x200022d4

0800d114 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d118:	4b03      	ldr	r3, [pc, #12]	@ (800d128 <USB_IRQHandler+0x14>)
 800d11a:	0018      	movs	r0, r3
 800d11c:	f005 fc52 	bl	80129c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800d120:	46c0      	nop			@ (mov r8, r8)
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	46c0      	nop			@ (mov r8, r8)
 800d128:	200032a0 	.word	0x200032a0

0800d12c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	af00      	add	r7, sp, #0
  return 1;
 800d130:	2301      	movs	r3, #1
}
 800d132:	0018      	movs	r0, r3
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <_kill>:

int _kill(int pid, int sig)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d142:	f012 fbc7 	bl	801f8d4 <__errno>
 800d146:	0003      	movs	r3, r0
 800d148:	2216      	movs	r2, #22
 800d14a:	601a      	str	r2, [r3, #0]
  return -1;
 800d14c:	2301      	movs	r3, #1
 800d14e:	425b      	negs	r3, r3
}
 800d150:	0018      	movs	r0, r3
 800d152:	46bd      	mov	sp, r7
 800d154:	b002      	add	sp, #8
 800d156:	bd80      	pop	{r7, pc}

0800d158 <_exit>:

void _exit (int status)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d160:	2301      	movs	r3, #1
 800d162:	425a      	negs	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	0011      	movs	r1, r2
 800d168:	0018      	movs	r0, r3
 800d16a:	f7ff ffe5 	bl	800d138 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d16e:	46c0      	nop			@ (mov r8, r8)
 800d170:	e7fd      	b.n	800d16e <_exit+0x16>

0800d172 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b086      	sub	sp, #24
 800d176:	af00      	add	r7, sp, #0
 800d178:	60f8      	str	r0, [r7, #12]
 800d17a:	60b9      	str	r1, [r7, #8]
 800d17c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d17e:	2300      	movs	r3, #0
 800d180:	617b      	str	r3, [r7, #20]
 800d182:	e00a      	b.n	800d19a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d184:	e000      	b.n	800d188 <_read+0x16>
 800d186:	bf00      	nop
 800d188:	0001      	movs	r1, r0
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	1c5a      	adds	r2, r3, #1
 800d18e:	60ba      	str	r2, [r7, #8]
 800d190:	b2ca      	uxtb	r2, r1
 800d192:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	3301      	adds	r3, #1
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	697a      	ldr	r2, [r7, #20]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	dbf0      	blt.n	800d184 <_read+0x12>
  }

  return len;
 800d1a2:	687b      	ldr	r3, [r7, #4]
}
 800d1a4:	0018      	movs	r0, r3
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	b006      	add	sp, #24
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <_close>:
  }
  return len;
}

int _close(int file)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	425b      	negs	r3, r3
}
 800d1b8:	0018      	movs	r0, r3
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	b002      	add	sp, #8
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	2280      	movs	r2, #128	@ 0x80
 800d1ce:	0192      	lsls	r2, r2, #6
 800d1d0:	605a      	str	r2, [r3, #4]
  return 0;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	b002      	add	sp, #8
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <_isatty>:

int _isatty(int file)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d1e4:	2301      	movs	r3, #1
}
 800d1e6:	0018      	movs	r0, r3
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	b002      	add	sp, #8
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	0018      	movs	r0, r3
 800d1fe:	46bd      	mov	sp, r7
 800d200:	b004      	add	sp, #16
 800d202:	bd80      	pop	{r7, pc}

0800d204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d20c:	4a14      	ldr	r2, [pc, #80]	@ (800d260 <_sbrk+0x5c>)
 800d20e:	4b15      	ldr	r3, [pc, #84]	@ (800d264 <_sbrk+0x60>)
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d218:	4b13      	ldr	r3, [pc, #76]	@ (800d268 <_sbrk+0x64>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d102      	bne.n	800d226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d220:	4b11      	ldr	r3, [pc, #68]	@ (800d268 <_sbrk+0x64>)
 800d222:	4a12      	ldr	r2, [pc, #72]	@ (800d26c <_sbrk+0x68>)
 800d224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d226:	4b10      	ldr	r3, [pc, #64]	@ (800d268 <_sbrk+0x64>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	18d3      	adds	r3, r2, r3
 800d22e:	693a      	ldr	r2, [r7, #16]
 800d230:	429a      	cmp	r2, r3
 800d232:	d207      	bcs.n	800d244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d234:	f012 fb4e 	bl	801f8d4 <__errno>
 800d238:	0003      	movs	r3, r0
 800d23a:	220c      	movs	r2, #12
 800d23c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d23e:	2301      	movs	r3, #1
 800d240:	425b      	negs	r3, r3
 800d242:	e009      	b.n	800d258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d244:	4b08      	ldr	r3, [pc, #32]	@ (800d268 <_sbrk+0x64>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d24a:	4b07      	ldr	r3, [pc, #28]	@ (800d268 <_sbrk+0x64>)
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	18d2      	adds	r2, r2, r3
 800d252:	4b05      	ldr	r3, [pc, #20]	@ (800d268 <_sbrk+0x64>)
 800d254:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d256:	68fb      	ldr	r3, [r7, #12]
}
 800d258:	0018      	movs	r0, r3
 800d25a:	46bd      	mov	sp, r7
 800d25c:	b006      	add	sp, #24
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20005000 	.word	0x20005000
 800d264:	00000400 	.word	0x00000400
 800d268:	20002158 	.word	0x20002158
 800d26c:	20003900 	.word	0x20003900

0800d270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d274:	46c0      	nop			@ (mov r8, r8)
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d282:	2310      	movs	r3, #16
 800d284:	18fb      	adds	r3, r7, r3
 800d286:	0018      	movs	r0, r3
 800d288:	2308      	movs	r3, #8
 800d28a:	001a      	movs	r2, r3
 800d28c:	2100      	movs	r1, #0
 800d28e:	f012 fa7d 	bl	801f78c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d292:	003b      	movs	r3, r7
 800d294:	0018      	movs	r0, r3
 800d296:	2310      	movs	r3, #16
 800d298:	001a      	movs	r2, r3
 800d29a:	2100      	movs	r1, #0
 800d29c:	f012 fa76 	bl	801f78c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d2a0:	4b2e      	ldr	r3, [pc, #184]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d2a2:	2280      	movs	r2, #128	@ 0x80
 800d2a4:	05d2      	lsls	r2, r2, #23
 800d2a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d2a8:	4b2c      	ldr	r3, [pc, #176]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2ae:	4b2b      	ldr	r3, [pc, #172]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800d2b4:	4b29      	ldr	r3, [pc, #164]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d2b6:	4a2a      	ldr	r2, [pc, #168]	@ (800d360 <MX_TIM2_Init+0xe4>)
 800d2b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d2ba:	4b28      	ldr	r3, [pc, #160]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d2bc:	2200      	movs	r2, #0
 800d2be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2c0:	4b26      	ldr	r3, [pc, #152]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d2c6:	4b25      	ldr	r3, [pc, #148]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f008 fe33 	bl	8015f34 <HAL_TIM_PWM_Init>
 800d2ce:	1e03      	subs	r3, r0, #0
 800d2d0:	d001      	beq.n	800d2d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d2d2:	f7fb f8e3 	bl	800849c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2d6:	2110      	movs	r1, #16
 800d2d8:	187b      	adds	r3, r7, r1
 800d2da:	2200      	movs	r2, #0
 800d2dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2de:	187b      	adds	r3, r7, r1
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d2e4:	187a      	adds	r2, r7, r1
 800d2e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d2e8:	0011      	movs	r1, r2
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	f009 f940 	bl	8016570 <HAL_TIMEx_MasterConfigSynchronization>
 800d2f0:	1e03      	subs	r3, r0, #0
 800d2f2:	d001      	beq.n	800d2f8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800d2f4:	f7fb f8d2 	bl	800849c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d2f8:	003b      	movs	r3, r7
 800d2fa:	2260      	movs	r2, #96	@ 0x60
 800d2fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d2fe:	003b      	movs	r3, r7
 800d300:	2200      	movs	r2, #0
 800d302:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d304:	003b      	movs	r3, r7
 800d306:	2200      	movs	r2, #0
 800d308:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d30a:	003b      	movs	r3, r7
 800d30c:	2200      	movs	r2, #0
 800d30e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d310:	0039      	movs	r1, r7
 800d312:	4b12      	ldr	r3, [pc, #72]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d314:	2200      	movs	r2, #0
 800d316:	0018      	movs	r0, r3
 800d318:	f008 fede 	bl	80160d8 <HAL_TIM_PWM_ConfigChannel>
 800d31c:	1e03      	subs	r3, r0, #0
 800d31e:	d001      	beq.n	800d324 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800d320:	f7fb f8bc 	bl	800849c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d324:	0039      	movs	r1, r7
 800d326:	4b0d      	ldr	r3, [pc, #52]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d328:	2208      	movs	r2, #8
 800d32a:	0018      	movs	r0, r3
 800d32c:	f008 fed4 	bl	80160d8 <HAL_TIM_PWM_ConfigChannel>
 800d330:	1e03      	subs	r3, r0, #0
 800d332:	d001      	beq.n	800d338 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800d334:	f7fb f8b2 	bl	800849c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d338:	0039      	movs	r1, r7
 800d33a:	4b08      	ldr	r3, [pc, #32]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d33c:	220c      	movs	r2, #12
 800d33e:	0018      	movs	r0, r3
 800d340:	f008 feca 	bl	80160d8 <HAL_TIM_PWM_ConfigChannel>
 800d344:	1e03      	subs	r3, r0, #0
 800d346:	d001      	beq.n	800d34c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800d348:	f7fb f8a8 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d34c:	4b03      	ldr	r3, [pc, #12]	@ (800d35c <MX_TIM2_Init+0xe0>)
 800d34e:	0018      	movs	r0, r3
 800d350:	f000 f8fe 	bl	800d550 <HAL_TIM_MspPostInit>

}
 800d354:	46c0      	nop			@ (mov r8, r8)
 800d356:	46bd      	mov	sp, r7
 800d358:	b006      	add	sp, #24
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	2000215c 	.word	0x2000215c
 800d360:	0000ffff 	.word	0x0000ffff

0800d364 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d36a:	2310      	movs	r3, #16
 800d36c:	18fb      	adds	r3, r7, r3
 800d36e:	0018      	movs	r0, r3
 800d370:	2308      	movs	r3, #8
 800d372:	001a      	movs	r2, r3
 800d374:	2100      	movs	r1, #0
 800d376:	f012 fa09 	bl	801f78c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d37a:	003b      	movs	r3, r7
 800d37c:	0018      	movs	r0, r3
 800d37e:	2310      	movs	r3, #16
 800d380:	001a      	movs	r2, r3
 800d382:	2100      	movs	r1, #0
 800d384:	f012 fa02 	bl	801f78c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d388:	4b32      	ldr	r3, [pc, #200]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d38a:	4a33      	ldr	r2, [pc, #204]	@ (800d458 <MX_TIM3_Init+0xf4>)
 800d38c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d38e:	4b31      	ldr	r3, [pc, #196]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d390:	2200      	movs	r2, #0
 800d392:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d394:	4b2f      	ldr	r3, [pc, #188]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d396:	2200      	movs	r2, #0
 800d398:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d39a:	4b2e      	ldr	r3, [pc, #184]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d39c:	4a2f      	ldr	r2, [pc, #188]	@ (800d45c <MX_TIM3_Init+0xf8>)
 800d39e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d3a0:	4b2c      	ldr	r3, [pc, #176]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d3a6:	4b2b      	ldr	r3, [pc, #172]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d3ac:	4b29      	ldr	r3, [pc, #164]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	f008 fdc0 	bl	8015f34 <HAL_TIM_PWM_Init>
 800d3b4:	1e03      	subs	r3, r0, #0
 800d3b6:	d001      	beq.n	800d3bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d3b8:	f7fb f870 	bl	800849c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3bc:	2110      	movs	r1, #16
 800d3be:	187b      	adds	r3, r7, r1
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3c4:	187b      	adds	r3, r7, r1
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d3ca:	187a      	adds	r2, r7, r1
 800d3cc:	4b21      	ldr	r3, [pc, #132]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d3ce:	0011      	movs	r1, r2
 800d3d0:	0018      	movs	r0, r3
 800d3d2:	f009 f8cd 	bl	8016570 <HAL_TIMEx_MasterConfigSynchronization>
 800d3d6:	1e03      	subs	r3, r0, #0
 800d3d8:	d001      	beq.n	800d3de <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800d3da:	f7fb f85f 	bl	800849c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d3de:	003b      	movs	r3, r7
 800d3e0:	2260      	movs	r2, #96	@ 0x60
 800d3e2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d3e4:	003b      	movs	r3, r7
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d3ea:	003b      	movs	r3, r7
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d3f0:	003b      	movs	r3, r7
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d3f6:	0039      	movs	r1, r7
 800d3f8:	4b16      	ldr	r3, [pc, #88]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	0018      	movs	r0, r3
 800d3fe:	f008 fe6b 	bl	80160d8 <HAL_TIM_PWM_ConfigChannel>
 800d402:	1e03      	subs	r3, r0, #0
 800d404:	d001      	beq.n	800d40a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800d406:	f7fb f849 	bl	800849c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800d40a:	4b12      	ldr	r3, [pc, #72]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d40c:	2104      	movs	r1, #4
 800d40e:	0018      	movs	r0, r3
 800d410:	f009 f90c 	bl	801662c <HAL_TIMEx_RemapConfig>
 800d414:	1e03      	subs	r3, r0, #0
 800d416:	d001      	beq.n	800d41c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800d418:	f7fb f840 	bl	800849c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d41c:	0039      	movs	r1, r7
 800d41e:	4b0d      	ldr	r3, [pc, #52]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d420:	2204      	movs	r2, #4
 800d422:	0018      	movs	r0, r3
 800d424:	f008 fe58 	bl	80160d8 <HAL_TIM_PWM_ConfigChannel>
 800d428:	1e03      	subs	r3, r0, #0
 800d42a:	d001      	beq.n	800d430 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800d42c:	f7fb f836 	bl	800849c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d430:	0039      	movs	r1, r7
 800d432:	4b08      	ldr	r3, [pc, #32]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d434:	2208      	movs	r2, #8
 800d436:	0018      	movs	r0, r3
 800d438:	f008 fe4e 	bl	80160d8 <HAL_TIM_PWM_ConfigChannel>
 800d43c:	1e03      	subs	r3, r0, #0
 800d43e:	d001      	beq.n	800d444 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800d440:	f7fb f82c 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d444:	4b03      	ldr	r3, [pc, #12]	@ (800d454 <MX_TIM3_Init+0xf0>)
 800d446:	0018      	movs	r0, r3
 800d448:	f000 f882 	bl	800d550 <HAL_TIM_MspPostInit>

}
 800d44c:	46c0      	nop			@ (mov r8, r8)
 800d44e:	46bd      	mov	sp, r7
 800d450:	b006      	add	sp, #24
 800d452:	bd80      	pop	{r7, pc}
 800d454:	2000219c 	.word	0x2000219c
 800d458:	40000400 	.word	0x40000400
 800d45c:	0000ffff 	.word	0x0000ffff

0800d460 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d466:	003b      	movs	r3, r7
 800d468:	0018      	movs	r0, r3
 800d46a:	2308      	movs	r3, #8
 800d46c:	001a      	movs	r2, r3
 800d46e:	2100      	movs	r1, #0
 800d470:	f012 f98c 	bl	801f78c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d474:	4b15      	ldr	r3, [pc, #84]	@ (800d4cc <MX_TIM6_Init+0x6c>)
 800d476:	4a16      	ldr	r2, [pc, #88]	@ (800d4d0 <MX_TIM6_Init+0x70>)
 800d478:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800d47a:	4b14      	ldr	r3, [pc, #80]	@ (800d4cc <MX_TIM6_Init+0x6c>)
 800d47c:	220a      	movs	r2, #10
 800d47e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d480:	4b12      	ldr	r3, [pc, #72]	@ (800d4cc <MX_TIM6_Init+0x6c>)
 800d482:	2200      	movs	r2, #0
 800d484:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d486:	4b11      	ldr	r3, [pc, #68]	@ (800d4cc <MX_TIM6_Init+0x6c>)
 800d488:	4a12      	ldr	r2, [pc, #72]	@ (800d4d4 <MX_TIM6_Init+0x74>)
 800d48a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d48c:	4b0f      	ldr	r3, [pc, #60]	@ (800d4cc <MX_TIM6_Init+0x6c>)
 800d48e:	2200      	movs	r2, #0
 800d490:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d492:	4b0e      	ldr	r3, [pc, #56]	@ (800d4cc <MX_TIM6_Init+0x6c>)
 800d494:	0018      	movs	r0, r3
 800d496:	f008 fca5 	bl	8015de4 <HAL_TIM_Base_Init>
 800d49a:	1e03      	subs	r3, r0, #0
 800d49c:	d001      	beq.n	800d4a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d49e:	f7fa fffd 	bl	800849c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4a2:	003b      	movs	r3, r7
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4a8:	003b      	movs	r3, r7
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d4ae:	003a      	movs	r2, r7
 800d4b0:	4b06      	ldr	r3, [pc, #24]	@ (800d4cc <MX_TIM6_Init+0x6c>)
 800d4b2:	0011      	movs	r1, r2
 800d4b4:	0018      	movs	r0, r3
 800d4b6:	f009 f85b 	bl	8016570 <HAL_TIMEx_MasterConfigSynchronization>
 800d4ba:	1e03      	subs	r3, r0, #0
 800d4bc:	d001      	beq.n	800d4c2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800d4be:	f7fa ffed 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d4c2:	46c0      	nop			@ (mov r8, r8)
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	b002      	add	sp, #8
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	46c0      	nop			@ (mov r8, r8)
 800d4cc:	200021dc 	.word	0x200021dc
 800d4d0:	40001000 	.word	0x40001000
 800d4d4:	0000ffff 	.word	0x0000ffff

0800d4d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	2380      	movs	r3, #128	@ 0x80
 800d4e6:	05db      	lsls	r3, r3, #23
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d106      	bne.n	800d4fa <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d518 <HAL_TIM_PWM_MspInit+0x40>)
 800d4ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4f0:	4b09      	ldr	r3, [pc, #36]	@ (800d518 <HAL_TIM_PWM_MspInit+0x40>)
 800d4f2:	2101      	movs	r1, #1
 800d4f4:	430a      	orrs	r2, r1
 800d4f6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d4f8:	e00a      	b.n	800d510 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a07      	ldr	r2, [pc, #28]	@ (800d51c <HAL_TIM_PWM_MspInit+0x44>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d105      	bne.n	800d510 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d504:	4b04      	ldr	r3, [pc, #16]	@ (800d518 <HAL_TIM_PWM_MspInit+0x40>)
 800d506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d508:	4b03      	ldr	r3, [pc, #12]	@ (800d518 <HAL_TIM_PWM_MspInit+0x40>)
 800d50a:	2102      	movs	r1, #2
 800d50c:	430a      	orrs	r2, r1
 800d50e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d510:	46c0      	nop			@ (mov r8, r8)
 800d512:	46bd      	mov	sp, r7
 800d514:	b002      	add	sp, #8
 800d516:	bd80      	pop	{r7, pc}
 800d518:	40021000 	.word	0x40021000
 800d51c:	40000400 	.word	0x40000400

0800d520 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a06      	ldr	r2, [pc, #24]	@ (800d548 <HAL_TIM_Base_MspInit+0x28>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d105      	bne.n	800d53e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d532:	4b06      	ldr	r3, [pc, #24]	@ (800d54c <HAL_TIM_Base_MspInit+0x2c>)
 800d534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d536:	4b05      	ldr	r3, [pc, #20]	@ (800d54c <HAL_TIM_Base_MspInit+0x2c>)
 800d538:	2110      	movs	r1, #16
 800d53a:	430a      	orrs	r2, r1
 800d53c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800d53e:	46c0      	nop			@ (mov r8, r8)
 800d540:	46bd      	mov	sp, r7
 800d542:	b002      	add	sp, #8
 800d544:	bd80      	pop	{r7, pc}
 800d546:	46c0      	nop			@ (mov r8, r8)
 800d548:	40001000 	.word	0x40001000
 800d54c:	40021000 	.word	0x40021000

0800d550 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d550:	b590      	push	{r4, r7, lr}
 800d552:	b08b      	sub	sp, #44	@ 0x2c
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d558:	2414      	movs	r4, #20
 800d55a:	193b      	adds	r3, r7, r4
 800d55c:	0018      	movs	r0, r3
 800d55e:	2314      	movs	r3, #20
 800d560:	001a      	movs	r2, r3
 800d562:	2100      	movs	r1, #0
 800d564:	f012 f912 	bl	801f78c <memset>
  if(timHandle->Instance==TIM2)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	2380      	movs	r3, #128	@ 0x80
 800d56e:	05db      	lsls	r3, r3, #23
 800d570:	429a      	cmp	r2, r3
 800d572:	d123      	bne.n	800d5bc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d574:	4b27      	ldr	r3, [pc, #156]	@ (800d614 <HAL_TIM_MspPostInit+0xc4>)
 800d576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d578:	4b26      	ldr	r3, [pc, #152]	@ (800d614 <HAL_TIM_MspPostInit+0xc4>)
 800d57a:	2101      	movs	r1, #1
 800d57c:	430a      	orrs	r2, r1
 800d57e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d580:	4b24      	ldr	r3, [pc, #144]	@ (800d614 <HAL_TIM_MspPostInit+0xc4>)
 800d582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d584:	2201      	movs	r2, #1
 800d586:	4013      	ands	r3, r2
 800d588:	613b      	str	r3, [r7, #16]
 800d58a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800d58c:	0021      	movs	r1, r4
 800d58e:	187b      	adds	r3, r7, r1
 800d590:	220d      	movs	r2, #13
 800d592:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d594:	187b      	adds	r3, r7, r1
 800d596:	2202      	movs	r2, #2
 800d598:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d59a:	187b      	adds	r3, r7, r1
 800d59c:	2200      	movs	r2, #0
 800d59e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5a0:	187b      	adds	r3, r7, r1
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d5a6:	187b      	adds	r3, r7, r1
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5ac:	187a      	adds	r2, r7, r1
 800d5ae:	23a0      	movs	r3, #160	@ 0xa0
 800d5b0:	05db      	lsls	r3, r3, #23
 800d5b2:	0011      	movs	r1, r2
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	f001 ff87 	bl	800f4c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d5ba:	e027      	b.n	800d60c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a15      	ldr	r2, [pc, #84]	@ (800d618 <HAL_TIM_MspPostInit+0xc8>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d122      	bne.n	800d60c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d5c6:	4b13      	ldr	r3, [pc, #76]	@ (800d614 <HAL_TIM_MspPostInit+0xc4>)
 800d5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ca:	4b12      	ldr	r3, [pc, #72]	@ (800d614 <HAL_TIM_MspPostInit+0xc4>)
 800d5cc:	2104      	movs	r1, #4
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d5d2:	4b10      	ldr	r3, [pc, #64]	@ (800d614 <HAL_TIM_MspPostInit+0xc4>)
 800d5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d6:	2204      	movs	r2, #4
 800d5d8:	4013      	ands	r3, r2
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800d5de:	2114      	movs	r1, #20
 800d5e0:	187b      	adds	r3, r7, r1
 800d5e2:	22e0      	movs	r2, #224	@ 0xe0
 800d5e4:	0052      	lsls	r2, r2, #1
 800d5e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5e8:	187b      	adds	r3, r7, r1
 800d5ea:	2202      	movs	r2, #2
 800d5ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5ee:	187b      	adds	r3, r7, r1
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5f4:	187b      	adds	r3, r7, r1
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d5fa:	187b      	adds	r3, r7, r1
 800d5fc:	2202      	movs	r2, #2
 800d5fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d600:	187b      	adds	r3, r7, r1
 800d602:	4a06      	ldr	r2, [pc, #24]	@ (800d61c <HAL_TIM_MspPostInit+0xcc>)
 800d604:	0019      	movs	r1, r3
 800d606:	0010      	movs	r0, r2
 800d608:	f001 ff5e 	bl	800f4c8 <HAL_GPIO_Init>
}
 800d60c:	46c0      	nop			@ (mov r8, r8)
 800d60e:	46bd      	mov	sp, r7
 800d610:	b00b      	add	sp, #44	@ 0x2c
 800d612:	bd90      	pop	{r4, r7, pc}
 800d614:	40021000 	.word	0x40021000
 800d618:	40000400 	.word	0x40000400
 800d61c:	50000800 	.word	0x50000800

0800d620 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d624:	4b17      	ldr	r3, [pc, #92]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d626:	4a18      	ldr	r2, [pc, #96]	@ (800d688 <MX_LPUART1_UART_Init+0x68>)
 800d628:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d62a:	4b16      	ldr	r3, [pc, #88]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d62c:	22e1      	movs	r2, #225	@ 0xe1
 800d62e:	0252      	lsls	r2, r2, #9
 800d630:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d632:	4b14      	ldr	r3, [pc, #80]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d634:	2200      	movs	r2, #0
 800d636:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d638:	4b12      	ldr	r3, [pc, #72]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d63e:	4b11      	ldr	r3, [pc, #68]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d640:	2200      	movs	r2, #0
 800d642:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d644:	4b0f      	ldr	r3, [pc, #60]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d646:	220c      	movs	r2, #12
 800d648:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d64a:	4b0e      	ldr	r3, [pc, #56]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d650:	4b0c      	ldr	r3, [pc, #48]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d652:	2200      	movs	r2, #0
 800d654:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d656:	4b0b      	ldr	r3, [pc, #44]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d658:	2218      	movs	r2, #24
 800d65a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d65c:	4b09      	ldr	r3, [pc, #36]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d65e:	2280      	movs	r2, #128	@ 0x80
 800d660:	0212      	lsls	r2, r2, #8
 800d662:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d664:	4b07      	ldr	r3, [pc, #28]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d666:	2280      	movs	r2, #128	@ 0x80
 800d668:	0152      	lsls	r2, r2, #5
 800d66a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d66c:	4b05      	ldr	r3, [pc, #20]	@ (800d684 <MX_LPUART1_UART_Init+0x64>)
 800d66e:	0018      	movs	r0, r3
 800d670:	f008 fffa 	bl	8016668 <HAL_UART_Init>
 800d674:	1e03      	subs	r3, r0, #0
 800d676:	d001      	beq.n	800d67c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d678:	f7fa ff10 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d67c:	46c0      	nop			@ (mov r8, r8)
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	46c0      	nop			@ (mov r8, r8)
 800d684:	2000221c 	.word	0x2000221c
 800d688:	40004800 	.word	0x40004800

0800d68c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d690:	4b16      	ldr	r3, [pc, #88]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d692:	4a17      	ldr	r2, [pc, #92]	@ (800d6f0 <MX_USART1_UART_Init+0x64>)
 800d694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d696:	4b15      	ldr	r3, [pc, #84]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d698:	22e1      	movs	r2, #225	@ 0xe1
 800d69a:	0252      	lsls	r2, r2, #9
 800d69c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d69e:	4b13      	ldr	r3, [pc, #76]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d6a4:	4b11      	ldr	r3, [pc, #68]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d6aa:	4b10      	ldr	r3, [pc, #64]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d6b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6b2:	220c      	movs	r2, #12
 800d6b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d6c8:	4b08      	ldr	r3, [pc, #32]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6ca:	2208      	movs	r2, #8
 800d6cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d6ce:	4b07      	ldr	r3, [pc, #28]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6d0:	2280      	movs	r2, #128	@ 0x80
 800d6d2:	0212      	lsls	r2, r2, #8
 800d6d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d6d6:	4b05      	ldr	r3, [pc, #20]	@ (800d6ec <MX_USART1_UART_Init+0x60>)
 800d6d8:	0018      	movs	r0, r3
 800d6da:	f008 ffc5 	bl	8016668 <HAL_UART_Init>
 800d6de:	1e03      	subs	r3, r0, #0
 800d6e0:	d001      	beq.n	800d6e6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d6e2:	f7fa fedb 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d6e6:	46c0      	nop			@ (mov r8, r8)
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	200022d4 	.word	0x200022d4
 800d6f0:	40013800 	.word	0x40013800

0800d6f4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d6f8:	4b14      	ldr	r3, [pc, #80]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d6fa:	4a15      	ldr	r2, [pc, #84]	@ (800d750 <MX_USART4_UART_Init+0x5c>)
 800d6fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d6fe:	4b13      	ldr	r3, [pc, #76]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d700:	22e1      	movs	r2, #225	@ 0xe1
 800d702:	0252      	lsls	r2, r2, #9
 800d704:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d706:	4b11      	ldr	r3, [pc, #68]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d708:	2200      	movs	r2, #0
 800d70a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d70c:	4b0f      	ldr	r3, [pc, #60]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d70e:	2200      	movs	r2, #0
 800d710:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d712:	4b0e      	ldr	r3, [pc, #56]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d714:	2200      	movs	r2, #0
 800d716:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d718:	4b0c      	ldr	r3, [pc, #48]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d71a:	220c      	movs	r2, #12
 800d71c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d71e:	4b0b      	ldr	r3, [pc, #44]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d720:	2200      	movs	r2, #0
 800d722:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d724:	4b09      	ldr	r3, [pc, #36]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d726:	2200      	movs	r2, #0
 800d728:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d72a:	4b08      	ldr	r3, [pc, #32]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d730:	4b06      	ldr	r3, [pc, #24]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d732:	2200      	movs	r2, #0
 800d734:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d736:	4b05      	ldr	r3, [pc, #20]	@ (800d74c <MX_USART4_UART_Init+0x58>)
 800d738:	0018      	movs	r0, r3
 800d73a:	f008 ff95 	bl	8016668 <HAL_UART_Init>
 800d73e:	1e03      	subs	r3, r0, #0
 800d740:	d001      	beq.n	800d746 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d742:	f7fa feab 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d746:	46c0      	nop			@ (mov r8, r8)
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	2000238c 	.word	0x2000238c
 800d750:	40004c00 	.word	0x40004c00

0800d754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d754:	b590      	push	{r4, r7, lr}
 800d756:	b08d      	sub	sp, #52	@ 0x34
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d75c:	241c      	movs	r4, #28
 800d75e:	193b      	adds	r3, r7, r4
 800d760:	0018      	movs	r0, r3
 800d762:	2314      	movs	r3, #20
 800d764:	001a      	movs	r2, r3
 800d766:	2100      	movs	r1, #0
 800d768:	f012 f810 	bl	801f78c <memset>
  if(uartHandle->Instance==LPUART1)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a8b      	ldr	r2, [pc, #556]	@ (800d9a0 <HAL_UART_MspInit+0x24c>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d129      	bne.n	800d7ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d776:	4b8b      	ldr	r3, [pc, #556]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d77a:	4b8a      	ldr	r3, [pc, #552]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d77c:	2180      	movs	r1, #128	@ 0x80
 800d77e:	02c9      	lsls	r1, r1, #11
 800d780:	430a      	orrs	r2, r1
 800d782:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d784:	4b87      	ldr	r3, [pc, #540]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d788:	4b86      	ldr	r3, [pc, #536]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d78a:	2104      	movs	r1, #4
 800d78c:	430a      	orrs	r2, r1
 800d78e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d790:	4b84      	ldr	r3, [pc, #528]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d794:	2204      	movs	r2, #4
 800d796:	4013      	ands	r3, r2
 800d798:	61bb      	str	r3, [r7, #24]
 800d79a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d79c:	0021      	movs	r1, r4
 800d79e:	187b      	adds	r3, r7, r1
 800d7a0:	2203      	movs	r2, #3
 800d7a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7a4:	187b      	adds	r3, r7, r1
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7aa:	187b      	adds	r3, r7, r1
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7b0:	187b      	adds	r3, r7, r1
 800d7b2:	2203      	movs	r2, #3
 800d7b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d7b6:	187b      	adds	r3, r7, r1
 800d7b8:	2206      	movs	r2, #6
 800d7ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7bc:	187b      	adds	r3, r7, r1
 800d7be:	4a7a      	ldr	r2, [pc, #488]	@ (800d9a8 <HAL_UART_MspInit+0x254>)
 800d7c0:	0019      	movs	r1, r3
 800d7c2:	0010      	movs	r0, r2
 800d7c4:	f001 fe80 	bl	800f4c8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d7c8:	e0e5      	b.n	800d996 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a77      	ldr	r2, [pc, #476]	@ (800d9ac <HAL_UART_MspInit+0x258>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d133      	bne.n	800d83c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d7d4:	4b73      	ldr	r3, [pc, #460]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d7d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7d8:	4b72      	ldr	r3, [pc, #456]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d7da:	2180      	movs	r1, #128	@ 0x80
 800d7dc:	01c9      	lsls	r1, r1, #7
 800d7de:	430a      	orrs	r2, r1
 800d7e0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7e2:	4b70      	ldr	r3, [pc, #448]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7e6:	4b6f      	ldr	r3, [pc, #444]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d7e8:	2101      	movs	r1, #1
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d7ee:	4b6d      	ldr	r3, [pc, #436]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	617b      	str	r3, [r7, #20]
 800d7f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d7fa:	211c      	movs	r1, #28
 800d7fc:	187b      	adds	r3, r7, r1
 800d7fe:	22c0      	movs	r2, #192	@ 0xc0
 800d800:	00d2      	lsls	r2, r2, #3
 800d802:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d804:	187b      	adds	r3, r7, r1
 800d806:	2202      	movs	r2, #2
 800d808:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d80a:	187b      	adds	r3, r7, r1
 800d80c:	2200      	movs	r2, #0
 800d80e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d810:	187b      	adds	r3, r7, r1
 800d812:	2203      	movs	r2, #3
 800d814:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d816:	187b      	adds	r3, r7, r1
 800d818:	2204      	movs	r2, #4
 800d81a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d81c:	187a      	adds	r2, r7, r1
 800d81e:	23a0      	movs	r3, #160	@ 0xa0
 800d820:	05db      	lsls	r3, r3, #23
 800d822:	0011      	movs	r1, r2
 800d824:	0018      	movs	r0, r3
 800d826:	f001 fe4f 	bl	800f4c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d82a:	2200      	movs	r2, #0
 800d82c:	2100      	movs	r1, #0
 800d82e:	201b      	movs	r0, #27
 800d830:	f001 f9fc 	bl	800ec2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d834:	201b      	movs	r0, #27
 800d836:	f001 fa0e 	bl	800ec56 <HAL_NVIC_EnableIRQ>
}
 800d83a:	e0ac      	b.n	800d996 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a5b      	ldr	r2, [pc, #364]	@ (800d9b0 <HAL_UART_MspInit+0x25c>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d000      	beq.n	800d848 <HAL_UART_MspInit+0xf4>
 800d846:	e0a6      	b.n	800d996 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d848:	4b56      	ldr	r3, [pc, #344]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d84a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d84c:	4b55      	ldr	r3, [pc, #340]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d84e:	2180      	movs	r1, #128	@ 0x80
 800d850:	0309      	lsls	r1, r1, #12
 800d852:	430a      	orrs	r2, r1
 800d854:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d856:	4b53      	ldr	r3, [pc, #332]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d85a:	4b52      	ldr	r3, [pc, #328]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d85c:	2101      	movs	r1, #1
 800d85e:	430a      	orrs	r2, r1
 800d860:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d862:	4b50      	ldr	r3, [pc, #320]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d866:	2201      	movs	r2, #1
 800d868:	4013      	ands	r3, r2
 800d86a:	613b      	str	r3, [r7, #16]
 800d86c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d86e:	4b4d      	ldr	r3, [pc, #308]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d872:	4b4c      	ldr	r3, [pc, #304]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d874:	2104      	movs	r1, #4
 800d876:	430a      	orrs	r2, r1
 800d878:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d87a:	4b4a      	ldr	r3, [pc, #296]	@ (800d9a4 <HAL_UART_MspInit+0x250>)
 800d87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d87e:	2204      	movs	r2, #4
 800d880:	4013      	ands	r3, r2
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d886:	241c      	movs	r4, #28
 800d888:	193b      	adds	r3, r7, r4
 800d88a:	2202      	movs	r2, #2
 800d88c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d88e:	193b      	adds	r3, r7, r4
 800d890:	2202      	movs	r2, #2
 800d892:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d894:	193b      	adds	r3, r7, r4
 800d896:	2200      	movs	r2, #0
 800d898:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d89a:	193b      	adds	r3, r7, r4
 800d89c:	2203      	movs	r2, #3
 800d89e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d8a0:	193b      	adds	r3, r7, r4
 800d8a2:	2206      	movs	r2, #6
 800d8a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8a6:	193a      	adds	r2, r7, r4
 800d8a8:	23a0      	movs	r3, #160	@ 0xa0
 800d8aa:	05db      	lsls	r3, r3, #23
 800d8ac:	0011      	movs	r1, r2
 800d8ae:	0018      	movs	r0, r3
 800d8b0:	f001 fe0a 	bl	800f4c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d8b4:	0021      	movs	r1, r4
 800d8b6:	187b      	adds	r3, r7, r1
 800d8b8:	2280      	movs	r2, #128	@ 0x80
 800d8ba:	00d2      	lsls	r2, r2, #3
 800d8bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8be:	187b      	adds	r3, r7, r1
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8c4:	187b      	adds	r3, r7, r1
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8ca:	187b      	adds	r3, r7, r1
 800d8cc:	2203      	movs	r2, #3
 800d8ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d8d0:	187b      	adds	r3, r7, r1
 800d8d2:	2206      	movs	r2, #6
 800d8d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8d6:	187b      	adds	r3, r7, r1
 800d8d8:	4a33      	ldr	r2, [pc, #204]	@ (800d9a8 <HAL_UART_MspInit+0x254>)
 800d8da:	0019      	movs	r1, r3
 800d8dc:	0010      	movs	r0, r2
 800d8de:	f001 fdf3 	bl	800f4c8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800d8e2:	4b34      	ldr	r3, [pc, #208]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d8e4:	4a34      	ldr	r2, [pc, #208]	@ (800d9b8 <HAL_UART_MspInit+0x264>)
 800d8e6:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800d8e8:	4b32      	ldr	r3, [pc, #200]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d8ea:	220c      	movs	r2, #12
 800d8ec:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d8ee:	4b31      	ldr	r3, [pc, #196]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d8f4:	4b2f      	ldr	r3, [pc, #188]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d8fa:	4b2e      	ldr	r3, [pc, #184]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d8fc:	2280      	movs	r2, #128	@ 0x80
 800d8fe:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d900:	4b2c      	ldr	r3, [pc, #176]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d902:	2200      	movs	r2, #0
 800d904:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d906:	4b2b      	ldr	r3, [pc, #172]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d908:	2200      	movs	r2, #0
 800d90a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800d90c:	4b29      	ldr	r3, [pc, #164]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d90e:	2220      	movs	r2, #32
 800d910:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d912:	4b28      	ldr	r3, [pc, #160]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d914:	2200      	movs	r2, #0
 800d916:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800d918:	4b26      	ldr	r3, [pc, #152]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d91a:	0018      	movs	r0, r3
 800d91c:	f001 f9b8 	bl	800ec90 <HAL_DMA_Init>
 800d920:	1e03      	subs	r3, r0, #0
 800d922:	d001      	beq.n	800d928 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800d924:	f7fa fdba 	bl	800849c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a22      	ldr	r2, [pc, #136]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d92c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d92e:	4b21      	ldr	r3, [pc, #132]	@ (800d9b4 <HAL_UART_MspInit+0x260>)
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800d934:	4b21      	ldr	r3, [pc, #132]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d936:	4a22      	ldr	r2, [pc, #136]	@ (800d9c0 <HAL_UART_MspInit+0x26c>)
 800d938:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800d93a:	4b20      	ldr	r3, [pc, #128]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d93c:	220c      	movs	r2, #12
 800d93e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d940:	4b1e      	ldr	r3, [pc, #120]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d942:	2210      	movs	r2, #16
 800d944:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d946:	4b1d      	ldr	r3, [pc, #116]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d948:	2200      	movs	r2, #0
 800d94a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d94c:	4b1b      	ldr	r3, [pc, #108]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d94e:	2280      	movs	r2, #128	@ 0x80
 800d950:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d952:	4b1a      	ldr	r3, [pc, #104]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d954:	2200      	movs	r2, #0
 800d956:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d958:	4b18      	ldr	r3, [pc, #96]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800d95e:	4b17      	ldr	r3, [pc, #92]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d960:	2200      	movs	r2, #0
 800d962:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d964:	4b15      	ldr	r3, [pc, #84]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d966:	2200      	movs	r2, #0
 800d968:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800d96a:	4b14      	ldr	r3, [pc, #80]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d96c:	0018      	movs	r0, r3
 800d96e:	f001 f98f 	bl	800ec90 <HAL_DMA_Init>
 800d972:	1e03      	subs	r3, r0, #0
 800d974:	d001      	beq.n	800d97a <HAL_UART_MspInit+0x226>
      Error_Handler();
 800d976:	f7fa fd91 	bl	800849c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4a0f      	ldr	r2, [pc, #60]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d97e:	671a      	str	r2, [r3, #112]	@ 0x70
 800d980:	4b0e      	ldr	r3, [pc, #56]	@ (800d9bc <HAL_UART_MspInit+0x268>)
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800d986:	2200      	movs	r2, #0
 800d988:	2100      	movs	r1, #0
 800d98a:	200e      	movs	r0, #14
 800d98c:	f001 f94e 	bl	800ec2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800d990:	200e      	movs	r0, #14
 800d992:	f001 f960 	bl	800ec56 <HAL_NVIC_EnableIRQ>
}
 800d996:	46c0      	nop			@ (mov r8, r8)
 800d998:	46bd      	mov	sp, r7
 800d99a:	b00d      	add	sp, #52	@ 0x34
 800d99c:	bd90      	pop	{r4, r7, pc}
 800d99e:	46c0      	nop			@ (mov r8, r8)
 800d9a0:	40004800 	.word	0x40004800
 800d9a4:	40021000 	.word	0x40021000
 800d9a8:	50000800 	.word	0x50000800
 800d9ac:	40013800 	.word	0x40013800
 800d9b0:	40004c00 	.word	0x40004c00
 800d9b4:	20002444 	.word	0x20002444
 800d9b8:	4002006c 	.word	0x4002006c
 800d9bc:	2000248c 	.word	0x2000248c
 800d9c0:	40020080 	.word	0x40020080

0800d9c4 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800d9cc:	f000 fc9c 	bl	800e308 <HAL_GetTick>
 800d9d0:	0003      	movs	r3, r0
 800d9d2:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800d9d4:	4b1c      	ldr	r3, [pc, #112]	@ (800da48 <TimestampIsReached+0x84>)
 800d9d6:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d307      	bcc.n	800d9f0 <TimestampIsReached+0x2c>
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d901      	bls.n	800d9f0 <TimestampIsReached+0x2c>
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	e000      	b.n	800d9f2 <TimestampIsReached+0x2e>
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	230f      	movs	r3, #15
 800d9f4:	18fb      	adds	r3, r7, r3
 800d9f6:	701a      	strb	r2, [r3, #0]
 800d9f8:	781a      	ldrb	r2, [r3, #0]
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	400a      	ands	r2, r1
 800d9fe:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	429a      	cmp	r2, r3
 800da06:	d207      	bcs.n	800da18 <TimestampIsReached+0x54>
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	429a      	cmp	r2, r3
 800da12:	d201      	bcs.n	800da18 <TimestampIsReached+0x54>
 800da14:	2201      	movs	r2, #1
 800da16:	e000      	b.n	800da1a <TimestampIsReached+0x56>
 800da18:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800da1a:	200e      	movs	r0, #14
 800da1c:	183b      	adds	r3, r7, r0
 800da1e:	701a      	strb	r2, [r3, #0]
 800da20:	781a      	ldrb	r2, [r3, #0]
 800da22:	2101      	movs	r1, #1
 800da24:	400a      	ands	r2, r1
 800da26:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800da28:	230f      	movs	r3, #15
 800da2a:	18fb      	adds	r3, r7, r3
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d103      	bne.n	800da3a <TimestampIsReached+0x76>
 800da32:	183b      	adds	r3, r7, r0
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e000      	b.n	800da40 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800da3e:	2300      	movs	r3, #0
}
 800da40:	0018      	movs	r0, r3
 800da42:	46bd      	mov	sp, r7
 800da44:	b006      	add	sp, #24
 800da46:	bd80      	pop	{r7, pc}
 800da48:	7fffffff 	.word	0x7fffffff

0800da4c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800da54:	f000 fc58 	bl	800e308 <HAL_GetTick>
 800da58:	0002      	movs	r2, r0
 800da5a:	4904      	ldr	r1, [pc, #16]	@ (800da6c <AddTimestamp+0x20>)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	0018      	movs	r0, r3
 800da60:	f011 fd50 	bl	801f504 <siprintf>
}
 800da64:	46c0      	nop			@ (mov r8, r8)
 800da66:	46bd      	mov	sp, r7
 800da68:	b002      	add	sp, #8
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	0802420c 	.word	0x0802420c

0800da70 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800da70:	b40c      	push	{r2, r3}
 800da72:	b5b0      	push	{r4, r5, r7, lr}
 800da74:	b0a4      	sub	sp, #144	@ 0x90
 800da76:	af00      	add	r7, sp, #0
 800da78:	0002      	movs	r2, r0
 800da7a:	6039      	str	r1, [r7, #0]
 800da7c:	1dfb      	adds	r3, r7, #7
 800da7e:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800da80:	4b23      	ldr	r3, [pc, #140]	@ (800db10 <CreateLine+0xa0>)
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	1dfa      	adds	r2, r7, #7
 800da86:	7812      	ldrb	r2, [r2, #0]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d839      	bhi.n	800db00 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800da8c:	683a      	ldr	r2, [r7, #0]
 800da8e:	4921      	ldr	r1, [pc, #132]	@ (800db14 <CreateLine+0xa4>)
 800da90:	240c      	movs	r4, #12
 800da92:	193b      	adds	r3, r7, r4
 800da94:	0018      	movs	r0, r3
 800da96:	f011 fd35 	bl	801f504 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800da9a:	4b1d      	ldr	r3, [pc, #116]	@ (800db10 <CreateLine+0xa0>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d909      	bls.n	800dab6 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800daa2:	193b      	adds	r3, r7, r4
 800daa4:	0018      	movs	r0, r3
 800daa6:	f7f2 fb61 	bl	800016c <strlen>
 800daaa:	0002      	movs	r2, r0
 800daac:	193b      	adds	r3, r7, r4
 800daae:	189b      	adds	r3, r3, r2
 800dab0:	0018      	movs	r0, r3
 800dab2:	f7ff ffcb 	bl	800da4c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800dab6:	240c      	movs	r4, #12
 800dab8:	193b      	adds	r3, r7, r4
 800daba:	0018      	movs	r0, r3
 800dabc:	f7f2 fb56 	bl	800016c <strlen>
 800dac0:	0003      	movs	r3, r0
 800dac2:	218c      	movs	r1, #140	@ 0x8c
 800dac4:	187a      	adds	r2, r7, r1
 800dac6:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800dac8:	239c      	movs	r3, #156	@ 0x9c
 800daca:	2508      	movs	r5, #8
 800dacc:	195b      	adds	r3, r3, r5
 800dace:	19db      	adds	r3, r3, r7
 800dad0:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800dad2:	193a      	adds	r2, r7, r4
 800dad4:	187b      	adds	r3, r7, r1
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	18d0      	adds	r0, r2, r3
 800dada:	187b      	adds	r3, r7, r1
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2280      	movs	r2, #128	@ 0x80
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	0019      	movs	r1, r3
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	2298      	movs	r2, #152	@ 0x98
 800dae8:	1952      	adds	r2, r2, r5
 800daea:	19d2      	adds	r2, r2, r7
 800daec:	6812      	ldr	r2, [r2, #0]
 800daee:	f011 fda1 	bl	801f634 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800daf2:	193a      	adds	r2, r7, r4
 800daf4:	4b08      	ldr	r3, [pc, #32]	@ (800db18 <CreateLine+0xa8>)
 800daf6:	0011      	movs	r1, r2
 800daf8:	0018      	movs	r0, r3
 800dafa:	f011 fc93 	bl	801f424 <iprintf>
 800dafe:	e000      	b.n	800db02 <CreateLine+0x92>
    return;
 800db00:	46c0      	nop			@ (mov r8, r8)
}
 800db02:	46bd      	mov	sp, r7
 800db04:	b024      	add	sp, #144	@ 0x90
 800db06:	bcb0      	pop	{r4, r5, r7}
 800db08:	bc08      	pop	{r3}
 800db0a:	b002      	add	sp, #8
 800db0c:	4718      	bx	r3
 800db0e:	46c0      	nop			@ (mov r8, r8)
 800db10:	200000cc 	.word	0x200000cc
 800db14:	08024218 	.word	0x08024218
 800db18:	0802421c 	.word	0x0802421c

0800db1c <_write>:

int _write(int fd, const void *buf, size_t count) {
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	68b9      	ldr	r1, [r7, #8]
 800db2e:	4804      	ldr	r0, [pc, #16]	@ (800db40 <_write+0x24>)
 800db30:	2364      	movs	r3, #100	@ 0x64
 800db32:	f008 fdff 	bl	8016734 <HAL_UART_Transmit>
  return count;
 800db36:	687b      	ldr	r3, [r7, #4]
}
 800db38:	0018      	movs	r0, r3
 800db3a:	46bd      	mov	sp, r7
 800db3c:	b004      	add	sp, #16
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	200022d4 	.word	0x200022d4

0800db44 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	0002      	movs	r2, r0
 800db4c:	1dfb      	adds	r3, r7, #7
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	4b03      	ldr	r3, [pc, #12]	@ (800db60 <SetVerboseLevel+0x1c>)
 800db52:	1dfa      	adds	r2, r7, #7
 800db54:	7812      	ldrb	r2, [r2, #0]
 800db56:	701a      	strb	r2, [r3, #0]
 800db58:	46c0      	nop			@ (mov r8, r8)
 800db5a:	46bd      	mov	sp, r7
 800db5c:	b002      	add	sp, #8
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	200000cc 	.word	0x200000cc

0800db64 <BinaryReleaseInfo>:

//uint32_t GetCurrentHalTicks(void) {
//  return HAL_GetTick();
//}

void BinaryReleaseInfo() {
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800db6a:	4a0f      	ldr	r2, [pc, #60]	@ (800dba8 <BinaryReleaseInfo+0x44>)
 800db6c:	4b0f      	ldr	r3, [pc, #60]	@ (800dbac <BinaryReleaseInfo+0x48>)
 800db6e:	0019      	movs	r1, r3
 800db70:	2002      	movs	r0, #2
 800db72:	f7ff ff7d 	bl	800da70 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800db76:	480e      	ldr	r0, [pc, #56]	@ (800dbb0 <BinaryReleaseInfo+0x4c>)
 800db78:	4a0e      	ldr	r2, [pc, #56]	@ (800dbb4 <BinaryReleaseInfo+0x50>)
 800db7a:	490c      	ldr	r1, [pc, #48]	@ (800dbac <BinaryReleaseInfo+0x48>)
 800db7c:	4b0e      	ldr	r3, [pc, #56]	@ (800dbb8 <BinaryReleaseInfo+0x54>)
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	0003      	movs	r3, r0
 800db82:	2002      	movs	r0, #2
 800db84:	f7ff ff74 	bl	800da70 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800db88:	4b0c      	ldr	r3, [pc, #48]	@ (800dbbc <BinaryReleaseInfo+0x58>)
 800db8a:	4a0d      	ldr	r2, [pc, #52]	@ (800dbc0 <BinaryReleaseInfo+0x5c>)
 800db8c:	4907      	ldr	r1, [pc, #28]	@ (800dbac <BinaryReleaseInfo+0x48>)
 800db8e:	2002      	movs	r0, #2
 800db90:	f7ff ff6e 	bl	800da70 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800db94:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc4 <BinaryReleaseInfo+0x60>)
 800db96:	4a0c      	ldr	r2, [pc, #48]	@ (800dbc8 <BinaryReleaseInfo+0x64>)
 800db98:	4904      	ldr	r1, [pc, #16]	@ (800dbac <BinaryReleaseInfo+0x48>)
 800db9a:	2002      	movs	r0, #2
 800db9c:	f7ff ff68 	bl	800da70 <CreateLine>
}
 800dba0:	46c0      	nop			@ (mov r8, r8)
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	46c0      	nop			@ (mov r8, r8)
 800dba8:	08024224 	.word	0x08024224
 800dbac:	08024250 	.word	0x08024250
 800dbb0:	08024254 	.word	0x08024254
 800dbb4:	08024260 	.word	0x08024260
 800dbb8:	08024274 	.word	0x08024274
 800dbbc:	08024280 	.word	0x08024280
 800dbc0:	08024288 	.word	0x08024288
 800dbc4:	08024290 	.word	0x08024290
 800dbc8:	08024298 	.word	0x08024298

0800dbcc <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	68f9      	ldr	r1, [r7, #12]
 800dbde:	4803      	ldr	r0, [pc, #12]	@ (800dbec <errorHandler+0x20>)
 800dbe0:	f011 fc20 	bl	801f424 <iprintf>
//    while (true)
//    {
//    }
}
 800dbe4:	46c0      	nop			@ (mov r8, r8)
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	b004      	add	sp, #16
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	080242b0 	.word	0x080242b0

0800dbf0 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dbf0:	b590      	push	{r4, r7, lr}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6039      	str	r1, [r7, #0]
 800dbf8:	0011      	movs	r1, r2
 800dbfa:	1dfb      	adds	r3, r7, #7
 800dbfc:	1c02      	adds	r2, r0, #0
 800dbfe:	701a      	strb	r2, [r3, #0]
 800dc00:	1dbb      	adds	r3, r7, #6
 800dc02:	1c0a      	adds	r2, r1, #0
 800dc04:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800dc06:	4b0a      	ldr	r3, [pc, #40]	@ (800dc30 <ReadRegister+0x40>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00a      	beq.n	800dc24 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800dc0e:	4b08      	ldr	r3, [pc, #32]	@ (800dc30 <ReadRegister+0x40>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	1dba      	adds	r2, r7, #6
 800dc14:	7814      	ldrb	r4, [r2, #0]
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	1dfa      	adds	r2, r7, #7
 800dc1a:	7810      	ldrb	r0, [r2, #0]
 800dc1c:	0022      	movs	r2, r4
 800dc1e:	4798      	blx	r3
 800dc20:	0003      	movs	r3, r0
 800dc22:	e000      	b.n	800dc26 <ReadRegister+0x36>
	}
	return false;
 800dc24:	2300      	movs	r3, #0
}
 800dc26:	0018      	movs	r0, r3
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	b003      	add	sp, #12
 800dc2c:	bd90      	pop	{r4, r7, pc}
 800dc2e:	46c0      	nop			@ (mov r8, r8)
 800dc30:	200024dc 	.word	0x200024dc

0800dc34 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dc34:	b590      	push	{r4, r7, lr}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6039      	str	r1, [r7, #0]
 800dc3c:	0011      	movs	r1, r2
 800dc3e:	1dfb      	adds	r3, r7, #7
 800dc40:	1c02      	adds	r2, r0, #0
 800dc42:	701a      	strb	r2, [r3, #0]
 800dc44:	1dbb      	adds	r3, r7, #6
 800dc46:	1c0a      	adds	r2, r1, #0
 800dc48:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800dc4a:	4b0a      	ldr	r3, [pc, #40]	@ (800dc74 <WriteRegister+0x40>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00a      	beq.n	800dc68 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800dc52:	4b08      	ldr	r3, [pc, #32]	@ (800dc74 <WriteRegister+0x40>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	1dba      	adds	r2, r7, #6
 800dc58:	7814      	ldrb	r4, [r2, #0]
 800dc5a:	6839      	ldr	r1, [r7, #0]
 800dc5c:	1dfa      	adds	r2, r7, #7
 800dc5e:	7810      	ldrb	r0, [r2, #0]
 800dc60:	0022      	movs	r2, r4
 800dc62:	4798      	blx	r3
 800dc64:	0003      	movs	r3, r0
 800dc66:	e000      	b.n	800dc6a <WriteRegister+0x36>
  }
  return false;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	b003      	add	sp, #12
 800dc70:	bd90      	pop	{r4, r7, pc}
 800dc72:	46c0      	nop			@ (mov r8, r8)
 800dc74:	200024e0 	.word	0x200024e0

0800dc78 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	000a      	movs	r2, r1
 800dc82:	1cfb      	adds	r3, r7, #3
 800dc84:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800dc86:	230f      	movs	r3, #15
 800dc88:	18fb      	adds	r3, r7, r3
 800dc8a:	22ff      	movs	r2, #255	@ 0xff
 800dc8c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800dc8e:	230e      	movs	r3, #14
 800dc90:	18fb      	adds	r3, r7, r3
 800dc92:	2200      	movs	r2, #0
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	e037      	b.n	800dd08 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800dc98:	230e      	movs	r3, #14
 800dc9a:	18fb      	adds	r3, r7, r3
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	18d3      	adds	r3, r2, r3
 800dca2:	7819      	ldrb	r1, [r3, #0]
 800dca4:	220f      	movs	r2, #15
 800dca6:	18bb      	adds	r3, r7, r2
 800dca8:	18ba      	adds	r2, r7, r2
 800dcaa:	7812      	ldrb	r2, [r2, #0]
 800dcac:	404a      	eors	r2, r1
 800dcae:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800dcb0:	230d      	movs	r3, #13
 800dcb2:	18fb      	adds	r3, r7, r3
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	701a      	strb	r2, [r3, #0]
 800dcb8:	e01b      	b.n	800dcf2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800dcba:	210f      	movs	r1, #15
 800dcbc:	187b      	adds	r3, r7, r1
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	b25b      	sxtb	r3, r3
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	da09      	bge.n	800dcda <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800dcc6:	187b      	adds	r3, r7, r1
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	005b      	lsls	r3, r3, #1
 800dccc:	b25b      	sxtb	r3, r3
 800dcce:	2231      	movs	r2, #49	@ 0x31
 800dcd0:	4053      	eors	r3, r2
 800dcd2:	b25a      	sxtb	r2, r3
 800dcd4:	187b      	adds	r3, r7, r1
 800dcd6:	701a      	strb	r2, [r3, #0]
 800dcd8:	e005      	b.n	800dce6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800dcda:	230f      	movs	r3, #15
 800dcdc:	18fa      	adds	r2, r7, r3
 800dcde:	18fb      	adds	r3, r7, r3
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	18db      	adds	r3, r3, r3
 800dce4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800dce6:	210d      	movs	r1, #13
 800dce8:	187b      	adds	r3, r7, r1
 800dcea:	781a      	ldrb	r2, [r3, #0]
 800dcec:	187b      	adds	r3, r7, r1
 800dcee:	3201      	adds	r2, #1
 800dcf0:	701a      	strb	r2, [r3, #0]
 800dcf2:	230d      	movs	r3, #13
 800dcf4:	18fb      	adds	r3, r7, r3
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b07      	cmp	r3, #7
 800dcfa:	d9de      	bls.n	800dcba <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800dcfc:	210e      	movs	r1, #14
 800dcfe:	187b      	adds	r3, r7, r1
 800dd00:	781a      	ldrb	r2, [r3, #0]
 800dd02:	187b      	adds	r3, r7, r1
 800dd04:	3201      	adds	r2, #1
 800dd06:	701a      	strb	r2, [r3, #0]
 800dd08:	230e      	movs	r3, #14
 800dd0a:	18fa      	adds	r2, r7, r3
 800dd0c:	1cfb      	adds	r3, r7, #3
 800dd0e:	7812      	ldrb	r2, [r2, #0]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d3c0      	bcc.n	800dc98 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800dd16:	230f      	movs	r3, #15
 800dd18:	18fb      	adds	r3, r7, r3
 800dd1a:	781b      	ldrb	r3, [r3, #0]
}
 800dd1c:	0018      	movs	r0, r3
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	b004      	add	sp, #16
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800dd2e:	4b0a      	ldr	r3, [pc, #40]	@ (800dd58 <HIDS_Init+0x34>)
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800dd34:	4b09      	ldr	r3, [pc, #36]	@ (800dd5c <HIDS_Init+0x38>)
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800dd3a:	4b09      	ldr	r3, [pc, #36]	@ (800dd60 <HIDS_Init+0x3c>)
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	0018      	movs	r0, r3
 800dd40:	f000 f840 	bl	800ddc4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800dd44:	4b07      	ldr	r3, [pc, #28]	@ (800dd64 <HIDS_Init+0x40>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	0018      	movs	r0, r3
 800dd4a:	f000 f82b 	bl	800dda4 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800dd4e:	46c0      	nop			@ (mov r8, r8)
 800dd50:	46bd      	mov	sp, r7
 800dd52:	b002      	add	sp, #8
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	46c0      	nop			@ (mov r8, r8)
 800dd58:	200024dc 	.word	0x200024dc
 800dd5c:	200024e0 	.word	0x200024e0
 800dd60:	200000ce 	.word	0x200000ce
 800dd64:	200000cd 	.word	0x200000cd

0800dd68 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800dd6c:	f000 facc 	bl	800e308 <HAL_GetTick>
 800dd70:	0002      	movs	r2, r0
 800dd72:	4b08      	ldr	r3, [pc, #32]	@ (800dd94 <HIDS_StartMeasurement+0x2c>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	18d2      	adds	r2, r2, r3
 800dd78:	4b07      	ldr	r3, [pc, #28]	@ (800dd98 <HIDS_StartMeasurement+0x30>)
 800dd7a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800dd7c:	4b07      	ldr	r3, [pc, #28]	@ (800dd9c <HIDS_StartMeasurement+0x34>)
 800dd7e:	2201      	movs	r2, #1
 800dd80:	0019      	movs	r1, r3
 800dd82:	2044      	movs	r0, #68	@ 0x44
 800dd84:	f7ff ff56 	bl	800dc34 <WriteRegister>
  MeasurementDone = false;
 800dd88:	4b05      	ldr	r3, [pc, #20]	@ (800dda0 <HIDS_StartMeasurement+0x38>)
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	701a      	strb	r2, [r3, #0]
}
 800dd8e:	46c0      	nop			@ (mov r8, r8)
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	200000d4 	.word	0x200000d4
 800dd98:	200000d0 	.word	0x200000d0
 800dd9c:	200000ce 	.word	0x200000ce
 800dda0:	200024f2 	.word	0x200024f2

0800dda4 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	0002      	movs	r2, r0
 800ddac:	1dfb      	adds	r3, r7, #7
 800ddae:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800ddb0:	4b03      	ldr	r3, [pc, #12]	@ (800ddc0 <HIDS_SetHeaterMode+0x1c>)
 800ddb2:	1dfa      	adds	r2, r7, #7
 800ddb4:	7812      	ldrb	r2, [r2, #0]
 800ddb6:	701a      	strb	r2, [r3, #0]
}
 800ddb8:	46c0      	nop			@ (mov r8, r8)
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	b002      	add	sp, #8
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	200000cd 	.word	0x200000cd

0800ddc4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	0002      	movs	r2, r0
 800ddcc:	1dfb      	adds	r3, r7, #7
 800ddce:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800ddd0:	4b03      	ldr	r3, [pc, #12]	@ (800dde0 <HIDS_SetMeasurementMode+0x1c>)
 800ddd2:	1dfa      	adds	r2, r7, #7
 800ddd4:	7812      	ldrb	r2, [r2, #0]
 800ddd6:	701a      	strb	r2, [r3, #0]
}
 800ddd8:	46c0      	nop			@ (mov r8, r8)
 800ddda:	46bd      	mov	sp, r7
 800dddc:	b002      	add	sp, #8
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	200000ce 	.word	0x200000ce

0800dde4 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800ddec:	f000 fa8c 	bl	800e308 <HAL_GetTick>
 800ddf0:	0002      	movs	r2, r0
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	18d2      	adds	r2, r2, r3
 800ddf6:	4b03      	ldr	r3, [pc, #12]	@ (800de04 <setHIDSTimeStamp+0x20>)
 800ddf8:	601a      	str	r2, [r3, #0]
}
 800ddfa:	46c0      	nop			@ (mov r8, r8)
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	b002      	add	sp, #8
 800de00:	bd80      	pop	{r7, pc}
 800de02:	46c0      	nop			@ (mov r8, r8)
 800de04:	200024f4 	.word	0x200024f4

0800de08 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	781a      	ldrb	r2, [r3, #0]
 800de14:	210c      	movs	r1, #12
 800de16:	187b      	adds	r3, r7, r1
 800de18:	701a      	strb	r2, [r3, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	785a      	ldrb	r2, [r3, #1]
 800de1e:	187b      	adds	r3, r7, r1
 800de20:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800de22:	240f      	movs	r4, #15
 800de24:	193b      	adds	r3, r7, r4
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	7892      	ldrb	r2, [r2, #2]
 800de2a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800de2c:	187b      	adds	r3, r7, r1
 800de2e:	2102      	movs	r1, #2
 800de30:	0018      	movs	r0, r3
 800de32:	f7ff ff21 	bl	800dc78 <CalculateCRC>
 800de36:	0003      	movs	r3, r0
 800de38:	001a      	movs	r2, r3
 800de3a:	193b      	adds	r3, r7, r4
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	4293      	cmp	r3, r2
 800de40:	d007      	beq.n	800de52 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800de42:	4a1a      	ldr	r2, [pc, #104]	@ (800deac <CheckCRC+0xa4>)
 800de44:	4b1a      	ldr	r3, [pc, #104]	@ (800deb0 <CheckCRC+0xa8>)
 800de46:	0019      	movs	r1, r3
 800de48:	2001      	movs	r0, #1
 800de4a:	f7ff fe11 	bl	800da70 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800de4e:	2300      	movs	r3, #0
 800de50:	e027      	b.n	800dea2 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	78da      	ldrb	r2, [r3, #3]
 800de56:	2108      	movs	r1, #8
 800de58:	187b      	adds	r3, r7, r1
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	791a      	ldrb	r2, [r3, #4]
 800de60:	187b      	adds	r3, r7, r1
 800de62:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800de64:	240e      	movs	r4, #14
 800de66:	193b      	adds	r3, r7, r4
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	7952      	ldrb	r2, [r2, #5]
 800de6c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800de6e:	187b      	adds	r3, r7, r1
 800de70:	2102      	movs	r1, #2
 800de72:	0018      	movs	r0, r3
 800de74:	f7ff ff00 	bl	800dc78 <CalculateCRC>
 800de78:	0003      	movs	r3, r0
 800de7a:	001a      	movs	r2, r3
 800de7c:	193b      	adds	r3, r7, r4
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	4293      	cmp	r3, r2
 800de82:	d00d      	beq.n	800dea0 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800de84:	4a0b      	ldr	r2, [pc, #44]	@ (800deb4 <CheckCRC+0xac>)
 800de86:	4b0a      	ldr	r3, [pc, #40]	@ (800deb0 <CheckCRC+0xa8>)
 800de88:	0019      	movs	r1, r3
 800de8a:	2001      	movs	r0, #1
 800de8c:	f7ff fdf0 	bl	800da70 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800de90:	4a09      	ldr	r2, [pc, #36]	@ (800deb8 <CheckCRC+0xb0>)
 800de92:	4b0a      	ldr	r3, [pc, #40]	@ (800debc <CheckCRC+0xb4>)
 800de94:	217c      	movs	r1, #124	@ 0x7c
 800de96:	0018      	movs	r0, r3
 800de98:	f7ff fe98 	bl	800dbcc <errorHandler>
		return false;
 800de9c:	2300      	movs	r3, #0
 800de9e:	e000      	b.n	800dea2 <CheckCRC+0x9a>
	}
	return true;
 800dea0:	2301      	movs	r3, #1
}
 800dea2:	0018      	movs	r0, r3
 800dea4:	46bd      	mov	sp, r7
 800dea6:	b005      	add	sp, #20
 800dea8:	bd90      	pop	{r4, r7, pc}
 800deaa:	46c0      	nop			@ (mov r8, r8)
 800deac:	080242fc 	.word	0x080242fc
 800deb0:	08024324 	.word	0x08024324
 800deb4:	08024328 	.word	0x08024328
 800deb8:	08024354 	.word	0x08024354
 800debc:	080248e8 	.word	0x080248e8

0800dec0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800dec6:	1dbb      	adds	r3, r7, #6
 800dec8:	2289      	movs	r2, #137	@ 0x89
 800deca:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800decc:	1dbb      	adds	r3, r7, #6
 800dece:	2201      	movs	r2, #1
 800ded0:	0019      	movs	r1, r3
 800ded2:	2044      	movs	r0, #68	@ 0x44
 800ded4:	f7ff feae 	bl	800dc34 <WriteRegister>
	HAL_Delay(30);
 800ded8:	201e      	movs	r0, #30
 800deda:	f000 fa1f 	bl	800e31c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800dede:	4b14      	ldr	r3, [pc, #80]	@ (800df30 <HIDS_DeviceConnected+0x70>)
 800dee0:	2206      	movs	r2, #6
 800dee2:	0019      	movs	r1, r3
 800dee4:	2044      	movs	r0, #68	@ 0x44
 800dee6:	f7ff fe83 	bl	800dbf0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800deea:	1dfb      	adds	r3, r7, #7
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e011      	b.n	800df16 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800def2:	1dfb      	adds	r3, r7, #7
 800def4:	7818      	ldrb	r0, [r3, #0]
 800def6:	1dfb      	adds	r3, r7, #7
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	4a0d      	ldr	r2, [pc, #52]	@ (800df30 <HIDS_DeviceConnected+0x70>)
 800defc:	5cd3      	ldrb	r3, [r2, r3]
 800defe:	4a0d      	ldr	r2, [pc, #52]	@ (800df34 <HIDS_DeviceConnected+0x74>)
 800df00:	490d      	ldr	r1, [pc, #52]	@ (800df38 <HIDS_DeviceConnected+0x78>)
 800df02:	9300      	str	r3, [sp, #0]
 800df04:	0003      	movs	r3, r0
 800df06:	2002      	movs	r0, #2
 800df08:	f7ff fdb2 	bl	800da70 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800df0c:	1dfb      	adds	r3, r7, #7
 800df0e:	781a      	ldrb	r2, [r3, #0]
 800df10:	1dfb      	adds	r3, r7, #7
 800df12:	3201      	adds	r2, #1
 800df14:	701a      	strb	r2, [r3, #0]
 800df16:	1dfb      	adds	r3, r7, #7
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	2b05      	cmp	r3, #5
 800df1c:	d9e9      	bls.n	800def2 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800df1e:	4b04      	ldr	r3, [pc, #16]	@ (800df30 <HIDS_DeviceConnected+0x70>)
 800df20:	0018      	movs	r0, r3
 800df22:	f7ff ff71 	bl	800de08 <CheckCRC>
 800df26:	0003      	movs	r3, r0
}
 800df28:	0018      	movs	r0, r3
 800df2a:	46bd      	mov	sp, r7
 800df2c:	b002      	add	sp, #8
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	200024e4 	.word	0x200024e4
 800df34:	0802436c 	.word	0x0802436c
 800df38:	080242f8 	.word	0x080242f8

0800df3c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800df40:	4b04      	ldr	r3, [pc, #16]	@ (800df54 <HIDS_MeasurementReady+0x18>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	0018      	movs	r0, r3
 800df46:	f7ff fd3d 	bl	800d9c4 <TimestampIsReached>
 800df4a:	0003      	movs	r3, r0
}
 800df4c:	0018      	movs	r0, r3
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	46c0      	nop			@ (mov r8, r8)
 800df54:	200000d0 	.word	0x200000d0

0800df58 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800df62:	4b4c      	ldr	r3, [pc, #304]	@ (800e094 <HIDS_GetMeasurementValues+0x13c>)
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d001      	beq.n	800df6e <HIDS_GetMeasurementValues+0x16>
 800df6a:	2301      	movs	r3, #1
 800df6c:	e08d      	b.n	800e08a <HIDS_GetMeasurementValues+0x132>
  if(!HIDS_MeasurementReady()) return false;
 800df6e:	f7ff ffe5 	bl	800df3c <HIDS_MeasurementReady>
 800df72:	0003      	movs	r3, r0
 800df74:	001a      	movs	r2, r3
 800df76:	2301      	movs	r3, #1
 800df78:	4053      	eors	r3, r2
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <HIDS_GetMeasurementValues+0x2c>
 800df80:	2300      	movs	r3, #0
 800df82:	e082      	b.n	800e08a <HIDS_GetMeasurementValues+0x132>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800df84:	4b44      	ldr	r3, [pc, #272]	@ (800e098 <HIDS_GetMeasurementValues+0x140>)
 800df86:	2206      	movs	r2, #6
 800df88:	0019      	movs	r1, r3
 800df8a:	2044      	movs	r0, #68	@ 0x44
 800df8c:	f7ff fe30 	bl	800dbf0 <ReadRegister>
 800df90:	0003      	movs	r3, r0
 800df92:	001a      	movs	r2, r3
 800df94:	2301      	movs	r3, #1
 800df96:	4053      	eors	r3, r2
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d005      	beq.n	800dfaa <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800df9e:	4a3f      	ldr	r2, [pc, #252]	@ (800e09c <HIDS_GetMeasurementValues+0x144>)
 800dfa0:	4b3f      	ldr	r3, [pc, #252]	@ (800e0a0 <HIDS_GetMeasurementValues+0x148>)
 800dfa2:	0019      	movs	r1, r3
 800dfa4:	2001      	movs	r0, #1
 800dfa6:	f7ff fd63 	bl	800da70 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800dfaa:	4b3b      	ldr	r3, [pc, #236]	@ (800e098 <HIDS_GetMeasurementValues+0x140>)
 800dfac:	0018      	movs	r0, r3
 800dfae:	f7ff ff2b 	bl	800de08 <CheckCRC>
 800dfb2:	0003      	movs	r3, r0
 800dfb4:	001a      	movs	r2, r3
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	4053      	eors	r3, r2
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d011      	beq.n	800dfe4 <HIDS_GetMeasurementValues+0x8c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800dfc0:	2317      	movs	r3, #23
 800dfc2:	18fb      	adds	r3, r7, r3
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	701a      	strb	r2, [r3, #0]
 800dfc8:	e005      	b.n	800dfd6 <HIDS_GetMeasurementValues+0x7e>
 800dfca:	2117      	movs	r1, #23
 800dfcc:	187b      	adds	r3, r7, r1
 800dfce:	781a      	ldrb	r2, [r3, #0]
 800dfd0:	187b      	adds	r3, r7, r1
 800dfd2:	3201      	adds	r2, #1
 800dfd4:	701a      	strb	r2, [r3, #0]
 800dfd6:	2317      	movs	r3, #23
 800dfd8:	18fb      	adds	r3, r7, r3
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	2b05      	cmp	r3, #5
 800dfde:	d9f4      	bls.n	800dfca <HIDS_GetMeasurementValues+0x72>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	e052      	b.n	800e08a <HIDS_GetMeasurementValues+0x132>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800dfe4:	4b2c      	ldr	r3, [pc, #176]	@ (800e098 <HIDS_GetMeasurementValues+0x140>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	021b      	lsls	r3, r3, #8
 800dfea:	4a2b      	ldr	r2, [pc, #172]	@ (800e098 <HIDS_GetMeasurementValues+0x140>)
 800dfec:	7852      	ldrb	r2, [r2, #1]
 800dfee:	4313      	orrs	r3, r2
 800dff0:	22af      	movs	r2, #175	@ 0xaf
 800dff2:	4353      	muls	r3, r2
 800dff4:	0018      	movs	r0, r3
 800dff6:	f7f5 f9e3 	bl	80033c0 <__aeabi_i2d>
 800dffa:	2200      	movs	r2, #0
 800dffc:	4b29      	ldr	r3, [pc, #164]	@ (800e0a4 <HIDS_GetMeasurementValues+0x14c>)
 800dffe:	f7f3 fed9 	bl	8001db4 <__aeabi_ddiv>
 800e002:	0002      	movs	r2, r0
 800e004:	000b      	movs	r3, r1
 800e006:	0010      	movs	r0, r2
 800e008:	0019      	movs	r1, r3
 800e00a:	f7f5 fa73 	bl	80034f4 <__aeabi_d2f>
 800e00e:	1c03      	adds	r3, r0, #0
 800e010:	613b      	str	r3, [r7, #16]
	currentTemperature -= 45;
 800e012:	4925      	ldr	r1, [pc, #148]	@ (800e0a8 <HIDS_GetMeasurementValues+0x150>)
 800e014:	6938      	ldr	r0, [r7, #16]
 800e016:	f7f3 f901 	bl	800121c <__aeabi_fsub>
 800e01a:	1c03      	adds	r3, r0, #0
 800e01c:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e01e:	4b1e      	ldr	r3, [pc, #120]	@ (800e098 <HIDS_GetMeasurementValues+0x140>)
 800e020:	78db      	ldrb	r3, [r3, #3]
 800e022:	021b      	lsls	r3, r3, #8
 800e024:	4a1c      	ldr	r2, [pc, #112]	@ (800e098 <HIDS_GetMeasurementValues+0x140>)
 800e026:	7912      	ldrb	r2, [r2, #4]
 800e028:	431a      	orrs	r2, r3
 800e02a:	0013      	movs	r3, r2
 800e02c:	015b      	lsls	r3, r3, #5
 800e02e:	1a9b      	subs	r3, r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	189b      	adds	r3, r3, r2
 800e034:	0018      	movs	r0, r3
 800e036:	f7f5 f9c3 	bl	80033c0 <__aeabi_i2d>
 800e03a:	2200      	movs	r2, #0
 800e03c:	4b19      	ldr	r3, [pc, #100]	@ (800e0a4 <HIDS_GetMeasurementValues+0x14c>)
 800e03e:	f7f3 feb9 	bl	8001db4 <__aeabi_ddiv>
 800e042:	0002      	movs	r2, r0
 800e044:	000b      	movs	r3, r1
 800e046:	0010      	movs	r0, r2
 800e048:	0019      	movs	r1, r3
 800e04a:	f7f5 fa53 	bl	80034f4 <__aeabi_d2f>
 800e04e:	1c03      	adds	r3, r0, #0
 800e050:	60fb      	str	r3, [r7, #12]
	currentHumidity -= 6;
 800e052:	4916      	ldr	r1, [pc, #88]	@ (800e0ac <HIDS_GetMeasurementValues+0x154>)
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f7f3 f8e1 	bl	800121c <__aeabi_fsub>
 800e05a:	1c03      	adds	r3, r0, #0
 800e05c:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	0011      	movs	r1, r2
 800e070:	0018      	movs	r0, r3
 800e072:	f7fd fbd3 	bl	800b81c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	1c11      	adds	r1, r2, #0
 800e07c:	1c18      	adds	r0, r3, #0
 800e07e:	f7f5 fc29 	bl	80038d4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800e082:	4b04      	ldr	r3, [pc, #16]	@ (800e094 <HIDS_GetMeasurementValues+0x13c>)
 800e084:	2201      	movs	r2, #1
 800e086:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800e088:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800e08a:	0018      	movs	r0, r3
 800e08c:	46bd      	mov	sp, r7
 800e08e:	b006      	add	sp, #24
 800e090:	bd80      	pop	{r7, pc}
 800e092:	46c0      	nop			@ (mov r8, r8)
 800e094:	200024f2 	.word	0x200024f2
 800e098:	200024ec 	.word	0x200024ec
 800e09c:	0802438c 	.word	0x0802438c
 800e0a0:	08024324 	.word	0x08024324
 800e0a4:	40efffe0 	.word	0x40efffe0
 800e0a8:	42340000 	.word	0x42340000
 800e0ac:	40c00000 	.word	0x40c00000

0800e0b0 <ResetHIDSresults>:
void ResetHIDSresults() {
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
  humid = 0.0;
 800e0b4:	4b04      	ldr	r3, [pc, #16]	@ (800e0c8 <ResetHIDSresults+0x18>)
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800e0ba:	4b04      	ldr	r3, [pc, #16]	@ (800e0cc <ResetHIDSresults+0x1c>)
 800e0bc:	2200      	movs	r2, #0
 800e0be:	601a      	str	r2, [r3, #0]
}
 800e0c0:	46c0      	nop			@ (mov r8, r8)
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	46c0      	nop			@ (mov r8, r8)
 800e0c8:	200024d4 	.word	0x200024d4
 800e0cc:	200024d8 	.word	0x200024d8

0800e0d0 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800e0d0:	b5b0      	push	{r4, r5, r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800e0d6:	4b3b      	ldr	r3, [pc, #236]	@ (800e1c4 <HIDS_Upkeep+0xf4>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b06      	cmp	r3, #6
 800e0dc:	d865      	bhi.n	800e1aa <HIDS_Upkeep+0xda>
 800e0de:	009a      	lsls	r2, r3, #2
 800e0e0:	4b39      	ldr	r3, [pc, #228]	@ (800e1c8 <HIDS_Upkeep+0xf8>)
 800e0e2:	18d3      	adds	r3, r2, r3
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800e0e8:	4a38      	ldr	r2, [pc, #224]	@ (800e1cc <HIDS_Upkeep+0xfc>)
 800e0ea:	4b39      	ldr	r3, [pc, #228]	@ (800e1d0 <HIDS_Upkeep+0x100>)
 800e0ec:	0019      	movs	r1, r3
 800e0ee:	2003      	movs	r0, #3
 800e0f0:	f7ff fcbe 	bl	800da70 <CreateLine>
      break;
 800e0f4:	e060      	b.n	800e1b8 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
//      Debug("entered HIDS_STATE_INIT");
      ResetHIDSresults();
 800e0f6:	f7ff ffdb 	bl	800e0b0 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800e0fa:	4b32      	ldr	r3, [pc, #200]	@ (800e1c4 <HIDS_Upkeep+0xf4>)
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	701a      	strb	r2, [r3, #0]
      break;
 800e100:	e05a      	b.n	800e1b8 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
//      Debug("entered HIDS_STATE_START_MEASUREMENTS");
      SetMeasurementIndicator();
 800e102:	f7fe fd5f 	bl	800cbc4 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800e106:	f7ff fe2f 	bl	800dd68 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800e10a:	4b2e      	ldr	r3, [pc, #184]	@ (800e1c4 <HIDS_Upkeep+0xf4>)
 800e10c:	2202      	movs	r2, #2
 800e10e:	701a      	strb	r2, [r3, #0]
      break;
 800e110:	e052      	b.n	800e1b8 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
//      Debug("entered HIDS_STATE_WAIT_FOR_COMPLETION");
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800e112:	4a30      	ldr	r2, [pc, #192]	@ (800e1d4 <HIDS_Upkeep+0x104>)
 800e114:	4b30      	ldr	r3, [pc, #192]	@ (800e1d8 <HIDS_Upkeep+0x108>)
 800e116:	0011      	movs	r1, r2
 800e118:	0018      	movs	r0, r3
 800e11a:	f7ff ff1d 	bl	800df58 <HIDS_GetMeasurementValues>
 800e11e:	1e03      	subs	r3, r0, #0
 800e120:	d047      	beq.n	800e1b2 <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800e122:	4b28      	ldr	r3, [pc, #160]	@ (800e1c4 <HIDS_Upkeep+0xf4>)
 800e124:	2203      	movs	r2, #3
 800e126:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e128:	e043      	b.n	800e1b2 <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
//      Debug("entered HIDS_STATE_PROCESS_RESULTS");
//      Debug("Processing results.");
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800e12a:	4b2b      	ldr	r3, [pc, #172]	@ (800e1d8 <HIDS_Upkeep+0x108>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	1c18      	adds	r0, r3, #0
 800e130:	f7f5 f998 	bl	8003464 <__aeabi_f2d>
 800e134:	0004      	movs	r4, r0
 800e136:	000d      	movs	r5, r1
 800e138:	4b26      	ldr	r3, [pc, #152]	@ (800e1d4 <HIDS_Upkeep+0x104>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	1c18      	adds	r0, r3, #0
 800e13e:	f7f5 f991 	bl	8003464 <__aeabi_f2d>
 800e142:	0002      	movs	r2, r0
 800e144:	000b      	movs	r3, r1
 800e146:	4825      	ldr	r0, [pc, #148]	@ (800e1dc <HIDS_Upkeep+0x10c>)
 800e148:	4921      	ldr	r1, [pc, #132]	@ (800e1d0 <HIDS_Upkeep+0x100>)
 800e14a:	9202      	str	r2, [sp, #8]
 800e14c:	9303      	str	r3, [sp, #12]
 800e14e:	9400      	str	r4, [sp, #0]
 800e150:	9501      	str	r5, [sp, #4]
 800e152:	0002      	movs	r2, r0
 800e154:	2003      	movs	r0, #3
 800e156:	f7ff fc8b 	bl	800da70 <CreateLine>
      setHIDS(temp, humid);
 800e15a:	4b1e      	ldr	r3, [pc, #120]	@ (800e1d4 <HIDS_Upkeep+0x104>)
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	4b1e      	ldr	r3, [pc, #120]	@ (800e1d8 <HIDS_Upkeep+0x108>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	1c19      	adds	r1, r3, #0
 800e164:	1c10      	adds	r0, r2, #0
 800e166:	f7f5 fbc9 	bl	80038fc <setHIDS>
      ResetMeasurementIndicator();
 800e16a:	f7fe fd43 	bl	800cbf4 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800e16e:	f000 f8cb 	bl	800e308 <HAL_GetTick>
 800e172:	0004      	movs	r4, r0
 800e174:	f7fe fe04 	bl	800cd80 <powerCheck>
 800e178:	0003      	movs	r3, r0
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d101      	bne.n	800e182 <HIDS_Upkeep+0xb2>
 800e17e:	4b18      	ldr	r3, [pc, #96]	@ (800e1e0 <HIDS_Upkeep+0x110>)
 800e180:	e001      	b.n	800e186 <HIDS_Upkeep+0xb6>
 800e182:	23fa      	movs	r3, #250	@ 0xfa
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	191a      	adds	r2, r3, r4
 800e188:	4b16      	ldr	r3, [pc, #88]	@ (800e1e4 <HIDS_Upkeep+0x114>)
 800e18a:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800e18c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c4 <HIDS_Upkeep+0xf4>)
 800e18e:	2206      	movs	r2, #6
 800e190:	701a      	strb	r2, [r3, #0]
      break;
 800e192:	e011      	b.n	800e1b8 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
//      Debug("entered HIDS_STATE_WAIT");
      if(TimestampIsReached(HIDSTimeStamp)) {
 800e194:	4b13      	ldr	r3, [pc, #76]	@ (800e1e4 <HIDS_Upkeep+0x114>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	0018      	movs	r0, r3
 800e19a:	f7ff fc13 	bl	800d9c4 <TimestampIsReached>
 800e19e:	1e03      	subs	r3, r0, #0
 800e1a0:	d009      	beq.n	800e1b6 <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800e1a2:	4b08      	ldr	r3, [pc, #32]	@ (800e1c4 <HIDS_Upkeep+0xf4>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e1a8:	e005      	b.n	800e1b6 <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800e1aa:	4b06      	ldr	r3, [pc, #24]	@ (800e1c4 <HIDS_Upkeep+0xf4>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	701a      	strb	r2, [r3, #0]
      break;
 800e1b0:	e002      	b.n	800e1b8 <HIDS_Upkeep+0xe8>
      break;
 800e1b2:	46c0      	nop			@ (mov r8, r8)
 800e1b4:	e000      	b.n	800e1b8 <HIDS_Upkeep+0xe8>
      break;
 800e1b6:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800e1b8:	4b02      	ldr	r3, [pc, #8]	@ (800e1c4 <HIDS_Upkeep+0xf4>)
 800e1ba:	781b      	ldrb	r3, [r3, #0]
}
 800e1bc:	0018      	movs	r0, r3
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e1c2:	46c0      	nop			@ (mov r8, r8)
 800e1c4:	200024f8 	.word	0x200024f8
 800e1c8:	080248cc 	.word	0x080248cc
 800e1cc:	080243c0 	.word	0x080243c0
 800e1d0:	080243f4 	.word	0x080243f4
 800e1d4:	200024d8 	.word	0x200024d8
 800e1d8:	200024d4 	.word	0x200024d4
 800e1dc:	080243f8 	.word	0x080243f8
 800e1e0:	00002710 	.word	0x00002710
 800e1e4:	200024f4 	.word	0x200024f4

0800e1e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800e1e8:	480d      	ldr	r0, [pc, #52]	@ (800e220 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800e1ea:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e1ec:	f7ff f840 	bl	800d270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e1f0:	480c      	ldr	r0, [pc, #48]	@ (800e224 <LoopForever+0x6>)
  ldr r1, =_edata
 800e1f2:	490d      	ldr	r1, [pc, #52]	@ (800e228 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e1f4:	4a0d      	ldr	r2, [pc, #52]	@ (800e22c <LoopForever+0xe>)
  movs r3, #0
 800e1f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e1f8:	e002      	b.n	800e200 <LoopCopyDataInit>

0800e1fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e1fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e1fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e1fe:	3304      	adds	r3, #4

0800e200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e204:	d3f9      	bcc.n	800e1fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e206:	4a0a      	ldr	r2, [pc, #40]	@ (800e230 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e208:	4c0a      	ldr	r4, [pc, #40]	@ (800e234 <LoopForever+0x16>)
  movs r3, #0
 800e20a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e20c:	e001      	b.n	800e212 <LoopFillZerobss>

0800e20e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e20e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e210:	3204      	adds	r2, #4

0800e212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e214:	d3fb      	bcc.n	800e20e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e216:	f011 fb63 	bl	801f8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e21a:	f7f9 fe73 	bl	8007f04 <main>

0800e21e <LoopForever>:

LoopForever:
    b LoopForever
 800e21e:	e7fe      	b.n	800e21e <LoopForever>
   ldr   r0, =_estack
 800e220:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800e224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e228:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800e22c:	08025268 	.word	0x08025268
  ldr r2, =_sbss
 800e230:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800e234:	20003900 	.word	0x20003900

0800e238 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e238:	e7fe      	b.n	800e238 <ADC1_COMP_IRQHandler>
	...

0800e23c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e242:	1dfb      	adds	r3, r7, #7
 800e244:	2200      	movs	r2, #0
 800e246:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800e248:	4b0b      	ldr	r3, [pc, #44]	@ (800e278 <HAL_Init+0x3c>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	4b0a      	ldr	r3, [pc, #40]	@ (800e278 <HAL_Init+0x3c>)
 800e24e:	2140      	movs	r1, #64	@ 0x40
 800e250:	430a      	orrs	r2, r1
 800e252:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e254:	2003      	movs	r0, #3
 800e256:	f000 f811 	bl	800e27c <HAL_InitTick>
 800e25a:	1e03      	subs	r3, r0, #0
 800e25c:	d003      	beq.n	800e266 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800e25e:	1dfb      	adds	r3, r7, #7
 800e260:	2201      	movs	r2, #1
 800e262:	701a      	strb	r2, [r3, #0]
 800e264:	e001      	b.n	800e26a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e266:	f7fe feb7 	bl	800cfd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e26a:	1dfb      	adds	r3, r7, #7
 800e26c:	781b      	ldrb	r3, [r3, #0]
}
 800e26e:	0018      	movs	r0, r3
 800e270:	46bd      	mov	sp, r7
 800e272:	b002      	add	sp, #8
 800e274:	bd80      	pop	{r7, pc}
 800e276:	46c0      	nop			@ (mov r8, r8)
 800e278:	40022000 	.word	0x40022000

0800e27c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e27c:	b590      	push	{r4, r7, lr}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e284:	4b14      	ldr	r3, [pc, #80]	@ (800e2d8 <HAL_InitTick+0x5c>)
 800e286:	681c      	ldr	r4, [r3, #0]
 800e288:	4b14      	ldr	r3, [pc, #80]	@ (800e2dc <HAL_InitTick+0x60>)
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	0019      	movs	r1, r3
 800e28e:	23fa      	movs	r3, #250	@ 0xfa
 800e290:	0098      	lsls	r0, r3, #2
 800e292:	f7f1 ff87 	bl	80001a4 <__udivsi3>
 800e296:	0003      	movs	r3, r0
 800e298:	0019      	movs	r1, r3
 800e29a:	0020      	movs	r0, r4
 800e29c:	f7f1 ff82 	bl	80001a4 <__udivsi3>
 800e2a0:	0003      	movs	r3, r0
 800e2a2:	0018      	movs	r0, r3
 800e2a4:	f000 fce7 	bl	800ec76 <HAL_SYSTICK_Config>
 800e2a8:	1e03      	subs	r3, r0, #0
 800e2aa:	d001      	beq.n	800e2b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e00f      	b.n	800e2d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d80b      	bhi.n	800e2ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e2b6:	6879      	ldr	r1, [r7, #4]
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	425b      	negs	r3, r3
 800e2bc:	2200      	movs	r2, #0
 800e2be:	0018      	movs	r0, r3
 800e2c0:	f000 fcb4 	bl	800ec2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e2c4:	4b06      	ldr	r3, [pc, #24]	@ (800e2e0 <HAL_InitTick+0x64>)
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	e000      	b.n	800e2d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800e2ce:	2301      	movs	r3, #1
}
 800e2d0:	0018      	movs	r0, r3
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	b003      	add	sp, #12
 800e2d6:	bd90      	pop	{r4, r7, pc}
 800e2d8:	200000c8 	.word	0x200000c8
 800e2dc:	200000dc 	.word	0x200000dc
 800e2e0:	200000d8 	.word	0x200000d8

0800e2e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e2e8:	4b05      	ldr	r3, [pc, #20]	@ (800e300 <HAL_IncTick+0x1c>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	001a      	movs	r2, r3
 800e2ee:	4b05      	ldr	r3, [pc, #20]	@ (800e304 <HAL_IncTick+0x20>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	18d2      	adds	r2, r2, r3
 800e2f4:	4b03      	ldr	r3, [pc, #12]	@ (800e304 <HAL_IncTick+0x20>)
 800e2f6:	601a      	str	r2, [r3, #0]
}
 800e2f8:	46c0      	nop			@ (mov r8, r8)
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	46c0      	nop			@ (mov r8, r8)
 800e300:	200000dc 	.word	0x200000dc
 800e304:	200024fc 	.word	0x200024fc

0800e308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	af00      	add	r7, sp, #0
  return uwTick;
 800e30c:	4b02      	ldr	r3, [pc, #8]	@ (800e318 <HAL_GetTick+0x10>)
 800e30e:	681b      	ldr	r3, [r3, #0]
}
 800e310:	0018      	movs	r0, r3
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	46c0      	nop			@ (mov r8, r8)
 800e318:	200024fc 	.word	0x200024fc

0800e31c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e324:	f7ff fff0 	bl	800e308 <HAL_GetTick>
 800e328:	0003      	movs	r3, r0
 800e32a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	3301      	adds	r3, #1
 800e334:	d005      	beq.n	800e342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e336:	4b0a      	ldr	r3, [pc, #40]	@ (800e360 <HAL_Delay+0x44>)
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	001a      	movs	r2, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	189b      	adds	r3, r3, r2
 800e340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e342:	46c0      	nop			@ (mov r8, r8)
 800e344:	f7ff ffe0 	bl	800e308 <HAL_GetTick>
 800e348:	0002      	movs	r2, r0
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	1ad3      	subs	r3, r2, r3
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	429a      	cmp	r2, r3
 800e352:	d8f7      	bhi.n	800e344 <HAL_Delay+0x28>
  {
  }
}
 800e354:	46c0      	nop			@ (mov r8, r8)
 800e356:	46c0      	nop			@ (mov r8, r8)
 800e358:	46bd      	mov	sp, r7
 800e35a:	b004      	add	sp, #16
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	46c0      	nop			@ (mov r8, r8)
 800e360:	200000dc 	.word	0x200000dc

0800e364 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800e368:	4b04      	ldr	r3, [pc, #16]	@ (800e37c <HAL_SuspendTick+0x18>)
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	4b03      	ldr	r3, [pc, #12]	@ (800e37c <HAL_SuspendTick+0x18>)
 800e36e:	2102      	movs	r1, #2
 800e370:	438a      	bics	r2, r1
 800e372:	601a      	str	r2, [r3, #0]
}
 800e374:	46c0      	nop			@ (mov r8, r8)
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	46c0      	nop			@ (mov r8, r8)
 800e37c:	e000e010 	.word	0xe000e010

0800e380 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800e384:	4b04      	ldr	r3, [pc, #16]	@ (800e398 <HAL_ResumeTick+0x18>)
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	4b03      	ldr	r3, [pc, #12]	@ (800e398 <HAL_ResumeTick+0x18>)
 800e38a:	2102      	movs	r1, #2
 800e38c:	430a      	orrs	r2, r1
 800e38e:	601a      	str	r2, [r3, #0]
}
 800e390:	46c0      	nop			@ (mov r8, r8)
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	46c0      	nop			@ (mov r8, r8)
 800e398:	e000e010 	.word	0xe000e010

0800e39c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800e3a0:	4b02      	ldr	r3, [pc, #8]	@ (800e3ac <HAL_GetUIDw0+0x10>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
}
 800e3a4:	0018      	movs	r0, r3
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	46c0      	nop			@ (mov r8, r8)
 800e3ac:	1ff80050 	.word	0x1ff80050

0800e3b0 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800e3b4:	4b02      	ldr	r3, [pc, #8]	@ (800e3c0 <HAL_GetUIDw1+0x10>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
}
 800e3b8:	0018      	movs	r0, r3
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	46c0      	nop			@ (mov r8, r8)
 800e3c0:	1ff80054 	.word	0x1ff80054

0800e3c4 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800e3c8:	4b02      	ldr	r3, [pc, #8]	@ (800e3d4 <HAL_GetUIDw2+0x10>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
}
 800e3cc:	0018      	movs	r0, r3
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	46c0      	nop			@ (mov r8, r8)
 800e3d4:	1ff80064 	.word	0x1ff80064

0800e3d8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d101      	bne.n	800e3ea <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e159      	b.n	800e69e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10a      	bne.n	800e408 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2250      	movs	r2, #80	@ 0x50
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	0018      	movs	r0, r3
 800e404:	f7f8 fdb4 	bl	8006f70 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e40c:	2210      	movs	r2, #16
 800e40e:	4013      	ands	r3, r2
 800e410:	2b10      	cmp	r3, #16
 800e412:	d005      	beq.n	800e420 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	2204      	movs	r2, #4
 800e41c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e41e:	d00b      	beq.n	800e438 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e424:	2210      	movs	r2, #16
 800e426:	431a      	orrs	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2250      	movs	r2, #80	@ 0x50
 800e430:	2100      	movs	r1, #0
 800e432:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e434:	2301      	movs	r3, #1
 800e436:	e132      	b.n	800e69e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e43c:	4a9a      	ldr	r2, [pc, #616]	@ (800e6a8 <HAL_ADC_Init+0x2d0>)
 800e43e:	4013      	ands	r3, r2
 800e440:	2202      	movs	r2, #2
 800e442:	431a      	orrs	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	2203      	movs	r2, #3
 800e450:	4013      	ands	r3, r2
 800e452:	2b01      	cmp	r3, #1
 800e454:	d108      	bne.n	800e468 <HAL_ADC_Init+0x90>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2201      	movs	r2, #1
 800e45e:	4013      	ands	r3, r2
 800e460:	2b01      	cmp	r3, #1
 800e462:	d101      	bne.n	800e468 <HAL_ADC_Init+0x90>
 800e464:	2301      	movs	r3, #1
 800e466:	e000      	b.n	800e46a <HAL_ADC_Init+0x92>
 800e468:	2300      	movs	r3, #0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d149      	bne.n	800e502 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	685a      	ldr	r2, [r3, #4]
 800e472:	23c0      	movs	r3, #192	@ 0xc0
 800e474:	061b      	lsls	r3, r3, #24
 800e476:	429a      	cmp	r2, r3
 800e478:	d00b      	beq.n	800e492 <HAL_ADC_Init+0xba>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685a      	ldr	r2, [r3, #4]
 800e47e:	2380      	movs	r3, #128	@ 0x80
 800e480:	05db      	lsls	r3, r3, #23
 800e482:	429a      	cmp	r2, r3
 800e484:	d005      	beq.n	800e492 <HAL_ADC_Init+0xba>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	685a      	ldr	r2, [r3, #4]
 800e48a:	2380      	movs	r3, #128	@ 0x80
 800e48c:	061b      	lsls	r3, r3, #24
 800e48e:	429a      	cmp	r2, r3
 800e490:	d111      	bne.n	800e4b6 <HAL_ADC_Init+0xde>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	691a      	ldr	r2, [r3, #16]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	0092      	lsls	r2, r2, #2
 800e49e:	0892      	lsrs	r2, r2, #2
 800e4a0:	611a      	str	r2, [r3, #16]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6919      	ldr	r1, [r3, #16]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685a      	ldr	r2, [r3, #4]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	430a      	orrs	r2, r1
 800e4b2:	611a      	str	r2, [r3, #16]
 800e4b4:	e014      	b.n	800e4e0 <HAL_ADC_Init+0x108>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	0092      	lsls	r2, r2, #2
 800e4c2:	0892      	lsrs	r2, r2, #2
 800e4c4:	611a      	str	r2, [r3, #16]
 800e4c6:	4b79      	ldr	r3, [pc, #484]	@ (800e6ac <HAL_ADC_Init+0x2d4>)
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	4b78      	ldr	r3, [pc, #480]	@ (800e6ac <HAL_ADC_Init+0x2d4>)
 800e4cc:	4978      	ldr	r1, [pc, #480]	@ (800e6b0 <HAL_ADC_Init+0x2d8>)
 800e4ce:	400a      	ands	r2, r1
 800e4d0:	601a      	str	r2, [r3, #0]
 800e4d2:	4b76      	ldr	r3, [pc, #472]	@ (800e6ac <HAL_ADC_Init+0x2d4>)
 800e4d4:	6819      	ldr	r1, [r3, #0]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	685a      	ldr	r2, [r3, #4]
 800e4da:	4b74      	ldr	r3, [pc, #464]	@ (800e6ac <HAL_ADC_Init+0x2d4>)
 800e4dc:	430a      	orrs	r2, r1
 800e4de:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	68da      	ldr	r2, [r3, #12]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2118      	movs	r1, #24
 800e4ec:	438a      	bics	r2, r1
 800e4ee:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68d9      	ldr	r1, [r3, #12]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	689a      	ldr	r2, [r3, #8]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	430a      	orrs	r2, r1
 800e500:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800e502:	4b6a      	ldr	r3, [pc, #424]	@ (800e6ac <HAL_ADC_Init+0x2d4>)
 800e504:	681a      	ldr	r2, [r3, #0]
 800e506:	4b69      	ldr	r3, [pc, #420]	@ (800e6ac <HAL_ADC_Init+0x2d4>)
 800e508:	496a      	ldr	r1, [pc, #424]	@ (800e6b4 <HAL_ADC_Init+0x2dc>)
 800e50a:	400a      	ands	r2, r1
 800e50c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800e50e:	4b67      	ldr	r3, [pc, #412]	@ (800e6ac <HAL_ADC_Init+0x2d4>)
 800e510:	6819      	ldr	r1, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e516:	065a      	lsls	r2, r3, #25
 800e518:	4b64      	ldr	r3, [pc, #400]	@ (800e6ac <HAL_ADC_Init+0x2d4>)
 800e51a:	430a      	orrs	r2, r1
 800e51c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	689a      	ldr	r2, [r3, #8]
 800e524:	2380      	movs	r3, #128	@ 0x80
 800e526:	055b      	lsls	r3, r3, #21
 800e528:	4013      	ands	r3, r2
 800e52a:	d108      	bne.n	800e53e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	689a      	ldr	r2, [r3, #8]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2180      	movs	r1, #128	@ 0x80
 800e538:	0549      	lsls	r1, r1, #21
 800e53a:	430a      	orrs	r2, r1
 800e53c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	68da      	ldr	r2, [r3, #12]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	495b      	ldr	r1, [pc, #364]	@ (800e6b8 <HAL_ADC_Init+0x2e0>)
 800e54a:	400a      	ands	r2, r1
 800e54c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68d9      	ldr	r1, [r3, #12]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d101      	bne.n	800e564 <HAL_ADC_Init+0x18c>
 800e560:	2304      	movs	r3, #4
 800e562:	e000      	b.n	800e566 <HAL_ADC_Init+0x18e>
 800e564:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e566:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2020      	movs	r0, #32
 800e56c:	5c1b      	ldrb	r3, [r3, r0]
 800e56e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e570:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	202c      	movs	r0, #44	@ 0x2c
 800e576:	5c1b      	ldrb	r3, [r3, r0]
 800e578:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e57a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e580:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	699b      	ldr	r3, [r3, #24]
 800e586:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800e588:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	69db      	ldr	r3, [r3, #28]
 800e58e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e590:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	430a      	orrs	r2, r1
 800e598:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e59e:	23c2      	movs	r3, #194	@ 0xc2
 800e5a0:	33ff      	adds	r3, #255	@ 0xff
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d00b      	beq.n	800e5be <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68d9      	ldr	r1, [r3, #12]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e5b4:	431a      	orrs	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	430a      	orrs	r2, r1
 800e5bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2221      	movs	r2, #33	@ 0x21
 800e5c2:	5c9b      	ldrb	r3, [r3, r2]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d11a      	bne.n	800e5fe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2220      	movs	r2, #32
 800e5cc:	5c9b      	ldrb	r3, [r3, r2]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d109      	bne.n	800e5e6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68da      	ldr	r2, [r3, #12]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2180      	movs	r1, #128	@ 0x80
 800e5de:	0249      	lsls	r1, r1, #9
 800e5e0:	430a      	orrs	r2, r1
 800e5e2:	60da      	str	r2, [r3, #12]
 800e5e4:	e00b      	b.n	800e5fe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5ea:	2220      	movs	r2, #32
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	431a      	orrs	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e602:	2b01      	cmp	r3, #1
 800e604:	d11f      	bne.n	800e646 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	691a      	ldr	r2, [r3, #16]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	492a      	ldr	r1, [pc, #168]	@ (800e6bc <HAL_ADC_Init+0x2e4>)
 800e612:	400a      	ands	r2, r1
 800e614:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	6919      	ldr	r1, [r3, #16]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e624:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800e62a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	430a      	orrs	r2, r1
 800e632:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	691a      	ldr	r2, [r3, #16]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2101      	movs	r1, #1
 800e640:	430a      	orrs	r2, r1
 800e642:	611a      	str	r2, [r3, #16]
 800e644:	e00e      	b.n	800e664 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	2201      	movs	r2, #1
 800e64e:	4013      	ands	r3, r2
 800e650:	2b01      	cmp	r3, #1
 800e652:	d107      	bne.n	800e664 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	691a      	ldr	r2, [r3, #16]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2101      	movs	r1, #1
 800e660:	438a      	bics	r2, r1
 800e662:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	695a      	ldr	r2, [r3, #20]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2107      	movs	r1, #7
 800e670:	438a      	bics	r2, r1
 800e672:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	6959      	ldr	r1, [r3, #20]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	430a      	orrs	r2, r1
 800e684:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2200      	movs	r2, #0
 800e68a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e690:	2203      	movs	r2, #3
 800e692:	4393      	bics	r3, r2
 800e694:	2201      	movs	r2, #1
 800e696:	431a      	orrs	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	0018      	movs	r0, r3
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	b002      	add	sp, #8
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	46c0      	nop			@ (mov r8, r8)
 800e6a8:	fffffefd 	.word	0xfffffefd
 800e6ac:	40012708 	.word	0x40012708
 800e6b0:	ffc3ffff 	.word	0xffc3ffff
 800e6b4:	fdffffff 	.word	0xfdffffff
 800e6b8:	fffe0219 	.word	0xfffe0219
 800e6bc:	fffffc03 	.word	0xfffffc03

0800e6c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800e6c0:	b590      	push	{r4, r7, lr}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e6c8:	230f      	movs	r3, #15
 800e6ca:	18fb      	adds	r3, r7, r3
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	2204      	movs	r2, #4
 800e6d8:	4013      	ands	r3, r2
 800e6da:	d138      	bne.n	800e74e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2250      	movs	r2, #80	@ 0x50
 800e6e0:	5c9b      	ldrb	r3, [r3, r2]
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d101      	bne.n	800e6ea <HAL_ADC_Start+0x2a>
 800e6e6:	2302      	movs	r3, #2
 800e6e8:	e038      	b.n	800e75c <HAL_ADC_Start+0x9c>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2250      	movs	r2, #80	@ 0x50
 800e6ee:	2101      	movs	r1, #1
 800e6f0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	69db      	ldr	r3, [r3, #28]
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d007      	beq.n	800e70a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800e6fa:	230f      	movs	r3, #15
 800e6fc:	18fc      	adds	r4, r7, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	0018      	movs	r0, r3
 800e702:	f000 f95f 	bl	800e9c4 <ADC_Enable>
 800e706:	0003      	movs	r3, r0
 800e708:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800e70a:	230f      	movs	r3, #15
 800e70c:	18fb      	adds	r3, r7, r3
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d120      	bne.n	800e756 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e718:	4a12      	ldr	r2, [pc, #72]	@ (800e764 <HAL_ADC_Start+0xa4>)
 800e71a:	4013      	ands	r3, r2
 800e71c:	2280      	movs	r2, #128	@ 0x80
 800e71e:	0052      	lsls	r2, r2, #1
 800e720:	431a      	orrs	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2250      	movs	r2, #80	@ 0x50
 800e730:	2100      	movs	r1, #0
 800e732:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	221c      	movs	r2, #28
 800e73a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	689a      	ldr	r2, [r3, #8]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2104      	movs	r1, #4
 800e748:	430a      	orrs	r2, r1
 800e74a:	609a      	str	r2, [r3, #8]
 800e74c:	e003      	b.n	800e756 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e74e:	230f      	movs	r3, #15
 800e750:	18fb      	adds	r3, r7, r3
 800e752:	2202      	movs	r2, #2
 800e754:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800e756:	230f      	movs	r3, #15
 800e758:	18fb      	adds	r3, r7, r3
 800e75a:	781b      	ldrb	r3, [r3, #0]
}
 800e75c:	0018      	movs	r0, r3
 800e75e:	46bd      	mov	sp, r7
 800e760:	b005      	add	sp, #20
 800e762:	bd90      	pop	{r4, r7, pc}
 800e764:	fffff0fe 	.word	0xfffff0fe

0800e768 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800e776:	2300      	movs	r3, #0
 800e778:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	695b      	ldr	r3, [r3, #20]
 800e77e:	2b08      	cmp	r3, #8
 800e780:	d102      	bne.n	800e788 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800e782:	2308      	movs	r3, #8
 800e784:	60fb      	str	r3, [r7, #12]
 800e786:	e014      	b.n	800e7b2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	2201      	movs	r2, #1
 800e790:	4013      	ands	r3, r2
 800e792:	2b01      	cmp	r3, #1
 800e794:	d10b      	bne.n	800e7ae <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e79a:	2220      	movs	r2, #32
 800e79c:	431a      	orrs	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2250      	movs	r2, #80	@ 0x50
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	e072      	b.n	800e894 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800e7ae:	230c      	movs	r3, #12
 800e7b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e7b2:	f7ff fda9 	bl	800e308 <HAL_GetTick>
 800e7b6:	0003      	movs	r3, r0
 800e7b8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e7ba:	e01f      	b.n	800e7fc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	d01c      	beq.n	800e7fc <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d007      	beq.n	800e7d8 <HAL_ADC_PollForConversion+0x70>
 800e7c8:	f7ff fd9e 	bl	800e308 <HAL_GetTick>
 800e7cc:	0002      	movs	r2, r0
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d211      	bcs.n	800e7fc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	d10b      	bne.n	800e7fc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7e8:	2204      	movs	r2, #4
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2250      	movs	r2, #80	@ 0x50
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e7f8:	2303      	movs	r3, #3
 800e7fa:	e04b      	b.n	800e894 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	4013      	ands	r3, r2
 800e806:	d0d9      	beq.n	800e7bc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e80c:	2280      	movs	r2, #128	@ 0x80
 800e80e:	0092      	lsls	r2, r2, #2
 800e810:	431a      	orrs	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	68da      	ldr	r2, [r3, #12]
 800e81c:	23c0      	movs	r3, #192	@ 0xc0
 800e81e:	011b      	lsls	r3, r3, #4
 800e820:	4013      	ands	r3, r2
 800e822:	d12e      	bne.n	800e882 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2220      	movs	r2, #32
 800e828:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d129      	bne.n	800e882 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2208      	movs	r2, #8
 800e836:	4013      	ands	r3, r2
 800e838:	2b08      	cmp	r3, #8
 800e83a:	d122      	bne.n	800e882 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	2204      	movs	r2, #4
 800e844:	4013      	ands	r3, r2
 800e846:	d110      	bne.n	800e86a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	685a      	ldr	r2, [r3, #4]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	210c      	movs	r1, #12
 800e854:	438a      	bics	r2, r1
 800e856:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e85c:	4a0f      	ldr	r2, [pc, #60]	@ (800e89c <HAL_ADC_PollForConversion+0x134>)
 800e85e:	4013      	ands	r3, r2
 800e860:	2201      	movs	r2, #1
 800e862:	431a      	orrs	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	655a      	str	r2, [r3, #84]	@ 0x54
 800e868:	e00b      	b.n	800e882 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e86e:	2220      	movs	r2, #32
 800e870:	431a      	orrs	r2, r3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e87a:	2201      	movs	r2, #1
 800e87c:	431a      	orrs	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d103      	bne.n	800e892 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	220c      	movs	r2, #12
 800e890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e892:	2300      	movs	r3, #0
}
 800e894:	0018      	movs	r0, r3
 800e896:	46bd      	mov	sp, r7
 800e898:	b004      	add	sp, #16
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	fffffefe 	.word	0xfffffefe

0800e8a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e8ae:	0018      	movs	r0, r3
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	b002      	add	sp, #8
 800e8b4:	bd80      	pop	{r7, pc}
	...

0800e8b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2250      	movs	r2, #80	@ 0x50
 800e8c6:	5c9b      	ldrb	r3, [r3, r2]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d101      	bne.n	800e8d0 <HAL_ADC_ConfigChannel+0x18>
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	e06c      	b.n	800e9aa <HAL_ADC_ConfigChannel+0xf2>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2250      	movs	r2, #80	@ 0x50
 800e8d4:	2101      	movs	r1, #1
 800e8d6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	2204      	movs	r2, #4
 800e8e0:	4013      	ands	r3, r2
 800e8e2:	d00b      	beq.n	800e8fc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8e8:	2220      	movs	r2, #32
 800e8ea:	431a      	orrs	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2250      	movs	r2, #80	@ 0x50
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e056      	b.n	800e9aa <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	4a2c      	ldr	r2, [pc, #176]	@ (800e9b4 <HAL_ADC_ConfigChannel+0xfc>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d028      	beq.n	800e958 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	035b      	lsls	r3, r3, #13
 800e912:	0b5a      	lsrs	r2, r3, #13
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	430a      	orrs	r2, r1
 800e91a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	2380      	movs	r3, #128	@ 0x80
 800e922:	02db      	lsls	r3, r3, #11
 800e924:	4013      	ands	r3, r2
 800e926:	d009      	beq.n	800e93c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800e928:	4b23      	ldr	r3, [pc, #140]	@ (800e9b8 <HAL_ADC_ConfigChannel+0x100>)
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	4b22      	ldr	r3, [pc, #136]	@ (800e9b8 <HAL_ADC_ConfigChannel+0x100>)
 800e92e:	2180      	movs	r1, #128	@ 0x80
 800e930:	0409      	lsls	r1, r1, #16
 800e932:	430a      	orrs	r2, r1
 800e934:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800e936:	200a      	movs	r0, #10
 800e938:	f000 f8ac 	bl	800ea94 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	2380      	movs	r3, #128	@ 0x80
 800e942:	029b      	lsls	r3, r3, #10
 800e944:	4013      	ands	r3, r2
 800e946:	d02b      	beq.n	800e9a0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800e948:	4b1b      	ldr	r3, [pc, #108]	@ (800e9b8 <HAL_ADC_ConfigChannel+0x100>)
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	4b1a      	ldr	r3, [pc, #104]	@ (800e9b8 <HAL_ADC_ConfigChannel+0x100>)
 800e94e:	2180      	movs	r1, #128	@ 0x80
 800e950:	03c9      	lsls	r1, r1, #15
 800e952:	430a      	orrs	r2, r1
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	e023      	b.n	800e9a0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	035b      	lsls	r3, r3, #13
 800e964:	0b5b      	lsrs	r3, r3, #13
 800e966:	43d9      	mvns	r1, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	400a      	ands	r2, r1
 800e96e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	2380      	movs	r3, #128	@ 0x80
 800e976:	02db      	lsls	r3, r3, #11
 800e978:	4013      	ands	r3, r2
 800e97a:	d005      	beq.n	800e988 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800e97c:	4b0e      	ldr	r3, [pc, #56]	@ (800e9b8 <HAL_ADC_ConfigChannel+0x100>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	4b0d      	ldr	r3, [pc, #52]	@ (800e9b8 <HAL_ADC_ConfigChannel+0x100>)
 800e982:	490e      	ldr	r1, [pc, #56]	@ (800e9bc <HAL_ADC_ConfigChannel+0x104>)
 800e984:	400a      	ands	r2, r1
 800e986:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	2380      	movs	r3, #128	@ 0x80
 800e98e:	029b      	lsls	r3, r3, #10
 800e990:	4013      	ands	r3, r2
 800e992:	d005      	beq.n	800e9a0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800e994:	4b08      	ldr	r3, [pc, #32]	@ (800e9b8 <HAL_ADC_ConfigChannel+0x100>)
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	4b07      	ldr	r3, [pc, #28]	@ (800e9b8 <HAL_ADC_ConfigChannel+0x100>)
 800e99a:	4909      	ldr	r1, [pc, #36]	@ (800e9c0 <HAL_ADC_ConfigChannel+0x108>)
 800e99c:	400a      	ands	r2, r1
 800e99e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2250      	movs	r2, #80	@ 0x50
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	0018      	movs	r0, r3
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	b002      	add	sp, #8
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	46c0      	nop			@ (mov r8, r8)
 800e9b4:	00001001 	.word	0x00001001
 800e9b8:	40012708 	.word	0x40012708
 800e9bc:	ff7fffff 	.word	0xff7fffff
 800e9c0:	ffbfffff 	.word	0xffbfffff

0800e9c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	2203      	movs	r2, #3
 800e9d8:	4013      	ands	r3, r2
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d108      	bne.n	800e9f0 <ADC_Enable+0x2c>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	4013      	ands	r3, r2
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d101      	bne.n	800e9f0 <ADC_Enable+0x2c>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	e000      	b.n	800e9f2 <ADC_Enable+0x2e>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d146      	bne.n	800ea84 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	4a24      	ldr	r2, [pc, #144]	@ (800ea90 <ADC_Enable+0xcc>)
 800e9fe:	4013      	ands	r3, r2
 800ea00:	d00d      	beq.n	800ea1e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea06:	2210      	movs	r2, #16
 800ea08:	431a      	orrs	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea12:	2201      	movs	r2, #1
 800ea14:	431a      	orrs	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e033      	b.n	800ea86 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	689a      	ldr	r2, [r3, #8]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2101      	movs	r1, #1
 800ea2a:	430a      	orrs	r2, r1
 800ea2c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800ea2e:	2001      	movs	r0, #1
 800ea30:	f000 f830 	bl	800ea94 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800ea34:	f7ff fc68 	bl	800e308 <HAL_GetTick>
 800ea38:	0003      	movs	r3, r0
 800ea3a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ea3c:	e01b      	b.n	800ea76 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ea3e:	f7ff fc63 	bl	800e308 <HAL_GetTick>
 800ea42:	0002      	movs	r2, r0
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	1ad3      	subs	r3, r2, r3
 800ea48:	2b0a      	cmp	r3, #10
 800ea4a:	d914      	bls.n	800ea76 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2201      	movs	r2, #1
 800ea54:	4013      	ands	r3, r2
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d00d      	beq.n	800ea76 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea5e:	2210      	movs	r2, #16
 800ea60:	431a      	orrs	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	431a      	orrs	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ea72:	2301      	movs	r3, #1
 800ea74:	e007      	b.n	800ea86 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	4013      	ands	r3, r2
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d1dc      	bne.n	800ea3e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	0018      	movs	r0, r3
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	b004      	add	sp, #16
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	46c0      	nop			@ (mov r8, r8)
 800ea90:	80000017 	.word	0x80000017

0800ea94 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800ea9c:	4b0b      	ldr	r3, [pc, #44]	@ (800eacc <ADC_DelayMicroSecond+0x38>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	490b      	ldr	r1, [pc, #44]	@ (800ead0 <ADC_DelayMicroSecond+0x3c>)
 800eaa2:	0018      	movs	r0, r3
 800eaa4:	f7f1 fb7e 	bl	80001a4 <__udivsi3>
 800eaa8:	0003      	movs	r3, r0
 800eaaa:	001a      	movs	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4353      	muls	r3, r2
 800eab0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800eab2:	e002      	b.n	800eaba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3b01      	subs	r3, #1
 800eab8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1f9      	bne.n	800eab4 <ADC_DelayMicroSecond+0x20>
  }
}
 800eac0:	46c0      	nop			@ (mov r8, r8)
 800eac2:	46c0      	nop			@ (mov r8, r8)
 800eac4:	46bd      	mov	sp, r7
 800eac6:	b004      	add	sp, #16
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	46c0      	nop			@ (mov r8, r8)
 800eacc:	200000c8 	.word	0x200000c8
 800ead0:	000f4240 	.word	0x000f4240

0800ead4 <__NVIC_EnableIRQ>:
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	0002      	movs	r2, r0
 800eadc:	1dfb      	adds	r3, r7, #7
 800eade:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800eae0:	1dfb      	adds	r3, r7, #7
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2b7f      	cmp	r3, #127	@ 0x7f
 800eae6:	d809      	bhi.n	800eafc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eae8:	1dfb      	adds	r3, r7, #7
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	001a      	movs	r2, r3
 800eaee:	231f      	movs	r3, #31
 800eaf0:	401a      	ands	r2, r3
 800eaf2:	4b04      	ldr	r3, [pc, #16]	@ (800eb04 <__NVIC_EnableIRQ+0x30>)
 800eaf4:	2101      	movs	r1, #1
 800eaf6:	4091      	lsls	r1, r2
 800eaf8:	000a      	movs	r2, r1
 800eafa:	601a      	str	r2, [r3, #0]
}
 800eafc:	46c0      	nop			@ (mov r8, r8)
 800eafe:	46bd      	mov	sp, r7
 800eb00:	b002      	add	sp, #8
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	e000e100 	.word	0xe000e100

0800eb08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800eb08:	b590      	push	{r4, r7, lr}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	0002      	movs	r2, r0
 800eb10:	6039      	str	r1, [r7, #0]
 800eb12:	1dfb      	adds	r3, r7, #7
 800eb14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800eb16:	1dfb      	adds	r3, r7, #7
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb1c:	d828      	bhi.n	800eb70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb1e:	4a2f      	ldr	r2, [pc, #188]	@ (800ebdc <__NVIC_SetPriority+0xd4>)
 800eb20:	1dfb      	adds	r3, r7, #7
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	b25b      	sxtb	r3, r3
 800eb26:	089b      	lsrs	r3, r3, #2
 800eb28:	33c0      	adds	r3, #192	@ 0xc0
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	589b      	ldr	r3, [r3, r2]
 800eb2e:	1dfa      	adds	r2, r7, #7
 800eb30:	7812      	ldrb	r2, [r2, #0]
 800eb32:	0011      	movs	r1, r2
 800eb34:	2203      	movs	r2, #3
 800eb36:	400a      	ands	r2, r1
 800eb38:	00d2      	lsls	r2, r2, #3
 800eb3a:	21ff      	movs	r1, #255	@ 0xff
 800eb3c:	4091      	lsls	r1, r2
 800eb3e:	000a      	movs	r2, r1
 800eb40:	43d2      	mvns	r2, r2
 800eb42:	401a      	ands	r2, r3
 800eb44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	019b      	lsls	r3, r3, #6
 800eb4a:	22ff      	movs	r2, #255	@ 0xff
 800eb4c:	401a      	ands	r2, r3
 800eb4e:	1dfb      	adds	r3, r7, #7
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	0018      	movs	r0, r3
 800eb54:	2303      	movs	r3, #3
 800eb56:	4003      	ands	r3, r0
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb5c:	481f      	ldr	r0, [pc, #124]	@ (800ebdc <__NVIC_SetPriority+0xd4>)
 800eb5e:	1dfb      	adds	r3, r7, #7
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	b25b      	sxtb	r3, r3
 800eb64:	089b      	lsrs	r3, r3, #2
 800eb66:	430a      	orrs	r2, r1
 800eb68:	33c0      	adds	r3, #192	@ 0xc0
 800eb6a:	009b      	lsls	r3, r3, #2
 800eb6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800eb6e:	e031      	b.n	800ebd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb70:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe0 <__NVIC_SetPriority+0xd8>)
 800eb72:	1dfb      	adds	r3, r7, #7
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	0019      	movs	r1, r3
 800eb78:	230f      	movs	r3, #15
 800eb7a:	400b      	ands	r3, r1
 800eb7c:	3b08      	subs	r3, #8
 800eb7e:	089b      	lsrs	r3, r3, #2
 800eb80:	3306      	adds	r3, #6
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	18d3      	adds	r3, r2, r3
 800eb86:	3304      	adds	r3, #4
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	1dfa      	adds	r2, r7, #7
 800eb8c:	7812      	ldrb	r2, [r2, #0]
 800eb8e:	0011      	movs	r1, r2
 800eb90:	2203      	movs	r2, #3
 800eb92:	400a      	ands	r2, r1
 800eb94:	00d2      	lsls	r2, r2, #3
 800eb96:	21ff      	movs	r1, #255	@ 0xff
 800eb98:	4091      	lsls	r1, r2
 800eb9a:	000a      	movs	r2, r1
 800eb9c:	43d2      	mvns	r2, r2
 800eb9e:	401a      	ands	r2, r3
 800eba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	019b      	lsls	r3, r3, #6
 800eba6:	22ff      	movs	r2, #255	@ 0xff
 800eba8:	401a      	ands	r2, r3
 800ebaa:	1dfb      	adds	r3, r7, #7
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	0018      	movs	r0, r3
 800ebb0:	2303      	movs	r3, #3
 800ebb2:	4003      	ands	r3, r0
 800ebb4:	00db      	lsls	r3, r3, #3
 800ebb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ebb8:	4809      	ldr	r0, [pc, #36]	@ (800ebe0 <__NVIC_SetPriority+0xd8>)
 800ebba:	1dfb      	adds	r3, r7, #7
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	001c      	movs	r4, r3
 800ebc0:	230f      	movs	r3, #15
 800ebc2:	4023      	ands	r3, r4
 800ebc4:	3b08      	subs	r3, #8
 800ebc6:	089b      	lsrs	r3, r3, #2
 800ebc8:	430a      	orrs	r2, r1
 800ebca:	3306      	adds	r3, #6
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	18c3      	adds	r3, r0, r3
 800ebd0:	3304      	adds	r3, #4
 800ebd2:	601a      	str	r2, [r3, #0]
}
 800ebd4:	46c0      	nop			@ (mov r8, r8)
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	b003      	add	sp, #12
 800ebda:	bd90      	pop	{r4, r7, pc}
 800ebdc:	e000e100 	.word	0xe000e100
 800ebe0:	e000ed00 	.word	0xe000ed00

0800ebe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	1e5a      	subs	r2, r3, #1
 800ebf0:	2380      	movs	r3, #128	@ 0x80
 800ebf2:	045b      	lsls	r3, r3, #17
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d301      	bcc.n	800ebfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e010      	b.n	800ec1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ebfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ec28 <SysTick_Config+0x44>)
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	3a01      	subs	r2, #1
 800ec02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ec04:	2301      	movs	r3, #1
 800ec06:	425b      	negs	r3, r3
 800ec08:	2103      	movs	r1, #3
 800ec0a:	0018      	movs	r0, r3
 800ec0c:	f7ff ff7c 	bl	800eb08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ec10:	4b05      	ldr	r3, [pc, #20]	@ (800ec28 <SysTick_Config+0x44>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ec16:	4b04      	ldr	r3, [pc, #16]	@ (800ec28 <SysTick_Config+0x44>)
 800ec18:	2207      	movs	r2, #7
 800ec1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	0018      	movs	r0, r3
 800ec20:	46bd      	mov	sp, r7
 800ec22:	b002      	add	sp, #8
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	46c0      	nop			@ (mov r8, r8)
 800ec28:	e000e010 	.word	0xe000e010

0800ec2c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60b9      	str	r1, [r7, #8]
 800ec34:	607a      	str	r2, [r7, #4]
 800ec36:	210f      	movs	r1, #15
 800ec38:	187b      	adds	r3, r7, r1
 800ec3a:	1c02      	adds	r2, r0, #0
 800ec3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	187b      	adds	r3, r7, r1
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	b25b      	sxtb	r3, r3
 800ec46:	0011      	movs	r1, r2
 800ec48:	0018      	movs	r0, r3
 800ec4a:	f7ff ff5d 	bl	800eb08 <__NVIC_SetPriority>
}
 800ec4e:	46c0      	nop			@ (mov r8, r8)
 800ec50:	46bd      	mov	sp, r7
 800ec52:	b004      	add	sp, #16
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	0002      	movs	r2, r0
 800ec5e:	1dfb      	adds	r3, r7, #7
 800ec60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ec62:	1dfb      	adds	r3, r7, #7
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	b25b      	sxtb	r3, r3
 800ec68:	0018      	movs	r0, r3
 800ec6a:	f7ff ff33 	bl	800ead4 <__NVIC_EnableIRQ>
}
 800ec6e:	46c0      	nop			@ (mov r8, r8)
 800ec70:	46bd      	mov	sp, r7
 800ec72:	b002      	add	sp, #8
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b082      	sub	sp, #8
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	0018      	movs	r0, r3
 800ec82:	f7ff ffaf 	bl	800ebe4 <SysTick_Config>
 800ec86:	0003      	movs	r3, r0
}
 800ec88:	0018      	movs	r0, r3
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	b002      	add	sp, #8
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d101      	bne.n	800eca2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e061      	b.n	800ed66 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	4a32      	ldr	r2, [pc, #200]	@ (800ed70 <HAL_DMA_Init+0xe0>)
 800eca8:	4694      	mov	ip, r2
 800ecaa:	4463      	add	r3, ip
 800ecac:	2114      	movs	r1, #20
 800ecae:	0018      	movs	r0, r3
 800ecb0:	f7f1 fa78 	bl	80001a4 <__udivsi3>
 800ecb4:	0003      	movs	r3, r0
 800ecb6:	009a      	lsls	r2, r3, #2
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a2d      	ldr	r2, [pc, #180]	@ (800ed74 <HAL_DMA_Init+0xe4>)
 800ecc0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2225      	movs	r2, #37	@ 0x25
 800ecc6:	2102      	movs	r1, #2
 800ecc8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	4a28      	ldr	r2, [pc, #160]	@ (800ed78 <HAL_DMA_Init+0xe8>)
 800ecd6:	4013      	ands	r3, r2
 800ecd8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ece2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ecee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ecfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6a1b      	ldr	r3, [r3, #32]
 800ed00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	4313      	orrs	r3, r2
 800ed06:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	689a      	ldr	r2, [r3, #8]
 800ed14:	2380      	movs	r3, #128	@ 0x80
 800ed16:	01db      	lsls	r3, r3, #7
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d018      	beq.n	800ed4e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ed1c:	4b17      	ldr	r3, [pc, #92]	@ (800ed7c <HAL_DMA_Init+0xec>)
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed24:	211c      	movs	r1, #28
 800ed26:	400b      	ands	r3, r1
 800ed28:	210f      	movs	r1, #15
 800ed2a:	4099      	lsls	r1, r3
 800ed2c:	000b      	movs	r3, r1
 800ed2e:	43d9      	mvns	r1, r3
 800ed30:	4b12      	ldr	r3, [pc, #72]	@ (800ed7c <HAL_DMA_Init+0xec>)
 800ed32:	400a      	ands	r2, r1
 800ed34:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ed36:	4b11      	ldr	r3, [pc, #68]	@ (800ed7c <HAL_DMA_Init+0xec>)
 800ed38:	6819      	ldr	r1, [r3, #0]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	685a      	ldr	r2, [r3, #4]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed42:	201c      	movs	r0, #28
 800ed44:	4003      	ands	r3, r0
 800ed46:	409a      	lsls	r2, r3
 800ed48:	4b0c      	ldr	r3, [pc, #48]	@ (800ed7c <HAL_DMA_Init+0xec>)
 800ed4a:	430a      	orrs	r2, r1
 800ed4c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2225      	movs	r2, #37	@ 0x25
 800ed58:	2101      	movs	r1, #1
 800ed5a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2224      	movs	r2, #36	@ 0x24
 800ed60:	2100      	movs	r1, #0
 800ed62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	0018      	movs	r0, r3
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	b004      	add	sp, #16
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	46c0      	nop			@ (mov r8, r8)
 800ed70:	bffdfff8 	.word	0xbffdfff8
 800ed74:	40020000 	.word	0x40020000
 800ed78:	ffff800f 	.word	0xffff800f
 800ed7c:	400200a8 	.word	0x400200a8

0800ed80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed8e:	2317      	movs	r3, #23
 800ed90:	18fb      	adds	r3, r7, r3
 800ed92:	2200      	movs	r2, #0
 800ed94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2224      	movs	r2, #36	@ 0x24
 800ed9a:	5c9b      	ldrb	r3, [r3, r2]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d101      	bne.n	800eda4 <HAL_DMA_Start_IT+0x24>
 800eda0:	2302      	movs	r3, #2
 800eda2:	e04f      	b.n	800ee44 <HAL_DMA_Start_IT+0xc4>
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2224      	movs	r2, #36	@ 0x24
 800eda8:	2101      	movs	r1, #1
 800edaa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2225      	movs	r2, #37	@ 0x25
 800edb0:	5c9b      	ldrb	r3, [r3, r2]
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d13a      	bne.n	800ee2e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2225      	movs	r2, #37	@ 0x25
 800edbc:	2102      	movs	r1, #2
 800edbe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2200      	movs	r2, #0
 800edc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2101      	movs	r1, #1
 800edd2:	438a      	bics	r2, r1
 800edd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	68b9      	ldr	r1, [r7, #8]
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f000 f976 	bl	800f0ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d008      	beq.n	800edfc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	210e      	movs	r1, #14
 800edf6:	430a      	orrs	r2, r1
 800edf8:	601a      	str	r2, [r3, #0]
 800edfa:	e00f      	b.n	800ee1c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2104      	movs	r1, #4
 800ee08:	438a      	bics	r2, r1
 800ee0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	210a      	movs	r1, #10
 800ee18:	430a      	orrs	r2, r1
 800ee1a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2101      	movs	r1, #1
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	601a      	str	r2, [r3, #0]
 800ee2c:	e007      	b.n	800ee3e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2224      	movs	r2, #36	@ 0x24
 800ee32:	2100      	movs	r1, #0
 800ee34:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800ee36:	2317      	movs	r3, #23
 800ee38:	18fb      	adds	r3, r7, r3
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ee3e:	2317      	movs	r3, #23
 800ee40:	18fb      	adds	r3, r7, r3
 800ee42:	781b      	ldrb	r3, [r3, #0]
}
 800ee44:	0018      	movs	r0, r3
 800ee46:	46bd      	mov	sp, r7
 800ee48:	b006      	add	sp, #24
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee54:	230f      	movs	r3, #15
 800ee56:	18fb      	adds	r3, r7, r3
 800ee58:	2200      	movs	r2, #0
 800ee5a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2225      	movs	r2, #37	@ 0x25
 800ee60:	5c9b      	ldrb	r3, [r3, r2]
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	d008      	beq.n	800ee7a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2204      	movs	r2, #4
 800ee6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2224      	movs	r2, #36	@ 0x24
 800ee72:	2100      	movs	r1, #0
 800ee74:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e024      	b.n	800eec4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	210e      	movs	r1, #14
 800ee86:	438a      	bics	r2, r1
 800ee88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2101      	movs	r1, #1
 800ee96:	438a      	bics	r2, r1
 800ee98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee9e:	221c      	movs	r2, #28
 800eea0:	401a      	ands	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eea6:	2101      	movs	r1, #1
 800eea8:	4091      	lsls	r1, r2
 800eeaa:	000a      	movs	r2, r1
 800eeac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2225      	movs	r2, #37	@ 0x25
 800eeb2:	2101      	movs	r1, #1
 800eeb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2224      	movs	r2, #36	@ 0x24
 800eeba:	2100      	movs	r1, #0
 800eebc:	5499      	strb	r1, [r3, r2]

    return status;
 800eebe:	230f      	movs	r3, #15
 800eec0:	18fb      	adds	r3, r7, r3
 800eec2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eec4:	0018      	movs	r0, r3
 800eec6:	46bd      	mov	sp, r7
 800eec8:	b004      	add	sp, #16
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eed4:	210f      	movs	r1, #15
 800eed6:	187b      	adds	r3, r7, r1
 800eed8:	2200      	movs	r2, #0
 800eeda:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2225      	movs	r2, #37	@ 0x25
 800eee0:	5c9b      	ldrb	r3, [r3, r2]
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	2b02      	cmp	r3, #2
 800eee6:	d006      	beq.n	800eef6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2204      	movs	r2, #4
 800eeec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800eeee:	187b      	adds	r3, r7, r1
 800eef0:	2201      	movs	r2, #1
 800eef2:	701a      	strb	r2, [r3, #0]
 800eef4:	e02a      	b.n	800ef4c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	210e      	movs	r1, #14
 800ef02:	438a      	bics	r2, r1
 800ef04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	2101      	movs	r1, #1
 800ef12:	438a      	bics	r2, r1
 800ef14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef1a:	221c      	movs	r2, #28
 800ef1c:	401a      	ands	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef22:	2101      	movs	r1, #1
 800ef24:	4091      	lsls	r1, r2
 800ef26:	000a      	movs	r2, r1
 800ef28:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2225      	movs	r2, #37	@ 0x25
 800ef2e:	2101      	movs	r1, #1
 800ef30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2224      	movs	r2, #36	@ 0x24
 800ef36:	2100      	movs	r1, #0
 800ef38:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d004      	beq.n	800ef4c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	0010      	movs	r0, r2
 800ef4a:	4798      	blx	r3
    }
  }
  return status;
 800ef4c:	230f      	movs	r3, #15
 800ef4e:	18fb      	adds	r3, r7, r3
 800ef50:	781b      	ldrb	r3, [r3, #0]
}
 800ef52:	0018      	movs	r0, r3
 800ef54:	46bd      	mov	sp, r7
 800ef56:	b004      	add	sp, #16
 800ef58:	bd80      	pop	{r7, pc}

0800ef5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b084      	sub	sp, #16
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef76:	221c      	movs	r2, #28
 800ef78:	4013      	ands	r3, r2
 800ef7a:	2204      	movs	r2, #4
 800ef7c:	409a      	lsls	r2, r3
 800ef7e:	0013      	movs	r3, r2
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	4013      	ands	r3, r2
 800ef84:	d026      	beq.n	800efd4 <HAL_DMA_IRQHandler+0x7a>
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	2204      	movs	r2, #4
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	d022      	beq.n	800efd4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2220      	movs	r2, #32
 800ef96:	4013      	ands	r3, r2
 800ef98:	d107      	bne.n	800efaa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2104      	movs	r1, #4
 800efa6:	438a      	bics	r2, r1
 800efa8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efae:	221c      	movs	r2, #28
 800efb0:	401a      	ands	r2, r3
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efb6:	2104      	movs	r1, #4
 800efb8:	4091      	lsls	r1, r2
 800efba:	000a      	movs	r2, r1
 800efbc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d100      	bne.n	800efc8 <HAL_DMA_IRQHandler+0x6e>
 800efc6:	e071      	b.n	800f0ac <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	0010      	movs	r0, r2
 800efd0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800efd2:	e06b      	b.n	800f0ac <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efd8:	221c      	movs	r2, #28
 800efda:	4013      	ands	r3, r2
 800efdc:	2202      	movs	r2, #2
 800efde:	409a      	lsls	r2, r3
 800efe0:	0013      	movs	r3, r2
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	4013      	ands	r3, r2
 800efe6:	d02d      	beq.n	800f044 <HAL_DMA_IRQHandler+0xea>
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	2202      	movs	r2, #2
 800efec:	4013      	ands	r3, r2
 800efee:	d029      	beq.n	800f044 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2220      	movs	r2, #32
 800eff8:	4013      	ands	r3, r2
 800effa:	d10b      	bne.n	800f014 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	210a      	movs	r1, #10
 800f008:	438a      	bics	r2, r1
 800f00a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2225      	movs	r2, #37	@ 0x25
 800f010:	2101      	movs	r1, #1
 800f012:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f018:	221c      	movs	r2, #28
 800f01a:	401a      	ands	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f020:	2102      	movs	r1, #2
 800f022:	4091      	lsls	r1, r2
 800f024:	000a      	movs	r2, r1
 800f026:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2224      	movs	r2, #36	@ 0x24
 800f02c:	2100      	movs	r1, #0
 800f02e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d039      	beq.n	800f0ac <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	0010      	movs	r0, r2
 800f040:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f042:	e033      	b.n	800f0ac <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f048:	221c      	movs	r2, #28
 800f04a:	4013      	ands	r3, r2
 800f04c:	2208      	movs	r2, #8
 800f04e:	409a      	lsls	r2, r3
 800f050:	0013      	movs	r3, r2
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	4013      	ands	r3, r2
 800f056:	d02a      	beq.n	800f0ae <HAL_DMA_IRQHandler+0x154>
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	2208      	movs	r2, #8
 800f05c:	4013      	ands	r3, r2
 800f05e:	d026      	beq.n	800f0ae <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	210e      	movs	r1, #14
 800f06c:	438a      	bics	r2, r1
 800f06e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f074:	221c      	movs	r2, #28
 800f076:	401a      	ands	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f07c:	2101      	movs	r1, #1
 800f07e:	4091      	lsls	r1, r2
 800f080:	000a      	movs	r2, r1
 800f082:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2225      	movs	r2, #37	@ 0x25
 800f08e:	2101      	movs	r1, #1
 800f090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2224      	movs	r2, #36	@ 0x24
 800f096:	2100      	movs	r1, #0
 800f098:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d005      	beq.n	800f0ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	0010      	movs	r0, r2
 800f0aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f0ac:	46c0      	nop			@ (mov r8, r8)
 800f0ae:	46c0      	nop			@ (mov r8, r8)
}
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	b004      	add	sp, #16
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b082      	sub	sp, #8
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2225      	movs	r2, #37	@ 0x25
 800f0c2:	5c9b      	ldrb	r3, [r3, r2]
 800f0c4:	b2db      	uxtb	r3, r3
}
 800f0c6:	0018      	movs	r0, r3
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	b002      	add	sp, #8
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b084      	sub	sp, #16
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	60f8      	str	r0, [r7, #12]
 800f0d6:	60b9      	str	r1, [r7, #8]
 800f0d8:	607a      	str	r2, [r7, #4]
 800f0da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0e0:	221c      	movs	r2, #28
 800f0e2:	401a      	ands	r2, r3
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	4091      	lsls	r1, r2
 800f0ec:	000a      	movs	r2, r1
 800f0ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	683a      	ldr	r2, [r7, #0]
 800f0f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	2b10      	cmp	r3, #16
 800f0fe:	d108      	bne.n	800f112 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f110:	e007      	b.n	800f122 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	68ba      	ldr	r2, [r7, #8]
 800f118:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	60da      	str	r2, [r3, #12]
}
 800f122:	46c0      	nop			@ (mov r8, r8)
 800f124:	46bd      	mov	sp, r7
 800f126:	b004      	add	sp, #16
 800f128:	bd80      	pop	{r7, pc}
	...

0800f12c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800f134:	f7ff f8e8 	bl	800e308 <HAL_GetTick>
 800f138:	0003      	movs	r3, r0
 800f13a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f13c:	e00f      	b.n	800f15e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3301      	adds	r3, #1
 800f142:	d00c      	beq.n	800f15e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d007      	beq.n	800f15a <FLASH_WaitForLastOperation+0x2e>
 800f14a:	f7ff f8dd 	bl	800e308 <HAL_GetTick>
 800f14e:	0002      	movs	r2, r0
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	687a      	ldr	r2, [r7, #4]
 800f156:	429a      	cmp	r2, r3
 800f158:	d201      	bcs.n	800f15e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800f15a:	2303      	movs	r3, #3
 800f15c:	e052      	b.n	800f204 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f15e:	4b2b      	ldr	r3, [pc, #172]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	2201      	movs	r2, #1
 800f164:	4013      	ands	r3, r2
 800f166:	2b01      	cmp	r3, #1
 800f168:	d0e9      	beq.n	800f13e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800f16a:	4b28      	ldr	r3, [pc, #160]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f16c:	699b      	ldr	r3, [r3, #24]
 800f16e:	2202      	movs	r2, #2
 800f170:	4013      	ands	r3, r2
 800f172:	2b02      	cmp	r3, #2
 800f174:	d102      	bne.n	800f17c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f176:	4b25      	ldr	r3, [pc, #148]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f178:	2202      	movs	r2, #2
 800f17a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f17c:	4b23      	ldr	r3, [pc, #140]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f17e:	699a      	ldr	r2, [r3, #24]
 800f180:	2380      	movs	r3, #128	@ 0x80
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	401a      	ands	r2, r3
 800f186:	2380      	movs	r3, #128	@ 0x80
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d035      	beq.n	800f1fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f18e:	4b1f      	ldr	r3, [pc, #124]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f190:	699a      	ldr	r2, [r3, #24]
 800f192:	2380      	movs	r3, #128	@ 0x80
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f198:	2380      	movs	r3, #128	@ 0x80
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d02c      	beq.n	800f1fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f1a0:	4b1a      	ldr	r3, [pc, #104]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f1a2:	699a      	ldr	r2, [r3, #24]
 800f1a4:	2380      	movs	r3, #128	@ 0x80
 800f1a6:	00db      	lsls	r3, r3, #3
 800f1a8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f1aa:	2380      	movs	r3, #128	@ 0x80
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d023      	beq.n	800f1fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f1b2:	4b16      	ldr	r3, [pc, #88]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f1b4:	699a      	ldr	r2, [r3, #24]
 800f1b6:	2380      	movs	r3, #128	@ 0x80
 800f1b8:	011b      	lsls	r3, r3, #4
 800f1ba:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f1bc:	2380      	movs	r3, #128	@ 0x80
 800f1be:	011b      	lsls	r3, r3, #4
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d01a      	beq.n	800f1fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f1c4:	4b11      	ldr	r3, [pc, #68]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f1c6:	699a      	ldr	r2, [r3, #24]
 800f1c8:	2380      	movs	r3, #128	@ 0x80
 800f1ca:	019b      	lsls	r3, r3, #6
 800f1cc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f1ce:	2380      	movs	r3, #128	@ 0x80
 800f1d0:	019b      	lsls	r3, r3, #6
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d011      	beq.n	800f1fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f1d8:	699a      	ldr	r2, [r3, #24]
 800f1da:	2380      	movs	r3, #128	@ 0x80
 800f1dc:	029b      	lsls	r3, r3, #10
 800f1de:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f1e0:	2380      	movs	r3, #128	@ 0x80
 800f1e2:	029b      	lsls	r3, r3, #10
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d008      	beq.n	800f1fa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800f1e8:	4b08      	ldr	r3, [pc, #32]	@ (800f20c <FLASH_WaitForLastOperation+0xe0>)
 800f1ea:	699a      	ldr	r2, [r3, #24]
 800f1ec:	2380      	movs	r3, #128	@ 0x80
 800f1ee:	025b      	lsls	r3, r3, #9
 800f1f0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f1f2:	2380      	movs	r3, #128	@ 0x80
 800f1f4:	025b      	lsls	r3, r3, #9
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d103      	bne.n	800f202 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800f1fa:	f000 f809 	bl	800f210 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	e000      	b.n	800f204 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800f202:	2300      	movs	r3, #0
}
 800f204:	0018      	movs	r0, r3
 800f206:	46bd      	mov	sp, r7
 800f208:	b004      	add	sp, #16
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	40022000 	.word	0x40022000

0800f210 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f21a:	4b49      	ldr	r3, [pc, #292]	@ (800f340 <FLASH_SetErrorCode+0x130>)
 800f21c:	699a      	ldr	r2, [r3, #24]
 800f21e:	2380      	movs	r3, #128	@ 0x80
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	401a      	ands	r2, r3
 800f224:	2380      	movs	r3, #128	@ 0x80
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	429a      	cmp	r2, r3
 800f22a:	d10a      	bne.n	800f242 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f22c:	4b45      	ldr	r3, [pc, #276]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	2202      	movs	r2, #2
 800f232:	431a      	orrs	r2, r3
 800f234:	4b43      	ldr	r3, [pc, #268]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f236:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2280      	movs	r2, #128	@ 0x80
 800f23c:	0052      	lsls	r2, r2, #1
 800f23e:	4313      	orrs	r3, r2
 800f240:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800f242:	4b3f      	ldr	r3, [pc, #252]	@ (800f340 <FLASH_SetErrorCode+0x130>)
 800f244:	699a      	ldr	r2, [r3, #24]
 800f246:	2380      	movs	r3, #128	@ 0x80
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	401a      	ands	r2, r3
 800f24c:	2380      	movs	r3, #128	@ 0x80
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	429a      	cmp	r2, r3
 800f252:	d10a      	bne.n	800f26a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f254:	4b3b      	ldr	r3, [pc, #236]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f256:	695b      	ldr	r3, [r3, #20]
 800f258:	2201      	movs	r2, #1
 800f25a:	431a      	orrs	r2, r3
 800f25c:	4b39      	ldr	r3, [pc, #228]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f25e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2280      	movs	r2, #128	@ 0x80
 800f264:	0092      	lsls	r2, r2, #2
 800f266:	4313      	orrs	r3, r2
 800f268:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800f26a:	4b35      	ldr	r3, [pc, #212]	@ (800f340 <FLASH_SetErrorCode+0x130>)
 800f26c:	699a      	ldr	r2, [r3, #24]
 800f26e:	2380      	movs	r3, #128	@ 0x80
 800f270:	00db      	lsls	r3, r3, #3
 800f272:	401a      	ands	r2, r3
 800f274:	2380      	movs	r3, #128	@ 0x80
 800f276:	00db      	lsls	r3, r3, #3
 800f278:	429a      	cmp	r2, r3
 800f27a:	d10a      	bne.n	800f292 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800f27c:	4b31      	ldr	r3, [pc, #196]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f27e:	695b      	ldr	r3, [r3, #20]
 800f280:	2208      	movs	r2, #8
 800f282:	431a      	orrs	r2, r3
 800f284:	4b2f      	ldr	r3, [pc, #188]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f286:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2280      	movs	r2, #128	@ 0x80
 800f28c:	00d2      	lsls	r2, r2, #3
 800f28e:	4313      	orrs	r3, r2
 800f290:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800f292:	4b2b      	ldr	r3, [pc, #172]	@ (800f340 <FLASH_SetErrorCode+0x130>)
 800f294:	699a      	ldr	r2, [r3, #24]
 800f296:	2380      	movs	r3, #128	@ 0x80
 800f298:	011b      	lsls	r3, r3, #4
 800f29a:	401a      	ands	r2, r3
 800f29c:	2380      	movs	r3, #128	@ 0x80
 800f29e:	011b      	lsls	r3, r3, #4
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d10a      	bne.n	800f2ba <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800f2a4:	4b27      	ldr	r3, [pc, #156]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f2a6:	695b      	ldr	r3, [r3, #20]
 800f2a8:	2204      	movs	r2, #4
 800f2aa:	431a      	orrs	r2, r3
 800f2ac:	4b25      	ldr	r3, [pc, #148]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f2ae:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2280      	movs	r2, #128	@ 0x80
 800f2b4:	0112      	lsls	r2, r2, #4
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800f2ba:	4b21      	ldr	r3, [pc, #132]	@ (800f340 <FLASH_SetErrorCode+0x130>)
 800f2bc:	699a      	ldr	r2, [r3, #24]
 800f2be:	2380      	movs	r3, #128	@ 0x80
 800f2c0:	019b      	lsls	r3, r3, #6
 800f2c2:	401a      	ands	r2, r3
 800f2c4:	2380      	movs	r3, #128	@ 0x80
 800f2c6:	019b      	lsls	r3, r3, #6
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d10a      	bne.n	800f2e2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800f2cc:	4b1d      	ldr	r3, [pc, #116]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f2ce:	695b      	ldr	r3, [r3, #20]
 800f2d0:	2210      	movs	r2, #16
 800f2d2:	431a      	orrs	r2, r3
 800f2d4:	4b1b      	ldr	r3, [pc, #108]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f2d6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2280      	movs	r2, #128	@ 0x80
 800f2dc:	0192      	lsls	r2, r2, #6
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800f2e2:	4b17      	ldr	r3, [pc, #92]	@ (800f340 <FLASH_SetErrorCode+0x130>)
 800f2e4:	699a      	ldr	r2, [r3, #24]
 800f2e6:	2380      	movs	r3, #128	@ 0x80
 800f2e8:	029b      	lsls	r3, r3, #10
 800f2ea:	401a      	ands	r2, r3
 800f2ec:	2380      	movs	r3, #128	@ 0x80
 800f2ee:	029b      	lsls	r3, r3, #10
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d109      	bne.n	800f308 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800f2f4:	4b13      	ldr	r3, [pc, #76]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f2f6:	695b      	ldr	r3, [r3, #20]
 800f2f8:	2220      	movs	r2, #32
 800f2fa:	431a      	orrs	r2, r3
 800f2fc:	4b11      	ldr	r3, [pc, #68]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f2fe:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2220      	movs	r2, #32
 800f304:	4313      	orrs	r3, r2
 800f306:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800f308:	4b0d      	ldr	r3, [pc, #52]	@ (800f340 <FLASH_SetErrorCode+0x130>)
 800f30a:	699a      	ldr	r2, [r3, #24]
 800f30c:	2380      	movs	r3, #128	@ 0x80
 800f30e:	025b      	lsls	r3, r3, #9
 800f310:	401a      	ands	r2, r3
 800f312:	2380      	movs	r3, #128	@ 0x80
 800f314:	025b      	lsls	r3, r3, #9
 800f316:	429a      	cmp	r2, r3
 800f318:	d10a      	bne.n	800f330 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800f31a:	4b0a      	ldr	r3, [pc, #40]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f31c:	695b      	ldr	r3, [r3, #20]
 800f31e:	2240      	movs	r2, #64	@ 0x40
 800f320:	431a      	orrs	r2, r3
 800f322:	4b08      	ldr	r3, [pc, #32]	@ (800f344 <FLASH_SetErrorCode+0x134>)
 800f324:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2280      	movs	r2, #128	@ 0x80
 800f32a:	0252      	lsls	r2, r2, #9
 800f32c:	4313      	orrs	r3, r2
 800f32e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800f330:	4b03      	ldr	r3, [pc, #12]	@ (800f340 <FLASH_SetErrorCode+0x130>)
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	619a      	str	r2, [r3, #24]
}  
 800f336:	46c0      	nop			@ (mov r8, r8)
 800f338:	46bd      	mov	sp, r7
 800f33a:	b002      	add	sp, #8
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	46c0      	nop			@ (mov r8, r8)
 800f340:	40022000 	.word	0x40022000
 800f344:	20002500 	.word	0x20002500

0800f348 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f34e:	4b12      	ldr	r3, [pc, #72]	@ (800f398 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	4013      	ands	r3, r2
 800f356:	d019      	beq.n	800f38c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f358:	f3ef 8310 	mrs	r3, PRIMASK
 800f35c:	607b      	str	r3, [r7, #4]
  return(result);
 800f35e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800f360:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f362:	b672      	cpsid	i
}
 800f364:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800f366:	4b0c      	ldr	r3, [pc, #48]	@ (800f398 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f368:	4a0c      	ldr	r2, [pc, #48]	@ (800f39c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800f36a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800f36c:	4b0a      	ldr	r3, [pc, #40]	@ (800f398 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f36e:	4a0c      	ldr	r2, [pc, #48]	@ (800f3a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800f370:	60da      	str	r2, [r3, #12]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	f383 8810 	msr	PRIMASK, r3
}
 800f37c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f37e:	4b06      	ldr	r3, [pc, #24]	@ (800f398 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	2201      	movs	r2, #1
 800f384:	4013      	ands	r3, r2
 800f386:	d001      	beq.n	800f38c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800f388:	2301      	movs	r3, #1
 800f38a:	e000      	b.n	800f38e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800f38c:	2300      	movs	r3, #0
}
 800f38e:	0018      	movs	r0, r3
 800f390:	46bd      	mov	sp, r7
 800f392:	b004      	add	sp, #16
 800f394:	bd80      	pop	{r7, pc}
 800f396:	46c0      	nop			@ (mov r8, r8)
 800f398:	40022000 	.word	0x40022000
 800f39c:	89abcdef 	.word	0x89abcdef
 800f3a0:	02030405 	.word	0x02030405

0800f3a4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800f3a8:	4b04      	ldr	r3, [pc, #16]	@ (800f3bc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	4b03      	ldr	r3, [pc, #12]	@ (800f3bc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f3ae:	2101      	movs	r1, #1
 800f3b0:	430a      	orrs	r2, r1
 800f3b2:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	0018      	movs	r0, r3
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	40022000 	.word	0x40022000

0800f3c0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800f3c0:	b5b0      	push	{r4, r5, r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3c8:	250f      	movs	r5, #15
 800f3ca:	197b      	adds	r3, r7, r5
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f3d0:	197c      	adds	r4, r7, r5
 800f3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f410 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f3d4:	0018      	movs	r0, r3
 800f3d6:	f7ff fea9 	bl	800f12c <FLASH_WaitForLastOperation>
 800f3da:	0003      	movs	r3, r0
 800f3dc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f3de:	0029      	movs	r1, r5
 800f3e0:	187b      	adds	r3, r7, r1
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d10c      	bne.n	800f402 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f414 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f3f4:	187c      	adds	r4, r7, r1
 800f3f6:	4b06      	ldr	r3, [pc, #24]	@ (800f410 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f3f8:	0018      	movs	r0, r3
 800f3fa:	f7ff fe97 	bl	800f12c <FLASH_WaitForLastOperation>
 800f3fe:	0003      	movs	r3, r0
 800f400:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800f402:	230f      	movs	r3, #15
 800f404:	18fb      	adds	r3, r7, r3
 800f406:	781b      	ldrb	r3, [r3, #0]
}  
 800f408:	0018      	movs	r0, r3
 800f40a:	46bd      	mov	sp, r7
 800f40c:	b004      	add	sp, #16
 800f40e:	bdb0      	pop	{r4, r5, r7, pc}
 800f410:	0000c350 	.word	0x0000c350
 800f414:	20002500 	.word	0x20002500

0800f418 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800f418:	b5b0      	push	{r4, r5, r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	60f8      	str	r0, [r7, #12]
 800f420:	60b9      	str	r1, [r7, #8]
 800f422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f424:	2317      	movs	r3, #23
 800f426:	18fb      	adds	r3, r7, r3
 800f428:	2201      	movs	r2, #1
 800f42a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f42c:	4b24      	ldr	r3, [pc, #144]	@ (800f4c0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f42e:	7c1b      	ldrb	r3, [r3, #16]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d101      	bne.n	800f438 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800f434:	2302      	movs	r3, #2
 800f436:	e03e      	b.n	800f4b6 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800f438:	4b21      	ldr	r3, [pc, #132]	@ (800f4c0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f43a:	2201      	movs	r2, #1
 800f43c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f43e:	2517      	movs	r5, #23
 800f440:	197c      	adds	r4, r7, r5
 800f442:	4b20      	ldr	r3, [pc, #128]	@ (800f4c4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f444:	0018      	movs	r0, r3
 800f446:	f7ff fe71 	bl	800f12c <FLASH_WaitForLastOperation>
 800f44a:	0003      	movs	r3, r0
 800f44c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f44e:	197b      	adds	r3, r7, r5
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d129      	bne.n	800f4aa <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f456:	4b1a      	ldr	r3, [pc, #104]	@ (800f4c0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f458:	2200      	movs	r2, #0
 800f45a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b02      	cmp	r3, #2
 800f460:	d103      	bne.n	800f46a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	601a      	str	r2, [r3, #0]
 800f468:	e013      	b.n	800f492 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d104      	bne.n	800f47a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	b292      	uxth	r2, r2
 800f476:	801a      	strh	r2, [r3, #0]
 800f478:	e00b      	b.n	800f492 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d104      	bne.n	800f48a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	b2d2      	uxtb	r2, r2
 800f486:	701a      	strb	r2, [r3, #0]
 800f488:	e003      	b.n	800f492 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800f48a:	2317      	movs	r3, #23
 800f48c:	18fb      	adds	r3, r7, r3
 800f48e:	2201      	movs	r2, #1
 800f490:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800f492:	2217      	movs	r2, #23
 800f494:	18bb      	adds	r3, r7, r2
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d106      	bne.n	800f4aa <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f49c:	18bc      	adds	r4, r7, r2
 800f49e:	4b09      	ldr	r3, [pc, #36]	@ (800f4c4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f4a0:	0018      	movs	r0, r3
 800f4a2:	f7ff fe43 	bl	800f12c <FLASH_WaitForLastOperation>
 800f4a6:	0003      	movs	r3, r0
 800f4a8:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f4aa:	4b05      	ldr	r3, [pc, #20]	@ (800f4c0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	741a      	strb	r2, [r3, #16]

  return status;
 800f4b0:	2317      	movs	r3, #23
 800f4b2:	18fb      	adds	r3, r7, r3
 800f4b4:	781b      	ldrb	r3, [r3, #0]
}
 800f4b6:	0018      	movs	r0, r3
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	b006      	add	sp, #24
 800f4bc:	bdb0      	pop	{r4, r5, r7, pc}
 800f4be:	46c0      	nop			@ (mov r8, r8)
 800f4c0:	20002500 	.word	0x20002500
 800f4c4:	0000c350 	.word	0x0000c350

0800f4c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800f4de:	e155      	b.n	800f78c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2101      	movs	r1, #1
 800f4e6:	697a      	ldr	r2, [r7, #20]
 800f4e8:	4091      	lsls	r1, r2
 800f4ea:	000a      	movs	r2, r1
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d100      	bne.n	800f4f8 <HAL_GPIO_Init+0x30>
 800f4f6:	e146      	b.n	800f786 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	2203      	movs	r2, #3
 800f4fe:	4013      	ands	r3, r2
 800f500:	2b01      	cmp	r3, #1
 800f502:	d005      	beq.n	800f510 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	2203      	movs	r2, #3
 800f50a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f50c:	2b02      	cmp	r3, #2
 800f50e:	d130      	bne.n	800f572 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	005b      	lsls	r3, r3, #1
 800f51a:	2203      	movs	r2, #3
 800f51c:	409a      	lsls	r2, r3
 800f51e:	0013      	movs	r3, r2
 800f520:	43da      	mvns	r2, r3
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	4013      	ands	r3, r2
 800f526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	68da      	ldr	r2, [r3, #12]
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	005b      	lsls	r3, r3, #1
 800f530:	409a      	lsls	r2, r3
 800f532:	0013      	movs	r3, r2
 800f534:	693a      	ldr	r2, [r7, #16]
 800f536:	4313      	orrs	r3, r2
 800f538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	693a      	ldr	r2, [r7, #16]
 800f53e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f546:	2201      	movs	r2, #1
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	409a      	lsls	r2, r3
 800f54c:	0013      	movs	r3, r2
 800f54e:	43da      	mvns	r2, r3
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	4013      	ands	r3, r2
 800f554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	091b      	lsrs	r3, r3, #4
 800f55c:	2201      	movs	r2, #1
 800f55e:	401a      	ands	r2, r3
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	409a      	lsls	r2, r3
 800f564:	0013      	movs	r3, r2
 800f566:	693a      	ldr	r2, [r7, #16]
 800f568:	4313      	orrs	r3, r2
 800f56a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	2203      	movs	r2, #3
 800f578:	4013      	ands	r3, r2
 800f57a:	2b03      	cmp	r3, #3
 800f57c:	d017      	beq.n	800f5ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	2203      	movs	r2, #3
 800f58a:	409a      	lsls	r2, r3
 800f58c:	0013      	movs	r3, r2
 800f58e:	43da      	mvns	r2, r3
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	4013      	ands	r3, r2
 800f594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	689a      	ldr	r2, [r3, #8]
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	005b      	lsls	r3, r3, #1
 800f59e:	409a      	lsls	r2, r3
 800f5a0:	0013      	movs	r3, r2
 800f5a2:	693a      	ldr	r2, [r7, #16]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	693a      	ldr	r2, [r7, #16]
 800f5ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	2203      	movs	r2, #3
 800f5b4:	4013      	ands	r3, r2
 800f5b6:	2b02      	cmp	r3, #2
 800f5b8:	d123      	bne.n	800f602 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	08da      	lsrs	r2, r3, #3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	3208      	adds	r2, #8
 800f5c2:	0092      	lsls	r2, r2, #2
 800f5c4:	58d3      	ldr	r3, [r2, r3]
 800f5c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	2207      	movs	r2, #7
 800f5cc:	4013      	ands	r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	220f      	movs	r2, #15
 800f5d2:	409a      	lsls	r2, r3
 800f5d4:	0013      	movs	r3, r2
 800f5d6:	43da      	mvns	r2, r3
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	4013      	ands	r3, r2
 800f5dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	691a      	ldr	r2, [r3, #16]
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	2107      	movs	r1, #7
 800f5e6:	400b      	ands	r3, r1
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	409a      	lsls	r2, r3
 800f5ec:	0013      	movs	r3, r2
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	08da      	lsrs	r2, r3, #3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	3208      	adds	r2, #8
 800f5fc:	0092      	lsls	r2, r2, #2
 800f5fe:	6939      	ldr	r1, [r7, #16]
 800f600:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	005b      	lsls	r3, r3, #1
 800f60c:	2203      	movs	r2, #3
 800f60e:	409a      	lsls	r2, r3
 800f610:	0013      	movs	r3, r2
 800f612:	43da      	mvns	r2, r3
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	4013      	ands	r3, r2
 800f618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	2203      	movs	r2, #3
 800f620:	401a      	ands	r2, r3
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	005b      	lsls	r3, r3, #1
 800f626:	409a      	lsls	r2, r3
 800f628:	0013      	movs	r3, r2
 800f62a:	693a      	ldr	r2, [r7, #16]
 800f62c:	4313      	orrs	r3, r2
 800f62e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	693a      	ldr	r2, [r7, #16]
 800f634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	685a      	ldr	r2, [r3, #4]
 800f63a:	23c0      	movs	r3, #192	@ 0xc0
 800f63c:	029b      	lsls	r3, r3, #10
 800f63e:	4013      	ands	r3, r2
 800f640:	d100      	bne.n	800f644 <HAL_GPIO_Init+0x17c>
 800f642:	e0a0      	b.n	800f786 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f644:	4b57      	ldr	r3, [pc, #348]	@ (800f7a4 <HAL_GPIO_Init+0x2dc>)
 800f646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f648:	4b56      	ldr	r3, [pc, #344]	@ (800f7a4 <HAL_GPIO_Init+0x2dc>)
 800f64a:	2101      	movs	r1, #1
 800f64c:	430a      	orrs	r2, r1
 800f64e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800f650:	4a55      	ldr	r2, [pc, #340]	@ (800f7a8 <HAL_GPIO_Init+0x2e0>)
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	089b      	lsrs	r3, r3, #2
 800f656:	3302      	adds	r3, #2
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	589b      	ldr	r3, [r3, r2]
 800f65c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	2203      	movs	r2, #3
 800f662:	4013      	ands	r3, r2
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	220f      	movs	r2, #15
 800f668:	409a      	lsls	r2, r3
 800f66a:	0013      	movs	r3, r2
 800f66c:	43da      	mvns	r2, r3
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	4013      	ands	r3, r2
 800f672:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	23a0      	movs	r3, #160	@ 0xa0
 800f678:	05db      	lsls	r3, r3, #23
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d01f      	beq.n	800f6be <HAL_GPIO_Init+0x1f6>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4a4a      	ldr	r2, [pc, #296]	@ (800f7ac <HAL_GPIO_Init+0x2e4>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d019      	beq.n	800f6ba <HAL_GPIO_Init+0x1f2>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a49      	ldr	r2, [pc, #292]	@ (800f7b0 <HAL_GPIO_Init+0x2e8>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d013      	beq.n	800f6b6 <HAL_GPIO_Init+0x1ee>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a48      	ldr	r2, [pc, #288]	@ (800f7b4 <HAL_GPIO_Init+0x2ec>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d00d      	beq.n	800f6b2 <HAL_GPIO_Init+0x1ea>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a47      	ldr	r2, [pc, #284]	@ (800f7b8 <HAL_GPIO_Init+0x2f0>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d007      	beq.n	800f6ae <HAL_GPIO_Init+0x1e6>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a46      	ldr	r2, [pc, #280]	@ (800f7bc <HAL_GPIO_Init+0x2f4>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d101      	bne.n	800f6aa <HAL_GPIO_Init+0x1e2>
 800f6a6:	2305      	movs	r3, #5
 800f6a8:	e00a      	b.n	800f6c0 <HAL_GPIO_Init+0x1f8>
 800f6aa:	2306      	movs	r3, #6
 800f6ac:	e008      	b.n	800f6c0 <HAL_GPIO_Init+0x1f8>
 800f6ae:	2304      	movs	r3, #4
 800f6b0:	e006      	b.n	800f6c0 <HAL_GPIO_Init+0x1f8>
 800f6b2:	2303      	movs	r3, #3
 800f6b4:	e004      	b.n	800f6c0 <HAL_GPIO_Init+0x1f8>
 800f6b6:	2302      	movs	r3, #2
 800f6b8:	e002      	b.n	800f6c0 <HAL_GPIO_Init+0x1f8>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e000      	b.n	800f6c0 <HAL_GPIO_Init+0x1f8>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	697a      	ldr	r2, [r7, #20]
 800f6c2:	2103      	movs	r1, #3
 800f6c4:	400a      	ands	r2, r1
 800f6c6:	0092      	lsls	r2, r2, #2
 800f6c8:	4093      	lsls	r3, r2
 800f6ca:	693a      	ldr	r2, [r7, #16]
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f6d0:	4935      	ldr	r1, [pc, #212]	@ (800f7a8 <HAL_GPIO_Init+0x2e0>)
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	089b      	lsrs	r3, r3, #2
 800f6d6:	3302      	adds	r3, #2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	693a      	ldr	r2, [r7, #16]
 800f6dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f6de:	4b38      	ldr	r3, [pc, #224]	@ (800f7c0 <HAL_GPIO_Init+0x2f8>)
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	43da      	mvns	r2, r3
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	685a      	ldr	r2, [r3, #4]
 800f6f2:	2380      	movs	r3, #128	@ 0x80
 800f6f4:	035b      	lsls	r3, r3, #13
 800f6f6:	4013      	ands	r3, r2
 800f6f8:	d003      	beq.n	800f702 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800f702:	4b2f      	ldr	r3, [pc, #188]	@ (800f7c0 <HAL_GPIO_Init+0x2f8>)
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800f708:	4b2d      	ldr	r3, [pc, #180]	@ (800f7c0 <HAL_GPIO_Init+0x2f8>)
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	43da      	mvns	r2, r3
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	4013      	ands	r3, r2
 800f716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	2380      	movs	r3, #128	@ 0x80
 800f71e:	039b      	lsls	r3, r3, #14
 800f720:	4013      	ands	r3, r2
 800f722:	d003      	beq.n	800f72c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800f724:	693a      	ldr	r2, [r7, #16]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	4313      	orrs	r3, r2
 800f72a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800f72c:	4b24      	ldr	r3, [pc, #144]	@ (800f7c0 <HAL_GPIO_Init+0x2f8>)
 800f72e:	693a      	ldr	r2, [r7, #16]
 800f730:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800f732:	4b23      	ldr	r3, [pc, #140]	@ (800f7c0 <HAL_GPIO_Init+0x2f8>)
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	43da      	mvns	r2, r3
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	4013      	ands	r3, r2
 800f740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	685a      	ldr	r2, [r3, #4]
 800f746:	2380      	movs	r3, #128	@ 0x80
 800f748:	029b      	lsls	r3, r3, #10
 800f74a:	4013      	ands	r3, r2
 800f74c:	d003      	beq.n	800f756 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800f74e:	693a      	ldr	r2, [r7, #16]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	4313      	orrs	r3, r2
 800f754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800f756:	4b1a      	ldr	r3, [pc, #104]	@ (800f7c0 <HAL_GPIO_Init+0x2f8>)
 800f758:	693a      	ldr	r2, [r7, #16]
 800f75a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f75c:	4b18      	ldr	r3, [pc, #96]	@ (800f7c0 <HAL_GPIO_Init+0x2f8>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	43da      	mvns	r2, r3
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	4013      	ands	r3, r2
 800f76a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	685a      	ldr	r2, [r3, #4]
 800f770:	2380      	movs	r3, #128	@ 0x80
 800f772:	025b      	lsls	r3, r3, #9
 800f774:	4013      	ands	r3, r2
 800f776:	d003      	beq.n	800f780 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800f778:	693a      	ldr	r2, [r7, #16]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800f780:	4b0f      	ldr	r3, [pc, #60]	@ (800f7c0 <HAL_GPIO_Init+0x2f8>)
 800f782:	693a      	ldr	r2, [r7, #16]
 800f784:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	3301      	adds	r3, #1
 800f78a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	40da      	lsrs	r2, r3
 800f794:	1e13      	subs	r3, r2, #0
 800f796:	d000      	beq.n	800f79a <HAL_GPIO_Init+0x2d2>
 800f798:	e6a2      	b.n	800f4e0 <HAL_GPIO_Init+0x18>
  }
}
 800f79a:	46c0      	nop			@ (mov r8, r8)
 800f79c:	46c0      	nop			@ (mov r8, r8)
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	b006      	add	sp, #24
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	40021000 	.word	0x40021000
 800f7a8:	40010000 	.word	0x40010000
 800f7ac:	50000400 	.word	0x50000400
 800f7b0:	50000800 	.word	0x50000800
 800f7b4:	50000c00 	.word	0x50000c00
 800f7b8:	50001000 	.word	0x50001000
 800f7bc:	50001c00 	.word	0x50001c00
 800f7c0:	40010400 	.word	0x40010400

0800f7c4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	000a      	movs	r2, r1
 800f7ce:	1cbb      	adds	r3, r7, #2
 800f7d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	1cba      	adds	r2, r7, #2
 800f7d8:	8812      	ldrh	r2, [r2, #0]
 800f7da:	4013      	ands	r3, r2
 800f7dc:	d004      	beq.n	800f7e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f7de:	230f      	movs	r3, #15
 800f7e0:	18fb      	adds	r3, r7, r3
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	701a      	strb	r2, [r3, #0]
 800f7e6:	e003      	b.n	800f7f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f7e8:	230f      	movs	r3, #15
 800f7ea:	18fb      	adds	r3, r7, r3
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f7f0:	230f      	movs	r3, #15
 800f7f2:	18fb      	adds	r3, r7, r3
 800f7f4:	781b      	ldrb	r3, [r3, #0]
}
 800f7f6:	0018      	movs	r0, r3
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	b004      	add	sp, #16
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b082      	sub	sp, #8
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
 800f806:	0008      	movs	r0, r1
 800f808:	0011      	movs	r1, r2
 800f80a:	1cbb      	adds	r3, r7, #2
 800f80c:	1c02      	adds	r2, r0, #0
 800f80e:	801a      	strh	r2, [r3, #0]
 800f810:	1c7b      	adds	r3, r7, #1
 800f812:	1c0a      	adds	r2, r1, #0
 800f814:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f816:	1c7b      	adds	r3, r7, #1
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d004      	beq.n	800f828 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f81e:	1cbb      	adds	r3, r7, #2
 800f820:	881a      	ldrh	r2, [r3, #0]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f826:	e003      	b.n	800f830 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f828:	1cbb      	adds	r3, r7, #2
 800f82a:	881a      	ldrh	r2, [r3, #0]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f830:	46c0      	nop			@ (mov r8, r8)
 800f832:	46bd      	mov	sp, r7
 800f834:	b002      	add	sp, #8
 800f836:	bd80      	pop	{r7, pc}

0800f838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	0002      	movs	r2, r0
 800f840:	1dbb      	adds	r3, r7, #6
 800f842:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f844:	4b09      	ldr	r3, [pc, #36]	@ (800f86c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f846:	695b      	ldr	r3, [r3, #20]
 800f848:	1dba      	adds	r2, r7, #6
 800f84a:	8812      	ldrh	r2, [r2, #0]
 800f84c:	4013      	ands	r3, r2
 800f84e:	d008      	beq.n	800f862 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f850:	4b06      	ldr	r3, [pc, #24]	@ (800f86c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f852:	1dba      	adds	r2, r7, #6
 800f854:	8812      	ldrh	r2, [r2, #0]
 800f856:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f858:	1dbb      	adds	r3, r7, #6
 800f85a:	881b      	ldrh	r3, [r3, #0]
 800f85c:	0018      	movs	r0, r3
 800f85e:	f7f8 fe0b 	bl	8008478 <HAL_GPIO_EXTI_Callback>
  }
}
 800f862:	46c0      	nop			@ (mov r8, r8)
 800f864:	46bd      	mov	sp, r7
 800f866:	b002      	add	sp, #8
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	46c0      	nop			@ (mov r8, r8)
 800f86c:	40010400 	.word	0x40010400

0800f870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d101      	bne.n	800f882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	e082      	b.n	800f988 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2241      	movs	r2, #65	@ 0x41
 800f886:	5c9b      	ldrb	r3, [r3, r2]
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d107      	bne.n	800f89e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2240      	movs	r2, #64	@ 0x40
 800f892:	2100      	movs	r1, #0
 800f894:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	0018      	movs	r0, r3
 800f89a:	f7f7 fed5 	bl	8007648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2241      	movs	r2, #65	@ 0x41
 800f8a2:	2124      	movs	r1, #36	@ 0x24
 800f8a4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2101      	movs	r1, #1
 800f8b2:	438a      	bics	r2, r1
 800f8b4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	685a      	ldr	r2, [r3, #4]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4934      	ldr	r1, [pc, #208]	@ (800f990 <HAL_I2C_Init+0x120>)
 800f8c0:	400a      	ands	r2, r1
 800f8c2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	689a      	ldr	r2, [r3, #8]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4931      	ldr	r1, [pc, #196]	@ (800f994 <HAL_I2C_Init+0x124>)
 800f8d0:	400a      	ands	r2, r1
 800f8d2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d108      	bne.n	800f8ee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	689a      	ldr	r2, [r3, #8]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2180      	movs	r1, #128	@ 0x80
 800f8e6:	0209      	lsls	r1, r1, #8
 800f8e8:	430a      	orrs	r2, r1
 800f8ea:	609a      	str	r2, [r3, #8]
 800f8ec:	e007      	b.n	800f8fe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	689a      	ldr	r2, [r3, #8]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2184      	movs	r1, #132	@ 0x84
 800f8f8:	0209      	lsls	r1, r1, #8
 800f8fa:	430a      	orrs	r2, r1
 800f8fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	2b02      	cmp	r3, #2
 800f904:	d104      	bne.n	800f910 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2280      	movs	r2, #128	@ 0x80
 800f90c:	0112      	lsls	r2, r2, #4
 800f90e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	685a      	ldr	r2, [r3, #4]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	491f      	ldr	r1, [pc, #124]	@ (800f998 <HAL_I2C_Init+0x128>)
 800f91c:	430a      	orrs	r2, r1
 800f91e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	68da      	ldr	r2, [r3, #12]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	491a      	ldr	r1, [pc, #104]	@ (800f994 <HAL_I2C_Init+0x124>)
 800f92c:	400a      	ands	r2, r1
 800f92e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	691a      	ldr	r2, [r3, #16]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	695b      	ldr	r3, [r3, #20]
 800f938:	431a      	orrs	r2, r3
 800f93a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	430a      	orrs	r2, r1
 800f948:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	69d9      	ldr	r1, [r3, #28]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a1a      	ldr	r2, [r3, #32]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	430a      	orrs	r2, r1
 800f958:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2101      	movs	r1, #1
 800f966:	430a      	orrs	r2, r1
 800f968:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2200      	movs	r2, #0
 800f96e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2241      	movs	r2, #65	@ 0x41
 800f974:	2120      	movs	r1, #32
 800f976:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2242      	movs	r2, #66	@ 0x42
 800f982:	2100      	movs	r1, #0
 800f984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f986:	2300      	movs	r3, #0
}
 800f988:	0018      	movs	r0, r3
 800f98a:	46bd      	mov	sp, r7
 800f98c:	b002      	add	sp, #8
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	f0ffffff 	.word	0xf0ffffff
 800f994:	ffff7fff 	.word	0xffff7fff
 800f998:	02008000 	.word	0x02008000

0800f99c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f99c:	b590      	push	{r4, r7, lr}
 800f99e:	b089      	sub	sp, #36	@ 0x24
 800f9a0:	af02      	add	r7, sp, #8
 800f9a2:	60f8      	str	r0, [r7, #12]
 800f9a4:	0008      	movs	r0, r1
 800f9a6:	607a      	str	r2, [r7, #4]
 800f9a8:	0019      	movs	r1, r3
 800f9aa:	230a      	movs	r3, #10
 800f9ac:	18fb      	adds	r3, r7, r3
 800f9ae:	1c02      	adds	r2, r0, #0
 800f9b0:	801a      	strh	r2, [r3, #0]
 800f9b2:	2308      	movs	r3, #8
 800f9b4:	18fb      	adds	r3, r7, r3
 800f9b6:	1c0a      	adds	r2, r1, #0
 800f9b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2241      	movs	r2, #65	@ 0x41
 800f9be:	5c9b      	ldrb	r3, [r3, r2]
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	2b20      	cmp	r3, #32
 800f9c4:	d000      	beq.n	800f9c8 <HAL_I2C_Master_Transmit+0x2c>
 800f9c6:	e0e7      	b.n	800fb98 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2240      	movs	r2, #64	@ 0x40
 800f9cc:	5c9b      	ldrb	r3, [r3, r2]
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d101      	bne.n	800f9d6 <HAL_I2C_Master_Transmit+0x3a>
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	e0e1      	b.n	800fb9a <HAL_I2C_Master_Transmit+0x1fe>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2240      	movs	r2, #64	@ 0x40
 800f9da:	2101      	movs	r1, #1
 800f9dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f9de:	f7fe fc93 	bl	800e308 <HAL_GetTick>
 800f9e2:	0003      	movs	r3, r0
 800f9e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f9e6:	2380      	movs	r3, #128	@ 0x80
 800f9e8:	0219      	lsls	r1, r3, #8
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	2319      	movs	r3, #25
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f001 ff98 	bl	8011928 <I2C_WaitOnFlagUntilTimeout>
 800f9f8:	1e03      	subs	r3, r0, #0
 800f9fa:	d001      	beq.n	800fa00 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	e0cc      	b.n	800fb9a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2241      	movs	r2, #65	@ 0x41
 800fa04:	2121      	movs	r1, #33	@ 0x21
 800fa06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2242      	movs	r2, #66	@ 0x42
 800fa0c:	2110      	movs	r1, #16
 800fa0e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	687a      	ldr	r2, [r7, #4]
 800fa1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2208      	movs	r2, #8
 800fa20:	18ba      	adds	r2, r7, r2
 800fa22:	8812      	ldrh	r2, [r2, #0]
 800fa24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	2bff      	cmp	r3, #255	@ 0xff
 800fa34:	d911      	bls.n	800fa5a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	22ff      	movs	r2, #255	@ 0xff
 800fa3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa40:	b2da      	uxtb	r2, r3
 800fa42:	2380      	movs	r3, #128	@ 0x80
 800fa44:	045c      	lsls	r4, r3, #17
 800fa46:	230a      	movs	r3, #10
 800fa48:	18fb      	adds	r3, r7, r3
 800fa4a:	8819      	ldrh	r1, [r3, #0]
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	4b55      	ldr	r3, [pc, #340]	@ (800fba4 <HAL_I2C_Master_Transmit+0x208>)
 800fa50:	9300      	str	r3, [sp, #0]
 800fa52:	0023      	movs	r3, r4
 800fa54:	f002 f9ba 	bl	8011dcc <I2C_TransferConfig>
 800fa58:	e075      	b.n	800fb46 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa5e:	b29a      	uxth	r2, r3
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa68:	b2da      	uxtb	r2, r3
 800fa6a:	2380      	movs	r3, #128	@ 0x80
 800fa6c:	049c      	lsls	r4, r3, #18
 800fa6e:	230a      	movs	r3, #10
 800fa70:	18fb      	adds	r3, r7, r3
 800fa72:	8819      	ldrh	r1, [r3, #0]
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	4b4b      	ldr	r3, [pc, #300]	@ (800fba4 <HAL_I2C_Master_Transmit+0x208>)
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	0023      	movs	r3, r4
 800fa7c:	f002 f9a6 	bl	8011dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800fa80:	e061      	b.n	800fb46 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fa82:	697a      	ldr	r2, [r7, #20]
 800fa84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	0018      	movs	r0, r3
 800fa8a:	f001 ff9b 	bl	80119c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa8e:	1e03      	subs	r3, r0, #0
 800fa90:	d001      	beq.n	800fa96 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800fa92:	2301      	movs	r3, #1
 800fa94:	e081      	b.n	800fb9a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa9a:	781a      	ldrb	r2, [r3, #0]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	3b01      	subs	r3, #1
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fabe:	3b01      	subs	r3, #1
 800fac0:	b29a      	uxth	r2, r3
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800faca:	b29b      	uxth	r3, r3
 800facc:	2b00      	cmp	r3, #0
 800face:	d03a      	beq.n	800fb46 <HAL_I2C_Master_Transmit+0x1aa>
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d136      	bne.n	800fb46 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	9300      	str	r3, [sp, #0]
 800fae0:	0013      	movs	r3, r2
 800fae2:	2200      	movs	r2, #0
 800fae4:	2180      	movs	r1, #128	@ 0x80
 800fae6:	f001 ff1f 	bl	8011928 <I2C_WaitOnFlagUntilTimeout>
 800faea:	1e03      	subs	r3, r0, #0
 800faec:	d001      	beq.n	800faf2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800faee:	2301      	movs	r3, #1
 800faf0:	e053      	b.n	800fb9a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	2bff      	cmp	r3, #255	@ 0xff
 800fafa:	d911      	bls.n	800fb20 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	22ff      	movs	r2, #255	@ 0xff
 800fb00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	2380      	movs	r3, #128	@ 0x80
 800fb0a:	045c      	lsls	r4, r3, #17
 800fb0c:	230a      	movs	r3, #10
 800fb0e:	18fb      	adds	r3, r7, r3
 800fb10:	8819      	ldrh	r1, [r3, #0]
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	2300      	movs	r3, #0
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	0023      	movs	r3, r4
 800fb1a:	f002 f957 	bl	8011dcc <I2C_TransferConfig>
 800fb1e:	e012      	b.n	800fb46 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb24:	b29a      	uxth	r2, r3
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	2380      	movs	r3, #128	@ 0x80
 800fb32:	049c      	lsls	r4, r3, #18
 800fb34:	230a      	movs	r3, #10
 800fb36:	18fb      	adds	r3, r7, r3
 800fb38:	8819      	ldrh	r1, [r3, #0]
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	0023      	movs	r3, r4
 800fb42:	f002 f943 	bl	8011dcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d198      	bne.n	800fa82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fb50:	697a      	ldr	r2, [r7, #20]
 800fb52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	0018      	movs	r0, r3
 800fb58:	f001 ff7a 	bl	8011a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fb5c:	1e03      	subs	r3, r0, #0
 800fb5e:	d001      	beq.n	800fb64 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	e01a      	b.n	800fb9a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2220      	movs	r2, #32
 800fb6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	685a      	ldr	r2, [r3, #4]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	490c      	ldr	r1, [pc, #48]	@ (800fba8 <HAL_I2C_Master_Transmit+0x20c>)
 800fb78:	400a      	ands	r2, r1
 800fb7a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2241      	movs	r2, #65	@ 0x41
 800fb80:	2120      	movs	r1, #32
 800fb82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2242      	movs	r2, #66	@ 0x42
 800fb88:	2100      	movs	r1, #0
 800fb8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2240      	movs	r2, #64	@ 0x40
 800fb90:	2100      	movs	r1, #0
 800fb92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fb94:	2300      	movs	r3, #0
 800fb96:	e000      	b.n	800fb9a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800fb98:	2302      	movs	r3, #2
  }
}
 800fb9a:	0018      	movs	r0, r3
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	b007      	add	sp, #28
 800fba0:	bd90      	pop	{r4, r7, pc}
 800fba2:	46c0      	nop			@ (mov r8, r8)
 800fba4:	80002000 	.word	0x80002000
 800fba8:	fe00e800 	.word	0xfe00e800

0800fbac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800fbac:	b590      	push	{r4, r7, lr}
 800fbae:	b089      	sub	sp, #36	@ 0x24
 800fbb0:	af02      	add	r7, sp, #8
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	0008      	movs	r0, r1
 800fbb6:	607a      	str	r2, [r7, #4]
 800fbb8:	0019      	movs	r1, r3
 800fbba:	230a      	movs	r3, #10
 800fbbc:	18fb      	adds	r3, r7, r3
 800fbbe:	1c02      	adds	r2, r0, #0
 800fbc0:	801a      	strh	r2, [r3, #0]
 800fbc2:	2308      	movs	r3, #8
 800fbc4:	18fb      	adds	r3, r7, r3
 800fbc6:	1c0a      	adds	r2, r1, #0
 800fbc8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2241      	movs	r2, #65	@ 0x41
 800fbce:	5c9b      	ldrb	r3, [r3, r2]
 800fbd0:	b2db      	uxtb	r3, r3
 800fbd2:	2b20      	cmp	r3, #32
 800fbd4:	d000      	beq.n	800fbd8 <HAL_I2C_Master_Receive+0x2c>
 800fbd6:	e0e8      	b.n	800fdaa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2240      	movs	r2, #64	@ 0x40
 800fbdc:	5c9b      	ldrb	r3, [r3, r2]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d101      	bne.n	800fbe6 <HAL_I2C_Master_Receive+0x3a>
 800fbe2:	2302      	movs	r3, #2
 800fbe4:	e0e2      	b.n	800fdac <HAL_I2C_Master_Receive+0x200>
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2240      	movs	r2, #64	@ 0x40
 800fbea:	2101      	movs	r1, #1
 800fbec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fbee:	f7fe fb8b 	bl	800e308 <HAL_GetTick>
 800fbf2:	0003      	movs	r3, r0
 800fbf4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fbf6:	2380      	movs	r3, #128	@ 0x80
 800fbf8:	0219      	lsls	r1, r3, #8
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	2319      	movs	r3, #25
 800fc02:	2201      	movs	r2, #1
 800fc04:	f001 fe90 	bl	8011928 <I2C_WaitOnFlagUntilTimeout>
 800fc08:	1e03      	subs	r3, r0, #0
 800fc0a:	d001      	beq.n	800fc10 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	e0cd      	b.n	800fdac <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2241      	movs	r2, #65	@ 0x41
 800fc14:	2122      	movs	r1, #34	@ 0x22
 800fc16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2242      	movs	r2, #66	@ 0x42
 800fc1c:	2110      	movs	r1, #16
 800fc1e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2200      	movs	r2, #0
 800fc24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2208      	movs	r2, #8
 800fc30:	18ba      	adds	r2, r7, r2
 800fc32:	8812      	ldrh	r2, [r2, #0]
 800fc34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	2bff      	cmp	r3, #255	@ 0xff
 800fc44:	d911      	bls.n	800fc6a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	22ff      	movs	r2, #255	@ 0xff
 800fc4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	2380      	movs	r3, #128	@ 0x80
 800fc54:	045c      	lsls	r4, r3, #17
 800fc56:	230a      	movs	r3, #10
 800fc58:	18fb      	adds	r3, r7, r3
 800fc5a:	8819      	ldrh	r1, [r3, #0]
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	4b55      	ldr	r3, [pc, #340]	@ (800fdb4 <HAL_I2C_Master_Receive+0x208>)
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	0023      	movs	r3, r4
 800fc64:	f002 f8b2 	bl	8011dcc <I2C_TransferConfig>
 800fc68:	e076      	b.n	800fd58 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc78:	b2da      	uxtb	r2, r3
 800fc7a:	2380      	movs	r3, #128	@ 0x80
 800fc7c:	049c      	lsls	r4, r3, #18
 800fc7e:	230a      	movs	r3, #10
 800fc80:	18fb      	adds	r3, r7, r3
 800fc82:	8819      	ldrh	r1, [r3, #0]
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	4b4b      	ldr	r3, [pc, #300]	@ (800fdb4 <HAL_I2C_Master_Receive+0x208>)
 800fc88:	9300      	str	r3, [sp, #0]
 800fc8a:	0023      	movs	r3, r4
 800fc8c:	f002 f89e 	bl	8011dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fc90:	e062      	b.n	800fd58 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fc92:	697a      	ldr	r2, [r7, #20]
 800fc94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	0018      	movs	r0, r3
 800fc9a:	f001 ff1d 	bl	8011ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fc9e:	1e03      	subs	r3, r0, #0
 800fca0:	d001      	beq.n	800fca6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800fca2:	2301      	movs	r3, #1
 800fca4:	e082      	b.n	800fdac <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcb0:	b2d2      	uxtb	r2, r2
 800fcb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcb8:	1c5a      	adds	r2, r3, #1
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	3b01      	subs	r3, #1
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d03a      	beq.n	800fd58 <HAL_I2C_Master_Receive+0x1ac>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d136      	bne.n	800fd58 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fcea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	0013      	movs	r3, r2
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	2180      	movs	r1, #128	@ 0x80
 800fcf8:	f001 fe16 	bl	8011928 <I2C_WaitOnFlagUntilTimeout>
 800fcfc:	1e03      	subs	r3, r0, #0
 800fcfe:	d001      	beq.n	800fd04 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800fd00:	2301      	movs	r3, #1
 800fd02:	e053      	b.n	800fdac <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	2bff      	cmp	r3, #255	@ 0xff
 800fd0c:	d911      	bls.n	800fd32 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	22ff      	movs	r2, #255	@ 0xff
 800fd12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	2380      	movs	r3, #128	@ 0x80
 800fd1c:	045c      	lsls	r4, r3, #17
 800fd1e:	230a      	movs	r3, #10
 800fd20:	18fb      	adds	r3, r7, r3
 800fd22:	8819      	ldrh	r1, [r3, #0]
 800fd24:	68f8      	ldr	r0, [r7, #12]
 800fd26:	2300      	movs	r3, #0
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	0023      	movs	r3, r4
 800fd2c:	f002 f84e 	bl	8011dcc <I2C_TransferConfig>
 800fd30:	e012      	b.n	800fd58 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd40:	b2da      	uxtb	r2, r3
 800fd42:	2380      	movs	r3, #128	@ 0x80
 800fd44:	049c      	lsls	r4, r3, #18
 800fd46:	230a      	movs	r3, #10
 800fd48:	18fb      	adds	r3, r7, r3
 800fd4a:	8819      	ldrh	r1, [r3, #0]
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	0023      	movs	r3, r4
 800fd54:	f002 f83a 	bl	8011dcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d197      	bne.n	800fc92 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fd62:	697a      	ldr	r2, [r7, #20]
 800fd64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	0018      	movs	r0, r3
 800fd6a:	f001 fe71 	bl	8011a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fd6e:	1e03      	subs	r3, r0, #0
 800fd70:	d001      	beq.n	800fd76 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800fd72:	2301      	movs	r3, #1
 800fd74:	e01a      	b.n	800fdac <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	2220      	movs	r2, #32
 800fd7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	685a      	ldr	r2, [r3, #4]
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	490b      	ldr	r1, [pc, #44]	@ (800fdb8 <HAL_I2C_Master_Receive+0x20c>)
 800fd8a:	400a      	ands	r2, r1
 800fd8c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2241      	movs	r2, #65	@ 0x41
 800fd92:	2120      	movs	r1, #32
 800fd94:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2242      	movs	r2, #66	@ 0x42
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2240      	movs	r2, #64	@ 0x40
 800fda2:	2100      	movs	r1, #0
 800fda4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fda6:	2300      	movs	r3, #0
 800fda8:	e000      	b.n	800fdac <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800fdaa:	2302      	movs	r3, #2
  }
}
 800fdac:	0018      	movs	r0, r3
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	b007      	add	sp, #28
 800fdb2:	bd90      	pop	{r4, r7, pc}
 800fdb4:	80002400 	.word	0x80002400
 800fdb8:	fe00e800 	.word	0xfe00e800

0800fdbc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800fdbc:	b5b0      	push	{r4, r5, r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af02      	add	r7, sp, #8
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	0008      	movs	r0, r1
 800fdc6:	607a      	str	r2, [r7, #4]
 800fdc8:	0019      	movs	r1, r3
 800fdca:	230a      	movs	r3, #10
 800fdcc:	18fb      	adds	r3, r7, r3
 800fdce:	1c02      	adds	r2, r0, #0
 800fdd0:	801a      	strh	r2, [r3, #0]
 800fdd2:	2308      	movs	r3, #8
 800fdd4:	18fb      	adds	r3, r7, r3
 800fdd6:	1c0a      	adds	r2, r1, #0
 800fdd8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2241      	movs	r2, #65	@ 0x41
 800fdde:	5c9b      	ldrb	r3, [r3, r2]
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	2b20      	cmp	r3, #32
 800fde4:	d000      	beq.n	800fde8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800fde6:	e0dd      	b.n	800ffa4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	699a      	ldr	r2, [r3, #24]
 800fdee:	2380      	movs	r3, #128	@ 0x80
 800fdf0:	021b      	lsls	r3, r3, #8
 800fdf2:	401a      	ands	r2, r3
 800fdf4:	2380      	movs	r3, #128	@ 0x80
 800fdf6:	021b      	lsls	r3, r3, #8
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d101      	bne.n	800fe00 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	e0d2      	b.n	800ffa6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2240      	movs	r2, #64	@ 0x40
 800fe04:	5c9b      	ldrb	r3, [r3, r2]
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d101      	bne.n	800fe0e <HAL_I2C_Master_Transmit_DMA+0x52>
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	e0cb      	b.n	800ffa6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2240      	movs	r2, #64	@ 0x40
 800fe12:	2101      	movs	r1, #1
 800fe14:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2241      	movs	r2, #65	@ 0x41
 800fe1a:	2121      	movs	r1, #33	@ 0x21
 800fe1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2242      	movs	r2, #66	@ 0x42
 800fe22:	2110      	movs	r1, #16
 800fe24:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2208      	movs	r2, #8
 800fe36:	18ba      	adds	r2, r7, r2
 800fe38:	8812      	ldrh	r2, [r2, #0]
 800fe3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	4a5c      	ldr	r2, [pc, #368]	@ (800ffb0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800fe40:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	4a5b      	ldr	r2, [pc, #364]	@ (800ffb4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800fe46:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	2bff      	cmp	r3, #255	@ 0xff
 800fe50:	d906      	bls.n	800fe60 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	22ff      	movs	r2, #255	@ 0xff
 800fe56:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fe58:	2380      	movs	r3, #128	@ 0x80
 800fe5a:	045b      	lsls	r3, r3, #17
 800fe5c:	617b      	str	r3, [r7, #20]
 800fe5e:	e007      	b.n	800fe70 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fe6a:	2380      	movs	r3, #128	@ 0x80
 800fe6c:	049b      	lsls	r3, r3, #18
 800fe6e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d100      	bne.n	800fe7a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800fe78:	e078      	b.n	800ff6c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d023      	beq.n	800feca <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe86:	4a4c      	ldr	r2, [pc, #304]	@ (800ffb8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800fe88:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe8e:	4a4b      	ldr	r2, [pc, #300]	@ (800ffbc <HAL_I2C_Master_Transmit_DMA+0x200>)
 800fe90:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe96:	2200      	movs	r2, #0
 800fe98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe9e:	2200      	movs	r2, #0
 800fea0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800fea6:	6879      	ldr	r1, [r7, #4]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	3328      	adds	r3, #40	@ 0x28
 800feae:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800feb4:	2513      	movs	r5, #19
 800feb6:	197c      	adds	r4, r7, r5
 800feb8:	f7fe ff62 	bl	800ed80 <HAL_DMA_Start_IT>
 800febc:	0003      	movs	r3, r0
 800febe:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800fec0:	197b      	adds	r3, r7, r5
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d13d      	bne.n	800ff44 <HAL_I2C_Master_Transmit_DMA+0x188>
 800fec8:	e013      	b.n	800fef2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2241      	movs	r2, #65	@ 0x41
 800fece:	2120      	movs	r1, #32
 800fed0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2242      	movs	r2, #66	@ 0x42
 800fed6:	2100      	movs	r1, #0
 800fed8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fede:	2280      	movs	r2, #128	@ 0x80
 800fee0:	431a      	orrs	r2, r3
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2240      	movs	r2, #64	@ 0x40
 800feea:	2100      	movs	r1, #0
 800feec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800feee:	2301      	movs	r3, #1
 800fef0:	e059      	b.n	800ffa6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	697c      	ldr	r4, [r7, #20]
 800fefa:	230a      	movs	r3, #10
 800fefc:	18fb      	adds	r3, r7, r3
 800fefe:	8819      	ldrh	r1, [r3, #0]
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	4b2f      	ldr	r3, [pc, #188]	@ (800ffc0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800ff04:	9300      	str	r3, [sp, #0]
 800ff06:	0023      	movs	r3, r4
 800ff08:	f001 ff60 	bl	8011dcc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff16:	1ad3      	subs	r3, r2, r3
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2240      	movs	r2, #64	@ 0x40
 800ff22:	2100      	movs	r1, #0
 800ff24:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	2110      	movs	r1, #16
 800ff2a:	0018      	movs	r0, r3
 800ff2c:	f001 ff88 	bl	8011e40 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2180      	movs	r1, #128	@ 0x80
 800ff3c:	01c9      	lsls	r1, r1, #7
 800ff3e:	430a      	orrs	r2, r1
 800ff40:	601a      	str	r2, [r3, #0]
 800ff42:	e02d      	b.n	800ffa0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2241      	movs	r2, #65	@ 0x41
 800ff48:	2120      	movs	r1, #32
 800ff4a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2242      	movs	r2, #66	@ 0x42
 800ff50:	2100      	movs	r1, #0
 800ff52:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff58:	2210      	movs	r2, #16
 800ff5a:	431a      	orrs	r2, r3
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2240      	movs	r2, #64	@ 0x40
 800ff64:	2100      	movs	r1, #0
 800ff66:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e01c      	b.n	800ffa6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	4a15      	ldr	r2, [pc, #84]	@ (800ffc4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800ff70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff76:	b2da      	uxtb	r2, r3
 800ff78:	2380      	movs	r3, #128	@ 0x80
 800ff7a:	049c      	lsls	r4, r3, #18
 800ff7c:	230a      	movs	r3, #10
 800ff7e:	18fb      	adds	r3, r7, r3
 800ff80:	8819      	ldrh	r1, [r3, #0]
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	4b0e      	ldr	r3, [pc, #56]	@ (800ffc0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	0023      	movs	r3, r4
 800ff8a:	f001 ff1f 	bl	8011dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2240      	movs	r2, #64	@ 0x40
 800ff92:	2100      	movs	r1, #0
 800ff94:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	2101      	movs	r1, #1
 800ff9a:	0018      	movs	r0, r3
 800ff9c:	f001 ff50 	bl	8011e40 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	e000      	b.n	800ffa6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ffa4:	2302      	movs	r3, #2
  }
}
 800ffa6:	0018      	movs	r0, r3
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	b006      	add	sp, #24
 800ffac:	bdb0      	pop	{r4, r5, r7, pc}
 800ffae:	46c0      	nop			@ (mov r8, r8)
 800ffb0:	ffff0000 	.word	0xffff0000
 800ffb4:	080107c1 	.word	0x080107c1
 800ffb8:	08011779 	.word	0x08011779
 800ffbc:	080118b9 	.word	0x080118b9
 800ffc0:	80002000 	.word	0x80002000
 800ffc4:	0801036d 	.word	0x0801036d

0800ffc8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800ffc8:	b5b0      	push	{r4, r5, r7, lr}
 800ffca:	b088      	sub	sp, #32
 800ffcc:	af02      	add	r7, sp, #8
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	0008      	movs	r0, r1
 800ffd2:	607a      	str	r2, [r7, #4]
 800ffd4:	0019      	movs	r1, r3
 800ffd6:	230a      	movs	r3, #10
 800ffd8:	18fb      	adds	r3, r7, r3
 800ffda:	1c02      	adds	r2, r0, #0
 800ffdc:	801a      	strh	r2, [r3, #0]
 800ffde:	2308      	movs	r3, #8
 800ffe0:	18fb      	adds	r3, r7, r3
 800ffe2:	1c0a      	adds	r2, r1, #0
 800ffe4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2241      	movs	r2, #65	@ 0x41
 800ffea:	5c9b      	ldrb	r3, [r3, r2]
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	2b20      	cmp	r3, #32
 800fff0:	d000      	beq.n	800fff4 <HAL_I2C_Master_Receive_DMA+0x2c>
 800fff2:	e0dd      	b.n	80101b0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	699a      	ldr	r2, [r3, #24]
 800fffa:	2380      	movs	r3, #128	@ 0x80
 800fffc:	021b      	lsls	r3, r3, #8
 800fffe:	401a      	ands	r2, r3
 8010000:	2380      	movs	r3, #128	@ 0x80
 8010002:	021b      	lsls	r3, r3, #8
 8010004:	429a      	cmp	r2, r3
 8010006:	d101      	bne.n	801000c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010008:	2302      	movs	r3, #2
 801000a:	e0d2      	b.n	80101b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2240      	movs	r2, #64	@ 0x40
 8010010:	5c9b      	ldrb	r3, [r3, r2]
 8010012:	2b01      	cmp	r3, #1
 8010014:	d101      	bne.n	801001a <HAL_I2C_Master_Receive_DMA+0x52>
 8010016:	2302      	movs	r3, #2
 8010018:	e0cb      	b.n	80101b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	2240      	movs	r2, #64	@ 0x40
 801001e:	2101      	movs	r1, #1
 8010020:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2241      	movs	r2, #65	@ 0x41
 8010026:	2122      	movs	r1, #34	@ 0x22
 8010028:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2242      	movs	r2, #66	@ 0x42
 801002e:	2110      	movs	r1, #16
 8010030:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2208      	movs	r2, #8
 8010042:	18ba      	adds	r2, r7, r2
 8010044:	8812      	ldrh	r2, [r2, #0]
 8010046:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	4a5c      	ldr	r2, [pc, #368]	@ (80101bc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 801004c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	4a5b      	ldr	r2, [pc, #364]	@ (80101c0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010052:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010058:	b29b      	uxth	r3, r3
 801005a:	2bff      	cmp	r3, #255	@ 0xff
 801005c:	d906      	bls.n	801006c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	22ff      	movs	r2, #255	@ 0xff
 8010062:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010064:	2380      	movs	r3, #128	@ 0x80
 8010066:	045b      	lsls	r3, r3, #17
 8010068:	617b      	str	r3, [r7, #20]
 801006a:	e007      	b.n	801007c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010070:	b29a      	uxth	r2, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010076:	2380      	movs	r3, #128	@ 0x80
 8010078:	049b      	lsls	r3, r3, #18
 801007a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010080:	2b00      	cmp	r3, #0
 8010082:	d100      	bne.n	8010086 <HAL_I2C_Master_Receive_DMA+0xbe>
 8010084:	e078      	b.n	8010178 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801008a:	2b00      	cmp	r3, #0
 801008c:	d023      	beq.n	80100d6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010092:	4a4c      	ldr	r2, [pc, #304]	@ (80101c4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010094:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801009a:	4a4b      	ldr	r2, [pc, #300]	@ (80101c8 <HAL_I2C_Master_Receive_DMA+0x200>)
 801009c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100a2:	2200      	movs	r2, #0
 80100a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100aa:	2200      	movs	r2, #0
 80100ac:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	3324      	adds	r3, #36	@ 0x24
 80100b8:	0019      	movs	r1, r3
 80100ba:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80100c0:	2513      	movs	r5, #19
 80100c2:	197c      	adds	r4, r7, r5
 80100c4:	f7fe fe5c 	bl	800ed80 <HAL_DMA_Start_IT>
 80100c8:	0003      	movs	r3, r0
 80100ca:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80100cc:	197b      	adds	r3, r7, r5
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d13d      	bne.n	8010150 <HAL_I2C_Master_Receive_DMA+0x188>
 80100d4:	e013      	b.n	80100fe <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2241      	movs	r2, #65	@ 0x41
 80100da:	2120      	movs	r1, #32
 80100dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2242      	movs	r2, #66	@ 0x42
 80100e2:	2100      	movs	r1, #0
 80100e4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100ea:	2280      	movs	r2, #128	@ 0x80
 80100ec:	431a      	orrs	r2, r3
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2240      	movs	r2, #64	@ 0x40
 80100f6:	2100      	movs	r1, #0
 80100f8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80100fa:	2301      	movs	r3, #1
 80100fc:	e059      	b.n	80101b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010102:	b2da      	uxtb	r2, r3
 8010104:	697c      	ldr	r4, [r7, #20]
 8010106:	230a      	movs	r3, #10
 8010108:	18fb      	adds	r3, r7, r3
 801010a:	8819      	ldrh	r1, [r3, #0]
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	4b2f      	ldr	r3, [pc, #188]	@ (80101cc <HAL_I2C_Master_Receive_DMA+0x204>)
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	0023      	movs	r3, r4
 8010114:	f001 fe5a 	bl	8011dcc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801011c:	b29a      	uxth	r2, r3
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	b29a      	uxth	r2, r3
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2240      	movs	r2, #64	@ 0x40
 801012e:	2100      	movs	r1, #0
 8010130:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2110      	movs	r1, #16
 8010136:	0018      	movs	r0, r3
 8010138:	f001 fe82 	bl	8011e40 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2180      	movs	r1, #128	@ 0x80
 8010148:	0209      	lsls	r1, r1, #8
 801014a:	430a      	orrs	r2, r1
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	e02d      	b.n	80101ac <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2241      	movs	r2, #65	@ 0x41
 8010154:	2120      	movs	r1, #32
 8010156:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2242      	movs	r2, #66	@ 0x42
 801015c:	2100      	movs	r1, #0
 801015e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010164:	2210      	movs	r2, #16
 8010166:	431a      	orrs	r2, r3
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2240      	movs	r2, #64	@ 0x40
 8010170:	2100      	movs	r1, #0
 8010172:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010174:	2301      	movs	r3, #1
 8010176:	e01c      	b.n	80101b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	4a15      	ldr	r2, [pc, #84]	@ (80101d0 <HAL_I2C_Master_Receive_DMA+0x208>)
 801017c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010182:	b2da      	uxtb	r2, r3
 8010184:	2380      	movs	r3, #128	@ 0x80
 8010186:	049c      	lsls	r4, r3, #18
 8010188:	230a      	movs	r3, #10
 801018a:	18fb      	adds	r3, r7, r3
 801018c:	8819      	ldrh	r1, [r3, #0]
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	4b0e      	ldr	r3, [pc, #56]	@ (80101cc <HAL_I2C_Master_Receive_DMA+0x204>)
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	0023      	movs	r3, r4
 8010196:	f001 fe19 	bl	8011dcc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2240      	movs	r2, #64	@ 0x40
 801019e:	2100      	movs	r1, #0
 80101a0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2101      	movs	r1, #1
 80101a6:	0018      	movs	r0, r3
 80101a8:	f001 fe4a 	bl	8011e40 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80101ac:	2300      	movs	r3, #0
 80101ae:	e000      	b.n	80101b2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80101b0:	2302      	movs	r3, #2
  }
}
 80101b2:	0018      	movs	r0, r3
 80101b4:	46bd      	mov	sp, r7
 80101b6:	b006      	add	sp, #24
 80101b8:	bdb0      	pop	{r4, r5, r7, pc}
 80101ba:	46c0      	nop			@ (mov r8, r8)
 80101bc:	ffff0000 	.word	0xffff0000
 80101c0:	080107c1 	.word	0x080107c1
 80101c4:	08011819 	.word	0x08011819
 80101c8:	080118b9 	.word	0x080118b9
 80101cc:	80002400 	.word	0x80002400
 80101d0:	0801036d 	.word	0x0801036d

080101d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	699b      	ldr	r3, [r3, #24]
 80101e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d005      	beq.n	8010200 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101f8:	68ba      	ldr	r2, [r7, #8]
 80101fa:	68f9      	ldr	r1, [r7, #12]
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	4798      	blx	r3
  }
}
 8010200:	46c0      	nop			@ (mov r8, r8)
 8010202:	46bd      	mov	sp, r7
 8010204:	b004      	add	sp, #16
 8010206:	bd80      	pop	{r7, pc}

08010208 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	699b      	ldr	r3, [r3, #24]
 8010216:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010220:	697a      	ldr	r2, [r7, #20]
 8010222:	2380      	movs	r3, #128	@ 0x80
 8010224:	005b      	lsls	r3, r3, #1
 8010226:	4013      	ands	r3, r2
 8010228:	d00e      	beq.n	8010248 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	2280      	movs	r2, #128	@ 0x80
 801022e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010230:	d00a      	beq.n	8010248 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010236:	2201      	movs	r2, #1
 8010238:	431a      	orrs	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2280      	movs	r2, #128	@ 0x80
 8010244:	0052      	lsls	r2, r2, #1
 8010246:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010248:	697a      	ldr	r2, [r7, #20]
 801024a:	2380      	movs	r3, #128	@ 0x80
 801024c:	00db      	lsls	r3, r3, #3
 801024e:	4013      	ands	r3, r2
 8010250:	d00e      	beq.n	8010270 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	2280      	movs	r2, #128	@ 0x80
 8010256:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010258:	d00a      	beq.n	8010270 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801025e:	2208      	movs	r2, #8
 8010260:	431a      	orrs	r2, r3
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2280      	movs	r2, #128	@ 0x80
 801026c:	00d2      	lsls	r2, r2, #3
 801026e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010270:	697a      	ldr	r2, [r7, #20]
 8010272:	2380      	movs	r3, #128	@ 0x80
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	4013      	ands	r3, r2
 8010278:	d00e      	beq.n	8010298 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	2280      	movs	r2, #128	@ 0x80
 801027e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010280:	d00a      	beq.n	8010298 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010286:	2202      	movs	r2, #2
 8010288:	431a      	orrs	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2280      	movs	r2, #128	@ 0x80
 8010294:	0092      	lsls	r2, r2, #2
 8010296:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801029c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	220b      	movs	r2, #11
 80102a2:	4013      	ands	r3, r2
 80102a4:	d005      	beq.n	80102b2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	0011      	movs	r1, r2
 80102ac:	0018      	movs	r0, r3
 80102ae:	f001 f915 	bl	80114dc <I2C_ITError>
  }
}
 80102b2:	46c0      	nop			@ (mov r8, r8)
 80102b4:	46bd      	mov	sp, r7
 80102b6:	b006      	add	sp, #24
 80102b8:	bd80      	pop	{r7, pc}

080102ba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b082      	sub	sp, #8
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80102c2:	46c0      	nop			@ (mov r8, r8)
 80102c4:	46bd      	mov	sp, r7
 80102c6:	b002      	add	sp, #8
 80102c8:	bd80      	pop	{r7, pc}

080102ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b082      	sub	sp, #8
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80102d2:	46c0      	nop			@ (mov r8, r8)
 80102d4:	46bd      	mov	sp, r7
 80102d6:	b002      	add	sp, #8
 80102d8:	bd80      	pop	{r7, pc}

080102da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b082      	sub	sp, #8
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80102e2:	46c0      	nop			@ (mov r8, r8)
 80102e4:	46bd      	mov	sp, r7
 80102e6:	b002      	add	sp, #8
 80102e8:	bd80      	pop	{r7, pc}

080102ea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b082      	sub	sp, #8
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80102f2:	46c0      	nop			@ (mov r8, r8)
 80102f4:	46bd      	mov	sp, r7
 80102f6:	b002      	add	sp, #8
 80102f8:	bd80      	pop	{r7, pc}

080102fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b082      	sub	sp, #8
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
 8010302:	0008      	movs	r0, r1
 8010304:	0011      	movs	r1, r2
 8010306:	1cfb      	adds	r3, r7, #3
 8010308:	1c02      	adds	r2, r0, #0
 801030a:	701a      	strb	r2, [r3, #0]
 801030c:	003b      	movs	r3, r7
 801030e:	1c0a      	adds	r2, r1, #0
 8010310:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010312:	46c0      	nop			@ (mov r8, r8)
 8010314:	46bd      	mov	sp, r7
 8010316:	b002      	add	sp, #8
 8010318:	bd80      	pop	{r7, pc}

0801031a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010322:	46c0      	nop			@ (mov r8, r8)
 8010324:	46bd      	mov	sp, r7
 8010326:	b002      	add	sp, #8
 8010328:	bd80      	pop	{r7, pc}

0801032a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b082      	sub	sp, #8
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010332:	46c0      	nop			@ (mov r8, r8)
 8010334:	46bd      	mov	sp, r7
 8010336:	b002      	add	sp, #8
 8010338:	bd80      	pop	{r7, pc}

0801033a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b082      	sub	sp, #8
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010342:	46c0      	nop			@ (mov r8, r8)
 8010344:	46bd      	mov	sp, r7
 8010346:	b002      	add	sp, #8
 8010348:	bd80      	pop	{r7, pc}

0801034a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b082      	sub	sp, #8
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010352:	46c0      	nop			@ (mov r8, r8)
 8010354:	46bd      	mov	sp, r7
 8010356:	b002      	add	sp, #8
 8010358:	bd80      	pop	{r7, pc}

0801035a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010362:	46c0      	nop			@ (mov r8, r8)
 8010364:	46bd      	mov	sp, r7
 8010366:	b002      	add	sp, #8
 8010368:	bd80      	pop	{r7, pc}
	...

0801036c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801036c:	b590      	push	{r4, r7, lr}
 801036e:	b089      	sub	sp, #36	@ 0x24
 8010370:	af02      	add	r7, sp, #8
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	2240      	movs	r2, #64	@ 0x40
 8010380:	5c9b      	ldrb	r3, [r3, r2]
 8010382:	2b01      	cmp	r3, #1
 8010384:	d101      	bne.n	801038a <I2C_Master_ISR_IT+0x1e>
 8010386:	2302      	movs	r3, #2
 8010388:	e113      	b.n	80105b2 <I2C_Master_ISR_IT+0x246>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2240      	movs	r2, #64	@ 0x40
 801038e:	2101      	movs	r1, #1
 8010390:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	2210      	movs	r2, #16
 8010396:	4013      	ands	r3, r2
 8010398:	d012      	beq.n	80103c0 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2210      	movs	r2, #16
 801039e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80103a0:	d00e      	beq.n	80103c0 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2210      	movs	r2, #16
 80103a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103ae:	2204      	movs	r2, #4
 80103b0:	431a      	orrs	r2, r3
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	0018      	movs	r0, r3
 80103ba:	f001 f9ba 	bl	8011732 <I2C_Flush_TXDR>
 80103be:	e0e5      	b.n	801058c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	2204      	movs	r2, #4
 80103c4:	4013      	ands	r3, r2
 80103c6:	d021      	beq.n	801040c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2204      	movs	r2, #4
 80103cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80103ce:	d01d      	beq.n	801040c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	2204      	movs	r2, #4
 80103d4:	4393      	bics	r3, r2
 80103d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103e2:	b2d2      	uxtb	r2, r2
 80103e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103ea:	1c5a      	adds	r2, r3, #1
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103f4:	3b01      	subs	r3, #1
 80103f6:	b29a      	uxth	r2, r3
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010400:	b29b      	uxth	r3, r3
 8010402:	3b01      	subs	r3, #1
 8010404:	b29a      	uxth	r2, r3
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801040a:	e0bf      	b.n	801058c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	2202      	movs	r2, #2
 8010410:	4013      	ands	r3, r2
 8010412:	d01c      	beq.n	801044e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2202      	movs	r2, #2
 8010418:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801041a:	d018      	beq.n	801044e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010420:	781a      	ldrb	r2, [r3, #0]
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801042c:	1c5a      	adds	r2, r3, #1
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010436:	3b01      	subs	r3, #1
 8010438:	b29a      	uxth	r2, r3
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010442:	b29b      	uxth	r3, r3
 8010444:	3b01      	subs	r3, #1
 8010446:	b29a      	uxth	r2, r3
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801044c:	e09e      	b.n	801058c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	2280      	movs	r2, #128	@ 0x80
 8010452:	4013      	ands	r3, r2
 8010454:	d100      	bne.n	8010458 <I2C_Master_ISR_IT+0xec>
 8010456:	e069      	b.n	801052c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2240      	movs	r2, #64	@ 0x40
 801045c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801045e:	d065      	beq.n	801052c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010464:	b29b      	uxth	r3, r3
 8010466:	2b00      	cmp	r3, #0
 8010468:	d04a      	beq.n	8010500 <I2C_Master_ISR_IT+0x194>
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801046e:	2b00      	cmp	r3, #0
 8010470:	d146      	bne.n	8010500 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	b29a      	uxth	r2, r3
 801047a:	2112      	movs	r1, #18
 801047c:	187b      	adds	r3, r7, r1
 801047e:	0592      	lsls	r2, r2, #22
 8010480:	0d92      	lsrs	r2, r2, #22
 8010482:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010488:	b29b      	uxth	r3, r3
 801048a:	2bff      	cmp	r3, #255	@ 0xff
 801048c:	d910      	bls.n	80104b0 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	22ff      	movs	r2, #255	@ 0xff
 8010492:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010498:	b2da      	uxtb	r2, r3
 801049a:	2380      	movs	r3, #128	@ 0x80
 801049c:	045c      	lsls	r4, r3, #17
 801049e:	187b      	adds	r3, r7, r1
 80104a0:	8819      	ldrh	r1, [r3, #0]
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	2300      	movs	r3, #0
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	0023      	movs	r3, r4
 80104aa:	f001 fc8f 	bl	8011dcc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104ae:	e03c      	b.n	801052a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104be:	4a3f      	ldr	r2, [pc, #252]	@ (80105bc <I2C_Master_ISR_IT+0x250>)
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d00e      	beq.n	80104e2 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104c8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80104ce:	2312      	movs	r3, #18
 80104d0:	18fb      	adds	r3, r7, r3
 80104d2:	8819      	ldrh	r1, [r3, #0]
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	2300      	movs	r3, #0
 80104d8:	9300      	str	r3, [sp, #0]
 80104da:	0023      	movs	r3, r4
 80104dc:	f001 fc76 	bl	8011dcc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104e0:	e023      	b.n	801052a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104e6:	b2da      	uxtb	r2, r3
 80104e8:	2380      	movs	r3, #128	@ 0x80
 80104ea:	049c      	lsls	r4, r3, #18
 80104ec:	2312      	movs	r3, #18
 80104ee:	18fb      	adds	r3, r7, r3
 80104f0:	8819      	ldrh	r1, [r3, #0]
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	2300      	movs	r3, #0
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	0023      	movs	r3, r4
 80104fa:	f001 fc67 	bl	8011dcc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104fe:	e014      	b.n	801052a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	685a      	ldr	r2, [r3, #4]
 8010506:	2380      	movs	r3, #128	@ 0x80
 8010508:	049b      	lsls	r3, r3, #18
 801050a:	401a      	ands	r2, r3
 801050c:	2380      	movs	r3, #128	@ 0x80
 801050e:	049b      	lsls	r3, r3, #18
 8010510:	429a      	cmp	r2, r3
 8010512:	d004      	beq.n	801051e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	0018      	movs	r0, r3
 8010518:	f000 fcf4 	bl	8010f04 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801051c:	e036      	b.n	801058c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2140      	movs	r1, #64	@ 0x40
 8010522:	0018      	movs	r0, r3
 8010524:	f000 ffda 	bl	80114dc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010528:	e030      	b.n	801058c <I2C_Master_ISR_IT+0x220>
 801052a:	e02f      	b.n	801058c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	2240      	movs	r2, #64	@ 0x40
 8010530:	4013      	ands	r3, r2
 8010532:	d02b      	beq.n	801058c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2240      	movs	r2, #64	@ 0x40
 8010538:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801053a:	d027      	beq.n	801058c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010540:	b29b      	uxth	r3, r3
 8010542:	2b00      	cmp	r3, #0
 8010544:	d11d      	bne.n	8010582 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	685a      	ldr	r2, [r3, #4]
 801054c:	2380      	movs	r3, #128	@ 0x80
 801054e:	049b      	lsls	r3, r3, #18
 8010550:	401a      	ands	r2, r3
 8010552:	2380      	movs	r3, #128	@ 0x80
 8010554:	049b      	lsls	r3, r3, #18
 8010556:	429a      	cmp	r2, r3
 8010558:	d018      	beq.n	801058c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801055e:	4a17      	ldr	r2, [pc, #92]	@ (80105bc <I2C_Master_ISR_IT+0x250>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d109      	bne.n	8010578 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	685a      	ldr	r2, [r3, #4]
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2180      	movs	r1, #128	@ 0x80
 8010570:	01c9      	lsls	r1, r1, #7
 8010572:	430a      	orrs	r2, r1
 8010574:	605a      	str	r2, [r3, #4]
 8010576:	e009      	b.n	801058c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	0018      	movs	r0, r3
 801057c:	f000 fcc2 	bl	8010f04 <I2C_ITMasterSeqCplt>
 8010580:	e004      	b.n	801058c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2140      	movs	r1, #64	@ 0x40
 8010586:	0018      	movs	r0, r3
 8010588:	f000 ffa8 	bl	80114dc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	2220      	movs	r2, #32
 8010590:	4013      	ands	r3, r2
 8010592:	d009      	beq.n	80105a8 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2220      	movs	r2, #32
 8010598:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801059a:	d005      	beq.n	80105a8 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 801059c:	697a      	ldr	r2, [r7, #20]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	0011      	movs	r1, r2
 80105a2:	0018      	movs	r0, r3
 80105a4:	f000 fd54 	bl	8011050 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2240      	movs	r2, #64	@ 0x40
 80105ac:	2100      	movs	r1, #0
 80105ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	0018      	movs	r0, r3
 80105b4:	46bd      	mov	sp, r7
 80105b6:	b007      	add	sp, #28
 80105b8:	bd90      	pop	{r4, r7, pc}
 80105ba:	46c0      	nop			@ (mov r8, r8)
 80105bc:	ffff0000 	.word	0xffff0000

080105c0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b086      	sub	sp, #24
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2240      	movs	r2, #64	@ 0x40
 80105da:	5c9b      	ldrb	r3, [r3, r2]
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d101      	bne.n	80105e4 <I2C_Slave_ISR_IT+0x24>
 80105e0:	2302      	movs	r3, #2
 80105e2:	e0e6      	b.n	80107b2 <I2C_Slave_ISR_IT+0x1f2>
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2240      	movs	r2, #64	@ 0x40
 80105e8:	2101      	movs	r1, #1
 80105ea:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	2220      	movs	r2, #32
 80105f0:	4013      	ands	r3, r2
 80105f2:	d009      	beq.n	8010608 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2220      	movs	r2, #32
 80105f8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80105fa:	d005      	beq.n	8010608 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80105fc:	693a      	ldr	r2, [r7, #16]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	0011      	movs	r1, r2
 8010602:	0018      	movs	r0, r3
 8010604:	f000 fdf2 	bl	80111ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	2210      	movs	r2, #16
 801060c:	4013      	ands	r3, r2
 801060e:	d052      	beq.n	80106b6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2210      	movs	r2, #16
 8010614:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010616:	d04e      	beq.n	80106b6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801061c:	b29b      	uxth	r3, r3
 801061e:	2b00      	cmp	r3, #0
 8010620:	d12d      	bne.n	801067e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2241      	movs	r2, #65	@ 0x41
 8010626:	5c9b      	ldrb	r3, [r3, r2]
 8010628:	b2db      	uxtb	r3, r3
 801062a:	2b28      	cmp	r3, #40	@ 0x28
 801062c:	d10b      	bne.n	8010646 <I2C_Slave_ISR_IT+0x86>
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	2380      	movs	r3, #128	@ 0x80
 8010632:	049b      	lsls	r3, r3, #18
 8010634:	429a      	cmp	r2, r3
 8010636:	d106      	bne.n	8010646 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8010638:	693a      	ldr	r2, [r7, #16]
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	0011      	movs	r1, r2
 801063e:	0018      	movs	r0, r3
 8010640:	f000 fef4 	bl	801142c <I2C_ITListenCplt>
 8010644:	e036      	b.n	80106b4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2241      	movs	r2, #65	@ 0x41
 801064a:	5c9b      	ldrb	r3, [r3, r2]
 801064c:	b2db      	uxtb	r3, r3
 801064e:	2b29      	cmp	r3, #41	@ 0x29
 8010650:	d110      	bne.n	8010674 <I2C_Slave_ISR_IT+0xb4>
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	4a59      	ldr	r2, [pc, #356]	@ (80107bc <I2C_Slave_ISR_IT+0x1fc>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d00c      	beq.n	8010674 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2210      	movs	r2, #16
 8010660:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	0018      	movs	r0, r3
 8010666:	f001 f864 	bl	8011732 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	0018      	movs	r0, r3
 801066e:	f000 fc8b 	bl	8010f88 <I2C_ITSlaveSeqCplt>
 8010672:	e01f      	b.n	80106b4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2210      	movs	r2, #16
 801067a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 801067c:	e091      	b.n	80107a2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2210      	movs	r2, #16
 8010684:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801068a:	2204      	movs	r2, #4
 801068c:	431a      	orrs	r2, r3
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d005      	beq.n	80106a4 <I2C_Slave_ISR_IT+0xe4>
 8010698:	697a      	ldr	r2, [r7, #20]
 801069a:	2380      	movs	r3, #128	@ 0x80
 801069c:	045b      	lsls	r3, r3, #17
 801069e:	429a      	cmp	r2, r3
 80106a0:	d000      	beq.n	80106a4 <I2C_Slave_ISR_IT+0xe4>
 80106a2:	e07e      	b.n	80107a2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	0011      	movs	r1, r2
 80106ac:	0018      	movs	r0, r3
 80106ae:	f000 ff15 	bl	80114dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80106b2:	e076      	b.n	80107a2 <I2C_Slave_ISR_IT+0x1e2>
 80106b4:	e075      	b.n	80107a2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	2204      	movs	r2, #4
 80106ba:	4013      	ands	r3, r2
 80106bc:	d02f      	beq.n	801071e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2204      	movs	r2, #4
 80106c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80106c4:	d02b      	beq.n	801071e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d018      	beq.n	8010702 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106da:	b2d2      	uxtb	r2, r2
 80106dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106e2:	1c5a      	adds	r2, r3, #1
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106ec:	3b01      	subs	r3, #1
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	3b01      	subs	r3, #1
 80106fc:	b29a      	uxth	r2, r3
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010706:	b29b      	uxth	r3, r3
 8010708:	2b00      	cmp	r3, #0
 801070a:	d14c      	bne.n	80107a6 <I2C_Slave_ISR_IT+0x1e6>
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	4a2b      	ldr	r2, [pc, #172]	@ (80107bc <I2C_Slave_ISR_IT+0x1fc>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d048      	beq.n	80107a6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	0018      	movs	r0, r3
 8010718:	f000 fc36 	bl	8010f88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 801071c:	e043      	b.n	80107a6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	2208      	movs	r2, #8
 8010722:	4013      	ands	r3, r2
 8010724:	d00a      	beq.n	801073c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2208      	movs	r2, #8
 801072a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801072c:	d006      	beq.n	801073c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801072e:	693a      	ldr	r2, [r7, #16]
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	0011      	movs	r1, r2
 8010734:	0018      	movs	r0, r3
 8010736:	f000 fb41 	bl	8010dbc <I2C_ITAddrCplt>
 801073a:	e035      	b.n	80107a8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	2202      	movs	r2, #2
 8010740:	4013      	ands	r3, r2
 8010742:	d031      	beq.n	80107a8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2202      	movs	r2, #2
 8010748:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801074a:	d02d      	beq.n	80107a8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010750:	b29b      	uxth	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d018      	beq.n	8010788 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801075a:	781a      	ldrb	r2, [r3, #0]
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010766:	1c5a      	adds	r2, r3, #1
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010770:	b29b      	uxth	r3, r3
 8010772:	3b01      	subs	r3, #1
 8010774:	b29a      	uxth	r2, r3
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801077e:	3b01      	subs	r3, #1
 8010780:	b29a      	uxth	r2, r3
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010786:	e00f      	b.n	80107a8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8010788:	697a      	ldr	r2, [r7, #20]
 801078a:	2380      	movs	r3, #128	@ 0x80
 801078c:	045b      	lsls	r3, r3, #17
 801078e:	429a      	cmp	r2, r3
 8010790:	d002      	beq.n	8010798 <I2C_Slave_ISR_IT+0x1d8>
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d107      	bne.n	80107a8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	0018      	movs	r0, r3
 801079c:	f000 fbf4 	bl	8010f88 <I2C_ITSlaveSeqCplt>
 80107a0:	e002      	b.n	80107a8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80107a2:	46c0      	nop			@ (mov r8, r8)
 80107a4:	e000      	b.n	80107a8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80107a6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2240      	movs	r2, #64	@ 0x40
 80107ac:	2100      	movs	r1, #0
 80107ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	0018      	movs	r0, r3
 80107b4:	46bd      	mov	sp, r7
 80107b6:	b006      	add	sp, #24
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	46c0      	nop			@ (mov r8, r8)
 80107bc:	ffff0000 	.word	0xffff0000

080107c0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80107c0:	b590      	push	{r4, r7, lr}
 80107c2:	b089      	sub	sp, #36	@ 0x24
 80107c4:	af02      	add	r7, sp, #8
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2240      	movs	r2, #64	@ 0x40
 80107d0:	5c9b      	ldrb	r3, [r3, r2]
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d101      	bne.n	80107da <I2C_Master_ISR_DMA+0x1a>
 80107d6:	2302      	movs	r3, #2
 80107d8:	e0e7      	b.n	80109aa <I2C_Master_ISR_DMA+0x1ea>
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2240      	movs	r2, #64	@ 0x40
 80107de:	2101      	movs	r1, #1
 80107e0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	2210      	movs	r2, #16
 80107e6:	4013      	ands	r3, r2
 80107e8:	d017      	beq.n	801081a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2210      	movs	r2, #16
 80107ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80107f0:	d013      	beq.n	801081a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2210      	movs	r2, #16
 80107f8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107fe:	2204      	movs	r2, #4
 8010800:	431a      	orrs	r2, r3
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2120      	movs	r1, #32
 801080a:	0018      	movs	r0, r3
 801080c:	f001 fb18 	bl	8011e40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	0018      	movs	r0, r3
 8010814:	f000 ff8d 	bl	8011732 <I2C_Flush_TXDR>
 8010818:	e0c2      	b.n	80109a0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	2280      	movs	r2, #128	@ 0x80
 801081e:	4013      	ands	r3, r2
 8010820:	d100      	bne.n	8010824 <I2C_Master_ISR_DMA+0x64>
 8010822:	e07c      	b.n	801091e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2240      	movs	r2, #64	@ 0x40
 8010828:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801082a:	d100      	bne.n	801082e <I2C_Master_ISR_DMA+0x6e>
 801082c:	e077      	b.n	801091e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2140      	movs	r1, #64	@ 0x40
 801083a:	438a      	bics	r2, r1
 801083c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010842:	b29b      	uxth	r3, r3
 8010844:	2b00      	cmp	r3, #0
 8010846:	d055      	beq.n	80108f4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	b29a      	uxth	r2, r3
 8010850:	2312      	movs	r3, #18
 8010852:	18fb      	adds	r3, r7, r3
 8010854:	0592      	lsls	r2, r2, #22
 8010856:	0d92      	lsrs	r2, r2, #22
 8010858:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801085e:	b29b      	uxth	r3, r3
 8010860:	2bff      	cmp	r3, #255	@ 0xff
 8010862:	d906      	bls.n	8010872 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	22ff      	movs	r2, #255	@ 0xff
 8010868:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801086a:	2380      	movs	r3, #128	@ 0x80
 801086c:	045b      	lsls	r3, r3, #17
 801086e:	617b      	str	r3, [r7, #20]
 8010870:	e010      	b.n	8010894 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010876:	b29a      	uxth	r2, r3
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010880:	4a4c      	ldr	r2, [pc, #304]	@ (80109b4 <I2C_Master_ISR_DMA+0x1f4>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d003      	beq.n	801088e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801088a:	617b      	str	r3, [r7, #20]
 801088c:	e002      	b.n	8010894 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801088e:	2380      	movs	r3, #128	@ 0x80
 8010890:	049b      	lsls	r3, r3, #18
 8010892:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010898:	b2da      	uxtb	r2, r3
 801089a:	697c      	ldr	r4, [r7, #20]
 801089c:	2312      	movs	r3, #18
 801089e:	18fb      	adds	r3, r7, r3
 80108a0:	8819      	ldrh	r1, [r3, #0]
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	2300      	movs	r3, #0
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	0023      	movs	r3, r4
 80108aa:	f001 fa8f 	bl	8011dcc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2241      	movs	r2, #65	@ 0x41
 80108c4:	5c9b      	ldrb	r3, [r3, r2]
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	2b22      	cmp	r3, #34	@ 0x22
 80108ca:	d109      	bne.n	80108e0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2180      	movs	r1, #128	@ 0x80
 80108d8:	0209      	lsls	r1, r1, #8
 80108da:	430a      	orrs	r2, r1
 80108dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80108de:	e05f      	b.n	80109a0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2180      	movs	r1, #128	@ 0x80
 80108ec:	01c9      	lsls	r1, r1, #7
 80108ee:	430a      	orrs	r2, r1
 80108f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80108f2:	e055      	b.n	80109a0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	685a      	ldr	r2, [r3, #4]
 80108fa:	2380      	movs	r3, #128	@ 0x80
 80108fc:	049b      	lsls	r3, r3, #18
 80108fe:	401a      	ands	r2, r3
 8010900:	2380      	movs	r3, #128	@ 0x80
 8010902:	049b      	lsls	r3, r3, #18
 8010904:	429a      	cmp	r2, r3
 8010906:	d004      	beq.n	8010912 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	0018      	movs	r0, r3
 801090c:	f000 fafa 	bl	8010f04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8010910:	e046      	b.n	80109a0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2140      	movs	r1, #64	@ 0x40
 8010916:	0018      	movs	r0, r3
 8010918:	f000 fde0 	bl	80114dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801091c:	e040      	b.n	80109a0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	2240      	movs	r2, #64	@ 0x40
 8010922:	4013      	ands	r3, r2
 8010924:	d02c      	beq.n	8010980 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2240      	movs	r2, #64	@ 0x40
 801092a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801092c:	d028      	beq.n	8010980 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010932:	b29b      	uxth	r3, r3
 8010934:	2b00      	cmp	r3, #0
 8010936:	d11d      	bne.n	8010974 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	685a      	ldr	r2, [r3, #4]
 801093e:	2380      	movs	r3, #128	@ 0x80
 8010940:	049b      	lsls	r3, r3, #18
 8010942:	401a      	ands	r2, r3
 8010944:	2380      	movs	r3, #128	@ 0x80
 8010946:	049b      	lsls	r3, r3, #18
 8010948:	429a      	cmp	r2, r3
 801094a:	d028      	beq.n	801099e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010950:	4a18      	ldr	r2, [pc, #96]	@ (80109b4 <I2C_Master_ISR_DMA+0x1f4>)
 8010952:	4293      	cmp	r3, r2
 8010954:	d109      	bne.n	801096a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	685a      	ldr	r2, [r3, #4]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2180      	movs	r1, #128	@ 0x80
 8010962:	01c9      	lsls	r1, r1, #7
 8010964:	430a      	orrs	r2, r1
 8010966:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8010968:	e019      	b.n	801099e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	0018      	movs	r0, r3
 801096e:	f000 fac9 	bl	8010f04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8010972:	e014      	b.n	801099e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2140      	movs	r1, #64	@ 0x40
 8010978:	0018      	movs	r0, r3
 801097a:	f000 fdaf 	bl	80114dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801097e:	e00e      	b.n	801099e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	2220      	movs	r2, #32
 8010984:	4013      	ands	r3, r2
 8010986:	d00b      	beq.n	80109a0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2220      	movs	r2, #32
 801098c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801098e:	d007      	beq.n	80109a0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010990:	68ba      	ldr	r2, [r7, #8]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	0011      	movs	r1, r2
 8010996:	0018      	movs	r0, r3
 8010998:	f000 fb5a 	bl	8011050 <I2C_ITMasterCplt>
 801099c:	e000      	b.n	80109a0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 801099e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2240      	movs	r2, #64	@ 0x40
 80109a4:	2100      	movs	r1, #0
 80109a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80109a8:	2300      	movs	r3, #0
}
 80109aa:	0018      	movs	r0, r3
 80109ac:	46bd      	mov	sp, r7
 80109ae:	b007      	add	sp, #28
 80109b0:	bd90      	pop	{r4, r7, pc}
 80109b2:	46c0      	nop			@ (mov r8, r8)
 80109b4:	ffff0000 	.word	0xffff0000

080109b8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80109b8:	b590      	push	{r4, r7, lr}
 80109ba:	b089      	sub	sp, #36	@ 0x24
 80109bc:	af02      	add	r7, sp, #8
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80109c4:	4b88      	ldr	r3, [pc, #544]	@ (8010be8 <I2C_Mem_ISR_DMA+0x230>)
 80109c6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2240      	movs	r2, #64	@ 0x40
 80109cc:	5c9b      	ldrb	r3, [r3, r2]
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d101      	bne.n	80109d6 <I2C_Mem_ISR_DMA+0x1e>
 80109d2:	2302      	movs	r3, #2
 80109d4:	e104      	b.n	8010be0 <I2C_Mem_ISR_DMA+0x228>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2240      	movs	r2, #64	@ 0x40
 80109da:	2101      	movs	r1, #1
 80109dc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	2210      	movs	r2, #16
 80109e2:	4013      	ands	r3, r2
 80109e4:	d017      	beq.n	8010a16 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2210      	movs	r2, #16
 80109ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80109ec:	d013      	beq.n	8010a16 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2210      	movs	r2, #16
 80109f4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109fa:	2204      	movs	r2, #4
 80109fc:	431a      	orrs	r2, r3
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2120      	movs	r1, #32
 8010a06:	0018      	movs	r0, r3
 8010a08:	f001 fa1a 	bl	8011e40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	0018      	movs	r0, r3
 8010a10:	f000 fe8f 	bl	8011732 <I2C_Flush_TXDR>
 8010a14:	e0df      	b.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	2202      	movs	r2, #2
 8010a1a:	4013      	ands	r3, r2
 8010a1c:	d00d      	beq.n	8010a3a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2202      	movs	r2, #2
 8010a22:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010a24:	d009      	beq.n	8010a3a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	68fa      	ldr	r2, [r7, #12]
 8010a2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010a2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2201      	movs	r2, #1
 8010a34:	4252      	negs	r2, r2
 8010a36:	651a      	str	r2, [r3, #80]	@ 0x50
 8010a38:	e0cd      	b.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2280      	movs	r2, #128	@ 0x80
 8010a3e:	4013      	ands	r3, r2
 8010a40:	d05e      	beq.n	8010b00 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2240      	movs	r2, #64	@ 0x40
 8010a46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010a48:	d05a      	beq.n	8010b00 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2110      	movs	r1, #16
 8010a4e:	0018      	movs	r0, r3
 8010a50:	f001 f9f6 	bl	8011e40 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d04a      	beq.n	8010af4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	2bff      	cmp	r3, #255	@ 0xff
 8010a66:	d910      	bls.n	8010a8a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	22ff      	movs	r2, #255	@ 0xff
 8010a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a72:	b299      	uxth	r1, r3
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	2380      	movs	r3, #128	@ 0x80
 8010a7c:	045b      	lsls	r3, r3, #17
 8010a7e:	68f8      	ldr	r0, [r7, #12]
 8010a80:	2400      	movs	r4, #0
 8010a82:	9400      	str	r4, [sp, #0]
 8010a84:	f001 f9a2 	bl	8011dcc <I2C_TransferConfig>
 8010a88:	e011      	b.n	8010aae <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a8e:	b29a      	uxth	r2, r3
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a98:	b299      	uxth	r1, r3
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a9e:	b2da      	uxtb	r2, r3
 8010aa0:	2380      	movs	r3, #128	@ 0x80
 8010aa2:	049b      	lsls	r3, r3, #18
 8010aa4:	68f8      	ldr	r0, [r7, #12]
 8010aa6:	2400      	movs	r4, #0
 8010aa8:	9400      	str	r4, [sp, #0]
 8010aaa:	f001 f98f 	bl	8011dcc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	b29a      	uxth	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2241      	movs	r2, #65	@ 0x41
 8010ac4:	5c9b      	ldrb	r3, [r3, r2]
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	2b22      	cmp	r3, #34	@ 0x22
 8010aca:	d109      	bne.n	8010ae0 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2180      	movs	r1, #128	@ 0x80
 8010ad8:	0209      	lsls	r1, r1, #8
 8010ada:	430a      	orrs	r2, r1
 8010adc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010ade:	e07a      	b.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2180      	movs	r1, #128	@ 0x80
 8010aec:	01c9      	lsls	r1, r1, #7
 8010aee:	430a      	orrs	r2, r1
 8010af0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010af2:	e070      	b.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2140      	movs	r1, #64	@ 0x40
 8010af8:	0018      	movs	r0, r3
 8010afa:	f000 fcef 	bl	80114dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010afe:	e06a      	b.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	2240      	movs	r2, #64	@ 0x40
 8010b04:	4013      	ands	r3, r2
 8010b06:	d058      	beq.n	8010bba <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2240      	movs	r2, #64	@ 0x40
 8010b0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010b0e:	d054      	beq.n	8010bba <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2241      	movs	r2, #65	@ 0x41
 8010b14:	5c9b      	ldrb	r3, [r3, r2]
 8010b16:	b2db      	uxtb	r3, r3
 8010b18:	2b22      	cmp	r3, #34	@ 0x22
 8010b1a:	d101      	bne.n	8010b20 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8010b1c:	4b33      	ldr	r3, [pc, #204]	@ (8010bec <I2C_Mem_ISR_DMA+0x234>)
 8010b1e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b24:	b29b      	uxth	r3, r3
 8010b26:	2bff      	cmp	r3, #255	@ 0xff
 8010b28:	d911      	bls.n	8010b4e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	22ff      	movs	r2, #255	@ 0xff
 8010b2e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b34:	b299      	uxth	r1, r3
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	2380      	movs	r3, #128	@ 0x80
 8010b3e:	045c      	lsls	r4, r3, #17
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	0023      	movs	r3, r4
 8010b48:	f001 f940 	bl	8011dcc <I2C_TransferConfig>
 8010b4c:	e012      	b.n	8010b74 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b5c:	b299      	uxth	r1, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	2380      	movs	r3, #128	@ 0x80
 8010b66:	049c      	lsls	r4, r3, #18
 8010b68:	68f8      	ldr	r0, [r7, #12]
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	9300      	str	r3, [sp, #0]
 8010b6e:	0023      	movs	r3, r4
 8010b70:	f001 f92c 	bl	8011dcc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b7e:	1ad3      	subs	r3, r2, r3
 8010b80:	b29a      	uxth	r2, r3
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2241      	movs	r2, #65	@ 0x41
 8010b8a:	5c9b      	ldrb	r3, [r3, r2]
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	2b22      	cmp	r3, #34	@ 0x22
 8010b90:	d109      	bne.n	8010ba6 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2180      	movs	r1, #128	@ 0x80
 8010b9e:	0209      	lsls	r1, r1, #8
 8010ba0:	430a      	orrs	r2, r1
 8010ba2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010ba4:	e017      	b.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2180      	movs	r1, #128	@ 0x80
 8010bb2:	01c9      	lsls	r1, r1, #7
 8010bb4:	430a      	orrs	r2, r1
 8010bb6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010bb8:	e00d      	b.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	2220      	movs	r2, #32
 8010bbe:	4013      	ands	r3, r2
 8010bc0:	d009      	beq.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2220      	movs	r2, #32
 8010bc6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010bc8:	d005      	beq.n	8010bd6 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	0011      	movs	r1, r2
 8010bd0:	0018      	movs	r0, r3
 8010bd2:	f000 fa3d 	bl	8011050 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2240      	movs	r2, #64	@ 0x40
 8010bda:	2100      	movs	r1, #0
 8010bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	0018      	movs	r0, r3
 8010be2:	46bd      	mov	sp, r7
 8010be4:	b007      	add	sp, #28
 8010be6:	bd90      	pop	{r4, r7, pc}
 8010be8:	80002000 	.word	0x80002000
 8010bec:	80002400 	.word	0x80002400

08010bf0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b088      	sub	sp, #32
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c00:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8010c02:	2300      	movs	r3, #0
 8010c04:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2240      	movs	r2, #64	@ 0x40
 8010c0a:	5c9b      	ldrb	r3, [r3, r2]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d101      	bne.n	8010c14 <I2C_Slave_ISR_DMA+0x24>
 8010c10:	2302      	movs	r3, #2
 8010c12:	e0cd      	b.n	8010db0 <I2C_Slave_ISR_DMA+0x1c0>
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2240      	movs	r2, #64	@ 0x40
 8010c18:	2101      	movs	r1, #1
 8010c1a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2220      	movs	r2, #32
 8010c20:	4013      	ands	r3, r2
 8010c22:	d009      	beq.n	8010c38 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2220      	movs	r2, #32
 8010c28:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010c2a:	d005      	beq.n	8010c38 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8010c2c:	68ba      	ldr	r2, [r7, #8]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	0011      	movs	r1, r2
 8010c32:	0018      	movs	r0, r3
 8010c34:	f000 fada 	bl	80111ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	2210      	movs	r2, #16
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	d100      	bne.n	8010c42 <I2C_Slave_ISR_DMA+0x52>
 8010c40:	e0a3      	b.n	8010d8a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2210      	movs	r2, #16
 8010c46:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010c48:	d100      	bne.n	8010c4c <I2C_Slave_ISR_DMA+0x5c>
 8010c4a:	e09e      	b.n	8010d8a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	2380      	movs	r3, #128	@ 0x80
 8010c50:	01db      	lsls	r3, r3, #7
 8010c52:	4013      	ands	r3, r2
 8010c54:	d105      	bne.n	8010c62 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	2380      	movs	r3, #128	@ 0x80
 8010c5a:	021b      	lsls	r3, r3, #8
 8010c5c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010c5e:	d100      	bne.n	8010c62 <I2C_Slave_ISR_DMA+0x72>
 8010c60:	e08c      	b.n	8010d7c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00c      	beq.n	8010c84 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	2380      	movs	r3, #128	@ 0x80
 8010c6e:	021b      	lsls	r3, r3, #8
 8010c70:	4013      	ands	r3, r2
 8010c72:	d007      	beq.n	8010c84 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d101      	bne.n	8010c84 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010c80:	2301      	movs	r3, #1
 8010c82:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00c      	beq.n	8010ca6 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	2380      	movs	r3, #128	@ 0x80
 8010c90:	01db      	lsls	r3, r3, #7
 8010c92:	4013      	ands	r3, r2
 8010c94:	d007      	beq.n	8010ca6 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d101      	bne.n	8010ca6 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d12d      	bne.n	8010d08 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2241      	movs	r2, #65	@ 0x41
 8010cb0:	5c9b      	ldrb	r3, [r3, r2]
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	2b28      	cmp	r3, #40	@ 0x28
 8010cb6:	d10b      	bne.n	8010cd0 <I2C_Slave_ISR_DMA+0xe0>
 8010cb8:	69ba      	ldr	r2, [r7, #24]
 8010cba:	2380      	movs	r3, #128	@ 0x80
 8010cbc:	049b      	lsls	r3, r3, #18
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d106      	bne.n	8010cd0 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8010cc2:	68ba      	ldr	r2, [r7, #8]
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	0011      	movs	r1, r2
 8010cc8:	0018      	movs	r0, r3
 8010cca:	f000 fbaf 	bl	801142c <I2C_ITListenCplt>
 8010cce:	e054      	b.n	8010d7a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	2241      	movs	r2, #65	@ 0x41
 8010cd4:	5c9b      	ldrb	r3, [r3, r2]
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	2b29      	cmp	r3, #41	@ 0x29
 8010cda:	d110      	bne.n	8010cfe <I2C_Slave_ISR_DMA+0x10e>
 8010cdc:	69bb      	ldr	r3, [r7, #24]
 8010cde:	4a36      	ldr	r2, [pc, #216]	@ (8010db8 <I2C_Slave_ISR_DMA+0x1c8>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d00c      	beq.n	8010cfe <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2210      	movs	r2, #16
 8010cea:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	0018      	movs	r0, r3
 8010cf0:	f000 fd1f 	bl	8011732 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	0018      	movs	r0, r3
 8010cf8:	f000 f946 	bl	8010f88 <I2C_ITSlaveSeqCplt>
 8010cfc:	e03d      	b.n	8010d7a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2210      	movs	r2, #16
 8010d04:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8010d06:	e03e      	b.n	8010d86 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2210      	movs	r2, #16
 8010d0e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d14:	2204      	movs	r2, #4
 8010d16:	431a      	orrs	r2, r3
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8010d1c:	2317      	movs	r3, #23
 8010d1e:	18fb      	adds	r3, r7, r3
 8010d20:	68fa      	ldr	r2, [r7, #12]
 8010d22:	2141      	movs	r1, #65	@ 0x41
 8010d24:	5c52      	ldrb	r2, [r2, r1]
 8010d26:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010d28:	69bb      	ldr	r3, [r7, #24]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d004      	beq.n	8010d38 <I2C_Slave_ISR_DMA+0x148>
 8010d2e:	69ba      	ldr	r2, [r7, #24]
 8010d30:	2380      	movs	r3, #128	@ 0x80
 8010d32:	045b      	lsls	r3, r3, #17
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d126      	bne.n	8010d86 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010d38:	2217      	movs	r2, #23
 8010d3a:	18bb      	adds	r3, r7, r2
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	2b21      	cmp	r3, #33	@ 0x21
 8010d40:	d003      	beq.n	8010d4a <I2C_Slave_ISR_DMA+0x15a>
 8010d42:	18bb      	adds	r3, r7, r2
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2b29      	cmp	r3, #41	@ 0x29
 8010d48:	d103      	bne.n	8010d52 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2221      	movs	r2, #33	@ 0x21
 8010d4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010d50:	e00b      	b.n	8010d6a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010d52:	2217      	movs	r2, #23
 8010d54:	18bb      	adds	r3, r7, r2
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	2b22      	cmp	r3, #34	@ 0x22
 8010d5a:	d003      	beq.n	8010d64 <I2C_Slave_ISR_DMA+0x174>
 8010d5c:	18bb      	adds	r3, r7, r2
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d62:	d102      	bne.n	8010d6a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2222      	movs	r2, #34	@ 0x22
 8010d68:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	0011      	movs	r1, r2
 8010d72:	0018      	movs	r0, r3
 8010d74:	f000 fbb2 	bl	80114dc <I2C_ITError>
      if (treatdmanack == 1U)
 8010d78:	e005      	b.n	8010d86 <I2C_Slave_ISR_DMA+0x196>
 8010d7a:	e004      	b.n	8010d86 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2210      	movs	r2, #16
 8010d82:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010d84:	e00f      	b.n	8010da6 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010d86:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010d88:	e00d      	b.n	8010da6 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	2208      	movs	r2, #8
 8010d8e:	4013      	ands	r3, r2
 8010d90:	d009      	beq.n	8010da6 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2208      	movs	r2, #8
 8010d96:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010d98:	d005      	beq.n	8010da6 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8010d9a:	68ba      	ldr	r2, [r7, #8]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	0011      	movs	r1, r2
 8010da0:	0018      	movs	r0, r3
 8010da2:	f000 f80b 	bl	8010dbc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2240      	movs	r2, #64	@ 0x40
 8010daa:	2100      	movs	r1, #0
 8010dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	0018      	movs	r0, r3
 8010db2:	46bd      	mov	sp, r7
 8010db4:	b008      	add	sp, #32
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	ffff0000 	.word	0xffff0000

08010dbc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010dbc:	b5b0      	push	{r4, r5, r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2241      	movs	r2, #65	@ 0x41
 8010dca:	5c9b      	ldrb	r3, [r3, r2]
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	001a      	movs	r2, r3
 8010dd0:	2328      	movs	r3, #40	@ 0x28
 8010dd2:	4013      	ands	r3, r2
 8010dd4:	2b28      	cmp	r3, #40	@ 0x28
 8010dd6:	d000      	beq.n	8010dda <I2C_ITAddrCplt+0x1e>
 8010dd8:	e088      	b.n	8010eec <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	699b      	ldr	r3, [r3, #24]
 8010de0:	0c1b      	lsrs	r3, r3, #16
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	250f      	movs	r5, #15
 8010de6:	197b      	adds	r3, r7, r5
 8010de8:	2101      	movs	r1, #1
 8010dea:	400a      	ands	r2, r1
 8010dec:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	699b      	ldr	r3, [r3, #24]
 8010df4:	0c1b      	lsrs	r3, r3, #16
 8010df6:	b29a      	uxth	r2, r3
 8010df8:	200c      	movs	r0, #12
 8010dfa:	183b      	adds	r3, r7, r0
 8010dfc:	21fe      	movs	r1, #254	@ 0xfe
 8010dfe:	400a      	ands	r2, r1
 8010e00:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	689b      	ldr	r3, [r3, #8]
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	240a      	movs	r4, #10
 8010e0c:	193b      	adds	r3, r7, r4
 8010e0e:	0592      	lsls	r2, r2, #22
 8010e10:	0d92      	lsrs	r2, r2, #22
 8010e12:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	2308      	movs	r3, #8
 8010e1e:	18fb      	adds	r3, r7, r3
 8010e20:	21fe      	movs	r1, #254	@ 0xfe
 8010e22:	400a      	ands	r2, r1
 8010e24:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	2b02      	cmp	r3, #2
 8010e2c:	d148      	bne.n	8010ec0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8010e2e:	0021      	movs	r1, r4
 8010e30:	187b      	adds	r3, r7, r1
 8010e32:	881b      	ldrh	r3, [r3, #0]
 8010e34:	09db      	lsrs	r3, r3, #7
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	183b      	adds	r3, r7, r0
 8010e3a:	881b      	ldrh	r3, [r3, #0]
 8010e3c:	4053      	eors	r3, r2
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	001a      	movs	r2, r3
 8010e42:	2306      	movs	r3, #6
 8010e44:	4013      	ands	r3, r2
 8010e46:	d120      	bne.n	8010e8a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010e48:	183b      	adds	r3, r7, r0
 8010e4a:	187a      	adds	r2, r7, r1
 8010e4c:	8812      	ldrh	r2, [r2, #0]
 8010e4e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e54:	1c5a      	adds	r2, r3, #1
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e5e:	2b02      	cmp	r3, #2
 8010e60:	d14c      	bne.n	8010efc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2208      	movs	r2, #8
 8010e6e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2240      	movs	r2, #64	@ 0x40
 8010e74:	2100      	movs	r1, #0
 8010e76:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010e78:	183b      	adds	r3, r7, r0
 8010e7a:	881a      	ldrh	r2, [r3, #0]
 8010e7c:	197b      	adds	r3, r7, r5
 8010e7e:	7819      	ldrb	r1, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	0018      	movs	r0, r3
 8010e84:	f7ff fa39 	bl	80102fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010e88:	e038      	b.n	8010efc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8010e8a:	240c      	movs	r4, #12
 8010e8c:	193b      	adds	r3, r7, r4
 8010e8e:	2208      	movs	r2, #8
 8010e90:	18ba      	adds	r2, r7, r2
 8010e92:	8812      	ldrh	r2, [r2, #0]
 8010e94:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010e96:	2380      	movs	r3, #128	@ 0x80
 8010e98:	021a      	lsls	r2, r3, #8
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	0011      	movs	r1, r2
 8010e9e:	0018      	movs	r0, r3
 8010ea0:	f001 f85c 	bl	8011f5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2240      	movs	r2, #64	@ 0x40
 8010ea8:	2100      	movs	r1, #0
 8010eaa:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010eac:	193b      	adds	r3, r7, r4
 8010eae:	881a      	ldrh	r2, [r3, #0]
 8010eb0:	230f      	movs	r3, #15
 8010eb2:	18fb      	adds	r3, r7, r3
 8010eb4:	7819      	ldrb	r1, [r3, #0]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	0018      	movs	r0, r3
 8010eba:	f7ff fa1e 	bl	80102fa <HAL_I2C_AddrCallback>
}
 8010ebe:	e01d      	b.n	8010efc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010ec0:	2380      	movs	r3, #128	@ 0x80
 8010ec2:	021a      	lsls	r2, r3, #8
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	0011      	movs	r1, r2
 8010ec8:	0018      	movs	r0, r3
 8010eca:	f001 f847 	bl	8011f5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2240      	movs	r2, #64	@ 0x40
 8010ed2:	2100      	movs	r1, #0
 8010ed4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010ed6:	230c      	movs	r3, #12
 8010ed8:	18fb      	adds	r3, r7, r3
 8010eda:	881a      	ldrh	r2, [r3, #0]
 8010edc:	230f      	movs	r3, #15
 8010ede:	18fb      	adds	r3, r7, r3
 8010ee0:	7819      	ldrb	r1, [r3, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	0018      	movs	r0, r3
 8010ee6:	f7ff fa08 	bl	80102fa <HAL_I2C_AddrCallback>
}
 8010eea:	e007      	b.n	8010efc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	2208      	movs	r2, #8
 8010ef2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2240      	movs	r2, #64	@ 0x40
 8010ef8:	2100      	movs	r1, #0
 8010efa:	5499      	strb	r1, [r3, r2]
}
 8010efc:	46c0      	nop			@ (mov r8, r8)
 8010efe:	46bd      	mov	sp, r7
 8010f00:	b004      	add	sp, #16
 8010f02:	bdb0      	pop	{r4, r5, r7, pc}

08010f04 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2242      	movs	r2, #66	@ 0x42
 8010f10:	2100      	movs	r1, #0
 8010f12:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2241      	movs	r2, #65	@ 0x41
 8010f18:	5c9b      	ldrb	r3, [r3, r2]
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	2b21      	cmp	r3, #33	@ 0x21
 8010f1e:	d117      	bne.n	8010f50 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2241      	movs	r2, #65	@ 0x41
 8010f24:	2120      	movs	r1, #32
 8010f26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2211      	movs	r2, #17
 8010f2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2200      	movs	r2, #0
 8010f32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2101      	movs	r1, #1
 8010f38:	0018      	movs	r0, r3
 8010f3a:	f001 f80f 	bl	8011f5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2240      	movs	r2, #64	@ 0x40
 8010f42:	2100      	movs	r1, #0
 8010f44:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	0018      	movs	r0, r3
 8010f4a:	f7ff f9b6 	bl	80102ba <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010f4e:	e016      	b.n	8010f7e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2241      	movs	r2, #65	@ 0x41
 8010f54:	2120      	movs	r1, #32
 8010f56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2212      	movs	r2, #18
 8010f5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2102      	movs	r1, #2
 8010f68:	0018      	movs	r0, r3
 8010f6a:	f000 fff7 	bl	8011f5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2240      	movs	r2, #64	@ 0x40
 8010f72:	2100      	movs	r1, #0
 8010f74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	0018      	movs	r0, r3
 8010f7a:	f7ff f9a6 	bl	80102ca <HAL_I2C_MasterRxCpltCallback>
}
 8010f7e:	46c0      	nop			@ (mov r8, r8)
 8010f80:	46bd      	mov	sp, r7
 8010f82:	b002      	add	sp, #8
 8010f84:	bd80      	pop	{r7, pc}
	...

08010f88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2242      	movs	r2, #66	@ 0x42
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	2380      	movs	r3, #128	@ 0x80
 8010fa4:	01db      	lsls	r3, r3, #7
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	d008      	beq.n	8010fbc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	681a      	ldr	r2, [r3, #0]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4924      	ldr	r1, [pc, #144]	@ (8011048 <I2C_ITSlaveSeqCplt+0xc0>)
 8010fb6:	400a      	ands	r2, r1
 8010fb8:	601a      	str	r2, [r3, #0]
 8010fba:	e00c      	b.n	8010fd6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	2380      	movs	r3, #128	@ 0x80
 8010fc0:	021b      	lsls	r3, r3, #8
 8010fc2:	4013      	ands	r3, r2
 8010fc4:	d007      	beq.n	8010fd6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	491e      	ldr	r1, [pc, #120]	@ (801104c <I2C_ITSlaveSeqCplt+0xc4>)
 8010fd2:	400a      	ands	r2, r1
 8010fd4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2241      	movs	r2, #65	@ 0x41
 8010fda:	5c9b      	ldrb	r3, [r3, r2]
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	2b29      	cmp	r3, #41	@ 0x29
 8010fe0:	d114      	bne.n	801100c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2241      	movs	r2, #65	@ 0x41
 8010fe6:	2128      	movs	r1, #40	@ 0x28
 8010fe8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2221      	movs	r2, #33	@ 0x21
 8010fee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2101      	movs	r1, #1
 8010ff4:	0018      	movs	r0, r3
 8010ff6:	f000 ffb1 	bl	8011f5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2240      	movs	r2, #64	@ 0x40
 8010ffe:	2100      	movs	r1, #0
 8011000:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	0018      	movs	r0, r3
 8011006:	f7ff f968 	bl	80102da <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801100a:	e019      	b.n	8011040 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2241      	movs	r2, #65	@ 0x41
 8011010:	5c9b      	ldrb	r3, [r3, r2]
 8011012:	b2db      	uxtb	r3, r3
 8011014:	2b2a      	cmp	r3, #42	@ 0x2a
 8011016:	d113      	bne.n	8011040 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2241      	movs	r2, #65	@ 0x41
 801101c:	2128      	movs	r1, #40	@ 0x28
 801101e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2222      	movs	r2, #34	@ 0x22
 8011024:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2102      	movs	r1, #2
 801102a:	0018      	movs	r0, r3
 801102c:	f000 ff96 	bl	8011f5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2240      	movs	r2, #64	@ 0x40
 8011034:	2100      	movs	r1, #0
 8011036:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	0018      	movs	r0, r3
 801103c:	f7ff f955 	bl	80102ea <HAL_I2C_SlaveRxCpltCallback>
}
 8011040:	46c0      	nop			@ (mov r8, r8)
 8011042:	46bd      	mov	sp, r7
 8011044:	b004      	add	sp, #16
 8011046:	bd80      	pop	{r7, pc}
 8011048:	ffffbfff 	.word	0xffffbfff
 801104c:	ffff7fff 	.word	0xffff7fff

08011050 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2220      	movs	r2, #32
 8011064:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2241      	movs	r2, #65	@ 0x41
 801106a:	5c9b      	ldrb	r3, [r3, r2]
 801106c:	b2db      	uxtb	r3, r3
 801106e:	2b21      	cmp	r3, #33	@ 0x21
 8011070:	d108      	bne.n	8011084 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2101      	movs	r1, #1
 8011076:	0018      	movs	r0, r3
 8011078:	f000 ff70 	bl	8011f5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2211      	movs	r2, #17
 8011080:	631a      	str	r2, [r3, #48]	@ 0x30
 8011082:	e00d      	b.n	80110a0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2241      	movs	r2, #65	@ 0x41
 8011088:	5c9b      	ldrb	r3, [r3, r2]
 801108a:	b2db      	uxtb	r3, r3
 801108c:	2b22      	cmp	r3, #34	@ 0x22
 801108e:	d107      	bne.n	80110a0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2102      	movs	r1, #2
 8011094:	0018      	movs	r0, r3
 8011096:	f000 ff61 	bl	8011f5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2212      	movs	r2, #18
 801109e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	685a      	ldr	r2, [r3, #4]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	494e      	ldr	r1, [pc, #312]	@ (80111e4 <I2C_ITMasterCplt+0x194>)
 80110ac:	400a      	ands	r2, r1
 80110ae:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2200      	movs	r2, #0
 80110b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	4a4b      	ldr	r2, [pc, #300]	@ (80111e8 <I2C_ITMasterCplt+0x198>)
 80110ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	2210      	movs	r2, #16
 80110c0:	4013      	ands	r3, r2
 80110c2:	d009      	beq.n	80110d8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	2210      	movs	r2, #16
 80110ca:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110d0:	2204      	movs	r2, #4
 80110d2:	431a      	orrs	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2241      	movs	r2, #65	@ 0x41
 80110dc:	5c9b      	ldrb	r3, [r3, r2]
 80110de:	b2db      	uxtb	r3, r3
 80110e0:	2b60      	cmp	r3, #96	@ 0x60
 80110e2:	d109      	bne.n	80110f8 <I2C_ITMasterCplt+0xa8>
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	2204      	movs	r2, #4
 80110e8:	4013      	ands	r3, r2
 80110ea:	d005      	beq.n	80110f8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80110f6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	0018      	movs	r0, r3
 80110fc:	f000 fb19 	bl	8011732 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011104:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2241      	movs	r2, #65	@ 0x41
 801110a:	5c9b      	ldrb	r3, [r3, r2]
 801110c:	b2db      	uxtb	r3, r3
 801110e:	2b60      	cmp	r3, #96	@ 0x60
 8011110:	d002      	beq.n	8011118 <I2C_ITMasterCplt+0xc8>
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d007      	beq.n	8011128 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	0011      	movs	r1, r2
 8011120:	0018      	movs	r0, r3
 8011122:	f000 f9db 	bl	80114dc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011126:	e058      	b.n	80111da <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2241      	movs	r2, #65	@ 0x41
 801112c:	5c9b      	ldrb	r3, [r3, r2]
 801112e:	b2db      	uxtb	r3, r3
 8011130:	2b21      	cmp	r3, #33	@ 0x21
 8011132:	d126      	bne.n	8011182 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2241      	movs	r2, #65	@ 0x41
 8011138:	2120      	movs	r1, #32
 801113a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2200      	movs	r2, #0
 8011140:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2242      	movs	r2, #66	@ 0x42
 8011146:	5c9b      	ldrb	r3, [r3, r2]
 8011148:	b2db      	uxtb	r3, r3
 801114a:	2b40      	cmp	r3, #64	@ 0x40
 801114c:	d10c      	bne.n	8011168 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2242      	movs	r2, #66	@ 0x42
 8011152:	2100      	movs	r1, #0
 8011154:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2240      	movs	r2, #64	@ 0x40
 801115a:	2100      	movs	r1, #0
 801115c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	0018      	movs	r0, r3
 8011162:	f7ff f8e2 	bl	801032a <HAL_I2C_MemTxCpltCallback>
}
 8011166:	e038      	b.n	80111da <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2242      	movs	r2, #66	@ 0x42
 801116c:	2100      	movs	r1, #0
 801116e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2240      	movs	r2, #64	@ 0x40
 8011174:	2100      	movs	r1, #0
 8011176:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	0018      	movs	r0, r3
 801117c:	f7ff f89d 	bl	80102ba <HAL_I2C_MasterTxCpltCallback>
}
 8011180:	e02b      	b.n	80111da <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2241      	movs	r2, #65	@ 0x41
 8011186:	5c9b      	ldrb	r3, [r3, r2]
 8011188:	b2db      	uxtb	r3, r3
 801118a:	2b22      	cmp	r3, #34	@ 0x22
 801118c:	d125      	bne.n	80111da <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2241      	movs	r2, #65	@ 0x41
 8011192:	2120      	movs	r1, #32
 8011194:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2200      	movs	r2, #0
 801119a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2242      	movs	r2, #66	@ 0x42
 80111a0:	5c9b      	ldrb	r3, [r3, r2]
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	2b40      	cmp	r3, #64	@ 0x40
 80111a6:	d10c      	bne.n	80111c2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2242      	movs	r2, #66	@ 0x42
 80111ac:	2100      	movs	r1, #0
 80111ae:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2240      	movs	r2, #64	@ 0x40
 80111b4:	2100      	movs	r1, #0
 80111b6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	0018      	movs	r0, r3
 80111bc:	f7ff f8bd 	bl	801033a <HAL_I2C_MemRxCpltCallback>
}
 80111c0:	e00b      	b.n	80111da <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2242      	movs	r2, #66	@ 0x42
 80111c6:	2100      	movs	r1, #0
 80111c8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2240      	movs	r2, #64	@ 0x40
 80111ce:	2100      	movs	r1, #0
 80111d0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	0018      	movs	r0, r3
 80111d6:	f7ff f878 	bl	80102ca <HAL_I2C_MasterRxCpltCallback>
}
 80111da:	46c0      	nop			@ (mov r8, r8)
 80111dc:	46bd      	mov	sp, r7
 80111de:	b006      	add	sp, #24
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	46c0      	nop			@ (mov r8, r8)
 80111e4:	fe00e800 	.word	0xfe00e800
 80111e8:	ffff0000 	.word	0xffff0000

080111ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b086      	sub	sp, #24
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011202:	200f      	movs	r0, #15
 8011204:	183b      	adds	r3, r7, r0
 8011206:	687a      	ldr	r2, [r7, #4]
 8011208:	2141      	movs	r1, #65	@ 0x41
 801120a:	5c52      	ldrb	r2, [r2, r1]
 801120c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	2220      	movs	r2, #32
 8011214:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011216:	183b      	adds	r3, r7, r0
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	2b21      	cmp	r3, #33	@ 0x21
 801121c:	d003      	beq.n	8011226 <I2C_ITSlaveCplt+0x3a>
 801121e:	183b      	adds	r3, r7, r0
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	2b29      	cmp	r3, #41	@ 0x29
 8011224:	d109      	bne.n	801123a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011226:	4a7b      	ldr	r2, [pc, #492]	@ (8011414 <I2C_ITSlaveCplt+0x228>)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	0011      	movs	r1, r2
 801122c:	0018      	movs	r0, r3
 801122e:	f000 fe95 	bl	8011f5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2221      	movs	r2, #33	@ 0x21
 8011236:	631a      	str	r2, [r3, #48]	@ 0x30
 8011238:	e011      	b.n	801125e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801123a:	220f      	movs	r2, #15
 801123c:	18bb      	adds	r3, r7, r2
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	2b22      	cmp	r3, #34	@ 0x22
 8011242:	d003      	beq.n	801124c <I2C_ITSlaveCplt+0x60>
 8011244:	18bb      	adds	r3, r7, r2
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	2b2a      	cmp	r3, #42	@ 0x2a
 801124a:	d108      	bne.n	801125e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801124c:	4a72      	ldr	r2, [pc, #456]	@ (8011418 <I2C_ITSlaveCplt+0x22c>)
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	0011      	movs	r1, r2
 8011252:	0018      	movs	r0, r3
 8011254:	f000 fe82 	bl	8011f5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2222      	movs	r2, #34	@ 0x22
 801125c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	685a      	ldr	r2, [r3, #4]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2180      	movs	r1, #128	@ 0x80
 801126a:	0209      	lsls	r1, r1, #8
 801126c:	430a      	orrs	r2, r1
 801126e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	685a      	ldr	r2, [r3, #4]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4968      	ldr	r1, [pc, #416]	@ (801141c <I2C_ITSlaveCplt+0x230>)
 801127c:	400a      	ands	r2, r1
 801127e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	0018      	movs	r0, r3
 8011284:	f000 fa55 	bl	8011732 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011288:	693a      	ldr	r2, [r7, #16]
 801128a:	2380      	movs	r3, #128	@ 0x80
 801128c:	01db      	lsls	r3, r3, #7
 801128e:	4013      	ands	r3, r2
 8011290:	d013      	beq.n	80112ba <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4960      	ldr	r1, [pc, #384]	@ (8011420 <I2C_ITSlaveCplt+0x234>)
 801129e:	400a      	ands	r2, r1
 80112a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d01f      	beq.n	80112ea <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112b8:	e017      	b.n	80112ea <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80112ba:	693a      	ldr	r2, [r7, #16]
 80112bc:	2380      	movs	r3, #128	@ 0x80
 80112be:	021b      	lsls	r3, r3, #8
 80112c0:	4013      	ands	r3, r2
 80112c2:	d012      	beq.n	80112ea <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	4955      	ldr	r1, [pc, #340]	@ (8011424 <I2C_ITSlaveCplt+0x238>)
 80112d0:	400a      	ands	r2, r1
 80112d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d006      	beq.n	80112ea <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	2204      	movs	r2, #4
 80112ee:	4013      	ands	r3, r2
 80112f0:	d020      	beq.n	8011334 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	2204      	movs	r2, #4
 80112f6:	4393      	bics	r3, r2
 80112f8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011304:	b2d2      	uxtb	r2, r2
 8011306:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801130c:	1c5a      	adds	r2, r3, #1
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00c      	beq.n	8011334 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801131e:	3b01      	subs	r3, #1
 8011320:	b29a      	uxth	r2, r3
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801132a:	b29b      	uxth	r3, r3
 801132c:	3b01      	subs	r3, #1
 801132e:	b29a      	uxth	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011338:	b29b      	uxth	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d005      	beq.n	801134a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011342:	2204      	movs	r2, #4
 8011344:	431a      	orrs	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2242      	movs	r2, #66	@ 0x42
 801134e:	2100      	movs	r1, #0
 8011350:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801135c:	2b00      	cmp	r3, #0
 801135e:	d013      	beq.n	8011388 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	0011      	movs	r1, r2
 8011368:	0018      	movs	r0, r3
 801136a:	f000 f8b7 	bl	80114dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2241      	movs	r2, #65	@ 0x41
 8011372:	5c9b      	ldrb	r3, [r3, r2]
 8011374:	b2db      	uxtb	r3, r3
 8011376:	2b28      	cmp	r3, #40	@ 0x28
 8011378:	d147      	bne.n	801140a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801137a:	697a      	ldr	r2, [r7, #20]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	0011      	movs	r1, r2
 8011380:	0018      	movs	r0, r3
 8011382:	f000 f853 	bl	801142c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011386:	e040      	b.n	801140a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801138c:	4a26      	ldr	r2, [pc, #152]	@ (8011428 <I2C_ITSlaveCplt+0x23c>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d016      	beq.n	80113c0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	0018      	movs	r0, r3
 8011396:	f7ff fdf7 	bl	8010f88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4a22      	ldr	r2, [pc, #136]	@ (8011428 <I2C_ITSlaveCplt+0x23c>)
 801139e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2241      	movs	r2, #65	@ 0x41
 80113a4:	2120      	movs	r1, #32
 80113a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2240      	movs	r2, #64	@ 0x40
 80113b2:	2100      	movs	r1, #0
 80113b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	0018      	movs	r0, r3
 80113ba:	f7fe ffae 	bl	801031a <HAL_I2C_ListenCpltCallback>
}
 80113be:	e024      	b.n	801140a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2241      	movs	r2, #65	@ 0x41
 80113c4:	5c9b      	ldrb	r3, [r3, r2]
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	2b22      	cmp	r3, #34	@ 0x22
 80113ca:	d10f      	bne.n	80113ec <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2241      	movs	r2, #65	@ 0x41
 80113d0:	2120      	movs	r1, #32
 80113d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2240      	movs	r2, #64	@ 0x40
 80113de:	2100      	movs	r1, #0
 80113e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	0018      	movs	r0, r3
 80113e6:	f7fe ff80 	bl	80102ea <HAL_I2C_SlaveRxCpltCallback>
}
 80113ea:	e00e      	b.n	801140a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2241      	movs	r2, #65	@ 0x41
 80113f0:	2120      	movs	r1, #32
 80113f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2200      	movs	r2, #0
 80113f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2240      	movs	r2, #64	@ 0x40
 80113fe:	2100      	movs	r1, #0
 8011400:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	0018      	movs	r0, r3
 8011406:	f7fe ff68 	bl	80102da <HAL_I2C_SlaveTxCpltCallback>
}
 801140a:	46c0      	nop			@ (mov r8, r8)
 801140c:	46bd      	mov	sp, r7
 801140e:	b006      	add	sp, #24
 8011410:	bd80      	pop	{r7, pc}
 8011412:	46c0      	nop			@ (mov r8, r8)
 8011414:	00008001 	.word	0x00008001
 8011418:	00008002 	.word	0x00008002
 801141c:	fe00e800 	.word	0xfe00e800
 8011420:	ffffbfff 	.word	0xffffbfff
 8011424:	ffff7fff 	.word	0xffff7fff
 8011428:	ffff0000 	.word	0xffff0000

0801142c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	4a26      	ldr	r2, [pc, #152]	@ (80114d4 <I2C_ITListenCplt+0xa8>)
 801143a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2200      	movs	r2, #0
 8011440:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2241      	movs	r2, #65	@ 0x41
 8011446:	2120      	movs	r1, #32
 8011448:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2242      	movs	r2, #66	@ 0x42
 801144e:	2100      	movs	r1, #0
 8011450:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2200      	movs	r2, #0
 8011456:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	2204      	movs	r2, #4
 801145c:	4013      	ands	r3, r2
 801145e:	d022      	beq.n	80114a6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801146a:	b2d2      	uxtb	r2, r2
 801146c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011472:	1c5a      	adds	r2, r3, #1
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801147c:	2b00      	cmp	r3, #0
 801147e:	d012      	beq.n	80114a6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011484:	3b01      	subs	r3, #1
 8011486:	b29a      	uxth	r2, r3
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011490:	b29b      	uxth	r3, r3
 8011492:	3b01      	subs	r3, #1
 8011494:	b29a      	uxth	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801149e:	2204      	movs	r2, #4
 80114a0:	431a      	orrs	r2, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80114a6:	4a0c      	ldr	r2, [pc, #48]	@ (80114d8 <I2C_ITListenCplt+0xac>)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	0011      	movs	r1, r2
 80114ac:	0018      	movs	r0, r3
 80114ae:	f000 fd55 	bl	8011f5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2210      	movs	r2, #16
 80114b8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2240      	movs	r2, #64	@ 0x40
 80114be:	2100      	movs	r1, #0
 80114c0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	0018      	movs	r0, r3
 80114c6:	f7fe ff28 	bl	801031a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80114ca:	46c0      	nop			@ (mov r8, r8)
 80114cc:	46bd      	mov	sp, r7
 80114ce:	b002      	add	sp, #8
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	46c0      	nop			@ (mov r8, r8)
 80114d4:	ffff0000 	.word	0xffff0000
 80114d8:	00008003 	.word	0x00008003

080114dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80114e6:	200f      	movs	r0, #15
 80114e8:	183b      	adds	r3, r7, r0
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	2141      	movs	r1, #65	@ 0x41
 80114ee:	5c52      	ldrb	r2, [r2, r1]
 80114f0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2242      	movs	r2, #66	@ 0x42
 80114f6:	2100      	movs	r1, #0
 80114f8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	4a72      	ldr	r2, [pc, #456]	@ (80116c8 <I2C_ITError+0x1ec>)
 80114fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	431a      	orrs	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8011512:	183b      	adds	r3, r7, r0
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	2b28      	cmp	r3, #40	@ 0x28
 8011518:	d007      	beq.n	801152a <I2C_ITError+0x4e>
 801151a:	183b      	adds	r3, r7, r0
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	2b29      	cmp	r3, #41	@ 0x29
 8011520:	d003      	beq.n	801152a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8011522:	183b      	adds	r3, r7, r0
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	2b2a      	cmp	r3, #42	@ 0x2a
 8011528:	d10c      	bne.n	8011544 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2103      	movs	r1, #3
 801152e:	0018      	movs	r0, r3
 8011530:	f000 fd14 	bl	8011f5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2241      	movs	r2, #65	@ 0x41
 8011538:	2128      	movs	r1, #40	@ 0x28
 801153a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4a63      	ldr	r2, [pc, #396]	@ (80116cc <I2C_ITError+0x1f0>)
 8011540:	635a      	str	r2, [r3, #52]	@ 0x34
 8011542:	e032      	b.n	80115aa <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011544:	4a62      	ldr	r2, [pc, #392]	@ (80116d0 <I2C_ITError+0x1f4>)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	0011      	movs	r1, r2
 801154a:	0018      	movs	r0, r3
 801154c:	f000 fd06 	bl	8011f5c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	0018      	movs	r0, r3
 8011554:	f000 f8ed 	bl	8011732 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2241      	movs	r2, #65	@ 0x41
 801155c:	5c9b      	ldrb	r3, [r3, r2]
 801155e:	b2db      	uxtb	r3, r3
 8011560:	2b60      	cmp	r3, #96	@ 0x60
 8011562:	d01f      	beq.n	80115a4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2241      	movs	r2, #65	@ 0x41
 8011568:	2120      	movs	r1, #32
 801156a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	699b      	ldr	r3, [r3, #24]
 8011572:	2220      	movs	r2, #32
 8011574:	4013      	ands	r3, r2
 8011576:	2b20      	cmp	r3, #32
 8011578:	d114      	bne.n	80115a4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	2210      	movs	r2, #16
 8011582:	4013      	ands	r3, r2
 8011584:	2b10      	cmp	r3, #16
 8011586:	d109      	bne.n	801159c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	2210      	movs	r2, #16
 801158e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011594:	2204      	movs	r2, #4
 8011596:	431a      	orrs	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2220      	movs	r2, #32
 80115a2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2200      	movs	r2, #0
 80115a8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d03b      	beq.n	8011630 <I2C_ITError+0x154>
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	2b11      	cmp	r3, #17
 80115bc:	d002      	beq.n	80115c4 <I2C_ITError+0xe8>
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2b21      	cmp	r3, #33	@ 0x21
 80115c2:	d135      	bne.n	8011630 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	2380      	movs	r3, #128	@ 0x80
 80115cc:	01db      	lsls	r3, r3, #7
 80115ce:	401a      	ands	r2, r3
 80115d0:	2380      	movs	r3, #128	@ 0x80
 80115d2:	01db      	lsls	r3, r3, #7
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d107      	bne.n	80115e8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	493c      	ldr	r1, [pc, #240]	@ (80116d4 <I2C_ITError+0x1f8>)
 80115e4:	400a      	ands	r2, r1
 80115e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115ec:	0018      	movs	r0, r3
 80115ee:	f7fd fd62 	bl	800f0b6 <HAL_DMA_GetState>
 80115f2:	0003      	movs	r3, r0
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d016      	beq.n	8011626 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115fc:	4a36      	ldr	r2, [pc, #216]	@ (80116d8 <I2C_ITError+0x1fc>)
 80115fe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2240      	movs	r2, #64	@ 0x40
 8011604:	2100      	movs	r1, #0
 8011606:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801160c:	0018      	movs	r0, r3
 801160e:	f7fd fc5d 	bl	800eecc <HAL_DMA_Abort_IT>
 8011612:	1e03      	subs	r3, r0, #0
 8011614:	d051      	beq.n	80116ba <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801161a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011620:	0018      	movs	r0, r3
 8011622:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011624:	e049      	b.n	80116ba <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	0018      	movs	r0, r3
 801162a:	f000 f859 	bl	80116e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801162e:	e044      	b.n	80116ba <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011634:	2b00      	cmp	r3, #0
 8011636:	d03b      	beq.n	80116b0 <I2C_ITError+0x1d4>
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	2b12      	cmp	r3, #18
 801163c:	d002      	beq.n	8011644 <I2C_ITError+0x168>
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	2b22      	cmp	r3, #34	@ 0x22
 8011642:	d135      	bne.n	80116b0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	2380      	movs	r3, #128	@ 0x80
 801164c:	021b      	lsls	r3, r3, #8
 801164e:	401a      	ands	r2, r3
 8011650:	2380      	movs	r3, #128	@ 0x80
 8011652:	021b      	lsls	r3, r3, #8
 8011654:	429a      	cmp	r2, r3
 8011656:	d107      	bne.n	8011668 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	491e      	ldr	r1, [pc, #120]	@ (80116dc <I2C_ITError+0x200>)
 8011664:	400a      	ands	r2, r1
 8011666:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801166c:	0018      	movs	r0, r3
 801166e:	f7fd fd22 	bl	800f0b6 <HAL_DMA_GetState>
 8011672:	0003      	movs	r3, r0
 8011674:	2b01      	cmp	r3, #1
 8011676:	d016      	beq.n	80116a6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801167c:	4a16      	ldr	r2, [pc, #88]	@ (80116d8 <I2C_ITError+0x1fc>)
 801167e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2240      	movs	r2, #64	@ 0x40
 8011684:	2100      	movs	r1, #0
 8011686:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801168c:	0018      	movs	r0, r3
 801168e:	f7fd fc1d 	bl	800eecc <HAL_DMA_Abort_IT>
 8011692:	1e03      	subs	r3, r0, #0
 8011694:	d013      	beq.n	80116be <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801169a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116a0:	0018      	movs	r0, r3
 80116a2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80116a4:	e00b      	b.n	80116be <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	0018      	movs	r0, r3
 80116aa:	f000 f819 	bl	80116e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80116ae:	e006      	b.n	80116be <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	0018      	movs	r0, r3
 80116b4:	f000 f814 	bl	80116e0 <I2C_TreatErrorCallback>
  }
}
 80116b8:	e002      	b.n	80116c0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80116ba:	46c0      	nop			@ (mov r8, r8)
 80116bc:	e000      	b.n	80116c0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80116be:	46c0      	nop			@ (mov r8, r8)
}
 80116c0:	46c0      	nop			@ (mov r8, r8)
 80116c2:	46bd      	mov	sp, r7
 80116c4:	b004      	add	sp, #16
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	ffff0000 	.word	0xffff0000
 80116cc:	080105c1 	.word	0x080105c1
 80116d0:	00008003 	.word	0x00008003
 80116d4:	ffffbfff 	.word	0xffffbfff
 80116d8:	080118eb 	.word	0x080118eb
 80116dc:	ffff7fff 	.word	0xffff7fff

080116e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b082      	sub	sp, #8
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2241      	movs	r2, #65	@ 0x41
 80116ec:	5c9b      	ldrb	r3, [r3, r2]
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	2b60      	cmp	r3, #96	@ 0x60
 80116f2:	d10f      	bne.n	8011714 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2241      	movs	r2, #65	@ 0x41
 80116f8:	2120      	movs	r1, #32
 80116fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2200      	movs	r2, #0
 8011700:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2240      	movs	r2, #64	@ 0x40
 8011706:	2100      	movs	r1, #0
 8011708:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	0018      	movs	r0, r3
 801170e:	f7fe fe24 	bl	801035a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011712:	e00a      	b.n	801172a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2240      	movs	r2, #64	@ 0x40
 801171e:	2100      	movs	r1, #0
 8011720:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	0018      	movs	r0, r3
 8011726:	f7fe fe10 	bl	801034a <HAL_I2C_ErrorCallback>
}
 801172a:	46c0      	nop			@ (mov r8, r8)
 801172c:	46bd      	mov	sp, r7
 801172e:	b002      	add	sp, #8
 8011730:	bd80      	pop	{r7, pc}

08011732 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011732:	b580      	push	{r7, lr}
 8011734:	b082      	sub	sp, #8
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	699b      	ldr	r3, [r3, #24]
 8011740:	2202      	movs	r2, #2
 8011742:	4013      	ands	r3, r2
 8011744:	2b02      	cmp	r3, #2
 8011746:	d103      	bne.n	8011750 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2200      	movs	r2, #0
 801174e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	699b      	ldr	r3, [r3, #24]
 8011756:	2201      	movs	r2, #1
 8011758:	4013      	ands	r3, r2
 801175a:	2b01      	cmp	r3, #1
 801175c:	d007      	beq.n	801176e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	699a      	ldr	r2, [r3, #24]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	2101      	movs	r1, #1
 801176a:	430a      	orrs	r2, r1
 801176c:	619a      	str	r2, [r3, #24]
  }
}
 801176e:	46c0      	nop			@ (mov r8, r8)
 8011770:	46bd      	mov	sp, r7
 8011772:	b002      	add	sp, #8
 8011774:	bd80      	pop	{r7, pc}
	...

08011778 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011784:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4920      	ldr	r1, [pc, #128]	@ (8011814 <I2C_DMAMasterTransmitCplt+0x9c>)
 8011792:	400a      	ands	r2, r1
 8011794:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801179a:	b29b      	uxth	r3, r3
 801179c:	2b00      	cmp	r3, #0
 801179e:	d105      	bne.n	80117ac <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2120      	movs	r1, #32
 80117a4:	0018      	movs	r0, r3
 80117a6:	f000 fb4b 	bl	8011e40 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80117aa:	e02e      	b.n	801180a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80117b4:	189a      	adds	r2, r3, r2
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117be:	b29b      	uxth	r3, r3
 80117c0:	2bff      	cmp	r3, #255	@ 0xff
 80117c2:	d903      	bls.n	80117cc <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	22ff      	movs	r2, #255	@ 0xff
 80117c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80117ca:	e004      	b.n	80117d6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117de:	0019      	movs	r1, r3
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3328      	adds	r3, #40	@ 0x28
 80117e6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80117ec:	f7fd fac8 	bl	800ed80 <HAL_DMA_Start_IT>
 80117f0:	1e03      	subs	r3, r0, #0
 80117f2:	d005      	beq.n	8011800 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2110      	movs	r1, #16
 80117f8:	0018      	movs	r0, r3
 80117fa:	f7ff fe6f 	bl	80114dc <I2C_ITError>
}
 80117fe:	e004      	b.n	801180a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2140      	movs	r1, #64	@ 0x40
 8011804:	0018      	movs	r0, r3
 8011806:	f000 fb1b 	bl	8011e40 <I2C_Enable_IRQ>
}
 801180a:	46c0      	nop			@ (mov r8, r8)
 801180c:	46bd      	mov	sp, r7
 801180e:	b004      	add	sp, #16
 8011810:	bd80      	pop	{r7, pc}
 8011812:	46c0      	nop			@ (mov r8, r8)
 8011814:	ffffbfff 	.word	0xffffbfff

08011818 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011824:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4920      	ldr	r1, [pc, #128]	@ (80118b4 <I2C_DMAMasterReceiveCplt+0x9c>)
 8011832:	400a      	ands	r2, r1
 8011834:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801183a:	b29b      	uxth	r3, r3
 801183c:	2b00      	cmp	r3, #0
 801183e:	d105      	bne.n	801184c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2120      	movs	r1, #32
 8011844:	0018      	movs	r0, r3
 8011846:	f000 fafb 	bl	8011e40 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801184a:	e02e      	b.n	80118aa <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011854:	189a      	adds	r2, r3, r2
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801185e:	b29b      	uxth	r3, r3
 8011860:	2bff      	cmp	r3, #255	@ 0xff
 8011862:	d903      	bls.n	801186c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	22ff      	movs	r2, #255	@ 0xff
 8011868:	851a      	strh	r2, [r3, #40]	@ 0x28
 801186a:	e004      	b.n	8011876 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011870:	b29a      	uxth	r2, r3
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	3324      	adds	r3, #36	@ 0x24
 8011880:	0019      	movs	r1, r3
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011886:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801188c:	f7fd fa78 	bl	800ed80 <HAL_DMA_Start_IT>
 8011890:	1e03      	subs	r3, r0, #0
 8011892:	d005      	beq.n	80118a0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2110      	movs	r1, #16
 8011898:	0018      	movs	r0, r3
 801189a:	f7ff fe1f 	bl	80114dc <I2C_ITError>
}
 801189e:	e004      	b.n	80118aa <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2140      	movs	r1, #64	@ 0x40
 80118a4:	0018      	movs	r0, r3
 80118a6:	f000 facb 	bl	8011e40 <I2C_Enable_IRQ>
}
 80118aa:	46c0      	nop			@ (mov r8, r8)
 80118ac:	46bd      	mov	sp, r7
 80118ae:	b004      	add	sp, #16
 80118b0:	bd80      	pop	{r7, pc}
 80118b2:	46c0      	nop			@ (mov r8, r8)
 80118b4:	ffff7fff 	.word	0xffff7fff

080118b8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118c4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	685a      	ldr	r2, [r3, #4]
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2180      	movs	r1, #128	@ 0x80
 80118d2:	0209      	lsls	r1, r1, #8
 80118d4:	430a      	orrs	r2, r1
 80118d6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2110      	movs	r1, #16
 80118dc:	0018      	movs	r0, r3
 80118de:	f7ff fdfd 	bl	80114dc <I2C_ITError>
}
 80118e2:	46c0      	nop			@ (mov r8, r8)
 80118e4:	46bd      	mov	sp, r7
 80118e6:	b004      	add	sp, #16
 80118e8:	bd80      	pop	{r7, pc}

080118ea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b084      	sub	sp, #16
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118f6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d003      	beq.n	8011908 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011904:	2200      	movs	r2, #0
 8011906:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801190c:	2b00      	cmp	r3, #0
 801190e:	d003      	beq.n	8011918 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011914:	2200      	movs	r2, #0
 8011916:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	0018      	movs	r0, r3
 801191c:	f7ff fee0 	bl	80116e0 <I2C_TreatErrorCallback>
}
 8011920:	46c0      	nop			@ (mov r8, r8)
 8011922:	46bd      	mov	sp, r7
 8011924:	b004      	add	sp, #16
 8011926:	bd80      	pop	{r7, pc}

08011928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b084      	sub	sp, #16
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	603b      	str	r3, [r7, #0]
 8011934:	1dfb      	adds	r3, r7, #7
 8011936:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011938:	e030      	b.n	801199c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	3301      	adds	r3, #1
 801193e:	d02d      	beq.n	801199c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011940:	f7fc fce2 	bl	800e308 <HAL_GetTick>
 8011944:	0002      	movs	r2, r0
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	683a      	ldr	r2, [r7, #0]
 801194c:	429a      	cmp	r2, r3
 801194e:	d302      	bcc.n	8011956 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d122      	bne.n	801199c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	699b      	ldr	r3, [r3, #24]
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	4013      	ands	r3, r2
 8011960:	68ba      	ldr	r2, [r7, #8]
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	425a      	negs	r2, r3
 8011966:	4153      	adcs	r3, r2
 8011968:	b2db      	uxtb	r3, r3
 801196a:	001a      	movs	r2, r3
 801196c:	1dfb      	adds	r3, r7, #7
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	429a      	cmp	r2, r3
 8011972:	d113      	bne.n	801199c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011978:	2220      	movs	r2, #32
 801197a:	431a      	orrs	r2, r3
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2241      	movs	r2, #65	@ 0x41
 8011984:	2120      	movs	r1, #32
 8011986:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2242      	movs	r2, #66	@ 0x42
 801198c:	2100      	movs	r1, #0
 801198e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2240      	movs	r2, #64	@ 0x40
 8011994:	2100      	movs	r1, #0
 8011996:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011998:	2301      	movs	r3, #1
 801199a:	e00f      	b.n	80119bc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	68ba      	ldr	r2, [r7, #8]
 80119a4:	4013      	ands	r3, r2
 80119a6:	68ba      	ldr	r2, [r7, #8]
 80119a8:	1ad3      	subs	r3, r2, r3
 80119aa:	425a      	negs	r2, r3
 80119ac:	4153      	adcs	r3, r2
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	001a      	movs	r2, r3
 80119b2:	1dfb      	adds	r3, r7, #7
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d0bf      	beq.n	801193a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80119ba:	2300      	movs	r3, #0
}
 80119bc:	0018      	movs	r0, r3
 80119be:	46bd      	mov	sp, r7
 80119c0:	b004      	add	sp, #16
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	60b9      	str	r1, [r7, #8]
 80119ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80119d0:	e032      	b.n	8011a38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	68b9      	ldr	r1, [r7, #8]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	0018      	movs	r0, r3
 80119da:	f000 f8ff 	bl	8011bdc <I2C_IsErrorOccurred>
 80119de:	1e03      	subs	r3, r0, #0
 80119e0:	d001      	beq.n	80119e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80119e2:	2301      	movs	r3, #1
 80119e4:	e030      	b.n	8011a48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	3301      	adds	r3, #1
 80119ea:	d025      	beq.n	8011a38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119ec:	f7fc fc8c 	bl	800e308 <HAL_GetTick>
 80119f0:	0002      	movs	r2, r0
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	1ad3      	subs	r3, r2, r3
 80119f6:	68ba      	ldr	r2, [r7, #8]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d302      	bcc.n	8011a02 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d11a      	bne.n	8011a38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	699b      	ldr	r3, [r3, #24]
 8011a08:	2202      	movs	r2, #2
 8011a0a:	4013      	ands	r3, r2
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d013      	beq.n	8011a38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a14:	2220      	movs	r2, #32
 8011a16:	431a      	orrs	r2, r3
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2241      	movs	r2, #65	@ 0x41
 8011a20:	2120      	movs	r1, #32
 8011a22:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2242      	movs	r2, #66	@ 0x42
 8011a28:	2100      	movs	r1, #0
 8011a2a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2240      	movs	r2, #64	@ 0x40
 8011a30:	2100      	movs	r1, #0
 8011a32:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8011a34:	2301      	movs	r3, #1
 8011a36:	e007      	b.n	8011a48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	699b      	ldr	r3, [r3, #24]
 8011a3e:	2202      	movs	r2, #2
 8011a40:	4013      	ands	r3, r2
 8011a42:	2b02      	cmp	r3, #2
 8011a44:	d1c5      	bne.n	80119d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011a46:	2300      	movs	r3, #0
}
 8011a48:	0018      	movs	r0, r3
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	b004      	add	sp, #16
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a5c:	e02f      	b.n	8011abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011a5e:	687a      	ldr	r2, [r7, #4]
 8011a60:	68b9      	ldr	r1, [r7, #8]
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	0018      	movs	r0, r3
 8011a66:	f000 f8b9 	bl	8011bdc <I2C_IsErrorOccurred>
 8011a6a:	1e03      	subs	r3, r0, #0
 8011a6c:	d001      	beq.n	8011a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e02d      	b.n	8011ace <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a72:	f7fc fc49 	bl	800e308 <HAL_GetTick>
 8011a76:	0002      	movs	r2, r0
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	68ba      	ldr	r2, [r7, #8]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d302      	bcc.n	8011a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d11a      	bne.n	8011abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	699b      	ldr	r3, [r3, #24]
 8011a8e:	2220      	movs	r2, #32
 8011a90:	4013      	ands	r3, r2
 8011a92:	2b20      	cmp	r3, #32
 8011a94:	d013      	beq.n	8011abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a9a:	2220      	movs	r2, #32
 8011a9c:	431a      	orrs	r2, r3
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2241      	movs	r2, #65	@ 0x41
 8011aa6:	2120      	movs	r1, #32
 8011aa8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	2242      	movs	r2, #66	@ 0x42
 8011aae:	2100      	movs	r1, #0
 8011ab0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2240      	movs	r2, #64	@ 0x40
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011aba:	2301      	movs	r3, #1
 8011abc:	e007      	b.n	8011ace <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	699b      	ldr	r3, [r3, #24]
 8011ac4:	2220      	movs	r2, #32
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	2b20      	cmp	r3, #32
 8011aca:	d1c8      	bne.n	8011a5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011acc:	2300      	movs	r3, #0
}
 8011ace:	0018      	movs	r0, r3
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	b004      	add	sp, #16
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011ae4:	e06b      	b.n	8011bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	68b9      	ldr	r1, [r7, #8]
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	0018      	movs	r0, r3
 8011aee:	f000 f875 	bl	8011bdc <I2C_IsErrorOccurred>
 8011af2:	1e03      	subs	r3, r0, #0
 8011af4:	d001      	beq.n	8011afa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011af6:	2301      	movs	r3, #1
 8011af8:	e069      	b.n	8011bce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	699b      	ldr	r3, [r3, #24]
 8011b00:	2220      	movs	r2, #32
 8011b02:	4013      	ands	r3, r2
 8011b04:	2b20      	cmp	r3, #32
 8011b06:	d138      	bne.n	8011b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	699b      	ldr	r3, [r3, #24]
 8011b0e:	2204      	movs	r2, #4
 8011b10:	4013      	ands	r3, r2
 8011b12:	2b04      	cmp	r3, #4
 8011b14:	d105      	bne.n	8011b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d001      	beq.n	8011b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	e055      	b.n	8011bce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	699b      	ldr	r3, [r3, #24]
 8011b28:	2210      	movs	r2, #16
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	2b10      	cmp	r3, #16
 8011b2e:	d107      	bne.n	8011b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2210      	movs	r2, #16
 8011b36:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2204      	movs	r2, #4
 8011b3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8011b3e:	e002      	b.n	8011b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2200      	movs	r2, #0
 8011b44:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	2220      	movs	r2, #32
 8011b4c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	685a      	ldr	r2, [r3, #4]
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	491f      	ldr	r1, [pc, #124]	@ (8011bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8011b5a:	400a      	ands	r2, r1
 8011b5c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2241      	movs	r2, #65	@ 0x41
 8011b62:	2120      	movs	r1, #32
 8011b64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	2242      	movs	r2, #66	@ 0x42
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2240      	movs	r2, #64	@ 0x40
 8011b72:	2100      	movs	r1, #0
 8011b74:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011b76:	2301      	movs	r3, #1
 8011b78:	e029      	b.n	8011bce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b7a:	f7fc fbc5 	bl	800e308 <HAL_GetTick>
 8011b7e:	0002      	movs	r2, r0
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	1ad3      	subs	r3, r2, r3
 8011b84:	68ba      	ldr	r2, [r7, #8]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d302      	bcc.n	8011b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d116      	bne.n	8011bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	699b      	ldr	r3, [r3, #24]
 8011b96:	2204      	movs	r2, #4
 8011b98:	4013      	ands	r3, r2
 8011b9a:	2b04      	cmp	r3, #4
 8011b9c:	d00f      	beq.n	8011bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ba2:	2220      	movs	r2, #32
 8011ba4:	431a      	orrs	r2, r3
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2241      	movs	r2, #65	@ 0x41
 8011bae:	2120      	movs	r1, #32
 8011bb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2240      	movs	r2, #64	@ 0x40
 8011bb6:	2100      	movs	r1, #0
 8011bb8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011bba:	2301      	movs	r3, #1
 8011bbc:	e007      	b.n	8011bce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	699b      	ldr	r3, [r3, #24]
 8011bc4:	2204      	movs	r2, #4
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	2b04      	cmp	r3, #4
 8011bca:	d18c      	bne.n	8011ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011bcc:	2300      	movs	r3, #0
}
 8011bce:	0018      	movs	r0, r3
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	b004      	add	sp, #16
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	46c0      	nop			@ (mov r8, r8)
 8011bd8:	fe00e800 	.word	0xfe00e800

08011bdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b08a      	sub	sp, #40	@ 0x28
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011be8:	2327      	movs	r3, #39	@ 0x27
 8011bea:	18fb      	adds	r3, r7, r3
 8011bec:	2200      	movs	r2, #0
 8011bee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	699b      	ldr	r3, [r3, #24]
 8011bf6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	2210      	movs	r2, #16
 8011c04:	4013      	ands	r3, r2
 8011c06:	d100      	bne.n	8011c0a <I2C_IsErrorOccurred+0x2e>
 8011c08:	e079      	b.n	8011cfe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	2210      	movs	r2, #16
 8011c10:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011c12:	e057      	b.n	8011cc4 <I2C_IsErrorOccurred+0xe8>
 8011c14:	2227      	movs	r2, #39	@ 0x27
 8011c16:	18bb      	adds	r3, r7, r2
 8011c18:	18ba      	adds	r2, r7, r2
 8011c1a:	7812      	ldrb	r2, [r2, #0]
 8011c1c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	3301      	adds	r3, #1
 8011c22:	d04f      	beq.n	8011cc4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011c24:	f7fc fb70 	bl	800e308 <HAL_GetTick>
 8011c28:	0002      	movs	r2, r0
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	1ad3      	subs	r3, r2, r3
 8011c2e:	68ba      	ldr	r2, [r7, #8]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d302      	bcc.n	8011c3a <I2C_IsErrorOccurred+0x5e>
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d144      	bne.n	8011cc4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	685a      	ldr	r2, [r3, #4]
 8011c40:	2380      	movs	r3, #128	@ 0x80
 8011c42:	01db      	lsls	r3, r3, #7
 8011c44:	4013      	ands	r3, r2
 8011c46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011c48:	2013      	movs	r0, #19
 8011c4a:	183b      	adds	r3, r7, r0
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	2142      	movs	r1, #66	@ 0x42
 8011c50:	5c52      	ldrb	r2, [r2, r1]
 8011c52:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	699a      	ldr	r2, [r3, #24]
 8011c5a:	2380      	movs	r3, #128	@ 0x80
 8011c5c:	021b      	lsls	r3, r3, #8
 8011c5e:	401a      	ands	r2, r3
 8011c60:	2380      	movs	r3, #128	@ 0x80
 8011c62:	021b      	lsls	r3, r3, #8
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d126      	bne.n	8011cb6 <I2C_IsErrorOccurred+0xda>
 8011c68:	697a      	ldr	r2, [r7, #20]
 8011c6a:	2380      	movs	r3, #128	@ 0x80
 8011c6c:	01db      	lsls	r3, r3, #7
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d021      	beq.n	8011cb6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8011c72:	183b      	adds	r3, r7, r0
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	2b20      	cmp	r3, #32
 8011c78:	d01d      	beq.n	8011cb6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	685a      	ldr	r2, [r3, #4]
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2180      	movs	r1, #128	@ 0x80
 8011c86:	01c9      	lsls	r1, r1, #7
 8011c88:	430a      	orrs	r2, r1
 8011c8a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011c8c:	f7fc fb3c 	bl	800e308 <HAL_GetTick>
 8011c90:	0003      	movs	r3, r0
 8011c92:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011c94:	e00f      	b.n	8011cb6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011c96:	f7fc fb37 	bl	800e308 <HAL_GetTick>
 8011c9a:	0002      	movs	r2, r0
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	1ad3      	subs	r3, r2, r3
 8011ca0:	2b19      	cmp	r3, #25
 8011ca2:	d908      	bls.n	8011cb6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011ca4:	6a3b      	ldr	r3, [r7, #32]
 8011ca6:	2220      	movs	r2, #32
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011cac:	2327      	movs	r3, #39	@ 0x27
 8011cae:	18fb      	adds	r3, r7, r3
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	701a      	strb	r2, [r3, #0]

              break;
 8011cb4:	e006      	b.n	8011cc4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	699b      	ldr	r3, [r3, #24]
 8011cbc:	2220      	movs	r2, #32
 8011cbe:	4013      	ands	r3, r2
 8011cc0:	2b20      	cmp	r3, #32
 8011cc2:	d1e8      	bne.n	8011c96 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	699b      	ldr	r3, [r3, #24]
 8011cca:	2220      	movs	r2, #32
 8011ccc:	4013      	ands	r3, r2
 8011cce:	2b20      	cmp	r3, #32
 8011cd0:	d004      	beq.n	8011cdc <I2C_IsErrorOccurred+0x100>
 8011cd2:	2327      	movs	r3, #39	@ 0x27
 8011cd4:	18fb      	adds	r3, r7, r3
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d09b      	beq.n	8011c14 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011cdc:	2327      	movs	r3, #39	@ 0x27
 8011cde:	18fb      	adds	r3, r7, r3
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d103      	bne.n	8011cee <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	2220      	movs	r2, #32
 8011cec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	2204      	movs	r2, #4
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011cf6:	2327      	movs	r3, #39	@ 0x27
 8011cf8:	18fb      	adds	r3, r7, r3
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	699b      	ldr	r3, [r3, #24]
 8011d04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011d06:	69ba      	ldr	r2, [r7, #24]
 8011d08:	2380      	movs	r3, #128	@ 0x80
 8011d0a:	005b      	lsls	r3, r3, #1
 8011d0c:	4013      	ands	r3, r2
 8011d0e:	d00c      	beq.n	8011d2a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011d10:	6a3b      	ldr	r3, [r7, #32]
 8011d12:	2201      	movs	r2, #1
 8011d14:	4313      	orrs	r3, r2
 8011d16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2280      	movs	r2, #128	@ 0x80
 8011d1e:	0052      	lsls	r2, r2, #1
 8011d20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011d22:	2327      	movs	r3, #39	@ 0x27
 8011d24:	18fb      	adds	r3, r7, r3
 8011d26:	2201      	movs	r2, #1
 8011d28:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011d2a:	69ba      	ldr	r2, [r7, #24]
 8011d2c:	2380      	movs	r3, #128	@ 0x80
 8011d2e:	00db      	lsls	r3, r3, #3
 8011d30:	4013      	ands	r3, r2
 8011d32:	d00c      	beq.n	8011d4e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011d34:	6a3b      	ldr	r3, [r7, #32]
 8011d36:	2208      	movs	r2, #8
 8011d38:	4313      	orrs	r3, r2
 8011d3a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2280      	movs	r2, #128	@ 0x80
 8011d42:	00d2      	lsls	r2, r2, #3
 8011d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011d46:	2327      	movs	r3, #39	@ 0x27
 8011d48:	18fb      	adds	r3, r7, r3
 8011d4a:	2201      	movs	r2, #1
 8011d4c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011d4e:	69ba      	ldr	r2, [r7, #24]
 8011d50:	2380      	movs	r3, #128	@ 0x80
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	4013      	ands	r3, r2
 8011d56:	d00c      	beq.n	8011d72 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	2202      	movs	r2, #2
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	2280      	movs	r2, #128	@ 0x80
 8011d66:	0092      	lsls	r2, r2, #2
 8011d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011d6a:	2327      	movs	r3, #39	@ 0x27
 8011d6c:	18fb      	adds	r3, r7, r3
 8011d6e:	2201      	movs	r2, #1
 8011d70:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011d72:	2327      	movs	r3, #39	@ 0x27
 8011d74:	18fb      	adds	r3, r7, r3
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d01d      	beq.n	8011db8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	0018      	movs	r0, r3
 8011d80:	f7ff fcd7 	bl	8011732 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	685a      	ldr	r2, [r3, #4]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	490e      	ldr	r1, [pc, #56]	@ (8011dc8 <I2C_IsErrorOccurred+0x1ec>)
 8011d90:	400a      	ands	r2, r1
 8011d92:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d98:	6a3b      	ldr	r3, [r7, #32]
 8011d9a:	431a      	orrs	r2, r3
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	2241      	movs	r2, #65	@ 0x41
 8011da4:	2120      	movs	r1, #32
 8011da6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	2242      	movs	r2, #66	@ 0x42
 8011dac:	2100      	movs	r1, #0
 8011dae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2240      	movs	r2, #64	@ 0x40
 8011db4:	2100      	movs	r1, #0
 8011db6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011db8:	2327      	movs	r3, #39	@ 0x27
 8011dba:	18fb      	adds	r3, r7, r3
 8011dbc:	781b      	ldrb	r3, [r3, #0]
}
 8011dbe:	0018      	movs	r0, r3
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	b00a      	add	sp, #40	@ 0x28
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	46c0      	nop			@ (mov r8, r8)
 8011dc8:	fe00e800 	.word	0xfe00e800

08011dcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011dcc:	b590      	push	{r4, r7, lr}
 8011dce:	b087      	sub	sp, #28
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	0008      	movs	r0, r1
 8011dd6:	0011      	movs	r1, r2
 8011dd8:	607b      	str	r3, [r7, #4]
 8011dda:	240a      	movs	r4, #10
 8011ddc:	193b      	adds	r3, r7, r4
 8011dde:	1c02      	adds	r2, r0, #0
 8011de0:	801a      	strh	r2, [r3, #0]
 8011de2:	2009      	movs	r0, #9
 8011de4:	183b      	adds	r3, r7, r0
 8011de6:	1c0a      	adds	r2, r1, #0
 8011de8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011dea:	193b      	adds	r3, r7, r4
 8011dec:	881b      	ldrh	r3, [r3, #0]
 8011dee:	059b      	lsls	r3, r3, #22
 8011df0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011df2:	183b      	adds	r3, r7, r0
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	0419      	lsls	r1, r3, #16
 8011df8:	23ff      	movs	r3, #255	@ 0xff
 8011dfa:	041b      	lsls	r3, r3, #16
 8011dfc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011dfe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e06:	4313      	orrs	r3, r2
 8011e08:	005b      	lsls	r3, r3, #1
 8011e0a:	085b      	lsrs	r3, r3, #1
 8011e0c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e16:	0d51      	lsrs	r1, r2, #21
 8011e18:	2280      	movs	r2, #128	@ 0x80
 8011e1a:	00d2      	lsls	r2, r2, #3
 8011e1c:	400a      	ands	r2, r1
 8011e1e:	4907      	ldr	r1, [pc, #28]	@ (8011e3c <I2C_TransferConfig+0x70>)
 8011e20:	430a      	orrs	r2, r1
 8011e22:	43d2      	mvns	r2, r2
 8011e24:	401a      	ands	r2, r3
 8011e26:	0011      	movs	r1, r2
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	697a      	ldr	r2, [r7, #20]
 8011e2e:	430a      	orrs	r2, r1
 8011e30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011e32:	46c0      	nop			@ (mov r8, r8)
 8011e34:	46bd      	mov	sp, r7
 8011e36:	b007      	add	sp, #28
 8011e38:	bd90      	pop	{r4, r7, pc}
 8011e3a:	46c0      	nop			@ (mov r8, r8)
 8011e3c:	03ff63ff 	.word	0x03ff63ff

08011e40 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	000a      	movs	r2, r1
 8011e4a:	1cbb      	adds	r3, r7, #2
 8011e4c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e56:	4b3e      	ldr	r3, [pc, #248]	@ (8011f50 <I2C_Enable_IRQ+0x110>)
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d035      	beq.n	8011ec8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011e60:	4b3c      	ldr	r3, [pc, #240]	@ (8011f54 <I2C_Enable_IRQ+0x114>)
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d030      	beq.n	8011ec8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8011f58 <I2C_Enable_IRQ+0x118>)
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d02b      	beq.n	8011ec8 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011e70:	1cbb      	adds	r3, r7, #2
 8011e72:	2200      	movs	r2, #0
 8011e74:	5e9b      	ldrsh	r3, [r3, r2]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	da03      	bge.n	8011e82 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	22b8      	movs	r2, #184	@ 0xb8
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011e82:	1cbb      	adds	r3, r7, #2
 8011e84:	881b      	ldrh	r3, [r3, #0]
 8011e86:	2201      	movs	r2, #1
 8011e88:	4013      	ands	r3, r2
 8011e8a:	d003      	beq.n	8011e94 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	22f2      	movs	r2, #242	@ 0xf2
 8011e90:	4313      	orrs	r3, r2
 8011e92:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011e94:	1cbb      	adds	r3, r7, #2
 8011e96:	881b      	ldrh	r3, [r3, #0]
 8011e98:	2202      	movs	r2, #2
 8011e9a:	4013      	ands	r3, r2
 8011e9c:	d003      	beq.n	8011ea6 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	22f4      	movs	r2, #244	@ 0xf4
 8011ea2:	4313      	orrs	r3, r2
 8011ea4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011ea6:	1cbb      	adds	r3, r7, #2
 8011ea8:	881b      	ldrh	r3, [r3, #0]
 8011eaa:	2b10      	cmp	r3, #16
 8011eac:	d103      	bne.n	8011eb6 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2290      	movs	r2, #144	@ 0x90
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011eb6:	1cbb      	adds	r3, r7, #2
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	2b20      	cmp	r3, #32
 8011ebc:	d13c      	bne.n	8011f38 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2220      	movs	r2, #32
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011ec6:	e037      	b.n	8011f38 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011ec8:	1cbb      	adds	r3, r7, #2
 8011eca:	2200      	movs	r2, #0
 8011ecc:	5e9b      	ldrsh	r3, [r3, r2]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	da03      	bge.n	8011eda <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	22b8      	movs	r2, #184	@ 0xb8
 8011ed6:	4313      	orrs	r3, r2
 8011ed8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011eda:	1cbb      	adds	r3, r7, #2
 8011edc:	881b      	ldrh	r3, [r3, #0]
 8011ede:	2201      	movs	r2, #1
 8011ee0:	4013      	ands	r3, r2
 8011ee2:	d003      	beq.n	8011eec <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	22f2      	movs	r2, #242	@ 0xf2
 8011ee8:	4313      	orrs	r3, r2
 8011eea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011eec:	1cbb      	adds	r3, r7, #2
 8011eee:	881b      	ldrh	r3, [r3, #0]
 8011ef0:	2202      	movs	r2, #2
 8011ef2:	4013      	ands	r3, r2
 8011ef4:	d003      	beq.n	8011efe <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	22f4      	movs	r2, #244	@ 0xf4
 8011efa:	4313      	orrs	r3, r2
 8011efc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011efe:	1cbb      	adds	r3, r7, #2
 8011f00:	881b      	ldrh	r3, [r3, #0]
 8011f02:	2b10      	cmp	r3, #16
 8011f04:	d103      	bne.n	8011f0e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	2290      	movs	r2, #144	@ 0x90
 8011f0a:	4313      	orrs	r3, r2
 8011f0c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011f0e:	1cbb      	adds	r3, r7, #2
 8011f10:	881b      	ldrh	r3, [r3, #0]
 8011f12:	2b20      	cmp	r3, #32
 8011f14:	d103      	bne.n	8011f1e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2260      	movs	r2, #96	@ 0x60
 8011f1a:	4313      	orrs	r3, r2
 8011f1c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f22:	4b0d      	ldr	r3, [pc, #52]	@ (8011f58 <I2C_Enable_IRQ+0x118>)
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d007      	beq.n	8011f38 <I2C_Enable_IRQ+0xf8>
 8011f28:	1cbb      	adds	r3, r7, #2
 8011f2a:	881b      	ldrh	r3, [r3, #0]
 8011f2c:	2b40      	cmp	r3, #64	@ 0x40
 8011f2e:	d103      	bne.n	8011f38 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2240      	movs	r2, #64	@ 0x40
 8011f34:	4313      	orrs	r3, r2
 8011f36:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	6819      	ldr	r1, [r3, #0]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	68fa      	ldr	r2, [r7, #12]
 8011f44:	430a      	orrs	r2, r1
 8011f46:	601a      	str	r2, [r3, #0]
}
 8011f48:	46c0      	nop			@ (mov r8, r8)
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	b004      	add	sp, #16
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	080107c1 	.word	0x080107c1
 8011f54:	08010bf1 	.word	0x08010bf1
 8011f58:	080109b9 	.word	0x080109b9

08011f5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b084      	sub	sp, #16
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	000a      	movs	r2, r1
 8011f66:	1cbb      	adds	r3, r7, #2
 8011f68:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011f6e:	1cbb      	adds	r3, r7, #2
 8011f70:	881b      	ldrh	r3, [r3, #0]
 8011f72:	2201      	movs	r2, #1
 8011f74:	4013      	ands	r3, r2
 8011f76:	d010      	beq.n	8011f9a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2242      	movs	r2, #66	@ 0x42
 8011f7c:	4313      	orrs	r3, r2
 8011f7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2241      	movs	r2, #65	@ 0x41
 8011f84:	5c9b      	ldrb	r3, [r3, r2]
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	001a      	movs	r2, r3
 8011f8a:	2328      	movs	r3, #40	@ 0x28
 8011f8c:	4013      	ands	r3, r2
 8011f8e:	2b28      	cmp	r3, #40	@ 0x28
 8011f90:	d003      	beq.n	8011f9a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	22b0      	movs	r2, #176	@ 0xb0
 8011f96:	4313      	orrs	r3, r2
 8011f98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011f9a:	1cbb      	adds	r3, r7, #2
 8011f9c:	881b      	ldrh	r3, [r3, #0]
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	4013      	ands	r3, r2
 8011fa2:	d010      	beq.n	8011fc6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2244      	movs	r2, #68	@ 0x44
 8011fa8:	4313      	orrs	r3, r2
 8011faa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2241      	movs	r2, #65	@ 0x41
 8011fb0:	5c9b      	ldrb	r3, [r3, r2]
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	001a      	movs	r2, r3
 8011fb6:	2328      	movs	r3, #40	@ 0x28
 8011fb8:	4013      	ands	r3, r2
 8011fba:	2b28      	cmp	r3, #40	@ 0x28
 8011fbc:	d003      	beq.n	8011fc6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	22b0      	movs	r2, #176	@ 0xb0
 8011fc2:	4313      	orrs	r3, r2
 8011fc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011fc6:	1cbb      	adds	r3, r7, #2
 8011fc8:	2200      	movs	r2, #0
 8011fca:	5e9b      	ldrsh	r3, [r3, r2]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	da03      	bge.n	8011fd8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	22b8      	movs	r2, #184	@ 0xb8
 8011fd4:	4313      	orrs	r3, r2
 8011fd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011fd8:	1cbb      	adds	r3, r7, #2
 8011fda:	881b      	ldrh	r3, [r3, #0]
 8011fdc:	2b10      	cmp	r3, #16
 8011fde:	d103      	bne.n	8011fe8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2290      	movs	r2, #144	@ 0x90
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011fe8:	1cbb      	adds	r3, r7, #2
 8011fea:	881b      	ldrh	r3, [r3, #0]
 8011fec:	2b20      	cmp	r3, #32
 8011fee:	d103      	bne.n	8011ff8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2220      	movs	r2, #32
 8011ff4:	4313      	orrs	r3, r2
 8011ff6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8011ff8:	1cbb      	adds	r3, r7, #2
 8011ffa:	881b      	ldrh	r3, [r3, #0]
 8011ffc:	2b40      	cmp	r3, #64	@ 0x40
 8011ffe:	d103      	bne.n	8012008 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2240      	movs	r2, #64	@ 0x40
 8012004:	4313      	orrs	r3, r2
 8012006:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	43d9      	mvns	r1, r3
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	400a      	ands	r2, r1
 8012018:	601a      	str	r2, [r3, #0]
}
 801201a:	46c0      	nop			@ (mov r8, r8)
 801201c:	46bd      	mov	sp, r7
 801201e:	b004      	add	sp, #16
 8012020:	bd80      	pop	{r7, pc}
	...

08012024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2241      	movs	r2, #65	@ 0x41
 8012032:	5c9b      	ldrb	r3, [r3, r2]
 8012034:	b2db      	uxtb	r3, r3
 8012036:	2b20      	cmp	r3, #32
 8012038:	d138      	bne.n	80120ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2240      	movs	r2, #64	@ 0x40
 801203e:	5c9b      	ldrb	r3, [r3, r2]
 8012040:	2b01      	cmp	r3, #1
 8012042:	d101      	bne.n	8012048 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012044:	2302      	movs	r3, #2
 8012046:	e032      	b.n	80120ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2240      	movs	r2, #64	@ 0x40
 801204c:	2101      	movs	r1, #1
 801204e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2241      	movs	r2, #65	@ 0x41
 8012054:	2124      	movs	r1, #36	@ 0x24
 8012056:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2101      	movs	r1, #1
 8012064:	438a      	bics	r2, r1
 8012066:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	4911      	ldr	r1, [pc, #68]	@ (80120b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012074:	400a      	ands	r2, r1
 8012076:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	6819      	ldr	r1, [r3, #0]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	683a      	ldr	r2, [r7, #0]
 8012084:	430a      	orrs	r2, r1
 8012086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2101      	movs	r1, #1
 8012094:	430a      	orrs	r2, r1
 8012096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2241      	movs	r2, #65	@ 0x41
 801209c:	2120      	movs	r1, #32
 801209e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2240      	movs	r2, #64	@ 0x40
 80120a4:	2100      	movs	r1, #0
 80120a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80120a8:	2300      	movs	r3, #0
 80120aa:	e000      	b.n	80120ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80120ac:	2302      	movs	r3, #2
  }
}
 80120ae:	0018      	movs	r0, r3
 80120b0:	46bd      	mov	sp, r7
 80120b2:	b002      	add	sp, #8
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	46c0      	nop			@ (mov r8, r8)
 80120b8:	ffffefff 	.word	0xffffefff

080120bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2241      	movs	r2, #65	@ 0x41
 80120ca:	5c9b      	ldrb	r3, [r3, r2]
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	2b20      	cmp	r3, #32
 80120d0:	d139      	bne.n	8012146 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2240      	movs	r2, #64	@ 0x40
 80120d6:	5c9b      	ldrb	r3, [r3, r2]
 80120d8:	2b01      	cmp	r3, #1
 80120da:	d101      	bne.n	80120e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80120dc:	2302      	movs	r3, #2
 80120de:	e033      	b.n	8012148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2240      	movs	r2, #64	@ 0x40
 80120e4:	2101      	movs	r1, #1
 80120e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2241      	movs	r2, #65	@ 0x41
 80120ec:	2124      	movs	r1, #36	@ 0x24
 80120ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	681a      	ldr	r2, [r3, #0]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	2101      	movs	r1, #1
 80120fc:	438a      	bics	r2, r1
 80120fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	4a11      	ldr	r2, [pc, #68]	@ (8012150 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801210c:	4013      	ands	r3, r2
 801210e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	021b      	lsls	r3, r3, #8
 8012114:	68fa      	ldr	r2, [r7, #12]
 8012116:	4313      	orrs	r3, r2
 8012118:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2101      	movs	r1, #1
 801212e:	430a      	orrs	r2, r1
 8012130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2241      	movs	r2, #65	@ 0x41
 8012136:	2120      	movs	r1, #32
 8012138:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2240      	movs	r2, #64	@ 0x40
 801213e:	2100      	movs	r1, #0
 8012140:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012142:	2300      	movs	r3, #0
 8012144:	e000      	b.n	8012148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012146:	2302      	movs	r3, #2
  }
}
 8012148:	0018      	movs	r0, r3
 801214a:	46bd      	mov	sp, r7
 801214c:	b004      	add	sp, #16
 801214e:	bd80      	pop	{r7, pc}
 8012150:	fffff0ff 	.word	0xfffff0ff

08012154 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b088      	sub	sp, #32
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d101      	bne.n	8012166 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012162:	2301      	movs	r3, #1
 8012164:	e0e1      	b.n	801232a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2235      	movs	r2, #53	@ 0x35
 801216a:	5c9b      	ldrb	r3, [r3, r2]
 801216c:	b2db      	uxtb	r3, r3
 801216e:	2b00      	cmp	r3, #0
 8012170:	d107      	bne.n	8012182 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2234      	movs	r2, #52	@ 0x34
 8012176:	2100      	movs	r1, #0
 8012178:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	0018      	movs	r0, r3
 801217e:	f7f5 fb65 	bl	800784c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2235      	movs	r2, #53	@ 0x35
 8012186:	2102      	movs	r1, #2
 8012188:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	69da      	ldr	r2, [r3, #28]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4967      	ldr	r1, [pc, #412]	@ (8012334 <HAL_I2S_Init+0x1e0>)
 8012196:	400a      	ands	r2, r1
 8012198:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2202      	movs	r2, #2
 80121a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	695b      	ldr	r3, [r3, #20]
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d073      	beq.n	8012292 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d102      	bne.n	80121b8 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80121b2:	2310      	movs	r3, #16
 80121b4:	617b      	str	r3, [r7, #20]
 80121b6:	e001      	b.n	80121bc <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80121b8:	2320      	movs	r3, #32
 80121ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	689b      	ldr	r3, [r3, #8]
 80121c0:	2b20      	cmp	r3, #32
 80121c2:	d802      	bhi.n	80121ca <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	005b      	lsls	r3, r3, #1
 80121c8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80121ca:	f002 fed3 	bl	8014f74 <HAL_RCC_GetSysClockFreq>
 80121ce:	0003      	movs	r3, r0
 80121d0:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	691a      	ldr	r2, [r3, #16]
 80121d6:	2380      	movs	r3, #128	@ 0x80
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	429a      	cmp	r2, r3
 80121dc:	d131      	bne.n	8012242 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	68db      	ldr	r3, [r3, #12]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d016      	beq.n	8012214 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	0019      	movs	r1, r3
 80121ec:	68f8      	ldr	r0, [r7, #12]
 80121ee:	f7ed ffd9 	bl	80001a4 <__udivsi3>
 80121f2:	0003      	movs	r3, r0
 80121f4:	001a      	movs	r2, r3
 80121f6:	0013      	movs	r3, r2
 80121f8:	009b      	lsls	r3, r3, #2
 80121fa:	189b      	adds	r3, r3, r2
 80121fc:	005b      	lsls	r3, r3, #1
 80121fe:	001a      	movs	r2, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	695b      	ldr	r3, [r3, #20]
 8012204:	0019      	movs	r1, r3
 8012206:	0010      	movs	r0, r2
 8012208:	f7ed ffcc 	bl	80001a4 <__udivsi3>
 801220c:	0003      	movs	r3, r0
 801220e:	3305      	adds	r3, #5
 8012210:	613b      	str	r3, [r7, #16]
 8012212:	e02a      	b.n	801226a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	00db      	lsls	r3, r3, #3
 8012218:	0019      	movs	r1, r3
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f7ed ffc2 	bl	80001a4 <__udivsi3>
 8012220:	0003      	movs	r3, r0
 8012222:	001a      	movs	r2, r3
 8012224:	0013      	movs	r3, r2
 8012226:	009b      	lsls	r3, r3, #2
 8012228:	189b      	adds	r3, r3, r2
 801222a:	005b      	lsls	r3, r3, #1
 801222c:	001a      	movs	r2, r3
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	695b      	ldr	r3, [r3, #20]
 8012232:	0019      	movs	r1, r3
 8012234:	0010      	movs	r0, r2
 8012236:	f7ed ffb5 	bl	80001a4 <__udivsi3>
 801223a:	0003      	movs	r3, r0
 801223c:	3305      	adds	r3, #5
 801223e:	613b      	str	r3, [r7, #16]
 8012240:	e013      	b.n	801226a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012242:	6979      	ldr	r1, [r7, #20]
 8012244:	68f8      	ldr	r0, [r7, #12]
 8012246:	f7ed ffad 	bl	80001a4 <__udivsi3>
 801224a:	0003      	movs	r3, r0
 801224c:	001a      	movs	r2, r3
 801224e:	0013      	movs	r3, r2
 8012250:	009b      	lsls	r3, r3, #2
 8012252:	189b      	adds	r3, r3, r2
 8012254:	005b      	lsls	r3, r3, #1
 8012256:	001a      	movs	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	695b      	ldr	r3, [r3, #20]
 801225c:	0019      	movs	r1, r3
 801225e:	0010      	movs	r0, r2
 8012260:	f7ed ffa0 	bl	80001a4 <__udivsi3>
 8012264:	0003      	movs	r3, r0
 8012266:	3305      	adds	r3, #5
 8012268:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	210a      	movs	r1, #10
 801226e:	0018      	movs	r0, r3
 8012270:	f7ed ff98 	bl	80001a4 <__udivsi3>
 8012274:	0003      	movs	r3, r0
 8012276:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	2201      	movs	r2, #1
 801227c:	4013      	ands	r3, r2
 801227e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012280:	693a      	ldr	r2, [r7, #16]
 8012282:	69bb      	ldr	r3, [r7, #24]
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	085b      	lsrs	r3, r3, #1
 8012288:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	021b      	lsls	r3, r3, #8
 801228e:	61bb      	str	r3, [r7, #24]
 8012290:	e003      	b.n	801229a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012292:	2302      	movs	r3, #2
 8012294:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012296:	2300      	movs	r3, #0
 8012298:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d902      	bls.n	80122a6 <HAL_I2S_Init+0x152>
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	2bff      	cmp	r3, #255	@ 0xff
 80122a4:	d907      	bls.n	80122b6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122aa:	2210      	movs	r2, #16
 80122ac:	431a      	orrs	r2, r3
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80122b2:	2301      	movs	r3, #1
 80122b4:	e039      	b.n	801232a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	691a      	ldr	r2, [r3, #16]
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	431a      	orrs	r2, r3
 80122be:	0011      	movs	r1, r2
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	69fa      	ldr	r2, [r7, #28]
 80122c6:	430a      	orrs	r2, r1
 80122c8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	4a18      	ldr	r2, [pc, #96]	@ (8012334 <HAL_I2S_Init+0x1e0>)
 80122d2:	401a      	ands	r2, r3
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6859      	ldr	r1, [r3, #4]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	689b      	ldr	r3, [r3, #8]
 80122dc:	4319      	orrs	r1, r3
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	4319      	orrs	r1, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	699b      	ldr	r3, [r3, #24]
 80122e8:	430b      	orrs	r3, r1
 80122ea:	431a      	orrs	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2180      	movs	r1, #128	@ 0x80
 80122f2:	0109      	lsls	r1, r1, #4
 80122f4:	430a      	orrs	r2, r1
 80122f6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	689b      	ldr	r3, [r3, #8]
 80122fc:	2b30      	cmp	r3, #48	@ 0x30
 80122fe:	d003      	beq.n	8012308 <HAL_I2S_Init+0x1b4>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	689b      	ldr	r3, [r3, #8]
 8012304:	2bb0      	cmp	r3, #176	@ 0xb0
 8012306:	d108      	bne.n	801231a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	69da      	ldr	r2, [r3, #28]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	2180      	movs	r1, #128	@ 0x80
 8012314:	0149      	lsls	r1, r1, #5
 8012316:	430a      	orrs	r2, r1
 8012318:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2200      	movs	r2, #0
 801231e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2235      	movs	r2, #53	@ 0x35
 8012324:	2101      	movs	r1, #1
 8012326:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012328:	2300      	movs	r3, #0
}
 801232a:	0018      	movs	r0, r3
 801232c:	46bd      	mov	sp, r7
 801232e:	b008      	add	sp, #32
 8012330:	bd80      	pop	{r7, pc}
 8012332:	46c0      	nop			@ (mov r8, r8)
 8012334:	fffff040 	.word	0xfffff040

08012338 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b086      	sub	sp, #24
 801233c:	af00      	add	r7, sp, #0
 801233e:	60f8      	str	r0, [r7, #12]
 8012340:	60b9      	str	r1, [r7, #8]
 8012342:	1dbb      	adds	r3, r7, #6
 8012344:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d003      	beq.n	8012354 <HAL_I2S_Receive_DMA+0x1c>
 801234c:	1dbb      	adds	r3, r7, #6
 801234e:	881b      	ldrh	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d101      	bne.n	8012358 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012354:	2301      	movs	r3, #1
 8012356:	e0a6      	b.n	80124a6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	2234      	movs	r2, #52	@ 0x34
 801235c:	5c9b      	ldrb	r3, [r3, r2]
 801235e:	b2db      	uxtb	r3, r3
 8012360:	2b01      	cmp	r3, #1
 8012362:	d101      	bne.n	8012368 <HAL_I2S_Receive_DMA+0x30>
 8012364:	2302      	movs	r3, #2
 8012366:	e09e      	b.n	80124a6 <HAL_I2S_Receive_DMA+0x16e>
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2234      	movs	r2, #52	@ 0x34
 801236c:	2101      	movs	r1, #1
 801236e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2235      	movs	r2, #53	@ 0x35
 8012374:	5c9b      	ldrb	r3, [r3, r2]
 8012376:	b2db      	uxtb	r3, r3
 8012378:	2b01      	cmp	r3, #1
 801237a:	d005      	beq.n	8012388 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2234      	movs	r2, #52	@ 0x34
 8012380:	2100      	movs	r1, #0
 8012382:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012384:	2302      	movs	r3, #2
 8012386:	e08e      	b.n	80124a6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2235      	movs	r2, #53	@ 0x35
 801238c:	2104      	movs	r1, #4
 801238e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2200      	movs	r2, #0
 8012394:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	68ba      	ldr	r2, [r7, #8]
 801239a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	69db      	ldr	r3, [r3, #28]
 80123a2:	2207      	movs	r2, #7
 80123a4:	4013      	ands	r3, r2
 80123a6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	2b03      	cmp	r3, #3
 80123ac:	d002      	beq.n	80123b4 <HAL_I2S_Receive_DMA+0x7c>
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	2b05      	cmp	r3, #5
 80123b2:	d10c      	bne.n	80123ce <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80123b4:	1dbb      	adds	r3, r7, #6
 80123b6:	881b      	ldrh	r3, [r3, #0]
 80123b8:	18db      	adds	r3, r3, r3
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80123c0:	1dbb      	adds	r3, r7, #6
 80123c2:	881b      	ldrh	r3, [r3, #0]
 80123c4:	18db      	adds	r3, r3, r3
 80123c6:	b29a      	uxth	r2, r3
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80123cc:	e007      	b.n	80123de <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	1dba      	adds	r2, r7, #6
 80123d2:	8812      	ldrh	r2, [r2, #0]
 80123d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	1dba      	adds	r2, r7, #6
 80123da:	8812      	ldrh	r2, [r2, #0]
 80123dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123e2:	4a33      	ldr	r2, [pc, #204]	@ (80124b0 <HAL_I2S_Receive_DMA+0x178>)
 80123e4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123ea:	4a32      	ldr	r2, [pc, #200]	@ (80124b4 <HAL_I2S_Receive_DMA+0x17c>)
 80123ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123f2:	4a31      	ldr	r2, [pc, #196]	@ (80124b8 <HAL_I2S_Receive_DMA+0x180>)
 80123f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	69da      	ldr	r2, [r3, #28]
 80123fc:	23c0      	movs	r3, #192	@ 0xc0
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	401a      	ands	r2, r3
 8012402:	23c0      	movs	r3, #192	@ 0xc0
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	429a      	cmp	r2, r3
 8012408:	d10a      	bne.n	8012420 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801240a:	2300      	movs	r3, #0
 801240c:	613b      	str	r3, [r7, #16]
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	68db      	ldr	r3, [r3, #12]
 8012414:	613b      	str	r3, [r7, #16]
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	689b      	ldr	r3, [r3, #8]
 801241c:	613b      	str	r3, [r7, #16]
 801241e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	330c      	adds	r3, #12
 801242a:	0019      	movs	r1, r3
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012430:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012436:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012438:	f7fc fca2 	bl	800ed80 <HAL_DMA_Start_IT>
 801243c:	1e03      	subs	r3, r0, #0
 801243e:	d00f      	beq.n	8012460 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012444:	2208      	movs	r2, #8
 8012446:	431a      	orrs	r2, r3
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2235      	movs	r2, #53	@ 0x35
 8012450:	2101      	movs	r1, #1
 8012452:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2234      	movs	r2, #52	@ 0x34
 8012458:	2100      	movs	r1, #0
 801245a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801245c:	2301      	movs	r3, #1
 801245e:	e022      	b.n	80124a6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	69da      	ldr	r2, [r3, #28]
 8012466:	2380      	movs	r3, #128	@ 0x80
 8012468:	00db      	lsls	r3, r3, #3
 801246a:	4013      	ands	r3, r2
 801246c:	d108      	bne.n	8012480 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	69da      	ldr	r2, [r3, #28]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	2180      	movs	r1, #128	@ 0x80
 801247a:	00c9      	lsls	r1, r1, #3
 801247c:	430a      	orrs	r2, r1
 801247e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	2201      	movs	r2, #1
 8012488:	4013      	ands	r3, r2
 801248a:	d107      	bne.n	801249c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	685a      	ldr	r2, [r3, #4]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2101      	movs	r1, #1
 8012498:	430a      	orrs	r2, r1
 801249a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2234      	movs	r2, #52	@ 0x34
 80124a0:	2100      	movs	r1, #0
 80124a2:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80124a4:	2300      	movs	r3, #0
}
 80124a6:	0018      	movs	r0, r3
 80124a8:	46bd      	mov	sp, r7
 80124aa:	b006      	add	sp, #24
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	46c0      	nop			@ (mov r8, r8)
 80124b0:	08012699 	.word	0x08012699
 80124b4:	08012655 	.word	0x08012655
 80124b8:	080126b7 	.word	0x080126b7

080124bc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b086      	sub	sp, #24
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80124c4:	2317      	movs	r3, #23
 80124c6:	18fb      	adds	r3, r7, r3
 80124c8:	2200      	movs	r2, #0
 80124ca:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	685a      	ldr	r2, [r3, #4]
 80124d0:	2380      	movs	r3, #128	@ 0x80
 80124d2:	009b      	lsls	r3, r3, #2
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d003      	beq.n	80124e0 <HAL_I2S_DMAStop+0x24>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d158      	bne.n	8012592 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d010      	beq.n	801250a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124ec:	0018      	movs	r0, r3
 80124ee:	f7fc fcad 	bl	800ee4c <HAL_DMA_Abort>
 80124f2:	1e03      	subs	r3, r0, #0
 80124f4:	d009      	beq.n	801250a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124fa:	2208      	movs	r2, #8
 80124fc:	431a      	orrs	r2, r3
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012502:	2317      	movs	r3, #23
 8012504:	18fb      	adds	r3, r7, r3
 8012506:	2201      	movs	r2, #1
 8012508:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	2364      	movs	r3, #100	@ 0x64
 801250e:	2201      	movs	r2, #1
 8012510:	2102      	movs	r1, #2
 8012512:	f000 f8f7 	bl	8012704 <I2S_WaitFlagStateUntilTimeout>
 8012516:	1e03      	subs	r3, r0, #0
 8012518:	d00d      	beq.n	8012536 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801251e:	2201      	movs	r2, #1
 8012520:	431a      	orrs	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	2235      	movs	r2, #53	@ 0x35
 801252a:	2101      	movs	r1, #1
 801252c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801252e:	2317      	movs	r3, #23
 8012530:	18fb      	adds	r3, r7, r3
 8012532:	2201      	movs	r2, #1
 8012534:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	2364      	movs	r3, #100	@ 0x64
 801253a:	2200      	movs	r2, #0
 801253c:	2180      	movs	r1, #128	@ 0x80
 801253e:	f000 f8e1 	bl	8012704 <I2S_WaitFlagStateUntilTimeout>
 8012542:	1e03      	subs	r3, r0, #0
 8012544:	d00d      	beq.n	8012562 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801254a:	2201      	movs	r2, #1
 801254c:	431a      	orrs	r2, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2235      	movs	r2, #53	@ 0x35
 8012556:	2101      	movs	r1, #1
 8012558:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801255a:	2317      	movs	r3, #23
 801255c:	18fb      	adds	r3, r7, r3
 801255e:	2201      	movs	r2, #1
 8012560:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	69da      	ldr	r2, [r3, #28]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	4938      	ldr	r1, [pc, #224]	@ (8012650 <HAL_I2S_DMAStop+0x194>)
 801256e:	400a      	ands	r2, r1
 8012570:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012572:	2300      	movs	r3, #0
 8012574:	613b      	str	r3, [r7, #16]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	689b      	ldr	r3, [r3, #8]
 801257c:	613b      	str	r3, [r7, #16]
 801257e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	685a      	ldr	r2, [r3, #4]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2102      	movs	r1, #2
 801258c:	438a      	bics	r2, r1
 801258e:	605a      	str	r2, [r3, #4]
 8012590:	e053      	b.n	801263a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	23c0      	movs	r3, #192	@ 0xc0
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	429a      	cmp	r2, r3
 801259c:	d005      	beq.n	80125aa <HAL_I2S_DMAStop+0xee>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	685a      	ldr	r2, [r3, #4]
 80125a2:	2380      	movs	r3, #128	@ 0x80
 80125a4:	005b      	lsls	r3, r3, #1
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d147      	bne.n	801263a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d010      	beq.n	80125d4 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125b6:	0018      	movs	r0, r3
 80125b8:	f7fc fc48 	bl	800ee4c <HAL_DMA_Abort>
 80125bc:	1e03      	subs	r3, r0, #0
 80125be:	d009      	beq.n	80125d4 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125c4:	2208      	movs	r2, #8
 80125c6:	431a      	orrs	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80125cc:	2317      	movs	r3, #23
 80125ce:	18fb      	adds	r3, r7, r3
 80125d0:	2201      	movs	r2, #1
 80125d2:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	69da      	ldr	r2, [r3, #28]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	491c      	ldr	r1, [pc, #112]	@ (8012650 <HAL_I2S_DMAStop+0x194>)
 80125e0:	400a      	ands	r2, r1
 80125e2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80125e4:	2300      	movs	r3, #0
 80125e6:	60fb      	str	r3, [r7, #12]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	68db      	ldr	r3, [r3, #12]
 80125ee:	60fb      	str	r3, [r7, #12]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	689b      	ldr	r3, [r3, #8]
 80125f6:	60fb      	str	r3, [r7, #12]
 80125f8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	685a      	ldr	r2, [r3, #4]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2101      	movs	r1, #1
 8012606:	438a      	bics	r2, r1
 8012608:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	685a      	ldr	r2, [r3, #4]
 801260e:	2380      	movs	r3, #128	@ 0x80
 8012610:	005b      	lsls	r3, r3, #1
 8012612:	429a      	cmp	r2, r3
 8012614:	d10e      	bne.n	8012634 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801261a:	2240      	movs	r2, #64	@ 0x40
 801261c:	431a      	orrs	r2, r3
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2235      	movs	r2, #53	@ 0x35
 8012626:	2101      	movs	r1, #1
 8012628:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801262a:	2317      	movs	r3, #23
 801262c:	18fb      	adds	r3, r7, r3
 801262e:	2201      	movs	r2, #1
 8012630:	701a      	strb	r2, [r3, #0]
 8012632:	e002      	b.n	801263a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2235      	movs	r2, #53	@ 0x35
 801263e:	2101      	movs	r1, #1
 8012640:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8012642:	2317      	movs	r3, #23
 8012644:	18fb      	adds	r3, r7, r3
 8012646:	781b      	ldrb	r3, [r3, #0]
}
 8012648:	0018      	movs	r0, r3
 801264a:	46bd      	mov	sp, r7
 801264c:	b006      	add	sp, #24
 801264e:	bd80      	pop	{r7, pc}
 8012650:	fffffbff 	.word	0xfffffbff

08012654 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b084      	sub	sp, #16
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012660:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	69db      	ldr	r3, [r3, #28]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d10e      	bne.n	8012688 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	685a      	ldr	r2, [r3, #4]
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2101      	movs	r1, #1
 8012676:	438a      	bics	r2, r1
 8012678:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	2200      	movs	r2, #0
 801267e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	2235      	movs	r2, #53	@ 0x35
 8012684:	2101      	movs	r1, #1
 8012686:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	0018      	movs	r0, r3
 801268c:	f7f9 fbfe 	bl	800be8c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012690:	46c0      	nop			@ (mov r8, r8)
 8012692:	46bd      	mov	sp, r7
 8012694:	b004      	add	sp, #16
 8012696:	bd80      	pop	{r7, pc}

08012698 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126a4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	0018      	movs	r0, r3
 80126aa:	f7f9 fbdd 	bl	800be68 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80126ae:	46c0      	nop			@ (mov r8, r8)
 80126b0:	46bd      	mov	sp, r7
 80126b2:	b004      	add	sp, #16
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b084      	sub	sp, #16
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126c2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	685a      	ldr	r2, [r3, #4]
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2103      	movs	r1, #3
 80126d0:	438a      	bics	r2, r1
 80126d2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2200      	movs	r2, #0
 80126d8:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2200      	movs	r2, #0
 80126de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2235      	movs	r2, #53	@ 0x35
 80126e4:	2101      	movs	r1, #1
 80126e6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126ec:	2208      	movs	r2, #8
 80126ee:	431a      	orrs	r2, r3
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	0018      	movs	r0, r3
 80126f8:	f7f9 fc16 	bl	800bf28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80126fc:	46c0      	nop			@ (mov r8, r8)
 80126fe:	46bd      	mov	sp, r7
 8012700:	b004      	add	sp, #16
 8012702:	bd80      	pop	{r7, pc}

08012704 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b086      	sub	sp, #24
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	603b      	str	r3, [r7, #0]
 8012710:	1dfb      	adds	r3, r7, #7
 8012712:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8012714:	f7fb fdf8 	bl	800e308 <HAL_GetTick>
 8012718:	0003      	movs	r3, r0
 801271a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801271c:	e017      	b.n	801274e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	3301      	adds	r3, #1
 8012722:	d014      	beq.n	801274e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8012724:	f7fb fdf0 	bl	800e308 <HAL_GetTick>
 8012728:	0002      	movs	r2, r0
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	683a      	ldr	r2, [r7, #0]
 8012730:	429a      	cmp	r2, r3
 8012732:	d902      	bls.n	801273a <I2S_WaitFlagStateUntilTimeout+0x36>
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d109      	bne.n	801274e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	2235      	movs	r2, #53	@ 0x35
 801273e:	2101      	movs	r1, #1
 8012740:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2234      	movs	r2, #52	@ 0x34
 8012746:	2100      	movs	r1, #0
 8012748:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801274a:	2303      	movs	r3, #3
 801274c:	e00f      	b.n	801276e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	68ba      	ldr	r2, [r7, #8]
 8012756:	4013      	ands	r3, r2
 8012758:	68ba      	ldr	r2, [r7, #8]
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	425a      	negs	r2, r3
 801275e:	4153      	adcs	r3, r2
 8012760:	b2db      	uxtb	r3, r3
 8012762:	001a      	movs	r2, r3
 8012764:	1dfb      	adds	r3, r7, #7
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	429a      	cmp	r2, r3
 801276a:	d1d8      	bne.n	801271e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 801276c:	2300      	movs	r3, #0
}
 801276e:	0018      	movs	r0, r3
 8012770:	46bd      	mov	sp, r7
 8012772:	b006      	add	sp, #24
 8012774:	bd80      	pop	{r7, pc}
	...

08012778 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801277a:	b08b      	sub	sp, #44	@ 0x2c
 801277c:	af06      	add	r7, sp, #24
 801277e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d101      	bne.n	801278a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8012786:	2301      	movs	r3, #1
 8012788:	e0f0      	b.n	801296c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4a79      	ldr	r2, [pc, #484]	@ (8012974 <HAL_PCD_Init+0x1fc>)
 801278e:	5c9b      	ldrb	r3, [r3, r2]
 8012790:	b2db      	uxtb	r3, r3
 8012792:	2b00      	cmp	r3, #0
 8012794:	d108      	bne.n	80127a8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8012796:	687a      	ldr	r2, [r7, #4]
 8012798:	23aa      	movs	r3, #170	@ 0xaa
 801279a:	009b      	lsls	r3, r3, #2
 801279c:	2100      	movs	r1, #0
 801279e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	0018      	movs	r0, r3
 80127a4:	f009 ff4a 	bl	801c63c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	4a72      	ldr	r2, [pc, #456]	@ (8012974 <HAL_PCD_Init+0x1fc>)
 80127ac:	2103      	movs	r1, #3
 80127ae:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	0018      	movs	r0, r3
 80127b6:	f005 fefd 	bl	80185b4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80127ba:	230f      	movs	r3, #15
 80127bc:	18fb      	adds	r3, r7, r3
 80127be:	2200      	movs	r2, #0
 80127c0:	701a      	strb	r2, [r3, #0]
 80127c2:	e049      	b.n	8012858 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80127c4:	200f      	movs	r0, #15
 80127c6:	183b      	adds	r3, r7, r0
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	6879      	ldr	r1, [r7, #4]
 80127cc:	1c5a      	adds	r2, r3, #1
 80127ce:	0013      	movs	r3, r2
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	189b      	adds	r3, r3, r2
 80127d4:	00db      	lsls	r3, r3, #3
 80127d6:	18cb      	adds	r3, r1, r3
 80127d8:	3301      	adds	r3, #1
 80127da:	2201      	movs	r2, #1
 80127dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80127de:	183b      	adds	r3, r7, r0
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	6879      	ldr	r1, [r7, #4]
 80127e4:	1c5a      	adds	r2, r3, #1
 80127e6:	0013      	movs	r3, r2
 80127e8:	009b      	lsls	r3, r3, #2
 80127ea:	189b      	adds	r3, r3, r2
 80127ec:	00db      	lsls	r3, r3, #3
 80127ee:	183a      	adds	r2, r7, r0
 80127f0:	7812      	ldrb	r2, [r2, #0]
 80127f2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80127f4:	183b      	adds	r3, r7, r0
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	6879      	ldr	r1, [r7, #4]
 80127fa:	1c5a      	adds	r2, r3, #1
 80127fc:	0013      	movs	r3, r2
 80127fe:	009b      	lsls	r3, r3, #2
 8012800:	189b      	adds	r3, r3, r2
 8012802:	00db      	lsls	r3, r3, #3
 8012804:	18cb      	adds	r3, r1, r3
 8012806:	3303      	adds	r3, #3
 8012808:	2200      	movs	r2, #0
 801280a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801280c:	183b      	adds	r3, r7, r0
 801280e:	781a      	ldrb	r2, [r3, #0]
 8012810:	6879      	ldr	r1, [r7, #4]
 8012812:	0013      	movs	r3, r2
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	189b      	adds	r3, r3, r2
 8012818:	00db      	lsls	r3, r3, #3
 801281a:	18cb      	adds	r3, r1, r3
 801281c:	3338      	adds	r3, #56	@ 0x38
 801281e:	2200      	movs	r2, #0
 8012820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8012822:	183b      	adds	r3, r7, r0
 8012824:	781a      	ldrb	r2, [r3, #0]
 8012826:	6879      	ldr	r1, [r7, #4]
 8012828:	0013      	movs	r3, r2
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	189b      	adds	r3, r3, r2
 801282e:	00db      	lsls	r3, r3, #3
 8012830:	18cb      	adds	r3, r1, r3
 8012832:	333c      	adds	r3, #60	@ 0x3c
 8012834:	2200      	movs	r2, #0
 8012836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8012838:	183b      	adds	r3, r7, r0
 801283a:	781a      	ldrb	r2, [r3, #0]
 801283c:	6879      	ldr	r1, [r7, #4]
 801283e:	0013      	movs	r3, r2
 8012840:	009b      	lsls	r3, r3, #2
 8012842:	189b      	adds	r3, r3, r2
 8012844:	00db      	lsls	r3, r3, #3
 8012846:	18cb      	adds	r3, r1, r3
 8012848:	3340      	adds	r3, #64	@ 0x40
 801284a:	2200      	movs	r2, #0
 801284c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801284e:	183b      	adds	r3, r7, r0
 8012850:	781a      	ldrb	r2, [r3, #0]
 8012852:	183b      	adds	r3, r7, r0
 8012854:	3201      	adds	r2, #1
 8012856:	701a      	strb	r2, [r3, #0]
 8012858:	210f      	movs	r1, #15
 801285a:	187b      	adds	r3, r7, r1
 801285c:	781a      	ldrb	r2, [r3, #0]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	429a      	cmp	r2, r3
 8012864:	d3ae      	bcc.n	80127c4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012866:	187b      	adds	r3, r7, r1
 8012868:	2200      	movs	r2, #0
 801286a:	701a      	strb	r2, [r3, #0]
 801286c:	e056      	b.n	801291c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801286e:	240f      	movs	r4, #15
 8012870:	193b      	adds	r3, r7, r4
 8012872:	781a      	ldrb	r2, [r3, #0]
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	236a      	movs	r3, #106	@ 0x6a
 8012878:	33ff      	adds	r3, #255	@ 0xff
 801287a:	0019      	movs	r1, r3
 801287c:	0013      	movs	r3, r2
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	189b      	adds	r3, r3, r2
 8012882:	00db      	lsls	r3, r3, #3
 8012884:	18c3      	adds	r3, r0, r3
 8012886:	185b      	adds	r3, r3, r1
 8012888:	2200      	movs	r2, #0
 801288a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801288c:	193b      	adds	r3, r7, r4
 801288e:	781a      	ldrb	r2, [r3, #0]
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	23b4      	movs	r3, #180	@ 0xb4
 8012894:	0059      	lsls	r1, r3, #1
 8012896:	0013      	movs	r3, r2
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	189b      	adds	r3, r3, r2
 801289c:	00db      	lsls	r3, r3, #3
 801289e:	18c3      	adds	r3, r0, r3
 80128a0:	185b      	adds	r3, r3, r1
 80128a2:	193a      	adds	r2, r7, r4
 80128a4:	7812      	ldrb	r2, [r2, #0]
 80128a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80128a8:	193b      	adds	r3, r7, r4
 80128aa:	781a      	ldrb	r2, [r3, #0]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	236c      	movs	r3, #108	@ 0x6c
 80128b0:	33ff      	adds	r3, #255	@ 0xff
 80128b2:	0019      	movs	r1, r3
 80128b4:	0013      	movs	r3, r2
 80128b6:	009b      	lsls	r3, r3, #2
 80128b8:	189b      	adds	r3, r3, r2
 80128ba:	00db      	lsls	r3, r3, #3
 80128bc:	18c3      	adds	r3, r0, r3
 80128be:	185b      	adds	r3, r3, r1
 80128c0:	2200      	movs	r2, #0
 80128c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80128c4:	193b      	adds	r3, r7, r4
 80128c6:	781a      	ldrb	r2, [r3, #0]
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	23bc      	movs	r3, #188	@ 0xbc
 80128cc:	0059      	lsls	r1, r3, #1
 80128ce:	0013      	movs	r3, r2
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	189b      	adds	r3, r3, r2
 80128d4:	00db      	lsls	r3, r3, #3
 80128d6:	18c3      	adds	r3, r0, r3
 80128d8:	185b      	adds	r3, r3, r1
 80128da:	2200      	movs	r2, #0
 80128dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80128de:	193b      	adds	r3, r7, r4
 80128e0:	781a      	ldrb	r2, [r3, #0]
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	23be      	movs	r3, #190	@ 0xbe
 80128e6:	0059      	lsls	r1, r3, #1
 80128e8:	0013      	movs	r3, r2
 80128ea:	009b      	lsls	r3, r3, #2
 80128ec:	189b      	adds	r3, r3, r2
 80128ee:	00db      	lsls	r3, r3, #3
 80128f0:	18c3      	adds	r3, r0, r3
 80128f2:	185b      	adds	r3, r3, r1
 80128f4:	2200      	movs	r2, #0
 80128f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80128f8:	193b      	adds	r3, r7, r4
 80128fa:	781a      	ldrb	r2, [r3, #0]
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	23c0      	movs	r3, #192	@ 0xc0
 8012900:	0059      	lsls	r1, r3, #1
 8012902:	0013      	movs	r3, r2
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	189b      	adds	r3, r3, r2
 8012908:	00db      	lsls	r3, r3, #3
 801290a:	18c3      	adds	r3, r0, r3
 801290c:	185b      	adds	r3, r3, r1
 801290e:	2200      	movs	r2, #0
 8012910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012912:	193b      	adds	r3, r7, r4
 8012914:	781a      	ldrb	r2, [r3, #0]
 8012916:	193b      	adds	r3, r7, r4
 8012918:	3201      	adds	r2, #1
 801291a:	701a      	strb	r2, [r3, #0]
 801291c:	230f      	movs	r3, #15
 801291e:	18fb      	adds	r3, r7, r3
 8012920:	781a      	ldrb	r2, [r3, #0]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	429a      	cmp	r2, r3
 8012928:	d3a1      	bcc.n	801286e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6818      	ldr	r0, [r3, #0]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	466a      	mov	r2, sp
 8012932:	0011      	movs	r1, r2
 8012934:	001a      	movs	r2, r3
 8012936:	3210      	adds	r2, #16
 8012938:	ca70      	ldmia	r2!, {r4, r5, r6}
 801293a:	c170      	stmia	r1!, {r4, r5, r6}
 801293c:	ca30      	ldmia	r2!, {r4, r5}
 801293e:	c130      	stmia	r1!, {r4, r5}
 8012940:	6859      	ldr	r1, [r3, #4]
 8012942:	689a      	ldr	r2, [r3, #8]
 8012944:	68db      	ldr	r3, [r3, #12]
 8012946:	f005 fe4f 	bl	80185e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2224      	movs	r2, #36	@ 0x24
 801294e:	2100      	movs	r1, #0
 8012950:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	4a07      	ldr	r2, [pc, #28]	@ (8012974 <HAL_PCD_Init+0x1fc>)
 8012956:	2101      	movs	r1, #1
 8012958:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	69db      	ldr	r3, [r3, #28]
 801295e:	2b01      	cmp	r3, #1
 8012960:	d103      	bne.n	801296a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	0018      	movs	r0, r3
 8012966:	f001 fd23 	bl	80143b0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801296a:	2300      	movs	r3, #0
}
 801296c:	0018      	movs	r0, r3
 801296e:	46bd      	mov	sp, r7
 8012970:	b005      	add	sp, #20
 8012972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012974:	000002a9 	.word	0x000002a9

08012978 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	23aa      	movs	r3, #170	@ 0xaa
 8012984:	009b      	lsls	r3, r3, #2
 8012986:	5cd3      	ldrb	r3, [r2, r3]
 8012988:	2b01      	cmp	r3, #1
 801298a:	d101      	bne.n	8012990 <HAL_PCD_Start+0x18>
 801298c:	2302      	movs	r3, #2
 801298e:	e014      	b.n	80129ba <HAL_PCD_Start+0x42>
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	23aa      	movs	r3, #170	@ 0xaa
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	2101      	movs	r1, #1
 8012998:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	0018      	movs	r0, r3
 80129a0:	f005 fdf2 	bl	8018588 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	0018      	movs	r0, r3
 80129aa:	f007 fdf5 	bl	801a598 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	23aa      	movs	r3, #170	@ 0xaa
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	2100      	movs	r1, #0
 80129b6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80129b8:	2300      	movs	r3, #0
}
 80129ba:	0018      	movs	r0, r3
 80129bc:	46bd      	mov	sp, r7
 80129be:	b002      	add	sp, #8
 80129c0:	bd80      	pop	{r7, pc}
	...

080129c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	0018      	movs	r0, r3
 80129d2:	f007 fdf7 	bl	801a5c4 <USB_ReadInterrupts>
 80129d6:	0003      	movs	r3, r0
 80129d8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	2380      	movs	r3, #128	@ 0x80
 80129de:	021b      	lsls	r3, r3, #8
 80129e0:	4013      	ands	r3, r2
 80129e2:	d004      	beq.n	80129ee <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	0018      	movs	r0, r3
 80129e8:	f000 fb62 	bl	80130b0 <PCD_EP_ISR_Handler>

    return;
 80129ec:	e11d      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80129ee:	68fa      	ldr	r2, [r7, #12]
 80129f0:	2380      	movs	r3, #128	@ 0x80
 80129f2:	00db      	lsls	r3, r3, #3
 80129f4:	4013      	ands	r3, r2
 80129f6:	d015      	beq.n	8012a24 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2244      	movs	r2, #68	@ 0x44
 80129fe:	5a9b      	ldrh	r3, [r3, r2]
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	498a      	ldr	r1, [pc, #552]	@ (8012c30 <HAL_PCD_IRQHandler+0x26c>)
 8012a08:	400a      	ands	r2, r1
 8012a0a:	b291      	uxth	r1, r2
 8012a0c:	2244      	movs	r2, #68	@ 0x44
 8012a0e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	0018      	movs	r0, r3
 8012a14:	f009 fe95 	bl	801c742 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	0018      	movs	r0, r3
 8012a1e:	f000 f915 	bl	8012c4c <HAL_PCD_SetAddress>

    return;
 8012a22:	e102      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8012a24:	68fa      	ldr	r2, [r7, #12]
 8012a26:	2380      	movs	r3, #128	@ 0x80
 8012a28:	01db      	lsls	r3, r3, #7
 8012a2a:	4013      	ands	r3, r2
 8012a2c:	d00c      	beq.n	8012a48 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	2244      	movs	r2, #68	@ 0x44
 8012a34:	5a9b      	ldrh	r3, [r3, r2]
 8012a36:	b29a      	uxth	r2, r3
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	497d      	ldr	r1, [pc, #500]	@ (8012c34 <HAL_PCD_IRQHandler+0x270>)
 8012a3e:	400a      	ands	r2, r1
 8012a40:	b291      	uxth	r1, r2
 8012a42:	2244      	movs	r2, #68	@ 0x44
 8012a44:	5299      	strh	r1, [r3, r2]

    return;
 8012a46:	e0f0      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8012a48:	68fa      	ldr	r2, [r7, #12]
 8012a4a:	2380      	movs	r3, #128	@ 0x80
 8012a4c:	019b      	lsls	r3, r3, #6
 8012a4e:	4013      	ands	r3, r2
 8012a50:	d00c      	beq.n	8012a6c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2244      	movs	r2, #68	@ 0x44
 8012a58:	5a9b      	ldrh	r3, [r3, r2]
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	4975      	ldr	r1, [pc, #468]	@ (8012c38 <HAL_PCD_IRQHandler+0x274>)
 8012a62:	400a      	ands	r2, r1
 8012a64:	b291      	uxth	r1, r2
 8012a66:	2244      	movs	r2, #68	@ 0x44
 8012a68:	5299      	strh	r1, [r3, r2]

    return;
 8012a6a:	e0de      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8012a6c:	68fa      	ldr	r2, [r7, #12]
 8012a6e:	2380      	movs	r3, #128	@ 0x80
 8012a70:	015b      	lsls	r3, r3, #5
 8012a72:	4013      	ands	r3, r2
 8012a74:	d038      	beq.n	8012ae8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	2240      	movs	r2, #64	@ 0x40
 8012a7c:	5a9b      	ldrh	r3, [r3, r2]
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	2104      	movs	r1, #4
 8012a86:	438a      	bics	r2, r1
 8012a88:	b291      	uxth	r1, r2
 8012a8a:	2240      	movs	r2, #64	@ 0x40
 8012a8c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2240      	movs	r2, #64	@ 0x40
 8012a94:	5a9b      	ldrh	r3, [r3, r2]
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	2108      	movs	r1, #8
 8012a9e:	438a      	bics	r2, r1
 8012aa0:	b291      	uxth	r1, r2
 8012aa2:	2240      	movs	r2, #64	@ 0x40
 8012aa4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	23b8      	movs	r3, #184	@ 0xb8
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	5cd3      	ldrb	r3, [r2, r3]
 8012aae:	2b01      	cmp	r3, #1
 8012ab0:	d109      	bne.n	8012ac6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	23b8      	movs	r3, #184	@ 0xb8
 8012ab6:	009b      	lsls	r3, r3, #2
 8012ab8:	2100      	movs	r1, #0
 8012aba:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2100      	movs	r1, #0
 8012ac0:	0018      	movs	r0, r3
 8012ac2:	f001 fc9f 	bl	8014404 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	0018      	movs	r0, r3
 8012aca:	f009 fe7b 	bl	801c7c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2244      	movs	r2, #68	@ 0x44
 8012ad4:	5a9b      	ldrh	r3, [r3, r2]
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4957      	ldr	r1, [pc, #348]	@ (8012c3c <HAL_PCD_IRQHandler+0x278>)
 8012ade:	400a      	ands	r2, r1
 8012ae0:	b291      	uxth	r1, r2
 8012ae2:	2244      	movs	r2, #68	@ 0x44
 8012ae4:	5299      	strh	r1, [r3, r2]

    return;
 8012ae6:	e0a0      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8012ae8:	68fa      	ldr	r2, [r7, #12]
 8012aea:	2380      	movs	r3, #128	@ 0x80
 8012aec:	011b      	lsls	r3, r3, #4
 8012aee:	4013      	ands	r3, r2
 8012af0:	d028      	beq.n	8012b44 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2240      	movs	r2, #64	@ 0x40
 8012af8:	5a9b      	ldrh	r3, [r3, r2]
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2108      	movs	r1, #8
 8012b02:	430a      	orrs	r2, r1
 8012b04:	b291      	uxth	r1, r2
 8012b06:	2240      	movs	r2, #64	@ 0x40
 8012b08:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2244      	movs	r2, #68	@ 0x44
 8012b10:	5a9b      	ldrh	r3, [r3, r2]
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4949      	ldr	r1, [pc, #292]	@ (8012c40 <HAL_PCD_IRQHandler+0x27c>)
 8012b1a:	400a      	ands	r2, r1
 8012b1c:	b291      	uxth	r1, r2
 8012b1e:	2244      	movs	r2, #68	@ 0x44
 8012b20:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2240      	movs	r2, #64	@ 0x40
 8012b28:	5a9b      	ldrh	r3, [r3, r2]
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2104      	movs	r1, #4
 8012b32:	430a      	orrs	r2, r1
 8012b34:	b291      	uxth	r1, r2
 8012b36:	2240      	movs	r2, #64	@ 0x40
 8012b38:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	0018      	movs	r0, r3
 8012b3e:	f009 fe25 	bl	801c78c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012b42:	e072      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	2280      	movs	r2, #128	@ 0x80
 8012b48:	4013      	ands	r3, r2
 8012b4a:	d046      	beq.n	8012bda <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2244      	movs	r2, #68	@ 0x44
 8012b52:	5a9b      	ldrh	r3, [r3, r2]
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2180      	movs	r1, #128	@ 0x80
 8012b5c:	438a      	bics	r2, r1
 8012b5e:	b291      	uxth	r1, r2
 8012b60:	2244      	movs	r2, #68	@ 0x44
 8012b62:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	23b8      	movs	r3, #184	@ 0xb8
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	5cd3      	ldrb	r3, [r2, r3]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d12f      	bne.n	8012bd0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2240      	movs	r2, #64	@ 0x40
 8012b76:	5a9b      	ldrh	r3, [r3, r2]
 8012b78:	b29a      	uxth	r2, r3
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2104      	movs	r1, #4
 8012b80:	430a      	orrs	r2, r1
 8012b82:	b291      	uxth	r1, r2
 8012b84:	2240      	movs	r2, #64	@ 0x40
 8012b86:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2240      	movs	r2, #64	@ 0x40
 8012b8e:	5a9b      	ldrh	r3, [r3, r2]
 8012b90:	b29a      	uxth	r2, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2108      	movs	r1, #8
 8012b98:	430a      	orrs	r2, r1
 8012b9a:	b291      	uxth	r1, r2
 8012b9c:	2240      	movs	r2, #64	@ 0x40
 8012b9e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	23b8      	movs	r3, #184	@ 0xb8
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	2101      	movs	r1, #1
 8012ba8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2254      	movs	r2, #84	@ 0x54
 8012bb0:	5a9b      	ldrh	r3, [r3, r2]
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	089b      	lsrs	r3, r3, #2
 8012bb6:	223c      	movs	r2, #60	@ 0x3c
 8012bb8:	4013      	ands	r3, r2
 8012bba:	0019      	movs	r1, r3
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	23b9      	movs	r3, #185	@ 0xb9
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2101      	movs	r1, #1
 8012bc8:	0018      	movs	r0, r3
 8012bca:	f001 fc1b 	bl	8014404 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8012bce:	e02c      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	0018      	movs	r0, r3
 8012bd4:	f009 fdda 	bl	801c78c <HAL_PCD_SuspendCallback>
    return;
 8012bd8:	e027      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8012bda:	68fa      	ldr	r2, [r7, #12]
 8012bdc:	2380      	movs	r3, #128	@ 0x80
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	4013      	ands	r3, r2
 8012be2:	d010      	beq.n	8012c06 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2244      	movs	r2, #68	@ 0x44
 8012bea:	5a9b      	ldrh	r3, [r3, r2]
 8012bec:	b29a      	uxth	r2, r3
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4914      	ldr	r1, [pc, #80]	@ (8012c44 <HAL_PCD_IRQHandler+0x280>)
 8012bf4:	400a      	ands	r2, r1
 8012bf6:	b291      	uxth	r1, r2
 8012bf8:	2244      	movs	r2, #68	@ 0x44
 8012bfa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	0018      	movs	r0, r3
 8012c00:	f009 fd90 	bl	801c724 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012c04:	e011      	b.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	2380      	movs	r3, #128	@ 0x80
 8012c0a:	005b      	lsls	r3, r3, #1
 8012c0c:	4013      	ands	r3, r2
 8012c0e:	d00c      	beq.n	8012c2a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	2244      	movs	r2, #68	@ 0x44
 8012c16:	5a9b      	ldrh	r3, [r3, r2]
 8012c18:	b29a      	uxth	r2, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	490a      	ldr	r1, [pc, #40]	@ (8012c48 <HAL_PCD_IRQHandler+0x284>)
 8012c20:	400a      	ands	r2, r1
 8012c22:	b291      	uxth	r1, r2
 8012c24:	2244      	movs	r2, #68	@ 0x44
 8012c26:	5299      	strh	r1, [r3, r2]

    return;
 8012c28:	46c0      	nop			@ (mov r8, r8)
  }
}
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	b004      	add	sp, #16
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	fffffbff 	.word	0xfffffbff
 8012c34:	ffffbfff 	.word	0xffffbfff
 8012c38:	ffffdfff 	.word	0xffffdfff
 8012c3c:	ffffefff 	.word	0xffffefff
 8012c40:	fffff7ff 	.word	0xfffff7ff
 8012c44:	fffffdff 	.word	0xfffffdff
 8012c48:	fffffeff 	.word	0xfffffeff

08012c4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	000a      	movs	r2, r1
 8012c56:	1cfb      	adds	r3, r7, #3
 8012c58:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	23aa      	movs	r3, #170	@ 0xaa
 8012c5e:	009b      	lsls	r3, r3, #2
 8012c60:	5cd3      	ldrb	r3, [r2, r3]
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d101      	bne.n	8012c6a <HAL_PCD_SetAddress+0x1e>
 8012c66:	2302      	movs	r3, #2
 8012c68:	e017      	b.n	8012c9a <HAL_PCD_SetAddress+0x4e>
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	23aa      	movs	r3, #170	@ 0xaa
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	2101      	movs	r1, #1
 8012c72:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	1cfa      	adds	r2, r7, #3
 8012c78:	2124      	movs	r1, #36	@ 0x24
 8012c7a:	7812      	ldrb	r2, [r2, #0]
 8012c7c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681a      	ldr	r2, [r3, #0]
 8012c82:	1cfb      	adds	r3, r7, #3
 8012c84:	781b      	ldrb	r3, [r3, #0]
 8012c86:	0019      	movs	r1, r3
 8012c88:	0010      	movs	r0, r2
 8012c8a:	f007 fc71 	bl	801a570 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	23aa      	movs	r3, #170	@ 0xaa
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	2100      	movs	r1, #0
 8012c96:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012c98:	2300      	movs	r3, #0
}
 8012c9a:	0018      	movs	r0, r3
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	b002      	add	sp, #8
 8012ca0:	bd80      	pop	{r7, pc}

08012ca2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012ca2:	b590      	push	{r4, r7, lr}
 8012ca4:	b085      	sub	sp, #20
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
 8012caa:	000c      	movs	r4, r1
 8012cac:	0010      	movs	r0, r2
 8012cae:	0019      	movs	r1, r3
 8012cb0:	1cfb      	adds	r3, r7, #3
 8012cb2:	1c22      	adds	r2, r4, #0
 8012cb4:	701a      	strb	r2, [r3, #0]
 8012cb6:	003b      	movs	r3, r7
 8012cb8:	1c02      	adds	r2, r0, #0
 8012cba:	801a      	strh	r2, [r3, #0]
 8012cbc:	1cbb      	adds	r3, r7, #2
 8012cbe:	1c0a      	adds	r2, r1, #0
 8012cc0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012cc2:	230b      	movs	r3, #11
 8012cc4:	18fb      	adds	r3, r7, r3
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012cca:	1cfb      	adds	r3, r7, #3
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	b25b      	sxtb	r3, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	da0f      	bge.n	8012cf4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012cd4:	1cfb      	adds	r3, r7, #3
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	2207      	movs	r2, #7
 8012cda:	4013      	ands	r3, r2
 8012cdc:	1c5a      	adds	r2, r3, #1
 8012cde:	0013      	movs	r3, r2
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	189b      	adds	r3, r3, r2
 8012ce4:	00db      	lsls	r3, r3, #3
 8012ce6:	687a      	ldr	r2, [r7, #4]
 8012ce8:	18d3      	adds	r3, r2, r3
 8012cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	705a      	strb	r2, [r3, #1]
 8012cf2:	e00f      	b.n	8012d14 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012cf4:	1cfb      	adds	r3, r7, #3
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	2207      	movs	r2, #7
 8012cfa:	401a      	ands	r2, r3
 8012cfc:	0013      	movs	r3, r2
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	189b      	adds	r3, r3, r2
 8012d02:	00db      	lsls	r3, r3, #3
 8012d04:	3369      	adds	r3, #105	@ 0x69
 8012d06:	33ff      	adds	r3, #255	@ 0xff
 8012d08:	687a      	ldr	r2, [r7, #4]
 8012d0a:	18d3      	adds	r3, r2, r3
 8012d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2200      	movs	r2, #0
 8012d12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012d14:	1cfb      	adds	r3, r7, #3
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	2207      	movs	r2, #7
 8012d1a:	4013      	ands	r3, r2
 8012d1c:	b2da      	uxtb	r2, r3
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8012d22:	003b      	movs	r3, r7
 8012d24:	881a      	ldrh	r2, [r3, #0]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	1cba      	adds	r2, r7, #2
 8012d2e:	7812      	ldrb	r2, [r2, #0]
 8012d30:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012d32:	1cbb      	adds	r3, r7, #2
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	2b02      	cmp	r3, #2
 8012d38:	d102      	bne.n	8012d40 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	23aa      	movs	r3, #170	@ 0xaa
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	5cd3      	ldrb	r3, [r2, r3]
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d101      	bne.n	8012d50 <HAL_PCD_EP_Open+0xae>
 8012d4c:	2302      	movs	r3, #2
 8012d4e:	e013      	b.n	8012d78 <HAL_PCD_EP_Open+0xd6>
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	23aa      	movs	r3, #170	@ 0xaa
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	2101      	movs	r1, #1
 8012d58:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	68fa      	ldr	r2, [r7, #12]
 8012d60:	0011      	movs	r1, r2
 8012d62:	0018      	movs	r0, r3
 8012d64:	f005 fc68 	bl	8018638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	23aa      	movs	r3, #170	@ 0xaa
 8012d6c:	009b      	lsls	r3, r3, #2
 8012d6e:	2100      	movs	r1, #0
 8012d70:	54d1      	strb	r1, [r2, r3]

  return ret;
 8012d72:	230b      	movs	r3, #11
 8012d74:	18fb      	adds	r3, r7, r3
 8012d76:	781b      	ldrb	r3, [r3, #0]
}
 8012d78:	0018      	movs	r0, r3
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	b005      	add	sp, #20
 8012d7e:	bd90      	pop	{r4, r7, pc}

08012d80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b084      	sub	sp, #16
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	000a      	movs	r2, r1
 8012d8a:	1cfb      	adds	r3, r7, #3
 8012d8c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012d8e:	1cfb      	adds	r3, r7, #3
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	b25b      	sxtb	r3, r3
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	da0f      	bge.n	8012db8 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012d98:	1cfb      	adds	r3, r7, #3
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	2207      	movs	r2, #7
 8012d9e:	4013      	ands	r3, r2
 8012da0:	1c5a      	adds	r2, r3, #1
 8012da2:	0013      	movs	r3, r2
 8012da4:	009b      	lsls	r3, r3, #2
 8012da6:	189b      	adds	r3, r3, r2
 8012da8:	00db      	lsls	r3, r3, #3
 8012daa:	687a      	ldr	r2, [r7, #4]
 8012dac:	18d3      	adds	r3, r2, r3
 8012dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2201      	movs	r2, #1
 8012db4:	705a      	strb	r2, [r3, #1]
 8012db6:	e00f      	b.n	8012dd8 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012db8:	1cfb      	adds	r3, r7, #3
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	2207      	movs	r2, #7
 8012dbe:	401a      	ands	r2, r3
 8012dc0:	0013      	movs	r3, r2
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	189b      	adds	r3, r3, r2
 8012dc6:	00db      	lsls	r3, r3, #3
 8012dc8:	3369      	adds	r3, #105	@ 0x69
 8012dca:	33ff      	adds	r3, #255	@ 0xff
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	18d3      	adds	r3, r2, r3
 8012dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012dd8:	1cfb      	adds	r3, r7, #3
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	2207      	movs	r2, #7
 8012dde:	4013      	ands	r3, r2
 8012de0:	b2da      	uxtb	r2, r3
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	23aa      	movs	r3, #170	@ 0xaa
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	5cd3      	ldrb	r3, [r2, r3]
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	d101      	bne.n	8012df6 <HAL_PCD_EP_Close+0x76>
 8012df2:	2302      	movs	r3, #2
 8012df4:	e011      	b.n	8012e1a <HAL_PCD_EP_Close+0x9a>
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	23aa      	movs	r3, #170	@ 0xaa
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	2101      	movs	r1, #1
 8012dfe:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	0011      	movs	r1, r2
 8012e08:	0018      	movs	r0, r3
 8012e0a:	f005 ffb7 	bl	8018d7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	23aa      	movs	r3, #170	@ 0xaa
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	2100      	movs	r1, #0
 8012e16:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012e18:	2300      	movs	r3, #0
}
 8012e1a:	0018      	movs	r0, r3
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	b004      	add	sp, #16
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b086      	sub	sp, #24
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	60f8      	str	r0, [r7, #12]
 8012e2a:	607a      	str	r2, [r7, #4]
 8012e2c:	603b      	str	r3, [r7, #0]
 8012e2e:	200b      	movs	r0, #11
 8012e30:	183b      	adds	r3, r7, r0
 8012e32:	1c0a      	adds	r2, r1, #0
 8012e34:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012e36:	0001      	movs	r1, r0
 8012e38:	187b      	adds	r3, r7, r1
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	2207      	movs	r2, #7
 8012e3e:	401a      	ands	r2, r3
 8012e40:	0013      	movs	r3, r2
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	189b      	adds	r3, r3, r2
 8012e46:	00db      	lsls	r3, r3, #3
 8012e48:	3369      	adds	r3, #105	@ 0x69
 8012e4a:	33ff      	adds	r3, #255	@ 0xff
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	18d3      	adds	r3, r2, r3
 8012e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	683a      	ldr	r2, [r7, #0]
 8012e5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	2200      	movs	r2, #0
 8012e62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	2200      	movs	r2, #0
 8012e68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012e6a:	187b      	adds	r3, r7, r1
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	2207      	movs	r2, #7
 8012e70:	4013      	ands	r3, r2
 8012e72:	b2da      	uxtb	r2, r3
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	697a      	ldr	r2, [r7, #20]
 8012e7e:	0011      	movs	r1, r2
 8012e80:	0018      	movs	r0, r3
 8012e82:	f006 f93b 	bl	80190fc <USB_EPStartXfer>

  return HAL_OK;
 8012e86:	2300      	movs	r3, #0
}
 8012e88:	0018      	movs	r0, r3
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	b006      	add	sp, #24
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	000a      	movs	r2, r1
 8012e9a:	1cfb      	adds	r3, r7, #3
 8012e9c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012e9e:	1cfb      	adds	r3, r7, #3
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	2207      	movs	r2, #7
 8012ea4:	401a      	ands	r2, r3
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	23c2      	movs	r3, #194	@ 0xc2
 8012eaa:	0059      	lsls	r1, r3, #1
 8012eac:	0013      	movs	r3, r2
 8012eae:	009b      	lsls	r3, r3, #2
 8012eb0:	189b      	adds	r3, r3, r2
 8012eb2:	00db      	lsls	r3, r3, #3
 8012eb4:	18c3      	adds	r3, r0, r3
 8012eb6:	185b      	adds	r3, r3, r1
 8012eb8:	681b      	ldr	r3, [r3, #0]
}
 8012eba:	0018      	movs	r0, r3
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	b002      	add	sp, #8
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b086      	sub	sp, #24
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	60f8      	str	r0, [r7, #12]
 8012eca:	607a      	str	r2, [r7, #4]
 8012ecc:	603b      	str	r3, [r7, #0]
 8012ece:	200b      	movs	r0, #11
 8012ed0:	183b      	adds	r3, r7, r0
 8012ed2:	1c0a      	adds	r2, r1, #0
 8012ed4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012ed6:	183b      	adds	r3, r7, r0
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	2207      	movs	r2, #7
 8012edc:	4013      	ands	r3, r2
 8012ede:	1c5a      	adds	r2, r3, #1
 8012ee0:	0013      	movs	r3, r2
 8012ee2:	009b      	lsls	r3, r3, #2
 8012ee4:	189b      	adds	r3, r3, r2
 8012ee6:	00db      	lsls	r3, r3, #3
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	18d3      	adds	r3, r2, r3
 8012eec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	683a      	ldr	r2, [r7, #0]
 8012ef8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	2224      	movs	r2, #36	@ 0x24
 8012efe:	2101      	movs	r1, #1
 8012f00:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	683a      	ldr	r2, [r7, #0]
 8012f06:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	2201      	movs	r2, #1
 8012f12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012f14:	183b      	adds	r3, r7, r0
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	2207      	movs	r2, #7
 8012f1a:	4013      	ands	r3, r2
 8012f1c:	b2da      	uxtb	r2, r3
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	697a      	ldr	r2, [r7, #20]
 8012f28:	0011      	movs	r1, r2
 8012f2a:	0018      	movs	r0, r3
 8012f2c:	f006 f8e6 	bl	80190fc <USB_EPStartXfer>

  return HAL_OK;
 8012f30:	2300      	movs	r3, #0
}
 8012f32:	0018      	movs	r0, r3
 8012f34:	46bd      	mov	sp, r7
 8012f36:	b006      	add	sp, #24
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b084      	sub	sp, #16
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
 8012f42:	000a      	movs	r2, r1
 8012f44:	1cfb      	adds	r3, r7, #3
 8012f46:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012f48:	1cfb      	adds	r3, r7, #3
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	2207      	movs	r2, #7
 8012f4e:	401a      	ands	r2, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d901      	bls.n	8012f5c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	e046      	b.n	8012fea <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012f5c:	1cfb      	adds	r3, r7, #3
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	b25b      	sxtb	r3, r3
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	da0f      	bge.n	8012f86 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012f66:	1cfb      	adds	r3, r7, #3
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	2207      	movs	r2, #7
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	1c5a      	adds	r2, r3, #1
 8012f70:	0013      	movs	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	189b      	adds	r3, r3, r2
 8012f76:	00db      	lsls	r3, r3, #3
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	18d3      	adds	r3, r2, r3
 8012f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2201      	movs	r2, #1
 8012f82:	705a      	strb	r2, [r3, #1]
 8012f84:	e00d      	b.n	8012fa2 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012f86:	1cfb      	adds	r3, r7, #3
 8012f88:	781a      	ldrb	r2, [r3, #0]
 8012f8a:	0013      	movs	r3, r2
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	189b      	adds	r3, r3, r2
 8012f90:	00db      	lsls	r3, r3, #3
 8012f92:	3369      	adds	r3, #105	@ 0x69
 8012f94:	33ff      	adds	r3, #255	@ 0xff
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	18d3      	adds	r3, r2, r3
 8012f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012fa8:	1cfb      	adds	r3, r7, #3
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	2207      	movs	r2, #7
 8012fae:	4013      	ands	r3, r2
 8012fb0:	b2da      	uxtb	r2, r3
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	23aa      	movs	r3, #170	@ 0xaa
 8012fba:	009b      	lsls	r3, r3, #2
 8012fbc:	5cd3      	ldrb	r3, [r2, r3]
 8012fbe:	2b01      	cmp	r3, #1
 8012fc0:	d101      	bne.n	8012fc6 <HAL_PCD_EP_SetStall+0x8c>
 8012fc2:	2302      	movs	r3, #2
 8012fc4:	e011      	b.n	8012fea <HAL_PCD_EP_SetStall+0xb0>
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	23aa      	movs	r3, #170	@ 0xaa
 8012fca:	009b      	lsls	r3, r3, #2
 8012fcc:	2101      	movs	r1, #1
 8012fce:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	68fa      	ldr	r2, [r7, #12]
 8012fd6:	0011      	movs	r1, r2
 8012fd8:	0018      	movs	r0, r3
 8012fda:	f007 f9c7 	bl	801a36c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	23aa      	movs	r3, #170	@ 0xaa
 8012fe2:	009b      	lsls	r3, r3, #2
 8012fe4:	2100      	movs	r1, #0
 8012fe6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012fe8:	2300      	movs	r3, #0
}
 8012fea:	0018      	movs	r0, r3
 8012fec:	46bd      	mov	sp, r7
 8012fee:	b004      	add	sp, #16
 8012ff0:	bd80      	pop	{r7, pc}

08012ff2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b084      	sub	sp, #16
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
 8012ffa:	000a      	movs	r2, r1
 8012ffc:	1cfb      	adds	r3, r7, #3
 8012ffe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013000:	1cfb      	adds	r3, r7, #3
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	220f      	movs	r2, #15
 8013006:	401a      	ands	r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	429a      	cmp	r2, r3
 801300e:	d901      	bls.n	8013014 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013010:	2301      	movs	r3, #1
 8013012:	e048      	b.n	80130a6 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013014:	1cfb      	adds	r3, r7, #3
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	b25b      	sxtb	r3, r3
 801301a:	2b00      	cmp	r3, #0
 801301c:	da0f      	bge.n	801303e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801301e:	1cfb      	adds	r3, r7, #3
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	2207      	movs	r2, #7
 8013024:	4013      	ands	r3, r2
 8013026:	1c5a      	adds	r2, r3, #1
 8013028:	0013      	movs	r3, r2
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	189b      	adds	r3, r3, r2
 801302e:	00db      	lsls	r3, r3, #3
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	18d3      	adds	r3, r2, r3
 8013034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2201      	movs	r2, #1
 801303a:	705a      	strb	r2, [r3, #1]
 801303c:	e00f      	b.n	801305e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801303e:	1cfb      	adds	r3, r7, #3
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	2207      	movs	r2, #7
 8013044:	401a      	ands	r2, r3
 8013046:	0013      	movs	r3, r2
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	189b      	adds	r3, r3, r2
 801304c:	00db      	lsls	r3, r3, #3
 801304e:	3369      	adds	r3, #105	@ 0x69
 8013050:	33ff      	adds	r3, #255	@ 0xff
 8013052:	687a      	ldr	r2, [r7, #4]
 8013054:	18d3      	adds	r3, r2, r3
 8013056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2200      	movs	r2, #0
 801305c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2200      	movs	r2, #0
 8013062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013064:	1cfb      	adds	r3, r7, #3
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2207      	movs	r2, #7
 801306a:	4013      	ands	r3, r2
 801306c:	b2da      	uxtb	r2, r3
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	23aa      	movs	r3, #170	@ 0xaa
 8013076:	009b      	lsls	r3, r3, #2
 8013078:	5cd3      	ldrb	r3, [r2, r3]
 801307a:	2b01      	cmp	r3, #1
 801307c:	d101      	bne.n	8013082 <HAL_PCD_EP_ClrStall+0x90>
 801307e:	2302      	movs	r3, #2
 8013080:	e011      	b.n	80130a6 <HAL_PCD_EP_ClrStall+0xb4>
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	23aa      	movs	r3, #170	@ 0xaa
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	2101      	movs	r1, #1
 801308a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	68fa      	ldr	r2, [r7, #12]
 8013092:	0011      	movs	r1, r2
 8013094:	0018      	movs	r0, r3
 8013096:	f007 f9b9 	bl	801a40c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	23aa      	movs	r3, #170	@ 0xaa
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	2100      	movs	r1, #0
 80130a2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80130a4:	2300      	movs	r3, #0
}
 80130a6:	0018      	movs	r0, r3
 80130a8:	46bd      	mov	sp, r7
 80130aa:	b004      	add	sp, #16
 80130ac:	bd80      	pop	{r7, pc}
	...

080130b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80130b0:	b5b0      	push	{r4, r5, r7, lr}
 80130b2:	b096      	sub	sp, #88	@ 0x58
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80130b8:	f000 fbec 	bl	8013894 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681a      	ldr	r2, [r3, #0]
 80130c0:	204e      	movs	r0, #78	@ 0x4e
 80130c2:	183b      	adds	r3, r7, r0
 80130c4:	2144      	movs	r1, #68	@ 0x44
 80130c6:	5a52      	ldrh	r2, [r2, r1]
 80130c8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80130ca:	183b      	adds	r3, r7, r0
 80130cc:	881b      	ldrh	r3, [r3, #0]
 80130ce:	b2da      	uxtb	r2, r3
 80130d0:	244d      	movs	r4, #77	@ 0x4d
 80130d2:	193b      	adds	r3, r7, r4
 80130d4:	210f      	movs	r1, #15
 80130d6:	400a      	ands	r2, r1
 80130d8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80130da:	193b      	adds	r3, r7, r4
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d000      	beq.n	80130e4 <PCD_EP_ISR_Handler+0x34>
 80130e2:	e18f      	b.n	8013404 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80130e4:	183b      	adds	r3, r7, r0
 80130e6:	881b      	ldrh	r3, [r3, #0]
 80130e8:	2210      	movs	r2, #16
 80130ea:	4013      	ands	r3, r2
 80130ec:	d155      	bne.n	801319a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	881b      	ldrh	r3, [r3, #0]
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	200e      	movs	r0, #14
 80130f8:	183b      	adds	r3, r7, r0
 80130fa:	49bb      	ldr	r1, [pc, #748]	@ (80133e8 <PCD_EP_ISR_Handler+0x338>)
 80130fc:	400a      	ands	r2, r1
 80130fe:	801a      	strh	r2, [r3, #0]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	183a      	adds	r2, r7, r0
 8013106:	8812      	ldrh	r2, [r2, #0]
 8013108:	49b8      	ldr	r1, [pc, #736]	@ (80133ec <PCD_EP_ISR_Handler+0x33c>)
 801310a:	430a      	orrs	r2, r1
 801310c:	b292      	uxth	r2, r2
 801310e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	3328      	adds	r3, #40	@ 0x28
 8013114:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2250      	movs	r2, #80	@ 0x50
 801311c:	5a9b      	ldrh	r3, [r3, r2]
 801311e:	b29b      	uxth	r3, r3
 8013120:	001a      	movs	r2, r3
 8013122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	00db      	lsls	r3, r3, #3
 8013128:	18d2      	adds	r2, r2, r3
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	18d3      	adds	r3, r2, r3
 8013130:	4aaf      	ldr	r2, [pc, #700]	@ (80133f0 <PCD_EP_ISR_Handler+0x340>)
 8013132:	4694      	mov	ip, r2
 8013134:	4463      	add	r3, ip
 8013136:	881b      	ldrh	r3, [r3, #0]
 8013138:	059b      	lsls	r3, r3, #22
 801313a:	0d9a      	lsrs	r2, r3, #22
 801313c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801313e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013142:	695a      	ldr	r2, [r3, #20]
 8013144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013146:	69db      	ldr	r3, [r3, #28]
 8013148:	18d2      	adds	r2, r2, r3
 801314a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801314c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2100      	movs	r1, #0
 8013152:	0018      	movs	r0, r3
 8013154:	f009 fac8 	bl	801c6e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2224      	movs	r2, #36	@ 0x24
 801315c:	5c9b      	ldrb	r3, [r3, r2]
 801315e:	b2db      	uxtb	r3, r3
 8013160:	2b00      	cmp	r3, #0
 8013162:	d101      	bne.n	8013168 <PCD_EP_ISR_Handler+0xb8>
 8013164:	f000 fb96 	bl	8013894 <PCD_EP_ISR_Handler+0x7e4>
 8013168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801316a:	699b      	ldr	r3, [r3, #24]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d001      	beq.n	8013174 <PCD_EP_ISR_Handler+0xc4>
 8013170:	f000 fb90 	bl	8013894 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2224      	movs	r2, #36	@ 0x24
 8013178:	5c9b      	ldrb	r3, [r3, r2]
 801317a:	b2db      	uxtb	r3, r3
 801317c:	2280      	movs	r2, #128	@ 0x80
 801317e:	4252      	negs	r2, r2
 8013180:	4313      	orrs	r3, r2
 8013182:	b2da      	uxtb	r2, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	0011      	movs	r1, r2
 801318a:	224c      	movs	r2, #76	@ 0x4c
 801318c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2224      	movs	r2, #36	@ 0x24
 8013192:	2100      	movs	r1, #0
 8013194:	5499      	strb	r1, [r3, r2]
 8013196:	f000 fb7d 	bl	8013894 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	3369      	adds	r3, #105	@ 0x69
 801319e:	33ff      	adds	r3, #255	@ 0xff
 80131a0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	214a      	movs	r1, #74	@ 0x4a
 80131a8:	187b      	adds	r3, r7, r1
 80131aa:	8812      	ldrh	r2, [r2, #0]
 80131ac:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80131ae:	187b      	adds	r3, r7, r1
 80131b0:	881a      	ldrh	r2, [r3, #0]
 80131b2:	2380      	movs	r3, #128	@ 0x80
 80131b4:	011b      	lsls	r3, r3, #4
 80131b6:	4013      	ands	r3, r2
 80131b8:	d037      	beq.n	801322a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2250      	movs	r2, #80	@ 0x50
 80131c0:	5a9b      	ldrh	r3, [r3, r2]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	001a      	movs	r2, r3
 80131c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	00db      	lsls	r3, r3, #3
 80131cc:	18d2      	adds	r2, r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	18d3      	adds	r3, r2, r3
 80131d4:	4a87      	ldr	r2, [pc, #540]	@ (80133f4 <PCD_EP_ISR_Handler+0x344>)
 80131d6:	4694      	mov	ip, r2
 80131d8:	4463      	add	r3, ip
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	059b      	lsls	r3, r3, #22
 80131de:	0d9a      	lsrs	r2, r3, #22
 80131e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6818      	ldr	r0, [r3, #0]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	22ac      	movs	r2, #172	@ 0xac
 80131ec:	0092      	lsls	r2, r2, #2
 80131ee:	1899      	adds	r1, r3, r2
 80131f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80131f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	f007 fa3a 	bl	801a672 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	881b      	ldrh	r3, [r3, #0]
 8013204:	b29a      	uxth	r2, r3
 8013206:	2010      	movs	r0, #16
 8013208:	183b      	adds	r3, r7, r0
 801320a:	497b      	ldr	r1, [pc, #492]	@ (80133f8 <PCD_EP_ISR_Handler+0x348>)
 801320c:	400a      	ands	r2, r1
 801320e:	801a      	strh	r2, [r3, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	183a      	adds	r2, r7, r0
 8013216:	8812      	ldrh	r2, [r2, #0]
 8013218:	2180      	movs	r1, #128	@ 0x80
 801321a:	430a      	orrs	r2, r1
 801321c:	b292      	uxth	r2, r2
 801321e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	0018      	movs	r0, r3
 8013224:	f009 fa2a 	bl	801c67c <HAL_PCD_SetupStageCallback>
 8013228:	e334      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801322a:	234a      	movs	r3, #74	@ 0x4a
 801322c:	18fb      	adds	r3, r7, r3
 801322e:	2200      	movs	r2, #0
 8013230:	5e9b      	ldrsh	r3, [r3, r2]
 8013232:	2b00      	cmp	r3, #0
 8013234:	db00      	blt.n	8013238 <PCD_EP_ISR_Handler+0x188>
 8013236:	e32d      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	881b      	ldrh	r3, [r3, #0]
 801323e:	b29a      	uxth	r2, r3
 8013240:	201e      	movs	r0, #30
 8013242:	183b      	adds	r3, r7, r0
 8013244:	496c      	ldr	r1, [pc, #432]	@ (80133f8 <PCD_EP_ISR_Handler+0x348>)
 8013246:	400a      	ands	r2, r1
 8013248:	801a      	strh	r2, [r3, #0]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	183a      	adds	r2, r7, r0
 8013250:	8812      	ldrh	r2, [r2, #0]
 8013252:	2180      	movs	r1, #128	@ 0x80
 8013254:	430a      	orrs	r2, r1
 8013256:	b292      	uxth	r2, r2
 8013258:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2250      	movs	r2, #80	@ 0x50
 8013260:	5a9b      	ldrh	r3, [r3, r2]
 8013262:	b29b      	uxth	r3, r3
 8013264:	001a      	movs	r2, r3
 8013266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	00db      	lsls	r3, r3, #3
 801326c:	18d2      	adds	r2, r2, r3
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	18d3      	adds	r3, r2, r3
 8013274:	4a5f      	ldr	r2, [pc, #380]	@ (80133f4 <PCD_EP_ISR_Handler+0x344>)
 8013276:	4694      	mov	ip, r2
 8013278:	4463      	add	r3, ip
 801327a:	881b      	ldrh	r3, [r3, #0]
 801327c:	059b      	lsls	r3, r3, #22
 801327e:	0d9a      	lsrs	r2, r3, #22
 8013280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013282:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013286:	69db      	ldr	r3, [r3, #28]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d01a      	beq.n	80132c2 <PCD_EP_ISR_Handler+0x212>
 801328c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801328e:	695b      	ldr	r3, [r3, #20]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d016      	beq.n	80132c2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6818      	ldr	r0, [r3, #0]
 8013298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801329a:	6959      	ldr	r1, [r3, #20]
 801329c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801329e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80132a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	f007 f9e4 	bl	801a672 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80132aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132ac:	695a      	ldr	r2, [r3, #20]
 80132ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132b0:	69db      	ldr	r3, [r3, #28]
 80132b2:	18d2      	adds	r2, r2, r3
 80132b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2100      	movs	r1, #0
 80132bc:	0018      	movs	r0, r3
 80132be:	f009 f9f2 	bl	801c6a6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681a      	ldr	r2, [r3, #0]
 80132c6:	214a      	movs	r1, #74	@ 0x4a
 80132c8:	187b      	adds	r3, r7, r1
 80132ca:	8812      	ldrh	r2, [r2, #0]
 80132cc:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80132ce:	187b      	adds	r3, r7, r1
 80132d0:	881a      	ldrh	r2, [r3, #0]
 80132d2:	2380      	movs	r3, #128	@ 0x80
 80132d4:	011b      	lsls	r3, r3, #4
 80132d6:	4013      	ands	r3, r2
 80132d8:	d000      	beq.n	80132dc <PCD_EP_ISR_Handler+0x22c>
 80132da:	e2db      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
 80132dc:	187b      	adds	r3, r7, r1
 80132de:	881a      	ldrh	r2, [r3, #0]
 80132e0:	23c0      	movs	r3, #192	@ 0xc0
 80132e2:	019b      	lsls	r3, r3, #6
 80132e4:	401a      	ands	r2, r3
 80132e6:	23c0      	movs	r3, #192	@ 0xc0
 80132e8:	019b      	lsls	r3, r3, #6
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d100      	bne.n	80132f0 <PCD_EP_ISR_Handler+0x240>
 80132ee:	e2d1      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	61bb      	str	r3, [r7, #24]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2250      	movs	r2, #80	@ 0x50
 80132fc:	5a9b      	ldrh	r3, [r3, r2]
 80132fe:	b29b      	uxth	r3, r3
 8013300:	001a      	movs	r2, r3
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	189b      	adds	r3, r3, r2
 8013306:	61bb      	str	r3, [r7, #24]
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	4a3a      	ldr	r2, [pc, #232]	@ (80133f4 <PCD_EP_ISR_Handler+0x344>)
 801330c:	4694      	mov	ip, r2
 801330e:	4463      	add	r3, ip
 8013310:	617b      	str	r3, [r7, #20]
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	881b      	ldrh	r3, [r3, #0]
 8013316:	b29b      	uxth	r3, r3
 8013318:	059b      	lsls	r3, r3, #22
 801331a:	0d9b      	lsrs	r3, r3, #22
 801331c:	b29a      	uxth	r2, r3
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	801a      	strh	r2, [r3, #0]
 8013322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013324:	691b      	ldr	r3, [r3, #16]
 8013326:	2b3e      	cmp	r3, #62	@ 0x3e
 8013328:	d91a      	bls.n	8013360 <PCD_EP_ISR_Handler+0x2b0>
 801332a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801332c:	691b      	ldr	r3, [r3, #16]
 801332e:	095b      	lsrs	r3, r3, #5
 8013330:	647b      	str	r3, [r7, #68]	@ 0x44
 8013332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013334:	691b      	ldr	r3, [r3, #16]
 8013336:	221f      	movs	r2, #31
 8013338:	4013      	ands	r3, r2
 801333a:	d102      	bne.n	8013342 <PCD_EP_ISR_Handler+0x292>
 801333c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801333e:	3b01      	subs	r3, #1
 8013340:	647b      	str	r3, [r7, #68]	@ 0x44
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	881b      	ldrh	r3, [r3, #0]
 8013346:	b29a      	uxth	r2, r3
 8013348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801334a:	b29b      	uxth	r3, r3
 801334c:	029b      	lsls	r3, r3, #10
 801334e:	b29b      	uxth	r3, r3
 8013350:	4313      	orrs	r3, r2
 8013352:	b29b      	uxth	r3, r3
 8013354:	4a25      	ldr	r2, [pc, #148]	@ (80133ec <PCD_EP_ISR_Handler+0x33c>)
 8013356:	4313      	orrs	r3, r2
 8013358:	b29a      	uxth	r2, r3
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	801a      	strh	r2, [r3, #0]
 801335e:	e023      	b.n	80133a8 <PCD_EP_ISR_Handler+0x2f8>
 8013360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013362:	691b      	ldr	r3, [r3, #16]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d108      	bne.n	801337a <PCD_EP_ISR_Handler+0x2ca>
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	881b      	ldrh	r3, [r3, #0]
 801336c:	b29b      	uxth	r3, r3
 801336e:	4a1f      	ldr	r2, [pc, #124]	@ (80133ec <PCD_EP_ISR_Handler+0x33c>)
 8013370:	4313      	orrs	r3, r2
 8013372:	b29a      	uxth	r2, r3
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	801a      	strh	r2, [r3, #0]
 8013378:	e016      	b.n	80133a8 <PCD_EP_ISR_Handler+0x2f8>
 801337a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801337c:	691b      	ldr	r3, [r3, #16]
 801337e:	085b      	lsrs	r3, r3, #1
 8013380:	647b      	str	r3, [r7, #68]	@ 0x44
 8013382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013384:	691b      	ldr	r3, [r3, #16]
 8013386:	2201      	movs	r2, #1
 8013388:	4013      	ands	r3, r2
 801338a:	d002      	beq.n	8013392 <PCD_EP_ISR_Handler+0x2e2>
 801338c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801338e:	3301      	adds	r3, #1
 8013390:	647b      	str	r3, [r7, #68]	@ 0x44
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	881b      	ldrh	r3, [r3, #0]
 8013396:	b29a      	uxth	r2, r3
 8013398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801339a:	b29b      	uxth	r3, r3
 801339c:	029b      	lsls	r3, r3, #10
 801339e:	b29b      	uxth	r3, r3
 80133a0:	4313      	orrs	r3, r2
 80133a2:	b29a      	uxth	r2, r3
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	2012      	movs	r0, #18
 80133b2:	183b      	adds	r3, r7, r0
 80133b4:	4911      	ldr	r1, [pc, #68]	@ (80133fc <PCD_EP_ISR_Handler+0x34c>)
 80133b6:	400a      	ands	r2, r1
 80133b8:	801a      	strh	r2, [r3, #0]
 80133ba:	183b      	adds	r3, r7, r0
 80133bc:	183a      	adds	r2, r7, r0
 80133be:	8812      	ldrh	r2, [r2, #0]
 80133c0:	2180      	movs	r1, #128	@ 0x80
 80133c2:	0149      	lsls	r1, r1, #5
 80133c4:	404a      	eors	r2, r1
 80133c6:	801a      	strh	r2, [r3, #0]
 80133c8:	183b      	adds	r3, r7, r0
 80133ca:	183a      	adds	r2, r7, r0
 80133cc:	8812      	ldrh	r2, [r2, #0]
 80133ce:	2180      	movs	r1, #128	@ 0x80
 80133d0:	0189      	lsls	r1, r1, #6
 80133d2:	404a      	eors	r2, r1
 80133d4:	801a      	strh	r2, [r3, #0]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	183a      	adds	r2, r7, r0
 80133dc:	8812      	ldrh	r2, [r2, #0]
 80133de:	4908      	ldr	r1, [pc, #32]	@ (8013400 <PCD_EP_ISR_Handler+0x350>)
 80133e0:	430a      	orrs	r2, r1
 80133e2:	b292      	uxth	r2, r2
 80133e4:	801a      	strh	r2, [r3, #0]
 80133e6:	e255      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
 80133e8:	ffff8f0f 	.word	0xffff8f0f
 80133ec:	ffff8000 	.word	0xffff8000
 80133f0:	00000402 	.word	0x00000402
 80133f4:	00000406 	.word	0x00000406
 80133f8:	00000f8f 	.word	0x00000f8f
 80133fc:	ffffbf8f 	.word	0xffffbf8f
 8013400:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	001a      	movs	r2, r3
 801340a:	204d      	movs	r0, #77	@ 0x4d
 801340c:	183b      	adds	r3, r7, r0
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	18d2      	adds	r2, r2, r3
 8013414:	214a      	movs	r1, #74	@ 0x4a
 8013416:	187b      	adds	r3, r7, r1
 8013418:	8812      	ldrh	r2, [r2, #0]
 801341a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801341c:	187b      	adds	r3, r7, r1
 801341e:	2200      	movs	r2, #0
 8013420:	5e9b      	ldrsh	r3, [r3, r2]
 8013422:	2b00      	cmp	r3, #0
 8013424:	db00      	blt.n	8013428 <PCD_EP_ISR_Handler+0x378>
 8013426:	e0fa      	b.n	801361e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	001a      	movs	r2, r3
 801342e:	183b      	adds	r3, r7, r0
 8013430:	781b      	ldrb	r3, [r3, #0]
 8013432:	009b      	lsls	r3, r3, #2
 8013434:	18d3      	adds	r3, r2, r3
 8013436:	881b      	ldrh	r3, [r3, #0]
 8013438:	b29a      	uxth	r2, r3
 801343a:	2448      	movs	r4, #72	@ 0x48
 801343c:	193b      	adds	r3, r7, r4
 801343e:	49d1      	ldr	r1, [pc, #836]	@ (8013784 <PCD_EP_ISR_Handler+0x6d4>)
 8013440:	400a      	ands	r2, r1
 8013442:	801a      	strh	r2, [r3, #0]
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	001a      	movs	r2, r3
 801344a:	183b      	adds	r3, r7, r0
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	18d3      	adds	r3, r2, r3
 8013452:	193a      	adds	r2, r7, r4
 8013454:	8812      	ldrh	r2, [r2, #0]
 8013456:	2180      	movs	r1, #128	@ 0x80
 8013458:	430a      	orrs	r2, r1
 801345a:	b292      	uxth	r2, r2
 801345c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801345e:	183b      	adds	r3, r7, r0
 8013460:	781a      	ldrb	r2, [r3, #0]
 8013462:	0013      	movs	r3, r2
 8013464:	009b      	lsls	r3, r3, #2
 8013466:	189b      	adds	r3, r3, r2
 8013468:	00db      	lsls	r3, r3, #3
 801346a:	3369      	adds	r3, #105	@ 0x69
 801346c:	33ff      	adds	r3, #255	@ 0xff
 801346e:	687a      	ldr	r2, [r7, #4]
 8013470:	18d3      	adds	r3, r2, r3
 8013472:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013476:	7b1b      	ldrb	r3, [r3, #12]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d125      	bne.n	80134c8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2250      	movs	r2, #80	@ 0x50
 8013482:	5a9b      	ldrh	r3, [r3, r2]
 8013484:	b29b      	uxth	r3, r3
 8013486:	001a      	movs	r2, r3
 8013488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	00db      	lsls	r3, r3, #3
 801348e:	18d2      	adds	r2, r2, r3
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	18d3      	adds	r3, r2, r3
 8013496:	4abc      	ldr	r2, [pc, #752]	@ (8013788 <PCD_EP_ISR_Handler+0x6d8>)
 8013498:	4694      	mov	ip, r2
 801349a:	4463      	add	r3, ip
 801349c:	881a      	ldrh	r2, [r3, #0]
 801349e:	2450      	movs	r4, #80	@ 0x50
 80134a0:	193b      	adds	r3, r7, r4
 80134a2:	0592      	lsls	r2, r2, #22
 80134a4:	0d92      	lsrs	r2, r2, #22
 80134a6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80134a8:	193b      	adds	r3, r7, r4
 80134aa:	881b      	ldrh	r3, [r3, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d100      	bne.n	80134b2 <PCD_EP_ISR_Handler+0x402>
 80134b0:	e08d      	b.n	80135ce <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6818      	ldr	r0, [r3, #0]
 80134b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b8:	6959      	ldr	r1, [r3, #20]
 80134ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134bc:	88da      	ldrh	r2, [r3, #6]
 80134be:	193b      	adds	r3, r7, r4
 80134c0:	881b      	ldrh	r3, [r3, #0]
 80134c2:	f007 f8d6 	bl	801a672 <USB_ReadPMA>
 80134c6:	e082      	b.n	80135ce <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80134c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134ca:	78db      	ldrb	r3, [r3, #3]
 80134cc:	2b02      	cmp	r3, #2
 80134ce:	d10c      	bne.n	80134ea <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80134d0:	2350      	movs	r3, #80	@ 0x50
 80134d2:	18fc      	adds	r4, r7, r3
 80134d4:	234a      	movs	r3, #74	@ 0x4a
 80134d6:	18fb      	adds	r3, r7, r3
 80134d8:	881a      	ldrh	r2, [r3, #0]
 80134da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	0018      	movs	r0, r3
 80134e0:	f000 f9ec 	bl	80138bc <HAL_PCD_EP_DB_Receive>
 80134e4:	0003      	movs	r3, r0
 80134e6:	8023      	strh	r3, [r4, #0]
 80134e8:	e071      	b.n	80135ce <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	001a      	movs	r2, r3
 80134f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	009b      	lsls	r3, r3, #2
 80134f6:	18d3      	adds	r3, r2, r3
 80134f8:	881b      	ldrh	r3, [r3, #0]
 80134fa:	b29a      	uxth	r2, r3
 80134fc:	2052      	movs	r0, #82	@ 0x52
 80134fe:	183b      	adds	r3, r7, r0
 8013500:	49a2      	ldr	r1, [pc, #648]	@ (801378c <PCD_EP_ISR_Handler+0x6dc>)
 8013502:	400a      	ands	r2, r1
 8013504:	801a      	strh	r2, [r3, #0]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	001a      	movs	r2, r3
 801350c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	18d3      	adds	r3, r2, r3
 8013514:	183a      	adds	r2, r7, r0
 8013516:	8812      	ldrh	r2, [r2, #0]
 8013518:	499d      	ldr	r1, [pc, #628]	@ (8013790 <PCD_EP_ISR_Handler+0x6e0>)
 801351a:	430a      	orrs	r2, r1
 801351c:	b292      	uxth	r2, r2
 801351e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	001a      	movs	r2, r3
 8013526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	18d3      	adds	r3, r2, r3
 801352e:	881b      	ldrh	r3, [r3, #0]
 8013530:	b29b      	uxth	r3, r3
 8013532:	001a      	movs	r2, r3
 8013534:	2380      	movs	r3, #128	@ 0x80
 8013536:	01db      	lsls	r3, r3, #7
 8013538:	4013      	ands	r3, r2
 801353a:	d024      	beq.n	8013586 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2250      	movs	r2, #80	@ 0x50
 8013542:	5a9b      	ldrh	r3, [r3, r2]
 8013544:	b29b      	uxth	r3, r3
 8013546:	001a      	movs	r2, r3
 8013548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	00db      	lsls	r3, r3, #3
 801354e:	18d2      	adds	r2, r2, r3
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	18d3      	adds	r3, r2, r3
 8013556:	4a8f      	ldr	r2, [pc, #572]	@ (8013794 <PCD_EP_ISR_Handler+0x6e4>)
 8013558:	4694      	mov	ip, r2
 801355a:	4463      	add	r3, ip
 801355c:	881a      	ldrh	r2, [r3, #0]
 801355e:	2450      	movs	r4, #80	@ 0x50
 8013560:	193b      	adds	r3, r7, r4
 8013562:	0592      	lsls	r2, r2, #22
 8013564:	0d92      	lsrs	r2, r2, #22
 8013566:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013568:	193b      	adds	r3, r7, r4
 801356a:	881b      	ldrh	r3, [r3, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d02e      	beq.n	80135ce <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6818      	ldr	r0, [r3, #0]
 8013574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013576:	6959      	ldr	r1, [r3, #20]
 8013578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801357a:	891a      	ldrh	r2, [r3, #8]
 801357c:	193b      	adds	r3, r7, r4
 801357e:	881b      	ldrh	r3, [r3, #0]
 8013580:	f007 f877 	bl	801a672 <USB_ReadPMA>
 8013584:	e023      	b.n	80135ce <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	2250      	movs	r2, #80	@ 0x50
 801358c:	5a9b      	ldrh	r3, [r3, r2]
 801358e:	b29b      	uxth	r3, r3
 8013590:	001a      	movs	r2, r3
 8013592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	00db      	lsls	r3, r3, #3
 8013598:	18d2      	adds	r2, r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	18d3      	adds	r3, r2, r3
 80135a0:	4a79      	ldr	r2, [pc, #484]	@ (8013788 <PCD_EP_ISR_Handler+0x6d8>)
 80135a2:	4694      	mov	ip, r2
 80135a4:	4463      	add	r3, ip
 80135a6:	881a      	ldrh	r2, [r3, #0]
 80135a8:	2450      	movs	r4, #80	@ 0x50
 80135aa:	193b      	adds	r3, r7, r4
 80135ac:	0592      	lsls	r2, r2, #22
 80135ae:	0d92      	lsrs	r2, r2, #22
 80135b0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80135b2:	193b      	adds	r3, r7, r4
 80135b4:	881b      	ldrh	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d009      	beq.n	80135ce <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6818      	ldr	r0, [r3, #0]
 80135be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135c0:	6959      	ldr	r1, [r3, #20]
 80135c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135c4:	895a      	ldrh	r2, [r3, #10]
 80135c6:	193b      	adds	r3, r7, r4
 80135c8:	881b      	ldrh	r3, [r3, #0]
 80135ca:	f007 f852 	bl	801a672 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80135ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135d0:	69da      	ldr	r2, [r3, #28]
 80135d2:	2150      	movs	r1, #80	@ 0x50
 80135d4:	187b      	adds	r3, r7, r1
 80135d6:	881b      	ldrh	r3, [r3, #0]
 80135d8:	18d2      	adds	r2, r2, r3
 80135da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80135de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135e0:	695a      	ldr	r2, [r3, #20]
 80135e2:	187b      	adds	r3, r7, r1
 80135e4:	881b      	ldrh	r3, [r3, #0]
 80135e6:	18d2      	adds	r2, r2, r3
 80135e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80135ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135ee:	699b      	ldr	r3, [r3, #24]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d005      	beq.n	8013600 <PCD_EP_ISR_Handler+0x550>
 80135f4:	187b      	adds	r3, r7, r1
 80135f6:	881a      	ldrh	r2, [r3, #0]
 80135f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135fa:	691b      	ldr	r3, [r3, #16]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d207      	bcs.n	8013610 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8013600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013602:	781a      	ldrb	r2, [r3, #0]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	0011      	movs	r1, r2
 8013608:	0018      	movs	r0, r3
 801360a:	f009 f84c 	bl	801c6a6 <HAL_PCD_DataOutStageCallback>
 801360e:	e006      	b.n	801361e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013616:	0011      	movs	r1, r2
 8013618:	0018      	movs	r0, r3
 801361a:	f005 fd6f 	bl	80190fc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801361e:	244a      	movs	r4, #74	@ 0x4a
 8013620:	193b      	adds	r3, r7, r4
 8013622:	881b      	ldrh	r3, [r3, #0]
 8013624:	2280      	movs	r2, #128	@ 0x80
 8013626:	4013      	ands	r3, r2
 8013628:	d100      	bne.n	801362c <PCD_EP_ISR_Handler+0x57c>
 801362a:	e133      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801362c:	204d      	movs	r0, #77	@ 0x4d
 801362e:	183b      	adds	r3, r7, r0
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	1c5a      	adds	r2, r3, #1
 8013634:	0013      	movs	r3, r2
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	189b      	adds	r3, r3, r2
 801363a:	00db      	lsls	r3, r3, #3
 801363c:	687a      	ldr	r2, [r7, #4]
 801363e:	18d3      	adds	r3, r2, r3
 8013640:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	001a      	movs	r2, r3
 8013648:	183b      	adds	r3, r7, r0
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	009b      	lsls	r3, r3, #2
 801364e:	18d3      	adds	r3, r2, r3
 8013650:	881b      	ldrh	r3, [r3, #0]
 8013652:	b29a      	uxth	r2, r3
 8013654:	2542      	movs	r5, #66	@ 0x42
 8013656:	197b      	adds	r3, r7, r5
 8013658:	494f      	ldr	r1, [pc, #316]	@ (8013798 <PCD_EP_ISR_Handler+0x6e8>)
 801365a:	400a      	ands	r2, r1
 801365c:	801a      	strh	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	001a      	movs	r2, r3
 8013664:	183b      	adds	r3, r7, r0
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	009b      	lsls	r3, r3, #2
 801366a:	18d3      	adds	r3, r2, r3
 801366c:	197a      	adds	r2, r7, r5
 801366e:	8812      	ldrh	r2, [r2, #0]
 8013670:	494a      	ldr	r1, [pc, #296]	@ (801379c <PCD_EP_ISR_Handler+0x6ec>)
 8013672:	430a      	orrs	r2, r1
 8013674:	b292      	uxth	r2, r2
 8013676:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8013678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801367a:	78db      	ldrb	r3, [r3, #3]
 801367c:	2b01      	cmp	r3, #1
 801367e:	d000      	beq.n	8013682 <PCD_EP_ISR_Handler+0x5d2>
 8013680:	e0af      	b.n	80137e2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8013682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013684:	2200      	movs	r2, #0
 8013686:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8013688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801368a:	7b1b      	ldrb	r3, [r3, #12]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d100      	bne.n	8013692 <PCD_EP_ISR_Handler+0x5e2>
 8013690:	e09f      	b.n	80137d2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013692:	193b      	adds	r3, r7, r4
 8013694:	881b      	ldrh	r3, [r3, #0]
 8013696:	2240      	movs	r2, #64	@ 0x40
 8013698:	4013      	ands	r3, r2
 801369a:	d046      	beq.n	801372a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801369e:	785b      	ldrb	r3, [r3, #1]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d125      	bne.n	80136f0 <PCD_EP_ISR_Handler+0x640>
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2250      	movs	r2, #80	@ 0x50
 80136b0:	5a9b      	ldrh	r3, [r3, r2]
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	001a      	movs	r2, r3
 80136b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136b8:	189b      	adds	r3, r3, r2
 80136ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80136bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	00da      	lsls	r2, r3, #3
 80136c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c4:	18d3      	adds	r3, r2, r3
 80136c6:	4a33      	ldr	r2, [pc, #204]	@ (8013794 <PCD_EP_ISR_Handler+0x6e4>)
 80136c8:	4694      	mov	ip, r2
 80136ca:	4463      	add	r3, ip
 80136cc:	623b      	str	r3, [r7, #32]
 80136ce:	6a3b      	ldr	r3, [r7, #32]
 80136d0:	881b      	ldrh	r3, [r3, #0]
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	059b      	lsls	r3, r3, #22
 80136d6:	0d9b      	lsrs	r3, r3, #22
 80136d8:	b29a      	uxth	r2, r3
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	801a      	strh	r2, [r3, #0]
 80136de:	6a3b      	ldr	r3, [r7, #32]
 80136e0:	881b      	ldrh	r3, [r3, #0]
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	4a2d      	ldr	r2, [pc, #180]	@ (801379c <PCD_EP_ISR_Handler+0x6ec>)
 80136e6:	4313      	orrs	r3, r2
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	6a3b      	ldr	r3, [r7, #32]
 80136ec:	801a      	strh	r2, [r3, #0]
 80136ee:	e070      	b.n	80137d2 <PCD_EP_ISR_Handler+0x722>
 80136f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136f2:	785b      	ldrb	r3, [r3, #1]
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d16c      	bne.n	80137d2 <PCD_EP_ISR_Handler+0x722>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2250      	movs	r2, #80	@ 0x50
 8013704:	5a9b      	ldrh	r3, [r3, r2]
 8013706:	b29b      	uxth	r3, r3
 8013708:	001a      	movs	r2, r3
 801370a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801370c:	189b      	adds	r3, r3, r2
 801370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	00da      	lsls	r2, r3, #3
 8013716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013718:	18d3      	adds	r3, r2, r3
 801371a:	4a1e      	ldr	r2, [pc, #120]	@ (8013794 <PCD_EP_ISR_Handler+0x6e4>)
 801371c:	4694      	mov	ip, r2
 801371e:	4463      	add	r3, ip
 8013720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013724:	2200      	movs	r2, #0
 8013726:	801a      	strh	r2, [r3, #0]
 8013728:	e053      	b.n	80137d2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013732:	785b      	ldrb	r3, [r3, #1]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d133      	bne.n	80137a0 <PCD_EP_ISR_Handler+0x6f0>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	637b      	str	r3, [r7, #52]	@ 0x34
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	2250      	movs	r2, #80	@ 0x50
 8013744:	5a9b      	ldrh	r3, [r3, r2]
 8013746:	b29b      	uxth	r3, r3
 8013748:	001a      	movs	r2, r3
 801374a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801374c:	189b      	adds	r3, r3, r2
 801374e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	00da      	lsls	r2, r3, #3
 8013756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013758:	18d3      	adds	r3, r2, r3
 801375a:	4a0b      	ldr	r2, [pc, #44]	@ (8013788 <PCD_EP_ISR_Handler+0x6d8>)
 801375c:	4694      	mov	ip, r2
 801375e:	4463      	add	r3, ip
 8013760:	633b      	str	r3, [r7, #48]	@ 0x30
 8013762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013764:	881b      	ldrh	r3, [r3, #0]
 8013766:	b29b      	uxth	r3, r3
 8013768:	059b      	lsls	r3, r3, #22
 801376a:	0d9b      	lsrs	r3, r3, #22
 801376c:	b29a      	uxth	r2, r3
 801376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013770:	801a      	strh	r2, [r3, #0]
 8013772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	b29b      	uxth	r3, r3
 8013778:	4a08      	ldr	r2, [pc, #32]	@ (801379c <PCD_EP_ISR_Handler+0x6ec>)
 801377a:	4313      	orrs	r3, r2
 801377c:	b29a      	uxth	r2, r3
 801377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013780:	801a      	strh	r2, [r3, #0]
 8013782:	e026      	b.n	80137d2 <PCD_EP_ISR_Handler+0x722>
 8013784:	00000f8f 	.word	0x00000f8f
 8013788:	00000406 	.word	0x00000406
 801378c:	ffff8f8f 	.word	0xffff8f8f
 8013790:	ffff80c0 	.word	0xffff80c0
 8013794:	00000402 	.word	0x00000402
 8013798:	ffff8f0f 	.word	0xffff8f0f
 801379c:	ffff8000 	.word	0xffff8000
 80137a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137a2:	785b      	ldrb	r3, [r3, #1]
 80137a4:	2b01      	cmp	r3, #1
 80137a6:	d114      	bne.n	80137d2 <PCD_EP_ISR_Handler+0x722>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2250      	movs	r2, #80	@ 0x50
 80137ae:	5a9b      	ldrh	r3, [r3, r2]
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	001a      	movs	r2, r3
 80137b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137b6:	189b      	adds	r3, r3, r2
 80137b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	00da      	lsls	r2, r3, #3
 80137c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137c2:	18d3      	adds	r3, r2, r3
 80137c4:	4a3b      	ldr	r2, [pc, #236]	@ (80138b4 <PCD_EP_ISR_Handler+0x804>)
 80137c6:	4694      	mov	ip, r2
 80137c8:	4463      	add	r3, ip
 80137ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80137cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ce:	2200      	movs	r2, #0
 80137d0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80137d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137d4:	781a      	ldrb	r2, [r3, #0]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	0011      	movs	r1, r2
 80137da:	0018      	movs	r0, r3
 80137dc:	f008 ff84 	bl	801c6e8 <HAL_PCD_DataInStageCallback>
 80137e0:	e058      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80137e2:	234a      	movs	r3, #74	@ 0x4a
 80137e4:	18fb      	adds	r3, r7, r3
 80137e6:	881a      	ldrh	r2, [r3, #0]
 80137e8:	2380      	movs	r3, #128	@ 0x80
 80137ea:	005b      	lsls	r3, r3, #1
 80137ec:	4013      	ands	r3, r2
 80137ee:	d149      	bne.n	8013884 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	2250      	movs	r2, #80	@ 0x50
 80137f6:	5a9b      	ldrh	r3, [r3, r2]
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	001a      	movs	r2, r3
 80137fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	00db      	lsls	r3, r3, #3
 8013802:	18d2      	adds	r2, r2, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	18d3      	adds	r3, r2, r3
 801380a:	4a2b      	ldr	r2, [pc, #172]	@ (80138b8 <PCD_EP_ISR_Handler+0x808>)
 801380c:	4694      	mov	ip, r2
 801380e:	4463      	add	r3, ip
 8013810:	881a      	ldrh	r2, [r3, #0]
 8013812:	2140      	movs	r1, #64	@ 0x40
 8013814:	187b      	adds	r3, r7, r1
 8013816:	0592      	lsls	r2, r2, #22
 8013818:	0d92      	lsrs	r2, r2, #22
 801381a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801381c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801381e:	699a      	ldr	r2, [r3, #24]
 8013820:	187b      	adds	r3, r7, r1
 8013822:	881b      	ldrh	r3, [r3, #0]
 8013824:	429a      	cmp	r2, r3
 8013826:	d907      	bls.n	8013838 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8013828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801382a:	699a      	ldr	r2, [r3, #24]
 801382c:	187b      	adds	r3, r7, r1
 801382e:	881b      	ldrh	r3, [r3, #0]
 8013830:	1ad2      	subs	r2, r2, r3
 8013832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013834:	619a      	str	r2, [r3, #24]
 8013836:	e002      	b.n	801383e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8013838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801383a:	2200      	movs	r2, #0
 801383c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013840:	699b      	ldr	r3, [r3, #24]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d107      	bne.n	8013856 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013848:	781a      	ldrb	r2, [r3, #0]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	0011      	movs	r1, r2
 801384e:	0018      	movs	r0, r3
 8013850:	f008 ff4a 	bl	801c6e8 <HAL_PCD_DataInStageCallback>
 8013854:	e01e      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8013856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013858:	695a      	ldr	r2, [r3, #20]
 801385a:	2140      	movs	r1, #64	@ 0x40
 801385c:	187b      	adds	r3, r7, r1
 801385e:	881b      	ldrh	r3, [r3, #0]
 8013860:	18d2      	adds	r2, r2, r3
 8013862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013864:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8013866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013868:	69da      	ldr	r2, [r3, #28]
 801386a:	187b      	adds	r3, r7, r1
 801386c:	881b      	ldrh	r3, [r3, #0]
 801386e:	18d2      	adds	r2, r2, r3
 8013870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013872:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801387a:	0011      	movs	r1, r2
 801387c:	0018      	movs	r0, r3
 801387e:	f005 fc3d 	bl	80190fc <USB_EPStartXfer>
 8013882:	e007      	b.n	8013894 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8013884:	234a      	movs	r3, #74	@ 0x4a
 8013886:	18fb      	adds	r3, r7, r3
 8013888:	881a      	ldrh	r2, [r3, #0]
 801388a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	0018      	movs	r0, r3
 8013890:	f000 f930 	bl	8013af4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	2244      	movs	r2, #68	@ 0x44
 801389a:	5a9b      	ldrh	r3, [r3, r2]
 801389c:	b29b      	uxth	r3, r3
 801389e:	b21b      	sxth	r3, r3
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	da01      	bge.n	80138a8 <PCD_EP_ISR_Handler+0x7f8>
 80138a4:	f7ff fc0a 	bl	80130bc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80138a8:	2300      	movs	r3, #0
}
 80138aa:	0018      	movs	r0, r3
 80138ac:	46bd      	mov	sp, r7
 80138ae:	b016      	add	sp, #88	@ 0x58
 80138b0:	bdb0      	pop	{r4, r5, r7, pc}
 80138b2:	46c0      	nop			@ (mov r8, r8)
 80138b4:	00000406 	.word	0x00000406
 80138b8:	00000402 	.word	0x00000402

080138bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80138bc:	b590      	push	{r4, r7, lr}
 80138be:	b089      	sub	sp, #36	@ 0x24
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	60f8      	str	r0, [r7, #12]
 80138c4:	60b9      	str	r1, [r7, #8]
 80138c6:	1dbb      	adds	r3, r7, #6
 80138c8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80138ca:	1dbb      	adds	r3, r7, #6
 80138cc:	881a      	ldrh	r2, [r3, #0]
 80138ce:	2380      	movs	r3, #128	@ 0x80
 80138d0:	01db      	lsls	r3, r3, #7
 80138d2:	4013      	ands	r3, r2
 80138d4:	d100      	bne.n	80138d8 <HAL_PCD_EP_DB_Receive+0x1c>
 80138d6:	e07d      	b.n	80139d4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	2250      	movs	r2, #80	@ 0x50
 80138de:	5a9b      	ldrh	r3, [r3, r2]
 80138e0:	b29b      	uxth	r3, r3
 80138e2:	001a      	movs	r2, r3
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	00db      	lsls	r3, r3, #3
 80138ea:	18d2      	adds	r2, r2, r3
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	18d3      	adds	r3, r2, r3
 80138f2:	4a7a      	ldr	r2, [pc, #488]	@ (8013adc <HAL_PCD_EP_DB_Receive+0x220>)
 80138f4:	4694      	mov	ip, r2
 80138f6:	4463      	add	r3, ip
 80138f8:	881a      	ldrh	r2, [r3, #0]
 80138fa:	211a      	movs	r1, #26
 80138fc:	187b      	adds	r3, r7, r1
 80138fe:	0592      	lsls	r2, r2, #22
 8013900:	0d92      	lsrs	r2, r2, #22
 8013902:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	699a      	ldr	r2, [r3, #24]
 8013908:	187b      	adds	r3, r7, r1
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	429a      	cmp	r2, r3
 801390e:	d307      	bcc.n	8013920 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	699a      	ldr	r2, [r3, #24]
 8013914:	187b      	adds	r3, r7, r1
 8013916:	881b      	ldrh	r3, [r3, #0]
 8013918:	1ad2      	subs	r2, r2, r3
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	619a      	str	r2, [r3, #24]
 801391e:	e002      	b.n	8013926 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	2200      	movs	r2, #0
 8013924:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	699b      	ldr	r3, [r3, #24]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d121      	bne.n	8013972 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	001a      	movs	r2, r3
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	009b      	lsls	r3, r3, #2
 801393a:	18d3      	adds	r3, r2, r3
 801393c:	881b      	ldrh	r3, [r3, #0]
 801393e:	b29a      	uxth	r2, r3
 8013940:	2018      	movs	r0, #24
 8013942:	183b      	adds	r3, r7, r0
 8013944:	4966      	ldr	r1, [pc, #408]	@ (8013ae0 <HAL_PCD_EP_DB_Receive+0x224>)
 8013946:	400a      	ands	r2, r1
 8013948:	801a      	strh	r2, [r3, #0]
 801394a:	183b      	adds	r3, r7, r0
 801394c:	183a      	adds	r2, r7, r0
 801394e:	8812      	ldrh	r2, [r2, #0]
 8013950:	2180      	movs	r1, #128	@ 0x80
 8013952:	0189      	lsls	r1, r1, #6
 8013954:	404a      	eors	r2, r1
 8013956:	801a      	strh	r2, [r3, #0]
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	001a      	movs	r2, r3
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	781b      	ldrb	r3, [r3, #0]
 8013962:	009b      	lsls	r3, r3, #2
 8013964:	18d3      	adds	r3, r2, r3
 8013966:	183a      	adds	r2, r7, r0
 8013968:	8812      	ldrh	r2, [r2, #0]
 801396a:	495e      	ldr	r1, [pc, #376]	@ (8013ae4 <HAL_PCD_EP_DB_Receive+0x228>)
 801396c:	430a      	orrs	r2, r1
 801396e:	b292      	uxth	r2, r2
 8013970:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013972:	1dbb      	adds	r3, r7, #6
 8013974:	881b      	ldrh	r3, [r3, #0]
 8013976:	2240      	movs	r2, #64	@ 0x40
 8013978:	4013      	ands	r3, r2
 801397a:	d01a      	beq.n	80139b2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	001a      	movs	r2, r3
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	18d3      	adds	r3, r2, r3
 801398a:	881b      	ldrh	r3, [r3, #0]
 801398c:	b29a      	uxth	r2, r3
 801398e:	2016      	movs	r0, #22
 8013990:	183b      	adds	r3, r7, r0
 8013992:	4955      	ldr	r1, [pc, #340]	@ (8013ae8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013994:	400a      	ands	r2, r1
 8013996:	801a      	strh	r2, [r3, #0]
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	001a      	movs	r2, r3
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	009b      	lsls	r3, r3, #2
 80139a4:	18d3      	adds	r3, r2, r3
 80139a6:	183a      	adds	r2, r7, r0
 80139a8:	8812      	ldrh	r2, [r2, #0]
 80139aa:	4950      	ldr	r1, [pc, #320]	@ (8013aec <HAL_PCD_EP_DB_Receive+0x230>)
 80139ac:	430a      	orrs	r2, r1
 80139ae:	b292      	uxth	r2, r2
 80139b0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80139b2:	241a      	movs	r4, #26
 80139b4:	193b      	adds	r3, r7, r4
 80139b6:	881b      	ldrh	r3, [r3, #0]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d100      	bne.n	80139be <HAL_PCD_EP_DB_Receive+0x102>
 80139bc:	e086      	b.n	8013acc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	6818      	ldr	r0, [r3, #0]
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	6959      	ldr	r1, [r3, #20]
 80139c6:	68bb      	ldr	r3, [r7, #8]
 80139c8:	891a      	ldrh	r2, [r3, #8]
 80139ca:	193b      	adds	r3, r7, r4
 80139cc:	881b      	ldrh	r3, [r3, #0]
 80139ce:	f006 fe50 	bl	801a672 <USB_ReadPMA>
 80139d2:	e07b      	b.n	8013acc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	2250      	movs	r2, #80	@ 0x50
 80139da:	5a9b      	ldrh	r3, [r3, r2]
 80139dc:	b29b      	uxth	r3, r3
 80139de:	001a      	movs	r2, r3
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	00db      	lsls	r3, r3, #3
 80139e6:	18d2      	adds	r2, r2, r3
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	18d3      	adds	r3, r2, r3
 80139ee:	4a40      	ldr	r2, [pc, #256]	@ (8013af0 <HAL_PCD_EP_DB_Receive+0x234>)
 80139f0:	4694      	mov	ip, r2
 80139f2:	4463      	add	r3, ip
 80139f4:	881a      	ldrh	r2, [r3, #0]
 80139f6:	211a      	movs	r1, #26
 80139f8:	187b      	adds	r3, r7, r1
 80139fa:	0592      	lsls	r2, r2, #22
 80139fc:	0d92      	lsrs	r2, r2, #22
 80139fe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	699a      	ldr	r2, [r3, #24]
 8013a04:	187b      	adds	r3, r7, r1
 8013a06:	881b      	ldrh	r3, [r3, #0]
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d307      	bcc.n	8013a1c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	699a      	ldr	r2, [r3, #24]
 8013a10:	187b      	adds	r3, r7, r1
 8013a12:	881b      	ldrh	r3, [r3, #0]
 8013a14:	1ad2      	subs	r2, r2, r3
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	619a      	str	r2, [r3, #24]
 8013a1a:	e002      	b.n	8013a22 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	699b      	ldr	r3, [r3, #24]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d121      	bne.n	8013a6e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	001a      	movs	r2, r3
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	18d3      	adds	r3, r2, r3
 8013a38:	881b      	ldrh	r3, [r3, #0]
 8013a3a:	b29a      	uxth	r2, r3
 8013a3c:	201e      	movs	r0, #30
 8013a3e:	183b      	adds	r3, r7, r0
 8013a40:	4927      	ldr	r1, [pc, #156]	@ (8013ae0 <HAL_PCD_EP_DB_Receive+0x224>)
 8013a42:	400a      	ands	r2, r1
 8013a44:	801a      	strh	r2, [r3, #0]
 8013a46:	183b      	adds	r3, r7, r0
 8013a48:	183a      	adds	r2, r7, r0
 8013a4a:	8812      	ldrh	r2, [r2, #0]
 8013a4c:	2180      	movs	r1, #128	@ 0x80
 8013a4e:	0189      	lsls	r1, r1, #6
 8013a50:	404a      	eors	r2, r1
 8013a52:	801a      	strh	r2, [r3, #0]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	001a      	movs	r2, r3
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	18d3      	adds	r3, r2, r3
 8013a62:	183a      	adds	r2, r7, r0
 8013a64:	8812      	ldrh	r2, [r2, #0]
 8013a66:	491f      	ldr	r1, [pc, #124]	@ (8013ae4 <HAL_PCD_EP_DB_Receive+0x228>)
 8013a68:	430a      	orrs	r2, r1
 8013a6a:	b292      	uxth	r2, r2
 8013a6c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8013a6e:	1dbb      	adds	r3, r7, #6
 8013a70:	881b      	ldrh	r3, [r3, #0]
 8013a72:	2240      	movs	r2, #64	@ 0x40
 8013a74:	4013      	ands	r3, r2
 8013a76:	d11a      	bne.n	8013aae <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	001a      	movs	r2, r3
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	781b      	ldrb	r3, [r3, #0]
 8013a82:	009b      	lsls	r3, r3, #2
 8013a84:	18d3      	adds	r3, r2, r3
 8013a86:	881b      	ldrh	r3, [r3, #0]
 8013a88:	b29a      	uxth	r2, r3
 8013a8a:	201c      	movs	r0, #28
 8013a8c:	183b      	adds	r3, r7, r0
 8013a8e:	4916      	ldr	r1, [pc, #88]	@ (8013ae8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013a90:	400a      	ands	r2, r1
 8013a92:	801a      	strh	r2, [r3, #0]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	001a      	movs	r2, r3
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	18d3      	adds	r3, r2, r3
 8013aa2:	183a      	adds	r2, r7, r0
 8013aa4:	8812      	ldrh	r2, [r2, #0]
 8013aa6:	4911      	ldr	r1, [pc, #68]	@ (8013aec <HAL_PCD_EP_DB_Receive+0x230>)
 8013aa8:	430a      	orrs	r2, r1
 8013aaa:	b292      	uxth	r2, r2
 8013aac:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013aae:	241a      	movs	r4, #26
 8013ab0:	193b      	adds	r3, r7, r4
 8013ab2:	881b      	ldrh	r3, [r3, #0]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d009      	beq.n	8013acc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	6818      	ldr	r0, [r3, #0]
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	6959      	ldr	r1, [r3, #20]
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	895a      	ldrh	r2, [r3, #10]
 8013ac4:	193b      	adds	r3, r7, r4
 8013ac6:	881b      	ldrh	r3, [r3, #0]
 8013ac8:	f006 fdd3 	bl	801a672 <USB_ReadPMA>
    }
  }

  return count;
 8013acc:	231a      	movs	r3, #26
 8013ace:	18fb      	adds	r3, r7, r3
 8013ad0:	881b      	ldrh	r3, [r3, #0]
}
 8013ad2:	0018      	movs	r0, r3
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	b009      	add	sp, #36	@ 0x24
 8013ad8:	bd90      	pop	{r4, r7, pc}
 8013ada:	46c0      	nop			@ (mov r8, r8)
 8013adc:	00000402 	.word	0x00000402
 8013ae0:	ffffbf8f 	.word	0xffffbf8f
 8013ae4:	ffff8080 	.word	0xffff8080
 8013ae8:	ffff8f8f 	.word	0xffff8f8f
 8013aec:	ffff80c0 	.word	0xffff80c0
 8013af0:	00000406 	.word	0x00000406

08013af4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b0a4      	sub	sp, #144	@ 0x90
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	1dbb      	adds	r3, r7, #6
 8013b00:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013b02:	1dbb      	adds	r3, r7, #6
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	2240      	movs	r2, #64	@ 0x40
 8013b08:	4013      	ands	r3, r2
 8013b0a:	d100      	bne.n	8013b0e <HAL_PCD_EP_DB_Transmit+0x1a>
 8013b0c:	e1e4      	b.n	8013ed8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	2250      	movs	r2, #80	@ 0x50
 8013b14:	5a9b      	ldrh	r3, [r3, r2]
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	001a      	movs	r2, r3
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	00db      	lsls	r3, r3, #3
 8013b20:	18d2      	adds	r2, r2, r3
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	18d3      	adds	r3, r2, r3
 8013b28:	4ad0      	ldr	r2, [pc, #832]	@ (8013e6c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013b2a:	4694      	mov	ip, r2
 8013b2c:	4463      	add	r3, ip
 8013b2e:	881a      	ldrh	r2, [r3, #0]
 8013b30:	2186      	movs	r1, #134	@ 0x86
 8013b32:	187b      	adds	r3, r7, r1
 8013b34:	0592      	lsls	r2, r2, #22
 8013b36:	0d92      	lsrs	r2, r2, #22
 8013b38:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	699a      	ldr	r2, [r3, #24]
 8013b3e:	187b      	adds	r3, r7, r1
 8013b40:	881b      	ldrh	r3, [r3, #0]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d907      	bls.n	8013b56 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	699a      	ldr	r2, [r3, #24]
 8013b4a:	187b      	adds	r3, r7, r1
 8013b4c:	881b      	ldrh	r3, [r3, #0]
 8013b4e:	1ad2      	subs	r2, r2, r3
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	619a      	str	r2, [r3, #24]
 8013b54:	e002      	b.n	8013b5c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	699b      	ldr	r3, [r3, #24]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d000      	beq.n	8013b66 <HAL_PCD_EP_DB_Transmit+0x72>
 8013b64:	e0b5      	b.n	8013cd2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	785b      	ldrb	r3, [r3, #1]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d125      	bne.n	8013bba <HAL_PCD_EP_DB_Transmit+0xc6>
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	2250      	movs	r2, #80	@ 0x50
 8013b7a:	5a9b      	ldrh	r3, [r3, r2]
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	001a      	movs	r2, r3
 8013b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b82:	189b      	adds	r3, r3, r2
 8013b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	00da      	lsls	r2, r3, #3
 8013b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b8e:	18d3      	adds	r3, r2, r3
 8013b90:	4ab6      	ldr	r2, [pc, #728]	@ (8013e6c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013b92:	4694      	mov	ip, r2
 8013b94:	4463      	add	r3, ip
 8013b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b9a:	881b      	ldrh	r3, [r3, #0]
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	059b      	lsls	r3, r3, #22
 8013ba0:	0d9b      	lsrs	r3, r3, #22
 8013ba2:	b29a      	uxth	r2, r3
 8013ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ba6:	801a      	strh	r2, [r3, #0]
 8013ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013baa:	881b      	ldrh	r3, [r3, #0]
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	4ab0      	ldr	r2, [pc, #704]	@ (8013e70 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013bb0:	4313      	orrs	r3, r2
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb6:	801a      	strh	r2, [r3, #0]
 8013bb8:	e01b      	b.n	8013bf2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	785b      	ldrb	r3, [r3, #1]
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d117      	bne.n	8013bf2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	2250      	movs	r2, #80	@ 0x50
 8013bce:	5a9b      	ldrh	r3, [r3, r2]
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	001a      	movs	r2, r3
 8013bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bd6:	189b      	adds	r3, r3, r2
 8013bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	00da      	lsls	r2, r3, #3
 8013be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013be2:	18d3      	adds	r3, r2, r3
 8013be4:	4aa1      	ldr	r2, [pc, #644]	@ (8013e6c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013be6:	4694      	mov	ip, r2
 8013be8:	4463      	add	r3, ip
 8013bea:	633b      	str	r3, [r7, #48]	@ 0x30
 8013bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bee:	2200      	movs	r2, #0
 8013bf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	785b      	ldrb	r3, [r3, #1]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d125      	bne.n	8013c4c <HAL_PCD_EP_DB_Transmit+0x158>
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	61fb      	str	r3, [r7, #28]
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	2250      	movs	r2, #80	@ 0x50
 8013c0c:	5a9b      	ldrh	r3, [r3, r2]
 8013c0e:	b29b      	uxth	r3, r3
 8013c10:	001a      	movs	r2, r3
 8013c12:	69fb      	ldr	r3, [r7, #28]
 8013c14:	189b      	adds	r3, r3, r2
 8013c16:	61fb      	str	r3, [r7, #28]
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	00da      	lsls	r2, r3, #3
 8013c1e:	69fb      	ldr	r3, [r7, #28]
 8013c20:	18d3      	adds	r3, r2, r3
 8013c22:	4a94      	ldr	r2, [pc, #592]	@ (8013e74 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013c24:	4694      	mov	ip, r2
 8013c26:	4463      	add	r3, ip
 8013c28:	61bb      	str	r3, [r7, #24]
 8013c2a:	69bb      	ldr	r3, [r7, #24]
 8013c2c:	881b      	ldrh	r3, [r3, #0]
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	059b      	lsls	r3, r3, #22
 8013c32:	0d9b      	lsrs	r3, r3, #22
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	69bb      	ldr	r3, [r7, #24]
 8013c38:	801a      	strh	r2, [r3, #0]
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	881b      	ldrh	r3, [r3, #0]
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	4a8b      	ldr	r2, [pc, #556]	@ (8013e70 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013c42:	4313      	orrs	r3, r2
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	69bb      	ldr	r3, [r7, #24]
 8013c48:	801a      	strh	r2, [r3, #0]
 8013c4a:	e018      	b.n	8013c7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	785b      	ldrb	r3, [r3, #1]
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d114      	bne.n	8013c7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2250      	movs	r2, #80	@ 0x50
 8013c5a:	5a9b      	ldrh	r3, [r3, r2]
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	001a      	movs	r2, r3
 8013c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c62:	189b      	adds	r3, r3, r2
 8013c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	00da      	lsls	r2, r3, #3
 8013c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c6e:	18d3      	adds	r3, r2, r3
 8013c70:	4a80      	ldr	r2, [pc, #512]	@ (8013e74 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013c72:	4694      	mov	ip, r2
 8013c74:	4463      	add	r3, ip
 8013c76:	623b      	str	r3, [r7, #32]
 8013c78:	6a3b      	ldr	r3, [r7, #32]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	781a      	ldrb	r2, [r3, #0]
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	0011      	movs	r1, r2
 8013c86:	0018      	movs	r0, r3
 8013c88:	f008 fd2e 	bl	801c6e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013c8c:	1dbb      	adds	r3, r7, #6
 8013c8e:	881a      	ldrh	r2, [r3, #0]
 8013c90:	2380      	movs	r3, #128	@ 0x80
 8013c92:	01db      	lsls	r3, r3, #7
 8013c94:	4013      	ands	r3, r2
 8013c96:	d100      	bne.n	8013c9a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8013c98:	e309      	b.n	80142ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	001a      	movs	r2, r3
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	18d3      	adds	r3, r2, r3
 8013ca8:	881b      	ldrh	r3, [r3, #0]
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	2016      	movs	r0, #22
 8013cae:	183b      	adds	r3, r7, r0
 8013cb0:	4971      	ldr	r1, [pc, #452]	@ (8013e78 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013cb2:	400a      	ands	r2, r1
 8013cb4:	801a      	strh	r2, [r3, #0]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	001a      	movs	r2, r3
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	18d3      	adds	r3, r2, r3
 8013cc4:	183a      	adds	r2, r7, r0
 8013cc6:	8812      	ldrh	r2, [r2, #0]
 8013cc8:	496c      	ldr	r1, [pc, #432]	@ (8013e7c <HAL_PCD_EP_DB_Transmit+0x388>)
 8013cca:	430a      	orrs	r2, r1
 8013ccc:	b292      	uxth	r2, r2
 8013cce:	801a      	strh	r2, [r3, #0]
 8013cd0:	e2ed      	b.n	80142ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013cd2:	1dbb      	adds	r3, r7, #6
 8013cd4:	881a      	ldrh	r2, [r3, #0]
 8013cd6:	2380      	movs	r3, #128	@ 0x80
 8013cd8:	01db      	lsls	r3, r3, #7
 8013cda:	4013      	ands	r3, r2
 8013cdc:	d01a      	beq.n	8013d14 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	001a      	movs	r2, r3
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	18d3      	adds	r3, r2, r3
 8013cec:	881b      	ldrh	r3, [r3, #0]
 8013cee:	b29a      	uxth	r2, r3
 8013cf0:	208a      	movs	r0, #138	@ 0x8a
 8013cf2:	183b      	adds	r3, r7, r0
 8013cf4:	4960      	ldr	r1, [pc, #384]	@ (8013e78 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013cf6:	400a      	ands	r2, r1
 8013cf8:	801a      	strh	r2, [r3, #0]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	001a      	movs	r2, r3
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	781b      	ldrb	r3, [r3, #0]
 8013d04:	009b      	lsls	r3, r3, #2
 8013d06:	18d3      	adds	r3, r2, r3
 8013d08:	183a      	adds	r2, r7, r0
 8013d0a:	8812      	ldrh	r2, [r2, #0]
 8013d0c:	495b      	ldr	r1, [pc, #364]	@ (8013e7c <HAL_PCD_EP_DB_Transmit+0x388>)
 8013d0e:	430a      	orrs	r2, r1
 8013d10:	b292      	uxth	r2, r2
 8013d12:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	2224      	movs	r2, #36	@ 0x24
 8013d18:	5c9b      	ldrb	r3, [r3, r2]
 8013d1a:	2b01      	cmp	r3, #1
 8013d1c:	d000      	beq.n	8013d20 <HAL_PCD_EP_DB_Transmit+0x22c>
 8013d1e:	e2c6      	b.n	80142ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	695a      	ldr	r2, [r3, #20]
 8013d24:	2186      	movs	r1, #134	@ 0x86
 8013d26:	187b      	adds	r3, r7, r1
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	18d2      	adds	r2, r2, r3
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	69da      	ldr	r2, [r3, #28]
 8013d34:	187b      	adds	r3, r7, r1
 8013d36:	881b      	ldrh	r3, [r3, #0]
 8013d38:	18d2      	adds	r2, r2, r3
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	6a1a      	ldr	r2, [r3, #32]
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	691b      	ldr	r3, [r3, #16]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d30c      	bcc.n	8013d64 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	691b      	ldr	r3, [r3, #16]
 8013d4e:	218c      	movs	r1, #140	@ 0x8c
 8013d50:	187a      	adds	r2, r7, r1
 8013d52:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	6a1a      	ldr	r2, [r3, #32]
 8013d58:	187b      	adds	r3, r7, r1
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	1ad2      	subs	r2, r2, r3
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	621a      	str	r2, [r3, #32]
 8013d62:	e01a      	b.n	8013d9a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	6a1b      	ldr	r3, [r3, #32]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10a      	bne.n	8013d82 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8013d6c:	2386      	movs	r3, #134	@ 0x86
 8013d6e:	18fb      	adds	r3, r7, r3
 8013d70:	881b      	ldrh	r3, [r3, #0]
 8013d72:	228c      	movs	r2, #140	@ 0x8c
 8013d74:	18ba      	adds	r2, r7, r2
 8013d76:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	2224      	movs	r2, #36	@ 0x24
 8013d7c:	2100      	movs	r1, #0
 8013d7e:	5499      	strb	r1, [r3, r2]
 8013d80:	e00b      	b.n	8013d9a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	2224      	movs	r2, #36	@ 0x24
 8013d86:	2100      	movs	r1, #0
 8013d88:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	6a1b      	ldr	r3, [r3, #32]
 8013d8e:	228c      	movs	r2, #140	@ 0x8c
 8013d90:	18ba      	adds	r2, r7, r2
 8013d92:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	2200      	movs	r2, #0
 8013d98:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	785b      	ldrb	r3, [r3, #1]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d000      	beq.n	8013da4 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8013da2:	e06d      	b.n	8013e80 <HAL_PCD_EP_DB_Transmit+0x38c>
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	2250      	movs	r2, #80	@ 0x50
 8013db0:	5a9b      	ldrh	r3, [r3, r2]
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	001a      	movs	r2, r3
 8013db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013db8:	189b      	adds	r3, r3, r2
 8013dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	00da      	lsls	r2, r3, #3
 8013dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dc4:	18d3      	adds	r3, r2, r3
 8013dc6:	4a29      	ldr	r2, [pc, #164]	@ (8013e6c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013dc8:	4694      	mov	ip, r2
 8013dca:	4463      	add	r3, ip
 8013dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd0:	881b      	ldrh	r3, [r3, #0]
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	059b      	lsls	r3, r3, #22
 8013dd6:	0d9b      	lsrs	r3, r3, #22
 8013dd8:	b29a      	uxth	r2, r3
 8013dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ddc:	801a      	strh	r2, [r3, #0]
 8013dde:	228c      	movs	r2, #140	@ 0x8c
 8013de0:	18bb      	adds	r3, r7, r2
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2b3e      	cmp	r3, #62	@ 0x3e
 8013de6:	d91a      	bls.n	8013e1e <HAL_PCD_EP_DB_Transmit+0x32a>
 8013de8:	18bb      	adds	r3, r7, r2
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	095b      	lsrs	r3, r3, #5
 8013dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013df0:	18bb      	adds	r3, r7, r2
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	221f      	movs	r2, #31
 8013df6:	4013      	ands	r3, r2
 8013df8:	d102      	bne.n	8013e00 <HAL_PCD_EP_DB_Transmit+0x30c>
 8013dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dfc:	3b01      	subs	r3, #1
 8013dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e02:	881b      	ldrh	r3, [r3, #0]
 8013e04:	b29a      	uxth	r2, r3
 8013e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	029b      	lsls	r3, r3, #10
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	4a17      	ldr	r2, [pc, #92]	@ (8013e70 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013e14:	4313      	orrs	r3, r2
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e1a:	801a      	strh	r2, [r3, #0]
 8013e1c:	e04f      	b.n	8013ebe <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013e1e:	238c      	movs	r3, #140	@ 0x8c
 8013e20:	18fb      	adds	r3, r7, r3
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d108      	bne.n	8013e3a <HAL_PCD_EP_DB_Transmit+0x346>
 8013e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	b29b      	uxth	r3, r3
 8013e2e:	4a10      	ldr	r2, [pc, #64]	@ (8013e70 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013e30:	4313      	orrs	r3, r2
 8013e32:	b29a      	uxth	r2, r3
 8013e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e36:	801a      	strh	r2, [r3, #0]
 8013e38:	e041      	b.n	8013ebe <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013e3a:	228c      	movs	r2, #140	@ 0x8c
 8013e3c:	18bb      	adds	r3, r7, r2
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	085b      	lsrs	r3, r3, #1
 8013e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e44:	18bb      	adds	r3, r7, r2
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2201      	movs	r2, #1
 8013e4a:	4013      	ands	r3, r2
 8013e4c:	d002      	beq.n	8013e54 <HAL_PCD_EP_DB_Transmit+0x360>
 8013e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e50:	3301      	adds	r3, #1
 8013e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e56:	881b      	ldrh	r3, [r3, #0]
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e5c:	b29b      	uxth	r3, r3
 8013e5e:	029b      	lsls	r3, r3, #10
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	4313      	orrs	r3, r2
 8013e64:	b29a      	uxth	r2, r3
 8013e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e68:	801a      	strh	r2, [r3, #0]
 8013e6a:	e028      	b.n	8013ebe <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013e6c:	00000402 	.word	0x00000402
 8013e70:	ffff8000 	.word	0xffff8000
 8013e74:	00000406 	.word	0x00000406
 8013e78:	ffff8f8f 	.word	0xffff8f8f
 8013e7c:	ffffc080 	.word	0xffffc080
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	785b      	ldrb	r3, [r3, #1]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d11a      	bne.n	8013ebe <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2250      	movs	r2, #80	@ 0x50
 8013e94:	5a9b      	ldrh	r3, [r3, r2]
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	001a      	movs	r2, r3
 8013e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e9c:	189b      	adds	r3, r3, r2
 8013e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	00da      	lsls	r2, r3, #3
 8013ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ea8:	18d3      	adds	r3, r2, r3
 8013eaa:	4adb      	ldr	r2, [pc, #876]	@ (8014218 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013eac:	4694      	mov	ip, r2
 8013eae:	4463      	add	r3, ip
 8013eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8013eb2:	238c      	movs	r3, #140	@ 0x8c
 8013eb4:	18fb      	adds	r3, r7, r3
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	b29a      	uxth	r2, r3
 8013eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ebc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	6818      	ldr	r0, [r3, #0]
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	6959      	ldr	r1, [r3, #20]
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	891a      	ldrh	r2, [r3, #8]
 8013eca:	238c      	movs	r3, #140	@ 0x8c
 8013ecc:	18fb      	adds	r3, r7, r3
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	f006 fb85 	bl	801a5e0 <USB_WritePMA>
 8013ed6:	e1ea      	b.n	80142ae <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2250      	movs	r2, #80	@ 0x50
 8013ede:	5a9b      	ldrh	r3, [r3, r2]
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	001a      	movs	r2, r3
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	781b      	ldrb	r3, [r3, #0]
 8013ee8:	00db      	lsls	r3, r3, #3
 8013eea:	18d2      	adds	r2, r2, r3
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	18d3      	adds	r3, r2, r3
 8013ef2:	4aca      	ldr	r2, [pc, #808]	@ (801421c <HAL_PCD_EP_DB_Transmit+0x728>)
 8013ef4:	4694      	mov	ip, r2
 8013ef6:	4463      	add	r3, ip
 8013ef8:	881a      	ldrh	r2, [r3, #0]
 8013efa:	2186      	movs	r1, #134	@ 0x86
 8013efc:	187b      	adds	r3, r7, r1
 8013efe:	0592      	lsls	r2, r2, #22
 8013f00:	0d92      	lsrs	r2, r2, #22
 8013f02:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	699a      	ldr	r2, [r3, #24]
 8013f08:	187b      	adds	r3, r7, r1
 8013f0a:	881b      	ldrh	r3, [r3, #0]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d307      	bcc.n	8013f20 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	699a      	ldr	r2, [r3, #24]
 8013f14:	187b      	adds	r3, r7, r1
 8013f16:	881b      	ldrh	r3, [r3, #0]
 8013f18:	1ad2      	subs	r2, r2, r3
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	619a      	str	r2, [r3, #24]
 8013f1e:	e002      	b.n	8013f26 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2200      	movs	r2, #0
 8013f24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	699b      	ldr	r3, [r3, #24]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d000      	beq.n	8013f30 <HAL_PCD_EP_DB_Transmit+0x43c>
 8013f2e:	e0bb      	b.n	80140a8 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	785b      	ldrb	r3, [r3, #1]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d125      	bne.n	8013f84 <HAL_PCD_EP_DB_Transmit+0x490>
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	2250      	movs	r2, #80	@ 0x50
 8013f44:	5a9b      	ldrh	r3, [r3, r2]
 8013f46:	b29b      	uxth	r3, r3
 8013f48:	001a      	movs	r2, r3
 8013f4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f4c:	189b      	adds	r3, r3, r2
 8013f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	781b      	ldrb	r3, [r3, #0]
 8013f54:	00da      	lsls	r2, r3, #3
 8013f56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f58:	18d3      	adds	r3, r2, r3
 8013f5a:	4aaf      	ldr	r2, [pc, #700]	@ (8014218 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013f5c:	4694      	mov	ip, r2
 8013f5e:	4463      	add	r3, ip
 8013f60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f64:	881b      	ldrh	r3, [r3, #0]
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	059b      	lsls	r3, r3, #22
 8013f6a:	0d9b      	lsrs	r3, r3, #22
 8013f6c:	b29a      	uxth	r2, r3
 8013f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f70:	801a      	strh	r2, [r3, #0]
 8013f72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f74:	881b      	ldrh	r3, [r3, #0]
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	4aa9      	ldr	r2, [pc, #676]	@ (8014220 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013f7a:	4313      	orrs	r3, r2
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f80:	801a      	strh	r2, [r3, #0]
 8013f82:	e01b      	b.n	8013fbc <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	785b      	ldrb	r3, [r3, #1]
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d117      	bne.n	8013fbc <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	667b      	str	r3, [r7, #100]	@ 0x64
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	2250      	movs	r2, #80	@ 0x50
 8013f98:	5a9b      	ldrh	r3, [r3, r2]
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	001a      	movs	r2, r3
 8013f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013fa0:	189b      	adds	r3, r3, r2
 8013fa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	00da      	lsls	r2, r3, #3
 8013faa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013fac:	18d3      	adds	r3, r2, r3
 8013fae:	4a9a      	ldr	r2, [pc, #616]	@ (8014218 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013fb0:	4694      	mov	ip, r2
 8013fb2:	4463      	add	r3, ip
 8013fb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8013fb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013fb8:	2200      	movs	r2, #0
 8013fba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	677b      	str	r3, [r7, #116]	@ 0x74
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	785b      	ldrb	r3, [r3, #1]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d12b      	bne.n	8014022 <HAL_PCD_EP_DB_Transmit+0x52e>
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2250      	movs	r2, #80	@ 0x50
 8013fd6:	5a9b      	ldrh	r3, [r3, r2]
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	001a      	movs	r2, r3
 8013fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013fde:	189b      	adds	r3, r3, r2
 8013fe0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	00da      	lsls	r2, r3, #3
 8013fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013fea:	18d3      	adds	r3, r2, r3
 8013fec:	4a8b      	ldr	r2, [pc, #556]	@ (801421c <HAL_PCD_EP_DB_Transmit+0x728>)
 8013fee:	4694      	mov	ip, r2
 8013ff0:	4463      	add	r3, ip
 8013ff2:	2180      	movs	r1, #128	@ 0x80
 8013ff4:	187a      	adds	r2, r7, r1
 8013ff6:	6013      	str	r3, [r2, #0]
 8013ff8:	187b      	adds	r3, r7, r1
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	881b      	ldrh	r3, [r3, #0]
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	059b      	lsls	r3, r3, #22
 8014002:	0d9b      	lsrs	r3, r3, #22
 8014004:	b29a      	uxth	r2, r3
 8014006:	187b      	adds	r3, r7, r1
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	801a      	strh	r2, [r3, #0]
 801400c:	187b      	adds	r3, r7, r1
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	881b      	ldrh	r3, [r3, #0]
 8014012:	b29b      	uxth	r3, r3
 8014014:	4a82      	ldr	r2, [pc, #520]	@ (8014220 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014016:	4313      	orrs	r3, r2
 8014018:	b29a      	uxth	r2, r3
 801401a:	187b      	adds	r3, r7, r1
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	801a      	strh	r2, [r3, #0]
 8014020:	e018      	b.n	8014054 <HAL_PCD_EP_DB_Transmit+0x560>
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	785b      	ldrb	r3, [r3, #1]
 8014026:	2b01      	cmp	r3, #1
 8014028:	d114      	bne.n	8014054 <HAL_PCD_EP_DB_Transmit+0x560>
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	2250      	movs	r2, #80	@ 0x50
 8014030:	5a9b      	ldrh	r3, [r3, r2]
 8014032:	b29b      	uxth	r3, r3
 8014034:	001a      	movs	r2, r3
 8014036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014038:	189b      	adds	r3, r3, r2
 801403a:	677b      	str	r3, [r7, #116]	@ 0x74
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	00da      	lsls	r2, r3, #3
 8014042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014044:	18d3      	adds	r3, r2, r3
 8014046:	4a75      	ldr	r2, [pc, #468]	@ (801421c <HAL_PCD_EP_DB_Transmit+0x728>)
 8014048:	4694      	mov	ip, r2
 801404a:	4463      	add	r3, ip
 801404c:	673b      	str	r3, [r7, #112]	@ 0x70
 801404e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014050:	2200      	movs	r2, #0
 8014052:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	781a      	ldrb	r2, [r3, #0]
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	0011      	movs	r1, r2
 801405c:	0018      	movs	r0, r3
 801405e:	f008 fb43 	bl	801c6e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014062:	1dbb      	adds	r3, r7, #6
 8014064:	881a      	ldrh	r2, [r3, #0]
 8014066:	2380      	movs	r3, #128	@ 0x80
 8014068:	01db      	lsls	r3, r3, #7
 801406a:	4013      	ands	r3, r2
 801406c:	d000      	beq.n	8014070 <HAL_PCD_EP_DB_Transmit+0x57c>
 801406e:	e11e      	b.n	80142ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	001a      	movs	r2, r3
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	009b      	lsls	r3, r3, #2
 801407c:	18d3      	adds	r3, r2, r3
 801407e:	881b      	ldrh	r3, [r3, #0]
 8014080:	b29a      	uxth	r2, r3
 8014082:	2088      	movs	r0, #136	@ 0x88
 8014084:	183b      	adds	r3, r7, r0
 8014086:	4967      	ldr	r1, [pc, #412]	@ (8014224 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014088:	400a      	ands	r2, r1
 801408a:	801a      	strh	r2, [r3, #0]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	001a      	movs	r2, r3
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	009b      	lsls	r3, r3, #2
 8014098:	18d3      	adds	r3, r2, r3
 801409a:	183a      	adds	r2, r7, r0
 801409c:	8812      	ldrh	r2, [r2, #0]
 801409e:	4962      	ldr	r1, [pc, #392]	@ (8014228 <HAL_PCD_EP_DB_Transmit+0x734>)
 80140a0:	430a      	orrs	r2, r1
 80140a2:	b292      	uxth	r2, r2
 80140a4:	801a      	strh	r2, [r3, #0]
 80140a6:	e102      	b.n	80142ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80140a8:	1dbb      	adds	r3, r7, #6
 80140aa:	881a      	ldrh	r2, [r3, #0]
 80140ac:	2380      	movs	r3, #128	@ 0x80
 80140ae:	01db      	lsls	r3, r3, #7
 80140b0:	4013      	ands	r3, r2
 80140b2:	d11a      	bne.n	80140ea <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	001a      	movs	r2, r3
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	009b      	lsls	r3, r3, #2
 80140c0:	18d3      	adds	r3, r2, r3
 80140c2:	881b      	ldrh	r3, [r3, #0]
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	204e      	movs	r0, #78	@ 0x4e
 80140c8:	183b      	adds	r3, r7, r0
 80140ca:	4956      	ldr	r1, [pc, #344]	@ (8014224 <HAL_PCD_EP_DB_Transmit+0x730>)
 80140cc:	400a      	ands	r2, r1
 80140ce:	801a      	strh	r2, [r3, #0]
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	001a      	movs	r2, r3
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	18d3      	adds	r3, r2, r3
 80140de:	183a      	adds	r2, r7, r0
 80140e0:	8812      	ldrh	r2, [r2, #0]
 80140e2:	4951      	ldr	r1, [pc, #324]	@ (8014228 <HAL_PCD_EP_DB_Transmit+0x734>)
 80140e4:	430a      	orrs	r2, r1
 80140e6:	b292      	uxth	r2, r2
 80140e8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	2224      	movs	r2, #36	@ 0x24
 80140ee:	5c9b      	ldrb	r3, [r3, r2]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d000      	beq.n	80140f6 <HAL_PCD_EP_DB_Transmit+0x602>
 80140f4:	e0db      	b.n	80142ae <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	695a      	ldr	r2, [r3, #20]
 80140fa:	2186      	movs	r1, #134	@ 0x86
 80140fc:	187b      	adds	r3, r7, r1
 80140fe:	881b      	ldrh	r3, [r3, #0]
 8014100:	18d2      	adds	r2, r2, r3
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	69da      	ldr	r2, [r3, #28]
 801410a:	187b      	adds	r3, r7, r1
 801410c:	881b      	ldrh	r3, [r3, #0]
 801410e:	18d2      	adds	r2, r2, r3
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	6a1a      	ldr	r2, [r3, #32]
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	691b      	ldr	r3, [r3, #16]
 801411c:	429a      	cmp	r2, r3
 801411e:	d30c      	bcc.n	801413a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	691b      	ldr	r3, [r3, #16]
 8014124:	218c      	movs	r1, #140	@ 0x8c
 8014126:	187a      	adds	r2, r7, r1
 8014128:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	6a1a      	ldr	r2, [r3, #32]
 801412e:	187b      	adds	r3, r7, r1
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	1ad2      	subs	r2, r2, r3
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	621a      	str	r2, [r3, #32]
 8014138:	e01a      	b.n	8014170 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	6a1b      	ldr	r3, [r3, #32]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d10a      	bne.n	8014158 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014142:	2386      	movs	r3, #134	@ 0x86
 8014144:	18fb      	adds	r3, r7, r3
 8014146:	881b      	ldrh	r3, [r3, #0]
 8014148:	228c      	movs	r2, #140	@ 0x8c
 801414a:	18ba      	adds	r2, r7, r2
 801414c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	2224      	movs	r2, #36	@ 0x24
 8014152:	2100      	movs	r1, #0
 8014154:	5499      	strb	r1, [r3, r2]
 8014156:	e00b      	b.n	8014170 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	6a1b      	ldr	r3, [r3, #32]
 801415c:	228c      	movs	r2, #140	@ 0x8c
 801415e:	18ba      	adds	r2, r7, r2
 8014160:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	2200      	movs	r2, #0
 8014166:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	2224      	movs	r2, #36	@ 0x24
 801416c:	2100      	movs	r1, #0
 801416e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	657b      	str	r3, [r7, #84]	@ 0x54
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	785b      	ldrb	r3, [r3, #1]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d000      	beq.n	8014180 <HAL_PCD_EP_DB_Transmit+0x68c>
 801417e:	e06e      	b.n	801425e <HAL_PCD_EP_DB_Transmit+0x76a>
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	2250      	movs	r2, #80	@ 0x50
 801418c:	5a9b      	ldrh	r3, [r3, r2]
 801418e:	b29b      	uxth	r3, r3
 8014190:	001a      	movs	r2, r3
 8014192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014194:	189b      	adds	r3, r3, r2
 8014196:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	00da      	lsls	r2, r3, #3
 801419e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80141a0:	18d3      	adds	r3, r2, r3
 80141a2:	4a1e      	ldr	r2, [pc, #120]	@ (801421c <HAL_PCD_EP_DB_Transmit+0x728>)
 80141a4:	4694      	mov	ip, r2
 80141a6:	4463      	add	r3, ip
 80141a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80141aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	059b      	lsls	r3, r3, #22
 80141b2:	0d9b      	lsrs	r3, r3, #22
 80141b4:	b29a      	uxth	r2, r3
 80141b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141b8:	801a      	strh	r2, [r3, #0]
 80141ba:	228c      	movs	r2, #140	@ 0x8c
 80141bc:	18bb      	adds	r3, r7, r2
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80141c2:	d91a      	bls.n	80141fa <HAL_PCD_EP_DB_Transmit+0x706>
 80141c4:	18bb      	adds	r3, r7, r2
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	095b      	lsrs	r3, r3, #5
 80141ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80141cc:	18bb      	adds	r3, r7, r2
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	221f      	movs	r2, #31
 80141d2:	4013      	ands	r3, r2
 80141d4:	d102      	bne.n	80141dc <HAL_PCD_EP_DB_Transmit+0x6e8>
 80141d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80141d8:	3b01      	subs	r3, #1
 80141da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80141dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141de:	881b      	ldrh	r3, [r3, #0]
 80141e0:	b29a      	uxth	r2, r3
 80141e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	029b      	lsls	r3, r3, #10
 80141e8:	b29b      	uxth	r3, r3
 80141ea:	4313      	orrs	r3, r2
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	4a0c      	ldr	r2, [pc, #48]	@ (8014220 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80141f0:	4313      	orrs	r3, r2
 80141f2:	b29a      	uxth	r2, r3
 80141f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141f6:	801a      	strh	r2, [r3, #0]
 80141f8:	e04d      	b.n	8014296 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80141fa:	238c      	movs	r3, #140	@ 0x8c
 80141fc:	18fb      	adds	r3, r7, r3
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d113      	bne.n	801422c <HAL_PCD_EP_DB_Transmit+0x738>
 8014204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014206:	881b      	ldrh	r3, [r3, #0]
 8014208:	b29b      	uxth	r3, r3
 801420a:	4a05      	ldr	r2, [pc, #20]	@ (8014220 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801420c:	4313      	orrs	r3, r2
 801420e:	b29a      	uxth	r2, r3
 8014210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014212:	801a      	strh	r2, [r3, #0]
 8014214:	e03f      	b.n	8014296 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014216:	46c0      	nop			@ (mov r8, r8)
 8014218:	00000402 	.word	0x00000402
 801421c:	00000406 	.word	0x00000406
 8014220:	ffff8000 	.word	0xffff8000
 8014224:	ffff8f8f 	.word	0xffff8f8f
 8014228:	ffffc080 	.word	0xffffc080
 801422c:	228c      	movs	r2, #140	@ 0x8c
 801422e:	18bb      	adds	r3, r7, r2
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	085b      	lsrs	r3, r3, #1
 8014234:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014236:	18bb      	adds	r3, r7, r2
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	2201      	movs	r2, #1
 801423c:	4013      	ands	r3, r2
 801423e:	d002      	beq.n	8014246 <HAL_PCD_EP_DB_Transmit+0x752>
 8014240:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014242:	3301      	adds	r3, #1
 8014244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014246:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014248:	881b      	ldrh	r3, [r3, #0]
 801424a:	b29a      	uxth	r2, r3
 801424c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801424e:	b29b      	uxth	r3, r3
 8014250:	029b      	lsls	r3, r3, #10
 8014252:	b29b      	uxth	r3, r3
 8014254:	4313      	orrs	r3, r2
 8014256:	b29a      	uxth	r2, r3
 8014258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801425a:	801a      	strh	r2, [r3, #0]
 801425c:	e01b      	b.n	8014296 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	785b      	ldrb	r3, [r3, #1]
 8014262:	2b01      	cmp	r3, #1
 8014264:	d117      	bne.n	8014296 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	2250      	movs	r2, #80	@ 0x50
 801426c:	5a9b      	ldrh	r3, [r3, r2]
 801426e:	b29b      	uxth	r3, r3
 8014270:	001a      	movs	r2, r3
 8014272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014274:	189b      	adds	r3, r3, r2
 8014276:	657b      	str	r3, [r7, #84]	@ 0x54
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	00da      	lsls	r2, r3, #3
 801427e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014280:	18d3      	adds	r3, r2, r3
 8014282:	4a21      	ldr	r2, [pc, #132]	@ (8014308 <HAL_PCD_EP_DB_Transmit+0x814>)
 8014284:	4694      	mov	ip, r2
 8014286:	4463      	add	r3, ip
 8014288:	653b      	str	r3, [r7, #80]	@ 0x50
 801428a:	238c      	movs	r3, #140	@ 0x8c
 801428c:	18fb      	adds	r3, r7, r3
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	b29a      	uxth	r2, r3
 8014292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014294:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	6818      	ldr	r0, [r3, #0]
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	6959      	ldr	r1, [r3, #20]
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	895a      	ldrh	r2, [r3, #10]
 80142a2:	238c      	movs	r3, #140	@ 0x8c
 80142a4:	18fb      	adds	r3, r7, r3
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	b29b      	uxth	r3, r3
 80142aa:	f006 f999 	bl	801a5e0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	001a      	movs	r2, r3
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	009b      	lsls	r3, r3, #2
 80142ba:	18d3      	adds	r3, r2, r3
 80142bc:	881b      	ldrh	r3, [r3, #0]
 80142be:	b29a      	uxth	r2, r3
 80142c0:	2014      	movs	r0, #20
 80142c2:	183b      	adds	r3, r7, r0
 80142c4:	4911      	ldr	r1, [pc, #68]	@ (801430c <HAL_PCD_EP_DB_Transmit+0x818>)
 80142c6:	400a      	ands	r2, r1
 80142c8:	801a      	strh	r2, [r3, #0]
 80142ca:	183b      	adds	r3, r7, r0
 80142cc:	183a      	adds	r2, r7, r0
 80142ce:	8812      	ldrh	r2, [r2, #0]
 80142d0:	2110      	movs	r1, #16
 80142d2:	404a      	eors	r2, r1
 80142d4:	801a      	strh	r2, [r3, #0]
 80142d6:	183b      	adds	r3, r7, r0
 80142d8:	183a      	adds	r2, r7, r0
 80142da:	8812      	ldrh	r2, [r2, #0]
 80142dc:	2120      	movs	r1, #32
 80142de:	404a      	eors	r2, r1
 80142e0:	801a      	strh	r2, [r3, #0]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	001a      	movs	r2, r3
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	18d3      	adds	r3, r2, r3
 80142f0:	183a      	adds	r2, r7, r0
 80142f2:	8812      	ldrh	r2, [r2, #0]
 80142f4:	4906      	ldr	r1, [pc, #24]	@ (8014310 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80142f6:	430a      	orrs	r2, r1
 80142f8:	b292      	uxth	r2, r2
 80142fa:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80142fc:	2300      	movs	r3, #0
}
 80142fe:	0018      	movs	r0, r3
 8014300:	46bd      	mov	sp, r7
 8014302:	b024      	add	sp, #144	@ 0x90
 8014304:	bd80      	pop	{r7, pc}
 8014306:	46c0      	nop			@ (mov r8, r8)
 8014308:	00000406 	.word	0x00000406
 801430c:	ffff8fbf 	.word	0xffff8fbf
 8014310:	ffff8080 	.word	0xffff8080

08014314 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014314:	b590      	push	{r4, r7, lr}
 8014316:	b087      	sub	sp, #28
 8014318:	af00      	add	r7, sp, #0
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	0008      	movs	r0, r1
 801431e:	0011      	movs	r1, r2
 8014320:	607b      	str	r3, [r7, #4]
 8014322:	240a      	movs	r4, #10
 8014324:	193b      	adds	r3, r7, r4
 8014326:	1c02      	adds	r2, r0, #0
 8014328:	801a      	strh	r2, [r3, #0]
 801432a:	2308      	movs	r3, #8
 801432c:	18fb      	adds	r3, r7, r3
 801432e:	1c0a      	adds	r2, r1, #0
 8014330:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014332:	0021      	movs	r1, r4
 8014334:	187b      	adds	r3, r7, r1
 8014336:	881b      	ldrh	r3, [r3, #0]
 8014338:	2280      	movs	r2, #128	@ 0x80
 801433a:	4013      	ands	r3, r2
 801433c:	b29b      	uxth	r3, r3
 801433e:	2b00      	cmp	r3, #0
 8014340:	d00c      	beq.n	801435c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014342:	187b      	adds	r3, r7, r1
 8014344:	881b      	ldrh	r3, [r3, #0]
 8014346:	2207      	movs	r2, #7
 8014348:	4013      	ands	r3, r2
 801434a:	1c5a      	adds	r2, r3, #1
 801434c:	0013      	movs	r3, r2
 801434e:	009b      	lsls	r3, r3, #2
 8014350:	189b      	adds	r3, r3, r2
 8014352:	00db      	lsls	r3, r3, #3
 8014354:	68fa      	ldr	r2, [r7, #12]
 8014356:	18d3      	adds	r3, r2, r3
 8014358:	617b      	str	r3, [r7, #20]
 801435a:	e00b      	b.n	8014374 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801435c:	230a      	movs	r3, #10
 801435e:	18fb      	adds	r3, r7, r3
 8014360:	881a      	ldrh	r2, [r3, #0]
 8014362:	0013      	movs	r3, r2
 8014364:	009b      	lsls	r3, r3, #2
 8014366:	189b      	adds	r3, r3, r2
 8014368:	00db      	lsls	r3, r3, #3
 801436a:	3369      	adds	r3, #105	@ 0x69
 801436c:	33ff      	adds	r3, #255	@ 0xff
 801436e:	68fa      	ldr	r2, [r7, #12]
 8014370:	18d3      	adds	r3, r2, r3
 8014372:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014374:	2308      	movs	r3, #8
 8014376:	18fb      	adds	r3, r7, r3
 8014378:	881b      	ldrh	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d107      	bne.n	801438e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	2200      	movs	r2, #0
 8014382:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	b29a      	uxth	r2, r3
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	80da      	strh	r2, [r3, #6]
 801438c:	e00b      	b.n	80143a6 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	2201      	movs	r2, #1
 8014392:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	b29a      	uxth	r2, r3
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	0c1b      	lsrs	r3, r3, #16
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80143a6:	2300      	movs	r3, #0
}
 80143a8:	0018      	movs	r0, r3
 80143aa:	46bd      	mov	sp, r7
 80143ac:	b007      	add	sp, #28
 80143ae:	bd90      	pop	{r4, r7, pc}

080143b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	23ba      	movs	r3, #186	@ 0xba
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	2101      	movs	r1, #1
 80143c6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	23b8      	movs	r3, #184	@ 0xb8
 80143cc:	009b      	lsls	r3, r3, #2
 80143ce:	2100      	movs	r1, #0
 80143d0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	2254      	movs	r2, #84	@ 0x54
 80143d6:	5a9b      	ldrh	r3, [r3, r2]
 80143d8:	b29b      	uxth	r3, r3
 80143da:	2201      	movs	r2, #1
 80143dc:	4313      	orrs	r3, r2
 80143de:	b299      	uxth	r1, r3
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	2254      	movs	r2, #84	@ 0x54
 80143e4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2254      	movs	r2, #84	@ 0x54
 80143ea:	5a9b      	ldrh	r3, [r3, r2]
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	2202      	movs	r2, #2
 80143f0:	4313      	orrs	r3, r2
 80143f2:	b299      	uxth	r1, r3
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	2254      	movs	r2, #84	@ 0x54
 80143f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80143fa:	2300      	movs	r3, #0
}
 80143fc:	0018      	movs	r0, r3
 80143fe:	46bd      	mov	sp, r7
 8014400:	b004      	add	sp, #16
 8014402:	bd80      	pop	{r7, pc}

08014404 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	000a      	movs	r2, r1
 801440e:	1cfb      	adds	r3, r7, #3
 8014410:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014412:	46c0      	nop			@ (mov r8, r8)
 8014414:	46bd      	mov	sp, r7
 8014416:	b002      	add	sp, #8
 8014418:	bd80      	pop	{r7, pc}
	...

0801441c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014420:	4b04      	ldr	r3, [pc, #16]	@ (8014434 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	4b03      	ldr	r3, [pc, #12]	@ (8014434 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014426:	2180      	movs	r1, #128	@ 0x80
 8014428:	0049      	lsls	r1, r1, #1
 801442a:	430a      	orrs	r2, r1
 801442c:	601a      	str	r2, [r3, #0]
}
 801442e:	46c0      	nop			@ (mov r8, r8)
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	40007000 	.word	0x40007000

08014438 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801443c:	4b04      	ldr	r3, [pc, #16]	@ (8014450 <HAL_PWR_DisableBkUpAccess+0x18>)
 801443e:	681a      	ldr	r2, [r3, #0]
 8014440:	4b03      	ldr	r3, [pc, #12]	@ (8014450 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014442:	4904      	ldr	r1, [pc, #16]	@ (8014454 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8014444:	400a      	ands	r2, r1
 8014446:	601a      	str	r2, [r3, #0]
}
 8014448:	46c0      	nop			@ (mov r8, r8)
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}
 801444e:	46c0      	nop			@ (mov r8, r8)
 8014450:	40007000 	.word	0x40007000
 8014454:	fffffeff 	.word	0xfffffeff

08014458 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b086      	sub	sp, #24
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	000a      	movs	r2, r1
 8014462:	1cfb      	adds	r3, r7, #3
 8014464:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8014466:	2300      	movs	r3, #0
 8014468:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801446a:	4b25      	ldr	r3, [pc, #148]	@ (8014500 <HAL_PWR_EnterSTOPMode+0xa8>)
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	2380      	movs	r3, #128	@ 0x80
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	4013      	ands	r3, r2
 8014474:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014476:	4b23      	ldr	r3, [pc, #140]	@ (8014504 <HAL_PWR_EnterSTOPMode+0xac>)
 8014478:	6a1b      	ldr	r3, [r3, #32]
 801447a:	2201      	movs	r2, #1
 801447c:	4013      	ands	r3, r2
 801447e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d008      	beq.n	8014498 <HAL_PWR_EnterSTOPMode+0x40>
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d005      	beq.n	8014498 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801448c:	4b1c      	ldr	r3, [pc, #112]	@ (8014500 <HAL_PWR_EnterSTOPMode+0xa8>)
 801448e:	681a      	ldr	r2, [r3, #0]
 8014490:	4b1b      	ldr	r3, [pc, #108]	@ (8014500 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014492:	491d      	ldr	r1, [pc, #116]	@ (8014508 <HAL_PWR_EnterSTOPMode+0xb0>)
 8014494:	400a      	ands	r2, r1
 8014496:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014498:	4b19      	ldr	r3, [pc, #100]	@ (8014500 <HAL_PWR_EnterSTOPMode+0xa8>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	2203      	movs	r2, #3
 80144a2:	4393      	bics	r3, r2
 80144a4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80144a6:	697a      	ldr	r2, [r7, #20]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	4313      	orrs	r3, r2
 80144ac:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80144ae:	4b14      	ldr	r3, [pc, #80]	@ (8014500 <HAL_PWR_EnterSTOPMode+0xa8>)
 80144b0:	697a      	ldr	r2, [r7, #20]
 80144b2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80144b4:	4b15      	ldr	r3, [pc, #84]	@ (801450c <HAL_PWR_EnterSTOPMode+0xb4>)
 80144b6:	691a      	ldr	r2, [r3, #16]
 80144b8:	4b14      	ldr	r3, [pc, #80]	@ (801450c <HAL_PWR_EnterSTOPMode+0xb4>)
 80144ba:	2104      	movs	r1, #4
 80144bc:	430a      	orrs	r2, r1
 80144be:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80144c0:	1cfb      	adds	r3, r7, #3
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d101      	bne.n	80144cc <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80144c8:	bf30      	wfi
 80144ca:	e002      	b.n	80144d2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80144cc:	bf40      	sev
    __WFE();
 80144ce:	bf20      	wfe
    __WFE();
 80144d0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80144d2:	4b0e      	ldr	r3, [pc, #56]	@ (801450c <HAL_PWR_EnterSTOPMode+0xb4>)
 80144d4:	691a      	ldr	r2, [r3, #16]
 80144d6:	4b0d      	ldr	r3, [pc, #52]	@ (801450c <HAL_PWR_EnterSTOPMode+0xb4>)
 80144d8:	2104      	movs	r1, #4
 80144da:	438a      	bics	r2, r1
 80144dc:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d009      	beq.n	80144f8 <HAL_PWR_EnterSTOPMode+0xa0>
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d006      	beq.n	80144f8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80144ea:	4b05      	ldr	r3, [pc, #20]	@ (8014500 <HAL_PWR_EnterSTOPMode+0xa8>)
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	4b04      	ldr	r3, [pc, #16]	@ (8014500 <HAL_PWR_EnterSTOPMode+0xa8>)
 80144f0:	2180      	movs	r1, #128	@ 0x80
 80144f2:	0089      	lsls	r1, r1, #2
 80144f4:	430a      	orrs	r2, r1
 80144f6:	601a      	str	r2, [r3, #0]
  }
}
 80144f8:	46c0      	nop			@ (mov r8, r8)
 80144fa:	46bd      	mov	sp, r7
 80144fc:	b006      	add	sp, #24
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	40007000 	.word	0x40007000
 8014504:	40010000 	.word	0x40010000
 8014508:	fffffdff 	.word	0xfffffdff
 801450c:	e000ed00 	.word	0xe000ed00

08014510 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8014514:	4b07      	ldr	r3, [pc, #28]	@ (8014534 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	4b06      	ldr	r3, [pc, #24]	@ (8014534 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801451a:	2102      	movs	r1, #2
 801451c:	430a      	orrs	r2, r1
 801451e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014520:	4b05      	ldr	r3, [pc, #20]	@ (8014538 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014522:	691a      	ldr	r2, [r3, #16]
 8014524:	4b04      	ldr	r3, [pc, #16]	@ (8014538 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014526:	2104      	movs	r1, #4
 8014528:	430a      	orrs	r2, r1
 801452a:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801452c:	bf30      	wfi
}
 801452e:	46c0      	nop			@ (mov r8, r8)
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	40007000 	.word	0x40007000
 8014538:	e000ed00 	.word	0xe000ed00

0801453c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801453c:	b5b0      	push	{r4, r5, r7, lr}
 801453e:	b08a      	sub	sp, #40	@ 0x28
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d102      	bne.n	8014550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801454a:	2301      	movs	r3, #1
 801454c:	f000 fbbf 	bl	8014cce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014550:	4bc9      	ldr	r3, [pc, #804]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	220c      	movs	r2, #12
 8014556:	4013      	ands	r3, r2
 8014558:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801455a:	4bc7      	ldr	r3, [pc, #796]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 801455c:	68da      	ldr	r2, [r3, #12]
 801455e:	2380      	movs	r3, #128	@ 0x80
 8014560:	025b      	lsls	r3, r3, #9
 8014562:	4013      	ands	r3, r2
 8014564:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	2201      	movs	r2, #1
 801456c:	4013      	ands	r3, r2
 801456e:	d100      	bne.n	8014572 <HAL_RCC_OscConfig+0x36>
 8014570:	e07e      	b.n	8014670 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014572:	69fb      	ldr	r3, [r7, #28]
 8014574:	2b08      	cmp	r3, #8
 8014576:	d007      	beq.n	8014588 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014578:	69fb      	ldr	r3, [r7, #28]
 801457a:	2b0c      	cmp	r3, #12
 801457c:	d112      	bne.n	80145a4 <HAL_RCC_OscConfig+0x68>
 801457e:	69ba      	ldr	r2, [r7, #24]
 8014580:	2380      	movs	r3, #128	@ 0x80
 8014582:	025b      	lsls	r3, r3, #9
 8014584:	429a      	cmp	r2, r3
 8014586:	d10d      	bne.n	80145a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014588:	4bbb      	ldr	r3, [pc, #748]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	2380      	movs	r3, #128	@ 0x80
 801458e:	029b      	lsls	r3, r3, #10
 8014590:	4013      	ands	r3, r2
 8014592:	d100      	bne.n	8014596 <HAL_RCC_OscConfig+0x5a>
 8014594:	e06b      	b.n	801466e <HAL_RCC_OscConfig+0x132>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d167      	bne.n	801466e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801459e:	2301      	movs	r3, #1
 80145a0:	f000 fb95 	bl	8014cce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	685a      	ldr	r2, [r3, #4]
 80145a8:	2380      	movs	r3, #128	@ 0x80
 80145aa:	025b      	lsls	r3, r3, #9
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d107      	bne.n	80145c0 <HAL_RCC_OscConfig+0x84>
 80145b0:	4bb1      	ldr	r3, [pc, #708]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145b2:	681a      	ldr	r2, [r3, #0]
 80145b4:	4bb0      	ldr	r3, [pc, #704]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145b6:	2180      	movs	r1, #128	@ 0x80
 80145b8:	0249      	lsls	r1, r1, #9
 80145ba:	430a      	orrs	r2, r1
 80145bc:	601a      	str	r2, [r3, #0]
 80145be:	e027      	b.n	8014610 <HAL_RCC_OscConfig+0xd4>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	685a      	ldr	r2, [r3, #4]
 80145c4:	23a0      	movs	r3, #160	@ 0xa0
 80145c6:	02db      	lsls	r3, r3, #11
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d10e      	bne.n	80145ea <HAL_RCC_OscConfig+0xae>
 80145cc:	4baa      	ldr	r3, [pc, #680]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	4ba9      	ldr	r3, [pc, #676]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145d2:	2180      	movs	r1, #128	@ 0x80
 80145d4:	02c9      	lsls	r1, r1, #11
 80145d6:	430a      	orrs	r2, r1
 80145d8:	601a      	str	r2, [r3, #0]
 80145da:	4ba7      	ldr	r3, [pc, #668]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145dc:	681a      	ldr	r2, [r3, #0]
 80145de:	4ba6      	ldr	r3, [pc, #664]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145e0:	2180      	movs	r1, #128	@ 0x80
 80145e2:	0249      	lsls	r1, r1, #9
 80145e4:	430a      	orrs	r2, r1
 80145e6:	601a      	str	r2, [r3, #0]
 80145e8:	e012      	b.n	8014610 <HAL_RCC_OscConfig+0xd4>
 80145ea:	4ba3      	ldr	r3, [pc, #652]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	4ba2      	ldr	r3, [pc, #648]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145f0:	49a2      	ldr	r1, [pc, #648]	@ (801487c <HAL_RCC_OscConfig+0x340>)
 80145f2:	400a      	ands	r2, r1
 80145f4:	601a      	str	r2, [r3, #0]
 80145f6:	4ba0      	ldr	r3, [pc, #640]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	2380      	movs	r3, #128	@ 0x80
 80145fc:	025b      	lsls	r3, r3, #9
 80145fe:	4013      	ands	r3, r2
 8014600:	60fb      	str	r3, [r7, #12]
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	4b9c      	ldr	r3, [pc, #624]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	4b9b      	ldr	r3, [pc, #620]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 801460a:	499d      	ldr	r1, [pc, #628]	@ (8014880 <HAL_RCC_OscConfig+0x344>)
 801460c:	400a      	ands	r2, r1
 801460e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d015      	beq.n	8014644 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014618:	f7f9 fe76 	bl	800e308 <HAL_GetTick>
 801461c:	0003      	movs	r3, r0
 801461e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014620:	e009      	b.n	8014636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014622:	f7f9 fe71 	bl	800e308 <HAL_GetTick>
 8014626:	0002      	movs	r2, r0
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	1ad3      	subs	r3, r2, r3
 801462c:	2b64      	cmp	r3, #100	@ 0x64
 801462e:	d902      	bls.n	8014636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014630:	2303      	movs	r3, #3
 8014632:	f000 fb4c 	bl	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014636:	4b90      	ldr	r3, [pc, #576]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	2380      	movs	r3, #128	@ 0x80
 801463c:	029b      	lsls	r3, r3, #10
 801463e:	4013      	ands	r3, r2
 8014640:	d0ef      	beq.n	8014622 <HAL_RCC_OscConfig+0xe6>
 8014642:	e015      	b.n	8014670 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014644:	f7f9 fe60 	bl	800e308 <HAL_GetTick>
 8014648:	0003      	movs	r3, r0
 801464a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801464c:	e008      	b.n	8014660 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801464e:	f7f9 fe5b 	bl	800e308 <HAL_GetTick>
 8014652:	0002      	movs	r2, r0
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	1ad3      	subs	r3, r2, r3
 8014658:	2b64      	cmp	r3, #100	@ 0x64
 801465a:	d901      	bls.n	8014660 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801465c:	2303      	movs	r3, #3
 801465e:	e336      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014660:	4b85      	ldr	r3, [pc, #532]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014662:	681a      	ldr	r2, [r3, #0]
 8014664:	2380      	movs	r3, #128	@ 0x80
 8014666:	029b      	lsls	r3, r3, #10
 8014668:	4013      	ands	r3, r2
 801466a:	d1f0      	bne.n	801464e <HAL_RCC_OscConfig+0x112>
 801466c:	e000      	b.n	8014670 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801466e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	2202      	movs	r2, #2
 8014676:	4013      	ands	r3, r2
 8014678:	d100      	bne.n	801467c <HAL_RCC_OscConfig+0x140>
 801467a:	e099      	b.n	80147b0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8014682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014684:	2220      	movs	r2, #32
 8014686:	4013      	ands	r3, r2
 8014688:	d009      	beq.n	801469e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801468a:	4b7b      	ldr	r3, [pc, #492]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	4b7a      	ldr	r3, [pc, #488]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014690:	2120      	movs	r1, #32
 8014692:	430a      	orrs	r2, r1
 8014694:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8014696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014698:	2220      	movs	r2, #32
 801469a:	4393      	bics	r3, r2
 801469c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	2b04      	cmp	r3, #4
 80146a2:	d005      	beq.n	80146b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80146a4:	69fb      	ldr	r3, [r7, #28]
 80146a6:	2b0c      	cmp	r3, #12
 80146a8:	d13e      	bne.n	8014728 <HAL_RCC_OscConfig+0x1ec>
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d13b      	bne.n	8014728 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80146b0:	4b71      	ldr	r3, [pc, #452]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	2204      	movs	r2, #4
 80146b6:	4013      	ands	r3, r2
 80146b8:	d004      	beq.n	80146c4 <HAL_RCC_OscConfig+0x188>
 80146ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d101      	bne.n	80146c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80146c0:	2301      	movs	r3, #1
 80146c2:	e304      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80146c4:	4b6c      	ldr	r3, [pc, #432]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	4a6e      	ldr	r2, [pc, #440]	@ (8014884 <HAL_RCC_OscConfig+0x348>)
 80146ca:	4013      	ands	r3, r2
 80146cc:	0019      	movs	r1, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	691b      	ldr	r3, [r3, #16]
 80146d2:	021a      	lsls	r2, r3, #8
 80146d4:	4b68      	ldr	r3, [pc, #416]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80146d6:	430a      	orrs	r2, r1
 80146d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80146da:	4b67      	ldr	r3, [pc, #412]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	2209      	movs	r2, #9
 80146e0:	4393      	bics	r3, r2
 80146e2:	0019      	movs	r1, r3
 80146e4:	4b64      	ldr	r3, [pc, #400]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80146e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80146e8:	430a      	orrs	r2, r1
 80146ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80146ec:	f000 fc42 	bl	8014f74 <HAL_RCC_GetSysClockFreq>
 80146f0:	0001      	movs	r1, r0
 80146f2:	4b61      	ldr	r3, [pc, #388]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	091b      	lsrs	r3, r3, #4
 80146f8:	220f      	movs	r2, #15
 80146fa:	4013      	ands	r3, r2
 80146fc:	4a62      	ldr	r2, [pc, #392]	@ (8014888 <HAL_RCC_OscConfig+0x34c>)
 80146fe:	5cd3      	ldrb	r3, [r2, r3]
 8014700:	000a      	movs	r2, r1
 8014702:	40da      	lsrs	r2, r3
 8014704:	4b61      	ldr	r3, [pc, #388]	@ (801488c <HAL_RCC_OscConfig+0x350>)
 8014706:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8014708:	4b61      	ldr	r3, [pc, #388]	@ (8014890 <HAL_RCC_OscConfig+0x354>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	2513      	movs	r5, #19
 801470e:	197c      	adds	r4, r7, r5
 8014710:	0018      	movs	r0, r3
 8014712:	f7f9 fdb3 	bl	800e27c <HAL_InitTick>
 8014716:	0003      	movs	r3, r0
 8014718:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801471a:	197b      	adds	r3, r7, r5
 801471c:	781b      	ldrb	r3, [r3, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d046      	beq.n	80147b0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8014722:	197b      	adds	r3, r7, r5
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	e2d2      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8014728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801472a:	2b00      	cmp	r3, #0
 801472c:	d027      	beq.n	801477e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801472e:	4b52      	ldr	r3, [pc, #328]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2209      	movs	r2, #9
 8014734:	4393      	bics	r3, r2
 8014736:	0019      	movs	r1, r3
 8014738:	4b4f      	ldr	r3, [pc, #316]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 801473a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801473c:	430a      	orrs	r2, r1
 801473e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014740:	f7f9 fde2 	bl	800e308 <HAL_GetTick>
 8014744:	0003      	movs	r3, r0
 8014746:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014748:	e008      	b.n	801475c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801474a:	f7f9 fddd 	bl	800e308 <HAL_GetTick>
 801474e:	0002      	movs	r2, r0
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	1ad3      	subs	r3, r2, r3
 8014754:	2b02      	cmp	r3, #2
 8014756:	d901      	bls.n	801475c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8014758:	2303      	movs	r3, #3
 801475a:	e2b8      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801475c:	4b46      	ldr	r3, [pc, #280]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2204      	movs	r2, #4
 8014762:	4013      	ands	r3, r2
 8014764:	d0f1      	beq.n	801474a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014766:	4b44      	ldr	r3, [pc, #272]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	4a46      	ldr	r2, [pc, #280]	@ (8014884 <HAL_RCC_OscConfig+0x348>)
 801476c:	4013      	ands	r3, r2
 801476e:	0019      	movs	r1, r3
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	691b      	ldr	r3, [r3, #16]
 8014774:	021a      	lsls	r2, r3, #8
 8014776:	4b40      	ldr	r3, [pc, #256]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014778:	430a      	orrs	r2, r1
 801477a:	605a      	str	r2, [r3, #4]
 801477c:	e018      	b.n	80147b0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801477e:	4b3e      	ldr	r3, [pc, #248]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	4b3d      	ldr	r3, [pc, #244]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014784:	2101      	movs	r1, #1
 8014786:	438a      	bics	r2, r1
 8014788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801478a:	f7f9 fdbd 	bl	800e308 <HAL_GetTick>
 801478e:	0003      	movs	r3, r0
 8014790:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014792:	e008      	b.n	80147a6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014794:	f7f9 fdb8 	bl	800e308 <HAL_GetTick>
 8014798:	0002      	movs	r2, r0
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	1ad3      	subs	r3, r2, r3
 801479e:	2b02      	cmp	r3, #2
 80147a0:	d901      	bls.n	80147a6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80147a2:	2303      	movs	r3, #3
 80147a4:	e293      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80147a6:	4b34      	ldr	r3, [pc, #208]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2204      	movs	r2, #4
 80147ac:	4013      	ands	r3, r2
 80147ae:	d1f1      	bne.n	8014794 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	2210      	movs	r2, #16
 80147b6:	4013      	ands	r3, r2
 80147b8:	d100      	bne.n	80147bc <HAL_RCC_OscConfig+0x280>
 80147ba:	e0a2      	b.n	8014902 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80147bc:	69fb      	ldr	r3, [r7, #28]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d140      	bne.n	8014844 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80147c2:	4b2d      	ldr	r3, [pc, #180]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80147c4:	681a      	ldr	r2, [r3, #0]
 80147c6:	2380      	movs	r3, #128	@ 0x80
 80147c8:	009b      	lsls	r3, r3, #2
 80147ca:	4013      	ands	r3, r2
 80147cc:	d005      	beq.n	80147da <HAL_RCC_OscConfig+0x29e>
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	69db      	ldr	r3, [r3, #28]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d101      	bne.n	80147da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80147d6:	2301      	movs	r3, #1
 80147d8:	e279      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80147da:	4b27      	ldr	r3, [pc, #156]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	4a2d      	ldr	r2, [pc, #180]	@ (8014894 <HAL_RCC_OscConfig+0x358>)
 80147e0:	4013      	ands	r3, r2
 80147e2:	0019      	movs	r1, r3
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147e8:	4b23      	ldr	r3, [pc, #140]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80147ea:	430a      	orrs	r2, r1
 80147ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80147ee:	4b22      	ldr	r3, [pc, #136]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	021b      	lsls	r3, r3, #8
 80147f4:	0a19      	lsrs	r1, r3, #8
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6a1b      	ldr	r3, [r3, #32]
 80147fa:	061a      	lsls	r2, r3, #24
 80147fc:	4b1e      	ldr	r3, [pc, #120]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 80147fe:	430a      	orrs	r2, r1
 8014800:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014806:	0b5b      	lsrs	r3, r3, #13
 8014808:	3301      	adds	r3, #1
 801480a:	2280      	movs	r2, #128	@ 0x80
 801480c:	0212      	lsls	r2, r2, #8
 801480e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8014810:	4b19      	ldr	r3, [pc, #100]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014812:	68db      	ldr	r3, [r3, #12]
 8014814:	091b      	lsrs	r3, r3, #4
 8014816:	210f      	movs	r1, #15
 8014818:	400b      	ands	r3, r1
 801481a:	491b      	ldr	r1, [pc, #108]	@ (8014888 <HAL_RCC_OscConfig+0x34c>)
 801481c:	5ccb      	ldrb	r3, [r1, r3]
 801481e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014820:	4b1a      	ldr	r3, [pc, #104]	@ (801488c <HAL_RCC_OscConfig+0x350>)
 8014822:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8014824:	4b1a      	ldr	r3, [pc, #104]	@ (8014890 <HAL_RCC_OscConfig+0x354>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	2513      	movs	r5, #19
 801482a:	197c      	adds	r4, r7, r5
 801482c:	0018      	movs	r0, r3
 801482e:	f7f9 fd25 	bl	800e27c <HAL_InitTick>
 8014832:	0003      	movs	r3, r0
 8014834:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8014836:	197b      	adds	r3, r7, r5
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d061      	beq.n	8014902 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801483e:	197b      	adds	r3, r7, r5
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	e244      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	69db      	ldr	r3, [r3, #28]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d040      	beq.n	80148ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801484c:	4b0a      	ldr	r3, [pc, #40]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	4b09      	ldr	r3, [pc, #36]	@ (8014878 <HAL_RCC_OscConfig+0x33c>)
 8014852:	2180      	movs	r1, #128	@ 0x80
 8014854:	0049      	lsls	r1, r1, #1
 8014856:	430a      	orrs	r2, r1
 8014858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801485a:	f7f9 fd55 	bl	800e308 <HAL_GetTick>
 801485e:	0003      	movs	r3, r0
 8014860:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014862:	e019      	b.n	8014898 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014864:	f7f9 fd50 	bl	800e308 <HAL_GetTick>
 8014868:	0002      	movs	r2, r0
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	1ad3      	subs	r3, r2, r3
 801486e:	2b02      	cmp	r3, #2
 8014870:	d912      	bls.n	8014898 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8014872:	2303      	movs	r3, #3
 8014874:	e22b      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
 8014876:	46c0      	nop			@ (mov r8, r8)
 8014878:	40021000 	.word	0x40021000
 801487c:	fffeffff 	.word	0xfffeffff
 8014880:	fffbffff 	.word	0xfffbffff
 8014884:	ffffe0ff 	.word	0xffffe0ff
 8014888:	080248a8 	.word	0x080248a8
 801488c:	200000c8 	.word	0x200000c8
 8014890:	200000d8 	.word	0x200000d8
 8014894:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014898:	4bca      	ldr	r3, [pc, #808]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	2380      	movs	r3, #128	@ 0x80
 801489e:	009b      	lsls	r3, r3, #2
 80148a0:	4013      	ands	r3, r2
 80148a2:	d0df      	beq.n	8014864 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80148a4:	4bc7      	ldr	r3, [pc, #796]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80148a6:	685b      	ldr	r3, [r3, #4]
 80148a8:	4ac7      	ldr	r2, [pc, #796]	@ (8014bc8 <HAL_RCC_OscConfig+0x68c>)
 80148aa:	4013      	ands	r3, r2
 80148ac:	0019      	movs	r1, r3
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148b2:	4bc4      	ldr	r3, [pc, #784]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80148b4:	430a      	orrs	r2, r1
 80148b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80148b8:	4bc2      	ldr	r3, [pc, #776]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	021b      	lsls	r3, r3, #8
 80148be:	0a19      	lsrs	r1, r3, #8
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6a1b      	ldr	r3, [r3, #32]
 80148c4:	061a      	lsls	r2, r3, #24
 80148c6:	4bbf      	ldr	r3, [pc, #764]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80148c8:	430a      	orrs	r2, r1
 80148ca:	605a      	str	r2, [r3, #4]
 80148cc:	e019      	b.n	8014902 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80148ce:	4bbd      	ldr	r3, [pc, #756]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	4bbc      	ldr	r3, [pc, #752]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80148d4:	49bd      	ldr	r1, [pc, #756]	@ (8014bcc <HAL_RCC_OscConfig+0x690>)
 80148d6:	400a      	ands	r2, r1
 80148d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80148da:	f7f9 fd15 	bl	800e308 <HAL_GetTick>
 80148de:	0003      	movs	r3, r0
 80148e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80148e2:	e008      	b.n	80148f6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80148e4:	f7f9 fd10 	bl	800e308 <HAL_GetTick>
 80148e8:	0002      	movs	r2, r0
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	2b02      	cmp	r3, #2
 80148f0:	d901      	bls.n	80148f6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80148f2:	2303      	movs	r3, #3
 80148f4:	e1eb      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80148f6:	4bb3      	ldr	r3, [pc, #716]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80148f8:	681a      	ldr	r2, [r3, #0]
 80148fa:	2380      	movs	r3, #128	@ 0x80
 80148fc:	009b      	lsls	r3, r3, #2
 80148fe:	4013      	ands	r3, r2
 8014900:	d1f0      	bne.n	80148e4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	2208      	movs	r2, #8
 8014908:	4013      	ands	r3, r2
 801490a:	d036      	beq.n	801497a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	695b      	ldr	r3, [r3, #20]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d019      	beq.n	8014948 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014914:	4bab      	ldr	r3, [pc, #684]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014918:	4baa      	ldr	r3, [pc, #680]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 801491a:	2101      	movs	r1, #1
 801491c:	430a      	orrs	r2, r1
 801491e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014920:	f7f9 fcf2 	bl	800e308 <HAL_GetTick>
 8014924:	0003      	movs	r3, r0
 8014926:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014928:	e008      	b.n	801493c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801492a:	f7f9 fced 	bl	800e308 <HAL_GetTick>
 801492e:	0002      	movs	r2, r0
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	2b02      	cmp	r3, #2
 8014936:	d901      	bls.n	801493c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8014938:	2303      	movs	r3, #3
 801493a:	e1c8      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801493c:	4ba1      	ldr	r3, [pc, #644]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 801493e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014940:	2202      	movs	r2, #2
 8014942:	4013      	ands	r3, r2
 8014944:	d0f1      	beq.n	801492a <HAL_RCC_OscConfig+0x3ee>
 8014946:	e018      	b.n	801497a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014948:	4b9e      	ldr	r3, [pc, #632]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 801494a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801494c:	4b9d      	ldr	r3, [pc, #628]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 801494e:	2101      	movs	r1, #1
 8014950:	438a      	bics	r2, r1
 8014952:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014954:	f7f9 fcd8 	bl	800e308 <HAL_GetTick>
 8014958:	0003      	movs	r3, r0
 801495a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801495c:	e008      	b.n	8014970 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801495e:	f7f9 fcd3 	bl	800e308 <HAL_GetTick>
 8014962:	0002      	movs	r2, r0
 8014964:	697b      	ldr	r3, [r7, #20]
 8014966:	1ad3      	subs	r3, r2, r3
 8014968:	2b02      	cmp	r3, #2
 801496a:	d901      	bls.n	8014970 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801496c:	2303      	movs	r3, #3
 801496e:	e1ae      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014970:	4b94      	ldr	r3, [pc, #592]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014974:	2202      	movs	r2, #2
 8014976:	4013      	ands	r3, r2
 8014978:	d1f1      	bne.n	801495e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	2204      	movs	r2, #4
 8014980:	4013      	ands	r3, r2
 8014982:	d100      	bne.n	8014986 <HAL_RCC_OscConfig+0x44a>
 8014984:	e0ae      	b.n	8014ae4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014986:	2023      	movs	r0, #35	@ 0x23
 8014988:	183b      	adds	r3, r7, r0
 801498a:	2200      	movs	r2, #0
 801498c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801498e:	4b8d      	ldr	r3, [pc, #564]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014992:	2380      	movs	r3, #128	@ 0x80
 8014994:	055b      	lsls	r3, r3, #21
 8014996:	4013      	ands	r3, r2
 8014998:	d109      	bne.n	80149ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801499a:	4b8a      	ldr	r3, [pc, #552]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 801499c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801499e:	4b89      	ldr	r3, [pc, #548]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80149a0:	2180      	movs	r1, #128	@ 0x80
 80149a2:	0549      	lsls	r1, r1, #21
 80149a4:	430a      	orrs	r2, r1
 80149a6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80149a8:	183b      	adds	r3, r7, r0
 80149aa:	2201      	movs	r2, #1
 80149ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80149ae:	4b88      	ldr	r3, [pc, #544]	@ (8014bd0 <HAL_RCC_OscConfig+0x694>)
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	2380      	movs	r3, #128	@ 0x80
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	4013      	ands	r3, r2
 80149b8:	d11a      	bne.n	80149f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80149ba:	4b85      	ldr	r3, [pc, #532]	@ (8014bd0 <HAL_RCC_OscConfig+0x694>)
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	4b84      	ldr	r3, [pc, #528]	@ (8014bd0 <HAL_RCC_OscConfig+0x694>)
 80149c0:	2180      	movs	r1, #128	@ 0x80
 80149c2:	0049      	lsls	r1, r1, #1
 80149c4:	430a      	orrs	r2, r1
 80149c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80149c8:	f7f9 fc9e 	bl	800e308 <HAL_GetTick>
 80149cc:	0003      	movs	r3, r0
 80149ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80149d0:	e008      	b.n	80149e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80149d2:	f7f9 fc99 	bl	800e308 <HAL_GetTick>
 80149d6:	0002      	movs	r2, r0
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	1ad3      	subs	r3, r2, r3
 80149dc:	2b64      	cmp	r3, #100	@ 0x64
 80149de:	d901      	bls.n	80149e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80149e0:	2303      	movs	r3, #3
 80149e2:	e174      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80149e4:	4b7a      	ldr	r3, [pc, #488]	@ (8014bd0 <HAL_RCC_OscConfig+0x694>)
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	2380      	movs	r3, #128	@ 0x80
 80149ea:	005b      	lsls	r3, r3, #1
 80149ec:	4013      	ands	r3, r2
 80149ee:	d0f0      	beq.n	80149d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	689a      	ldr	r2, [r3, #8]
 80149f4:	2380      	movs	r3, #128	@ 0x80
 80149f6:	005b      	lsls	r3, r3, #1
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d107      	bne.n	8014a0c <HAL_RCC_OscConfig+0x4d0>
 80149fc:	4b71      	ldr	r3, [pc, #452]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 80149fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a00:	4b70      	ldr	r3, [pc, #448]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a02:	2180      	movs	r1, #128	@ 0x80
 8014a04:	0049      	lsls	r1, r1, #1
 8014a06:	430a      	orrs	r2, r1
 8014a08:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a0a:	e031      	b.n	8014a70 <HAL_RCC_OscConfig+0x534>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	689b      	ldr	r3, [r3, #8]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d10c      	bne.n	8014a2e <HAL_RCC_OscConfig+0x4f2>
 8014a14:	4b6b      	ldr	r3, [pc, #428]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a18:	4b6a      	ldr	r3, [pc, #424]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a1a:	496c      	ldr	r1, [pc, #432]	@ (8014bcc <HAL_RCC_OscConfig+0x690>)
 8014a1c:	400a      	ands	r2, r1
 8014a1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a20:	4b68      	ldr	r3, [pc, #416]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a24:	4b67      	ldr	r3, [pc, #412]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a26:	496b      	ldr	r1, [pc, #428]	@ (8014bd4 <HAL_RCC_OscConfig+0x698>)
 8014a28:	400a      	ands	r2, r1
 8014a2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a2c:	e020      	b.n	8014a70 <HAL_RCC_OscConfig+0x534>
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	689a      	ldr	r2, [r3, #8]
 8014a32:	23a0      	movs	r3, #160	@ 0xa0
 8014a34:	00db      	lsls	r3, r3, #3
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d10e      	bne.n	8014a58 <HAL_RCC_OscConfig+0x51c>
 8014a3a:	4b62      	ldr	r3, [pc, #392]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a3e:	4b61      	ldr	r3, [pc, #388]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a40:	2180      	movs	r1, #128	@ 0x80
 8014a42:	00c9      	lsls	r1, r1, #3
 8014a44:	430a      	orrs	r2, r1
 8014a46:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a48:	4b5e      	ldr	r3, [pc, #376]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a4c:	4b5d      	ldr	r3, [pc, #372]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a4e:	2180      	movs	r1, #128	@ 0x80
 8014a50:	0049      	lsls	r1, r1, #1
 8014a52:	430a      	orrs	r2, r1
 8014a54:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a56:	e00b      	b.n	8014a70 <HAL_RCC_OscConfig+0x534>
 8014a58:	4b5a      	ldr	r3, [pc, #360]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a5c:	4b59      	ldr	r3, [pc, #356]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a5e:	495b      	ldr	r1, [pc, #364]	@ (8014bcc <HAL_RCC_OscConfig+0x690>)
 8014a60:	400a      	ands	r2, r1
 8014a62:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a64:	4b57      	ldr	r3, [pc, #348]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a68:	4b56      	ldr	r3, [pc, #344]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a6a:	495a      	ldr	r1, [pc, #360]	@ (8014bd4 <HAL_RCC_OscConfig+0x698>)
 8014a6c:	400a      	ands	r2, r1
 8014a6e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	689b      	ldr	r3, [r3, #8]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d015      	beq.n	8014aa4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014a78:	f7f9 fc46 	bl	800e308 <HAL_GetTick>
 8014a7c:	0003      	movs	r3, r0
 8014a7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014a80:	e009      	b.n	8014a96 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014a82:	f7f9 fc41 	bl	800e308 <HAL_GetTick>
 8014a86:	0002      	movs	r2, r0
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	4a52      	ldr	r2, [pc, #328]	@ (8014bd8 <HAL_RCC_OscConfig+0x69c>)
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	d901      	bls.n	8014a96 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8014a92:	2303      	movs	r3, #3
 8014a94:	e11b      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014a96:	4b4b      	ldr	r3, [pc, #300]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014a98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a9a:	2380      	movs	r3, #128	@ 0x80
 8014a9c:	009b      	lsls	r3, r3, #2
 8014a9e:	4013      	ands	r3, r2
 8014aa0:	d0ef      	beq.n	8014a82 <HAL_RCC_OscConfig+0x546>
 8014aa2:	e014      	b.n	8014ace <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014aa4:	f7f9 fc30 	bl	800e308 <HAL_GetTick>
 8014aa8:	0003      	movs	r3, r0
 8014aaa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014aac:	e009      	b.n	8014ac2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014aae:	f7f9 fc2b 	bl	800e308 <HAL_GetTick>
 8014ab2:	0002      	movs	r2, r0
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	1ad3      	subs	r3, r2, r3
 8014ab8:	4a47      	ldr	r2, [pc, #284]	@ (8014bd8 <HAL_RCC_OscConfig+0x69c>)
 8014aba:	4293      	cmp	r3, r2
 8014abc:	d901      	bls.n	8014ac2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8014abe:	2303      	movs	r3, #3
 8014ac0:	e105      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014ac2:	4b40      	ldr	r3, [pc, #256]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014ac4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ac6:	2380      	movs	r3, #128	@ 0x80
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	4013      	ands	r3, r2
 8014acc:	d1ef      	bne.n	8014aae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014ace:	2323      	movs	r3, #35	@ 0x23
 8014ad0:	18fb      	adds	r3, r7, r3
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	2b01      	cmp	r3, #1
 8014ad6:	d105      	bne.n	8014ae4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014adc:	4b39      	ldr	r3, [pc, #228]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014ade:	493f      	ldr	r1, [pc, #252]	@ (8014bdc <HAL_RCC_OscConfig+0x6a0>)
 8014ae0:	400a      	ands	r2, r1
 8014ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	2220      	movs	r2, #32
 8014aea:	4013      	ands	r3, r2
 8014aec:	d049      	beq.n	8014b82 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	699b      	ldr	r3, [r3, #24]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d026      	beq.n	8014b44 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8014af6:	4b33      	ldr	r3, [pc, #204]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014af8:	689a      	ldr	r2, [r3, #8]
 8014afa:	4b32      	ldr	r3, [pc, #200]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014afc:	2101      	movs	r1, #1
 8014afe:	430a      	orrs	r2, r1
 8014b00:	609a      	str	r2, [r3, #8]
 8014b02:	4b30      	ldr	r3, [pc, #192]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014b06:	4b2f      	ldr	r3, [pc, #188]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014b08:	2101      	movs	r1, #1
 8014b0a:	430a      	orrs	r2, r1
 8014b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8014b0e:	4b34      	ldr	r3, [pc, #208]	@ (8014be0 <HAL_RCC_OscConfig+0x6a4>)
 8014b10:	6a1a      	ldr	r2, [r3, #32]
 8014b12:	4b33      	ldr	r3, [pc, #204]	@ (8014be0 <HAL_RCC_OscConfig+0x6a4>)
 8014b14:	2180      	movs	r1, #128	@ 0x80
 8014b16:	0189      	lsls	r1, r1, #6
 8014b18:	430a      	orrs	r2, r1
 8014b1a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014b1c:	f7f9 fbf4 	bl	800e308 <HAL_GetTick>
 8014b20:	0003      	movs	r3, r0
 8014b22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014b24:	e008      	b.n	8014b38 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014b26:	f7f9 fbef 	bl	800e308 <HAL_GetTick>
 8014b2a:	0002      	movs	r2, r0
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	1ad3      	subs	r3, r2, r3
 8014b30:	2b02      	cmp	r3, #2
 8014b32:	d901      	bls.n	8014b38 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8014b34:	2303      	movs	r3, #3
 8014b36:	e0ca      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014b38:	4b22      	ldr	r3, [pc, #136]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014b3a:	689b      	ldr	r3, [r3, #8]
 8014b3c:	2202      	movs	r2, #2
 8014b3e:	4013      	ands	r3, r2
 8014b40:	d0f1      	beq.n	8014b26 <HAL_RCC_OscConfig+0x5ea>
 8014b42:	e01e      	b.n	8014b82 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8014b44:	4b1f      	ldr	r3, [pc, #124]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014b46:	689a      	ldr	r2, [r3, #8]
 8014b48:	4b1e      	ldr	r3, [pc, #120]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014b4a:	2101      	movs	r1, #1
 8014b4c:	438a      	bics	r2, r1
 8014b4e:	609a      	str	r2, [r3, #8]
 8014b50:	4b23      	ldr	r3, [pc, #140]	@ (8014be0 <HAL_RCC_OscConfig+0x6a4>)
 8014b52:	6a1a      	ldr	r2, [r3, #32]
 8014b54:	4b22      	ldr	r3, [pc, #136]	@ (8014be0 <HAL_RCC_OscConfig+0x6a4>)
 8014b56:	4923      	ldr	r1, [pc, #140]	@ (8014be4 <HAL_RCC_OscConfig+0x6a8>)
 8014b58:	400a      	ands	r2, r1
 8014b5a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014b5c:	f7f9 fbd4 	bl	800e308 <HAL_GetTick>
 8014b60:	0003      	movs	r3, r0
 8014b62:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014b64:	e008      	b.n	8014b78 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014b66:	f7f9 fbcf 	bl	800e308 <HAL_GetTick>
 8014b6a:	0002      	movs	r2, r0
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	1ad3      	subs	r3, r2, r3
 8014b70:	2b02      	cmp	r3, #2
 8014b72:	d901      	bls.n	8014b78 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8014b74:	2303      	movs	r3, #3
 8014b76:	e0aa      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014b78:	4b12      	ldr	r3, [pc, #72]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014b7a:	689b      	ldr	r3, [r3, #8]
 8014b7c:	2202      	movs	r2, #2
 8014b7e:	4013      	ands	r3, r2
 8014b80:	d1f1      	bne.n	8014b66 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d100      	bne.n	8014b8c <HAL_RCC_OscConfig+0x650>
 8014b8a:	e09f      	b.n	8014ccc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	2b0c      	cmp	r3, #12
 8014b90:	d100      	bne.n	8014b94 <HAL_RCC_OscConfig+0x658>
 8014b92:	e078      	b.n	8014c86 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b98:	2b02      	cmp	r3, #2
 8014b9a:	d159      	bne.n	8014c50 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014b9c:	4b09      	ldr	r3, [pc, #36]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	4b08      	ldr	r3, [pc, #32]	@ (8014bc4 <HAL_RCC_OscConfig+0x688>)
 8014ba2:	4911      	ldr	r1, [pc, #68]	@ (8014be8 <HAL_RCC_OscConfig+0x6ac>)
 8014ba4:	400a      	ands	r2, r1
 8014ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014ba8:	f7f9 fbae 	bl	800e308 <HAL_GetTick>
 8014bac:	0003      	movs	r3, r0
 8014bae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014bb0:	e01c      	b.n	8014bec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014bb2:	f7f9 fba9 	bl	800e308 <HAL_GetTick>
 8014bb6:	0002      	movs	r2, r0
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	1ad3      	subs	r3, r2, r3
 8014bbc:	2b02      	cmp	r3, #2
 8014bbe:	d915      	bls.n	8014bec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8014bc0:	2303      	movs	r3, #3
 8014bc2:	e084      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
 8014bc4:	40021000 	.word	0x40021000
 8014bc8:	ffff1fff 	.word	0xffff1fff
 8014bcc:	fffffeff 	.word	0xfffffeff
 8014bd0:	40007000 	.word	0x40007000
 8014bd4:	fffffbff 	.word	0xfffffbff
 8014bd8:	00001388 	.word	0x00001388
 8014bdc:	efffffff 	.word	0xefffffff
 8014be0:	40010000 	.word	0x40010000
 8014be4:	ffffdfff 	.word	0xffffdfff
 8014be8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014bec:	4b3a      	ldr	r3, [pc, #232]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	2380      	movs	r3, #128	@ 0x80
 8014bf2:	049b      	lsls	r3, r3, #18
 8014bf4:	4013      	ands	r3, r2
 8014bf6:	d1dc      	bne.n	8014bb2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014bf8:	4b37      	ldr	r3, [pc, #220]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	4a37      	ldr	r2, [pc, #220]	@ (8014cdc <HAL_RCC_OscConfig+0x7a0>)
 8014bfe:	4013      	ands	r3, r2
 8014c00:	0019      	movs	r1, r3
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c0a:	431a      	orrs	r2, r3
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c10:	431a      	orrs	r2, r3
 8014c12:	4b31      	ldr	r3, [pc, #196]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014c14:	430a      	orrs	r2, r1
 8014c16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014c18:	4b2f      	ldr	r3, [pc, #188]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014c1a:	681a      	ldr	r2, [r3, #0]
 8014c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014c1e:	2180      	movs	r1, #128	@ 0x80
 8014c20:	0449      	lsls	r1, r1, #17
 8014c22:	430a      	orrs	r2, r1
 8014c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c26:	f7f9 fb6f 	bl	800e308 <HAL_GetTick>
 8014c2a:	0003      	movs	r3, r0
 8014c2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014c2e:	e008      	b.n	8014c42 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014c30:	f7f9 fb6a 	bl	800e308 <HAL_GetTick>
 8014c34:	0002      	movs	r2, r0
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	1ad3      	subs	r3, r2, r3
 8014c3a:	2b02      	cmp	r3, #2
 8014c3c:	d901      	bls.n	8014c42 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8014c3e:	2303      	movs	r3, #3
 8014c40:	e045      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014c42:	4b25      	ldr	r3, [pc, #148]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014c44:	681a      	ldr	r2, [r3, #0]
 8014c46:	2380      	movs	r3, #128	@ 0x80
 8014c48:	049b      	lsls	r3, r3, #18
 8014c4a:	4013      	ands	r3, r2
 8014c4c:	d0f0      	beq.n	8014c30 <HAL_RCC_OscConfig+0x6f4>
 8014c4e:	e03d      	b.n	8014ccc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014c50:	4b21      	ldr	r3, [pc, #132]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014c52:	681a      	ldr	r2, [r3, #0]
 8014c54:	4b20      	ldr	r3, [pc, #128]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014c56:	4922      	ldr	r1, [pc, #136]	@ (8014ce0 <HAL_RCC_OscConfig+0x7a4>)
 8014c58:	400a      	ands	r2, r1
 8014c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c5c:	f7f9 fb54 	bl	800e308 <HAL_GetTick>
 8014c60:	0003      	movs	r3, r0
 8014c62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014c64:	e008      	b.n	8014c78 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014c66:	f7f9 fb4f 	bl	800e308 <HAL_GetTick>
 8014c6a:	0002      	movs	r2, r0
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	1ad3      	subs	r3, r2, r3
 8014c70:	2b02      	cmp	r3, #2
 8014c72:	d901      	bls.n	8014c78 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8014c74:	2303      	movs	r3, #3
 8014c76:	e02a      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014c78:	4b17      	ldr	r3, [pc, #92]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	2380      	movs	r3, #128	@ 0x80
 8014c7e:	049b      	lsls	r3, r3, #18
 8014c80:	4013      	ands	r3, r2
 8014c82:	d1f0      	bne.n	8014c66 <HAL_RCC_OscConfig+0x72a>
 8014c84:	e022      	b.n	8014ccc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c8a:	2b01      	cmp	r3, #1
 8014c8c:	d101      	bne.n	8014c92 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8014c8e:	2301      	movs	r3, #1
 8014c90:	e01d      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8014c92:	4b11      	ldr	r3, [pc, #68]	@ (8014cd8 <HAL_RCC_OscConfig+0x79c>)
 8014c94:	68db      	ldr	r3, [r3, #12]
 8014c96:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014c98:	69ba      	ldr	r2, [r7, #24]
 8014c9a:	2380      	movs	r3, #128	@ 0x80
 8014c9c:	025b      	lsls	r3, r3, #9
 8014c9e:	401a      	ands	r2, r3
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d10f      	bne.n	8014cc8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014ca8:	69ba      	ldr	r2, [r7, #24]
 8014caa:	23f0      	movs	r3, #240	@ 0xf0
 8014cac:	039b      	lsls	r3, r3, #14
 8014cae:	401a      	ands	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d107      	bne.n	8014cc8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8014cb8:	69ba      	ldr	r2, [r7, #24]
 8014cba:	23c0      	movs	r3, #192	@ 0xc0
 8014cbc:	041b      	lsls	r3, r3, #16
 8014cbe:	401a      	ands	r2, r3
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d001      	beq.n	8014ccc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8014cc8:	2301      	movs	r3, #1
 8014cca:	e000      	b.n	8014cce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8014ccc:	2300      	movs	r3, #0
}
 8014cce:	0018      	movs	r0, r3
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	b00a      	add	sp, #40	@ 0x28
 8014cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8014cd6:	46c0      	nop			@ (mov r8, r8)
 8014cd8:	40021000 	.word	0x40021000
 8014cdc:	ff02ffff 	.word	0xff02ffff
 8014ce0:	feffffff 	.word	0xfeffffff

08014ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014ce4:	b5b0      	push	{r4, r5, r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d101      	bne.n	8014cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	e128      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014cf8:	4b96      	ldr	r3, [pc, #600]	@ (8014f54 <HAL_RCC_ClockConfig+0x270>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	4013      	ands	r3, r2
 8014d00:	683a      	ldr	r2, [r7, #0]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d91e      	bls.n	8014d44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014d06:	4b93      	ldr	r3, [pc, #588]	@ (8014f54 <HAL_RCC_ClockConfig+0x270>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	4393      	bics	r3, r2
 8014d0e:	0019      	movs	r1, r3
 8014d10:	4b90      	ldr	r3, [pc, #576]	@ (8014f54 <HAL_RCC_ClockConfig+0x270>)
 8014d12:	683a      	ldr	r2, [r7, #0]
 8014d14:	430a      	orrs	r2, r1
 8014d16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014d18:	f7f9 faf6 	bl	800e308 <HAL_GetTick>
 8014d1c:	0003      	movs	r3, r0
 8014d1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d20:	e009      	b.n	8014d36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014d22:	f7f9 faf1 	bl	800e308 <HAL_GetTick>
 8014d26:	0002      	movs	r2, r0
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	1ad3      	subs	r3, r2, r3
 8014d2c:	4a8a      	ldr	r2, [pc, #552]	@ (8014f58 <HAL_RCC_ClockConfig+0x274>)
 8014d2e:	4293      	cmp	r3, r2
 8014d30:	d901      	bls.n	8014d36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8014d32:	2303      	movs	r3, #3
 8014d34:	e109      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d36:	4b87      	ldr	r3, [pc, #540]	@ (8014f54 <HAL_RCC_ClockConfig+0x270>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	4013      	ands	r3, r2
 8014d3e:	683a      	ldr	r2, [r7, #0]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d1ee      	bne.n	8014d22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	2202      	movs	r2, #2
 8014d4a:	4013      	ands	r3, r2
 8014d4c:	d009      	beq.n	8014d62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014d4e:	4b83      	ldr	r3, [pc, #524]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014d50:	68db      	ldr	r3, [r3, #12]
 8014d52:	22f0      	movs	r2, #240	@ 0xf0
 8014d54:	4393      	bics	r3, r2
 8014d56:	0019      	movs	r1, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	689a      	ldr	r2, [r3, #8]
 8014d5c:	4b7f      	ldr	r3, [pc, #508]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014d5e:	430a      	orrs	r2, r1
 8014d60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	2201      	movs	r2, #1
 8014d68:	4013      	ands	r3, r2
 8014d6a:	d100      	bne.n	8014d6e <HAL_RCC_ClockConfig+0x8a>
 8014d6c:	e089      	b.n	8014e82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	2b02      	cmp	r3, #2
 8014d74:	d107      	bne.n	8014d86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014d76:	4b79      	ldr	r3, [pc, #484]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	2380      	movs	r3, #128	@ 0x80
 8014d7c:	029b      	lsls	r3, r3, #10
 8014d7e:	4013      	ands	r3, r2
 8014d80:	d120      	bne.n	8014dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014d82:	2301      	movs	r3, #1
 8014d84:	e0e1      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	2b03      	cmp	r3, #3
 8014d8c:	d107      	bne.n	8014d9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014d8e:	4b73      	ldr	r3, [pc, #460]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	2380      	movs	r3, #128	@ 0x80
 8014d94:	049b      	lsls	r3, r3, #18
 8014d96:	4013      	ands	r3, r2
 8014d98:	d114      	bne.n	8014dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	e0d5      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	2b01      	cmp	r3, #1
 8014da4:	d106      	bne.n	8014db4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014da6:	4b6d      	ldr	r3, [pc, #436]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	2204      	movs	r2, #4
 8014dac:	4013      	ands	r3, r2
 8014dae:	d109      	bne.n	8014dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014db0:	2301      	movs	r3, #1
 8014db2:	e0ca      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014db4:	4b69      	ldr	r3, [pc, #420]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014db6:	681a      	ldr	r2, [r3, #0]
 8014db8:	2380      	movs	r3, #128	@ 0x80
 8014dba:	009b      	lsls	r3, r3, #2
 8014dbc:	4013      	ands	r3, r2
 8014dbe:	d101      	bne.n	8014dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e0c2      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014dc4:	4b65      	ldr	r3, [pc, #404]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014dc6:	68db      	ldr	r3, [r3, #12]
 8014dc8:	2203      	movs	r2, #3
 8014dca:	4393      	bics	r3, r2
 8014dcc:	0019      	movs	r1, r3
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	685a      	ldr	r2, [r3, #4]
 8014dd2:	4b62      	ldr	r3, [pc, #392]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014dd4:	430a      	orrs	r2, r1
 8014dd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014dd8:	f7f9 fa96 	bl	800e308 <HAL_GetTick>
 8014ddc:	0003      	movs	r3, r0
 8014dde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	685b      	ldr	r3, [r3, #4]
 8014de4:	2b02      	cmp	r3, #2
 8014de6:	d111      	bne.n	8014e0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014de8:	e009      	b.n	8014dfe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014dea:	f7f9 fa8d 	bl	800e308 <HAL_GetTick>
 8014dee:	0002      	movs	r2, r0
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	1ad3      	subs	r3, r2, r3
 8014df4:	4a58      	ldr	r2, [pc, #352]	@ (8014f58 <HAL_RCC_ClockConfig+0x274>)
 8014df6:	4293      	cmp	r3, r2
 8014df8:	d901      	bls.n	8014dfe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8014dfa:	2303      	movs	r3, #3
 8014dfc:	e0a5      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014dfe:	4b57      	ldr	r3, [pc, #348]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014e00:	68db      	ldr	r3, [r3, #12]
 8014e02:	220c      	movs	r2, #12
 8014e04:	4013      	ands	r3, r2
 8014e06:	2b08      	cmp	r3, #8
 8014e08:	d1ef      	bne.n	8014dea <HAL_RCC_ClockConfig+0x106>
 8014e0a:	e03a      	b.n	8014e82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	685b      	ldr	r3, [r3, #4]
 8014e10:	2b03      	cmp	r3, #3
 8014e12:	d111      	bne.n	8014e38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014e14:	e009      	b.n	8014e2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e16:	f7f9 fa77 	bl	800e308 <HAL_GetTick>
 8014e1a:	0002      	movs	r2, r0
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	1ad3      	subs	r3, r2, r3
 8014e20:	4a4d      	ldr	r2, [pc, #308]	@ (8014f58 <HAL_RCC_ClockConfig+0x274>)
 8014e22:	4293      	cmp	r3, r2
 8014e24:	d901      	bls.n	8014e2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8014e26:	2303      	movs	r3, #3
 8014e28:	e08f      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014e2c:	68db      	ldr	r3, [r3, #12]
 8014e2e:	220c      	movs	r2, #12
 8014e30:	4013      	ands	r3, r2
 8014e32:	2b0c      	cmp	r3, #12
 8014e34:	d1ef      	bne.n	8014e16 <HAL_RCC_ClockConfig+0x132>
 8014e36:	e024      	b.n	8014e82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	685b      	ldr	r3, [r3, #4]
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d11b      	bne.n	8014e78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014e40:	e009      	b.n	8014e56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e42:	f7f9 fa61 	bl	800e308 <HAL_GetTick>
 8014e46:	0002      	movs	r2, r0
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	1ad3      	subs	r3, r2, r3
 8014e4c:	4a42      	ldr	r2, [pc, #264]	@ (8014f58 <HAL_RCC_ClockConfig+0x274>)
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	d901      	bls.n	8014e56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8014e52:	2303      	movs	r3, #3
 8014e54:	e079      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014e56:	4b41      	ldr	r3, [pc, #260]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	220c      	movs	r2, #12
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	2b04      	cmp	r3, #4
 8014e60:	d1ef      	bne.n	8014e42 <HAL_RCC_ClockConfig+0x15e>
 8014e62:	e00e      	b.n	8014e82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e64:	f7f9 fa50 	bl	800e308 <HAL_GetTick>
 8014e68:	0002      	movs	r2, r0
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	1ad3      	subs	r3, r2, r3
 8014e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8014f58 <HAL_RCC_ClockConfig+0x274>)
 8014e70:	4293      	cmp	r3, r2
 8014e72:	d901      	bls.n	8014e78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8014e74:	2303      	movs	r3, #3
 8014e76:	e068      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014e78:	4b38      	ldr	r3, [pc, #224]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014e7a:	68db      	ldr	r3, [r3, #12]
 8014e7c:	220c      	movs	r2, #12
 8014e7e:	4013      	ands	r3, r2
 8014e80:	d1f0      	bne.n	8014e64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014e82:	4b34      	ldr	r3, [pc, #208]	@ (8014f54 <HAL_RCC_ClockConfig+0x270>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	2201      	movs	r2, #1
 8014e88:	4013      	ands	r3, r2
 8014e8a:	683a      	ldr	r2, [r7, #0]
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d21e      	bcs.n	8014ece <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014e90:	4b30      	ldr	r3, [pc, #192]	@ (8014f54 <HAL_RCC_ClockConfig+0x270>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	2201      	movs	r2, #1
 8014e96:	4393      	bics	r3, r2
 8014e98:	0019      	movs	r1, r3
 8014e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8014f54 <HAL_RCC_ClockConfig+0x270>)
 8014e9c:	683a      	ldr	r2, [r7, #0]
 8014e9e:	430a      	orrs	r2, r1
 8014ea0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014ea2:	f7f9 fa31 	bl	800e308 <HAL_GetTick>
 8014ea6:	0003      	movs	r3, r0
 8014ea8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014eaa:	e009      	b.n	8014ec0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014eac:	f7f9 fa2c 	bl	800e308 <HAL_GetTick>
 8014eb0:	0002      	movs	r2, r0
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	1ad3      	subs	r3, r2, r3
 8014eb6:	4a28      	ldr	r2, [pc, #160]	@ (8014f58 <HAL_RCC_ClockConfig+0x274>)
 8014eb8:	4293      	cmp	r3, r2
 8014eba:	d901      	bls.n	8014ec0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8014ebc:	2303      	movs	r3, #3
 8014ebe:	e044      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014ec0:	4b24      	ldr	r3, [pc, #144]	@ (8014f54 <HAL_RCC_ClockConfig+0x270>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	4013      	ands	r3, r2
 8014ec8:	683a      	ldr	r2, [r7, #0]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d1ee      	bne.n	8014eac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	2204      	movs	r2, #4
 8014ed4:	4013      	ands	r3, r2
 8014ed6:	d009      	beq.n	8014eec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014ed8:	4b20      	ldr	r3, [pc, #128]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014eda:	68db      	ldr	r3, [r3, #12]
 8014edc:	4a20      	ldr	r2, [pc, #128]	@ (8014f60 <HAL_RCC_ClockConfig+0x27c>)
 8014ede:	4013      	ands	r3, r2
 8014ee0:	0019      	movs	r1, r3
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	68da      	ldr	r2, [r3, #12]
 8014ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014ee8:	430a      	orrs	r2, r1
 8014eea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	2208      	movs	r2, #8
 8014ef2:	4013      	ands	r3, r2
 8014ef4:	d00a      	beq.n	8014f0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014ef6:	4b19      	ldr	r3, [pc, #100]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	4a1a      	ldr	r2, [pc, #104]	@ (8014f64 <HAL_RCC_ClockConfig+0x280>)
 8014efc:	4013      	ands	r3, r2
 8014efe:	0019      	movs	r1, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	691b      	ldr	r3, [r3, #16]
 8014f04:	00da      	lsls	r2, r3, #3
 8014f06:	4b15      	ldr	r3, [pc, #84]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014f08:	430a      	orrs	r2, r1
 8014f0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014f0c:	f000 f832 	bl	8014f74 <HAL_RCC_GetSysClockFreq>
 8014f10:	0001      	movs	r1, r0
 8014f12:	4b12      	ldr	r3, [pc, #72]	@ (8014f5c <HAL_RCC_ClockConfig+0x278>)
 8014f14:	68db      	ldr	r3, [r3, #12]
 8014f16:	091b      	lsrs	r3, r3, #4
 8014f18:	220f      	movs	r2, #15
 8014f1a:	4013      	ands	r3, r2
 8014f1c:	4a12      	ldr	r2, [pc, #72]	@ (8014f68 <HAL_RCC_ClockConfig+0x284>)
 8014f1e:	5cd3      	ldrb	r3, [r2, r3]
 8014f20:	000a      	movs	r2, r1
 8014f22:	40da      	lsrs	r2, r3
 8014f24:	4b11      	ldr	r3, [pc, #68]	@ (8014f6c <HAL_RCC_ClockConfig+0x288>)
 8014f26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014f28:	4b11      	ldr	r3, [pc, #68]	@ (8014f70 <HAL_RCC_ClockConfig+0x28c>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	250b      	movs	r5, #11
 8014f2e:	197c      	adds	r4, r7, r5
 8014f30:	0018      	movs	r0, r3
 8014f32:	f7f9 f9a3 	bl	800e27c <HAL_InitTick>
 8014f36:	0003      	movs	r3, r0
 8014f38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8014f3a:	197b      	adds	r3, r7, r5
 8014f3c:	781b      	ldrb	r3, [r3, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d002      	beq.n	8014f48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8014f42:	197b      	adds	r3, r7, r5
 8014f44:	781b      	ldrb	r3, [r3, #0]
 8014f46:	e000      	b.n	8014f4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8014f48:	2300      	movs	r3, #0
}
 8014f4a:	0018      	movs	r0, r3
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	b004      	add	sp, #16
 8014f50:	bdb0      	pop	{r4, r5, r7, pc}
 8014f52:	46c0      	nop			@ (mov r8, r8)
 8014f54:	40022000 	.word	0x40022000
 8014f58:	00001388 	.word	0x00001388
 8014f5c:	40021000 	.word	0x40021000
 8014f60:	fffff8ff 	.word	0xfffff8ff
 8014f64:	ffffc7ff 	.word	0xffffc7ff
 8014f68:	080248a8 	.word	0x080248a8
 8014f6c:	200000c8 	.word	0x200000c8
 8014f70:	200000d8 	.word	0x200000d8

08014f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014f74:	b5b0      	push	{r4, r5, r7, lr}
 8014f76:	b08e      	sub	sp, #56	@ 0x38
 8014f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8014f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80150ac <HAL_RCC_GetSysClockFreq+0x138>)
 8014f7c:	68db      	ldr	r3, [r3, #12]
 8014f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8014f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f82:	230c      	movs	r3, #12
 8014f84:	4013      	ands	r3, r2
 8014f86:	2b0c      	cmp	r3, #12
 8014f88:	d014      	beq.n	8014fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8014f8a:	d900      	bls.n	8014f8e <HAL_RCC_GetSysClockFreq+0x1a>
 8014f8c:	e07b      	b.n	8015086 <HAL_RCC_GetSysClockFreq+0x112>
 8014f8e:	2b04      	cmp	r3, #4
 8014f90:	d002      	beq.n	8014f98 <HAL_RCC_GetSysClockFreq+0x24>
 8014f92:	2b08      	cmp	r3, #8
 8014f94:	d00b      	beq.n	8014fae <HAL_RCC_GetSysClockFreq+0x3a>
 8014f96:	e076      	b.n	8015086 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014f98:	4b44      	ldr	r3, [pc, #272]	@ (80150ac <HAL_RCC_GetSysClockFreq+0x138>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	2210      	movs	r2, #16
 8014f9e:	4013      	ands	r3, r2
 8014fa0:	d002      	beq.n	8014fa8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8014fa2:	4b43      	ldr	r3, [pc, #268]	@ (80150b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014fa4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8014fa6:	e07c      	b.n	80150a2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8014fa8:	4b42      	ldr	r3, [pc, #264]	@ (80150b4 <HAL_RCC_GetSysClockFreq+0x140>)
 8014faa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014fac:	e079      	b.n	80150a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8014fae:	4b42      	ldr	r3, [pc, #264]	@ (80150b8 <HAL_RCC_GetSysClockFreq+0x144>)
 8014fb0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014fb2:	e076      	b.n	80150a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8014fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb6:	0c9a      	lsrs	r2, r3, #18
 8014fb8:	230f      	movs	r3, #15
 8014fba:	401a      	ands	r2, r3
 8014fbc:	4b3f      	ldr	r3, [pc, #252]	@ (80150bc <HAL_RCC_GetSysClockFreq+0x148>)
 8014fbe:	5c9b      	ldrb	r3, [r3, r2]
 8014fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8014fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fc4:	0d9a      	lsrs	r2, r3, #22
 8014fc6:	2303      	movs	r3, #3
 8014fc8:	4013      	ands	r3, r2
 8014fca:	3301      	adds	r3, #1
 8014fcc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014fce:	4b37      	ldr	r3, [pc, #220]	@ (80150ac <HAL_RCC_GetSysClockFreq+0x138>)
 8014fd0:	68da      	ldr	r2, [r3, #12]
 8014fd2:	2380      	movs	r3, #128	@ 0x80
 8014fd4:	025b      	lsls	r3, r3, #9
 8014fd6:	4013      	ands	r3, r2
 8014fd8:	d01a      	beq.n	8015010 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fdc:	61bb      	str	r3, [r7, #24]
 8014fde:	2300      	movs	r3, #0
 8014fe0:	61fb      	str	r3, [r7, #28]
 8014fe2:	4a35      	ldr	r2, [pc, #212]	@ (80150b8 <HAL_RCC_GetSysClockFreq+0x144>)
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	69b8      	ldr	r0, [r7, #24]
 8014fe8:	69f9      	ldr	r1, [r7, #28]
 8014fea:	f7eb fae9 	bl	80005c0 <__aeabi_lmul>
 8014fee:	0002      	movs	r2, r0
 8014ff0:	000b      	movs	r3, r1
 8014ff2:	0010      	movs	r0, r2
 8014ff4:	0019      	movs	r1, r3
 8014ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ff8:	613b      	str	r3, [r7, #16]
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	617b      	str	r3, [r7, #20]
 8014ffe:	693a      	ldr	r2, [r7, #16]
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	f7eb fabd 	bl	8000580 <__aeabi_uldivmod>
 8015006:	0002      	movs	r2, r0
 8015008:	000b      	movs	r3, r1
 801500a:	0013      	movs	r3, r2
 801500c:	637b      	str	r3, [r7, #52]	@ 0x34
 801500e:	e037      	b.n	8015080 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015010:	4b26      	ldr	r3, [pc, #152]	@ (80150ac <HAL_RCC_GetSysClockFreq+0x138>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	2210      	movs	r2, #16
 8015016:	4013      	ands	r3, r2
 8015018:	d01a      	beq.n	8015050 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801501c:	60bb      	str	r3, [r7, #8]
 801501e:	2300      	movs	r3, #0
 8015020:	60fb      	str	r3, [r7, #12]
 8015022:	4a23      	ldr	r2, [pc, #140]	@ (80150b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015024:	2300      	movs	r3, #0
 8015026:	68b8      	ldr	r0, [r7, #8]
 8015028:	68f9      	ldr	r1, [r7, #12]
 801502a:	f7eb fac9 	bl	80005c0 <__aeabi_lmul>
 801502e:	0002      	movs	r2, r0
 8015030:	000b      	movs	r3, r1
 8015032:	0010      	movs	r0, r2
 8015034:	0019      	movs	r1, r3
 8015036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015038:	603b      	str	r3, [r7, #0]
 801503a:	2300      	movs	r3, #0
 801503c:	607b      	str	r3, [r7, #4]
 801503e:	683a      	ldr	r2, [r7, #0]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f7eb fa9d 	bl	8000580 <__aeabi_uldivmod>
 8015046:	0002      	movs	r2, r0
 8015048:	000b      	movs	r3, r1
 801504a:	0013      	movs	r3, r2
 801504c:	637b      	str	r3, [r7, #52]	@ 0x34
 801504e:	e017      	b.n	8015080 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015052:	0018      	movs	r0, r3
 8015054:	2300      	movs	r3, #0
 8015056:	0019      	movs	r1, r3
 8015058:	4a16      	ldr	r2, [pc, #88]	@ (80150b4 <HAL_RCC_GetSysClockFreq+0x140>)
 801505a:	2300      	movs	r3, #0
 801505c:	f7eb fab0 	bl	80005c0 <__aeabi_lmul>
 8015060:	0002      	movs	r2, r0
 8015062:	000b      	movs	r3, r1
 8015064:	0010      	movs	r0, r2
 8015066:	0019      	movs	r1, r3
 8015068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801506a:	001c      	movs	r4, r3
 801506c:	2300      	movs	r3, #0
 801506e:	001d      	movs	r5, r3
 8015070:	0022      	movs	r2, r4
 8015072:	002b      	movs	r3, r5
 8015074:	f7eb fa84 	bl	8000580 <__aeabi_uldivmod>
 8015078:	0002      	movs	r2, r0
 801507a:	000b      	movs	r3, r1
 801507c:	0013      	movs	r3, r2
 801507e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015082:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015084:	e00d      	b.n	80150a2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015086:	4b09      	ldr	r3, [pc, #36]	@ (80150ac <HAL_RCC_GetSysClockFreq+0x138>)
 8015088:	685b      	ldr	r3, [r3, #4]
 801508a:	0b5b      	lsrs	r3, r3, #13
 801508c:	2207      	movs	r2, #7
 801508e:	4013      	ands	r3, r2
 8015090:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015092:	6a3b      	ldr	r3, [r7, #32]
 8015094:	3301      	adds	r3, #1
 8015096:	2280      	movs	r2, #128	@ 0x80
 8015098:	0212      	lsls	r2, r2, #8
 801509a:	409a      	lsls	r2, r3
 801509c:	0013      	movs	r3, r2
 801509e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80150a0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80150a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80150a4:	0018      	movs	r0, r3
 80150a6:	46bd      	mov	sp, r7
 80150a8:	b00e      	add	sp, #56	@ 0x38
 80150aa:	bdb0      	pop	{r4, r5, r7, pc}
 80150ac:	40021000 	.word	0x40021000
 80150b0:	003d0900 	.word	0x003d0900
 80150b4:	00f42400 	.word	0x00f42400
 80150b8:	007a1200 	.word	0x007a1200
 80150bc:	080248c0 	.word	0x080248c0

080150c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80150c4:	4b02      	ldr	r3, [pc, #8]	@ (80150d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80150c6:	681b      	ldr	r3, [r3, #0]
}
 80150c8:	0018      	movs	r0, r3
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	46c0      	nop			@ (mov r8, r8)
 80150d0:	200000c8 	.word	0x200000c8

080150d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80150d8:	f7ff fff2 	bl	80150c0 <HAL_RCC_GetHCLKFreq>
 80150dc:	0001      	movs	r1, r0
 80150de:	4b06      	ldr	r3, [pc, #24]	@ (80150f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80150e0:	68db      	ldr	r3, [r3, #12]
 80150e2:	0a1b      	lsrs	r3, r3, #8
 80150e4:	2207      	movs	r2, #7
 80150e6:	4013      	ands	r3, r2
 80150e8:	4a04      	ldr	r2, [pc, #16]	@ (80150fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80150ea:	5cd3      	ldrb	r3, [r2, r3]
 80150ec:	40d9      	lsrs	r1, r3
 80150ee:	000b      	movs	r3, r1
}
 80150f0:	0018      	movs	r0, r3
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}
 80150f6:	46c0      	nop			@ (mov r8, r8)
 80150f8:	40021000 	.word	0x40021000
 80150fc:	080248b8 	.word	0x080248b8

08015100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015104:	f7ff ffdc 	bl	80150c0 <HAL_RCC_GetHCLKFreq>
 8015108:	0001      	movs	r1, r0
 801510a:	4b06      	ldr	r3, [pc, #24]	@ (8015124 <HAL_RCC_GetPCLK2Freq+0x24>)
 801510c:	68db      	ldr	r3, [r3, #12]
 801510e:	0adb      	lsrs	r3, r3, #11
 8015110:	2207      	movs	r2, #7
 8015112:	4013      	ands	r3, r2
 8015114:	4a04      	ldr	r2, [pc, #16]	@ (8015128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015116:	5cd3      	ldrb	r3, [r2, r3]
 8015118:	40d9      	lsrs	r1, r3
 801511a:	000b      	movs	r3, r1
}
 801511c:	0018      	movs	r0, r3
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	46c0      	nop			@ (mov r8, r8)
 8015124:	40021000 	.word	0x40021000
 8015128:	080248b8 	.word	0x080248b8

0801512c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b086      	sub	sp, #24
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015134:	2017      	movs	r0, #23
 8015136:	183b      	adds	r3, r7, r0
 8015138:	2200      	movs	r2, #0
 801513a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	2220      	movs	r2, #32
 8015142:	4013      	ands	r3, r2
 8015144:	d100      	bne.n	8015148 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015146:	e0c7      	b.n	80152d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015148:	4b9b      	ldr	r3, [pc, #620]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801514a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801514c:	2380      	movs	r3, #128	@ 0x80
 801514e:	055b      	lsls	r3, r3, #21
 8015150:	4013      	ands	r3, r2
 8015152:	d109      	bne.n	8015168 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015154:	4b98      	ldr	r3, [pc, #608]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015158:	4b97      	ldr	r3, [pc, #604]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801515a:	2180      	movs	r1, #128	@ 0x80
 801515c:	0549      	lsls	r1, r1, #21
 801515e:	430a      	orrs	r2, r1
 8015160:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015162:	183b      	adds	r3, r7, r0
 8015164:	2201      	movs	r2, #1
 8015166:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015168:	4b94      	ldr	r3, [pc, #592]	@ (80153bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801516a:	681a      	ldr	r2, [r3, #0]
 801516c:	2380      	movs	r3, #128	@ 0x80
 801516e:	005b      	lsls	r3, r3, #1
 8015170:	4013      	ands	r3, r2
 8015172:	d11a      	bne.n	80151aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015174:	4b91      	ldr	r3, [pc, #580]	@ (80153bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	4b90      	ldr	r3, [pc, #576]	@ (80153bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801517a:	2180      	movs	r1, #128	@ 0x80
 801517c:	0049      	lsls	r1, r1, #1
 801517e:	430a      	orrs	r2, r1
 8015180:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015182:	f7f9 f8c1 	bl	800e308 <HAL_GetTick>
 8015186:	0003      	movs	r3, r0
 8015188:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801518a:	e008      	b.n	801519e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801518c:	f7f9 f8bc 	bl	800e308 <HAL_GetTick>
 8015190:	0002      	movs	r2, r0
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	1ad3      	subs	r3, r2, r3
 8015196:	2b64      	cmp	r3, #100	@ 0x64
 8015198:	d901      	bls.n	801519e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801519a:	2303      	movs	r3, #3
 801519c:	e107      	b.n	80153ae <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801519e:	4b87      	ldr	r3, [pc, #540]	@ (80153bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80151a0:	681a      	ldr	r2, [r3, #0]
 80151a2:	2380      	movs	r3, #128	@ 0x80
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	4013      	ands	r3, r2
 80151a8:	d0f0      	beq.n	801518c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80151aa:	4b83      	ldr	r3, [pc, #524]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	23c0      	movs	r3, #192	@ 0xc0
 80151b0:	039b      	lsls	r3, r3, #14
 80151b2:	4013      	ands	r3, r2
 80151b4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	685a      	ldr	r2, [r3, #4]
 80151ba:	23c0      	movs	r3, #192	@ 0xc0
 80151bc:	039b      	lsls	r3, r3, #14
 80151be:	4013      	ands	r3, r2
 80151c0:	68fa      	ldr	r2, [r7, #12]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d013      	beq.n	80151ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	685a      	ldr	r2, [r3, #4]
 80151ca:	23c0      	movs	r3, #192	@ 0xc0
 80151cc:	029b      	lsls	r3, r3, #10
 80151ce:	401a      	ands	r2, r3
 80151d0:	23c0      	movs	r3, #192	@ 0xc0
 80151d2:	029b      	lsls	r3, r3, #10
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d10a      	bne.n	80151ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80151d8:	4b77      	ldr	r3, [pc, #476]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80151da:	681a      	ldr	r2, [r3, #0]
 80151dc:	2380      	movs	r3, #128	@ 0x80
 80151de:	029b      	lsls	r3, r3, #10
 80151e0:	401a      	ands	r2, r3
 80151e2:	2380      	movs	r3, #128	@ 0x80
 80151e4:	029b      	lsls	r3, r3, #10
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d101      	bne.n	80151ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80151ea:	2301      	movs	r3, #1
 80151ec:	e0df      	b.n	80153ae <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80151ee:	4b72      	ldr	r3, [pc, #456]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80151f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80151f2:	23c0      	movs	r3, #192	@ 0xc0
 80151f4:	029b      	lsls	r3, r3, #10
 80151f6:	4013      	ands	r3, r2
 80151f8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d03b      	beq.n	8015278 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	685a      	ldr	r2, [r3, #4]
 8015204:	23c0      	movs	r3, #192	@ 0xc0
 8015206:	029b      	lsls	r3, r3, #10
 8015208:	4013      	ands	r3, r2
 801520a:	68fa      	ldr	r2, [r7, #12]
 801520c:	429a      	cmp	r2, r3
 801520e:	d033      	beq.n	8015278 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	2220      	movs	r2, #32
 8015216:	4013      	ands	r3, r2
 8015218:	d02e      	beq.n	8015278 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801521a:	4b67      	ldr	r3, [pc, #412]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801521c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801521e:	4a68      	ldr	r2, [pc, #416]	@ (80153c0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015220:	4013      	ands	r3, r2
 8015222:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015224:	4b64      	ldr	r3, [pc, #400]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015226:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015228:	4b63      	ldr	r3, [pc, #396]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801522a:	2180      	movs	r1, #128	@ 0x80
 801522c:	0309      	lsls	r1, r1, #12
 801522e:	430a      	orrs	r2, r1
 8015230:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015232:	4b61      	ldr	r3, [pc, #388]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015236:	4b60      	ldr	r3, [pc, #384]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015238:	4962      	ldr	r1, [pc, #392]	@ (80153c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801523a:	400a      	ands	r2, r1
 801523c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801523e:	4b5e      	ldr	r3, [pc, #376]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015240:	68fa      	ldr	r2, [r7, #12]
 8015242:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015244:	68fa      	ldr	r2, [r7, #12]
 8015246:	2380      	movs	r3, #128	@ 0x80
 8015248:	005b      	lsls	r3, r3, #1
 801524a:	4013      	ands	r3, r2
 801524c:	d014      	beq.n	8015278 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801524e:	f7f9 f85b 	bl	800e308 <HAL_GetTick>
 8015252:	0003      	movs	r3, r0
 8015254:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015256:	e009      	b.n	801526c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015258:	f7f9 f856 	bl	800e308 <HAL_GetTick>
 801525c:	0002      	movs	r2, r0
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	1ad3      	subs	r3, r2, r3
 8015262:	4a59      	ldr	r2, [pc, #356]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015264:	4293      	cmp	r3, r2
 8015266:	d901      	bls.n	801526c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015268:	2303      	movs	r3, #3
 801526a:	e0a0      	b.n	80153ae <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801526c:	4b52      	ldr	r3, [pc, #328]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801526e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015270:	2380      	movs	r3, #128	@ 0x80
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	4013      	ands	r3, r2
 8015276:	d0ef      	beq.n	8015258 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	2220      	movs	r2, #32
 801527e:	4013      	ands	r3, r2
 8015280:	d01f      	beq.n	80152c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	685a      	ldr	r2, [r3, #4]
 8015286:	23c0      	movs	r3, #192	@ 0xc0
 8015288:	029b      	lsls	r3, r3, #10
 801528a:	401a      	ands	r2, r3
 801528c:	23c0      	movs	r3, #192	@ 0xc0
 801528e:	029b      	lsls	r3, r3, #10
 8015290:	429a      	cmp	r2, r3
 8015292:	d10c      	bne.n	80152ae <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015294:	4b48      	ldr	r3, [pc, #288]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4a4c      	ldr	r2, [pc, #304]	@ (80153cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801529a:	4013      	ands	r3, r2
 801529c:	0019      	movs	r1, r3
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	685a      	ldr	r2, [r3, #4]
 80152a2:	23c0      	movs	r3, #192	@ 0xc0
 80152a4:	039b      	lsls	r3, r3, #14
 80152a6:	401a      	ands	r2, r3
 80152a8:	4b43      	ldr	r3, [pc, #268]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152aa:	430a      	orrs	r2, r1
 80152ac:	601a      	str	r2, [r3, #0]
 80152ae:	4b42      	ldr	r3, [pc, #264]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	685a      	ldr	r2, [r3, #4]
 80152b6:	23c0      	movs	r3, #192	@ 0xc0
 80152b8:	029b      	lsls	r3, r3, #10
 80152ba:	401a      	ands	r2, r3
 80152bc:	4b3e      	ldr	r3, [pc, #248]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152be:	430a      	orrs	r2, r1
 80152c0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80152c2:	2317      	movs	r3, #23
 80152c4:	18fb      	adds	r3, r7, r3
 80152c6:	781b      	ldrb	r3, [r3, #0]
 80152c8:	2b01      	cmp	r3, #1
 80152ca:	d105      	bne.n	80152d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80152cc:	4b3a      	ldr	r3, [pc, #232]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80152d0:	4b39      	ldr	r3, [pc, #228]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152d2:	493f      	ldr	r1, [pc, #252]	@ (80153d0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80152d4:	400a      	ands	r2, r1
 80152d6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2201      	movs	r2, #1
 80152de:	4013      	ands	r3, r2
 80152e0:	d009      	beq.n	80152f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80152e2:	4b35      	ldr	r3, [pc, #212]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80152e6:	2203      	movs	r2, #3
 80152e8:	4393      	bics	r3, r2
 80152ea:	0019      	movs	r1, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	689a      	ldr	r2, [r3, #8]
 80152f0:	4b31      	ldr	r3, [pc, #196]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152f2:	430a      	orrs	r2, r1
 80152f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	2202      	movs	r2, #2
 80152fc:	4013      	ands	r3, r2
 80152fe:	d009      	beq.n	8015314 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015300:	4b2d      	ldr	r3, [pc, #180]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015304:	220c      	movs	r2, #12
 8015306:	4393      	bics	r3, r2
 8015308:	0019      	movs	r1, r3
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	68da      	ldr	r2, [r3, #12]
 801530e:	4b2a      	ldr	r3, [pc, #168]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015310:	430a      	orrs	r2, r1
 8015312:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	2204      	movs	r2, #4
 801531a:	4013      	ands	r3, r2
 801531c:	d009      	beq.n	8015332 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801531e:	4b26      	ldr	r3, [pc, #152]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015322:	4a2c      	ldr	r2, [pc, #176]	@ (80153d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015324:	4013      	ands	r3, r2
 8015326:	0019      	movs	r1, r3
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	691a      	ldr	r2, [r3, #16]
 801532c:	4b22      	ldr	r3, [pc, #136]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801532e:	430a      	orrs	r2, r1
 8015330:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2208      	movs	r2, #8
 8015338:	4013      	ands	r3, r2
 801533a:	d009      	beq.n	8015350 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801533c:	4b1e      	ldr	r3, [pc, #120]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801533e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015340:	4a25      	ldr	r2, [pc, #148]	@ (80153d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015342:	4013      	ands	r3, r2
 8015344:	0019      	movs	r1, r3
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	695a      	ldr	r2, [r3, #20]
 801534a:	4b1b      	ldr	r3, [pc, #108]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801534c:	430a      	orrs	r2, r1
 801534e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681a      	ldr	r2, [r3, #0]
 8015354:	2380      	movs	r3, #128	@ 0x80
 8015356:	005b      	lsls	r3, r3, #1
 8015358:	4013      	ands	r3, r2
 801535a:	d009      	beq.n	8015370 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801535c:	4b16      	ldr	r3, [pc, #88]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801535e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015360:	4a17      	ldr	r2, [pc, #92]	@ (80153c0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015362:	4013      	ands	r3, r2
 8015364:	0019      	movs	r1, r3
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	699a      	ldr	r2, [r3, #24]
 801536a:	4b13      	ldr	r3, [pc, #76]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801536c:	430a      	orrs	r2, r1
 801536e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2240      	movs	r2, #64	@ 0x40
 8015376:	4013      	ands	r3, r2
 8015378:	d009      	beq.n	801538e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801537a:	4b0f      	ldr	r3, [pc, #60]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801537c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801537e:	4a17      	ldr	r2, [pc, #92]	@ (80153dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015380:	4013      	ands	r3, r2
 8015382:	0019      	movs	r1, r3
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	6a1a      	ldr	r2, [r3, #32]
 8015388:	4b0b      	ldr	r3, [pc, #44]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801538a:	430a      	orrs	r2, r1
 801538c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2280      	movs	r2, #128	@ 0x80
 8015394:	4013      	ands	r3, r2
 8015396:	d009      	beq.n	80153ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015398:	4b07      	ldr	r3, [pc, #28]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801539a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801539c:	4a10      	ldr	r2, [pc, #64]	@ (80153e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801539e:	4013      	ands	r3, r2
 80153a0:	0019      	movs	r1, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	69da      	ldr	r2, [r3, #28]
 80153a6:	4b04      	ldr	r3, [pc, #16]	@ (80153b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153a8:	430a      	orrs	r2, r1
 80153aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80153ac:	2300      	movs	r3, #0
}
 80153ae:	0018      	movs	r0, r3
 80153b0:	46bd      	mov	sp, r7
 80153b2:	b006      	add	sp, #24
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	46c0      	nop			@ (mov r8, r8)
 80153b8:	40021000 	.word	0x40021000
 80153bc:	40007000 	.word	0x40007000
 80153c0:	fffcffff 	.word	0xfffcffff
 80153c4:	fff7ffff 	.word	0xfff7ffff
 80153c8:	00001388 	.word	0x00001388
 80153cc:	ffcfffff 	.word	0xffcfffff
 80153d0:	efffffff 	.word	0xefffffff
 80153d4:	fffff3ff 	.word	0xfffff3ff
 80153d8:	ffffcfff 	.word	0xffffcfff
 80153dc:	fbffffff 	.word	0xfbffffff
 80153e0:	fff3ffff 	.word	0xfff3ffff

080153e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80153e4:	b5b0      	push	{r4, r5, r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80153ec:	230f      	movs	r3, #15
 80153ee:	18fb      	adds	r3, r7, r3
 80153f0:	2201      	movs	r2, #1
 80153f2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d101      	bne.n	80153fe <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80153fa:	2301      	movs	r3, #1
 80153fc:	e088      	b.n	8015510 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	2221      	movs	r2, #33	@ 0x21
 8015402:	5c9b      	ldrb	r3, [r3, r2]
 8015404:	b2db      	uxtb	r3, r3
 8015406:	2b00      	cmp	r3, #0
 8015408:	d107      	bne.n	801541a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2220      	movs	r2, #32
 801540e:	2100      	movs	r1, #0
 8015410:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	0018      	movs	r0, r3
 8015416:	f7f3 fbb1 	bl	8008b7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2221      	movs	r2, #33	@ 0x21
 801541e:	2102      	movs	r1, #2
 8015420:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	68db      	ldr	r3, [r3, #12]
 8015428:	2210      	movs	r2, #16
 801542a:	4013      	ands	r3, r2
 801542c:	2b10      	cmp	r3, #16
 801542e:	d05f      	beq.n	80154f0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	22ca      	movs	r2, #202	@ 0xca
 8015436:	625a      	str	r2, [r3, #36]	@ 0x24
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	2253      	movs	r2, #83	@ 0x53
 801543e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015440:	250f      	movs	r5, #15
 8015442:	197c      	adds	r4, r7, r5
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	0018      	movs	r0, r3
 8015448:	f000 fa7c 	bl	8015944 <RTC_EnterInitMode>
 801544c:	0003      	movs	r3, r0
 801544e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015450:	0028      	movs	r0, r5
 8015452:	183b      	adds	r3, r7, r0
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d12c      	bne.n	80154b4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	689a      	ldr	r2, [r3, #8]
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	492c      	ldr	r1, [pc, #176]	@ (8015518 <HAL_RTC_Init+0x134>)
 8015466:	400a      	ands	r2, r1
 8015468:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	6899      	ldr	r1, [r3, #8]
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	685a      	ldr	r2, [r3, #4]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	691b      	ldr	r3, [r3, #16]
 8015478:	431a      	orrs	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	699b      	ldr	r3, [r3, #24]
 801547e:	431a      	orrs	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	430a      	orrs	r2, r1
 8015486:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	687a      	ldr	r2, [r7, #4]
 801548e:	68d2      	ldr	r2, [r2, #12]
 8015490:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	6919      	ldr	r1, [r3, #16]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	689b      	ldr	r3, [r3, #8]
 801549c:	041a      	lsls	r2, r3, #16
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	430a      	orrs	r2, r1
 80154a4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80154a6:	183c      	adds	r4, r7, r0
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	0018      	movs	r0, r3
 80154ac:	f000 fa8e 	bl	80159cc <RTC_ExitInitMode>
 80154b0:	0003      	movs	r3, r0
 80154b2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80154b4:	230f      	movs	r3, #15
 80154b6:	18fb      	adds	r3, r7, r3
 80154b8:	781b      	ldrb	r3, [r3, #0]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d113      	bne.n	80154e6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2103      	movs	r1, #3
 80154ca:	438a      	bics	r2, r1
 80154cc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	69da      	ldr	r2, [r3, #28]
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	695b      	ldr	r3, [r3, #20]
 80154dc:	431a      	orrs	r2, r3
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	430a      	orrs	r2, r1
 80154e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	22ff      	movs	r2, #255	@ 0xff
 80154ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80154ee:	e003      	b.n	80154f8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80154f0:	230f      	movs	r3, #15
 80154f2:	18fb      	adds	r3, r7, r3
 80154f4:	2200      	movs	r2, #0
 80154f6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80154f8:	230f      	movs	r3, #15
 80154fa:	18fb      	adds	r3, r7, r3
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d103      	bne.n	801550a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2221      	movs	r2, #33	@ 0x21
 8015506:	2101      	movs	r1, #1
 8015508:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801550a:	230f      	movs	r3, #15
 801550c:	18fb      	adds	r3, r7, r3
 801550e:	781b      	ldrb	r3, [r3, #0]
}
 8015510:	0018      	movs	r0, r3
 8015512:	46bd      	mov	sp, r7
 8015514:	b004      	add	sp, #16
 8015516:	bdb0      	pop	{r4, r5, r7, pc}
 8015518:	ff8fffbf 	.word	0xff8fffbf

0801551c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801551c:	b5b0      	push	{r4, r5, r7, lr}
 801551e:	b086      	sub	sp, #24
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015528:	2300      	movs	r3, #0
 801552a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	2220      	movs	r2, #32
 8015530:	5c9b      	ldrb	r3, [r3, r2]
 8015532:	2b01      	cmp	r3, #1
 8015534:	d101      	bne.n	801553a <HAL_RTC_SetTime+0x1e>
 8015536:	2302      	movs	r3, #2
 8015538:	e092      	b.n	8015660 <HAL_RTC_SetTime+0x144>
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	2220      	movs	r2, #32
 801553e:	2101      	movs	r1, #1
 8015540:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	2221      	movs	r2, #33	@ 0x21
 8015546:	2102      	movs	r1, #2
 8015548:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d125      	bne.n	801559c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	689b      	ldr	r3, [r3, #8]
 8015556:	2240      	movs	r2, #64	@ 0x40
 8015558:	4013      	ands	r3, r2
 801555a:	d102      	bne.n	8015562 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	2200      	movs	r2, #0
 8015560:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	781b      	ldrb	r3, [r3, #0]
 8015566:	0018      	movs	r0, r3
 8015568:	f000 fa5a 	bl	8015a20 <RTC_ByteToBcd2>
 801556c:	0003      	movs	r3, r0
 801556e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	785b      	ldrb	r3, [r3, #1]
 8015574:	0018      	movs	r0, r3
 8015576:	f000 fa53 	bl	8015a20 <RTC_ByteToBcd2>
 801557a:	0003      	movs	r3, r0
 801557c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801557e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	789b      	ldrb	r3, [r3, #2]
 8015584:	0018      	movs	r0, r3
 8015586:	f000 fa4b 	bl	8015a20 <RTC_ByteToBcd2>
 801558a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801558c:	0022      	movs	r2, r4
 801558e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	78db      	ldrb	r3, [r3, #3]
 8015594:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015596:	4313      	orrs	r3, r2
 8015598:	617b      	str	r3, [r7, #20]
 801559a:	e017      	b.n	80155cc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	689b      	ldr	r3, [r3, #8]
 80155a2:	2240      	movs	r2, #64	@ 0x40
 80155a4:	4013      	ands	r3, r2
 80155a6:	d102      	bne.n	80155ae <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	2200      	movs	r2, #0
 80155ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	781b      	ldrb	r3, [r3, #0]
 80155b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	785b      	ldrb	r3, [r3, #1]
 80155b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80155ba:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80155bc:	68ba      	ldr	r2, [r7, #8]
 80155be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80155c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	78db      	ldrb	r3, [r3, #3]
 80155c6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80155c8:	4313      	orrs	r3, r2
 80155ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	22ca      	movs	r2, #202	@ 0xca
 80155d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	2253      	movs	r2, #83	@ 0x53
 80155da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80155dc:	2513      	movs	r5, #19
 80155de:	197c      	adds	r4, r7, r5
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	0018      	movs	r0, r3
 80155e4:	f000 f9ae 	bl	8015944 <RTC_EnterInitMode>
 80155e8:	0003      	movs	r3, r0
 80155ea:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80155ec:	0028      	movs	r0, r5
 80155ee:	183b      	adds	r3, r7, r0
 80155f0:	781b      	ldrb	r3, [r3, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d120      	bne.n	8015638 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	697a      	ldr	r2, [r7, #20]
 80155fc:	491a      	ldr	r1, [pc, #104]	@ (8015668 <HAL_RTC_SetTime+0x14c>)
 80155fe:	400a      	ands	r2, r1
 8015600:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	689a      	ldr	r2, [r3, #8]
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	4917      	ldr	r1, [pc, #92]	@ (801566c <HAL_RTC_SetTime+0x150>)
 801560e:	400a      	ands	r2, r1
 8015610:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	6899      	ldr	r1, [r3, #8]
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	68da      	ldr	r2, [r3, #12]
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	691b      	ldr	r3, [r3, #16]
 8015620:	431a      	orrs	r2, r3
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	430a      	orrs	r2, r1
 8015628:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801562a:	183c      	adds	r4, r7, r0
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	0018      	movs	r0, r3
 8015630:	f000 f9cc 	bl	80159cc <RTC_ExitInitMode>
 8015634:	0003      	movs	r3, r0
 8015636:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015638:	2313      	movs	r3, #19
 801563a:	18fb      	adds	r3, r7, r3
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d103      	bne.n	801564a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2221      	movs	r2, #33	@ 0x21
 8015646:	2101      	movs	r1, #1
 8015648:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	22ff      	movs	r2, #255	@ 0xff
 8015650:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2220      	movs	r2, #32
 8015656:	2100      	movs	r1, #0
 8015658:	5499      	strb	r1, [r3, r2]

  return status;
 801565a:	2313      	movs	r3, #19
 801565c:	18fb      	adds	r3, r7, r3
 801565e:	781b      	ldrb	r3, [r3, #0]
}
 8015660:	0018      	movs	r0, r3
 8015662:	46bd      	mov	sp, r7
 8015664:	b006      	add	sp, #24
 8015666:	bdb0      	pop	{r4, r5, r7, pc}
 8015668:	007f7f7f 	.word	0x007f7f7f
 801566c:	fffbffff 	.word	0xfffbffff

08015670 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b086      	sub	sp, #24
 8015674:	af00      	add	r7, sp, #0
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801567c:	2300      	movs	r3, #0
 801567e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	691b      	ldr	r3, [r3, #16]
 8015690:	045b      	lsls	r3, r3, #17
 8015692:	0c5a      	lsrs	r2, r3, #17
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	4a22      	ldr	r2, [pc, #136]	@ (8015728 <HAL_RTC_GetTime+0xb8>)
 80156a0:	4013      	ands	r3, r2
 80156a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	0c1b      	lsrs	r3, r3, #16
 80156a8:	b2db      	uxtb	r3, r3
 80156aa:	223f      	movs	r2, #63	@ 0x3f
 80156ac:	4013      	ands	r3, r2
 80156ae:	b2da      	uxtb	r2, r3
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80156b4:	697b      	ldr	r3, [r7, #20]
 80156b6:	0a1b      	lsrs	r3, r3, #8
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	227f      	movs	r2, #127	@ 0x7f
 80156bc:	4013      	ands	r3, r2
 80156be:	b2da      	uxtb	r2, r3
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	227f      	movs	r2, #127	@ 0x7f
 80156ca:	4013      	ands	r3, r2
 80156cc:	b2da      	uxtb	r2, r3
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	0d9b      	lsrs	r3, r3, #22
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	2201      	movs	r2, #1
 80156da:	4013      	ands	r3, r2
 80156dc:	b2da      	uxtb	r2, r3
 80156de:	68bb      	ldr	r3, [r7, #8]
 80156e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d11a      	bne.n	801571e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	0018      	movs	r0, r3
 80156ee:	f000 f9b8 	bl	8015a62 <RTC_Bcd2ToByte>
 80156f2:	0003      	movs	r3, r0
 80156f4:	001a      	movs	r2, r3
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	785b      	ldrb	r3, [r3, #1]
 80156fe:	0018      	movs	r0, r3
 8015700:	f000 f9af 	bl	8015a62 <RTC_Bcd2ToByte>
 8015704:	0003      	movs	r3, r0
 8015706:	001a      	movs	r2, r3
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	789b      	ldrb	r3, [r3, #2]
 8015710:	0018      	movs	r0, r3
 8015712:	f000 f9a6 	bl	8015a62 <RTC_Bcd2ToByte>
 8015716:	0003      	movs	r3, r0
 8015718:	001a      	movs	r2, r3
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801571e:	2300      	movs	r3, #0
}
 8015720:	0018      	movs	r0, r3
 8015722:	46bd      	mov	sp, r7
 8015724:	b006      	add	sp, #24
 8015726:	bd80      	pop	{r7, pc}
 8015728:	007f7f7f 	.word	0x007f7f7f

0801572c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801572c:	b5b0      	push	{r4, r5, r7, lr}
 801572e:	b086      	sub	sp, #24
 8015730:	af00      	add	r7, sp, #0
 8015732:	60f8      	str	r0, [r7, #12]
 8015734:	60b9      	str	r1, [r7, #8]
 8015736:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015738:	2300      	movs	r3, #0
 801573a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	2220      	movs	r2, #32
 8015740:	5c9b      	ldrb	r3, [r3, r2]
 8015742:	2b01      	cmp	r3, #1
 8015744:	d101      	bne.n	801574a <HAL_RTC_SetDate+0x1e>
 8015746:	2302      	movs	r3, #2
 8015748:	e07e      	b.n	8015848 <HAL_RTC_SetDate+0x11c>
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	2220      	movs	r2, #32
 801574e:	2101      	movs	r1, #1
 8015750:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	2221      	movs	r2, #33	@ 0x21
 8015756:	2102      	movs	r1, #2
 8015758:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d10e      	bne.n	801577e <HAL_RTC_SetDate+0x52>
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	785b      	ldrb	r3, [r3, #1]
 8015764:	001a      	movs	r2, r3
 8015766:	2310      	movs	r3, #16
 8015768:	4013      	ands	r3, r2
 801576a:	d008      	beq.n	801577e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	785b      	ldrb	r3, [r3, #1]
 8015770:	2210      	movs	r2, #16
 8015772:	4393      	bics	r3, r2
 8015774:	b2db      	uxtb	r3, r3
 8015776:	330a      	adds	r3, #10
 8015778:	b2da      	uxtb	r2, r3
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d11c      	bne.n	80157be <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	78db      	ldrb	r3, [r3, #3]
 8015788:	0018      	movs	r0, r3
 801578a:	f000 f949 	bl	8015a20 <RTC_ByteToBcd2>
 801578e:	0003      	movs	r3, r0
 8015790:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	785b      	ldrb	r3, [r3, #1]
 8015796:	0018      	movs	r0, r3
 8015798:	f000 f942 	bl	8015a20 <RTC_ByteToBcd2>
 801579c:	0003      	movs	r3, r0
 801579e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80157a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	789b      	ldrb	r3, [r3, #2]
 80157a6:	0018      	movs	r0, r3
 80157a8:	f000 f93a 	bl	8015a20 <RTC_ByteToBcd2>
 80157ac:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80157ae:	0022      	movs	r2, r4
 80157b0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80157b8:	4313      	orrs	r3, r2
 80157ba:	617b      	str	r3, [r7, #20]
 80157bc:	e00e      	b.n	80157dc <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	78db      	ldrb	r3, [r3, #3]
 80157c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	785b      	ldrb	r3, [r3, #1]
 80157c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80157ca:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80157cc:	68ba      	ldr	r2, [r7, #8]
 80157ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80157d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80157d8:	4313      	orrs	r3, r2
 80157da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	22ca      	movs	r2, #202	@ 0xca
 80157e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	2253      	movs	r2, #83	@ 0x53
 80157ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80157ec:	2513      	movs	r5, #19
 80157ee:	197c      	adds	r4, r7, r5
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	0018      	movs	r0, r3
 80157f4:	f000 f8a6 	bl	8015944 <RTC_EnterInitMode>
 80157f8:	0003      	movs	r3, r0
 80157fa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80157fc:	0028      	movs	r0, r5
 80157fe:	183b      	adds	r3, r7, r0
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d10c      	bne.n	8015820 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	697a      	ldr	r2, [r7, #20]
 801580c:	4910      	ldr	r1, [pc, #64]	@ (8015850 <HAL_RTC_SetDate+0x124>)
 801580e:	400a      	ands	r2, r1
 8015810:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015812:	183c      	adds	r4, r7, r0
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	0018      	movs	r0, r3
 8015818:	f000 f8d8 	bl	80159cc <RTC_ExitInitMode>
 801581c:	0003      	movs	r3, r0
 801581e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015820:	2313      	movs	r3, #19
 8015822:	18fb      	adds	r3, r7, r3
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d103      	bne.n	8015832 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	2221      	movs	r2, #33	@ 0x21
 801582e:	2101      	movs	r1, #1
 8015830:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	22ff      	movs	r2, #255	@ 0xff
 8015838:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	2220      	movs	r2, #32
 801583e:	2100      	movs	r1, #0
 8015840:	5499      	strb	r1, [r3, r2]

  return status;
 8015842:	2313      	movs	r3, #19
 8015844:	18fb      	adds	r3, r7, r3
 8015846:	781b      	ldrb	r3, [r3, #0]
}
 8015848:	0018      	movs	r0, r3
 801584a:	46bd      	mov	sp, r7
 801584c:	b006      	add	sp, #24
 801584e:	bdb0      	pop	{r4, r5, r7, pc}
 8015850:	00ffff3f 	.word	0x00ffff3f

08015854 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b086      	sub	sp, #24
 8015858:	af00      	add	r7, sp, #0
 801585a:	60f8      	str	r0, [r7, #12]
 801585c:	60b9      	str	r1, [r7, #8]
 801585e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015860:	2300      	movs	r3, #0
 8015862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	685b      	ldr	r3, [r3, #4]
 801586a:	4a21      	ldr	r2, [pc, #132]	@ (80158f0 <HAL_RTC_GetDate+0x9c>)
 801586c:	4013      	ands	r3, r2
 801586e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	0c1b      	lsrs	r3, r3, #16
 8015874:	b2da      	uxtb	r2, r3
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801587a:	697b      	ldr	r3, [r7, #20]
 801587c:	0a1b      	lsrs	r3, r3, #8
 801587e:	b2db      	uxtb	r3, r3
 8015880:	221f      	movs	r2, #31
 8015882:	4013      	ands	r3, r2
 8015884:	b2da      	uxtb	r2, r3
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	b2db      	uxtb	r3, r3
 801588e:	223f      	movs	r2, #63	@ 0x3f
 8015890:	4013      	ands	r3, r2
 8015892:	b2da      	uxtb	r2, r3
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	0b5b      	lsrs	r3, r3, #13
 801589c:	b2db      	uxtb	r3, r3
 801589e:	2207      	movs	r2, #7
 80158a0:	4013      	ands	r3, r2
 80158a2:	b2da      	uxtb	r2, r3
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d11a      	bne.n	80158e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	78db      	ldrb	r3, [r3, #3]
 80158b2:	0018      	movs	r0, r3
 80158b4:	f000 f8d5 	bl	8015a62 <RTC_Bcd2ToByte>
 80158b8:	0003      	movs	r3, r0
 80158ba:	001a      	movs	r2, r3
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	785b      	ldrb	r3, [r3, #1]
 80158c4:	0018      	movs	r0, r3
 80158c6:	f000 f8cc 	bl	8015a62 <RTC_Bcd2ToByte>
 80158ca:	0003      	movs	r3, r0
 80158cc:	001a      	movs	r2, r3
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	789b      	ldrb	r3, [r3, #2]
 80158d6:	0018      	movs	r0, r3
 80158d8:	f000 f8c3 	bl	8015a62 <RTC_Bcd2ToByte>
 80158dc:	0003      	movs	r3, r0
 80158de:	001a      	movs	r2, r3
 80158e0:	68bb      	ldr	r3, [r7, #8]
 80158e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80158e4:	2300      	movs	r3, #0
}
 80158e6:	0018      	movs	r0, r3
 80158e8:	46bd      	mov	sp, r7
 80158ea:	b006      	add	sp, #24
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	46c0      	nop			@ (mov r8, r8)
 80158f0:	00ffff3f 	.word	0x00ffff3f

080158f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80158fc:	2300      	movs	r3, #0
 80158fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	4a0e      	ldr	r2, [pc, #56]	@ (8015940 <HAL_RTC_WaitForSynchro+0x4c>)
 8015906:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015908:	f7f8 fcfe 	bl	800e308 <HAL_GetTick>
 801590c:	0003      	movs	r3, r0
 801590e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015910:	e00a      	b.n	8015928 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015912:	f7f8 fcf9 	bl	800e308 <HAL_GetTick>
 8015916:	0002      	movs	r2, r0
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	1ad2      	subs	r2, r2, r3
 801591c:	23fa      	movs	r3, #250	@ 0xfa
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	429a      	cmp	r2, r3
 8015922:	d901      	bls.n	8015928 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8015924:	2303      	movs	r3, #3
 8015926:	e006      	b.n	8015936 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	68db      	ldr	r3, [r3, #12]
 801592e:	2220      	movs	r2, #32
 8015930:	4013      	ands	r3, r2
 8015932:	d0ee      	beq.n	8015912 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8015934:	2300      	movs	r3, #0
}
 8015936:	0018      	movs	r0, r3
 8015938:	46bd      	mov	sp, r7
 801593a:	b004      	add	sp, #16
 801593c:	bd80      	pop	{r7, pc}
 801593e:	46c0      	nop			@ (mov r8, r8)
 8015940:	0001ff5f 	.word	0x0001ff5f

08015944 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b084      	sub	sp, #16
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801594c:	2300      	movs	r3, #0
 801594e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8015950:	230f      	movs	r3, #15
 8015952:	18fb      	adds	r3, r7, r3
 8015954:	2200      	movs	r2, #0
 8015956:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	68db      	ldr	r3, [r3, #12]
 801595e:	2240      	movs	r2, #64	@ 0x40
 8015960:	4013      	ands	r3, r2
 8015962:	d12c      	bne.n	80159be <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	68da      	ldr	r2, [r3, #12]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2180      	movs	r1, #128	@ 0x80
 8015970:	430a      	orrs	r2, r1
 8015972:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015974:	f7f8 fcc8 	bl	800e308 <HAL_GetTick>
 8015978:	0003      	movs	r3, r0
 801597a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801597c:	e014      	b.n	80159a8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801597e:	f7f8 fcc3 	bl	800e308 <HAL_GetTick>
 8015982:	0002      	movs	r2, r0
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	1ad2      	subs	r2, r2, r3
 8015988:	200f      	movs	r0, #15
 801598a:	183b      	adds	r3, r7, r0
 801598c:	1839      	adds	r1, r7, r0
 801598e:	7809      	ldrb	r1, [r1, #0]
 8015990:	7019      	strb	r1, [r3, #0]
 8015992:	23fa      	movs	r3, #250	@ 0xfa
 8015994:	009b      	lsls	r3, r3, #2
 8015996:	429a      	cmp	r2, r3
 8015998:	d906      	bls.n	80159a8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	2221      	movs	r2, #33	@ 0x21
 801599e:	2104      	movs	r1, #4
 80159a0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80159a2:	183b      	adds	r3, r7, r0
 80159a4:	2201      	movs	r2, #1
 80159a6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	68db      	ldr	r3, [r3, #12]
 80159ae:	2240      	movs	r2, #64	@ 0x40
 80159b0:	4013      	ands	r3, r2
 80159b2:	d104      	bne.n	80159be <RTC_EnterInitMode+0x7a>
 80159b4:	230f      	movs	r3, #15
 80159b6:	18fb      	adds	r3, r7, r3
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d1df      	bne.n	801597e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80159be:	230f      	movs	r3, #15
 80159c0:	18fb      	adds	r3, r7, r3
 80159c2:	781b      	ldrb	r3, [r3, #0]
}
 80159c4:	0018      	movs	r0, r3
 80159c6:	46bd      	mov	sp, r7
 80159c8:	b004      	add	sp, #16
 80159ca:	bd80      	pop	{r7, pc}

080159cc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80159cc:	b590      	push	{r4, r7, lr}
 80159ce:	b085      	sub	sp, #20
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80159d4:	240f      	movs	r4, #15
 80159d6:	193b      	adds	r3, r7, r4
 80159d8:	2200      	movs	r2, #0
 80159da:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	68da      	ldr	r2, [r3, #12]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	2180      	movs	r1, #128	@ 0x80
 80159e8:	438a      	bics	r2, r1
 80159ea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	689b      	ldr	r3, [r3, #8]
 80159f2:	2220      	movs	r2, #32
 80159f4:	4013      	ands	r3, r2
 80159f6:	d10c      	bne.n	8015a12 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	0018      	movs	r0, r3
 80159fc:	f7ff ff7a 	bl	80158f4 <HAL_RTC_WaitForSynchro>
 8015a00:	1e03      	subs	r3, r0, #0
 8015a02:	d006      	beq.n	8015a12 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2221      	movs	r2, #33	@ 0x21
 8015a08:	2104      	movs	r1, #4
 8015a0a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8015a0c:	193b      	adds	r3, r7, r4
 8015a0e:	2201      	movs	r2, #1
 8015a10:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8015a12:	230f      	movs	r3, #15
 8015a14:	18fb      	adds	r3, r7, r3
 8015a16:	781b      	ldrb	r3, [r3, #0]
}
 8015a18:	0018      	movs	r0, r3
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	b005      	add	sp, #20
 8015a1e:	bd90      	pop	{r4, r7, pc}

08015a20 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	0002      	movs	r2, r0
 8015a28:	1dfb      	adds	r3, r7, #7
 8015a2a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8015a30:	e007      	b.n	8015a42 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	3301      	adds	r3, #1
 8015a36:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8015a38:	1dfb      	adds	r3, r7, #7
 8015a3a:	1dfa      	adds	r2, r7, #7
 8015a3c:	7812      	ldrb	r2, [r2, #0]
 8015a3e:	3a0a      	subs	r2, #10
 8015a40:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8015a42:	1dfb      	adds	r3, r7, #7
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	2b09      	cmp	r3, #9
 8015a48:	d8f3      	bhi.n	8015a32 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	b2db      	uxtb	r3, r3
 8015a4e:	011b      	lsls	r3, r3, #4
 8015a50:	b2da      	uxtb	r2, r3
 8015a52:	1dfb      	adds	r3, r7, #7
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	4313      	orrs	r3, r2
 8015a58:	b2db      	uxtb	r3, r3
}
 8015a5a:	0018      	movs	r0, r3
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	b004      	add	sp, #16
 8015a60:	bd80      	pop	{r7, pc}

08015a62 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8015a62:	b580      	push	{r7, lr}
 8015a64:	b084      	sub	sp, #16
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	0002      	movs	r2, r0
 8015a6a:	1dfb      	adds	r3, r7, #7
 8015a6c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8015a72:	1dfb      	adds	r3, r7, #7
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	091b      	lsrs	r3, r3, #4
 8015a78:	b2db      	uxtb	r3, r3
 8015a7a:	001a      	movs	r2, r3
 8015a7c:	0013      	movs	r3, r2
 8015a7e:	009b      	lsls	r3, r3, #2
 8015a80:	189b      	adds	r3, r3, r2
 8015a82:	005b      	lsls	r3, r3, #1
 8015a84:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	b2da      	uxtb	r2, r3
 8015a8a:	1dfb      	adds	r3, r7, #7
 8015a8c:	781b      	ldrb	r3, [r3, #0]
 8015a8e:	210f      	movs	r1, #15
 8015a90:	400b      	ands	r3, r1
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	18d3      	adds	r3, r2, r3
 8015a96:	b2db      	uxtb	r3, r3
}
 8015a98:	0018      	movs	r0, r3
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	b004      	add	sp, #16
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	60b9      	str	r1, [r7, #8]
 8015aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015aac:	4b64      	ldr	r3, [pc, #400]	@ (8015c40 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	22fa      	movs	r2, #250	@ 0xfa
 8015ab2:	01d1      	lsls	r1, r2, #7
 8015ab4:	0018      	movs	r0, r3
 8015ab6:	f7ea fb75 	bl	80001a4 <__udivsi3>
 8015aba:	0003      	movs	r3, r0
 8015abc:	001a      	movs	r2, r3
 8015abe:	0013      	movs	r3, r2
 8015ac0:	015b      	lsls	r3, r3, #5
 8015ac2:	1a9b      	subs	r3, r3, r2
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	189b      	adds	r3, r3, r2
 8015ac8:	00db      	lsls	r3, r3, #3
 8015aca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	2220      	movs	r2, #32
 8015ad0:	5c9b      	ldrb	r3, [r3, r2]
 8015ad2:	2b01      	cmp	r3, #1
 8015ad4:	d101      	bne.n	8015ada <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8015ad6:	2302      	movs	r3, #2
 8015ad8:	e0ad      	b.n	8015c36 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	2220      	movs	r2, #32
 8015ade:	2101      	movs	r1, #1
 8015ae0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	2221      	movs	r2, #33	@ 0x21
 8015ae6:	2102      	movs	r1, #2
 8015ae8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	22ca      	movs	r2, #202	@ 0xca
 8015af0:	625a      	str	r2, [r3, #36]	@ 0x24
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	2253      	movs	r2, #83	@ 0x53
 8015af8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	689a      	ldr	r2, [r3, #8]
 8015b00:	2380      	movs	r3, #128	@ 0x80
 8015b02:	00db      	lsls	r3, r3, #3
 8015b04:	4013      	ands	r3, r2
 8015b06:	d019      	beq.n	8015b3c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8015b08:	697b      	ldr	r3, [r7, #20]
 8015b0a:	3b01      	subs	r3, #1
 8015b0c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8015b0e:	697b      	ldr	r3, [r7, #20]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d10d      	bne.n	8015b30 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	22ff      	movs	r2, #255	@ 0xff
 8015b1a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	2221      	movs	r2, #33	@ 0x21
 8015b20:	2103      	movs	r1, #3
 8015b22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	2220      	movs	r2, #32
 8015b28:	2100      	movs	r1, #0
 8015b2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015b2c:	2303      	movs	r3, #3
 8015b2e:	e082      	b.n	8015c36 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	68db      	ldr	r3, [r3, #12]
 8015b36:	2204      	movs	r2, #4
 8015b38:	4013      	ands	r3, r2
 8015b3a:	d1e5      	bne.n	8015b08 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	689a      	ldr	r2, [r3, #8]
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	493f      	ldr	r1, [pc, #252]	@ (8015c44 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8015b48:	400a      	ands	r2, r1
 8015b4a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	68db      	ldr	r3, [r3, #12]
 8015b52:	22ff      	movs	r2, #255	@ 0xff
 8015b54:	401a      	ands	r2, r3
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	493b      	ldr	r1, [pc, #236]	@ (8015c48 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8015b5c:	430a      	orrs	r2, r1
 8015b5e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015b60:	4b37      	ldr	r3, [pc, #220]	@ (8015c40 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	22fa      	movs	r2, #250	@ 0xfa
 8015b66:	01d1      	lsls	r1, r2, #7
 8015b68:	0018      	movs	r0, r3
 8015b6a:	f7ea fb1b 	bl	80001a4 <__udivsi3>
 8015b6e:	0003      	movs	r3, r0
 8015b70:	001a      	movs	r2, r3
 8015b72:	0013      	movs	r3, r2
 8015b74:	015b      	lsls	r3, r3, #5
 8015b76:	1a9b      	subs	r3, r3, r2
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	189b      	adds	r3, r3, r2
 8015b7c:	00db      	lsls	r3, r3, #3
 8015b7e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	3b01      	subs	r3, #1
 8015b84:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d10d      	bne.n	8015ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	22ff      	movs	r2, #255	@ 0xff
 8015b92:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	2221      	movs	r2, #33	@ 0x21
 8015b98:	2103      	movs	r1, #3
 8015b9a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	2220      	movs	r2, #32
 8015ba0:	2100      	movs	r1, #0
 8015ba2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015ba4:	2303      	movs	r3, #3
 8015ba6:	e046      	b.n	8015c36 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	68db      	ldr	r3, [r3, #12]
 8015bae:	2204      	movs	r2, #4
 8015bb0:	4013      	ands	r3, r2
 8015bb2:	d0e5      	beq.n	8015b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	689a      	ldr	r2, [r3, #8]
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2107      	movs	r1, #7
 8015bc0:	438a      	bics	r2, r1
 8015bc2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	6899      	ldr	r1, [r3, #8]
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	687a      	ldr	r2, [r7, #4]
 8015bd0:	430a      	orrs	r2, r1
 8015bd2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	68ba      	ldr	r2, [r7, #8]
 8015bda:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8015bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8015c4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015bde:	681a      	ldr	r2, [r3, #0]
 8015be0:	4b1a      	ldr	r3, [pc, #104]	@ (8015c4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015be2:	2180      	movs	r1, #128	@ 0x80
 8015be4:	0349      	lsls	r1, r1, #13
 8015be6:	430a      	orrs	r2, r1
 8015be8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8015bea:	4b18      	ldr	r3, [pc, #96]	@ (8015c4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015bec:	689a      	ldr	r2, [r3, #8]
 8015bee:	4b17      	ldr	r3, [pc, #92]	@ (8015c4c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015bf0:	2180      	movs	r1, #128	@ 0x80
 8015bf2:	0349      	lsls	r1, r1, #13
 8015bf4:	430a      	orrs	r2, r1
 8015bf6:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	689a      	ldr	r2, [r3, #8]
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	2180      	movs	r1, #128	@ 0x80
 8015c04:	01c9      	lsls	r1, r1, #7
 8015c06:	430a      	orrs	r2, r1
 8015c08:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	689a      	ldr	r2, [r3, #8]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	2180      	movs	r1, #128	@ 0x80
 8015c16:	00c9      	lsls	r1, r1, #3
 8015c18:	430a      	orrs	r2, r1
 8015c1a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	22ff      	movs	r2, #255	@ 0xff
 8015c22:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	2221      	movs	r2, #33	@ 0x21
 8015c28:	2101      	movs	r1, #1
 8015c2a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	2220      	movs	r2, #32
 8015c30:	2100      	movs	r1, #0
 8015c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015c34:	2300      	movs	r3, #0
}
 8015c36:	0018      	movs	r0, r3
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	b006      	add	sp, #24
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	46c0      	nop			@ (mov r8, r8)
 8015c40:	200000c8 	.word	0x200000c8
 8015c44:	fffffbff 	.word	0xfffffbff
 8015c48:	fffffb7f 	.word	0xfffffb7f
 8015c4c:	40010400 	.word	0x40010400

08015c50 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2220      	movs	r2, #32
 8015c60:	5c9b      	ldrb	r3, [r3, r2]
 8015c62:	2b01      	cmp	r3, #1
 8015c64:	d101      	bne.n	8015c6a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8015c66:	2302      	movs	r3, #2
 8015c68:	e04e      	b.n	8015d08 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2220      	movs	r2, #32
 8015c6e:	2101      	movs	r1, #1
 8015c70:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2221      	movs	r2, #33	@ 0x21
 8015c76:	2102      	movs	r1, #2
 8015c78:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	22ca      	movs	r2, #202	@ 0xca
 8015c80:	625a      	str	r2, [r3, #36]	@ 0x24
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	2253      	movs	r2, #83	@ 0x53
 8015c88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	689a      	ldr	r2, [r3, #8]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	491e      	ldr	r1, [pc, #120]	@ (8015d10 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8015c96:	400a      	ands	r2, r1
 8015c98:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	689a      	ldr	r2, [r3, #8]
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	491b      	ldr	r1, [pc, #108]	@ (8015d14 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8015ca6:	400a      	ands	r2, r1
 8015ca8:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015caa:	f7f8 fb2d 	bl	800e308 <HAL_GetTick>
 8015cae:	0003      	movs	r3, r0
 8015cb0:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015cb2:	e016      	b.n	8015ce2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015cb4:	f7f8 fb28 	bl	800e308 <HAL_GetTick>
 8015cb8:	0002      	movs	r2, r0
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	1ad2      	subs	r2, r2, r3
 8015cbe:	23fa      	movs	r3, #250	@ 0xfa
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	d90d      	bls.n	8015ce2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	22ff      	movs	r2, #255	@ 0xff
 8015ccc:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2221      	movs	r2, #33	@ 0x21
 8015cd2:	2103      	movs	r1, #3
 8015cd4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2220      	movs	r2, #32
 8015cda:	2100      	movs	r1, #0
 8015cdc:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015cde:	2303      	movs	r3, #3
 8015ce0:	e012      	b.n	8015d08 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	68db      	ldr	r3, [r3, #12]
 8015ce8:	2204      	movs	r2, #4
 8015cea:	4013      	ands	r3, r2
 8015cec:	d0e2      	beq.n	8015cb4 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	22ff      	movs	r2, #255	@ 0xff
 8015cf4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	2221      	movs	r2, #33	@ 0x21
 8015cfa:	2101      	movs	r1, #1
 8015cfc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2220      	movs	r2, #32
 8015d02:	2100      	movs	r1, #0
 8015d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015d06:	2300      	movs	r3, #0
}
 8015d08:	0018      	movs	r0, r3
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	b004      	add	sp, #16
 8015d0e:	bd80      	pop	{r7, pc}
 8015d10:	fffffbff 	.word	0xfffffbff
 8015d14:	ffffbfff 	.word	0xffffbfff

08015d18 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8015d20:	4b13      	ldr	r3, [pc, #76]	@ (8015d70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8015d22:	2280      	movs	r2, #128	@ 0x80
 8015d24:	0352      	lsls	r2, r2, #13
 8015d26:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	689a      	ldr	r2, [r3, #8]
 8015d2e:	2380      	movs	r3, #128	@ 0x80
 8015d30:	01db      	lsls	r3, r3, #7
 8015d32:	4013      	ands	r3, r2
 8015d34:	d014      	beq.n	8015d60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	68da      	ldr	r2, [r3, #12]
 8015d3c:	2380      	movs	r3, #128	@ 0x80
 8015d3e:	00db      	lsls	r3, r3, #3
 8015d40:	4013      	ands	r3, r2
 8015d42:	d00d      	beq.n	8015d60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	68db      	ldr	r3, [r3, #12]
 8015d4a:	22ff      	movs	r2, #255	@ 0xff
 8015d4c:	401a      	ands	r2, r3
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	4908      	ldr	r1, [pc, #32]	@ (8015d74 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8015d54:	430a      	orrs	r2, r1
 8015d56:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	0018      	movs	r0, r3
 8015d5c:	f000 f80c 	bl	8015d78 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2221      	movs	r2, #33	@ 0x21
 8015d64:	2101      	movs	r1, #1
 8015d66:	5499      	strb	r1, [r3, r2]
}
 8015d68:	46c0      	nop			@ (mov r8, r8)
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	b002      	add	sp, #8
 8015d6e:	bd80      	pop	{r7, pc}
 8015d70:	40010400 	.word	0x40010400
 8015d74:	fffffb7f 	.word	0xfffffb7f

08015d78 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b082      	sub	sp, #8
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015d80:	46c0      	nop			@ (mov r8, r8)
 8015d82:	46bd      	mov	sp, r7
 8015d84:	b002      	add	sp, #8
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b086      	sub	sp, #24
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	60f8      	str	r0, [r7, #12]
 8015d90:	60b9      	str	r1, [r7, #8]
 8015d92:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8015d94:	2300      	movs	r3, #0
 8015d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	3350      	adds	r3, #80	@ 0x50
 8015d9e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8015da0:	68bb      	ldr	r3, [r7, #8]
 8015da2:	009b      	lsls	r3, r3, #2
 8015da4:	697a      	ldr	r2, [r7, #20]
 8015da6:	18d3      	adds	r3, r2, r3
 8015da8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	601a      	str	r2, [r3, #0]
}
 8015db0:	46c0      	nop			@ (mov r8, r8)
 8015db2:	46bd      	mov	sp, r7
 8015db4:	b006      	add	sp, #24
 8015db6:	bd80      	pop	{r7, pc}

08015db8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b084      	sub	sp, #16
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
 8015dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	3350      	adds	r3, #80	@ 0x50
 8015dcc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	009b      	lsls	r3, r3, #2
 8015dd2:	68fa      	ldr	r2, [r7, #12]
 8015dd4:	18d3      	adds	r3, r2, r3
 8015dd6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	681b      	ldr	r3, [r3, #0]
}
 8015ddc:	0018      	movs	r0, r3
 8015dde:	46bd      	mov	sp, r7
 8015de0:	b004      	add	sp, #16
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b082      	sub	sp, #8
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d101      	bne.n	8015df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015df2:	2301      	movs	r3, #1
 8015df4:	e032      	b.n	8015e5c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2239      	movs	r2, #57	@ 0x39
 8015dfa:	5c9b      	ldrb	r3, [r3, r2]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d107      	bne.n	8015e12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2238      	movs	r2, #56	@ 0x38
 8015e06:	2100      	movs	r1, #0
 8015e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	0018      	movs	r0, r3
 8015e0e:	f7f7 fb87 	bl	800d520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2239      	movs	r2, #57	@ 0x39
 8015e16:	2102      	movs	r1, #2
 8015e18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681a      	ldr	r2, [r3, #0]
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	3304      	adds	r3, #4
 8015e22:	0019      	movs	r1, r3
 8015e24:	0010      	movs	r0, r2
 8015e26:	f000 fa1d 	bl	8016264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	223e      	movs	r2, #62	@ 0x3e
 8015e2e:	2101      	movs	r1, #1
 8015e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	223a      	movs	r2, #58	@ 0x3a
 8015e36:	2101      	movs	r1, #1
 8015e38:	5499      	strb	r1, [r3, r2]
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	223b      	movs	r2, #59	@ 0x3b
 8015e3e:	2101      	movs	r1, #1
 8015e40:	5499      	strb	r1, [r3, r2]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	223c      	movs	r2, #60	@ 0x3c
 8015e46:	2101      	movs	r1, #1
 8015e48:	5499      	strb	r1, [r3, r2]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	223d      	movs	r2, #61	@ 0x3d
 8015e4e:	2101      	movs	r1, #1
 8015e50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2239      	movs	r2, #57	@ 0x39
 8015e56:	2101      	movs	r1, #1
 8015e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015e5a:	2300      	movs	r3, #0
}
 8015e5c:	0018      	movs	r0, r3
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	b002      	add	sp, #8
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2239      	movs	r2, #57	@ 0x39
 8015e70:	5c9b      	ldrb	r3, [r3, r2]
 8015e72:	b2db      	uxtb	r3, r3
 8015e74:	2b01      	cmp	r3, #1
 8015e76:	d001      	beq.n	8015e7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e033      	b.n	8015ee4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2239      	movs	r2, #57	@ 0x39
 8015e80:	2102      	movs	r1, #2
 8015e82:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681a      	ldr	r2, [r3, #0]
 8015e88:	2380      	movs	r3, #128	@ 0x80
 8015e8a:	05db      	lsls	r3, r3, #23
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d00e      	beq.n	8015eae <HAL_TIM_Base_Start+0x4a>
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	4a15      	ldr	r2, [pc, #84]	@ (8015eec <HAL_TIM_Base_Start+0x88>)
 8015e96:	4293      	cmp	r3, r2
 8015e98:	d009      	beq.n	8015eae <HAL_TIM_Base_Start+0x4a>
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	4a14      	ldr	r2, [pc, #80]	@ (8015ef0 <HAL_TIM_Base_Start+0x8c>)
 8015ea0:	4293      	cmp	r3, r2
 8015ea2:	d004      	beq.n	8015eae <HAL_TIM_Base_Start+0x4a>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	4a12      	ldr	r2, [pc, #72]	@ (8015ef4 <HAL_TIM_Base_Start+0x90>)
 8015eaa:	4293      	cmp	r3, r2
 8015eac:	d111      	bne.n	8015ed2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	689b      	ldr	r3, [r3, #8]
 8015eb4:	2207      	movs	r2, #7
 8015eb6:	4013      	ands	r3, r2
 8015eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	2b06      	cmp	r3, #6
 8015ebe:	d010      	beq.n	8015ee2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	681a      	ldr	r2, [r3, #0]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	2101      	movs	r1, #1
 8015ecc:	430a      	orrs	r2, r1
 8015ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015ed0:	e007      	b.n	8015ee2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	681a      	ldr	r2, [r3, #0]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2101      	movs	r1, #1
 8015ede:	430a      	orrs	r2, r1
 8015ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015ee2:	2300      	movs	r3, #0
}
 8015ee4:	0018      	movs	r0, r3
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	b004      	add	sp, #16
 8015eea:	bd80      	pop	{r7, pc}
 8015eec:	40000400 	.word	0x40000400
 8015ef0:	40010800 	.word	0x40010800
 8015ef4:	40011400 	.word	0x40011400

08015ef8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	6a1b      	ldr	r3, [r3, #32]
 8015f06:	4a0a      	ldr	r2, [pc, #40]	@ (8015f30 <HAL_TIM_Base_Stop+0x38>)
 8015f08:	4013      	ands	r3, r2
 8015f0a:	d107      	bne.n	8015f1c <HAL_TIM_Base_Stop+0x24>
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	681a      	ldr	r2, [r3, #0]
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	2101      	movs	r1, #1
 8015f18:	438a      	bics	r2, r1
 8015f1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2239      	movs	r2, #57	@ 0x39
 8015f20:	2101      	movs	r1, #1
 8015f22:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015f24:	2300      	movs	r3, #0
}
 8015f26:	0018      	movs	r0, r3
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	b002      	add	sp, #8
 8015f2c:	bd80      	pop	{r7, pc}
 8015f2e:	46c0      	nop			@ (mov r8, r8)
 8015f30:	00001111 	.word	0x00001111

08015f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b082      	sub	sp, #8
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d101      	bne.n	8015f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015f42:	2301      	movs	r3, #1
 8015f44:	e032      	b.n	8015fac <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2239      	movs	r2, #57	@ 0x39
 8015f4a:	5c9b      	ldrb	r3, [r3, r2]
 8015f4c:	b2db      	uxtb	r3, r3
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d107      	bne.n	8015f62 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	2238      	movs	r2, #56	@ 0x38
 8015f56:	2100      	movs	r1, #0
 8015f58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	0018      	movs	r0, r3
 8015f5e:	f7f7 fabb 	bl	800d4d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2239      	movs	r2, #57	@ 0x39
 8015f66:	2102      	movs	r1, #2
 8015f68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	3304      	adds	r3, #4
 8015f72:	0019      	movs	r1, r3
 8015f74:	0010      	movs	r0, r2
 8015f76:	f000 f975 	bl	8016264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	223e      	movs	r2, #62	@ 0x3e
 8015f7e:	2101      	movs	r1, #1
 8015f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	223a      	movs	r2, #58	@ 0x3a
 8015f86:	2101      	movs	r1, #1
 8015f88:	5499      	strb	r1, [r3, r2]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	223b      	movs	r2, #59	@ 0x3b
 8015f8e:	2101      	movs	r1, #1
 8015f90:	5499      	strb	r1, [r3, r2]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	223c      	movs	r2, #60	@ 0x3c
 8015f96:	2101      	movs	r1, #1
 8015f98:	5499      	strb	r1, [r3, r2]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	223d      	movs	r2, #61	@ 0x3d
 8015f9e:	2101      	movs	r1, #1
 8015fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	2239      	movs	r2, #57	@ 0x39
 8015fa6:	2101      	movs	r1, #1
 8015fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015faa:	2300      	movs	r3, #0
}
 8015fac:	0018      	movs	r0, r3
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	b002      	add	sp, #8
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
 8015fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d108      	bne.n	8015fd6 <HAL_TIM_PWM_Start+0x22>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	223a      	movs	r2, #58	@ 0x3a
 8015fc8:	5c9b      	ldrb	r3, [r3, r2]
 8015fca:	b2db      	uxtb	r3, r3
 8015fcc:	3b01      	subs	r3, #1
 8015fce:	1e5a      	subs	r2, r3, #1
 8015fd0:	4193      	sbcs	r3, r2
 8015fd2:	b2db      	uxtb	r3, r3
 8015fd4:	e01f      	b.n	8016016 <HAL_TIM_PWM_Start+0x62>
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	2b04      	cmp	r3, #4
 8015fda:	d108      	bne.n	8015fee <HAL_TIM_PWM_Start+0x3a>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	223b      	movs	r2, #59	@ 0x3b
 8015fe0:	5c9b      	ldrb	r3, [r3, r2]
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	3b01      	subs	r3, #1
 8015fe6:	1e5a      	subs	r2, r3, #1
 8015fe8:	4193      	sbcs	r3, r2
 8015fea:	b2db      	uxtb	r3, r3
 8015fec:	e013      	b.n	8016016 <HAL_TIM_PWM_Start+0x62>
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	2b08      	cmp	r3, #8
 8015ff2:	d108      	bne.n	8016006 <HAL_TIM_PWM_Start+0x52>
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	223c      	movs	r2, #60	@ 0x3c
 8015ff8:	5c9b      	ldrb	r3, [r3, r2]
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	3b01      	subs	r3, #1
 8015ffe:	1e5a      	subs	r2, r3, #1
 8016000:	4193      	sbcs	r3, r2
 8016002:	b2db      	uxtb	r3, r3
 8016004:	e007      	b.n	8016016 <HAL_TIM_PWM_Start+0x62>
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	223d      	movs	r2, #61	@ 0x3d
 801600a:	5c9b      	ldrb	r3, [r3, r2]
 801600c:	b2db      	uxtb	r3, r3
 801600e:	3b01      	subs	r3, #1
 8016010:	1e5a      	subs	r2, r3, #1
 8016012:	4193      	sbcs	r3, r2
 8016014:	b2db      	uxtb	r3, r3
 8016016:	2b00      	cmp	r3, #0
 8016018:	d001      	beq.n	801601e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801601a:	2301      	movs	r3, #1
 801601c:	e052      	b.n	80160c4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d104      	bne.n	801602e <HAL_TIM_PWM_Start+0x7a>
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	223a      	movs	r2, #58	@ 0x3a
 8016028:	2102      	movs	r1, #2
 801602a:	5499      	strb	r1, [r3, r2]
 801602c:	e013      	b.n	8016056 <HAL_TIM_PWM_Start+0xa2>
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	2b04      	cmp	r3, #4
 8016032:	d104      	bne.n	801603e <HAL_TIM_PWM_Start+0x8a>
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	223b      	movs	r2, #59	@ 0x3b
 8016038:	2102      	movs	r1, #2
 801603a:	5499      	strb	r1, [r3, r2]
 801603c:	e00b      	b.n	8016056 <HAL_TIM_PWM_Start+0xa2>
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	2b08      	cmp	r3, #8
 8016042:	d104      	bne.n	801604e <HAL_TIM_PWM_Start+0x9a>
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	223c      	movs	r2, #60	@ 0x3c
 8016048:	2102      	movs	r1, #2
 801604a:	5499      	strb	r1, [r3, r2]
 801604c:	e003      	b.n	8016056 <HAL_TIM_PWM_Start+0xa2>
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	223d      	movs	r2, #61	@ 0x3d
 8016052:	2102      	movs	r1, #2
 8016054:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	6839      	ldr	r1, [r7, #0]
 801605c:	2201      	movs	r2, #1
 801605e:	0018      	movs	r0, r3
 8016060:	f000 fa62 	bl	8016528 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681a      	ldr	r2, [r3, #0]
 8016068:	2380      	movs	r3, #128	@ 0x80
 801606a:	05db      	lsls	r3, r3, #23
 801606c:	429a      	cmp	r2, r3
 801606e:	d00e      	beq.n	801608e <HAL_TIM_PWM_Start+0xda>
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	4a15      	ldr	r2, [pc, #84]	@ (80160cc <HAL_TIM_PWM_Start+0x118>)
 8016076:	4293      	cmp	r3, r2
 8016078:	d009      	beq.n	801608e <HAL_TIM_PWM_Start+0xda>
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	4a14      	ldr	r2, [pc, #80]	@ (80160d0 <HAL_TIM_PWM_Start+0x11c>)
 8016080:	4293      	cmp	r3, r2
 8016082:	d004      	beq.n	801608e <HAL_TIM_PWM_Start+0xda>
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	4a12      	ldr	r2, [pc, #72]	@ (80160d4 <HAL_TIM_PWM_Start+0x120>)
 801608a:	4293      	cmp	r3, r2
 801608c:	d111      	bne.n	80160b2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	689b      	ldr	r3, [r3, #8]
 8016094:	2207      	movs	r2, #7
 8016096:	4013      	ands	r3, r2
 8016098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	2b06      	cmp	r3, #6
 801609e:	d010      	beq.n	80160c2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	681a      	ldr	r2, [r3, #0]
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	2101      	movs	r1, #1
 80160ac:	430a      	orrs	r2, r1
 80160ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80160b0:	e007      	b.n	80160c2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	681a      	ldr	r2, [r3, #0]
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	2101      	movs	r1, #1
 80160be:	430a      	orrs	r2, r1
 80160c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80160c2:	2300      	movs	r3, #0
}
 80160c4:	0018      	movs	r0, r3
 80160c6:	46bd      	mov	sp, r7
 80160c8:	b004      	add	sp, #16
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	40000400 	.word	0x40000400
 80160d0:	40010800 	.word	0x40010800
 80160d4:	40011400 	.word	0x40011400

080160d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b086      	sub	sp, #24
 80160dc:	af00      	add	r7, sp, #0
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	60b9      	str	r1, [r7, #8]
 80160e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80160e4:	2317      	movs	r3, #23
 80160e6:	18fb      	adds	r3, r7, r3
 80160e8:	2200      	movs	r2, #0
 80160ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2238      	movs	r2, #56	@ 0x38
 80160f0:	5c9b      	ldrb	r3, [r3, r2]
 80160f2:	2b01      	cmp	r3, #1
 80160f4:	d101      	bne.n	80160fa <HAL_TIM_PWM_ConfigChannel+0x22>
 80160f6:	2302      	movs	r3, #2
 80160f8:	e0ad      	b.n	8016256 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2238      	movs	r2, #56	@ 0x38
 80160fe:	2101      	movs	r1, #1
 8016100:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2b0c      	cmp	r3, #12
 8016106:	d100      	bne.n	801610a <HAL_TIM_PWM_ConfigChannel+0x32>
 8016108:	e076      	b.n	80161f8 <HAL_TIM_PWM_ConfigChannel+0x120>
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2b0c      	cmp	r3, #12
 801610e:	d900      	bls.n	8016112 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016110:	e095      	b.n	801623e <HAL_TIM_PWM_ConfigChannel+0x166>
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2b08      	cmp	r3, #8
 8016116:	d04e      	beq.n	80161b6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2b08      	cmp	r3, #8
 801611c:	d900      	bls.n	8016120 <HAL_TIM_PWM_ConfigChannel+0x48>
 801611e:	e08e      	b.n	801623e <HAL_TIM_PWM_ConfigChannel+0x166>
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d003      	beq.n	801612e <HAL_TIM_PWM_ConfigChannel+0x56>
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2b04      	cmp	r3, #4
 801612a:	d021      	beq.n	8016170 <HAL_TIM_PWM_ConfigChannel+0x98>
 801612c:	e087      	b.n	801623e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	68ba      	ldr	r2, [r7, #8]
 8016134:	0011      	movs	r1, r2
 8016136:	0018      	movs	r0, r3
 8016138:	f000 f8f2 	bl	8016320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	699a      	ldr	r2, [r3, #24]
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	2108      	movs	r1, #8
 8016148:	430a      	orrs	r2, r1
 801614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	699a      	ldr	r2, [r3, #24]
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	2104      	movs	r1, #4
 8016158:	438a      	bics	r2, r1
 801615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	6999      	ldr	r1, [r3, #24]
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	68da      	ldr	r2, [r3, #12]
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	430a      	orrs	r2, r1
 801616c:	619a      	str	r2, [r3, #24]
      break;
 801616e:	e06b      	b.n	8016248 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	68ba      	ldr	r2, [r7, #8]
 8016176:	0011      	movs	r1, r2
 8016178:	0018      	movs	r0, r3
 801617a:	f000 f90d 	bl	8016398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	699a      	ldr	r2, [r3, #24]
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	2180      	movs	r1, #128	@ 0x80
 801618a:	0109      	lsls	r1, r1, #4
 801618c:	430a      	orrs	r2, r1
 801618e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	699a      	ldr	r2, [r3, #24]
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	4931      	ldr	r1, [pc, #196]	@ (8016260 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801619c:	400a      	ands	r2, r1
 801619e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	6999      	ldr	r1, [r3, #24]
 80161a6:	68bb      	ldr	r3, [r7, #8]
 80161a8:	68db      	ldr	r3, [r3, #12]
 80161aa:	021a      	lsls	r2, r3, #8
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	430a      	orrs	r2, r1
 80161b2:	619a      	str	r2, [r3, #24]
      break;
 80161b4:	e048      	b.n	8016248 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	68ba      	ldr	r2, [r7, #8]
 80161bc:	0011      	movs	r1, r2
 80161be:	0018      	movs	r0, r3
 80161c0:	f000 f92c 	bl	801641c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	69da      	ldr	r2, [r3, #28]
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	2108      	movs	r1, #8
 80161d0:	430a      	orrs	r2, r1
 80161d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	69da      	ldr	r2, [r3, #28]
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	2104      	movs	r1, #4
 80161e0:	438a      	bics	r2, r1
 80161e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	69d9      	ldr	r1, [r3, #28]
 80161ea:	68bb      	ldr	r3, [r7, #8]
 80161ec:	68da      	ldr	r2, [r3, #12]
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	430a      	orrs	r2, r1
 80161f4:	61da      	str	r2, [r3, #28]
      break;
 80161f6:	e027      	b.n	8016248 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	68ba      	ldr	r2, [r7, #8]
 80161fe:	0011      	movs	r1, r2
 8016200:	0018      	movs	r0, r3
 8016202:	f000 f94b 	bl	801649c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	69da      	ldr	r2, [r3, #28]
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	2180      	movs	r1, #128	@ 0x80
 8016212:	0109      	lsls	r1, r1, #4
 8016214:	430a      	orrs	r2, r1
 8016216:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	69da      	ldr	r2, [r3, #28]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	490f      	ldr	r1, [pc, #60]	@ (8016260 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016224:	400a      	ands	r2, r1
 8016226:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	69d9      	ldr	r1, [r3, #28]
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	68db      	ldr	r3, [r3, #12]
 8016232:	021a      	lsls	r2, r3, #8
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	430a      	orrs	r2, r1
 801623a:	61da      	str	r2, [r3, #28]
      break;
 801623c:	e004      	b.n	8016248 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801623e:	2317      	movs	r3, #23
 8016240:	18fb      	adds	r3, r7, r3
 8016242:	2201      	movs	r2, #1
 8016244:	701a      	strb	r2, [r3, #0]
      break;
 8016246:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	2238      	movs	r2, #56	@ 0x38
 801624c:	2100      	movs	r1, #0
 801624e:	5499      	strb	r1, [r3, r2]

  return status;
 8016250:	2317      	movs	r3, #23
 8016252:	18fb      	adds	r3, r7, r3
 8016254:	781b      	ldrb	r3, [r3, #0]
}
 8016256:	0018      	movs	r0, r3
 8016258:	46bd      	mov	sp, r7
 801625a:	b006      	add	sp, #24
 801625c:	bd80      	pop	{r7, pc}
 801625e:	46c0      	nop			@ (mov r8, r8)
 8016260:	fffffbff 	.word	0xfffffbff

08016264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016274:	687a      	ldr	r2, [r7, #4]
 8016276:	2380      	movs	r3, #128	@ 0x80
 8016278:	05db      	lsls	r3, r3, #23
 801627a:	429a      	cmp	r2, r3
 801627c:	d00b      	beq.n	8016296 <TIM_Base_SetConfig+0x32>
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	4a23      	ldr	r2, [pc, #140]	@ (8016310 <TIM_Base_SetConfig+0xac>)
 8016282:	4293      	cmp	r3, r2
 8016284:	d007      	beq.n	8016296 <TIM_Base_SetConfig+0x32>
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	4a22      	ldr	r2, [pc, #136]	@ (8016314 <TIM_Base_SetConfig+0xb0>)
 801628a:	4293      	cmp	r3, r2
 801628c:	d003      	beq.n	8016296 <TIM_Base_SetConfig+0x32>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	4a21      	ldr	r2, [pc, #132]	@ (8016318 <TIM_Base_SetConfig+0xb4>)
 8016292:	4293      	cmp	r3, r2
 8016294:	d108      	bne.n	80162a8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2270      	movs	r2, #112	@ 0x70
 801629a:	4393      	bics	r3, r2
 801629c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	68fa      	ldr	r2, [r7, #12]
 80162a4:	4313      	orrs	r3, r2
 80162a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80162a8:	687a      	ldr	r2, [r7, #4]
 80162aa:	2380      	movs	r3, #128	@ 0x80
 80162ac:	05db      	lsls	r3, r3, #23
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d00b      	beq.n	80162ca <TIM_Base_SetConfig+0x66>
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	4a16      	ldr	r2, [pc, #88]	@ (8016310 <TIM_Base_SetConfig+0xac>)
 80162b6:	4293      	cmp	r3, r2
 80162b8:	d007      	beq.n	80162ca <TIM_Base_SetConfig+0x66>
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	4a15      	ldr	r2, [pc, #84]	@ (8016314 <TIM_Base_SetConfig+0xb0>)
 80162be:	4293      	cmp	r3, r2
 80162c0:	d003      	beq.n	80162ca <TIM_Base_SetConfig+0x66>
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	4a14      	ldr	r2, [pc, #80]	@ (8016318 <TIM_Base_SetConfig+0xb4>)
 80162c6:	4293      	cmp	r3, r2
 80162c8:	d108      	bne.n	80162dc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	4a13      	ldr	r2, [pc, #76]	@ (801631c <TIM_Base_SetConfig+0xb8>)
 80162ce:	4013      	ands	r3, r2
 80162d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80162d2:	683b      	ldr	r3, [r7, #0]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	68fa      	ldr	r2, [r7, #12]
 80162d8:	4313      	orrs	r3, r2
 80162da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	2280      	movs	r2, #128	@ 0x80
 80162e0:	4393      	bics	r3, r2
 80162e2:	001a      	movs	r2, r3
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	691b      	ldr	r3, [r3, #16]
 80162e8:	4313      	orrs	r3, r2
 80162ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	68fa      	ldr	r2, [r7, #12]
 80162f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80162f2:	683b      	ldr	r3, [r7, #0]
 80162f4:	689a      	ldr	r2, [r3, #8]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2201      	movs	r2, #1
 8016306:	615a      	str	r2, [r3, #20]
}
 8016308:	46c0      	nop			@ (mov r8, r8)
 801630a:	46bd      	mov	sp, r7
 801630c:	b004      	add	sp, #16
 801630e:	bd80      	pop	{r7, pc}
 8016310:	40000400 	.word	0x40000400
 8016314:	40010800 	.word	0x40010800
 8016318:	40011400 	.word	0x40011400
 801631c:	fffffcff 	.word	0xfffffcff

08016320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b086      	sub	sp, #24
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	6a1b      	ldr	r3, [r3, #32]
 801632e:	2201      	movs	r2, #1
 8016330:	4393      	bics	r3, r2
 8016332:	001a      	movs	r2, r3
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	6a1b      	ldr	r3, [r3, #32]
 801633c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	685b      	ldr	r3, [r3, #4]
 8016342:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	699b      	ldr	r3, [r3, #24]
 8016348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	2270      	movs	r2, #112	@ 0x70
 801634e:	4393      	bics	r3, r2
 8016350:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	2203      	movs	r2, #3
 8016356:	4393      	bics	r3, r2
 8016358:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	68fa      	ldr	r2, [r7, #12]
 8016360:	4313      	orrs	r3, r2
 8016362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	2202      	movs	r2, #2
 8016368:	4393      	bics	r3, r2
 801636a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	689b      	ldr	r3, [r3, #8]
 8016370:	697a      	ldr	r2, [r7, #20]
 8016372:	4313      	orrs	r3, r2
 8016374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	693a      	ldr	r2, [r7, #16]
 801637a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	68fa      	ldr	r2, [r7, #12]
 8016380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	685a      	ldr	r2, [r3, #4]
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	697a      	ldr	r2, [r7, #20]
 801638e:	621a      	str	r2, [r3, #32]
}
 8016390:	46c0      	nop			@ (mov r8, r8)
 8016392:	46bd      	mov	sp, r7
 8016394:	b006      	add	sp, #24
 8016396:	bd80      	pop	{r7, pc}

08016398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b086      	sub	sp, #24
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
 80163a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6a1b      	ldr	r3, [r3, #32]
 80163a6:	2210      	movs	r2, #16
 80163a8:	4393      	bics	r3, r2
 80163aa:	001a      	movs	r2, r3
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6a1b      	ldr	r3, [r3, #32]
 80163b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	685b      	ldr	r3, [r3, #4]
 80163ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	699b      	ldr	r3, [r3, #24]
 80163c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	4a13      	ldr	r2, [pc, #76]	@ (8016414 <TIM_OC2_SetConfig+0x7c>)
 80163c6:	4013      	ands	r3, r2
 80163c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	4a12      	ldr	r2, [pc, #72]	@ (8016418 <TIM_OC2_SetConfig+0x80>)
 80163ce:	4013      	ands	r3, r2
 80163d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	021b      	lsls	r3, r3, #8
 80163d8:	68fa      	ldr	r2, [r7, #12]
 80163da:	4313      	orrs	r3, r2
 80163dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80163de:	697b      	ldr	r3, [r7, #20]
 80163e0:	2220      	movs	r2, #32
 80163e2:	4393      	bics	r3, r2
 80163e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	689b      	ldr	r3, [r3, #8]
 80163ea:	011b      	lsls	r3, r3, #4
 80163ec:	697a      	ldr	r2, [r7, #20]
 80163ee:	4313      	orrs	r3, r2
 80163f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	693a      	ldr	r2, [r7, #16]
 80163f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	68fa      	ldr	r2, [r7, #12]
 80163fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	685a      	ldr	r2, [r3, #4]
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	697a      	ldr	r2, [r7, #20]
 801640a:	621a      	str	r2, [r3, #32]
}
 801640c:	46c0      	nop			@ (mov r8, r8)
 801640e:	46bd      	mov	sp, r7
 8016410:	b006      	add	sp, #24
 8016412:	bd80      	pop	{r7, pc}
 8016414:	ffff8fff 	.word	0xffff8fff
 8016418:	fffffcff 	.word	0xfffffcff

0801641c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
 8016424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6a1b      	ldr	r3, [r3, #32]
 801642a:	4a1a      	ldr	r2, [pc, #104]	@ (8016494 <TIM_OC3_SetConfig+0x78>)
 801642c:	401a      	ands	r2, r3
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6a1b      	ldr	r3, [r3, #32]
 8016436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	69db      	ldr	r3, [r3, #28]
 8016442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2270      	movs	r2, #112	@ 0x70
 8016448:	4393      	bics	r3, r2
 801644a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	2203      	movs	r2, #3
 8016450:	4393      	bics	r3, r2
 8016452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	68fa      	ldr	r2, [r7, #12]
 801645a:	4313      	orrs	r3, r2
 801645c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801645e:	697b      	ldr	r3, [r7, #20]
 8016460:	4a0d      	ldr	r2, [pc, #52]	@ (8016498 <TIM_OC3_SetConfig+0x7c>)
 8016462:	4013      	ands	r3, r2
 8016464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	689b      	ldr	r3, [r3, #8]
 801646a:	021b      	lsls	r3, r3, #8
 801646c:	697a      	ldr	r2, [r7, #20]
 801646e:	4313      	orrs	r3, r2
 8016470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	693a      	ldr	r2, [r7, #16]
 8016476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	68fa      	ldr	r2, [r7, #12]
 801647c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	685a      	ldr	r2, [r3, #4]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	697a      	ldr	r2, [r7, #20]
 801648a:	621a      	str	r2, [r3, #32]
}
 801648c:	46c0      	nop			@ (mov r8, r8)
 801648e:	46bd      	mov	sp, r7
 8016490:	b006      	add	sp, #24
 8016492:	bd80      	pop	{r7, pc}
 8016494:	fffffeff 	.word	0xfffffeff
 8016498:	fffffdff 	.word	0xfffffdff

0801649c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b086      	sub	sp, #24
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6a1b      	ldr	r3, [r3, #32]
 80164aa:	4a1b      	ldr	r2, [pc, #108]	@ (8016518 <TIM_OC4_SetConfig+0x7c>)
 80164ac:	401a      	ands	r2, r3
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	6a1b      	ldr	r3, [r3, #32]
 80164b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	69db      	ldr	r3, [r3, #28]
 80164c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	4a15      	ldr	r2, [pc, #84]	@ (801651c <TIM_OC4_SetConfig+0x80>)
 80164c8:	4013      	ands	r3, r2
 80164ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	4a14      	ldr	r2, [pc, #80]	@ (8016520 <TIM_OC4_SetConfig+0x84>)
 80164d0:	4013      	ands	r3, r2
 80164d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	021b      	lsls	r3, r3, #8
 80164da:	68fa      	ldr	r2, [r7, #12]
 80164dc:	4313      	orrs	r3, r2
 80164de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	4a10      	ldr	r2, [pc, #64]	@ (8016524 <TIM_OC4_SetConfig+0x88>)
 80164e4:	4013      	ands	r3, r2
 80164e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	689b      	ldr	r3, [r3, #8]
 80164ec:	031b      	lsls	r3, r3, #12
 80164ee:	697a      	ldr	r2, [r7, #20]
 80164f0:	4313      	orrs	r3, r2
 80164f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	693a      	ldr	r2, [r7, #16]
 80164f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	68fa      	ldr	r2, [r7, #12]
 80164fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016500:	683b      	ldr	r3, [r7, #0]
 8016502:	685a      	ldr	r2, [r3, #4]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	697a      	ldr	r2, [r7, #20]
 801650c:	621a      	str	r2, [r3, #32]
}
 801650e:	46c0      	nop			@ (mov r8, r8)
 8016510:	46bd      	mov	sp, r7
 8016512:	b006      	add	sp, #24
 8016514:	bd80      	pop	{r7, pc}
 8016516:	46c0      	nop			@ (mov r8, r8)
 8016518:	ffffefff 	.word	0xffffefff
 801651c:	ffff8fff 	.word	0xffff8fff
 8016520:	fffffcff 	.word	0xfffffcff
 8016524:	ffffdfff 	.word	0xffffdfff

08016528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b086      	sub	sp, #24
 801652c:	af00      	add	r7, sp, #0
 801652e:	60f8      	str	r0, [r7, #12]
 8016530:	60b9      	str	r1, [r7, #8]
 8016532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	221f      	movs	r2, #31
 8016538:	4013      	ands	r3, r2
 801653a:	2201      	movs	r2, #1
 801653c:	409a      	lsls	r2, r3
 801653e:	0013      	movs	r3, r2
 8016540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	6a1b      	ldr	r3, [r3, #32]
 8016546:	697a      	ldr	r2, [r7, #20]
 8016548:	43d2      	mvns	r2, r2
 801654a:	401a      	ands	r2, r3
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	6a1a      	ldr	r2, [r3, #32]
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	211f      	movs	r1, #31
 8016558:	400b      	ands	r3, r1
 801655a:	6879      	ldr	r1, [r7, #4]
 801655c:	4099      	lsls	r1, r3
 801655e:	000b      	movs	r3, r1
 8016560:	431a      	orrs	r2, r3
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	621a      	str	r2, [r3, #32]
}
 8016566:	46c0      	nop			@ (mov r8, r8)
 8016568:	46bd      	mov	sp, r7
 801656a:	b006      	add	sp, #24
 801656c:	bd80      	pop	{r7, pc}
	...

08016570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	2238      	movs	r2, #56	@ 0x38
 801657e:	5c9b      	ldrb	r3, [r3, r2]
 8016580:	2b01      	cmp	r3, #1
 8016582:	d101      	bne.n	8016588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016584:	2302      	movs	r3, #2
 8016586:	e047      	b.n	8016618 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2238      	movs	r2, #56	@ 0x38
 801658c:	2101      	movs	r1, #1
 801658e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2239      	movs	r2, #57	@ 0x39
 8016594:	2102      	movs	r1, #2
 8016596:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	685b      	ldr	r3, [r3, #4]
 801659e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	689b      	ldr	r3, [r3, #8]
 80165a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	2270      	movs	r2, #112	@ 0x70
 80165ac:	4393      	bics	r3, r2
 80165ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	68fa      	ldr	r2, [r7, #12]
 80165b6:	4313      	orrs	r3, r2
 80165b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	68fa      	ldr	r2, [r7, #12]
 80165c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681a      	ldr	r2, [r3, #0]
 80165c6:	2380      	movs	r3, #128	@ 0x80
 80165c8:	05db      	lsls	r3, r3, #23
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d00e      	beq.n	80165ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	4a13      	ldr	r2, [pc, #76]	@ (8016620 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80165d4:	4293      	cmp	r3, r2
 80165d6:	d009      	beq.n	80165ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	4a11      	ldr	r2, [pc, #68]	@ (8016624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80165de:	4293      	cmp	r3, r2
 80165e0:	d004      	beq.n	80165ec <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	4a10      	ldr	r2, [pc, #64]	@ (8016628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80165e8:	4293      	cmp	r3, r2
 80165ea:	d10c      	bne.n	8016606 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80165ec:	68bb      	ldr	r3, [r7, #8]
 80165ee:	2280      	movs	r2, #128	@ 0x80
 80165f0:	4393      	bics	r3, r2
 80165f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	685b      	ldr	r3, [r3, #4]
 80165f8:	68ba      	ldr	r2, [r7, #8]
 80165fa:	4313      	orrs	r3, r2
 80165fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	68ba      	ldr	r2, [r7, #8]
 8016604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2239      	movs	r2, #57	@ 0x39
 801660a:	2101      	movs	r1, #1
 801660c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	2238      	movs	r2, #56	@ 0x38
 8016612:	2100      	movs	r1, #0
 8016614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016616:	2300      	movs	r3, #0
}
 8016618:	0018      	movs	r0, r3
 801661a:	46bd      	mov	sp, r7
 801661c:	b004      	add	sp, #16
 801661e:	bd80      	pop	{r7, pc}
 8016620:	40000400 	.word	0x40000400
 8016624:	40010800 	.word	0x40010800
 8016628:	40011400 	.word	0x40011400

0801662c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801662c:	b580      	push	{r7, lr}
 801662e:	b082      	sub	sp, #8
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
 8016634:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2238      	movs	r2, #56	@ 0x38
 801663a:	5c9b      	ldrb	r3, [r3, r2]
 801663c:	2b01      	cmp	r3, #1
 801663e:	d101      	bne.n	8016644 <HAL_TIMEx_RemapConfig+0x18>
 8016640:	2302      	movs	r3, #2
 8016642:	e00c      	b.n	801665e <HAL_TIMEx_RemapConfig+0x32>
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	2238      	movs	r2, #56	@ 0x38
 8016648:	2101      	movs	r1, #1
 801664a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	683a      	ldr	r2, [r7, #0]
 8016652:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2238      	movs	r2, #56	@ 0x38
 8016658:	2100      	movs	r1, #0
 801665a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801665c:	2300      	movs	r3, #0
}
 801665e:	0018      	movs	r0, r3
 8016660:	46bd      	mov	sp, r7
 8016662:	b002      	add	sp, #8
 8016664:	bd80      	pop	{r7, pc}
	...

08016668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d101      	bne.n	801667a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016676:	2301      	movs	r3, #1
 8016678:	e053      	b.n	8016722 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801667e:	2b00      	cmp	r3, #0
 8016680:	d116      	bne.n	80166b0 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2278      	movs	r2, #120	@ 0x78
 8016686:	2100      	movs	r1, #0
 8016688:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	0018      	movs	r0, r3
 801668e:	f000 fd65 	bl	801715c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	22b0      	movs	r2, #176	@ 0xb0
 8016696:	589b      	ldr	r3, [r3, r2]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d103      	bne.n	80166a4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	21b0      	movs	r1, #176	@ 0xb0
 80166a0:	4a22      	ldr	r2, [pc, #136]	@ (801672c <HAL_UART_Init+0xc4>)
 80166a2:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	22b0      	movs	r2, #176	@ 0xb0
 80166a8:	589b      	ldr	r3, [r3, r2]
 80166aa:	687a      	ldr	r2, [r7, #4]
 80166ac:	0010      	movs	r0, r2
 80166ae:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2224      	movs	r2, #36	@ 0x24
 80166b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	681a      	ldr	r2, [r3, #0]
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2101      	movs	r1, #1
 80166c2:	438a      	bics	r2, r1
 80166c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	0018      	movs	r0, r3
 80166ca:	f000 fd8b 	bl	80171e4 <UART_SetConfig>
 80166ce:	0003      	movs	r3, r0
 80166d0:	2b01      	cmp	r3, #1
 80166d2:	d101      	bne.n	80166d8 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80166d4:	2301      	movs	r3, #1
 80166d6:	e024      	b.n	8016722 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d003      	beq.n	80166e8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	0018      	movs	r0, r3
 80166e4:	f001 f81c 	bl	8017720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	685a      	ldr	r2, [r3, #4]
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	490f      	ldr	r1, [pc, #60]	@ (8016730 <HAL_UART_Init+0xc8>)
 80166f4:	400a      	ands	r2, r1
 80166f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	689a      	ldr	r2, [r3, #8]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	212a      	movs	r1, #42	@ 0x2a
 8016704:	438a      	bics	r2, r1
 8016706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	681a      	ldr	r2, [r3, #0]
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2101      	movs	r1, #1
 8016714:	430a      	orrs	r2, r1
 8016716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	0018      	movs	r0, r3
 801671c:	f001 f8b4 	bl	8017888 <UART_CheckIdleState>
 8016720:	0003      	movs	r3, r0
}
 8016722:	0018      	movs	r0, r3
 8016724:	46bd      	mov	sp, r7
 8016726:	b002      	add	sp, #8
 8016728:	bd80      	pop	{r7, pc}
 801672a:	46c0      	nop			@ (mov r8, r8)
 801672c:	0800d755 	.word	0x0800d755
 8016730:	ffffb7ff 	.word	0xffffb7ff

08016734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b08a      	sub	sp, #40	@ 0x28
 8016738:	af02      	add	r7, sp, #8
 801673a:	60f8      	str	r0, [r7, #12]
 801673c:	60b9      	str	r1, [r7, #8]
 801673e:	603b      	str	r3, [r7, #0]
 8016740:	1dbb      	adds	r3, r7, #6
 8016742:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016748:	2b20      	cmp	r3, #32
 801674a:	d000      	beq.n	801674e <HAL_UART_Transmit+0x1a>
 801674c:	e08c      	b.n	8016868 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d003      	beq.n	801675c <HAL_UART_Transmit+0x28>
 8016754:	1dbb      	adds	r3, r7, #6
 8016756:	881b      	ldrh	r3, [r3, #0]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d101      	bne.n	8016760 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801675c:	2301      	movs	r3, #1
 801675e:	e084      	b.n	801686a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	689a      	ldr	r2, [r3, #8]
 8016764:	2380      	movs	r3, #128	@ 0x80
 8016766:	015b      	lsls	r3, r3, #5
 8016768:	429a      	cmp	r2, r3
 801676a:	d109      	bne.n	8016780 <HAL_UART_Transmit+0x4c>
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	691b      	ldr	r3, [r3, #16]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d105      	bne.n	8016780 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	2201      	movs	r2, #1
 8016778:	4013      	ands	r3, r2
 801677a:	d001      	beq.n	8016780 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801677c:	2301      	movs	r3, #1
 801677e:	e074      	b.n	801686a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	2284      	movs	r2, #132	@ 0x84
 8016784:	2100      	movs	r1, #0
 8016786:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	2221      	movs	r2, #33	@ 0x21
 801678c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801678e:	f7f7 fdbb 	bl	800e308 <HAL_GetTick>
 8016792:	0003      	movs	r3, r0
 8016794:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	1dba      	adds	r2, r7, #6
 801679a:	2150      	movs	r1, #80	@ 0x50
 801679c:	8812      	ldrh	r2, [r2, #0]
 801679e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	1dba      	adds	r2, r7, #6
 80167a4:	2152      	movs	r1, #82	@ 0x52
 80167a6:	8812      	ldrh	r2, [r2, #0]
 80167a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	689a      	ldr	r2, [r3, #8]
 80167ae:	2380      	movs	r3, #128	@ 0x80
 80167b0:	015b      	lsls	r3, r3, #5
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d108      	bne.n	80167c8 <HAL_UART_Transmit+0x94>
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	691b      	ldr	r3, [r3, #16]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d104      	bne.n	80167c8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80167be:	2300      	movs	r3, #0
 80167c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	61bb      	str	r3, [r7, #24]
 80167c6:	e003      	b.n	80167d0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80167c8:	68bb      	ldr	r3, [r7, #8]
 80167ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80167cc:	2300      	movs	r3, #0
 80167ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80167d0:	e02f      	b.n	8016832 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80167d2:	697a      	ldr	r2, [r7, #20]
 80167d4:	68f8      	ldr	r0, [r7, #12]
 80167d6:	683b      	ldr	r3, [r7, #0]
 80167d8:	9300      	str	r3, [sp, #0]
 80167da:	0013      	movs	r3, r2
 80167dc:	2200      	movs	r2, #0
 80167de:	2180      	movs	r1, #128	@ 0x80
 80167e0:	f001 f8fa 	bl	80179d8 <UART_WaitOnFlagUntilTimeout>
 80167e4:	1e03      	subs	r3, r0, #0
 80167e6:	d004      	beq.n	80167f2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	2220      	movs	r2, #32
 80167ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80167ee:	2303      	movs	r3, #3
 80167f0:	e03b      	b.n	801686a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80167f2:	69fb      	ldr	r3, [r7, #28]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d10b      	bne.n	8016810 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80167f8:	69bb      	ldr	r3, [r7, #24]
 80167fa:	881b      	ldrh	r3, [r3, #0]
 80167fc:	001a      	movs	r2, r3
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	05d2      	lsls	r2, r2, #23
 8016804:	0dd2      	lsrs	r2, r2, #23
 8016806:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016808:	69bb      	ldr	r3, [r7, #24]
 801680a:	3302      	adds	r3, #2
 801680c:	61bb      	str	r3, [r7, #24]
 801680e:	e007      	b.n	8016820 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	781a      	ldrb	r2, [r3, #0]
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801681a:	69fb      	ldr	r3, [r7, #28]
 801681c:	3301      	adds	r3, #1
 801681e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	2252      	movs	r2, #82	@ 0x52
 8016824:	5a9b      	ldrh	r3, [r3, r2]
 8016826:	b29b      	uxth	r3, r3
 8016828:	3b01      	subs	r3, #1
 801682a:	b299      	uxth	r1, r3
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	2252      	movs	r2, #82	@ 0x52
 8016830:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	2252      	movs	r2, #82	@ 0x52
 8016836:	5a9b      	ldrh	r3, [r3, r2]
 8016838:	b29b      	uxth	r3, r3
 801683a:	2b00      	cmp	r3, #0
 801683c:	d1c9      	bne.n	80167d2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801683e:	697a      	ldr	r2, [r7, #20]
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	9300      	str	r3, [sp, #0]
 8016846:	0013      	movs	r3, r2
 8016848:	2200      	movs	r2, #0
 801684a:	2140      	movs	r1, #64	@ 0x40
 801684c:	f001 f8c4 	bl	80179d8 <UART_WaitOnFlagUntilTimeout>
 8016850:	1e03      	subs	r3, r0, #0
 8016852:	d004      	beq.n	801685e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2220      	movs	r2, #32
 8016858:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801685a:	2303      	movs	r3, #3
 801685c:	e005      	b.n	801686a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	2220      	movs	r2, #32
 8016862:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8016864:	2300      	movs	r3, #0
 8016866:	e000      	b.n	801686a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8016868:	2302      	movs	r3, #2
  }
}
 801686a:	0018      	movs	r0, r3
 801686c:	46bd      	mov	sp, r7
 801686e:	b008      	add	sp, #32
 8016870:	bd80      	pop	{r7, pc}
	...

08016874 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b088      	sub	sp, #32
 8016878:	af00      	add	r7, sp, #0
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	1dbb      	adds	r3, r7, #6
 8016880:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2280      	movs	r2, #128	@ 0x80
 8016886:	589b      	ldr	r3, [r3, r2]
 8016888:	2b20      	cmp	r3, #32
 801688a:	d14a      	bne.n	8016922 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d003      	beq.n	801689a <HAL_UART_Receive_IT+0x26>
 8016892:	1dbb      	adds	r3, r7, #6
 8016894:	881b      	ldrh	r3, [r3, #0]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d101      	bne.n	801689e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801689a:	2301      	movs	r3, #1
 801689c:	e042      	b.n	8016924 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	689a      	ldr	r2, [r3, #8]
 80168a2:	2380      	movs	r3, #128	@ 0x80
 80168a4:	015b      	lsls	r3, r3, #5
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d109      	bne.n	80168be <HAL_UART_Receive_IT+0x4a>
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	691b      	ldr	r3, [r3, #16]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d105      	bne.n	80168be <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	2201      	movs	r2, #1
 80168b6:	4013      	ands	r3, r2
 80168b8:	d001      	beq.n	80168be <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80168ba:	2301      	movs	r3, #1
 80168bc:	e032      	b.n	8016924 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2200      	movs	r2, #0
 80168c2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	4a18      	ldr	r2, [pc, #96]	@ (801692c <HAL_UART_Receive_IT+0xb8>)
 80168ca:	4293      	cmp	r3, r2
 80168cc:	d020      	beq.n	8016910 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	685a      	ldr	r2, [r3, #4]
 80168d4:	2380      	movs	r3, #128	@ 0x80
 80168d6:	041b      	lsls	r3, r3, #16
 80168d8:	4013      	ands	r3, r2
 80168da:	d019      	beq.n	8016910 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168dc:	f3ef 8310 	mrs	r3, PRIMASK
 80168e0:	613b      	str	r3, [r7, #16]
  return(result);
 80168e2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80168e4:	61fb      	str	r3, [r7, #28]
 80168e6:	2301      	movs	r3, #1
 80168e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	f383 8810 	msr	PRIMASK, r3
}
 80168f0:	46c0      	nop			@ (mov r8, r8)
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	681a      	ldr	r2, [r3, #0]
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	2180      	movs	r1, #128	@ 0x80
 80168fe:	04c9      	lsls	r1, r1, #19
 8016900:	430a      	orrs	r2, r1
 8016902:	601a      	str	r2, [r3, #0]
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016908:	69bb      	ldr	r3, [r7, #24]
 801690a:	f383 8810 	msr	PRIMASK, r3
}
 801690e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016910:	1dbb      	adds	r3, r7, #6
 8016912:	881a      	ldrh	r2, [r3, #0]
 8016914:	68b9      	ldr	r1, [r7, #8]
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	0018      	movs	r0, r3
 801691a:	f001 f8c7 	bl	8017aac <UART_Start_Receive_IT>
 801691e:	0003      	movs	r3, r0
 8016920:	e000      	b.n	8016924 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016922:	2302      	movs	r3, #2
  }
}
 8016924:	0018      	movs	r0, r3
 8016926:	46bd      	mov	sp, r7
 8016928:	b008      	add	sp, #32
 801692a:	bd80      	pop	{r7, pc}
 801692c:	40004800 	.word	0x40004800

08016930 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b088      	sub	sp, #32
 8016934:	af00      	add	r7, sp, #0
 8016936:	60f8      	str	r0, [r7, #12]
 8016938:	60b9      	str	r1, [r7, #8]
 801693a:	1dbb      	adds	r3, r7, #6
 801693c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016942:	2b20      	cmp	r3, #32
 8016944:	d000      	beq.n	8016948 <HAL_UART_Transmit_DMA+0x18>
 8016946:	e077      	b.n	8016a38 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d003      	beq.n	8016956 <HAL_UART_Transmit_DMA+0x26>
 801694e:	1dbb      	adds	r3, r7, #6
 8016950:	881b      	ldrh	r3, [r3, #0]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d101      	bne.n	801695a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8016956:	2301      	movs	r3, #1
 8016958:	e06f      	b.n	8016a3a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	689a      	ldr	r2, [r3, #8]
 801695e:	2380      	movs	r3, #128	@ 0x80
 8016960:	015b      	lsls	r3, r3, #5
 8016962:	429a      	cmp	r2, r3
 8016964:	d109      	bne.n	801697a <HAL_UART_Transmit_DMA+0x4a>
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	691b      	ldr	r3, [r3, #16]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d105      	bne.n	801697a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	2201      	movs	r2, #1
 8016972:	4013      	ands	r3, r2
 8016974:	d001      	beq.n	801697a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016976:	2301      	movs	r3, #1
 8016978:	e05f      	b.n	8016a3a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	68ba      	ldr	r2, [r7, #8]
 801697e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	1dba      	adds	r2, r7, #6
 8016984:	2150      	movs	r1, #80	@ 0x50
 8016986:	8812      	ldrh	r2, [r2, #0]
 8016988:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	1dba      	adds	r2, r7, #6
 801698e:	2152      	movs	r1, #82	@ 0x52
 8016990:	8812      	ldrh	r2, [r2, #0]
 8016992:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	2284      	movs	r2, #132	@ 0x84
 8016998:	2100      	movs	r1, #0
 801699a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	2221      	movs	r2, #33	@ 0x21
 80169a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d027      	beq.n	80169fa <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169ae:	4a25      	ldr	r2, [pc, #148]	@ (8016a44 <HAL_UART_Transmit_DMA+0x114>)
 80169b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169b6:	4a24      	ldr	r2, [pc, #144]	@ (8016a48 <HAL_UART_Transmit_DMA+0x118>)
 80169b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169be:	4a23      	ldr	r2, [pc, #140]	@ (8016a4c <HAL_UART_Transmit_DMA+0x11c>)
 80169c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169c6:	2200      	movs	r2, #0
 80169c8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80169d2:	0019      	movs	r1, r3
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	3328      	adds	r3, #40	@ 0x28
 80169da:	001a      	movs	r2, r3
 80169dc:	1dbb      	adds	r3, r7, #6
 80169de:	881b      	ldrh	r3, [r3, #0]
 80169e0:	f7f8 f9ce 	bl	800ed80 <HAL_DMA_Start_IT>
 80169e4:	1e03      	subs	r3, r0, #0
 80169e6:	d008      	beq.n	80169fa <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	2284      	movs	r2, #132	@ 0x84
 80169ec:	2110      	movs	r1, #16
 80169ee:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	2220      	movs	r2, #32
 80169f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80169f6:	2301      	movs	r3, #1
 80169f8:	e01f      	b.n	8016a3a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	2240      	movs	r2, #64	@ 0x40
 8016a00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a02:	f3ef 8310 	mrs	r3, PRIMASK
 8016a06:	613b      	str	r3, [r7, #16]
  return(result);
 8016a08:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016a0a:	61fb      	str	r3, [r7, #28]
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a10:	697b      	ldr	r3, [r7, #20]
 8016a12:	f383 8810 	msr	PRIMASK, r3
}
 8016a16:	46c0      	nop			@ (mov r8, r8)
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	689a      	ldr	r2, [r3, #8]
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	2180      	movs	r1, #128	@ 0x80
 8016a24:	430a      	orrs	r2, r1
 8016a26:	609a      	str	r2, [r3, #8]
 8016a28:	69fb      	ldr	r3, [r7, #28]
 8016a2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a2c:	69bb      	ldr	r3, [r7, #24]
 8016a2e:	f383 8810 	msr	PRIMASK, r3
}
 8016a32:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016a34:	2300      	movs	r3, #0
 8016a36:	e000      	b.n	8016a3a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8016a38:	2302      	movs	r3, #2
  }
}
 8016a3a:	0018      	movs	r0, r3
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	b008      	add	sp, #32
 8016a40:	bd80      	pop	{r7, pc}
 8016a42:	46c0      	nop			@ (mov r8, r8)
 8016a44:	08017e91 	.word	0x08017e91
 8016a48:	08017f2d 	.word	0x08017f2d
 8016a4c:	080180cd 	.word	0x080180cd

08016a50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b088      	sub	sp, #32
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	1dbb      	adds	r3, r7, #6
 8016a5c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	2280      	movs	r2, #128	@ 0x80
 8016a62:	589b      	ldr	r3, [r3, r2]
 8016a64:	2b20      	cmp	r3, #32
 8016a66:	d14a      	bne.n	8016afe <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d003      	beq.n	8016a76 <HAL_UART_Receive_DMA+0x26>
 8016a6e:	1dbb      	adds	r3, r7, #6
 8016a70:	881b      	ldrh	r3, [r3, #0]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d101      	bne.n	8016a7a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016a76:	2301      	movs	r3, #1
 8016a78:	e042      	b.n	8016b00 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	689a      	ldr	r2, [r3, #8]
 8016a7e:	2380      	movs	r3, #128	@ 0x80
 8016a80:	015b      	lsls	r3, r3, #5
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d109      	bne.n	8016a9a <HAL_UART_Receive_DMA+0x4a>
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	691b      	ldr	r3, [r3, #16]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d105      	bne.n	8016a9a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016a8e:	68bb      	ldr	r3, [r7, #8]
 8016a90:	2201      	movs	r2, #1
 8016a92:	4013      	ands	r3, r2
 8016a94:	d001      	beq.n	8016a9a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016a96:	2301      	movs	r3, #1
 8016a98:	e032      	b.n	8016b00 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	4a18      	ldr	r2, [pc, #96]	@ (8016b08 <HAL_UART_Receive_DMA+0xb8>)
 8016aa6:	4293      	cmp	r3, r2
 8016aa8:	d020      	beq.n	8016aec <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	685a      	ldr	r2, [r3, #4]
 8016ab0:	2380      	movs	r3, #128	@ 0x80
 8016ab2:	041b      	lsls	r3, r3, #16
 8016ab4:	4013      	ands	r3, r2
 8016ab6:	d019      	beq.n	8016aec <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8016abc:	613b      	str	r3, [r7, #16]
  return(result);
 8016abe:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016ac0:	61fb      	str	r3, [r7, #28]
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	f383 8810 	msr	PRIMASK, r3
}
 8016acc:	46c0      	nop			@ (mov r8, r8)
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	681a      	ldr	r2, [r3, #0]
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	2180      	movs	r1, #128	@ 0x80
 8016ada:	04c9      	lsls	r1, r1, #19
 8016adc:	430a      	orrs	r2, r1
 8016ade:	601a      	str	r2, [r3, #0]
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ae4:	69bb      	ldr	r3, [r7, #24]
 8016ae6:	f383 8810 	msr	PRIMASK, r3
}
 8016aea:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016aec:	1dbb      	adds	r3, r7, #6
 8016aee:	881a      	ldrh	r2, [r3, #0]
 8016af0:	68b9      	ldr	r1, [r7, #8]
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	0018      	movs	r0, r3
 8016af6:	f001 f8a3 	bl	8017c40 <UART_Start_Receive_DMA>
 8016afa:	0003      	movs	r3, r0
 8016afc:	e000      	b.n	8016b00 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016afe:	2302      	movs	r3, #2
  }
}
 8016b00:	0018      	movs	r0, r3
 8016b02:	46bd      	mov	sp, r7
 8016b04:	b008      	add	sp, #32
 8016b06:	bd80      	pop	{r7, pc}
 8016b08:	40004800 	.word	0x40004800

08016b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016b0c:	b590      	push	{r4, r7, lr}
 8016b0e:	b0ab      	sub	sp, #172	@ 0xac
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	69db      	ldr	r3, [r3, #28]
 8016b1a:	22a4      	movs	r2, #164	@ 0xa4
 8016b1c:	18b9      	adds	r1, r7, r2
 8016b1e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	20a0      	movs	r0, #160	@ 0xa0
 8016b28:	1839      	adds	r1, r7, r0
 8016b2a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	689b      	ldr	r3, [r3, #8]
 8016b32:	219c      	movs	r1, #156	@ 0x9c
 8016b34:	1879      	adds	r1, r7, r1
 8016b36:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016b38:	0011      	movs	r1, r2
 8016b3a:	18bb      	adds	r3, r7, r2
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	4a9c      	ldr	r2, [pc, #624]	@ (8016db0 <HAL_UART_IRQHandler+0x2a4>)
 8016b40:	4013      	ands	r3, r2
 8016b42:	2298      	movs	r2, #152	@ 0x98
 8016b44:	18bc      	adds	r4, r7, r2
 8016b46:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8016b48:	18bb      	adds	r3, r7, r2
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d114      	bne.n	8016b7a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8016b50:	187b      	adds	r3, r7, r1
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	2220      	movs	r2, #32
 8016b56:	4013      	ands	r3, r2
 8016b58:	d00f      	beq.n	8016b7a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016b5a:	183b      	adds	r3, r7, r0
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	2220      	movs	r2, #32
 8016b60:	4013      	ands	r3, r2
 8016b62:	d00a      	beq.n	8016b7a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d100      	bne.n	8016b6e <HAL_UART_IRQHandler+0x62>
 8016b6c:	e2aa      	b.n	80170c4 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b72:	687a      	ldr	r2, [r7, #4]
 8016b74:	0010      	movs	r0, r2
 8016b76:	4798      	blx	r3
      }
      return;
 8016b78:	e2a4      	b.n	80170c4 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016b7a:	2398      	movs	r3, #152	@ 0x98
 8016b7c:	18fb      	adds	r3, r7, r3
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d100      	bne.n	8016b86 <HAL_UART_IRQHandler+0x7a>
 8016b84:	e11a      	b.n	8016dbc <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8016b86:	239c      	movs	r3, #156	@ 0x9c
 8016b88:	18fb      	adds	r3, r7, r3
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2201      	movs	r2, #1
 8016b8e:	4013      	ands	r3, r2
 8016b90:	d106      	bne.n	8016ba0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8016b92:	23a0      	movs	r3, #160	@ 0xa0
 8016b94:	18fb      	adds	r3, r7, r3
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	4a86      	ldr	r2, [pc, #536]	@ (8016db4 <HAL_UART_IRQHandler+0x2a8>)
 8016b9a:	4013      	ands	r3, r2
 8016b9c:	d100      	bne.n	8016ba0 <HAL_UART_IRQHandler+0x94>
 8016b9e:	e10d      	b.n	8016dbc <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016ba0:	23a4      	movs	r3, #164	@ 0xa4
 8016ba2:	18fb      	adds	r3, r7, r3
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2201      	movs	r2, #1
 8016ba8:	4013      	ands	r3, r2
 8016baa:	d012      	beq.n	8016bd2 <HAL_UART_IRQHandler+0xc6>
 8016bac:	23a0      	movs	r3, #160	@ 0xa0
 8016bae:	18fb      	adds	r3, r7, r3
 8016bb0:	681a      	ldr	r2, [r3, #0]
 8016bb2:	2380      	movs	r3, #128	@ 0x80
 8016bb4:	005b      	lsls	r3, r3, #1
 8016bb6:	4013      	ands	r3, r2
 8016bb8:	d00b      	beq.n	8016bd2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	2201      	movs	r2, #1
 8016bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	2284      	movs	r2, #132	@ 0x84
 8016bc6:	589b      	ldr	r3, [r3, r2]
 8016bc8:	2201      	movs	r2, #1
 8016bca:	431a      	orrs	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2184      	movs	r1, #132	@ 0x84
 8016bd0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016bd2:	23a4      	movs	r3, #164	@ 0xa4
 8016bd4:	18fb      	adds	r3, r7, r3
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	2202      	movs	r2, #2
 8016bda:	4013      	ands	r3, r2
 8016bdc:	d011      	beq.n	8016c02 <HAL_UART_IRQHandler+0xf6>
 8016bde:	239c      	movs	r3, #156	@ 0x9c
 8016be0:	18fb      	adds	r3, r7, r3
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	2201      	movs	r2, #1
 8016be6:	4013      	ands	r3, r2
 8016be8:	d00b      	beq.n	8016c02 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2202      	movs	r2, #2
 8016bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2284      	movs	r2, #132	@ 0x84
 8016bf6:	589b      	ldr	r3, [r3, r2]
 8016bf8:	2204      	movs	r2, #4
 8016bfa:	431a      	orrs	r2, r3
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	2184      	movs	r1, #132	@ 0x84
 8016c00:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016c02:	23a4      	movs	r3, #164	@ 0xa4
 8016c04:	18fb      	adds	r3, r7, r3
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	2204      	movs	r2, #4
 8016c0a:	4013      	ands	r3, r2
 8016c0c:	d011      	beq.n	8016c32 <HAL_UART_IRQHandler+0x126>
 8016c0e:	239c      	movs	r3, #156	@ 0x9c
 8016c10:	18fb      	adds	r3, r7, r3
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	2201      	movs	r2, #1
 8016c16:	4013      	ands	r3, r2
 8016c18:	d00b      	beq.n	8016c32 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	2204      	movs	r2, #4
 8016c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2284      	movs	r2, #132	@ 0x84
 8016c26:	589b      	ldr	r3, [r3, r2]
 8016c28:	2202      	movs	r2, #2
 8016c2a:	431a      	orrs	r2, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2184      	movs	r1, #132	@ 0x84
 8016c30:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016c32:	23a4      	movs	r3, #164	@ 0xa4
 8016c34:	18fb      	adds	r3, r7, r3
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	2208      	movs	r2, #8
 8016c3a:	4013      	ands	r3, r2
 8016c3c:	d017      	beq.n	8016c6e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016c3e:	23a0      	movs	r3, #160	@ 0xa0
 8016c40:	18fb      	adds	r3, r7, r3
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	2220      	movs	r2, #32
 8016c46:	4013      	ands	r3, r2
 8016c48:	d105      	bne.n	8016c56 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016c4a:	239c      	movs	r3, #156	@ 0x9c
 8016c4c:	18fb      	adds	r3, r7, r3
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	2201      	movs	r2, #1
 8016c52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016c54:	d00b      	beq.n	8016c6e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	2208      	movs	r2, #8
 8016c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2284      	movs	r2, #132	@ 0x84
 8016c62:	589b      	ldr	r3, [r3, r2]
 8016c64:	2208      	movs	r2, #8
 8016c66:	431a      	orrs	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2184      	movs	r1, #132	@ 0x84
 8016c6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016c6e:	23a4      	movs	r3, #164	@ 0xa4
 8016c70:	18fb      	adds	r3, r7, r3
 8016c72:	681a      	ldr	r2, [r3, #0]
 8016c74:	2380      	movs	r3, #128	@ 0x80
 8016c76:	011b      	lsls	r3, r3, #4
 8016c78:	4013      	ands	r3, r2
 8016c7a:	d013      	beq.n	8016ca4 <HAL_UART_IRQHandler+0x198>
 8016c7c:	23a0      	movs	r3, #160	@ 0xa0
 8016c7e:	18fb      	adds	r3, r7, r3
 8016c80:	681a      	ldr	r2, [r3, #0]
 8016c82:	2380      	movs	r3, #128	@ 0x80
 8016c84:	04db      	lsls	r3, r3, #19
 8016c86:	4013      	ands	r3, r2
 8016c88:	d00c      	beq.n	8016ca4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	2280      	movs	r2, #128	@ 0x80
 8016c90:	0112      	lsls	r2, r2, #4
 8016c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2284      	movs	r2, #132	@ 0x84
 8016c98:	589b      	ldr	r3, [r3, r2]
 8016c9a:	2220      	movs	r2, #32
 8016c9c:	431a      	orrs	r2, r3
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	2184      	movs	r1, #132	@ 0x84
 8016ca2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2284      	movs	r2, #132	@ 0x84
 8016ca8:	589b      	ldr	r3, [r3, r2]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d100      	bne.n	8016cb0 <HAL_UART_IRQHandler+0x1a4>
 8016cae:	e20b      	b.n	80170c8 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8016cb0:	23a4      	movs	r3, #164	@ 0xa4
 8016cb2:	18fb      	adds	r3, r7, r3
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	2220      	movs	r2, #32
 8016cb8:	4013      	ands	r3, r2
 8016cba:	d00e      	beq.n	8016cda <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016cbc:	23a0      	movs	r3, #160	@ 0xa0
 8016cbe:	18fb      	adds	r3, r7, r3
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	2220      	movs	r2, #32
 8016cc4:	4013      	ands	r3, r2
 8016cc6:	d008      	beq.n	8016cda <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d004      	beq.n	8016cda <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016cd4:	687a      	ldr	r2, [r7, #4]
 8016cd6:	0010      	movs	r0, r2
 8016cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	2284      	movs	r2, #132	@ 0x84
 8016cde:	589b      	ldr	r3, [r3, r2]
 8016ce0:	2194      	movs	r1, #148	@ 0x94
 8016ce2:	187a      	adds	r2, r7, r1
 8016ce4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	689b      	ldr	r3, [r3, #8]
 8016cec:	2240      	movs	r2, #64	@ 0x40
 8016cee:	4013      	ands	r3, r2
 8016cf0:	2b40      	cmp	r3, #64	@ 0x40
 8016cf2:	d004      	beq.n	8016cfe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016cf4:	187b      	adds	r3, r7, r1
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	2228      	movs	r2, #40	@ 0x28
 8016cfa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016cfc:	d04b      	beq.n	8016d96 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	0018      	movs	r0, r3
 8016d02:	f001 f861 	bl	8017dc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	689b      	ldr	r3, [r3, #8]
 8016d0c:	2240      	movs	r2, #64	@ 0x40
 8016d0e:	4013      	ands	r3, r2
 8016d10:	2b40      	cmp	r3, #64	@ 0x40
 8016d12:	d139      	bne.n	8016d88 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d14:	f3ef 8310 	mrs	r3, PRIMASK
 8016d18:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016d1c:	2090      	movs	r0, #144	@ 0x90
 8016d1e:	183a      	adds	r2, r7, r0
 8016d20:	6013      	str	r3, [r2, #0]
 8016d22:	2301      	movs	r3, #1
 8016d24:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016d28:	f383 8810 	msr	PRIMASK, r3
}
 8016d2c:	46c0      	nop			@ (mov r8, r8)
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	689a      	ldr	r2, [r3, #8]
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	2140      	movs	r1, #64	@ 0x40
 8016d3a:	438a      	bics	r2, r1
 8016d3c:	609a      	str	r2, [r3, #8]
 8016d3e:	183b      	adds	r3, r7, r0
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016d46:	f383 8810 	msr	PRIMASK, r3
}
 8016d4a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d012      	beq.n	8016d7a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d58:	4a17      	ldr	r2, [pc, #92]	@ (8016db8 <HAL_UART_IRQHandler+0x2ac>)
 8016d5a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d60:	0018      	movs	r0, r3
 8016d62:	f7f8 f8b3 	bl	800eecc <HAL_DMA_Abort_IT>
 8016d66:	1e03      	subs	r3, r0, #0
 8016d68:	d020      	beq.n	8016dac <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d74:	0018      	movs	r0, r3
 8016d76:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d78:	e018      	b.n	8016dac <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2298      	movs	r2, #152	@ 0x98
 8016d7e:	589b      	ldr	r3, [r3, r2]
 8016d80:	687a      	ldr	r2, [r7, #4]
 8016d82:	0010      	movs	r0, r2
 8016d84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d86:	e011      	b.n	8016dac <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	2298      	movs	r2, #152	@ 0x98
 8016d8c:	589b      	ldr	r3, [r3, r2]
 8016d8e:	687a      	ldr	r2, [r7, #4]
 8016d90:	0010      	movs	r0, r2
 8016d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d94:	e00a      	b.n	8016dac <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	2298      	movs	r2, #152	@ 0x98
 8016d9a:	589b      	ldr	r3, [r3, r2]
 8016d9c:	687a      	ldr	r2, [r7, #4]
 8016d9e:	0010      	movs	r0, r2
 8016da0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	2284      	movs	r2, #132	@ 0x84
 8016da6:	2100      	movs	r1, #0
 8016da8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8016daa:	e18d      	b.n	80170c8 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016dac:	46c0      	nop			@ (mov r8, r8)
    return;
 8016dae:	e18b      	b.n	80170c8 <HAL_UART_IRQHandler+0x5bc>
 8016db0:	0000080f 	.word	0x0000080f
 8016db4:	04000120 	.word	0x04000120
 8016db8:	08018155 	.word	0x08018155

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016dc0:	2b01      	cmp	r3, #1
 8016dc2:	d000      	beq.n	8016dc6 <HAL_UART_IRQHandler+0x2ba>
 8016dc4:	e13d      	b.n	8017042 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016dc6:	23a4      	movs	r3, #164	@ 0xa4
 8016dc8:	18fb      	adds	r3, r7, r3
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	2210      	movs	r2, #16
 8016dce:	4013      	ands	r3, r2
 8016dd0:	d100      	bne.n	8016dd4 <HAL_UART_IRQHandler+0x2c8>
 8016dd2:	e136      	b.n	8017042 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016dd4:	23a0      	movs	r3, #160	@ 0xa0
 8016dd6:	18fb      	adds	r3, r7, r3
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	2210      	movs	r2, #16
 8016ddc:	4013      	ands	r3, r2
 8016dde:	d100      	bne.n	8016de2 <HAL_UART_IRQHandler+0x2d6>
 8016de0:	e12f      	b.n	8017042 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	2210      	movs	r2, #16
 8016de8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	689b      	ldr	r3, [r3, #8]
 8016df0:	2240      	movs	r2, #64	@ 0x40
 8016df2:	4013      	ands	r3, r2
 8016df4:	2b40      	cmp	r3, #64	@ 0x40
 8016df6:	d000      	beq.n	8016dfa <HAL_UART_IRQHandler+0x2ee>
 8016df8:	e0a2      	b.n	8016f40 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	685a      	ldr	r2, [r3, #4]
 8016e02:	217e      	movs	r1, #126	@ 0x7e
 8016e04:	187b      	adds	r3, r7, r1
 8016e06:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8016e08:	187b      	adds	r3, r7, r1
 8016e0a:	881b      	ldrh	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d100      	bne.n	8016e12 <HAL_UART_IRQHandler+0x306>
 8016e10:	e15c      	b.n	80170cc <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2258      	movs	r2, #88	@ 0x58
 8016e16:	5a9b      	ldrh	r3, [r3, r2]
 8016e18:	187a      	adds	r2, r7, r1
 8016e1a:	8812      	ldrh	r2, [r2, #0]
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d300      	bcc.n	8016e22 <HAL_UART_IRQHandler+0x316>
 8016e20:	e154      	b.n	80170cc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	187a      	adds	r2, r7, r1
 8016e26:	215a      	movs	r1, #90	@ 0x5a
 8016e28:	8812      	ldrh	r2, [r2, #0]
 8016e2a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	2220      	movs	r2, #32
 8016e36:	4013      	ands	r3, r2
 8016e38:	d16f      	bne.n	8016f1a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8016e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016e42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016e44:	2301      	movs	r3, #1
 8016e46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e4a:	f383 8810 	msr	PRIMASK, r3
}
 8016e4e:	46c0      	nop			@ (mov r8, r8)
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	49a0      	ldr	r1, [pc, #640]	@ (80170dc <HAL_UART_IRQHandler+0x5d0>)
 8016e5c:	400a      	ands	r2, r1
 8016e5e:	601a      	str	r2, [r3, #0]
 8016e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e66:	f383 8810 	msr	PRIMASK, r3
}
 8016e6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8016e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8016e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016e74:	677b      	str	r3, [r7, #116]	@ 0x74
 8016e76:	2301      	movs	r3, #1
 8016e78:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e7c:	f383 8810 	msr	PRIMASK, r3
}
 8016e80:	46c0      	nop			@ (mov r8, r8)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	689a      	ldr	r2, [r3, #8]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	2101      	movs	r1, #1
 8016e8e:	438a      	bics	r2, r1
 8016e90:	609a      	str	r2, [r3, #8]
 8016e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016e94:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e98:	f383 8810 	msr	PRIMASK, r3
}
 8016e9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8016ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8016ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016eae:	f383 8810 	msr	PRIMASK, r3
}
 8016eb2:	46c0      	nop			@ (mov r8, r8)
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	689a      	ldr	r2, [r3, #8]
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	2140      	movs	r1, #64	@ 0x40
 8016ec0:	438a      	bics	r2, r1
 8016ec2:	609a      	str	r2, [r3, #8]
 8016ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016ec6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016eca:	f383 8810 	msr	PRIMASK, r3
}
 8016ece:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2280      	movs	r2, #128	@ 0x80
 8016ed4:	2120      	movs	r1, #32
 8016ed6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2200      	movs	r2, #0
 8016edc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ede:	f3ef 8310 	mrs	r3, PRIMASK
 8016ee2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8016ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016ee8:	2301      	movs	r3, #1
 8016eea:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016eec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016eee:	f383 8810 	msr	PRIMASK, r3
}
 8016ef2:	46c0      	nop			@ (mov r8, r8)
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	681a      	ldr	r2, [r3, #0]
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	2110      	movs	r1, #16
 8016f00:	438a      	bics	r2, r1
 8016f02:	601a      	str	r2, [r3, #0]
 8016f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016f0a:	f383 8810 	msr	PRIMASK, r3
}
 8016f0e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f14:	0018      	movs	r0, r3
 8016f16:	f7f7 ff99 	bl	800ee4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2202      	movs	r2, #2
 8016f1e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	22ac      	movs	r2, #172	@ 0xac
 8016f24:	589b      	ldr	r3, [r3, r2]
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	2158      	movs	r1, #88	@ 0x58
 8016f2a:	5a51      	ldrh	r1, [r2, r1]
 8016f2c:	687a      	ldr	r2, [r7, #4]
 8016f2e:	205a      	movs	r0, #90	@ 0x5a
 8016f30:	5a12      	ldrh	r2, [r2, r0]
 8016f32:	b292      	uxth	r2, r2
 8016f34:	1a8a      	subs	r2, r1, r2
 8016f36:	b291      	uxth	r1, r2
 8016f38:	687a      	ldr	r2, [r7, #4]
 8016f3a:	0010      	movs	r0, r2
 8016f3c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016f3e:	e0c5      	b.n	80170cc <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2258      	movs	r2, #88	@ 0x58
 8016f44:	5a99      	ldrh	r1, [r3, r2]
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	225a      	movs	r2, #90	@ 0x5a
 8016f4a:	5a9b      	ldrh	r3, [r3, r2]
 8016f4c:	b29a      	uxth	r2, r3
 8016f4e:	208e      	movs	r0, #142	@ 0x8e
 8016f50:	183b      	adds	r3, r7, r0
 8016f52:	1a8a      	subs	r2, r1, r2
 8016f54:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	225a      	movs	r2, #90	@ 0x5a
 8016f5a:	5a9b      	ldrh	r3, [r3, r2]
 8016f5c:	b29b      	uxth	r3, r3
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d100      	bne.n	8016f64 <HAL_UART_IRQHandler+0x458>
 8016f62:	e0b5      	b.n	80170d0 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8016f64:	183b      	adds	r3, r7, r0
 8016f66:	881b      	ldrh	r3, [r3, #0]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d100      	bne.n	8016f6e <HAL_UART_IRQHandler+0x462>
 8016f6c:	e0b0      	b.n	80170d0 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8016f72:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f74:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016f76:	2488      	movs	r4, #136	@ 0x88
 8016f78:	193a      	adds	r2, r7, r4
 8016f7a:	6013      	str	r3, [r2, #0]
 8016f7c:	2301      	movs	r3, #1
 8016f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f80:	693b      	ldr	r3, [r7, #16]
 8016f82:	f383 8810 	msr	PRIMASK, r3
}
 8016f86:	46c0      	nop			@ (mov r8, r8)
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	681a      	ldr	r2, [r3, #0]
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	4953      	ldr	r1, [pc, #332]	@ (80170e0 <HAL_UART_IRQHandler+0x5d4>)
 8016f94:	400a      	ands	r2, r1
 8016f96:	601a      	str	r2, [r3, #0]
 8016f98:	193b      	adds	r3, r7, r4
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	f383 8810 	msr	PRIMASK, r3
}
 8016fa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8016faa:	61bb      	str	r3, [r7, #24]
  return(result);
 8016fac:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016fae:	2484      	movs	r4, #132	@ 0x84
 8016fb0:	193a      	adds	r2, r7, r4
 8016fb2:	6013      	str	r3, [r2, #0]
 8016fb4:	2301      	movs	r3, #1
 8016fb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	f383 8810 	msr	PRIMASK, r3
}
 8016fbe:	46c0      	nop			@ (mov r8, r8)
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	689a      	ldr	r2, [r3, #8]
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	2101      	movs	r1, #1
 8016fcc:	438a      	bics	r2, r1
 8016fce:	609a      	str	r2, [r3, #8]
 8016fd0:	193b      	adds	r3, r7, r4
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fd6:	6a3b      	ldr	r3, [r7, #32]
 8016fd8:	f383 8810 	msr	PRIMASK, r3
}
 8016fdc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	2280      	movs	r2, #128	@ 0x80
 8016fe2:	2120      	movs	r1, #32
 8016fe4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	2200      	movs	r2, #0
 8016fea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8016ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ffa:	2480      	movs	r4, #128	@ 0x80
 8016ffc:	193a      	adds	r2, r7, r4
 8016ffe:	6013      	str	r3, [r2, #0]
 8017000:	2301      	movs	r3, #1
 8017002:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017006:	f383 8810 	msr	PRIMASK, r3
}
 801700a:	46c0      	nop			@ (mov r8, r8)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	681a      	ldr	r2, [r3, #0]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2110      	movs	r1, #16
 8017018:	438a      	bics	r2, r1
 801701a:	601a      	str	r2, [r3, #0]
 801701c:	193b      	adds	r3, r7, r4
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017024:	f383 8810 	msr	PRIMASK, r3
}
 8017028:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	2202      	movs	r2, #2
 801702e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	22ac      	movs	r2, #172	@ 0xac
 8017034:	589b      	ldr	r3, [r3, r2]
 8017036:	183a      	adds	r2, r7, r0
 8017038:	8811      	ldrh	r1, [r2, #0]
 801703a:	687a      	ldr	r2, [r7, #4]
 801703c:	0010      	movs	r0, r2
 801703e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017040:	e046      	b.n	80170d0 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017042:	23a4      	movs	r3, #164	@ 0xa4
 8017044:	18fb      	adds	r3, r7, r3
 8017046:	681a      	ldr	r2, [r3, #0]
 8017048:	2380      	movs	r3, #128	@ 0x80
 801704a:	035b      	lsls	r3, r3, #13
 801704c:	4013      	ands	r3, r2
 801704e:	d012      	beq.n	8017076 <HAL_UART_IRQHandler+0x56a>
 8017050:	239c      	movs	r3, #156	@ 0x9c
 8017052:	18fb      	adds	r3, r7, r3
 8017054:	681a      	ldr	r2, [r3, #0]
 8017056:	2380      	movs	r3, #128	@ 0x80
 8017058:	03db      	lsls	r3, r3, #15
 801705a:	4013      	ands	r3, r2
 801705c:	d00b      	beq.n	8017076 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	2280      	movs	r2, #128	@ 0x80
 8017064:	0352      	lsls	r2, r2, #13
 8017066:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	22a8      	movs	r2, #168	@ 0xa8
 801706c:	589b      	ldr	r3, [r3, r2]
 801706e:	687a      	ldr	r2, [r7, #4]
 8017070:	0010      	movs	r0, r2
 8017072:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017074:	e02f      	b.n	80170d6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017076:	23a4      	movs	r3, #164	@ 0xa4
 8017078:	18fb      	adds	r3, r7, r3
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	2280      	movs	r2, #128	@ 0x80
 801707e:	4013      	ands	r3, r2
 8017080:	d00f      	beq.n	80170a2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017082:	23a0      	movs	r3, #160	@ 0xa0
 8017084:	18fb      	adds	r3, r7, r3
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2280      	movs	r2, #128	@ 0x80
 801708a:	4013      	ands	r3, r2
 801708c:	d009      	beq.n	80170a2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017092:	2b00      	cmp	r3, #0
 8017094:	d01e      	beq.n	80170d4 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801709a:	687a      	ldr	r2, [r7, #4]
 801709c:	0010      	movs	r0, r2
 801709e:	4798      	blx	r3
    }
    return;
 80170a0:	e018      	b.n	80170d4 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80170a2:	23a4      	movs	r3, #164	@ 0xa4
 80170a4:	18fb      	adds	r3, r7, r3
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	2240      	movs	r2, #64	@ 0x40
 80170aa:	4013      	ands	r3, r2
 80170ac:	d013      	beq.n	80170d6 <HAL_UART_IRQHandler+0x5ca>
 80170ae:	23a0      	movs	r3, #160	@ 0xa0
 80170b0:	18fb      	adds	r3, r7, r3
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	2240      	movs	r2, #64	@ 0x40
 80170b6:	4013      	ands	r3, r2
 80170b8:	d00d      	beq.n	80170d6 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	0018      	movs	r0, r3
 80170be:	f001 f862 	bl	8018186 <UART_EndTransmit_IT>
    return;
 80170c2:	e008      	b.n	80170d6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80170c4:	46c0      	nop			@ (mov r8, r8)
 80170c6:	e006      	b.n	80170d6 <HAL_UART_IRQHandler+0x5ca>
    return;
 80170c8:	46c0      	nop			@ (mov r8, r8)
 80170ca:	e004      	b.n	80170d6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80170cc:	46c0      	nop			@ (mov r8, r8)
 80170ce:	e002      	b.n	80170d6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80170d0:	46c0      	nop			@ (mov r8, r8)
 80170d2:	e000      	b.n	80170d6 <HAL_UART_IRQHandler+0x5ca>
    return;
 80170d4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80170d6:	46bd      	mov	sp, r7
 80170d8:	b02b      	add	sp, #172	@ 0xac
 80170da:	bd90      	pop	{r4, r7, pc}
 80170dc:	fffffeff 	.word	0xfffffeff
 80170e0:	fffffedf 	.word	0xfffffedf

080170e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b082      	sub	sp, #8
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80170ec:	46c0      	nop			@ (mov r8, r8)
 80170ee:	46bd      	mov	sp, r7
 80170f0:	b002      	add	sp, #8
 80170f2:	bd80      	pop	{r7, pc}

080170f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b082      	sub	sp, #8
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80170fc:	46c0      	nop			@ (mov r8, r8)
 80170fe:	46bd      	mov	sp, r7
 8017100:	b002      	add	sp, #8
 8017102:	bd80      	pop	{r7, pc}

08017104 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801710c:	46c0      	nop			@ (mov r8, r8)
 801710e:	46bd      	mov	sp, r7
 8017110:	b002      	add	sp, #8
 8017112:	bd80      	pop	{r7, pc}

08017114 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801711c:	46c0      	nop			@ (mov r8, r8)
 801711e:	46bd      	mov	sp, r7
 8017120:	b002      	add	sp, #8
 8017122:	bd80      	pop	{r7, pc}

08017124 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b082      	sub	sp, #8
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801712c:	46c0      	nop			@ (mov r8, r8)
 801712e:	46bd      	mov	sp, r7
 8017130:	b002      	add	sp, #8
 8017132:	bd80      	pop	{r7, pc}

08017134 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b082      	sub	sp, #8
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801713c:	46c0      	nop			@ (mov r8, r8)
 801713e:	46bd      	mov	sp, r7
 8017140:	b002      	add	sp, #8
 8017142:	bd80      	pop	{r7, pc}

08017144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b082      	sub	sp, #8
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	000a      	movs	r2, r1
 801714e:	1cbb      	adds	r3, r7, #2
 8017150:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017152:	46c0      	nop			@ (mov r8, r8)
 8017154:	46bd      	mov	sp, r7
 8017156:	b002      	add	sp, #8
 8017158:	bd80      	pop	{r7, pc}
	...

0801715c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b082      	sub	sp, #8
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	2188      	movs	r1, #136	@ 0x88
 8017168:	4a14      	ldr	r2, [pc, #80]	@ (80171bc <UART_InitCallbacksToDefault+0x60>)
 801716a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	218c      	movs	r1, #140	@ 0x8c
 8017170:	4a13      	ldr	r2, [pc, #76]	@ (80171c0 <UART_InitCallbacksToDefault+0x64>)
 8017172:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2190      	movs	r1, #144	@ 0x90
 8017178:	4a12      	ldr	r2, [pc, #72]	@ (80171c4 <UART_InitCallbacksToDefault+0x68>)
 801717a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	2194      	movs	r1, #148	@ 0x94
 8017180:	4a11      	ldr	r2, [pc, #68]	@ (80171c8 <UART_InitCallbacksToDefault+0x6c>)
 8017182:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2198      	movs	r1, #152	@ 0x98
 8017188:	4a10      	ldr	r2, [pc, #64]	@ (80171cc <UART_InitCallbacksToDefault+0x70>)
 801718a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	219c      	movs	r1, #156	@ 0x9c
 8017190:	4a0f      	ldr	r2, [pc, #60]	@ (80171d0 <UART_InitCallbacksToDefault+0x74>)
 8017192:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	21a0      	movs	r1, #160	@ 0xa0
 8017198:	4a0e      	ldr	r2, [pc, #56]	@ (80171d4 <UART_InitCallbacksToDefault+0x78>)
 801719a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	21a4      	movs	r1, #164	@ 0xa4
 80171a0:	4a0d      	ldr	r2, [pc, #52]	@ (80171d8 <UART_InitCallbacksToDefault+0x7c>)
 80171a2:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	21a8      	movs	r1, #168	@ 0xa8
 80171a8:	4a0c      	ldr	r2, [pc, #48]	@ (80171dc <UART_InitCallbacksToDefault+0x80>)
 80171aa:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	21ac      	movs	r1, #172	@ 0xac
 80171b0:	4a0b      	ldr	r2, [pc, #44]	@ (80171e0 <UART_InitCallbacksToDefault+0x84>)
 80171b2:	505a      	str	r2, [r3, r1]

}
 80171b4:	46c0      	nop			@ (mov r8, r8)
 80171b6:	46bd      	mov	sp, r7
 80171b8:	b002      	add	sp, #8
 80171ba:	bd80      	pop	{r7, pc}
 80171bc:	080170f5 	.word	0x080170f5
 80171c0:	080170e5 	.word	0x080170e5
 80171c4:	08017105 	.word	0x08017105
 80171c8:	0800834d 	.word	0x0800834d
 80171cc:	08003bd1 	.word	0x08003bd1
 80171d0:	08017115 	.word	0x08017115
 80171d4:	08017125 	.word	0x08017125
 80171d8:	08017135 	.word	0x08017135
 80171dc:	08018579 	.word	0x08018579
 80171e0:	08017145 	.word	0x08017145

080171e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80171e4:	b5b0      	push	{r4, r5, r7, lr}
 80171e6:	b08e      	sub	sp, #56	@ 0x38
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80171ec:	231a      	movs	r3, #26
 80171ee:	2218      	movs	r2, #24
 80171f0:	189b      	adds	r3, r3, r2
 80171f2:	19db      	adds	r3, r3, r7
 80171f4:	2200      	movs	r2, #0
 80171f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80171f8:	69fb      	ldr	r3, [r7, #28]
 80171fa:	689a      	ldr	r2, [r3, #8]
 80171fc:	69fb      	ldr	r3, [r7, #28]
 80171fe:	691b      	ldr	r3, [r3, #16]
 8017200:	431a      	orrs	r2, r3
 8017202:	69fb      	ldr	r3, [r7, #28]
 8017204:	695b      	ldr	r3, [r3, #20]
 8017206:	431a      	orrs	r2, r3
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	69db      	ldr	r3, [r3, #28]
 801720c:	4313      	orrs	r3, r2
 801720e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017210:	69fb      	ldr	r3, [r7, #28]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4ac3      	ldr	r2, [pc, #780]	@ (8017524 <UART_SetConfig+0x340>)
 8017218:	4013      	ands	r3, r2
 801721a:	0019      	movs	r1, r3
 801721c:	69fb      	ldr	r3, [r7, #28]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017222:	430a      	orrs	r2, r1
 8017224:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	685b      	ldr	r3, [r3, #4]
 801722c:	4abe      	ldr	r2, [pc, #760]	@ (8017528 <UART_SetConfig+0x344>)
 801722e:	4013      	ands	r3, r2
 8017230:	0019      	movs	r1, r3
 8017232:	69fb      	ldr	r3, [r7, #28]
 8017234:	68da      	ldr	r2, [r3, #12]
 8017236:	69fb      	ldr	r3, [r7, #28]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	430a      	orrs	r2, r1
 801723c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801723e:	69fb      	ldr	r3, [r7, #28]
 8017240:	699b      	ldr	r3, [r3, #24]
 8017242:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017244:	69fb      	ldr	r3, [r7, #28]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	4ab8      	ldr	r2, [pc, #736]	@ (801752c <UART_SetConfig+0x348>)
 801724a:	4293      	cmp	r3, r2
 801724c:	d004      	beq.n	8017258 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801724e:	69fb      	ldr	r3, [r7, #28]
 8017250:	6a1b      	ldr	r3, [r3, #32]
 8017252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017254:	4313      	orrs	r3, r2
 8017256:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017258:	69fb      	ldr	r3, [r7, #28]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	689b      	ldr	r3, [r3, #8]
 801725e:	4ab4      	ldr	r2, [pc, #720]	@ (8017530 <UART_SetConfig+0x34c>)
 8017260:	4013      	ands	r3, r2
 8017262:	0019      	movs	r1, r3
 8017264:	69fb      	ldr	r3, [r7, #28]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801726a:	430a      	orrs	r2, r1
 801726c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801726e:	69fb      	ldr	r3, [r7, #28]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	4ab0      	ldr	r2, [pc, #704]	@ (8017534 <UART_SetConfig+0x350>)
 8017274:	4293      	cmp	r3, r2
 8017276:	d131      	bne.n	80172dc <UART_SetConfig+0xf8>
 8017278:	4baf      	ldr	r3, [pc, #700]	@ (8017538 <UART_SetConfig+0x354>)
 801727a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801727c:	2203      	movs	r2, #3
 801727e:	4013      	ands	r3, r2
 8017280:	2b03      	cmp	r3, #3
 8017282:	d01d      	beq.n	80172c0 <UART_SetConfig+0xdc>
 8017284:	d823      	bhi.n	80172ce <UART_SetConfig+0xea>
 8017286:	2b02      	cmp	r3, #2
 8017288:	d00c      	beq.n	80172a4 <UART_SetConfig+0xc0>
 801728a:	d820      	bhi.n	80172ce <UART_SetConfig+0xea>
 801728c:	2b00      	cmp	r3, #0
 801728e:	d002      	beq.n	8017296 <UART_SetConfig+0xb2>
 8017290:	2b01      	cmp	r3, #1
 8017292:	d00e      	beq.n	80172b2 <UART_SetConfig+0xce>
 8017294:	e01b      	b.n	80172ce <UART_SetConfig+0xea>
 8017296:	231b      	movs	r3, #27
 8017298:	2218      	movs	r2, #24
 801729a:	189b      	adds	r3, r3, r2
 801729c:	19db      	adds	r3, r3, r7
 801729e:	2201      	movs	r2, #1
 80172a0:	701a      	strb	r2, [r3, #0]
 80172a2:	e0b4      	b.n	801740e <UART_SetConfig+0x22a>
 80172a4:	231b      	movs	r3, #27
 80172a6:	2218      	movs	r2, #24
 80172a8:	189b      	adds	r3, r3, r2
 80172aa:	19db      	adds	r3, r3, r7
 80172ac:	2202      	movs	r2, #2
 80172ae:	701a      	strb	r2, [r3, #0]
 80172b0:	e0ad      	b.n	801740e <UART_SetConfig+0x22a>
 80172b2:	231b      	movs	r3, #27
 80172b4:	2218      	movs	r2, #24
 80172b6:	189b      	adds	r3, r3, r2
 80172b8:	19db      	adds	r3, r3, r7
 80172ba:	2204      	movs	r2, #4
 80172bc:	701a      	strb	r2, [r3, #0]
 80172be:	e0a6      	b.n	801740e <UART_SetConfig+0x22a>
 80172c0:	231b      	movs	r3, #27
 80172c2:	2218      	movs	r2, #24
 80172c4:	189b      	adds	r3, r3, r2
 80172c6:	19db      	adds	r3, r3, r7
 80172c8:	2208      	movs	r2, #8
 80172ca:	701a      	strb	r2, [r3, #0]
 80172cc:	e09f      	b.n	801740e <UART_SetConfig+0x22a>
 80172ce:	231b      	movs	r3, #27
 80172d0:	2218      	movs	r2, #24
 80172d2:	189b      	adds	r3, r3, r2
 80172d4:	19db      	adds	r3, r3, r7
 80172d6:	2210      	movs	r2, #16
 80172d8:	701a      	strb	r2, [r3, #0]
 80172da:	e098      	b.n	801740e <UART_SetConfig+0x22a>
 80172dc:	69fb      	ldr	r3, [r7, #28]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	4a96      	ldr	r2, [pc, #600]	@ (801753c <UART_SetConfig+0x358>)
 80172e2:	4293      	cmp	r3, r2
 80172e4:	d131      	bne.n	801734a <UART_SetConfig+0x166>
 80172e6:	4b94      	ldr	r3, [pc, #592]	@ (8017538 <UART_SetConfig+0x354>)
 80172e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80172ea:	220c      	movs	r2, #12
 80172ec:	4013      	ands	r3, r2
 80172ee:	2b0c      	cmp	r3, #12
 80172f0:	d01d      	beq.n	801732e <UART_SetConfig+0x14a>
 80172f2:	d823      	bhi.n	801733c <UART_SetConfig+0x158>
 80172f4:	2b08      	cmp	r3, #8
 80172f6:	d00c      	beq.n	8017312 <UART_SetConfig+0x12e>
 80172f8:	d820      	bhi.n	801733c <UART_SetConfig+0x158>
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d002      	beq.n	8017304 <UART_SetConfig+0x120>
 80172fe:	2b04      	cmp	r3, #4
 8017300:	d00e      	beq.n	8017320 <UART_SetConfig+0x13c>
 8017302:	e01b      	b.n	801733c <UART_SetConfig+0x158>
 8017304:	231b      	movs	r3, #27
 8017306:	2218      	movs	r2, #24
 8017308:	189b      	adds	r3, r3, r2
 801730a:	19db      	adds	r3, r3, r7
 801730c:	2200      	movs	r2, #0
 801730e:	701a      	strb	r2, [r3, #0]
 8017310:	e07d      	b.n	801740e <UART_SetConfig+0x22a>
 8017312:	231b      	movs	r3, #27
 8017314:	2218      	movs	r2, #24
 8017316:	189b      	adds	r3, r3, r2
 8017318:	19db      	adds	r3, r3, r7
 801731a:	2202      	movs	r2, #2
 801731c:	701a      	strb	r2, [r3, #0]
 801731e:	e076      	b.n	801740e <UART_SetConfig+0x22a>
 8017320:	231b      	movs	r3, #27
 8017322:	2218      	movs	r2, #24
 8017324:	189b      	adds	r3, r3, r2
 8017326:	19db      	adds	r3, r3, r7
 8017328:	2204      	movs	r2, #4
 801732a:	701a      	strb	r2, [r3, #0]
 801732c:	e06f      	b.n	801740e <UART_SetConfig+0x22a>
 801732e:	231b      	movs	r3, #27
 8017330:	2218      	movs	r2, #24
 8017332:	189b      	adds	r3, r3, r2
 8017334:	19db      	adds	r3, r3, r7
 8017336:	2208      	movs	r2, #8
 8017338:	701a      	strb	r2, [r3, #0]
 801733a:	e068      	b.n	801740e <UART_SetConfig+0x22a>
 801733c:	231b      	movs	r3, #27
 801733e:	2218      	movs	r2, #24
 8017340:	189b      	adds	r3, r3, r2
 8017342:	19db      	adds	r3, r3, r7
 8017344:	2210      	movs	r2, #16
 8017346:	701a      	strb	r2, [r3, #0]
 8017348:	e061      	b.n	801740e <UART_SetConfig+0x22a>
 801734a:	69fb      	ldr	r3, [r7, #28]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	4a7c      	ldr	r2, [pc, #496]	@ (8017540 <UART_SetConfig+0x35c>)
 8017350:	4293      	cmp	r3, r2
 8017352:	d106      	bne.n	8017362 <UART_SetConfig+0x17e>
 8017354:	231b      	movs	r3, #27
 8017356:	2218      	movs	r2, #24
 8017358:	189b      	adds	r3, r3, r2
 801735a:	19db      	adds	r3, r3, r7
 801735c:	2200      	movs	r2, #0
 801735e:	701a      	strb	r2, [r3, #0]
 8017360:	e055      	b.n	801740e <UART_SetConfig+0x22a>
 8017362:	69fb      	ldr	r3, [r7, #28]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	4a77      	ldr	r2, [pc, #476]	@ (8017544 <UART_SetConfig+0x360>)
 8017368:	4293      	cmp	r3, r2
 801736a:	d106      	bne.n	801737a <UART_SetConfig+0x196>
 801736c:	231b      	movs	r3, #27
 801736e:	2218      	movs	r2, #24
 8017370:	189b      	adds	r3, r3, r2
 8017372:	19db      	adds	r3, r3, r7
 8017374:	2200      	movs	r2, #0
 8017376:	701a      	strb	r2, [r3, #0]
 8017378:	e049      	b.n	801740e <UART_SetConfig+0x22a>
 801737a:	69fb      	ldr	r3, [r7, #28]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	4a6b      	ldr	r2, [pc, #428]	@ (801752c <UART_SetConfig+0x348>)
 8017380:	4293      	cmp	r3, r2
 8017382:	d13e      	bne.n	8017402 <UART_SetConfig+0x21e>
 8017384:	4b6c      	ldr	r3, [pc, #432]	@ (8017538 <UART_SetConfig+0x354>)
 8017386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017388:	23c0      	movs	r3, #192	@ 0xc0
 801738a:	011b      	lsls	r3, r3, #4
 801738c:	4013      	ands	r3, r2
 801738e:	22c0      	movs	r2, #192	@ 0xc0
 8017390:	0112      	lsls	r2, r2, #4
 8017392:	4293      	cmp	r3, r2
 8017394:	d027      	beq.n	80173e6 <UART_SetConfig+0x202>
 8017396:	22c0      	movs	r2, #192	@ 0xc0
 8017398:	0112      	lsls	r2, r2, #4
 801739a:	4293      	cmp	r3, r2
 801739c:	d82a      	bhi.n	80173f4 <UART_SetConfig+0x210>
 801739e:	2280      	movs	r2, #128	@ 0x80
 80173a0:	0112      	lsls	r2, r2, #4
 80173a2:	4293      	cmp	r3, r2
 80173a4:	d011      	beq.n	80173ca <UART_SetConfig+0x1e6>
 80173a6:	2280      	movs	r2, #128	@ 0x80
 80173a8:	0112      	lsls	r2, r2, #4
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d822      	bhi.n	80173f4 <UART_SetConfig+0x210>
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d004      	beq.n	80173bc <UART_SetConfig+0x1d8>
 80173b2:	2280      	movs	r2, #128	@ 0x80
 80173b4:	00d2      	lsls	r2, r2, #3
 80173b6:	4293      	cmp	r3, r2
 80173b8:	d00e      	beq.n	80173d8 <UART_SetConfig+0x1f4>
 80173ba:	e01b      	b.n	80173f4 <UART_SetConfig+0x210>
 80173bc:	231b      	movs	r3, #27
 80173be:	2218      	movs	r2, #24
 80173c0:	189b      	adds	r3, r3, r2
 80173c2:	19db      	adds	r3, r3, r7
 80173c4:	2200      	movs	r2, #0
 80173c6:	701a      	strb	r2, [r3, #0]
 80173c8:	e021      	b.n	801740e <UART_SetConfig+0x22a>
 80173ca:	231b      	movs	r3, #27
 80173cc:	2218      	movs	r2, #24
 80173ce:	189b      	adds	r3, r3, r2
 80173d0:	19db      	adds	r3, r3, r7
 80173d2:	2202      	movs	r2, #2
 80173d4:	701a      	strb	r2, [r3, #0]
 80173d6:	e01a      	b.n	801740e <UART_SetConfig+0x22a>
 80173d8:	231b      	movs	r3, #27
 80173da:	2218      	movs	r2, #24
 80173dc:	189b      	adds	r3, r3, r2
 80173de:	19db      	adds	r3, r3, r7
 80173e0:	2204      	movs	r2, #4
 80173e2:	701a      	strb	r2, [r3, #0]
 80173e4:	e013      	b.n	801740e <UART_SetConfig+0x22a>
 80173e6:	231b      	movs	r3, #27
 80173e8:	2218      	movs	r2, #24
 80173ea:	189b      	adds	r3, r3, r2
 80173ec:	19db      	adds	r3, r3, r7
 80173ee:	2208      	movs	r2, #8
 80173f0:	701a      	strb	r2, [r3, #0]
 80173f2:	e00c      	b.n	801740e <UART_SetConfig+0x22a>
 80173f4:	231b      	movs	r3, #27
 80173f6:	2218      	movs	r2, #24
 80173f8:	189b      	adds	r3, r3, r2
 80173fa:	19db      	adds	r3, r3, r7
 80173fc:	2210      	movs	r2, #16
 80173fe:	701a      	strb	r2, [r3, #0]
 8017400:	e005      	b.n	801740e <UART_SetConfig+0x22a>
 8017402:	231b      	movs	r3, #27
 8017404:	2218      	movs	r2, #24
 8017406:	189b      	adds	r3, r3, r2
 8017408:	19db      	adds	r3, r3, r7
 801740a:	2210      	movs	r2, #16
 801740c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801740e:	69fb      	ldr	r3, [r7, #28]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	4a46      	ldr	r2, [pc, #280]	@ (801752c <UART_SetConfig+0x348>)
 8017414:	4293      	cmp	r3, r2
 8017416:	d000      	beq.n	801741a <UART_SetConfig+0x236>
 8017418:	e09a      	b.n	8017550 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801741a:	231b      	movs	r3, #27
 801741c:	2218      	movs	r2, #24
 801741e:	189b      	adds	r3, r3, r2
 8017420:	19db      	adds	r3, r3, r7
 8017422:	781b      	ldrb	r3, [r3, #0]
 8017424:	2b08      	cmp	r3, #8
 8017426:	d01d      	beq.n	8017464 <UART_SetConfig+0x280>
 8017428:	dc20      	bgt.n	801746c <UART_SetConfig+0x288>
 801742a:	2b04      	cmp	r3, #4
 801742c:	d015      	beq.n	801745a <UART_SetConfig+0x276>
 801742e:	dc1d      	bgt.n	801746c <UART_SetConfig+0x288>
 8017430:	2b00      	cmp	r3, #0
 8017432:	d002      	beq.n	801743a <UART_SetConfig+0x256>
 8017434:	2b02      	cmp	r3, #2
 8017436:	d005      	beq.n	8017444 <UART_SetConfig+0x260>
 8017438:	e018      	b.n	801746c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801743a:	f7fd fe4b 	bl	80150d4 <HAL_RCC_GetPCLK1Freq>
 801743e:	0003      	movs	r3, r0
 8017440:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017442:	e01c      	b.n	801747e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017444:	4b3c      	ldr	r3, [pc, #240]	@ (8017538 <UART_SetConfig+0x354>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	2210      	movs	r2, #16
 801744a:	4013      	ands	r3, r2
 801744c:	d002      	beq.n	8017454 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801744e:	4b3e      	ldr	r3, [pc, #248]	@ (8017548 <UART_SetConfig+0x364>)
 8017450:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017452:	e014      	b.n	801747e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017454:	4b3d      	ldr	r3, [pc, #244]	@ (801754c <UART_SetConfig+0x368>)
 8017456:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017458:	e011      	b.n	801747e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801745a:	f7fd fd8b 	bl	8014f74 <HAL_RCC_GetSysClockFreq>
 801745e:	0003      	movs	r3, r0
 8017460:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017462:	e00c      	b.n	801747e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017464:	2380      	movs	r3, #128	@ 0x80
 8017466:	021b      	lsls	r3, r3, #8
 8017468:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801746a:	e008      	b.n	801747e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801746c:	2300      	movs	r3, #0
 801746e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017470:	231a      	movs	r3, #26
 8017472:	2218      	movs	r2, #24
 8017474:	189b      	adds	r3, r3, r2
 8017476:	19db      	adds	r3, r3, r7
 8017478:	2201      	movs	r2, #1
 801747a:	701a      	strb	r2, [r3, #0]
        break;
 801747c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801747e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017480:	2b00      	cmp	r3, #0
 8017482:	d100      	bne.n	8017486 <UART_SetConfig+0x2a2>
 8017484:	e133      	b.n	80176ee <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017486:	69fb      	ldr	r3, [r7, #28]
 8017488:	685a      	ldr	r2, [r3, #4]
 801748a:	0013      	movs	r3, r2
 801748c:	005b      	lsls	r3, r3, #1
 801748e:	189b      	adds	r3, r3, r2
 8017490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017492:	429a      	cmp	r2, r3
 8017494:	d305      	bcc.n	80174a2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017496:	69fb      	ldr	r3, [r7, #28]
 8017498:	685b      	ldr	r3, [r3, #4]
 801749a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801749c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801749e:	429a      	cmp	r2, r3
 80174a0:	d906      	bls.n	80174b0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80174a2:	231a      	movs	r3, #26
 80174a4:	2218      	movs	r2, #24
 80174a6:	189b      	adds	r3, r3, r2
 80174a8:	19db      	adds	r3, r3, r7
 80174aa:	2201      	movs	r2, #1
 80174ac:	701a      	strb	r2, [r3, #0]
 80174ae:	e11e      	b.n	80176ee <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80174b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174b2:	613b      	str	r3, [r7, #16]
 80174b4:	2300      	movs	r3, #0
 80174b6:	617b      	str	r3, [r7, #20]
 80174b8:	6939      	ldr	r1, [r7, #16]
 80174ba:	697a      	ldr	r2, [r7, #20]
 80174bc:	000b      	movs	r3, r1
 80174be:	0e1b      	lsrs	r3, r3, #24
 80174c0:	0010      	movs	r0, r2
 80174c2:	0205      	lsls	r5, r0, #8
 80174c4:	431d      	orrs	r5, r3
 80174c6:	000b      	movs	r3, r1
 80174c8:	021c      	lsls	r4, r3, #8
 80174ca:	69fb      	ldr	r3, [r7, #28]
 80174cc:	685b      	ldr	r3, [r3, #4]
 80174ce:	085b      	lsrs	r3, r3, #1
 80174d0:	60bb      	str	r3, [r7, #8]
 80174d2:	2300      	movs	r3, #0
 80174d4:	60fb      	str	r3, [r7, #12]
 80174d6:	68b8      	ldr	r0, [r7, #8]
 80174d8:	68f9      	ldr	r1, [r7, #12]
 80174da:	1900      	adds	r0, r0, r4
 80174dc:	4169      	adcs	r1, r5
 80174de:	69fb      	ldr	r3, [r7, #28]
 80174e0:	685b      	ldr	r3, [r3, #4]
 80174e2:	603b      	str	r3, [r7, #0]
 80174e4:	2300      	movs	r3, #0
 80174e6:	607b      	str	r3, [r7, #4]
 80174e8:	683a      	ldr	r2, [r7, #0]
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f7e9 f848 	bl	8000580 <__aeabi_uldivmod>
 80174f0:	0002      	movs	r2, r0
 80174f2:	000b      	movs	r3, r1
 80174f4:	0013      	movs	r3, r2
 80174f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80174f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80174fa:	23c0      	movs	r3, #192	@ 0xc0
 80174fc:	009b      	lsls	r3, r3, #2
 80174fe:	429a      	cmp	r2, r3
 8017500:	d309      	bcc.n	8017516 <UART_SetConfig+0x332>
 8017502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017504:	2380      	movs	r3, #128	@ 0x80
 8017506:	035b      	lsls	r3, r3, #13
 8017508:	429a      	cmp	r2, r3
 801750a:	d204      	bcs.n	8017516 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017512:	60da      	str	r2, [r3, #12]
 8017514:	e0eb      	b.n	80176ee <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017516:	231a      	movs	r3, #26
 8017518:	2218      	movs	r2, #24
 801751a:	189b      	adds	r3, r3, r2
 801751c:	19db      	adds	r3, r3, r7
 801751e:	2201      	movs	r2, #1
 8017520:	701a      	strb	r2, [r3, #0]
 8017522:	e0e4      	b.n	80176ee <UART_SetConfig+0x50a>
 8017524:	efff69f3 	.word	0xefff69f3
 8017528:	ffffcfff 	.word	0xffffcfff
 801752c:	40004800 	.word	0x40004800
 8017530:	fffff4ff 	.word	0xfffff4ff
 8017534:	40013800 	.word	0x40013800
 8017538:	40021000 	.word	0x40021000
 801753c:	40004400 	.word	0x40004400
 8017540:	40004c00 	.word	0x40004c00
 8017544:	40005000 	.word	0x40005000
 8017548:	003d0900 	.word	0x003d0900
 801754c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017550:	69fb      	ldr	r3, [r7, #28]
 8017552:	69da      	ldr	r2, [r3, #28]
 8017554:	2380      	movs	r3, #128	@ 0x80
 8017556:	021b      	lsls	r3, r3, #8
 8017558:	429a      	cmp	r2, r3
 801755a:	d000      	beq.n	801755e <UART_SetConfig+0x37a>
 801755c:	e070      	b.n	8017640 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801755e:	231b      	movs	r3, #27
 8017560:	2218      	movs	r2, #24
 8017562:	189b      	adds	r3, r3, r2
 8017564:	19db      	adds	r3, r3, r7
 8017566:	781b      	ldrb	r3, [r3, #0]
 8017568:	2b08      	cmp	r3, #8
 801756a:	d822      	bhi.n	80175b2 <UART_SetConfig+0x3ce>
 801756c:	009a      	lsls	r2, r3, #2
 801756e:	4b67      	ldr	r3, [pc, #412]	@ (801770c <UART_SetConfig+0x528>)
 8017570:	18d3      	adds	r3, r2, r3
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017576:	f7fd fdad 	bl	80150d4 <HAL_RCC_GetPCLK1Freq>
 801757a:	0003      	movs	r3, r0
 801757c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801757e:	e021      	b.n	80175c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017580:	f7fd fdbe 	bl	8015100 <HAL_RCC_GetPCLK2Freq>
 8017584:	0003      	movs	r3, r0
 8017586:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017588:	e01c      	b.n	80175c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801758a:	4b61      	ldr	r3, [pc, #388]	@ (8017710 <UART_SetConfig+0x52c>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	2210      	movs	r2, #16
 8017590:	4013      	ands	r3, r2
 8017592:	d002      	beq.n	801759a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017594:	4b5f      	ldr	r3, [pc, #380]	@ (8017714 <UART_SetConfig+0x530>)
 8017596:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017598:	e014      	b.n	80175c4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801759a:	4b5f      	ldr	r3, [pc, #380]	@ (8017718 <UART_SetConfig+0x534>)
 801759c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801759e:	e011      	b.n	80175c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80175a0:	f7fd fce8 	bl	8014f74 <HAL_RCC_GetSysClockFreq>
 80175a4:	0003      	movs	r3, r0
 80175a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175a8:	e00c      	b.n	80175c4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80175aa:	2380      	movs	r3, #128	@ 0x80
 80175ac:	021b      	lsls	r3, r3, #8
 80175ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175b0:	e008      	b.n	80175c4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80175b2:	2300      	movs	r3, #0
 80175b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80175b6:	231a      	movs	r3, #26
 80175b8:	2218      	movs	r2, #24
 80175ba:	189b      	adds	r3, r3, r2
 80175bc:	19db      	adds	r3, r3, r7
 80175be:	2201      	movs	r2, #1
 80175c0:	701a      	strb	r2, [r3, #0]
        break;
 80175c2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80175c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d100      	bne.n	80175cc <UART_SetConfig+0x3e8>
 80175ca:	e090      	b.n	80176ee <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80175cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175ce:	005a      	lsls	r2, r3, #1
 80175d0:	69fb      	ldr	r3, [r7, #28]
 80175d2:	685b      	ldr	r3, [r3, #4]
 80175d4:	085b      	lsrs	r3, r3, #1
 80175d6:	18d2      	adds	r2, r2, r3
 80175d8:	69fb      	ldr	r3, [r7, #28]
 80175da:	685b      	ldr	r3, [r3, #4]
 80175dc:	0019      	movs	r1, r3
 80175de:	0010      	movs	r0, r2
 80175e0:	f7e8 fde0 	bl	80001a4 <__udivsi3>
 80175e4:	0003      	movs	r3, r0
 80175e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80175e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175ea:	2b0f      	cmp	r3, #15
 80175ec:	d921      	bls.n	8017632 <UART_SetConfig+0x44e>
 80175ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80175f0:	2380      	movs	r3, #128	@ 0x80
 80175f2:	025b      	lsls	r3, r3, #9
 80175f4:	429a      	cmp	r2, r3
 80175f6:	d21c      	bcs.n	8017632 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80175f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175fa:	b29a      	uxth	r2, r3
 80175fc:	200e      	movs	r0, #14
 80175fe:	2418      	movs	r4, #24
 8017600:	1903      	adds	r3, r0, r4
 8017602:	19db      	adds	r3, r3, r7
 8017604:	210f      	movs	r1, #15
 8017606:	438a      	bics	r2, r1
 8017608:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801760c:	085b      	lsrs	r3, r3, #1
 801760e:	b29b      	uxth	r3, r3
 8017610:	2207      	movs	r2, #7
 8017612:	4013      	ands	r3, r2
 8017614:	b299      	uxth	r1, r3
 8017616:	1903      	adds	r3, r0, r4
 8017618:	19db      	adds	r3, r3, r7
 801761a:	1902      	adds	r2, r0, r4
 801761c:	19d2      	adds	r2, r2, r7
 801761e:	8812      	ldrh	r2, [r2, #0]
 8017620:	430a      	orrs	r2, r1
 8017622:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8017624:	69fb      	ldr	r3, [r7, #28]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	1902      	adds	r2, r0, r4
 801762a:	19d2      	adds	r2, r2, r7
 801762c:	8812      	ldrh	r2, [r2, #0]
 801762e:	60da      	str	r2, [r3, #12]
 8017630:	e05d      	b.n	80176ee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017632:	231a      	movs	r3, #26
 8017634:	2218      	movs	r2, #24
 8017636:	189b      	adds	r3, r3, r2
 8017638:	19db      	adds	r3, r3, r7
 801763a:	2201      	movs	r2, #1
 801763c:	701a      	strb	r2, [r3, #0]
 801763e:	e056      	b.n	80176ee <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8017640:	231b      	movs	r3, #27
 8017642:	2218      	movs	r2, #24
 8017644:	189b      	adds	r3, r3, r2
 8017646:	19db      	adds	r3, r3, r7
 8017648:	781b      	ldrb	r3, [r3, #0]
 801764a:	2b08      	cmp	r3, #8
 801764c:	d822      	bhi.n	8017694 <UART_SetConfig+0x4b0>
 801764e:	009a      	lsls	r2, r3, #2
 8017650:	4b32      	ldr	r3, [pc, #200]	@ (801771c <UART_SetConfig+0x538>)
 8017652:	18d3      	adds	r3, r2, r3
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017658:	f7fd fd3c 	bl	80150d4 <HAL_RCC_GetPCLK1Freq>
 801765c:	0003      	movs	r3, r0
 801765e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017660:	e021      	b.n	80176a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017662:	f7fd fd4d 	bl	8015100 <HAL_RCC_GetPCLK2Freq>
 8017666:	0003      	movs	r3, r0
 8017668:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801766a:	e01c      	b.n	80176a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801766c:	4b28      	ldr	r3, [pc, #160]	@ (8017710 <UART_SetConfig+0x52c>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2210      	movs	r2, #16
 8017672:	4013      	ands	r3, r2
 8017674:	d002      	beq.n	801767c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017676:	4b27      	ldr	r3, [pc, #156]	@ (8017714 <UART_SetConfig+0x530>)
 8017678:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801767a:	e014      	b.n	80176a6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801767c:	4b26      	ldr	r3, [pc, #152]	@ (8017718 <UART_SetConfig+0x534>)
 801767e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017680:	e011      	b.n	80176a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017682:	f7fd fc77 	bl	8014f74 <HAL_RCC_GetSysClockFreq>
 8017686:	0003      	movs	r3, r0
 8017688:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801768a:	e00c      	b.n	80176a6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801768c:	2380      	movs	r3, #128	@ 0x80
 801768e:	021b      	lsls	r3, r3, #8
 8017690:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017692:	e008      	b.n	80176a6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8017694:	2300      	movs	r3, #0
 8017696:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017698:	231a      	movs	r3, #26
 801769a:	2218      	movs	r2, #24
 801769c:	189b      	adds	r3, r3, r2
 801769e:	19db      	adds	r3, r3, r7
 80176a0:	2201      	movs	r2, #1
 80176a2:	701a      	strb	r2, [r3, #0]
        break;
 80176a4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80176a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d020      	beq.n	80176ee <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80176ac:	69fb      	ldr	r3, [r7, #28]
 80176ae:	685b      	ldr	r3, [r3, #4]
 80176b0:	085a      	lsrs	r2, r3, #1
 80176b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176b4:	18d2      	adds	r2, r2, r3
 80176b6:	69fb      	ldr	r3, [r7, #28]
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	0019      	movs	r1, r3
 80176bc:	0010      	movs	r0, r2
 80176be:	f7e8 fd71 	bl	80001a4 <__udivsi3>
 80176c2:	0003      	movs	r3, r0
 80176c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80176c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176c8:	2b0f      	cmp	r3, #15
 80176ca:	d90a      	bls.n	80176e2 <UART_SetConfig+0x4fe>
 80176cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80176ce:	2380      	movs	r3, #128	@ 0x80
 80176d0:	025b      	lsls	r3, r3, #9
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d205      	bcs.n	80176e2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80176d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176d8:	b29a      	uxth	r2, r3
 80176da:	69fb      	ldr	r3, [r7, #28]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	60da      	str	r2, [r3, #12]
 80176e0:	e005      	b.n	80176ee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80176e2:	231a      	movs	r3, #26
 80176e4:	2218      	movs	r2, #24
 80176e6:	189b      	adds	r3, r3, r2
 80176e8:	19db      	adds	r3, r3, r7
 80176ea:	2201      	movs	r2, #1
 80176ec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80176ee:	69fb      	ldr	r3, [r7, #28]
 80176f0:	2200      	movs	r2, #0
 80176f2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80176f4:	69fb      	ldr	r3, [r7, #28]
 80176f6:	2200      	movs	r2, #0
 80176f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80176fa:	231a      	movs	r3, #26
 80176fc:	2218      	movs	r2, #24
 80176fe:	189b      	adds	r3, r3, r2
 8017700:	19db      	adds	r3, r3, r7
 8017702:	781b      	ldrb	r3, [r3, #0]
}
 8017704:	0018      	movs	r0, r3
 8017706:	46bd      	mov	sp, r7
 8017708:	b00e      	add	sp, #56	@ 0x38
 801770a:	bdb0      	pop	{r4, r5, r7, pc}
 801770c:	080248f4 	.word	0x080248f4
 8017710:	40021000 	.word	0x40021000
 8017714:	003d0900 	.word	0x003d0900
 8017718:	00f42400 	.word	0x00f42400
 801771c:	08024918 	.word	0x08024918

08017720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b082      	sub	sp, #8
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801772c:	2201      	movs	r2, #1
 801772e:	4013      	ands	r3, r2
 8017730:	d00b      	beq.n	801774a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	685b      	ldr	r3, [r3, #4]
 8017738:	4a4a      	ldr	r2, [pc, #296]	@ (8017864 <UART_AdvFeatureConfig+0x144>)
 801773a:	4013      	ands	r3, r2
 801773c:	0019      	movs	r1, r3
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	430a      	orrs	r2, r1
 8017748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801774e:	2202      	movs	r2, #2
 8017750:	4013      	ands	r3, r2
 8017752:	d00b      	beq.n	801776c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	685b      	ldr	r3, [r3, #4]
 801775a:	4a43      	ldr	r2, [pc, #268]	@ (8017868 <UART_AdvFeatureConfig+0x148>)
 801775c:	4013      	ands	r3, r2
 801775e:	0019      	movs	r1, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	430a      	orrs	r2, r1
 801776a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017770:	2204      	movs	r2, #4
 8017772:	4013      	ands	r3, r2
 8017774:	d00b      	beq.n	801778e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	685b      	ldr	r3, [r3, #4]
 801777c:	4a3b      	ldr	r2, [pc, #236]	@ (801786c <UART_AdvFeatureConfig+0x14c>)
 801777e:	4013      	ands	r3, r2
 8017780:	0019      	movs	r1, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	430a      	orrs	r2, r1
 801778c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017792:	2208      	movs	r2, #8
 8017794:	4013      	ands	r3, r2
 8017796:	d00b      	beq.n	80177b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	4a34      	ldr	r2, [pc, #208]	@ (8017870 <UART_AdvFeatureConfig+0x150>)
 80177a0:	4013      	ands	r3, r2
 80177a2:	0019      	movs	r1, r3
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	430a      	orrs	r2, r1
 80177ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177b4:	2210      	movs	r2, #16
 80177b6:	4013      	ands	r3, r2
 80177b8:	d00b      	beq.n	80177d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	689b      	ldr	r3, [r3, #8]
 80177c0:	4a2c      	ldr	r2, [pc, #176]	@ (8017874 <UART_AdvFeatureConfig+0x154>)
 80177c2:	4013      	ands	r3, r2
 80177c4:	0019      	movs	r1, r3
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	430a      	orrs	r2, r1
 80177d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177d6:	2220      	movs	r2, #32
 80177d8:	4013      	ands	r3, r2
 80177da:	d00b      	beq.n	80177f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	689b      	ldr	r3, [r3, #8]
 80177e2:	4a25      	ldr	r2, [pc, #148]	@ (8017878 <UART_AdvFeatureConfig+0x158>)
 80177e4:	4013      	ands	r3, r2
 80177e6:	0019      	movs	r1, r3
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	430a      	orrs	r2, r1
 80177f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177f8:	2240      	movs	r2, #64	@ 0x40
 80177fa:	4013      	ands	r3, r2
 80177fc:	d01d      	beq.n	801783a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	685b      	ldr	r3, [r3, #4]
 8017804:	4a1d      	ldr	r2, [pc, #116]	@ (801787c <UART_AdvFeatureConfig+0x15c>)
 8017806:	4013      	ands	r3, r2
 8017808:	0019      	movs	r1, r3
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	430a      	orrs	r2, r1
 8017814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801781a:	2380      	movs	r3, #128	@ 0x80
 801781c:	035b      	lsls	r3, r3, #13
 801781e:	429a      	cmp	r2, r3
 8017820:	d10b      	bne.n	801783a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	685b      	ldr	r3, [r3, #4]
 8017828:	4a15      	ldr	r2, [pc, #84]	@ (8017880 <UART_AdvFeatureConfig+0x160>)
 801782a:	4013      	ands	r3, r2
 801782c:	0019      	movs	r1, r3
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	430a      	orrs	r2, r1
 8017838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801783e:	2280      	movs	r2, #128	@ 0x80
 8017840:	4013      	ands	r3, r2
 8017842:	d00b      	beq.n	801785c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	685b      	ldr	r3, [r3, #4]
 801784a:	4a0e      	ldr	r2, [pc, #56]	@ (8017884 <UART_AdvFeatureConfig+0x164>)
 801784c:	4013      	ands	r3, r2
 801784e:	0019      	movs	r1, r3
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	430a      	orrs	r2, r1
 801785a:	605a      	str	r2, [r3, #4]
  }
}
 801785c:	46c0      	nop			@ (mov r8, r8)
 801785e:	46bd      	mov	sp, r7
 8017860:	b002      	add	sp, #8
 8017862:	bd80      	pop	{r7, pc}
 8017864:	fffdffff 	.word	0xfffdffff
 8017868:	fffeffff 	.word	0xfffeffff
 801786c:	fffbffff 	.word	0xfffbffff
 8017870:	ffff7fff 	.word	0xffff7fff
 8017874:	ffffefff 	.word	0xffffefff
 8017878:	ffffdfff 	.word	0xffffdfff
 801787c:	ffefffff 	.word	0xffefffff
 8017880:	ff9fffff 	.word	0xff9fffff
 8017884:	fff7ffff 	.word	0xfff7ffff

08017888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b092      	sub	sp, #72	@ 0x48
 801788c:	af02      	add	r7, sp, #8
 801788e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	2284      	movs	r2, #132	@ 0x84
 8017894:	2100      	movs	r1, #0
 8017896:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017898:	f7f6 fd36 	bl	800e308 <HAL_GetTick>
 801789c:	0003      	movs	r3, r0
 801789e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	2208      	movs	r2, #8
 80178a8:	4013      	ands	r3, r2
 80178aa:	2b08      	cmp	r3, #8
 80178ac:	d12c      	bne.n	8017908 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80178ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80178b0:	2280      	movs	r2, #128	@ 0x80
 80178b2:	0391      	lsls	r1, r2, #14
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	4a46      	ldr	r2, [pc, #280]	@ (80179d0 <UART_CheckIdleState+0x148>)
 80178b8:	9200      	str	r2, [sp, #0]
 80178ba:	2200      	movs	r2, #0
 80178bc:	f000 f88c 	bl	80179d8 <UART_WaitOnFlagUntilTimeout>
 80178c0:	1e03      	subs	r3, r0, #0
 80178c2:	d021      	beq.n	8017908 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178c4:	f3ef 8310 	mrs	r3, PRIMASK
 80178c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80178ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80178cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80178ce:	2301      	movs	r3, #1
 80178d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178d4:	f383 8810 	msr	PRIMASK, r3
}
 80178d8:	46c0      	nop			@ (mov r8, r8)
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	681a      	ldr	r2, [r3, #0]
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	2180      	movs	r1, #128	@ 0x80
 80178e6:	438a      	bics	r2, r1
 80178e8:	601a      	str	r2, [r3, #0]
 80178ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178f0:	f383 8810 	msr	PRIMASK, r3
}
 80178f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	2220      	movs	r2, #32
 80178fa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	2278      	movs	r2, #120	@ 0x78
 8017900:	2100      	movs	r1, #0
 8017902:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017904:	2303      	movs	r3, #3
 8017906:	e05f      	b.n	80179c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	2204      	movs	r2, #4
 8017910:	4013      	ands	r3, r2
 8017912:	2b04      	cmp	r3, #4
 8017914:	d146      	bne.n	80179a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017918:	2280      	movs	r2, #128	@ 0x80
 801791a:	03d1      	lsls	r1, r2, #15
 801791c:	6878      	ldr	r0, [r7, #4]
 801791e:	4a2c      	ldr	r2, [pc, #176]	@ (80179d0 <UART_CheckIdleState+0x148>)
 8017920:	9200      	str	r2, [sp, #0]
 8017922:	2200      	movs	r2, #0
 8017924:	f000 f858 	bl	80179d8 <UART_WaitOnFlagUntilTimeout>
 8017928:	1e03      	subs	r3, r0, #0
 801792a:	d03b      	beq.n	80179a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801792c:	f3ef 8310 	mrs	r3, PRIMASK
 8017930:	60fb      	str	r3, [r7, #12]
  return(result);
 8017932:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017934:	637b      	str	r3, [r7, #52]	@ 0x34
 8017936:	2301      	movs	r3, #1
 8017938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801793a:	693b      	ldr	r3, [r7, #16]
 801793c:	f383 8810 	msr	PRIMASK, r3
}
 8017940:	46c0      	nop			@ (mov r8, r8)
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	681a      	ldr	r2, [r3, #0]
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	4921      	ldr	r1, [pc, #132]	@ (80179d4 <UART_CheckIdleState+0x14c>)
 801794e:	400a      	ands	r2, r1
 8017950:	601a      	str	r2, [r3, #0]
 8017952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017954:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	f383 8810 	msr	PRIMASK, r3
}
 801795c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801795e:	f3ef 8310 	mrs	r3, PRIMASK
 8017962:	61bb      	str	r3, [r7, #24]
  return(result);
 8017964:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017966:	633b      	str	r3, [r7, #48]	@ 0x30
 8017968:	2301      	movs	r3, #1
 801796a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801796c:	69fb      	ldr	r3, [r7, #28]
 801796e:	f383 8810 	msr	PRIMASK, r3
}
 8017972:	46c0      	nop			@ (mov r8, r8)
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	689a      	ldr	r2, [r3, #8]
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	2101      	movs	r1, #1
 8017980:	438a      	bics	r2, r1
 8017982:	609a      	str	r2, [r3, #8]
 8017984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017986:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017988:	6a3b      	ldr	r3, [r7, #32]
 801798a:	f383 8810 	msr	PRIMASK, r3
}
 801798e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	2280      	movs	r2, #128	@ 0x80
 8017994:	2120      	movs	r1, #32
 8017996:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2278      	movs	r2, #120	@ 0x78
 801799c:	2100      	movs	r1, #0
 801799e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80179a0:	2303      	movs	r3, #3
 80179a2:	e011      	b.n	80179c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2220      	movs	r2, #32
 80179a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2280      	movs	r2, #128	@ 0x80
 80179ae:	2120      	movs	r1, #32
 80179b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2200      	movs	r2, #0
 80179b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2200      	movs	r2, #0
 80179bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2278      	movs	r2, #120	@ 0x78
 80179c2:	2100      	movs	r1, #0
 80179c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80179c6:	2300      	movs	r3, #0
}
 80179c8:	0018      	movs	r0, r3
 80179ca:	46bd      	mov	sp, r7
 80179cc:	b010      	add	sp, #64	@ 0x40
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	01ffffff 	.word	0x01ffffff
 80179d4:	fffffedf 	.word	0xfffffedf

080179d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b084      	sub	sp, #16
 80179dc:	af00      	add	r7, sp, #0
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	60b9      	str	r1, [r7, #8]
 80179e2:	603b      	str	r3, [r7, #0]
 80179e4:	1dfb      	adds	r3, r7, #7
 80179e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80179e8:	e04b      	b.n	8017a82 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80179ea:	69bb      	ldr	r3, [r7, #24]
 80179ec:	3301      	adds	r3, #1
 80179ee:	d048      	beq.n	8017a82 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80179f0:	f7f6 fc8a 	bl	800e308 <HAL_GetTick>
 80179f4:	0002      	movs	r2, r0
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	1ad3      	subs	r3, r2, r3
 80179fa:	69ba      	ldr	r2, [r7, #24]
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d302      	bcc.n	8017a06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8017a00:	69bb      	ldr	r3, [r7, #24]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d101      	bne.n	8017a0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8017a06:	2303      	movs	r3, #3
 8017a08:	e04b      	b.n	8017aa2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	2204      	movs	r2, #4
 8017a12:	4013      	ands	r3, r2
 8017a14:	d035      	beq.n	8017a82 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	69db      	ldr	r3, [r3, #28]
 8017a1c:	2208      	movs	r2, #8
 8017a1e:	4013      	ands	r3, r2
 8017a20:	2b08      	cmp	r3, #8
 8017a22:	d111      	bne.n	8017a48 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	2208      	movs	r2, #8
 8017a2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	0018      	movs	r0, r3
 8017a30:	f000 f9ca 	bl	8017dc8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	2284      	movs	r2, #132	@ 0x84
 8017a38:	2108      	movs	r1, #8
 8017a3a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2278      	movs	r2, #120	@ 0x78
 8017a40:	2100      	movs	r1, #0
 8017a42:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017a44:	2301      	movs	r3, #1
 8017a46:	e02c      	b.n	8017aa2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	69da      	ldr	r2, [r3, #28]
 8017a4e:	2380      	movs	r3, #128	@ 0x80
 8017a50:	011b      	lsls	r3, r3, #4
 8017a52:	401a      	ands	r2, r3
 8017a54:	2380      	movs	r3, #128	@ 0x80
 8017a56:	011b      	lsls	r3, r3, #4
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d112      	bne.n	8017a82 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	2280      	movs	r2, #128	@ 0x80
 8017a62:	0112      	lsls	r2, r2, #4
 8017a64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	0018      	movs	r0, r3
 8017a6a:	f000 f9ad 	bl	8017dc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	2284      	movs	r2, #132	@ 0x84
 8017a72:	2120      	movs	r1, #32
 8017a74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	2278      	movs	r2, #120	@ 0x78
 8017a7a:	2100      	movs	r1, #0
 8017a7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8017a7e:	2303      	movs	r3, #3
 8017a80:	e00f      	b.n	8017aa2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	69db      	ldr	r3, [r3, #28]
 8017a88:	68ba      	ldr	r2, [r7, #8]
 8017a8a:	4013      	ands	r3, r2
 8017a8c:	68ba      	ldr	r2, [r7, #8]
 8017a8e:	1ad3      	subs	r3, r2, r3
 8017a90:	425a      	negs	r2, r3
 8017a92:	4153      	adcs	r3, r2
 8017a94:	b2db      	uxtb	r3, r3
 8017a96:	001a      	movs	r2, r3
 8017a98:	1dfb      	adds	r3, r7, #7
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d0a4      	beq.n	80179ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017aa0:	2300      	movs	r3, #0
}
 8017aa2:	0018      	movs	r0, r3
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	b004      	add	sp, #16
 8017aa8:	bd80      	pop	{r7, pc}
	...

08017aac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b090      	sub	sp, #64	@ 0x40
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	1dbb      	adds	r3, r7, #6
 8017ab8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	68ba      	ldr	r2, [r7, #8]
 8017abe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	1dba      	adds	r2, r7, #6
 8017ac4:	2158      	movs	r1, #88	@ 0x58
 8017ac6:	8812      	ldrh	r2, [r2, #0]
 8017ac8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	1dba      	adds	r2, r7, #6
 8017ace:	215a      	movs	r1, #90	@ 0x5a
 8017ad0:	8812      	ldrh	r2, [r2, #0]
 8017ad2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	689a      	ldr	r2, [r3, #8]
 8017ade:	2380      	movs	r3, #128	@ 0x80
 8017ae0:	015b      	lsls	r3, r3, #5
 8017ae2:	429a      	cmp	r2, r3
 8017ae4:	d10d      	bne.n	8017b02 <UART_Start_Receive_IT+0x56>
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	691b      	ldr	r3, [r3, #16]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d104      	bne.n	8017af8 <UART_Start_Receive_IT+0x4c>
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	225c      	movs	r2, #92	@ 0x5c
 8017af2:	4950      	ldr	r1, [pc, #320]	@ (8017c34 <UART_Start_Receive_IT+0x188>)
 8017af4:	5299      	strh	r1, [r3, r2]
 8017af6:	e02e      	b.n	8017b56 <UART_Start_Receive_IT+0xaa>
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	225c      	movs	r2, #92	@ 0x5c
 8017afc:	21ff      	movs	r1, #255	@ 0xff
 8017afe:	5299      	strh	r1, [r3, r2]
 8017b00:	e029      	b.n	8017b56 <UART_Start_Receive_IT+0xaa>
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	689b      	ldr	r3, [r3, #8]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d10d      	bne.n	8017b26 <UART_Start_Receive_IT+0x7a>
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	691b      	ldr	r3, [r3, #16]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d104      	bne.n	8017b1c <UART_Start_Receive_IT+0x70>
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	225c      	movs	r2, #92	@ 0x5c
 8017b16:	21ff      	movs	r1, #255	@ 0xff
 8017b18:	5299      	strh	r1, [r3, r2]
 8017b1a:	e01c      	b.n	8017b56 <UART_Start_Receive_IT+0xaa>
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	225c      	movs	r2, #92	@ 0x5c
 8017b20:	217f      	movs	r1, #127	@ 0x7f
 8017b22:	5299      	strh	r1, [r3, r2]
 8017b24:	e017      	b.n	8017b56 <UART_Start_Receive_IT+0xaa>
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	689a      	ldr	r2, [r3, #8]
 8017b2a:	2380      	movs	r3, #128	@ 0x80
 8017b2c:	055b      	lsls	r3, r3, #21
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	d10d      	bne.n	8017b4e <UART_Start_Receive_IT+0xa2>
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	691b      	ldr	r3, [r3, #16]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d104      	bne.n	8017b44 <UART_Start_Receive_IT+0x98>
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	225c      	movs	r2, #92	@ 0x5c
 8017b3e:	217f      	movs	r1, #127	@ 0x7f
 8017b40:	5299      	strh	r1, [r3, r2]
 8017b42:	e008      	b.n	8017b56 <UART_Start_Receive_IT+0xaa>
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	225c      	movs	r2, #92	@ 0x5c
 8017b48:	213f      	movs	r1, #63	@ 0x3f
 8017b4a:	5299      	strh	r1, [r3, r2]
 8017b4c:	e003      	b.n	8017b56 <UART_Start_Receive_IT+0xaa>
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	225c      	movs	r2, #92	@ 0x5c
 8017b52:	2100      	movs	r1, #0
 8017b54:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	2284      	movs	r2, #132	@ 0x84
 8017b5a:	2100      	movs	r1, #0
 8017b5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	2280      	movs	r2, #128	@ 0x80
 8017b62:	2122      	movs	r1, #34	@ 0x22
 8017b64:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b66:	f3ef 8310 	mrs	r3, PRIMASK
 8017b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017b70:	2301      	movs	r3, #1
 8017b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b76:	f383 8810 	msr	PRIMASK, r3
}
 8017b7a:	46c0      	nop			@ (mov r8, r8)
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	689a      	ldr	r2, [r3, #8]
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	2101      	movs	r1, #1
 8017b88:	430a      	orrs	r2, r1
 8017b8a:	609a      	str	r2, [r3, #8]
 8017b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b92:	f383 8810 	msr	PRIMASK, r3
}
 8017b96:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	689a      	ldr	r2, [r3, #8]
 8017b9c:	2380      	movs	r3, #128	@ 0x80
 8017b9e:	015b      	lsls	r3, r3, #5
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d107      	bne.n	8017bb4 <UART_Start_Receive_IT+0x108>
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	691b      	ldr	r3, [r3, #16]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d103      	bne.n	8017bb4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	4a22      	ldr	r2, [pc, #136]	@ (8017c38 <UART_Start_Receive_IT+0x18c>)
 8017bb0:	669a      	str	r2, [r3, #104]	@ 0x68
 8017bb2:	e002      	b.n	8017bba <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	4a21      	ldr	r2, [pc, #132]	@ (8017c3c <UART_Start_Receive_IT+0x190>)
 8017bb8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	691b      	ldr	r3, [r3, #16]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d019      	beq.n	8017bf6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8017bc6:	61fb      	str	r3, [r7, #28]
  return(result);
 8017bc8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8017bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8017bcc:	2301      	movs	r3, #1
 8017bce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bd0:	6a3b      	ldr	r3, [r7, #32]
 8017bd2:	f383 8810 	msr	PRIMASK, r3
}
 8017bd6:	46c0      	nop			@ (mov r8, r8)
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	681a      	ldr	r2, [r3, #0]
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	2190      	movs	r1, #144	@ 0x90
 8017be4:	0049      	lsls	r1, r1, #1
 8017be6:	430a      	orrs	r2, r1
 8017be8:	601a      	str	r2, [r3, #0]
 8017bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bf0:	f383 8810 	msr	PRIMASK, r3
}
 8017bf4:	e018      	b.n	8017c28 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8017bfa:	613b      	str	r3, [r7, #16]
  return(result);
 8017bfc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8017bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017c00:	2301      	movs	r3, #1
 8017c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c04:	697b      	ldr	r3, [r7, #20]
 8017c06:	f383 8810 	msr	PRIMASK, r3
}
 8017c0a:	46c0      	nop			@ (mov r8, r8)
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	681a      	ldr	r2, [r3, #0]
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	2120      	movs	r1, #32
 8017c18:	430a      	orrs	r2, r1
 8017c1a:	601a      	str	r2, [r3, #0]
 8017c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c20:	69bb      	ldr	r3, [r7, #24]
 8017c22:	f383 8810 	msr	PRIMASK, r3
}
 8017c26:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8017c28:	2300      	movs	r3, #0
}
 8017c2a:	0018      	movs	r0, r3
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	b010      	add	sp, #64	@ 0x40
 8017c30:	bd80      	pop	{r7, pc}
 8017c32:	46c0      	nop			@ (mov r8, r8)
 8017c34:	000001ff 	.word	0x000001ff
 8017c38:	080183ad 	.word	0x080183ad
 8017c3c:	080181e1 	.word	0x080181e1

08017c40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b090      	sub	sp, #64	@ 0x40
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	60f8      	str	r0, [r7, #12]
 8017c48:	60b9      	str	r1, [r7, #8]
 8017c4a:	1dbb      	adds	r3, r7, #6
 8017c4c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	68ba      	ldr	r2, [r7, #8]
 8017c52:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	1dba      	adds	r2, r7, #6
 8017c58:	2158      	movs	r1, #88	@ 0x58
 8017c5a:	8812      	ldrh	r2, [r2, #0]
 8017c5c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	2284      	movs	r2, #132	@ 0x84
 8017c62:	2100      	movs	r1, #0
 8017c64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	2280      	movs	r2, #128	@ 0x80
 8017c6a:	2122      	movs	r1, #34	@ 0x22
 8017c6c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d028      	beq.n	8017cc8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c7a:	4a3e      	ldr	r2, [pc, #248]	@ (8017d74 <UART_Start_Receive_DMA+0x134>)
 8017c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c82:	4a3d      	ldr	r2, [pc, #244]	@ (8017d78 <UART_Start_Receive_DMA+0x138>)
 8017c84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c8a:	4a3c      	ldr	r2, [pc, #240]	@ (8017d7c <UART_Start_Receive_DMA+0x13c>)
 8017c8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c92:	2200      	movs	r2, #0
 8017c94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	3324      	adds	r3, #36	@ 0x24
 8017ca0:	0019      	movs	r1, r3
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017ca6:	001a      	movs	r2, r3
 8017ca8:	1dbb      	adds	r3, r7, #6
 8017caa:	881b      	ldrh	r3, [r3, #0]
 8017cac:	f7f7 f868 	bl	800ed80 <HAL_DMA_Start_IT>
 8017cb0:	1e03      	subs	r3, r0, #0
 8017cb2:	d009      	beq.n	8017cc8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	2284      	movs	r2, #132	@ 0x84
 8017cb8:	2110      	movs	r1, #16
 8017cba:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	2280      	movs	r2, #128	@ 0x80
 8017cc0:	2120      	movs	r1, #32
 8017cc2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	e050      	b.n	8017d6a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	691b      	ldr	r3, [r3, #16]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d019      	beq.n	8017d04 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8017cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017cda:	2301      	movs	r3, #1
 8017cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ce0:	f383 8810 	msr	PRIMASK, r3
}
 8017ce4:	46c0      	nop			@ (mov r8, r8)
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	681a      	ldr	r2, [r3, #0]
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	2180      	movs	r1, #128	@ 0x80
 8017cf2:	0049      	lsls	r1, r1, #1
 8017cf4:	430a      	orrs	r2, r1
 8017cf6:	601a      	str	r2, [r3, #0]
 8017cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cfe:	f383 8810 	msr	PRIMASK, r3
}
 8017d02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d04:	f3ef 8310 	mrs	r3, PRIMASK
 8017d08:	613b      	str	r3, [r7, #16]
  return(result);
 8017d0a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017d0e:	2301      	movs	r3, #1
 8017d10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	f383 8810 	msr	PRIMASK, r3
}
 8017d18:	46c0      	nop			@ (mov r8, r8)
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	689a      	ldr	r2, [r3, #8]
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	2101      	movs	r1, #1
 8017d26:	430a      	orrs	r2, r1
 8017d28:	609a      	str	r2, [r3, #8]
 8017d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d2e:	69bb      	ldr	r3, [r7, #24]
 8017d30:	f383 8810 	msr	PRIMASK, r3
}
 8017d34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d36:	f3ef 8310 	mrs	r3, PRIMASK
 8017d3a:	61fb      	str	r3, [r7, #28]
  return(result);
 8017d3c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017d40:	2301      	movs	r3, #1
 8017d42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d44:	6a3b      	ldr	r3, [r7, #32]
 8017d46:	f383 8810 	msr	PRIMASK, r3
}
 8017d4a:	46c0      	nop			@ (mov r8, r8)
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	689a      	ldr	r2, [r3, #8]
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	2140      	movs	r1, #64	@ 0x40
 8017d58:	430a      	orrs	r2, r1
 8017d5a:	609a      	str	r2, [r3, #8]
 8017d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d62:	f383 8810 	msr	PRIMASK, r3
}
 8017d66:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8017d68:	2300      	movs	r3, #0
}
 8017d6a:	0018      	movs	r0, r3
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	b010      	add	sp, #64	@ 0x40
 8017d70:	bd80      	pop	{r7, pc}
 8017d72:	46c0      	nop			@ (mov r8, r8)
 8017d74:	08017f51 	.word	0x08017f51
 8017d78:	08018085 	.word	0x08018085
 8017d7c:	080180cd 	.word	0x080180cd

08017d80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b086      	sub	sp, #24
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d88:	f3ef 8310 	mrs	r3, PRIMASK
 8017d8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8017d8e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017d90:	617b      	str	r3, [r7, #20]
 8017d92:	2301      	movs	r3, #1
 8017d94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	f383 8810 	msr	PRIMASK, r3
}
 8017d9c:	46c0      	nop			@ (mov r8, r8)
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	21c0      	movs	r1, #192	@ 0xc0
 8017daa:	438a      	bics	r2, r1
 8017dac:	601a      	str	r2, [r3, #0]
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017db2:	693b      	ldr	r3, [r7, #16]
 8017db4:	f383 8810 	msr	PRIMASK, r3
}
 8017db8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	2220      	movs	r2, #32
 8017dbe:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8017dc0:	46c0      	nop			@ (mov r8, r8)
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	b006      	add	sp, #24
 8017dc6:	bd80      	pop	{r7, pc}

08017dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b08e      	sub	sp, #56	@ 0x38
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8017dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8017dd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8017dda:	2301      	movs	r3, #1
 8017ddc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dde:	69bb      	ldr	r3, [r7, #24]
 8017de0:	f383 8810 	msr	PRIMASK, r3
}
 8017de4:	46c0      	nop			@ (mov r8, r8)
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	681a      	ldr	r2, [r3, #0]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	4926      	ldr	r1, [pc, #152]	@ (8017e8c <UART_EndRxTransfer+0xc4>)
 8017df2:	400a      	ands	r2, r1
 8017df4:	601a      	str	r2, [r3, #0]
 8017df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017df8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	f383 8810 	msr	PRIMASK, r3
}
 8017e00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e02:	f3ef 8310 	mrs	r3, PRIMASK
 8017e06:	623b      	str	r3, [r7, #32]
  return(result);
 8017e08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e12:	f383 8810 	msr	PRIMASK, r3
}
 8017e16:	46c0      	nop			@ (mov r8, r8)
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	689a      	ldr	r2, [r3, #8]
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	2101      	movs	r1, #1
 8017e24:	438a      	bics	r2, r1
 8017e26:	609a      	str	r2, [r3, #8]
 8017e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e2e:	f383 8810 	msr	PRIMASK, r3
}
 8017e32:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017e38:	2b01      	cmp	r3, #1
 8017e3a:	d118      	bne.n	8017e6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8017e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8017e42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017e46:	2301      	movs	r3, #1
 8017e48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	f383 8810 	msr	PRIMASK, r3
}
 8017e50:	46c0      	nop			@ (mov r8, r8)
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	681a      	ldr	r2, [r3, #0]
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	2110      	movs	r1, #16
 8017e5e:	438a      	bics	r2, r1
 8017e60:	601a      	str	r2, [r3, #0]
 8017e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e66:	693b      	ldr	r3, [r7, #16]
 8017e68:	f383 8810 	msr	PRIMASK, r3
}
 8017e6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	2280      	movs	r2, #128	@ 0x80
 8017e72:	2120      	movs	r1, #32
 8017e74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	2200      	movs	r2, #0
 8017e7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	2200      	movs	r2, #0
 8017e80:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8017e82:	46c0      	nop			@ (mov r8, r8)
 8017e84:	46bd      	mov	sp, r7
 8017e86:	b00e      	add	sp, #56	@ 0x38
 8017e88:	bd80      	pop	{r7, pc}
 8017e8a:	46c0      	nop			@ (mov r8, r8)
 8017e8c:	fffffedf 	.word	0xfffffedf

08017e90 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b08c      	sub	sp, #48	@ 0x30
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	2220      	movs	r2, #32
 8017ea6:	4013      	ands	r3, r2
 8017ea8:	d135      	bne.n	8017f16 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8017eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eac:	2252      	movs	r2, #82	@ 0x52
 8017eae:	2100      	movs	r1, #0
 8017eb0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8017eb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8017eb8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ec0:	693b      	ldr	r3, [r7, #16]
 8017ec2:	f383 8810 	msr	PRIMASK, r3
}
 8017ec6:	46c0      	nop			@ (mov r8, r8)
 8017ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	689a      	ldr	r2, [r3, #8]
 8017ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	2180      	movs	r1, #128	@ 0x80
 8017ed4:	438a      	bics	r2, r1
 8017ed6:	609a      	str	r2, [r3, #8]
 8017ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	f383 8810 	msr	PRIMASK, r3
}
 8017ee2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8017ee8:	61bb      	str	r3, [r7, #24]
  return(result);
 8017eea:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8017eee:	2301      	movs	r3, #1
 8017ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ef2:	69fb      	ldr	r3, [r7, #28]
 8017ef4:	f383 8810 	msr	PRIMASK, r3
}
 8017ef8:	46c0      	nop			@ (mov r8, r8)
 8017efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	681a      	ldr	r2, [r3, #0]
 8017f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	2140      	movs	r1, #64	@ 0x40
 8017f06:	430a      	orrs	r2, r1
 8017f08:	601a      	str	r2, [r3, #0]
 8017f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f0e:	6a3b      	ldr	r3, [r7, #32]
 8017f10:	f383 8810 	msr	PRIMASK, r3
}
 8017f14:	e006      	b.n	8017f24 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8017f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f18:	228c      	movs	r2, #140	@ 0x8c
 8017f1a:	589b      	ldr	r3, [r3, r2]
 8017f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f1e:	0010      	movs	r0, r2
 8017f20:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017f22:	46c0      	nop			@ (mov r8, r8)
 8017f24:	46c0      	nop			@ (mov r8, r8)
 8017f26:	46bd      	mov	sp, r7
 8017f28:	b00c      	add	sp, #48	@ 0x30
 8017f2a:	bd80      	pop	{r7, pc}

08017f2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b084      	sub	sp, #16
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	2288      	movs	r2, #136	@ 0x88
 8017f3e:	589b      	ldr	r3, [r3, r2]
 8017f40:	68fa      	ldr	r2, [r7, #12]
 8017f42:	0010      	movs	r0, r2
 8017f44:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f46:	46c0      	nop			@ (mov r8, r8)
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	b004      	add	sp, #16
 8017f4c:	bd80      	pop	{r7, pc}
	...

08017f50 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b094      	sub	sp, #80	@ 0x50
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	2220      	movs	r2, #32
 8017f66:	4013      	ands	r3, r2
 8017f68:	d16f      	bne.n	801804a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8017f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f6c:	225a      	movs	r2, #90	@ 0x5a
 8017f6e:	2100      	movs	r1, #0
 8017f70:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f72:	f3ef 8310 	mrs	r3, PRIMASK
 8017f76:	61bb      	str	r3, [r7, #24]
  return(result);
 8017f78:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	f383 8810 	msr	PRIMASK, r3
}
 8017f86:	46c0      	nop			@ (mov r8, r8)
 8017f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	681a      	ldr	r2, [r3, #0]
 8017f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	493b      	ldr	r1, [pc, #236]	@ (8018080 <UART_DMAReceiveCplt+0x130>)
 8017f94:	400a      	ands	r2, r1
 8017f96:	601a      	str	r2, [r3, #0]
 8017f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f9c:	6a3b      	ldr	r3, [r7, #32]
 8017f9e:	f383 8810 	msr	PRIMASK, r3
}
 8017fa2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8017fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8017fae:	2301      	movs	r3, #1
 8017fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fb4:	f383 8810 	msr	PRIMASK, r3
}
 8017fb8:	46c0      	nop			@ (mov r8, r8)
 8017fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	689a      	ldr	r2, [r3, #8]
 8017fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	2101      	movs	r1, #1
 8017fc6:	438a      	bics	r2, r1
 8017fc8:	609a      	str	r2, [r3, #8]
 8017fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fd0:	f383 8810 	msr	PRIMASK, r3
}
 8017fd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8017fda:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017fe6:	f383 8810 	msr	PRIMASK, r3
}
 8017fea:	46c0      	nop			@ (mov r8, r8)
 8017fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	689a      	ldr	r2, [r3, #8]
 8017ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	2140      	movs	r1, #64	@ 0x40
 8017ff8:	438a      	bics	r2, r1
 8017ffa:	609a      	str	r2, [r3, #8]
 8017ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018002:	f383 8810 	msr	PRIMASK, r3
}
 8018006:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801800a:	2280      	movs	r2, #128	@ 0x80
 801800c:	2120      	movs	r1, #32
 801800e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018014:	2b01      	cmp	r3, #1
 8018016:	d118      	bne.n	801804a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018018:	f3ef 8310 	mrs	r3, PRIMASK
 801801c:	60fb      	str	r3, [r7, #12]
  return(result);
 801801e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018022:	2301      	movs	r3, #1
 8018024:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018026:	693b      	ldr	r3, [r7, #16]
 8018028:	f383 8810 	msr	PRIMASK, r3
}
 801802c:	46c0      	nop			@ (mov r8, r8)
 801802e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	681a      	ldr	r2, [r3, #0]
 8018034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	2110      	movs	r1, #16
 801803a:	438a      	bics	r2, r1
 801803c:	601a      	str	r2, [r3, #0]
 801803e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	f383 8810 	msr	PRIMASK, r3
}
 8018048:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801804a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801804c:	2200      	movs	r2, #0
 801804e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018054:	2b01      	cmp	r3, #1
 8018056:	d109      	bne.n	801806c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801805a:	22ac      	movs	r2, #172	@ 0xac
 801805c:	589b      	ldr	r3, [r3, r2]
 801805e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018060:	2158      	movs	r1, #88	@ 0x58
 8018062:	5a51      	ldrh	r1, [r2, r1]
 8018064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018066:	0010      	movs	r0, r2
 8018068:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801806a:	e005      	b.n	8018078 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801806c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801806e:	2294      	movs	r2, #148	@ 0x94
 8018070:	589b      	ldr	r3, [r3, r2]
 8018072:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018074:	0010      	movs	r0, r2
 8018076:	4798      	blx	r3
}
 8018078:	46c0      	nop			@ (mov r8, r8)
 801807a:	46bd      	mov	sp, r7
 801807c:	b014      	add	sp, #80	@ 0x50
 801807e:	bd80      	pop	{r7, pc}
 8018080:	fffffeff 	.word	0xfffffeff

08018084 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b084      	sub	sp, #16
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018090:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	2201      	movs	r2, #1
 8018096:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801809c:	2b01      	cmp	r3, #1
 801809e:	d10b      	bne.n	80180b8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	22ac      	movs	r2, #172	@ 0xac
 80180a4:	589b      	ldr	r3, [r3, r2]
 80180a6:	68fa      	ldr	r2, [r7, #12]
 80180a8:	2158      	movs	r1, #88	@ 0x58
 80180aa:	5a52      	ldrh	r2, [r2, r1]
 80180ac:	0852      	lsrs	r2, r2, #1
 80180ae:	b291      	uxth	r1, r2
 80180b0:	68fa      	ldr	r2, [r7, #12]
 80180b2:	0010      	movs	r0, r2
 80180b4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80180b6:	e005      	b.n	80180c4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	2290      	movs	r2, #144	@ 0x90
 80180bc:	589b      	ldr	r3, [r3, r2]
 80180be:	68fa      	ldr	r2, [r7, #12]
 80180c0:	0010      	movs	r0, r2
 80180c2:	4798      	blx	r3
}
 80180c4:	46c0      	nop			@ (mov r8, r8)
 80180c6:	46bd      	mov	sp, r7
 80180c8:	b004      	add	sp, #16
 80180ca:	bd80      	pop	{r7, pc}

080180cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b086      	sub	sp, #24
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80180de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80180e0:	697b      	ldr	r3, [r7, #20]
 80180e2:	2280      	movs	r2, #128	@ 0x80
 80180e4:	589b      	ldr	r3, [r3, r2]
 80180e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	689b      	ldr	r3, [r3, #8]
 80180ee:	2280      	movs	r2, #128	@ 0x80
 80180f0:	4013      	ands	r3, r2
 80180f2:	2b80      	cmp	r3, #128	@ 0x80
 80180f4:	d10a      	bne.n	801810c <UART_DMAError+0x40>
 80180f6:	693b      	ldr	r3, [r7, #16]
 80180f8:	2b21      	cmp	r3, #33	@ 0x21
 80180fa:	d107      	bne.n	801810c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	2252      	movs	r2, #82	@ 0x52
 8018100:	2100      	movs	r1, #0
 8018102:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	0018      	movs	r0, r3
 8018108:	f7ff fe3a 	bl	8017d80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	689b      	ldr	r3, [r3, #8]
 8018112:	2240      	movs	r2, #64	@ 0x40
 8018114:	4013      	ands	r3, r2
 8018116:	2b40      	cmp	r3, #64	@ 0x40
 8018118:	d10a      	bne.n	8018130 <UART_DMAError+0x64>
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	2b22      	cmp	r3, #34	@ 0x22
 801811e:	d107      	bne.n	8018130 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018120:	697b      	ldr	r3, [r7, #20]
 8018122:	225a      	movs	r2, #90	@ 0x5a
 8018124:	2100      	movs	r1, #0
 8018126:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018128:	697b      	ldr	r3, [r7, #20]
 801812a:	0018      	movs	r0, r3
 801812c:	f7ff fe4c 	bl	8017dc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018130:	697b      	ldr	r3, [r7, #20]
 8018132:	2284      	movs	r2, #132	@ 0x84
 8018134:	589b      	ldr	r3, [r3, r2]
 8018136:	2210      	movs	r2, #16
 8018138:	431a      	orrs	r2, r3
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	2184      	movs	r1, #132	@ 0x84
 801813e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018140:	697b      	ldr	r3, [r7, #20]
 8018142:	2298      	movs	r2, #152	@ 0x98
 8018144:	589b      	ldr	r3, [r3, r2]
 8018146:	697a      	ldr	r2, [r7, #20]
 8018148:	0010      	movs	r0, r2
 801814a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801814c:	46c0      	nop			@ (mov r8, r8)
 801814e:	46bd      	mov	sp, r7
 8018150:	b006      	add	sp, #24
 8018152:	bd80      	pop	{r7, pc}

08018154 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	225a      	movs	r2, #90	@ 0x5a
 8018166:	2100      	movs	r1, #0
 8018168:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	2252      	movs	r2, #82	@ 0x52
 801816e:	2100      	movs	r1, #0
 8018170:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	2298      	movs	r2, #152	@ 0x98
 8018176:	589b      	ldr	r3, [r3, r2]
 8018178:	68fa      	ldr	r2, [r7, #12]
 801817a:	0010      	movs	r0, r2
 801817c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801817e:	46c0      	nop			@ (mov r8, r8)
 8018180:	46bd      	mov	sp, r7
 8018182:	b004      	add	sp, #16
 8018184:	bd80      	pop	{r7, pc}

08018186 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018186:	b580      	push	{r7, lr}
 8018188:	b086      	sub	sp, #24
 801818a:	af00      	add	r7, sp, #0
 801818c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801818e:	f3ef 8310 	mrs	r3, PRIMASK
 8018192:	60bb      	str	r3, [r7, #8]
  return(result);
 8018194:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018196:	617b      	str	r3, [r7, #20]
 8018198:	2301      	movs	r3, #1
 801819a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	f383 8810 	msr	PRIMASK, r3
}
 80181a2:	46c0      	nop			@ (mov r8, r8)
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	681a      	ldr	r2, [r3, #0]
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	2140      	movs	r1, #64	@ 0x40
 80181b0:	438a      	bics	r2, r1
 80181b2:	601a      	str	r2, [r3, #0]
 80181b4:	697b      	ldr	r3, [r7, #20]
 80181b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181b8:	693b      	ldr	r3, [r7, #16]
 80181ba:	f383 8810 	msr	PRIMASK, r3
}
 80181be:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	2220      	movs	r2, #32
 80181c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	2200      	movs	r2, #0
 80181ca:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	228c      	movs	r2, #140	@ 0x8c
 80181d0:	589b      	ldr	r3, [r3, r2]
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	0010      	movs	r0, r2
 80181d6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80181d8:	46c0      	nop			@ (mov r8, r8)
 80181da:	46bd      	mov	sp, r7
 80181dc:	b006      	add	sp, #24
 80181de:	bd80      	pop	{r7, pc}

080181e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b094      	sub	sp, #80	@ 0x50
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80181e8:	204e      	movs	r0, #78	@ 0x4e
 80181ea:	183b      	adds	r3, r7, r0
 80181ec:	687a      	ldr	r2, [r7, #4]
 80181ee:	215c      	movs	r1, #92	@ 0x5c
 80181f0:	5a52      	ldrh	r2, [r2, r1]
 80181f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	2280      	movs	r2, #128	@ 0x80
 80181f8:	589b      	ldr	r3, [r3, r2]
 80181fa:	2b22      	cmp	r3, #34	@ 0x22
 80181fc:	d000      	beq.n	8018200 <UART_RxISR_8BIT+0x20>
 80181fe:	e0c2      	b.n	8018386 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018206:	214c      	movs	r1, #76	@ 0x4c
 8018208:	187b      	adds	r3, r7, r1
 801820a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801820c:	187b      	adds	r3, r7, r1
 801820e:	881b      	ldrh	r3, [r3, #0]
 8018210:	b2da      	uxtb	r2, r3
 8018212:	183b      	adds	r3, r7, r0
 8018214:	881b      	ldrh	r3, [r3, #0]
 8018216:	b2d9      	uxtb	r1, r3
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801821c:	400a      	ands	r2, r1
 801821e:	b2d2      	uxtb	r2, r2
 8018220:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018226:	1c5a      	adds	r2, r3, #1
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	225a      	movs	r2, #90	@ 0x5a
 8018230:	5a9b      	ldrh	r3, [r3, r2]
 8018232:	b29b      	uxth	r3, r3
 8018234:	3b01      	subs	r3, #1
 8018236:	b299      	uxth	r1, r3
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	225a      	movs	r2, #90	@ 0x5a
 801823c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	225a      	movs	r2, #90	@ 0x5a
 8018242:	5a9b      	ldrh	r3, [r3, r2]
 8018244:	b29b      	uxth	r3, r3
 8018246:	2b00      	cmp	r3, #0
 8018248:	d000      	beq.n	801824c <UART_RxISR_8BIT+0x6c>
 801824a:	e0a4      	b.n	8018396 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801824c:	f3ef 8310 	mrs	r3, PRIMASK
 8018250:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018256:	2301      	movs	r3, #1
 8018258:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801825a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801825c:	f383 8810 	msr	PRIMASK, r3
}
 8018260:	46c0      	nop			@ (mov r8, r8)
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	681a      	ldr	r2, [r3, #0]
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	494c      	ldr	r1, [pc, #304]	@ (80183a0 <UART_RxISR_8BIT+0x1c0>)
 801826e:	400a      	ands	r2, r1
 8018270:	601a      	str	r2, [r3, #0]
 8018272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018278:	f383 8810 	msr	PRIMASK, r3
}
 801827c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801827e:	f3ef 8310 	mrs	r3, PRIMASK
 8018282:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018286:	647b      	str	r3, [r7, #68]	@ 0x44
 8018288:	2301      	movs	r3, #1
 801828a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801828c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801828e:	f383 8810 	msr	PRIMASK, r3
}
 8018292:	46c0      	nop			@ (mov r8, r8)
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	689a      	ldr	r2, [r3, #8]
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	2101      	movs	r1, #1
 80182a0:	438a      	bics	r2, r1
 80182a2:	609a      	str	r2, [r3, #8]
 80182a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80182a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182aa:	f383 8810 	msr	PRIMASK, r3
}
 80182ae:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2280      	movs	r2, #128	@ 0x80
 80182b4:	2120      	movs	r1, #32
 80182b6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2200      	movs	r2, #0
 80182bc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	2200      	movs	r2, #0
 80182c2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4a36      	ldr	r2, [pc, #216]	@ (80183a4 <UART_RxISR_8BIT+0x1c4>)
 80182ca:	4293      	cmp	r3, r2
 80182cc:	d01f      	beq.n	801830e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	685a      	ldr	r2, [r3, #4]
 80182d4:	2380      	movs	r3, #128	@ 0x80
 80182d6:	041b      	lsls	r3, r3, #16
 80182d8:	4013      	ands	r3, r2
 80182da:	d018      	beq.n	801830e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182dc:	f3ef 8310 	mrs	r3, PRIMASK
 80182e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80182e2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80182e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80182e6:	2301      	movs	r3, #1
 80182e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182ea:	69fb      	ldr	r3, [r7, #28]
 80182ec:	f383 8810 	msr	PRIMASK, r3
}
 80182f0:	46c0      	nop			@ (mov r8, r8)
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	681a      	ldr	r2, [r3, #0]
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	492a      	ldr	r1, [pc, #168]	@ (80183a8 <UART_RxISR_8BIT+0x1c8>)
 80182fe:	400a      	ands	r2, r1
 8018300:	601a      	str	r2, [r3, #0]
 8018302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018304:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018306:	6a3b      	ldr	r3, [r7, #32]
 8018308:	f383 8810 	msr	PRIMASK, r3
}
 801830c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018312:	2b01      	cmp	r3, #1
 8018314:	d130      	bne.n	8018378 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2200      	movs	r2, #0
 801831a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801831c:	f3ef 8310 	mrs	r3, PRIMASK
 8018320:	60fb      	str	r3, [r7, #12]
  return(result);
 8018322:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018326:	2301      	movs	r3, #1
 8018328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	f383 8810 	msr	PRIMASK, r3
}
 8018330:	46c0      	nop			@ (mov r8, r8)
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	681a      	ldr	r2, [r3, #0]
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	2110      	movs	r1, #16
 801833e:	438a      	bics	r2, r1
 8018340:	601a      	str	r2, [r3, #0]
 8018342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018346:	697b      	ldr	r3, [r7, #20]
 8018348:	f383 8810 	msr	PRIMASK, r3
}
 801834c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	69db      	ldr	r3, [r3, #28]
 8018354:	2210      	movs	r2, #16
 8018356:	4013      	ands	r3, r2
 8018358:	2b10      	cmp	r3, #16
 801835a:	d103      	bne.n	8018364 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	2210      	movs	r2, #16
 8018362:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	22ac      	movs	r2, #172	@ 0xac
 8018368:	589b      	ldr	r3, [r3, r2]
 801836a:	687a      	ldr	r2, [r7, #4]
 801836c:	2158      	movs	r1, #88	@ 0x58
 801836e:	5a51      	ldrh	r1, [r2, r1]
 8018370:	687a      	ldr	r2, [r7, #4]
 8018372:	0010      	movs	r0, r2
 8018374:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018376:	e00e      	b.n	8018396 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	2294      	movs	r2, #148	@ 0x94
 801837c:	589b      	ldr	r3, [r3, r2]
 801837e:	687a      	ldr	r2, [r7, #4]
 8018380:	0010      	movs	r0, r2
 8018382:	4798      	blx	r3
}
 8018384:	e007      	b.n	8018396 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	699a      	ldr	r2, [r3, #24]
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	2108      	movs	r1, #8
 8018392:	430a      	orrs	r2, r1
 8018394:	619a      	str	r2, [r3, #24]
}
 8018396:	46c0      	nop			@ (mov r8, r8)
 8018398:	46bd      	mov	sp, r7
 801839a:	b014      	add	sp, #80	@ 0x50
 801839c:	bd80      	pop	{r7, pc}
 801839e:	46c0      	nop			@ (mov r8, r8)
 80183a0:	fffffedf 	.word	0xfffffedf
 80183a4:	40004800 	.word	0x40004800
 80183a8:	fbffffff 	.word	0xfbffffff

080183ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b094      	sub	sp, #80	@ 0x50
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80183b4:	204e      	movs	r0, #78	@ 0x4e
 80183b6:	183b      	adds	r3, r7, r0
 80183b8:	687a      	ldr	r2, [r7, #4]
 80183ba:	215c      	movs	r1, #92	@ 0x5c
 80183bc:	5a52      	ldrh	r2, [r2, r1]
 80183be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2280      	movs	r2, #128	@ 0x80
 80183c4:	589b      	ldr	r3, [r3, r2]
 80183c6:	2b22      	cmp	r3, #34	@ 0x22
 80183c8:	d000      	beq.n	80183cc <UART_RxISR_16BIT+0x20>
 80183ca:	e0c2      	b.n	8018552 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80183d2:	214c      	movs	r1, #76	@ 0x4c
 80183d4:	187b      	adds	r3, r7, r1
 80183d6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80183de:	187b      	adds	r3, r7, r1
 80183e0:	183a      	adds	r2, r7, r0
 80183e2:	881b      	ldrh	r3, [r3, #0]
 80183e4:	8812      	ldrh	r2, [r2, #0]
 80183e6:	4013      	ands	r3, r2
 80183e8:	b29a      	uxth	r2, r3
 80183ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80183ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183f2:	1c9a      	adds	r2, r3, #2
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	225a      	movs	r2, #90	@ 0x5a
 80183fc:	5a9b      	ldrh	r3, [r3, r2]
 80183fe:	b29b      	uxth	r3, r3
 8018400:	3b01      	subs	r3, #1
 8018402:	b299      	uxth	r1, r3
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	225a      	movs	r2, #90	@ 0x5a
 8018408:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	225a      	movs	r2, #90	@ 0x5a
 801840e:	5a9b      	ldrh	r3, [r3, r2]
 8018410:	b29b      	uxth	r3, r3
 8018412:	2b00      	cmp	r3, #0
 8018414:	d000      	beq.n	8018418 <UART_RxISR_16BIT+0x6c>
 8018416:	e0a4      	b.n	8018562 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018418:	f3ef 8310 	mrs	r3, PRIMASK
 801841c:	623b      	str	r3, [r7, #32]
  return(result);
 801841e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018420:	647b      	str	r3, [r7, #68]	@ 0x44
 8018422:	2301      	movs	r3, #1
 8018424:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018428:	f383 8810 	msr	PRIMASK, r3
}
 801842c:	46c0      	nop			@ (mov r8, r8)
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	681a      	ldr	r2, [r3, #0]
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	494c      	ldr	r1, [pc, #304]	@ (801856c <UART_RxISR_16BIT+0x1c0>)
 801843a:	400a      	ands	r2, r1
 801843c:	601a      	str	r2, [r3, #0]
 801843e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018440:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018444:	f383 8810 	msr	PRIMASK, r3
}
 8018448:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801844a:	f3ef 8310 	mrs	r3, PRIMASK
 801844e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018452:	643b      	str	r3, [r7, #64]	@ 0x40
 8018454:	2301      	movs	r3, #1
 8018456:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801845a:	f383 8810 	msr	PRIMASK, r3
}
 801845e:	46c0      	nop			@ (mov r8, r8)
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	689a      	ldr	r2, [r3, #8]
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	2101      	movs	r1, #1
 801846c:	438a      	bics	r2, r1
 801846e:	609a      	str	r2, [r3, #8]
 8018470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018472:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018476:	f383 8810 	msr	PRIMASK, r3
}
 801847a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	2280      	movs	r2, #128	@ 0x80
 8018480:	2120      	movs	r1, #32
 8018482:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	2200      	movs	r2, #0
 8018488:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2200      	movs	r2, #0
 801848e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	4a36      	ldr	r2, [pc, #216]	@ (8018570 <UART_RxISR_16BIT+0x1c4>)
 8018496:	4293      	cmp	r3, r2
 8018498:	d01f      	beq.n	80184da <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	685a      	ldr	r2, [r3, #4]
 80184a0:	2380      	movs	r3, #128	@ 0x80
 80184a2:	041b      	lsls	r3, r3, #16
 80184a4:	4013      	ands	r3, r2
 80184a6:	d018      	beq.n	80184da <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184a8:	f3ef 8310 	mrs	r3, PRIMASK
 80184ac:	617b      	str	r3, [r7, #20]
  return(result);
 80184ae:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80184b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80184b2:	2301      	movs	r3, #1
 80184b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184b6:	69bb      	ldr	r3, [r7, #24]
 80184b8:	f383 8810 	msr	PRIMASK, r3
}
 80184bc:	46c0      	nop			@ (mov r8, r8)
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	681a      	ldr	r2, [r3, #0]
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	492a      	ldr	r1, [pc, #168]	@ (8018574 <UART_RxISR_16BIT+0x1c8>)
 80184ca:	400a      	ands	r2, r1
 80184cc:	601a      	str	r2, [r3, #0]
 80184ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184d2:	69fb      	ldr	r3, [r7, #28]
 80184d4:	f383 8810 	msr	PRIMASK, r3
}
 80184d8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80184de:	2b01      	cmp	r3, #1
 80184e0:	d130      	bne.n	8018544 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	2200      	movs	r2, #0
 80184e6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184e8:	f3ef 8310 	mrs	r3, PRIMASK
 80184ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80184ee:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80184f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80184f2:	2301      	movs	r3, #1
 80184f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	f383 8810 	msr	PRIMASK, r3
}
 80184fc:	46c0      	nop			@ (mov r8, r8)
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	681a      	ldr	r2, [r3, #0]
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	2110      	movs	r1, #16
 801850a:	438a      	bics	r2, r1
 801850c:	601a      	str	r2, [r3, #0]
 801850e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018510:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018512:	693b      	ldr	r3, [r7, #16]
 8018514:	f383 8810 	msr	PRIMASK, r3
}
 8018518:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	69db      	ldr	r3, [r3, #28]
 8018520:	2210      	movs	r2, #16
 8018522:	4013      	ands	r3, r2
 8018524:	2b10      	cmp	r3, #16
 8018526:	d103      	bne.n	8018530 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	2210      	movs	r2, #16
 801852e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	22ac      	movs	r2, #172	@ 0xac
 8018534:	589b      	ldr	r3, [r3, r2]
 8018536:	687a      	ldr	r2, [r7, #4]
 8018538:	2158      	movs	r1, #88	@ 0x58
 801853a:	5a51      	ldrh	r1, [r2, r1]
 801853c:	687a      	ldr	r2, [r7, #4]
 801853e:	0010      	movs	r0, r2
 8018540:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018542:	e00e      	b.n	8018562 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2294      	movs	r2, #148	@ 0x94
 8018548:	589b      	ldr	r3, [r3, r2]
 801854a:	687a      	ldr	r2, [r7, #4]
 801854c:	0010      	movs	r0, r2
 801854e:	4798      	blx	r3
}
 8018550:	e007      	b.n	8018562 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	699a      	ldr	r2, [r3, #24]
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	2108      	movs	r1, #8
 801855e:	430a      	orrs	r2, r1
 8018560:	619a      	str	r2, [r3, #24]
}
 8018562:	46c0      	nop			@ (mov r8, r8)
 8018564:	46bd      	mov	sp, r7
 8018566:	b014      	add	sp, #80	@ 0x50
 8018568:	bd80      	pop	{r7, pc}
 801856a:	46c0      	nop			@ (mov r8, r8)
 801856c:	fffffedf 	.word	0xfffffedf
 8018570:	40004800 	.word	0x40004800
 8018574:	fbffffff 	.word	0xfbffffff

08018578 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b082      	sub	sp, #8
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018580:	46c0      	nop			@ (mov r8, r8)
 8018582:	46bd      	mov	sp, r7
 8018584:	b002      	add	sp, #8
 8018586:	bd80      	pop	{r7, pc}

08018588 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	2244      	movs	r2, #68	@ 0x44
 8018594:	2100      	movs	r1, #0
 8018596:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018598:	4b05      	ldr	r3, [pc, #20]	@ (80185b0 <USB_EnableGlobalInt+0x28>)
 801859a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	b299      	uxth	r1, r3
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	2240      	movs	r2, #64	@ 0x40
 80185a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80185a6:	2300      	movs	r3, #0
}
 80185a8:	0018      	movs	r0, r3
 80185aa:	46bd      	mov	sp, r7
 80185ac:	b004      	add	sp, #16
 80185ae:	bd80      	pop	{r7, pc}
 80185b0:	0000bf80 	.word	0x0000bf80

080185b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b084      	sub	sp, #16
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80185bc:	4b09      	ldr	r3, [pc, #36]	@ (80185e4 <USB_DisableGlobalInt+0x30>)
 80185be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	2240      	movs	r2, #64	@ 0x40
 80185c4:	5a9b      	ldrh	r3, [r3, r2]
 80185c6:	b29b      	uxth	r3, r3
 80185c8:	68fa      	ldr	r2, [r7, #12]
 80185ca:	b292      	uxth	r2, r2
 80185cc:	43d2      	mvns	r2, r2
 80185ce:	b292      	uxth	r2, r2
 80185d0:	4013      	ands	r3, r2
 80185d2:	b299      	uxth	r1, r3
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	2240      	movs	r2, #64	@ 0x40
 80185d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80185da:	2300      	movs	r3, #0
}
 80185dc:	0018      	movs	r0, r3
 80185de:	46bd      	mov	sp, r7
 80185e0:	b004      	add	sp, #16
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	0000bf80 	.word	0x0000bf80

080185e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80185e8:	b084      	sub	sp, #16
 80185ea:	b590      	push	{r4, r7, lr}
 80185ec:	b083      	sub	sp, #12
 80185ee:	af00      	add	r7, sp, #0
 80185f0:	6078      	str	r0, [r7, #4]
 80185f2:	2004      	movs	r0, #4
 80185f4:	2410      	movs	r4, #16
 80185f6:	1900      	adds	r0, r0, r4
 80185f8:	2408      	movs	r4, #8
 80185fa:	46a4      	mov	ip, r4
 80185fc:	44bc      	add	ip, r7
 80185fe:	4460      	add	r0, ip
 8018600:	6001      	str	r1, [r0, #0]
 8018602:	6042      	str	r2, [r0, #4]
 8018604:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	2240      	movs	r2, #64	@ 0x40
 801860a:	2101      	movs	r1, #1
 801860c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	2240      	movs	r2, #64	@ 0x40
 8018612:	2100      	movs	r1, #0
 8018614:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	2244      	movs	r2, #68	@ 0x44
 801861a:	2100      	movs	r1, #0
 801861c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	2250      	movs	r2, #80	@ 0x50
 8018622:	2100      	movs	r1, #0
 8018624:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018626:	2300      	movs	r3, #0
}
 8018628:	0018      	movs	r0, r3
 801862a:	46bd      	mov	sp, r7
 801862c:	b003      	add	sp, #12
 801862e:	bc90      	pop	{r4, r7}
 8018630:	bc08      	pop	{r3}
 8018632:	b004      	add	sp, #16
 8018634:	4718      	bx	r3
	...

08018638 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b09c      	sub	sp, #112	@ 0x70
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8018642:	236f      	movs	r3, #111	@ 0x6f
 8018644:	18fb      	adds	r3, r7, r3
 8018646:	2200      	movs	r2, #0
 8018648:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801864a:	687a      	ldr	r2, [r7, #4]
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	781b      	ldrb	r3, [r3, #0]
 8018650:	009b      	lsls	r3, r3, #2
 8018652:	18d3      	adds	r3, r2, r3
 8018654:	881b      	ldrh	r3, [r3, #0]
 8018656:	b29a      	uxth	r2, r3
 8018658:	236c      	movs	r3, #108	@ 0x6c
 801865a:	18fb      	adds	r3, r7, r3
 801865c:	49a3      	ldr	r1, [pc, #652]	@ (80188ec <USB_ActivateEndpoint+0x2b4>)
 801865e:	400a      	ands	r2, r1
 8018660:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8018662:	683b      	ldr	r3, [r7, #0]
 8018664:	78db      	ldrb	r3, [r3, #3]
 8018666:	2b03      	cmp	r3, #3
 8018668:	d017      	beq.n	801869a <USB_ActivateEndpoint+0x62>
 801866a:	dc28      	bgt.n	80186be <USB_ActivateEndpoint+0x86>
 801866c:	2b02      	cmp	r3, #2
 801866e:	d00e      	beq.n	801868e <USB_ActivateEndpoint+0x56>
 8018670:	dc25      	bgt.n	80186be <USB_ActivateEndpoint+0x86>
 8018672:	2b00      	cmp	r3, #0
 8018674:	d002      	beq.n	801867c <USB_ActivateEndpoint+0x44>
 8018676:	2b01      	cmp	r3, #1
 8018678:	d018      	beq.n	80186ac <USB_ActivateEndpoint+0x74>
 801867a:	e020      	b.n	80186be <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801867c:	226c      	movs	r2, #108	@ 0x6c
 801867e:	18bb      	adds	r3, r7, r2
 8018680:	18ba      	adds	r2, r7, r2
 8018682:	8812      	ldrh	r2, [r2, #0]
 8018684:	2180      	movs	r1, #128	@ 0x80
 8018686:	0089      	lsls	r1, r1, #2
 8018688:	430a      	orrs	r2, r1
 801868a:	801a      	strh	r2, [r3, #0]
      break;
 801868c:	e01c      	b.n	80186c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801868e:	226c      	movs	r2, #108	@ 0x6c
 8018690:	18bb      	adds	r3, r7, r2
 8018692:	18ba      	adds	r2, r7, r2
 8018694:	8812      	ldrh	r2, [r2, #0]
 8018696:	801a      	strh	r2, [r3, #0]
      break;
 8018698:	e016      	b.n	80186c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801869a:	226c      	movs	r2, #108	@ 0x6c
 801869c:	18bb      	adds	r3, r7, r2
 801869e:	18ba      	adds	r2, r7, r2
 80186a0:	8812      	ldrh	r2, [r2, #0]
 80186a2:	21c0      	movs	r1, #192	@ 0xc0
 80186a4:	00c9      	lsls	r1, r1, #3
 80186a6:	430a      	orrs	r2, r1
 80186a8:	801a      	strh	r2, [r3, #0]
      break;
 80186aa:	e00d      	b.n	80186c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80186ac:	226c      	movs	r2, #108	@ 0x6c
 80186ae:	18bb      	adds	r3, r7, r2
 80186b0:	18ba      	adds	r2, r7, r2
 80186b2:	8812      	ldrh	r2, [r2, #0]
 80186b4:	2180      	movs	r1, #128	@ 0x80
 80186b6:	00c9      	lsls	r1, r1, #3
 80186b8:	430a      	orrs	r2, r1
 80186ba:	801a      	strh	r2, [r3, #0]
      break;
 80186bc:	e004      	b.n	80186c8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80186be:	236f      	movs	r3, #111	@ 0x6f
 80186c0:	18fb      	adds	r3, r7, r3
 80186c2:	2201      	movs	r2, #1
 80186c4:	701a      	strb	r2, [r3, #0]
      break;
 80186c6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80186c8:	687a      	ldr	r2, [r7, #4]
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	009b      	lsls	r3, r3, #2
 80186d0:	18d3      	adds	r3, r2, r3
 80186d2:	226c      	movs	r2, #108	@ 0x6c
 80186d4:	18ba      	adds	r2, r7, r2
 80186d6:	8812      	ldrh	r2, [r2, #0]
 80186d8:	4985      	ldr	r1, [pc, #532]	@ (80188f0 <USB_ActivateEndpoint+0x2b8>)
 80186da:	430a      	orrs	r2, r1
 80186dc:	b292      	uxth	r2, r2
 80186de:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80186e0:	687a      	ldr	r2, [r7, #4]
 80186e2:	683b      	ldr	r3, [r7, #0]
 80186e4:	781b      	ldrb	r3, [r3, #0]
 80186e6:	009b      	lsls	r3, r3, #2
 80186e8:	18d3      	adds	r3, r2, r3
 80186ea:	881b      	ldrh	r3, [r3, #0]
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	b21b      	sxth	r3, r3
 80186f0:	4a80      	ldr	r2, [pc, #512]	@ (80188f4 <USB_ActivateEndpoint+0x2bc>)
 80186f2:	4013      	ands	r3, r2
 80186f4:	b21a      	sxth	r2, r3
 80186f6:	683b      	ldr	r3, [r7, #0]
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	b21b      	sxth	r3, r3
 80186fc:	4313      	orrs	r3, r2
 80186fe:	b21a      	sxth	r2, r3
 8018700:	2166      	movs	r1, #102	@ 0x66
 8018702:	187b      	adds	r3, r7, r1
 8018704:	801a      	strh	r2, [r3, #0]
 8018706:	687a      	ldr	r2, [r7, #4]
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	781b      	ldrb	r3, [r3, #0]
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	18d3      	adds	r3, r2, r3
 8018710:	187a      	adds	r2, r7, r1
 8018712:	8812      	ldrh	r2, [r2, #0]
 8018714:	4976      	ldr	r1, [pc, #472]	@ (80188f0 <USB_ActivateEndpoint+0x2b8>)
 8018716:	430a      	orrs	r2, r1
 8018718:	b292      	uxth	r2, r2
 801871a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801871c:	683b      	ldr	r3, [r7, #0]
 801871e:	7b1b      	ldrb	r3, [r3, #12]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d000      	beq.n	8018726 <USB_ActivateEndpoint+0xee>
 8018724:	e178      	b.n	8018a18 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8018726:	683b      	ldr	r3, [r7, #0]
 8018728:	785b      	ldrb	r3, [r3, #1]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d100      	bne.n	8018730 <USB_ActivateEndpoint+0xf8>
 801872e:	e07a      	b.n	8018826 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	61bb      	str	r3, [r7, #24]
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	2250      	movs	r2, #80	@ 0x50
 8018738:	5a9b      	ldrh	r3, [r3, r2]
 801873a:	b29b      	uxth	r3, r3
 801873c:	001a      	movs	r2, r3
 801873e:	69bb      	ldr	r3, [r7, #24]
 8018740:	189b      	adds	r3, r3, r2
 8018742:	61bb      	str	r3, [r7, #24]
 8018744:	683b      	ldr	r3, [r7, #0]
 8018746:	781b      	ldrb	r3, [r3, #0]
 8018748:	00da      	lsls	r2, r3, #3
 801874a:	69bb      	ldr	r3, [r7, #24]
 801874c:	18d3      	adds	r3, r2, r3
 801874e:	2280      	movs	r2, #128	@ 0x80
 8018750:	00d2      	lsls	r2, r2, #3
 8018752:	4694      	mov	ip, r2
 8018754:	4463      	add	r3, ip
 8018756:	617b      	str	r3, [r7, #20]
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	88db      	ldrh	r3, [r3, #6]
 801875c:	085b      	lsrs	r3, r3, #1
 801875e:	b29b      	uxth	r3, r3
 8018760:	18db      	adds	r3, r3, r3
 8018762:	b29a      	uxth	r2, r3
 8018764:	697b      	ldr	r3, [r7, #20]
 8018766:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018768:	687a      	ldr	r2, [r7, #4]
 801876a:	683b      	ldr	r3, [r7, #0]
 801876c:	781b      	ldrb	r3, [r3, #0]
 801876e:	009b      	lsls	r3, r3, #2
 8018770:	18d2      	adds	r2, r2, r3
 8018772:	2112      	movs	r1, #18
 8018774:	187b      	adds	r3, r7, r1
 8018776:	8812      	ldrh	r2, [r2, #0]
 8018778:	801a      	strh	r2, [r3, #0]
 801877a:	187b      	adds	r3, r7, r1
 801877c:	881b      	ldrh	r3, [r3, #0]
 801877e:	2240      	movs	r2, #64	@ 0x40
 8018780:	4013      	ands	r3, r2
 8018782:	d016      	beq.n	80187b2 <USB_ActivateEndpoint+0x17a>
 8018784:	687a      	ldr	r2, [r7, #4]
 8018786:	683b      	ldr	r3, [r7, #0]
 8018788:	781b      	ldrb	r3, [r3, #0]
 801878a:	009b      	lsls	r3, r3, #2
 801878c:	18d3      	adds	r3, r2, r3
 801878e:	881b      	ldrh	r3, [r3, #0]
 8018790:	b29a      	uxth	r2, r3
 8018792:	2010      	movs	r0, #16
 8018794:	183b      	adds	r3, r7, r0
 8018796:	4957      	ldr	r1, [pc, #348]	@ (80188f4 <USB_ActivateEndpoint+0x2bc>)
 8018798:	400a      	ands	r2, r1
 801879a:	801a      	strh	r2, [r3, #0]
 801879c:	687a      	ldr	r2, [r7, #4]
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	009b      	lsls	r3, r3, #2
 80187a4:	18d3      	adds	r3, r2, r3
 80187a6:	183a      	adds	r2, r7, r0
 80187a8:	8812      	ldrh	r2, [r2, #0]
 80187aa:	4953      	ldr	r1, [pc, #332]	@ (80188f8 <USB_ActivateEndpoint+0x2c0>)
 80187ac:	430a      	orrs	r2, r1
 80187ae:	b292      	uxth	r2, r2
 80187b0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	78db      	ldrb	r3, [r3, #3]
 80187b6:	2b01      	cmp	r3, #1
 80187b8:	d01d      	beq.n	80187f6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80187ba:	687a      	ldr	r2, [r7, #4]
 80187bc:	683b      	ldr	r3, [r7, #0]
 80187be:	781b      	ldrb	r3, [r3, #0]
 80187c0:	009b      	lsls	r3, r3, #2
 80187c2:	18d3      	adds	r3, r2, r3
 80187c4:	881b      	ldrh	r3, [r3, #0]
 80187c6:	b29a      	uxth	r2, r3
 80187c8:	200c      	movs	r0, #12
 80187ca:	183b      	adds	r3, r7, r0
 80187cc:	494b      	ldr	r1, [pc, #300]	@ (80188fc <USB_ActivateEndpoint+0x2c4>)
 80187ce:	400a      	ands	r2, r1
 80187d0:	801a      	strh	r2, [r3, #0]
 80187d2:	183b      	adds	r3, r7, r0
 80187d4:	183a      	adds	r2, r7, r0
 80187d6:	8812      	ldrh	r2, [r2, #0]
 80187d8:	2120      	movs	r1, #32
 80187da:	404a      	eors	r2, r1
 80187dc:	801a      	strh	r2, [r3, #0]
 80187de:	687a      	ldr	r2, [r7, #4]
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	781b      	ldrb	r3, [r3, #0]
 80187e4:	009b      	lsls	r3, r3, #2
 80187e6:	18d3      	adds	r3, r2, r3
 80187e8:	183a      	adds	r2, r7, r0
 80187ea:	8812      	ldrh	r2, [r2, #0]
 80187ec:	4940      	ldr	r1, [pc, #256]	@ (80188f0 <USB_ActivateEndpoint+0x2b8>)
 80187ee:	430a      	orrs	r2, r1
 80187f0:	b292      	uxth	r2, r2
 80187f2:	801a      	strh	r2, [r3, #0]
 80187f4:	e2b4      	b.n	8018d60 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80187f6:	687a      	ldr	r2, [r7, #4]
 80187f8:	683b      	ldr	r3, [r7, #0]
 80187fa:	781b      	ldrb	r3, [r3, #0]
 80187fc:	009b      	lsls	r3, r3, #2
 80187fe:	18d3      	adds	r3, r2, r3
 8018800:	881b      	ldrh	r3, [r3, #0]
 8018802:	b29a      	uxth	r2, r3
 8018804:	200e      	movs	r0, #14
 8018806:	183b      	adds	r3, r7, r0
 8018808:	493c      	ldr	r1, [pc, #240]	@ (80188fc <USB_ActivateEndpoint+0x2c4>)
 801880a:	400a      	ands	r2, r1
 801880c:	801a      	strh	r2, [r3, #0]
 801880e:	687a      	ldr	r2, [r7, #4]
 8018810:	683b      	ldr	r3, [r7, #0]
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	009b      	lsls	r3, r3, #2
 8018816:	18d3      	adds	r3, r2, r3
 8018818:	183a      	adds	r2, r7, r0
 801881a:	8812      	ldrh	r2, [r2, #0]
 801881c:	4934      	ldr	r1, [pc, #208]	@ (80188f0 <USB_ActivateEndpoint+0x2b8>)
 801881e:	430a      	orrs	r2, r1
 8018820:	b292      	uxth	r2, r2
 8018822:	801a      	strh	r2, [r3, #0]
 8018824:	e29c      	b.n	8018d60 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	633b      	str	r3, [r7, #48]	@ 0x30
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	2250      	movs	r2, #80	@ 0x50
 801882e:	5a9b      	ldrh	r3, [r3, r2]
 8018830:	b29b      	uxth	r3, r3
 8018832:	001a      	movs	r2, r3
 8018834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018836:	189b      	adds	r3, r3, r2
 8018838:	633b      	str	r3, [r7, #48]	@ 0x30
 801883a:	683b      	ldr	r3, [r7, #0]
 801883c:	781b      	ldrb	r3, [r3, #0]
 801883e:	00da      	lsls	r2, r3, #3
 8018840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018842:	18d3      	adds	r3, r2, r3
 8018844:	4a2e      	ldr	r2, [pc, #184]	@ (8018900 <USB_ActivateEndpoint+0x2c8>)
 8018846:	4694      	mov	ip, r2
 8018848:	4463      	add	r3, ip
 801884a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801884c:	683b      	ldr	r3, [r7, #0]
 801884e:	88db      	ldrh	r3, [r3, #6]
 8018850:	085b      	lsrs	r3, r3, #1
 8018852:	b29b      	uxth	r3, r3
 8018854:	18db      	adds	r3, r3, r3
 8018856:	b29a      	uxth	r2, r3
 8018858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801885a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	2250      	movs	r2, #80	@ 0x50
 8018864:	5a9b      	ldrh	r3, [r3, r2]
 8018866:	b29b      	uxth	r3, r3
 8018868:	001a      	movs	r2, r3
 801886a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801886c:	189b      	adds	r3, r3, r2
 801886e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	781b      	ldrb	r3, [r3, #0]
 8018874:	00da      	lsls	r2, r3, #3
 8018876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018878:	18d3      	adds	r3, r2, r3
 801887a:	4a22      	ldr	r2, [pc, #136]	@ (8018904 <USB_ActivateEndpoint+0x2cc>)
 801887c:	4694      	mov	ip, r2
 801887e:	4463      	add	r3, ip
 8018880:	627b      	str	r3, [r7, #36]	@ 0x24
 8018882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018884:	881b      	ldrh	r3, [r3, #0]
 8018886:	b29b      	uxth	r3, r3
 8018888:	059b      	lsls	r3, r3, #22
 801888a:	0d9b      	lsrs	r3, r3, #22
 801888c:	b29a      	uxth	r2, r3
 801888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018890:	801a      	strh	r2, [r3, #0]
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	691b      	ldr	r3, [r3, #16]
 8018896:	2b3e      	cmp	r3, #62	@ 0x3e
 8018898:	d91a      	bls.n	80188d0 <USB_ActivateEndpoint+0x298>
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	691b      	ldr	r3, [r3, #16]
 801889e:	095b      	lsrs	r3, r3, #5
 80188a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	691b      	ldr	r3, [r3, #16]
 80188a6:	221f      	movs	r2, #31
 80188a8:	4013      	ands	r3, r2
 80188aa:	d102      	bne.n	80188b2 <USB_ActivateEndpoint+0x27a>
 80188ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80188ae:	3b01      	subs	r3, #1
 80188b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80188b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188b4:	881b      	ldrh	r3, [r3, #0]
 80188b6:	b29a      	uxth	r2, r3
 80188b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	029b      	lsls	r3, r3, #10
 80188be:	b29b      	uxth	r3, r3
 80188c0:	4313      	orrs	r3, r2
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	4a10      	ldr	r2, [pc, #64]	@ (8018908 <USB_ActivateEndpoint+0x2d0>)
 80188c6:	4313      	orrs	r3, r2
 80188c8:	b29a      	uxth	r2, r3
 80188ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188cc:	801a      	strh	r2, [r3, #0]
 80188ce:	e034      	b.n	801893a <USB_ActivateEndpoint+0x302>
 80188d0:	683b      	ldr	r3, [r7, #0]
 80188d2:	691b      	ldr	r3, [r3, #16]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d119      	bne.n	801890c <USB_ActivateEndpoint+0x2d4>
 80188d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188da:	881b      	ldrh	r3, [r3, #0]
 80188dc:	b29b      	uxth	r3, r3
 80188de:	4a0a      	ldr	r2, [pc, #40]	@ (8018908 <USB_ActivateEndpoint+0x2d0>)
 80188e0:	4313      	orrs	r3, r2
 80188e2:	b29a      	uxth	r2, r3
 80188e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188e6:	801a      	strh	r2, [r3, #0]
 80188e8:	e027      	b.n	801893a <USB_ActivateEndpoint+0x302>
 80188ea:	46c0      	nop			@ (mov r8, r8)
 80188ec:	ffff898f 	.word	0xffff898f
 80188f0:	ffff8080 	.word	0xffff8080
 80188f4:	ffff8f8f 	.word	0xffff8f8f
 80188f8:	ffff80c0 	.word	0xffff80c0
 80188fc:	ffff8fbf 	.word	0xffff8fbf
 8018900:	00000404 	.word	0x00000404
 8018904:	00000406 	.word	0x00000406
 8018908:	ffff8000 	.word	0xffff8000
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	691b      	ldr	r3, [r3, #16]
 8018910:	085b      	lsrs	r3, r3, #1
 8018912:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	691b      	ldr	r3, [r3, #16]
 8018918:	2201      	movs	r2, #1
 801891a:	4013      	ands	r3, r2
 801891c:	d002      	beq.n	8018924 <USB_ActivateEndpoint+0x2ec>
 801891e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018920:	3301      	adds	r3, #1
 8018922:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018926:	881b      	ldrh	r3, [r3, #0]
 8018928:	b29a      	uxth	r2, r3
 801892a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801892c:	b29b      	uxth	r3, r3
 801892e:	029b      	lsls	r3, r3, #10
 8018930:	b29b      	uxth	r3, r3
 8018932:	4313      	orrs	r3, r2
 8018934:	b29a      	uxth	r2, r3
 8018936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018938:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801893a:	687a      	ldr	r2, [r7, #4]
 801893c:	683b      	ldr	r3, [r7, #0]
 801893e:	781b      	ldrb	r3, [r3, #0]
 8018940:	009b      	lsls	r3, r3, #2
 8018942:	18d2      	adds	r2, r2, r3
 8018944:	2122      	movs	r1, #34	@ 0x22
 8018946:	187b      	adds	r3, r7, r1
 8018948:	8812      	ldrh	r2, [r2, #0]
 801894a:	801a      	strh	r2, [r3, #0]
 801894c:	187b      	adds	r3, r7, r1
 801894e:	881a      	ldrh	r2, [r3, #0]
 8018950:	2380      	movs	r3, #128	@ 0x80
 8018952:	01db      	lsls	r3, r3, #7
 8018954:	4013      	ands	r3, r2
 8018956:	d016      	beq.n	8018986 <USB_ActivateEndpoint+0x34e>
 8018958:	687a      	ldr	r2, [r7, #4]
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	781b      	ldrb	r3, [r3, #0]
 801895e:	009b      	lsls	r3, r3, #2
 8018960:	18d3      	adds	r3, r2, r3
 8018962:	881b      	ldrh	r3, [r3, #0]
 8018964:	b29a      	uxth	r2, r3
 8018966:	2020      	movs	r0, #32
 8018968:	183b      	adds	r3, r7, r0
 801896a:	49dd      	ldr	r1, [pc, #884]	@ (8018ce0 <USB_ActivateEndpoint+0x6a8>)
 801896c:	400a      	ands	r2, r1
 801896e:	801a      	strh	r2, [r3, #0]
 8018970:	687a      	ldr	r2, [r7, #4]
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	781b      	ldrb	r3, [r3, #0]
 8018976:	009b      	lsls	r3, r3, #2
 8018978:	18d3      	adds	r3, r2, r3
 801897a:	183a      	adds	r2, r7, r0
 801897c:	8812      	ldrh	r2, [r2, #0]
 801897e:	49d9      	ldr	r1, [pc, #868]	@ (8018ce4 <USB_ActivateEndpoint+0x6ac>)
 8018980:	430a      	orrs	r2, r1
 8018982:	b292      	uxth	r2, r2
 8018984:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	781b      	ldrb	r3, [r3, #0]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d125      	bne.n	80189da <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801898e:	687a      	ldr	r2, [r7, #4]
 8018990:	683b      	ldr	r3, [r7, #0]
 8018992:	781b      	ldrb	r3, [r3, #0]
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	18d3      	adds	r3, r2, r3
 8018998:	881b      	ldrh	r3, [r3, #0]
 801899a:	b29a      	uxth	r2, r3
 801899c:	201c      	movs	r0, #28
 801899e:	183b      	adds	r3, r7, r0
 80189a0:	49d1      	ldr	r1, [pc, #836]	@ (8018ce8 <USB_ActivateEndpoint+0x6b0>)
 80189a2:	400a      	ands	r2, r1
 80189a4:	801a      	strh	r2, [r3, #0]
 80189a6:	183b      	adds	r3, r7, r0
 80189a8:	183a      	adds	r2, r7, r0
 80189aa:	8812      	ldrh	r2, [r2, #0]
 80189ac:	2180      	movs	r1, #128	@ 0x80
 80189ae:	0149      	lsls	r1, r1, #5
 80189b0:	404a      	eors	r2, r1
 80189b2:	801a      	strh	r2, [r3, #0]
 80189b4:	183b      	adds	r3, r7, r0
 80189b6:	183a      	adds	r2, r7, r0
 80189b8:	8812      	ldrh	r2, [r2, #0]
 80189ba:	2180      	movs	r1, #128	@ 0x80
 80189bc:	0189      	lsls	r1, r1, #6
 80189be:	404a      	eors	r2, r1
 80189c0:	801a      	strh	r2, [r3, #0]
 80189c2:	687a      	ldr	r2, [r7, #4]
 80189c4:	683b      	ldr	r3, [r7, #0]
 80189c6:	781b      	ldrb	r3, [r3, #0]
 80189c8:	009b      	lsls	r3, r3, #2
 80189ca:	18d3      	adds	r3, r2, r3
 80189cc:	183a      	adds	r2, r7, r0
 80189ce:	8812      	ldrh	r2, [r2, #0]
 80189d0:	49c6      	ldr	r1, [pc, #792]	@ (8018cec <USB_ActivateEndpoint+0x6b4>)
 80189d2:	430a      	orrs	r2, r1
 80189d4:	b292      	uxth	r2, r2
 80189d6:	801a      	strh	r2, [r3, #0]
 80189d8:	e1c2      	b.n	8018d60 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80189da:	687a      	ldr	r2, [r7, #4]
 80189dc:	683b      	ldr	r3, [r7, #0]
 80189de:	781b      	ldrb	r3, [r3, #0]
 80189e0:	009b      	lsls	r3, r3, #2
 80189e2:	18d3      	adds	r3, r2, r3
 80189e4:	881b      	ldrh	r3, [r3, #0]
 80189e6:	b29a      	uxth	r2, r3
 80189e8:	201e      	movs	r0, #30
 80189ea:	183b      	adds	r3, r7, r0
 80189ec:	49be      	ldr	r1, [pc, #760]	@ (8018ce8 <USB_ActivateEndpoint+0x6b0>)
 80189ee:	400a      	ands	r2, r1
 80189f0:	801a      	strh	r2, [r3, #0]
 80189f2:	183b      	adds	r3, r7, r0
 80189f4:	183a      	adds	r2, r7, r0
 80189f6:	8812      	ldrh	r2, [r2, #0]
 80189f8:	2180      	movs	r1, #128	@ 0x80
 80189fa:	0189      	lsls	r1, r1, #6
 80189fc:	404a      	eors	r2, r1
 80189fe:	801a      	strh	r2, [r3, #0]
 8018a00:	687a      	ldr	r2, [r7, #4]
 8018a02:	683b      	ldr	r3, [r7, #0]
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	009b      	lsls	r3, r3, #2
 8018a08:	18d3      	adds	r3, r2, r3
 8018a0a:	183a      	adds	r2, r7, r0
 8018a0c:	8812      	ldrh	r2, [r2, #0]
 8018a0e:	49b7      	ldr	r1, [pc, #732]	@ (8018cec <USB_ActivateEndpoint+0x6b4>)
 8018a10:	430a      	orrs	r2, r1
 8018a12:	b292      	uxth	r2, r2
 8018a14:	801a      	strh	r2, [r3, #0]
 8018a16:	e1a3      	b.n	8018d60 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	78db      	ldrb	r3, [r3, #3]
 8018a1c:	2b02      	cmp	r3, #2
 8018a1e:	d117      	bne.n	8018a50 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018a20:	687a      	ldr	r2, [r7, #4]
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	781b      	ldrb	r3, [r3, #0]
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	18d3      	adds	r3, r2, r3
 8018a2a:	881b      	ldrh	r3, [r3, #0]
 8018a2c:	b29a      	uxth	r2, r3
 8018a2e:	2062      	movs	r0, #98	@ 0x62
 8018a30:	183b      	adds	r3, r7, r0
 8018a32:	49ab      	ldr	r1, [pc, #684]	@ (8018ce0 <USB_ActivateEndpoint+0x6a8>)
 8018a34:	400a      	ands	r2, r1
 8018a36:	801a      	strh	r2, [r3, #0]
 8018a38:	687a      	ldr	r2, [r7, #4]
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	009b      	lsls	r3, r3, #2
 8018a40:	18d3      	adds	r3, r2, r3
 8018a42:	183a      	adds	r2, r7, r0
 8018a44:	8812      	ldrh	r2, [r2, #0]
 8018a46:	49aa      	ldr	r1, [pc, #680]	@ (8018cf0 <USB_ActivateEndpoint+0x6b8>)
 8018a48:	430a      	orrs	r2, r1
 8018a4a:	b292      	uxth	r2, r2
 8018a4c:	801a      	strh	r2, [r3, #0]
 8018a4e:	e016      	b.n	8018a7e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8018a50:	687a      	ldr	r2, [r7, #4]
 8018a52:	683b      	ldr	r3, [r7, #0]
 8018a54:	781b      	ldrb	r3, [r3, #0]
 8018a56:	009b      	lsls	r3, r3, #2
 8018a58:	18d3      	adds	r3, r2, r3
 8018a5a:	881b      	ldrh	r3, [r3, #0]
 8018a5c:	b29a      	uxth	r2, r3
 8018a5e:	2064      	movs	r0, #100	@ 0x64
 8018a60:	183b      	adds	r3, r7, r0
 8018a62:	49a4      	ldr	r1, [pc, #656]	@ (8018cf4 <USB_ActivateEndpoint+0x6bc>)
 8018a64:	400a      	ands	r2, r1
 8018a66:	801a      	strh	r2, [r3, #0]
 8018a68:	687a      	ldr	r2, [r7, #4]
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	009b      	lsls	r3, r3, #2
 8018a70:	18d3      	adds	r3, r2, r3
 8018a72:	183a      	adds	r2, r7, r0
 8018a74:	8812      	ldrh	r2, [r2, #0]
 8018a76:	499d      	ldr	r1, [pc, #628]	@ (8018cec <USB_ActivateEndpoint+0x6b4>)
 8018a78:	430a      	orrs	r2, r1
 8018a7a:	b292      	uxth	r2, r2
 8018a7c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	2250      	movs	r2, #80	@ 0x50
 8018a86:	5a9b      	ldrh	r3, [r3, r2]
 8018a88:	b29b      	uxth	r3, r3
 8018a8a:	001a      	movs	r2, r3
 8018a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a8e:	189b      	adds	r3, r3, r2
 8018a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	781b      	ldrb	r3, [r3, #0]
 8018a96:	00da      	lsls	r2, r3, #3
 8018a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a9a:	18d3      	adds	r3, r2, r3
 8018a9c:	2280      	movs	r2, #128	@ 0x80
 8018a9e:	00d2      	lsls	r2, r2, #3
 8018aa0:	4694      	mov	ip, r2
 8018aa2:	4463      	add	r3, ip
 8018aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	891b      	ldrh	r3, [r3, #8]
 8018aaa:	085b      	lsrs	r3, r3, #1
 8018aac:	b29b      	uxth	r3, r3
 8018aae:	18db      	adds	r3, r3, r3
 8018ab0:	b29a      	uxth	r2, r3
 8018ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018ab4:	801a      	strh	r2, [r3, #0]
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	657b      	str	r3, [r7, #84]	@ 0x54
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	2250      	movs	r2, #80	@ 0x50
 8018abe:	5a9b      	ldrh	r3, [r3, r2]
 8018ac0:	b29b      	uxth	r3, r3
 8018ac2:	001a      	movs	r2, r3
 8018ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ac6:	189b      	adds	r3, r3, r2
 8018ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8018aca:	683b      	ldr	r3, [r7, #0]
 8018acc:	781b      	ldrb	r3, [r3, #0]
 8018ace:	00da      	lsls	r2, r3, #3
 8018ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ad2:	18d3      	adds	r3, r2, r3
 8018ad4:	4a88      	ldr	r2, [pc, #544]	@ (8018cf8 <USB_ActivateEndpoint+0x6c0>)
 8018ad6:	4694      	mov	ip, r2
 8018ad8:	4463      	add	r3, ip
 8018ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	895b      	ldrh	r3, [r3, #10]
 8018ae0:	085b      	lsrs	r3, r3, #1
 8018ae2:	b29b      	uxth	r3, r3
 8018ae4:	18db      	adds	r3, r3, r3
 8018ae6:	b29a      	uxth	r2, r3
 8018ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018aea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	785b      	ldrb	r3, [r3, #1]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d000      	beq.n	8018af6 <USB_ActivateEndpoint+0x4be>
 8018af4:	e087      	b.n	8018c06 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018af6:	687a      	ldr	r2, [r7, #4]
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	009b      	lsls	r3, r3, #2
 8018afe:	18d2      	adds	r2, r2, r3
 8018b00:	2140      	movs	r1, #64	@ 0x40
 8018b02:	187b      	adds	r3, r7, r1
 8018b04:	8812      	ldrh	r2, [r2, #0]
 8018b06:	801a      	strh	r2, [r3, #0]
 8018b08:	187b      	adds	r3, r7, r1
 8018b0a:	881a      	ldrh	r2, [r3, #0]
 8018b0c:	2380      	movs	r3, #128	@ 0x80
 8018b0e:	01db      	lsls	r3, r3, #7
 8018b10:	4013      	ands	r3, r2
 8018b12:	d016      	beq.n	8018b42 <USB_ActivateEndpoint+0x50a>
 8018b14:	687a      	ldr	r2, [r7, #4]
 8018b16:	683b      	ldr	r3, [r7, #0]
 8018b18:	781b      	ldrb	r3, [r3, #0]
 8018b1a:	009b      	lsls	r3, r3, #2
 8018b1c:	18d3      	adds	r3, r2, r3
 8018b1e:	881b      	ldrh	r3, [r3, #0]
 8018b20:	b29a      	uxth	r2, r3
 8018b22:	203e      	movs	r0, #62	@ 0x3e
 8018b24:	183b      	adds	r3, r7, r0
 8018b26:	496e      	ldr	r1, [pc, #440]	@ (8018ce0 <USB_ActivateEndpoint+0x6a8>)
 8018b28:	400a      	ands	r2, r1
 8018b2a:	801a      	strh	r2, [r3, #0]
 8018b2c:	687a      	ldr	r2, [r7, #4]
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	781b      	ldrb	r3, [r3, #0]
 8018b32:	009b      	lsls	r3, r3, #2
 8018b34:	18d3      	adds	r3, r2, r3
 8018b36:	183a      	adds	r2, r7, r0
 8018b38:	8812      	ldrh	r2, [r2, #0]
 8018b3a:	496a      	ldr	r1, [pc, #424]	@ (8018ce4 <USB_ActivateEndpoint+0x6ac>)
 8018b3c:	430a      	orrs	r2, r1
 8018b3e:	b292      	uxth	r2, r2
 8018b40:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018b42:	687a      	ldr	r2, [r7, #4]
 8018b44:	683b      	ldr	r3, [r7, #0]
 8018b46:	781b      	ldrb	r3, [r3, #0]
 8018b48:	009b      	lsls	r3, r3, #2
 8018b4a:	18d2      	adds	r2, r2, r3
 8018b4c:	213c      	movs	r1, #60	@ 0x3c
 8018b4e:	187b      	adds	r3, r7, r1
 8018b50:	8812      	ldrh	r2, [r2, #0]
 8018b52:	801a      	strh	r2, [r3, #0]
 8018b54:	187b      	adds	r3, r7, r1
 8018b56:	881b      	ldrh	r3, [r3, #0]
 8018b58:	2240      	movs	r2, #64	@ 0x40
 8018b5a:	4013      	ands	r3, r2
 8018b5c:	d016      	beq.n	8018b8c <USB_ActivateEndpoint+0x554>
 8018b5e:	687a      	ldr	r2, [r7, #4]
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	781b      	ldrb	r3, [r3, #0]
 8018b64:	009b      	lsls	r3, r3, #2
 8018b66:	18d3      	adds	r3, r2, r3
 8018b68:	881b      	ldrh	r3, [r3, #0]
 8018b6a:	b29a      	uxth	r2, r3
 8018b6c:	203a      	movs	r0, #58	@ 0x3a
 8018b6e:	183b      	adds	r3, r7, r0
 8018b70:	495b      	ldr	r1, [pc, #364]	@ (8018ce0 <USB_ActivateEndpoint+0x6a8>)
 8018b72:	400a      	ands	r2, r1
 8018b74:	801a      	strh	r2, [r3, #0]
 8018b76:	687a      	ldr	r2, [r7, #4]
 8018b78:	683b      	ldr	r3, [r7, #0]
 8018b7a:	781b      	ldrb	r3, [r3, #0]
 8018b7c:	009b      	lsls	r3, r3, #2
 8018b7e:	18d3      	adds	r3, r2, r3
 8018b80:	183a      	adds	r2, r7, r0
 8018b82:	8812      	ldrh	r2, [r2, #0]
 8018b84:	495d      	ldr	r1, [pc, #372]	@ (8018cfc <USB_ActivateEndpoint+0x6c4>)
 8018b86:	430a      	orrs	r2, r1
 8018b88:	b292      	uxth	r2, r2
 8018b8a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018b8c:	687a      	ldr	r2, [r7, #4]
 8018b8e:	683b      	ldr	r3, [r7, #0]
 8018b90:	781b      	ldrb	r3, [r3, #0]
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	18d3      	adds	r3, r2, r3
 8018b96:	881b      	ldrh	r3, [r3, #0]
 8018b98:	b29a      	uxth	r2, r3
 8018b9a:	2038      	movs	r0, #56	@ 0x38
 8018b9c:	183b      	adds	r3, r7, r0
 8018b9e:	4952      	ldr	r1, [pc, #328]	@ (8018ce8 <USB_ActivateEndpoint+0x6b0>)
 8018ba0:	400a      	ands	r2, r1
 8018ba2:	801a      	strh	r2, [r3, #0]
 8018ba4:	183b      	adds	r3, r7, r0
 8018ba6:	183a      	adds	r2, r7, r0
 8018ba8:	8812      	ldrh	r2, [r2, #0]
 8018baa:	2180      	movs	r1, #128	@ 0x80
 8018bac:	0149      	lsls	r1, r1, #5
 8018bae:	404a      	eors	r2, r1
 8018bb0:	801a      	strh	r2, [r3, #0]
 8018bb2:	183b      	adds	r3, r7, r0
 8018bb4:	183a      	adds	r2, r7, r0
 8018bb6:	8812      	ldrh	r2, [r2, #0]
 8018bb8:	2180      	movs	r1, #128	@ 0x80
 8018bba:	0189      	lsls	r1, r1, #6
 8018bbc:	404a      	eors	r2, r1
 8018bbe:	801a      	strh	r2, [r3, #0]
 8018bc0:	687a      	ldr	r2, [r7, #4]
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	781b      	ldrb	r3, [r3, #0]
 8018bc6:	009b      	lsls	r3, r3, #2
 8018bc8:	18d3      	adds	r3, r2, r3
 8018bca:	183a      	adds	r2, r7, r0
 8018bcc:	8812      	ldrh	r2, [r2, #0]
 8018bce:	4947      	ldr	r1, [pc, #284]	@ (8018cec <USB_ActivateEndpoint+0x6b4>)
 8018bd0:	430a      	orrs	r2, r1
 8018bd2:	b292      	uxth	r2, r2
 8018bd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018bd6:	687a      	ldr	r2, [r7, #4]
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	781b      	ldrb	r3, [r3, #0]
 8018bdc:	009b      	lsls	r3, r3, #2
 8018bde:	18d3      	adds	r3, r2, r3
 8018be0:	881b      	ldrh	r3, [r3, #0]
 8018be2:	b29a      	uxth	r2, r3
 8018be4:	2036      	movs	r0, #54	@ 0x36
 8018be6:	183b      	adds	r3, r7, r0
 8018be8:	4945      	ldr	r1, [pc, #276]	@ (8018d00 <USB_ActivateEndpoint+0x6c8>)
 8018bea:	400a      	ands	r2, r1
 8018bec:	801a      	strh	r2, [r3, #0]
 8018bee:	687a      	ldr	r2, [r7, #4]
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	781b      	ldrb	r3, [r3, #0]
 8018bf4:	009b      	lsls	r3, r3, #2
 8018bf6:	18d3      	adds	r3, r2, r3
 8018bf8:	183a      	adds	r2, r7, r0
 8018bfa:	8812      	ldrh	r2, [r2, #0]
 8018bfc:	493b      	ldr	r1, [pc, #236]	@ (8018cec <USB_ActivateEndpoint+0x6b4>)
 8018bfe:	430a      	orrs	r2, r1
 8018c00:	b292      	uxth	r2, r2
 8018c02:	801a      	strh	r2, [r3, #0]
 8018c04:	e0ac      	b.n	8018d60 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018c06:	687a      	ldr	r2, [r7, #4]
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	781b      	ldrb	r3, [r3, #0]
 8018c0c:	009b      	lsls	r3, r3, #2
 8018c0e:	18d2      	adds	r2, r2, r3
 8018c10:	214e      	movs	r1, #78	@ 0x4e
 8018c12:	187b      	adds	r3, r7, r1
 8018c14:	8812      	ldrh	r2, [r2, #0]
 8018c16:	801a      	strh	r2, [r3, #0]
 8018c18:	187b      	adds	r3, r7, r1
 8018c1a:	881a      	ldrh	r2, [r3, #0]
 8018c1c:	2380      	movs	r3, #128	@ 0x80
 8018c1e:	01db      	lsls	r3, r3, #7
 8018c20:	4013      	ands	r3, r2
 8018c22:	d016      	beq.n	8018c52 <USB_ActivateEndpoint+0x61a>
 8018c24:	687a      	ldr	r2, [r7, #4]
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	009b      	lsls	r3, r3, #2
 8018c2c:	18d3      	adds	r3, r2, r3
 8018c2e:	881b      	ldrh	r3, [r3, #0]
 8018c30:	b29a      	uxth	r2, r3
 8018c32:	204c      	movs	r0, #76	@ 0x4c
 8018c34:	183b      	adds	r3, r7, r0
 8018c36:	492a      	ldr	r1, [pc, #168]	@ (8018ce0 <USB_ActivateEndpoint+0x6a8>)
 8018c38:	400a      	ands	r2, r1
 8018c3a:	801a      	strh	r2, [r3, #0]
 8018c3c:	687a      	ldr	r2, [r7, #4]
 8018c3e:	683b      	ldr	r3, [r7, #0]
 8018c40:	781b      	ldrb	r3, [r3, #0]
 8018c42:	009b      	lsls	r3, r3, #2
 8018c44:	18d3      	adds	r3, r2, r3
 8018c46:	183a      	adds	r2, r7, r0
 8018c48:	8812      	ldrh	r2, [r2, #0]
 8018c4a:	4926      	ldr	r1, [pc, #152]	@ (8018ce4 <USB_ActivateEndpoint+0x6ac>)
 8018c4c:	430a      	orrs	r2, r1
 8018c4e:	b292      	uxth	r2, r2
 8018c50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018c52:	687a      	ldr	r2, [r7, #4]
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	781b      	ldrb	r3, [r3, #0]
 8018c58:	009b      	lsls	r3, r3, #2
 8018c5a:	18d2      	adds	r2, r2, r3
 8018c5c:	214a      	movs	r1, #74	@ 0x4a
 8018c5e:	187b      	adds	r3, r7, r1
 8018c60:	8812      	ldrh	r2, [r2, #0]
 8018c62:	801a      	strh	r2, [r3, #0]
 8018c64:	187b      	adds	r3, r7, r1
 8018c66:	881b      	ldrh	r3, [r3, #0]
 8018c68:	2240      	movs	r2, #64	@ 0x40
 8018c6a:	4013      	ands	r3, r2
 8018c6c:	d016      	beq.n	8018c9c <USB_ActivateEndpoint+0x664>
 8018c6e:	687a      	ldr	r2, [r7, #4]
 8018c70:	683b      	ldr	r3, [r7, #0]
 8018c72:	781b      	ldrb	r3, [r3, #0]
 8018c74:	009b      	lsls	r3, r3, #2
 8018c76:	18d3      	adds	r3, r2, r3
 8018c78:	881b      	ldrh	r3, [r3, #0]
 8018c7a:	b29a      	uxth	r2, r3
 8018c7c:	2048      	movs	r0, #72	@ 0x48
 8018c7e:	183b      	adds	r3, r7, r0
 8018c80:	4917      	ldr	r1, [pc, #92]	@ (8018ce0 <USB_ActivateEndpoint+0x6a8>)
 8018c82:	400a      	ands	r2, r1
 8018c84:	801a      	strh	r2, [r3, #0]
 8018c86:	687a      	ldr	r2, [r7, #4]
 8018c88:	683b      	ldr	r3, [r7, #0]
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	009b      	lsls	r3, r3, #2
 8018c8e:	18d3      	adds	r3, r2, r3
 8018c90:	183a      	adds	r2, r7, r0
 8018c92:	8812      	ldrh	r2, [r2, #0]
 8018c94:	4919      	ldr	r1, [pc, #100]	@ (8018cfc <USB_ActivateEndpoint+0x6c4>)
 8018c96:	430a      	orrs	r2, r1
 8018c98:	b292      	uxth	r2, r2
 8018c9a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	78db      	ldrb	r3, [r3, #3]
 8018ca0:	2b01      	cmp	r3, #1
 8018ca2:	d02f      	beq.n	8018d04 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018ca4:	687a      	ldr	r2, [r7, #4]
 8018ca6:	683b      	ldr	r3, [r7, #0]
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	009b      	lsls	r3, r3, #2
 8018cac:	18d3      	adds	r3, r2, r3
 8018cae:	881b      	ldrh	r3, [r3, #0]
 8018cb0:	b29a      	uxth	r2, r3
 8018cb2:	2044      	movs	r0, #68	@ 0x44
 8018cb4:	183b      	adds	r3, r7, r0
 8018cb6:	4912      	ldr	r1, [pc, #72]	@ (8018d00 <USB_ActivateEndpoint+0x6c8>)
 8018cb8:	400a      	ands	r2, r1
 8018cba:	801a      	strh	r2, [r3, #0]
 8018cbc:	183b      	adds	r3, r7, r0
 8018cbe:	183a      	adds	r2, r7, r0
 8018cc0:	8812      	ldrh	r2, [r2, #0]
 8018cc2:	2120      	movs	r1, #32
 8018cc4:	404a      	eors	r2, r1
 8018cc6:	801a      	strh	r2, [r3, #0]
 8018cc8:	687a      	ldr	r2, [r7, #4]
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	781b      	ldrb	r3, [r3, #0]
 8018cce:	009b      	lsls	r3, r3, #2
 8018cd0:	18d3      	adds	r3, r2, r3
 8018cd2:	183a      	adds	r2, r7, r0
 8018cd4:	8812      	ldrh	r2, [r2, #0]
 8018cd6:	4905      	ldr	r1, [pc, #20]	@ (8018cec <USB_ActivateEndpoint+0x6b4>)
 8018cd8:	430a      	orrs	r2, r1
 8018cda:	b292      	uxth	r2, r2
 8018cdc:	801a      	strh	r2, [r3, #0]
 8018cde:	e028      	b.n	8018d32 <USB_ActivateEndpoint+0x6fa>
 8018ce0:	ffff8f8f 	.word	0xffff8f8f
 8018ce4:	ffffc080 	.word	0xffffc080
 8018ce8:	ffffbf8f 	.word	0xffffbf8f
 8018cec:	ffff8080 	.word	0xffff8080
 8018cf0:	ffff8180 	.word	0xffff8180
 8018cf4:	ffff8e8f 	.word	0xffff8e8f
 8018cf8:	00000404 	.word	0x00000404
 8018cfc:	ffff80c0 	.word	0xffff80c0
 8018d00:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018d04:	687a      	ldr	r2, [r7, #4]
 8018d06:	683b      	ldr	r3, [r7, #0]
 8018d08:	781b      	ldrb	r3, [r3, #0]
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	18d3      	adds	r3, r2, r3
 8018d0e:	881b      	ldrh	r3, [r3, #0]
 8018d10:	b29a      	uxth	r2, r3
 8018d12:	2046      	movs	r0, #70	@ 0x46
 8018d14:	183b      	adds	r3, r7, r0
 8018d16:	4916      	ldr	r1, [pc, #88]	@ (8018d70 <USB_ActivateEndpoint+0x738>)
 8018d18:	400a      	ands	r2, r1
 8018d1a:	801a      	strh	r2, [r3, #0]
 8018d1c:	687a      	ldr	r2, [r7, #4]
 8018d1e:	683b      	ldr	r3, [r7, #0]
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	009b      	lsls	r3, r3, #2
 8018d24:	18d3      	adds	r3, r2, r3
 8018d26:	183a      	adds	r2, r7, r0
 8018d28:	8812      	ldrh	r2, [r2, #0]
 8018d2a:	4912      	ldr	r1, [pc, #72]	@ (8018d74 <USB_ActivateEndpoint+0x73c>)
 8018d2c:	430a      	orrs	r2, r1
 8018d2e:	b292      	uxth	r2, r2
 8018d30:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018d32:	687a      	ldr	r2, [r7, #4]
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	781b      	ldrb	r3, [r3, #0]
 8018d38:	009b      	lsls	r3, r3, #2
 8018d3a:	18d3      	adds	r3, r2, r3
 8018d3c:	881b      	ldrh	r3, [r3, #0]
 8018d3e:	b29a      	uxth	r2, r3
 8018d40:	2042      	movs	r0, #66	@ 0x42
 8018d42:	183b      	adds	r3, r7, r0
 8018d44:	490c      	ldr	r1, [pc, #48]	@ (8018d78 <USB_ActivateEndpoint+0x740>)
 8018d46:	400a      	ands	r2, r1
 8018d48:	801a      	strh	r2, [r3, #0]
 8018d4a:	687a      	ldr	r2, [r7, #4]
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	781b      	ldrb	r3, [r3, #0]
 8018d50:	009b      	lsls	r3, r3, #2
 8018d52:	18d3      	adds	r3, r2, r3
 8018d54:	183a      	adds	r2, r7, r0
 8018d56:	8812      	ldrh	r2, [r2, #0]
 8018d58:	4906      	ldr	r1, [pc, #24]	@ (8018d74 <USB_ActivateEndpoint+0x73c>)
 8018d5a:	430a      	orrs	r2, r1
 8018d5c:	b292      	uxth	r2, r2
 8018d5e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8018d60:	236f      	movs	r3, #111	@ 0x6f
 8018d62:	18fb      	adds	r3, r7, r3
 8018d64:	781b      	ldrb	r3, [r3, #0]
}
 8018d66:	0018      	movs	r0, r3
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	b01c      	add	sp, #112	@ 0x70
 8018d6c:	bd80      	pop	{r7, pc}
 8018d6e:	46c0      	nop			@ (mov r8, r8)
 8018d70:	ffff8fbf 	.word	0xffff8fbf
 8018d74:	ffff8080 	.word	0xffff8080
 8018d78:	ffffbf8f 	.word	0xffffbf8f

08018d7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b08c      	sub	sp, #48	@ 0x30
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
 8018d84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	7b1b      	ldrb	r3, [r3, #12]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d000      	beq.n	8018d90 <USB_DeactivateEndpoint+0x14>
 8018d8e:	e07e      	b.n	8018e8e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8018d90:	683b      	ldr	r3, [r7, #0]
 8018d92:	785b      	ldrb	r3, [r3, #1]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d03c      	beq.n	8018e12 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018d98:	687a      	ldr	r2, [r7, #4]
 8018d9a:	683b      	ldr	r3, [r7, #0]
 8018d9c:	781b      	ldrb	r3, [r3, #0]
 8018d9e:	009b      	lsls	r3, r3, #2
 8018da0:	18d2      	adds	r2, r2, r3
 8018da2:	210c      	movs	r1, #12
 8018da4:	187b      	adds	r3, r7, r1
 8018da6:	8812      	ldrh	r2, [r2, #0]
 8018da8:	801a      	strh	r2, [r3, #0]
 8018daa:	187b      	adds	r3, r7, r1
 8018dac:	881b      	ldrh	r3, [r3, #0]
 8018dae:	2240      	movs	r2, #64	@ 0x40
 8018db0:	4013      	ands	r3, r2
 8018db2:	d016      	beq.n	8018de2 <USB_DeactivateEndpoint+0x66>
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	009b      	lsls	r3, r3, #2
 8018dbc:	18d3      	adds	r3, r2, r3
 8018dbe:	881b      	ldrh	r3, [r3, #0]
 8018dc0:	b29a      	uxth	r2, r3
 8018dc2:	200a      	movs	r0, #10
 8018dc4:	183b      	adds	r3, r7, r0
 8018dc6:	49c7      	ldr	r1, [pc, #796]	@ (80190e4 <USB_DeactivateEndpoint+0x368>)
 8018dc8:	400a      	ands	r2, r1
 8018dca:	801a      	strh	r2, [r3, #0]
 8018dcc:	687a      	ldr	r2, [r7, #4]
 8018dce:	683b      	ldr	r3, [r7, #0]
 8018dd0:	781b      	ldrb	r3, [r3, #0]
 8018dd2:	009b      	lsls	r3, r3, #2
 8018dd4:	18d3      	adds	r3, r2, r3
 8018dd6:	183a      	adds	r2, r7, r0
 8018dd8:	8812      	ldrh	r2, [r2, #0]
 8018dda:	49c3      	ldr	r1, [pc, #780]	@ (80190e8 <USB_DeactivateEndpoint+0x36c>)
 8018ddc:	430a      	orrs	r2, r1
 8018dde:	b292      	uxth	r2, r2
 8018de0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018de2:	687a      	ldr	r2, [r7, #4]
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	009b      	lsls	r3, r3, #2
 8018dea:	18d3      	adds	r3, r2, r3
 8018dec:	881b      	ldrh	r3, [r3, #0]
 8018dee:	b29a      	uxth	r2, r3
 8018df0:	2008      	movs	r0, #8
 8018df2:	183b      	adds	r3, r7, r0
 8018df4:	49bd      	ldr	r1, [pc, #756]	@ (80190ec <USB_DeactivateEndpoint+0x370>)
 8018df6:	400a      	ands	r2, r1
 8018df8:	801a      	strh	r2, [r3, #0]
 8018dfa:	687a      	ldr	r2, [r7, #4]
 8018dfc:	683b      	ldr	r3, [r7, #0]
 8018dfe:	781b      	ldrb	r3, [r3, #0]
 8018e00:	009b      	lsls	r3, r3, #2
 8018e02:	18d3      	adds	r3, r2, r3
 8018e04:	183a      	adds	r2, r7, r0
 8018e06:	8812      	ldrh	r2, [r2, #0]
 8018e08:	49b9      	ldr	r1, [pc, #740]	@ (80190f0 <USB_DeactivateEndpoint+0x374>)
 8018e0a:	430a      	orrs	r2, r1
 8018e0c:	b292      	uxth	r2, r2
 8018e0e:	801a      	strh	r2, [r3, #0]
 8018e10:	e163      	b.n	80190da <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018e12:	687a      	ldr	r2, [r7, #4]
 8018e14:	683b      	ldr	r3, [r7, #0]
 8018e16:	781b      	ldrb	r3, [r3, #0]
 8018e18:	009b      	lsls	r3, r3, #2
 8018e1a:	18d2      	adds	r2, r2, r3
 8018e1c:	2112      	movs	r1, #18
 8018e1e:	187b      	adds	r3, r7, r1
 8018e20:	8812      	ldrh	r2, [r2, #0]
 8018e22:	801a      	strh	r2, [r3, #0]
 8018e24:	187b      	adds	r3, r7, r1
 8018e26:	881a      	ldrh	r2, [r3, #0]
 8018e28:	2380      	movs	r3, #128	@ 0x80
 8018e2a:	01db      	lsls	r3, r3, #7
 8018e2c:	4013      	ands	r3, r2
 8018e2e:	d016      	beq.n	8018e5e <USB_DeactivateEndpoint+0xe2>
 8018e30:	687a      	ldr	r2, [r7, #4]
 8018e32:	683b      	ldr	r3, [r7, #0]
 8018e34:	781b      	ldrb	r3, [r3, #0]
 8018e36:	009b      	lsls	r3, r3, #2
 8018e38:	18d3      	adds	r3, r2, r3
 8018e3a:	881b      	ldrh	r3, [r3, #0]
 8018e3c:	b29a      	uxth	r2, r3
 8018e3e:	2010      	movs	r0, #16
 8018e40:	183b      	adds	r3, r7, r0
 8018e42:	49a8      	ldr	r1, [pc, #672]	@ (80190e4 <USB_DeactivateEndpoint+0x368>)
 8018e44:	400a      	ands	r2, r1
 8018e46:	801a      	strh	r2, [r3, #0]
 8018e48:	687a      	ldr	r2, [r7, #4]
 8018e4a:	683b      	ldr	r3, [r7, #0]
 8018e4c:	781b      	ldrb	r3, [r3, #0]
 8018e4e:	009b      	lsls	r3, r3, #2
 8018e50:	18d3      	adds	r3, r2, r3
 8018e52:	183a      	adds	r2, r7, r0
 8018e54:	8812      	ldrh	r2, [r2, #0]
 8018e56:	49a7      	ldr	r1, [pc, #668]	@ (80190f4 <USB_DeactivateEndpoint+0x378>)
 8018e58:	430a      	orrs	r2, r1
 8018e5a:	b292      	uxth	r2, r2
 8018e5c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018e5e:	687a      	ldr	r2, [r7, #4]
 8018e60:	683b      	ldr	r3, [r7, #0]
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	009b      	lsls	r3, r3, #2
 8018e66:	18d3      	adds	r3, r2, r3
 8018e68:	881b      	ldrh	r3, [r3, #0]
 8018e6a:	b29a      	uxth	r2, r3
 8018e6c:	200e      	movs	r0, #14
 8018e6e:	183b      	adds	r3, r7, r0
 8018e70:	49a1      	ldr	r1, [pc, #644]	@ (80190f8 <USB_DeactivateEndpoint+0x37c>)
 8018e72:	400a      	ands	r2, r1
 8018e74:	801a      	strh	r2, [r3, #0]
 8018e76:	687a      	ldr	r2, [r7, #4]
 8018e78:	683b      	ldr	r3, [r7, #0]
 8018e7a:	781b      	ldrb	r3, [r3, #0]
 8018e7c:	009b      	lsls	r3, r3, #2
 8018e7e:	18d3      	adds	r3, r2, r3
 8018e80:	183a      	adds	r2, r7, r0
 8018e82:	8812      	ldrh	r2, [r2, #0]
 8018e84:	499a      	ldr	r1, [pc, #616]	@ (80190f0 <USB_DeactivateEndpoint+0x374>)
 8018e86:	430a      	orrs	r2, r1
 8018e88:	b292      	uxth	r2, r2
 8018e8a:	801a      	strh	r2, [r3, #0]
 8018e8c:	e125      	b.n	80190da <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8018e8e:	683b      	ldr	r3, [r7, #0]
 8018e90:	785b      	ldrb	r3, [r3, #1]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d000      	beq.n	8018e98 <USB_DeactivateEndpoint+0x11c>
 8018e96:	e090      	b.n	8018fba <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018e98:	687a      	ldr	r2, [r7, #4]
 8018e9a:	683b      	ldr	r3, [r7, #0]
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	009b      	lsls	r3, r3, #2
 8018ea0:	18d2      	adds	r2, r2, r3
 8018ea2:	2120      	movs	r1, #32
 8018ea4:	187b      	adds	r3, r7, r1
 8018ea6:	8812      	ldrh	r2, [r2, #0]
 8018ea8:	801a      	strh	r2, [r3, #0]
 8018eaa:	187b      	adds	r3, r7, r1
 8018eac:	881a      	ldrh	r2, [r3, #0]
 8018eae:	2380      	movs	r3, #128	@ 0x80
 8018eb0:	01db      	lsls	r3, r3, #7
 8018eb2:	4013      	ands	r3, r2
 8018eb4:	d016      	beq.n	8018ee4 <USB_DeactivateEndpoint+0x168>
 8018eb6:	687a      	ldr	r2, [r7, #4]
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	781b      	ldrb	r3, [r3, #0]
 8018ebc:	009b      	lsls	r3, r3, #2
 8018ebe:	18d3      	adds	r3, r2, r3
 8018ec0:	881b      	ldrh	r3, [r3, #0]
 8018ec2:	b29a      	uxth	r2, r3
 8018ec4:	201e      	movs	r0, #30
 8018ec6:	183b      	adds	r3, r7, r0
 8018ec8:	4986      	ldr	r1, [pc, #536]	@ (80190e4 <USB_DeactivateEndpoint+0x368>)
 8018eca:	400a      	ands	r2, r1
 8018ecc:	801a      	strh	r2, [r3, #0]
 8018ece:	687a      	ldr	r2, [r7, #4]
 8018ed0:	683b      	ldr	r3, [r7, #0]
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	009b      	lsls	r3, r3, #2
 8018ed6:	18d3      	adds	r3, r2, r3
 8018ed8:	183a      	adds	r2, r7, r0
 8018eda:	8812      	ldrh	r2, [r2, #0]
 8018edc:	4985      	ldr	r1, [pc, #532]	@ (80190f4 <USB_DeactivateEndpoint+0x378>)
 8018ede:	430a      	orrs	r2, r1
 8018ee0:	b292      	uxth	r2, r2
 8018ee2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018ee4:	687a      	ldr	r2, [r7, #4]
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	781b      	ldrb	r3, [r3, #0]
 8018eea:	009b      	lsls	r3, r3, #2
 8018eec:	18d2      	adds	r2, r2, r3
 8018eee:	211c      	movs	r1, #28
 8018ef0:	187b      	adds	r3, r7, r1
 8018ef2:	8812      	ldrh	r2, [r2, #0]
 8018ef4:	801a      	strh	r2, [r3, #0]
 8018ef6:	187b      	adds	r3, r7, r1
 8018ef8:	881b      	ldrh	r3, [r3, #0]
 8018efa:	2240      	movs	r2, #64	@ 0x40
 8018efc:	4013      	ands	r3, r2
 8018efe:	d016      	beq.n	8018f2e <USB_DeactivateEndpoint+0x1b2>
 8018f00:	687a      	ldr	r2, [r7, #4]
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	781b      	ldrb	r3, [r3, #0]
 8018f06:	009b      	lsls	r3, r3, #2
 8018f08:	18d3      	adds	r3, r2, r3
 8018f0a:	881b      	ldrh	r3, [r3, #0]
 8018f0c:	b29a      	uxth	r2, r3
 8018f0e:	201a      	movs	r0, #26
 8018f10:	183b      	adds	r3, r7, r0
 8018f12:	4974      	ldr	r1, [pc, #464]	@ (80190e4 <USB_DeactivateEndpoint+0x368>)
 8018f14:	400a      	ands	r2, r1
 8018f16:	801a      	strh	r2, [r3, #0]
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	781b      	ldrb	r3, [r3, #0]
 8018f1e:	009b      	lsls	r3, r3, #2
 8018f20:	18d3      	adds	r3, r2, r3
 8018f22:	183a      	adds	r2, r7, r0
 8018f24:	8812      	ldrh	r2, [r2, #0]
 8018f26:	4970      	ldr	r1, [pc, #448]	@ (80190e8 <USB_DeactivateEndpoint+0x36c>)
 8018f28:	430a      	orrs	r2, r1
 8018f2a:	b292      	uxth	r2, r2
 8018f2c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8018f2e:	687a      	ldr	r2, [r7, #4]
 8018f30:	683b      	ldr	r3, [r7, #0]
 8018f32:	781b      	ldrb	r3, [r3, #0]
 8018f34:	009b      	lsls	r3, r3, #2
 8018f36:	18d3      	adds	r3, r2, r3
 8018f38:	881b      	ldrh	r3, [r3, #0]
 8018f3a:	b29a      	uxth	r2, r3
 8018f3c:	2018      	movs	r0, #24
 8018f3e:	183b      	adds	r3, r7, r0
 8018f40:	4968      	ldr	r1, [pc, #416]	@ (80190e4 <USB_DeactivateEndpoint+0x368>)
 8018f42:	400a      	ands	r2, r1
 8018f44:	801a      	strh	r2, [r3, #0]
 8018f46:	687a      	ldr	r2, [r7, #4]
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	781b      	ldrb	r3, [r3, #0]
 8018f4c:	009b      	lsls	r3, r3, #2
 8018f4e:	18d3      	adds	r3, r2, r3
 8018f50:	183a      	adds	r2, r7, r0
 8018f52:	8812      	ldrh	r2, [r2, #0]
 8018f54:	4964      	ldr	r1, [pc, #400]	@ (80190e8 <USB_DeactivateEndpoint+0x36c>)
 8018f56:	430a      	orrs	r2, r1
 8018f58:	b292      	uxth	r2, r2
 8018f5a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018f5c:	687a      	ldr	r2, [r7, #4]
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	781b      	ldrb	r3, [r3, #0]
 8018f62:	009b      	lsls	r3, r3, #2
 8018f64:	18d3      	adds	r3, r2, r3
 8018f66:	881b      	ldrh	r3, [r3, #0]
 8018f68:	b29a      	uxth	r2, r3
 8018f6a:	2016      	movs	r0, #22
 8018f6c:	183b      	adds	r3, r7, r0
 8018f6e:	4962      	ldr	r1, [pc, #392]	@ (80190f8 <USB_DeactivateEndpoint+0x37c>)
 8018f70:	400a      	ands	r2, r1
 8018f72:	801a      	strh	r2, [r3, #0]
 8018f74:	687a      	ldr	r2, [r7, #4]
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	781b      	ldrb	r3, [r3, #0]
 8018f7a:	009b      	lsls	r3, r3, #2
 8018f7c:	18d3      	adds	r3, r2, r3
 8018f7e:	183a      	adds	r2, r7, r0
 8018f80:	8812      	ldrh	r2, [r2, #0]
 8018f82:	495b      	ldr	r1, [pc, #364]	@ (80190f0 <USB_DeactivateEndpoint+0x374>)
 8018f84:	430a      	orrs	r2, r1
 8018f86:	b292      	uxth	r2, r2
 8018f88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018f8a:	687a      	ldr	r2, [r7, #4]
 8018f8c:	683b      	ldr	r3, [r7, #0]
 8018f8e:	781b      	ldrb	r3, [r3, #0]
 8018f90:	009b      	lsls	r3, r3, #2
 8018f92:	18d3      	adds	r3, r2, r3
 8018f94:	881b      	ldrh	r3, [r3, #0]
 8018f96:	b29a      	uxth	r2, r3
 8018f98:	2014      	movs	r0, #20
 8018f9a:	183b      	adds	r3, r7, r0
 8018f9c:	4953      	ldr	r1, [pc, #332]	@ (80190ec <USB_DeactivateEndpoint+0x370>)
 8018f9e:	400a      	ands	r2, r1
 8018fa0:	801a      	strh	r2, [r3, #0]
 8018fa2:	687a      	ldr	r2, [r7, #4]
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	781b      	ldrb	r3, [r3, #0]
 8018fa8:	009b      	lsls	r3, r3, #2
 8018faa:	18d3      	adds	r3, r2, r3
 8018fac:	183a      	adds	r2, r7, r0
 8018fae:	8812      	ldrh	r2, [r2, #0]
 8018fb0:	494f      	ldr	r1, [pc, #316]	@ (80190f0 <USB_DeactivateEndpoint+0x374>)
 8018fb2:	430a      	orrs	r2, r1
 8018fb4:	b292      	uxth	r2, r2
 8018fb6:	801a      	strh	r2, [r3, #0]
 8018fb8:	e08f      	b.n	80190da <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018fba:	687a      	ldr	r2, [r7, #4]
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	781b      	ldrb	r3, [r3, #0]
 8018fc0:	009b      	lsls	r3, r3, #2
 8018fc2:	18d2      	adds	r2, r2, r3
 8018fc4:	212e      	movs	r1, #46	@ 0x2e
 8018fc6:	187b      	adds	r3, r7, r1
 8018fc8:	8812      	ldrh	r2, [r2, #0]
 8018fca:	801a      	strh	r2, [r3, #0]
 8018fcc:	187b      	adds	r3, r7, r1
 8018fce:	881a      	ldrh	r2, [r3, #0]
 8018fd0:	2380      	movs	r3, #128	@ 0x80
 8018fd2:	01db      	lsls	r3, r3, #7
 8018fd4:	4013      	ands	r3, r2
 8018fd6:	d016      	beq.n	8019006 <USB_DeactivateEndpoint+0x28a>
 8018fd8:	687a      	ldr	r2, [r7, #4]
 8018fda:	683b      	ldr	r3, [r7, #0]
 8018fdc:	781b      	ldrb	r3, [r3, #0]
 8018fde:	009b      	lsls	r3, r3, #2
 8018fe0:	18d3      	adds	r3, r2, r3
 8018fe2:	881b      	ldrh	r3, [r3, #0]
 8018fe4:	b29a      	uxth	r2, r3
 8018fe6:	202c      	movs	r0, #44	@ 0x2c
 8018fe8:	183b      	adds	r3, r7, r0
 8018fea:	493e      	ldr	r1, [pc, #248]	@ (80190e4 <USB_DeactivateEndpoint+0x368>)
 8018fec:	400a      	ands	r2, r1
 8018fee:	801a      	strh	r2, [r3, #0]
 8018ff0:	687a      	ldr	r2, [r7, #4]
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	009b      	lsls	r3, r3, #2
 8018ff8:	18d3      	adds	r3, r2, r3
 8018ffa:	183a      	adds	r2, r7, r0
 8018ffc:	8812      	ldrh	r2, [r2, #0]
 8018ffe:	493d      	ldr	r1, [pc, #244]	@ (80190f4 <USB_DeactivateEndpoint+0x378>)
 8019000:	430a      	orrs	r2, r1
 8019002:	b292      	uxth	r2, r2
 8019004:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019006:	687a      	ldr	r2, [r7, #4]
 8019008:	683b      	ldr	r3, [r7, #0]
 801900a:	781b      	ldrb	r3, [r3, #0]
 801900c:	009b      	lsls	r3, r3, #2
 801900e:	18d2      	adds	r2, r2, r3
 8019010:	212a      	movs	r1, #42	@ 0x2a
 8019012:	187b      	adds	r3, r7, r1
 8019014:	8812      	ldrh	r2, [r2, #0]
 8019016:	801a      	strh	r2, [r3, #0]
 8019018:	187b      	adds	r3, r7, r1
 801901a:	881b      	ldrh	r3, [r3, #0]
 801901c:	2240      	movs	r2, #64	@ 0x40
 801901e:	4013      	ands	r3, r2
 8019020:	d016      	beq.n	8019050 <USB_DeactivateEndpoint+0x2d4>
 8019022:	687a      	ldr	r2, [r7, #4]
 8019024:	683b      	ldr	r3, [r7, #0]
 8019026:	781b      	ldrb	r3, [r3, #0]
 8019028:	009b      	lsls	r3, r3, #2
 801902a:	18d3      	adds	r3, r2, r3
 801902c:	881b      	ldrh	r3, [r3, #0]
 801902e:	b29a      	uxth	r2, r3
 8019030:	2028      	movs	r0, #40	@ 0x28
 8019032:	183b      	adds	r3, r7, r0
 8019034:	492b      	ldr	r1, [pc, #172]	@ (80190e4 <USB_DeactivateEndpoint+0x368>)
 8019036:	400a      	ands	r2, r1
 8019038:	801a      	strh	r2, [r3, #0]
 801903a:	687a      	ldr	r2, [r7, #4]
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	781b      	ldrb	r3, [r3, #0]
 8019040:	009b      	lsls	r3, r3, #2
 8019042:	18d3      	adds	r3, r2, r3
 8019044:	183a      	adds	r2, r7, r0
 8019046:	8812      	ldrh	r2, [r2, #0]
 8019048:	4927      	ldr	r1, [pc, #156]	@ (80190e8 <USB_DeactivateEndpoint+0x36c>)
 801904a:	430a      	orrs	r2, r1
 801904c:	b292      	uxth	r2, r2
 801904e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019050:	687a      	ldr	r2, [r7, #4]
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	009b      	lsls	r3, r3, #2
 8019058:	18d3      	adds	r3, r2, r3
 801905a:	881b      	ldrh	r3, [r3, #0]
 801905c:	b29a      	uxth	r2, r3
 801905e:	2026      	movs	r0, #38	@ 0x26
 8019060:	183b      	adds	r3, r7, r0
 8019062:	4920      	ldr	r1, [pc, #128]	@ (80190e4 <USB_DeactivateEndpoint+0x368>)
 8019064:	400a      	ands	r2, r1
 8019066:	801a      	strh	r2, [r3, #0]
 8019068:	687a      	ldr	r2, [r7, #4]
 801906a:	683b      	ldr	r3, [r7, #0]
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	009b      	lsls	r3, r3, #2
 8019070:	18d3      	adds	r3, r2, r3
 8019072:	183a      	adds	r2, r7, r0
 8019074:	8812      	ldrh	r2, [r2, #0]
 8019076:	491f      	ldr	r1, [pc, #124]	@ (80190f4 <USB_DeactivateEndpoint+0x378>)
 8019078:	430a      	orrs	r2, r1
 801907a:	b292      	uxth	r2, r2
 801907c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801907e:	687a      	ldr	r2, [r7, #4]
 8019080:	683b      	ldr	r3, [r7, #0]
 8019082:	781b      	ldrb	r3, [r3, #0]
 8019084:	009b      	lsls	r3, r3, #2
 8019086:	18d3      	adds	r3, r2, r3
 8019088:	881b      	ldrh	r3, [r3, #0]
 801908a:	b29a      	uxth	r2, r3
 801908c:	2024      	movs	r0, #36	@ 0x24
 801908e:	183b      	adds	r3, r7, r0
 8019090:	4916      	ldr	r1, [pc, #88]	@ (80190ec <USB_DeactivateEndpoint+0x370>)
 8019092:	400a      	ands	r2, r1
 8019094:	801a      	strh	r2, [r3, #0]
 8019096:	687a      	ldr	r2, [r7, #4]
 8019098:	683b      	ldr	r3, [r7, #0]
 801909a:	781b      	ldrb	r3, [r3, #0]
 801909c:	009b      	lsls	r3, r3, #2
 801909e:	18d3      	adds	r3, r2, r3
 80190a0:	183a      	adds	r2, r7, r0
 80190a2:	8812      	ldrh	r2, [r2, #0]
 80190a4:	4912      	ldr	r1, [pc, #72]	@ (80190f0 <USB_DeactivateEndpoint+0x374>)
 80190a6:	430a      	orrs	r2, r1
 80190a8:	b292      	uxth	r2, r2
 80190aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80190ac:	687a      	ldr	r2, [r7, #4]
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	009b      	lsls	r3, r3, #2
 80190b4:	18d3      	adds	r3, r2, r3
 80190b6:	881b      	ldrh	r3, [r3, #0]
 80190b8:	b29a      	uxth	r2, r3
 80190ba:	2022      	movs	r0, #34	@ 0x22
 80190bc:	183b      	adds	r3, r7, r0
 80190be:	490e      	ldr	r1, [pc, #56]	@ (80190f8 <USB_DeactivateEndpoint+0x37c>)
 80190c0:	400a      	ands	r2, r1
 80190c2:	801a      	strh	r2, [r3, #0]
 80190c4:	687a      	ldr	r2, [r7, #4]
 80190c6:	683b      	ldr	r3, [r7, #0]
 80190c8:	781b      	ldrb	r3, [r3, #0]
 80190ca:	009b      	lsls	r3, r3, #2
 80190cc:	18d3      	adds	r3, r2, r3
 80190ce:	183a      	adds	r2, r7, r0
 80190d0:	8812      	ldrh	r2, [r2, #0]
 80190d2:	4907      	ldr	r1, [pc, #28]	@ (80190f0 <USB_DeactivateEndpoint+0x374>)
 80190d4:	430a      	orrs	r2, r1
 80190d6:	b292      	uxth	r2, r2
 80190d8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80190da:	2300      	movs	r3, #0
}
 80190dc:	0018      	movs	r0, r3
 80190de:	46bd      	mov	sp, r7
 80190e0:	b00c      	add	sp, #48	@ 0x30
 80190e2:	bd80      	pop	{r7, pc}
 80190e4:	ffff8f8f 	.word	0xffff8f8f
 80190e8:	ffff80c0 	.word	0xffff80c0
 80190ec:	ffff8fbf 	.word	0xffff8fbf
 80190f0:	ffff8080 	.word	0xffff8080
 80190f4:	ffffc080 	.word	0xffffc080
 80190f8:	ffffbf8f 	.word	0xffffbf8f

080190fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80190fc:	b590      	push	{r4, r7, lr}
 80190fe:	b0c3      	sub	sp, #268	@ 0x10c
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
 8019104:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	785b      	ldrb	r3, [r3, #1]
 801910a:	2b01      	cmp	r3, #1
 801910c:	d001      	beq.n	8019112 <USB_EPStartXfer+0x16>
 801910e:	f000 fd2d 	bl	8019b6c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	699a      	ldr	r2, [r3, #24]
 8019116:	683b      	ldr	r3, [r7, #0]
 8019118:	691b      	ldr	r3, [r3, #16]
 801911a:	429a      	cmp	r2, r3
 801911c:	d905      	bls.n	801912a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801911e:	683b      	ldr	r3, [r7, #0]
 8019120:	691b      	ldr	r3, [r3, #16]
 8019122:	1d7a      	adds	r2, r7, #5
 8019124:	32ff      	adds	r2, #255	@ 0xff
 8019126:	6013      	str	r3, [r2, #0]
 8019128:	e004      	b.n	8019134 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801912a:	683b      	ldr	r3, [r7, #0]
 801912c:	699b      	ldr	r3, [r3, #24]
 801912e:	1d7a      	adds	r2, r7, #5
 8019130:	32ff      	adds	r2, #255	@ 0xff
 8019132:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019134:	683b      	ldr	r3, [r7, #0]
 8019136:	7b1b      	ldrb	r3, [r3, #12]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d125      	bne.n	8019188 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	6959      	ldr	r1, [r3, #20]
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	88da      	ldrh	r2, [r3, #6]
 8019144:	1d7b      	adds	r3, r7, #5
 8019146:	33ff      	adds	r3, #255	@ 0xff
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	b29b      	uxth	r3, r3
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f001 fa47 	bl	801a5e0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	613b      	str	r3, [r7, #16]
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	2250      	movs	r2, #80	@ 0x50
 801915a:	5a9b      	ldrh	r3, [r3, r2]
 801915c:	b29b      	uxth	r3, r3
 801915e:	001a      	movs	r2, r3
 8019160:	693b      	ldr	r3, [r7, #16]
 8019162:	189b      	adds	r3, r3, r2
 8019164:	613b      	str	r3, [r7, #16]
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	781b      	ldrb	r3, [r3, #0]
 801916a:	00da      	lsls	r2, r3, #3
 801916c:	693b      	ldr	r3, [r7, #16]
 801916e:	18d3      	adds	r3, r2, r3
 8019170:	4ad7      	ldr	r2, [pc, #860]	@ (80194d0 <USB_EPStartXfer+0x3d4>)
 8019172:	4694      	mov	ip, r2
 8019174:	4463      	add	r3, ip
 8019176:	60fb      	str	r3, [r7, #12]
 8019178:	1d7b      	adds	r3, r7, #5
 801917a:	33ff      	adds	r3, #255	@ 0xff
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	b29a      	uxth	r2, r3
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	801a      	strh	r2, [r3, #0]
 8019184:	f000 fccd 	bl	8019b22 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019188:	683b      	ldr	r3, [r7, #0]
 801918a:	78db      	ldrb	r3, [r3, #3]
 801918c:	2b02      	cmp	r3, #2
 801918e:	d000      	beq.n	8019192 <USB_EPStartXfer+0x96>
 8019190:	e362      	b.n	8019858 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	6a1a      	ldr	r2, [r3, #32]
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	691b      	ldr	r3, [r3, #16]
 801919a:	429a      	cmp	r2, r3
 801919c:	d800      	bhi.n	80191a0 <USB_EPStartXfer+0xa4>
 801919e:	e309      	b.n	80197b4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80191a0:	687a      	ldr	r2, [r7, #4]
 80191a2:	683b      	ldr	r3, [r7, #0]
 80191a4:	781b      	ldrb	r3, [r3, #0]
 80191a6:	009b      	lsls	r3, r3, #2
 80191a8:	18d3      	adds	r3, r2, r3
 80191aa:	881b      	ldrh	r3, [r3, #0]
 80191ac:	b29a      	uxth	r2, r3
 80191ae:	2056      	movs	r0, #86	@ 0x56
 80191b0:	183b      	adds	r3, r7, r0
 80191b2:	49c8      	ldr	r1, [pc, #800]	@ (80194d4 <USB_EPStartXfer+0x3d8>)
 80191b4:	400a      	ands	r2, r1
 80191b6:	801a      	strh	r2, [r3, #0]
 80191b8:	687a      	ldr	r2, [r7, #4]
 80191ba:	683b      	ldr	r3, [r7, #0]
 80191bc:	781b      	ldrb	r3, [r3, #0]
 80191be:	009b      	lsls	r3, r3, #2
 80191c0:	18d3      	adds	r3, r2, r3
 80191c2:	183a      	adds	r2, r7, r0
 80191c4:	8812      	ldrh	r2, [r2, #0]
 80191c6:	49c4      	ldr	r1, [pc, #784]	@ (80194d8 <USB_EPStartXfer+0x3dc>)
 80191c8:	430a      	orrs	r2, r1
 80191ca:	b292      	uxth	r2, r2
 80191cc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	6a1a      	ldr	r2, [r3, #32]
 80191d2:	1d7b      	adds	r3, r7, #5
 80191d4:	33ff      	adds	r3, #255	@ 0xff
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	1ad2      	subs	r2, r2, r3
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80191de:	687a      	ldr	r2, [r7, #4]
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	781b      	ldrb	r3, [r3, #0]
 80191e4:	009b      	lsls	r3, r3, #2
 80191e6:	18d3      	adds	r3, r2, r3
 80191e8:	881b      	ldrh	r3, [r3, #0]
 80191ea:	b29b      	uxth	r3, r3
 80191ec:	001a      	movs	r2, r3
 80191ee:	2340      	movs	r3, #64	@ 0x40
 80191f0:	4013      	ands	r3, r2
 80191f2:	d100      	bne.n	80191f6 <USB_EPStartXfer+0xfa>
 80191f4:	e176      	b.n	80194e4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80191fa:	683b      	ldr	r3, [r7, #0]
 80191fc:	785b      	ldrb	r3, [r3, #1]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d000      	beq.n	8019204 <USB_EPStartXfer+0x108>
 8019202:	e074      	b.n	80192ee <USB_EPStartXfer+0x1f2>
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2250      	movs	r2, #80	@ 0x50
 801920c:	5a9b      	ldrh	r3, [r3, r2]
 801920e:	b29b      	uxth	r3, r3
 8019210:	001a      	movs	r2, r3
 8019212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019214:	189b      	adds	r3, r3, r2
 8019216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019218:	683b      	ldr	r3, [r7, #0]
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	00da      	lsls	r2, r3, #3
 801921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019220:	18d3      	adds	r3, r2, r3
 8019222:	4aae      	ldr	r2, [pc, #696]	@ (80194dc <USB_EPStartXfer+0x3e0>)
 8019224:	4694      	mov	ip, r2
 8019226:	4463      	add	r3, ip
 8019228:	627b      	str	r3, [r7, #36]	@ 0x24
 801922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801922c:	881b      	ldrh	r3, [r3, #0]
 801922e:	b29b      	uxth	r3, r3
 8019230:	059b      	lsls	r3, r3, #22
 8019232:	0d9b      	lsrs	r3, r3, #22
 8019234:	b29a      	uxth	r2, r3
 8019236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019238:	801a      	strh	r2, [r3, #0]
 801923a:	1d7b      	adds	r3, r7, #5
 801923c:	33ff      	adds	r3, #255	@ 0xff
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	2b3e      	cmp	r3, #62	@ 0x3e
 8019242:	d924      	bls.n	801928e <USB_EPStartXfer+0x192>
 8019244:	1d7b      	adds	r3, r7, #5
 8019246:	33ff      	adds	r3, #255	@ 0xff
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	095b      	lsrs	r3, r3, #5
 801924c:	1c7a      	adds	r2, r7, #1
 801924e:	32ff      	adds	r2, #255	@ 0xff
 8019250:	6013      	str	r3, [r2, #0]
 8019252:	1d7b      	adds	r3, r7, #5
 8019254:	33ff      	adds	r3, #255	@ 0xff
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	221f      	movs	r2, #31
 801925a:	4013      	ands	r3, r2
 801925c:	d106      	bne.n	801926c <USB_EPStartXfer+0x170>
 801925e:	1c7b      	adds	r3, r7, #1
 8019260:	33ff      	adds	r3, #255	@ 0xff
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	3b01      	subs	r3, #1
 8019266:	1c7a      	adds	r2, r7, #1
 8019268:	32ff      	adds	r2, #255	@ 0xff
 801926a:	6013      	str	r3, [r2, #0]
 801926c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801926e:	881b      	ldrh	r3, [r3, #0]
 8019270:	b29a      	uxth	r2, r3
 8019272:	1c7b      	adds	r3, r7, #1
 8019274:	33ff      	adds	r3, #255	@ 0xff
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	b29b      	uxth	r3, r3
 801927a:	029b      	lsls	r3, r3, #10
 801927c:	b29b      	uxth	r3, r3
 801927e:	4313      	orrs	r3, r2
 8019280:	b29b      	uxth	r3, r3
 8019282:	4a97      	ldr	r2, [pc, #604]	@ (80194e0 <USB_EPStartXfer+0x3e4>)
 8019284:	4313      	orrs	r3, r2
 8019286:	b29a      	uxth	r2, r3
 8019288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801928a:	801a      	strh	r2, [r3, #0]
 801928c:	e04a      	b.n	8019324 <USB_EPStartXfer+0x228>
 801928e:	1d7b      	adds	r3, r7, #5
 8019290:	33ff      	adds	r3, #255	@ 0xff
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d108      	bne.n	80192aa <USB_EPStartXfer+0x1ae>
 8019298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801929a:	881b      	ldrh	r3, [r3, #0]
 801929c:	b29b      	uxth	r3, r3
 801929e:	4a90      	ldr	r2, [pc, #576]	@ (80194e0 <USB_EPStartXfer+0x3e4>)
 80192a0:	4313      	orrs	r3, r2
 80192a2:	b29a      	uxth	r2, r3
 80192a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192a6:	801a      	strh	r2, [r3, #0]
 80192a8:	e03c      	b.n	8019324 <USB_EPStartXfer+0x228>
 80192aa:	1d7b      	adds	r3, r7, #5
 80192ac:	33ff      	adds	r3, #255	@ 0xff
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	085b      	lsrs	r3, r3, #1
 80192b2:	1c7a      	adds	r2, r7, #1
 80192b4:	32ff      	adds	r2, #255	@ 0xff
 80192b6:	6013      	str	r3, [r2, #0]
 80192b8:	1d7b      	adds	r3, r7, #5
 80192ba:	33ff      	adds	r3, #255	@ 0xff
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	2201      	movs	r2, #1
 80192c0:	4013      	ands	r3, r2
 80192c2:	d006      	beq.n	80192d2 <USB_EPStartXfer+0x1d6>
 80192c4:	1c7b      	adds	r3, r7, #1
 80192c6:	33ff      	adds	r3, #255	@ 0xff
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	3301      	adds	r3, #1
 80192cc:	1c7a      	adds	r2, r7, #1
 80192ce:	32ff      	adds	r2, #255	@ 0xff
 80192d0:	6013      	str	r3, [r2, #0]
 80192d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192d4:	881b      	ldrh	r3, [r3, #0]
 80192d6:	b29a      	uxth	r2, r3
 80192d8:	1c7b      	adds	r3, r7, #1
 80192da:	33ff      	adds	r3, #255	@ 0xff
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	b29b      	uxth	r3, r3
 80192e0:	029b      	lsls	r3, r3, #10
 80192e2:	b29b      	uxth	r3, r3
 80192e4:	4313      	orrs	r3, r2
 80192e6:	b29a      	uxth	r2, r3
 80192e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ea:	801a      	strh	r2, [r3, #0]
 80192ec:	e01a      	b.n	8019324 <USB_EPStartXfer+0x228>
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	785b      	ldrb	r3, [r3, #1]
 80192f2:	2b01      	cmp	r3, #1
 80192f4:	d116      	bne.n	8019324 <USB_EPStartXfer+0x228>
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	2250      	movs	r2, #80	@ 0x50
 80192fa:	5a9b      	ldrh	r3, [r3, r2]
 80192fc:	b29b      	uxth	r3, r3
 80192fe:	001a      	movs	r2, r3
 8019300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019302:	189b      	adds	r3, r3, r2
 8019304:	633b      	str	r3, [r7, #48]	@ 0x30
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	781b      	ldrb	r3, [r3, #0]
 801930a:	00da      	lsls	r2, r3, #3
 801930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801930e:	18d3      	adds	r3, r2, r3
 8019310:	4a72      	ldr	r2, [pc, #456]	@ (80194dc <USB_EPStartXfer+0x3e0>)
 8019312:	4694      	mov	ip, r2
 8019314:	4463      	add	r3, ip
 8019316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019318:	1d7b      	adds	r3, r7, #5
 801931a:	33ff      	adds	r3, #255	@ 0xff
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	b29a      	uxth	r2, r3
 8019320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019322:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019324:	2076      	movs	r0, #118	@ 0x76
 8019326:	183b      	adds	r3, r7, r0
 8019328:	683a      	ldr	r2, [r7, #0]
 801932a:	8952      	ldrh	r2, [r2, #10]
 801932c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	6959      	ldr	r1, [r3, #20]
 8019332:	1d7b      	adds	r3, r7, #5
 8019334:	33ff      	adds	r3, #255	@ 0xff
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	b29c      	uxth	r4, r3
 801933a:	183b      	adds	r3, r7, r0
 801933c:	881a      	ldrh	r2, [r3, #0]
 801933e:	6878      	ldr	r0, [r7, #4]
 8019340:	0023      	movs	r3, r4
 8019342:	f001 f94d 	bl	801a5e0 <USB_WritePMA>
            ep->xfer_buff += len;
 8019346:	683b      	ldr	r3, [r7, #0]
 8019348:	695a      	ldr	r2, [r3, #20]
 801934a:	1d7b      	adds	r3, r7, #5
 801934c:	33ff      	adds	r3, #255	@ 0xff
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	18d2      	adds	r2, r2, r3
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019356:	683b      	ldr	r3, [r7, #0]
 8019358:	6a1a      	ldr	r2, [r3, #32]
 801935a:	683b      	ldr	r3, [r7, #0]
 801935c:	691b      	ldr	r3, [r3, #16]
 801935e:	429a      	cmp	r2, r3
 8019360:	d908      	bls.n	8019374 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	6a1a      	ldr	r2, [r3, #32]
 8019366:	1d7b      	adds	r3, r7, #5
 8019368:	33ff      	adds	r3, #255	@ 0xff
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	1ad2      	subs	r2, r2, r3
 801936e:	683b      	ldr	r3, [r7, #0]
 8019370:	621a      	str	r2, [r3, #32]
 8019372:	e007      	b.n	8019384 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	6a1b      	ldr	r3, [r3, #32]
 8019378:	1d7a      	adds	r2, r7, #5
 801937a:	32ff      	adds	r2, #255	@ 0xff
 801937c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	2200      	movs	r2, #0
 8019382:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019384:	683b      	ldr	r3, [r7, #0]
 8019386:	785b      	ldrb	r3, [r3, #1]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d000      	beq.n	801938e <USB_EPStartXfer+0x292>
 801938c:	e070      	b.n	8019470 <USB_EPStartXfer+0x374>
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	61bb      	str	r3, [r7, #24]
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	2250      	movs	r2, #80	@ 0x50
 8019396:	5a9b      	ldrh	r3, [r3, r2]
 8019398:	b29b      	uxth	r3, r3
 801939a:	001a      	movs	r2, r3
 801939c:	69bb      	ldr	r3, [r7, #24]
 801939e:	189b      	adds	r3, r3, r2
 80193a0:	61bb      	str	r3, [r7, #24]
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	781b      	ldrb	r3, [r3, #0]
 80193a6:	00da      	lsls	r2, r3, #3
 80193a8:	69bb      	ldr	r3, [r7, #24]
 80193aa:	18d3      	adds	r3, r2, r3
 80193ac:	4a48      	ldr	r2, [pc, #288]	@ (80194d0 <USB_EPStartXfer+0x3d4>)
 80193ae:	4694      	mov	ip, r2
 80193b0:	4463      	add	r3, ip
 80193b2:	617b      	str	r3, [r7, #20]
 80193b4:	697b      	ldr	r3, [r7, #20]
 80193b6:	881b      	ldrh	r3, [r3, #0]
 80193b8:	b29b      	uxth	r3, r3
 80193ba:	059b      	lsls	r3, r3, #22
 80193bc:	0d9b      	lsrs	r3, r3, #22
 80193be:	b29a      	uxth	r2, r3
 80193c0:	697b      	ldr	r3, [r7, #20]
 80193c2:	801a      	strh	r2, [r3, #0]
 80193c4:	1d7b      	adds	r3, r7, #5
 80193c6:	33ff      	adds	r3, #255	@ 0xff
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80193cc:	d922      	bls.n	8019414 <USB_EPStartXfer+0x318>
 80193ce:	1d7b      	adds	r3, r7, #5
 80193d0:	33ff      	adds	r3, #255	@ 0xff
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	095b      	lsrs	r3, r3, #5
 80193d6:	21fc      	movs	r1, #252	@ 0xfc
 80193d8:	187a      	adds	r2, r7, r1
 80193da:	6013      	str	r3, [r2, #0]
 80193dc:	1d7b      	adds	r3, r7, #5
 80193de:	33ff      	adds	r3, #255	@ 0xff
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	221f      	movs	r2, #31
 80193e4:	4013      	ands	r3, r2
 80193e6:	d104      	bne.n	80193f2 <USB_EPStartXfer+0x2f6>
 80193e8:	187b      	adds	r3, r7, r1
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	3b01      	subs	r3, #1
 80193ee:	187a      	adds	r2, r7, r1
 80193f0:	6013      	str	r3, [r2, #0]
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	881b      	ldrh	r3, [r3, #0]
 80193f6:	b29a      	uxth	r2, r3
 80193f8:	23fc      	movs	r3, #252	@ 0xfc
 80193fa:	18fb      	adds	r3, r7, r3
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	b29b      	uxth	r3, r3
 8019400:	029b      	lsls	r3, r3, #10
 8019402:	b29b      	uxth	r3, r3
 8019404:	4313      	orrs	r3, r2
 8019406:	b29b      	uxth	r3, r3
 8019408:	4a35      	ldr	r2, [pc, #212]	@ (80194e0 <USB_EPStartXfer+0x3e4>)
 801940a:	4313      	orrs	r3, r2
 801940c:	b29a      	uxth	r2, r3
 801940e:	697b      	ldr	r3, [r7, #20]
 8019410:	801a      	strh	r2, [r3, #0]
 8019412:	e04a      	b.n	80194aa <USB_EPStartXfer+0x3ae>
 8019414:	1d7b      	adds	r3, r7, #5
 8019416:	33ff      	adds	r3, #255	@ 0xff
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d108      	bne.n	8019430 <USB_EPStartXfer+0x334>
 801941e:	697b      	ldr	r3, [r7, #20]
 8019420:	881b      	ldrh	r3, [r3, #0]
 8019422:	b29b      	uxth	r3, r3
 8019424:	4a2e      	ldr	r2, [pc, #184]	@ (80194e0 <USB_EPStartXfer+0x3e4>)
 8019426:	4313      	orrs	r3, r2
 8019428:	b29a      	uxth	r2, r3
 801942a:	697b      	ldr	r3, [r7, #20]
 801942c:	801a      	strh	r2, [r3, #0]
 801942e:	e03c      	b.n	80194aa <USB_EPStartXfer+0x3ae>
 8019430:	1d7b      	adds	r3, r7, #5
 8019432:	33ff      	adds	r3, #255	@ 0xff
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	085b      	lsrs	r3, r3, #1
 8019438:	21fc      	movs	r1, #252	@ 0xfc
 801943a:	187a      	adds	r2, r7, r1
 801943c:	6013      	str	r3, [r2, #0]
 801943e:	1d7b      	adds	r3, r7, #5
 8019440:	33ff      	adds	r3, #255	@ 0xff
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	2201      	movs	r2, #1
 8019446:	4013      	ands	r3, r2
 8019448:	d004      	beq.n	8019454 <USB_EPStartXfer+0x358>
 801944a:	187b      	adds	r3, r7, r1
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	3301      	adds	r3, #1
 8019450:	187a      	adds	r2, r7, r1
 8019452:	6013      	str	r3, [r2, #0]
 8019454:	697b      	ldr	r3, [r7, #20]
 8019456:	881b      	ldrh	r3, [r3, #0]
 8019458:	b29a      	uxth	r2, r3
 801945a:	23fc      	movs	r3, #252	@ 0xfc
 801945c:	18fb      	adds	r3, r7, r3
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	b29b      	uxth	r3, r3
 8019462:	029b      	lsls	r3, r3, #10
 8019464:	b29b      	uxth	r3, r3
 8019466:	4313      	orrs	r3, r2
 8019468:	b29a      	uxth	r2, r3
 801946a:	697b      	ldr	r3, [r7, #20]
 801946c:	801a      	strh	r2, [r3, #0]
 801946e:	e01c      	b.n	80194aa <USB_EPStartXfer+0x3ae>
 8019470:	683b      	ldr	r3, [r7, #0]
 8019472:	785b      	ldrb	r3, [r3, #1]
 8019474:	2b01      	cmp	r3, #1
 8019476:	d118      	bne.n	80194aa <USB_EPStartXfer+0x3ae>
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	623b      	str	r3, [r7, #32]
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	2250      	movs	r2, #80	@ 0x50
 8019480:	5a9b      	ldrh	r3, [r3, r2]
 8019482:	b29b      	uxth	r3, r3
 8019484:	001a      	movs	r2, r3
 8019486:	6a3b      	ldr	r3, [r7, #32]
 8019488:	189b      	adds	r3, r3, r2
 801948a:	623b      	str	r3, [r7, #32]
 801948c:	683b      	ldr	r3, [r7, #0]
 801948e:	781b      	ldrb	r3, [r3, #0]
 8019490:	00da      	lsls	r2, r3, #3
 8019492:	6a3b      	ldr	r3, [r7, #32]
 8019494:	18d3      	adds	r3, r2, r3
 8019496:	4a0e      	ldr	r2, [pc, #56]	@ (80194d0 <USB_EPStartXfer+0x3d4>)
 8019498:	4694      	mov	ip, r2
 801949a:	4463      	add	r3, ip
 801949c:	61fb      	str	r3, [r7, #28]
 801949e:	1d7b      	adds	r3, r7, #5
 80194a0:	33ff      	adds	r3, #255	@ 0xff
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	b29a      	uxth	r2, r3
 80194a6:	69fb      	ldr	r3, [r7, #28]
 80194a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80194aa:	2076      	movs	r0, #118	@ 0x76
 80194ac:	183b      	adds	r3, r7, r0
 80194ae:	683a      	ldr	r2, [r7, #0]
 80194b0:	8912      	ldrh	r2, [r2, #8]
 80194b2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	6959      	ldr	r1, [r3, #20]
 80194b8:	1d7b      	adds	r3, r7, #5
 80194ba:	33ff      	adds	r3, #255	@ 0xff
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	b29c      	uxth	r4, r3
 80194c0:	183b      	adds	r3, r7, r0
 80194c2:	881a      	ldrh	r2, [r3, #0]
 80194c4:	6878      	ldr	r0, [r7, #4]
 80194c6:	0023      	movs	r3, r4
 80194c8:	f001 f88a 	bl	801a5e0 <USB_WritePMA>
 80194cc:	e329      	b.n	8019b22 <USB_EPStartXfer+0xa26>
 80194ce:	46c0      	nop			@ (mov r8, r8)
 80194d0:	00000402 	.word	0x00000402
 80194d4:	ffff8f8f 	.word	0xffff8f8f
 80194d8:	ffff8180 	.word	0xffff8180
 80194dc:	00000406 	.word	0x00000406
 80194e0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	785b      	ldrb	r3, [r3, #1]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d000      	beq.n	80194ee <USB_EPStartXfer+0x3f2>
 80194ec:	e070      	b.n	80195d0 <USB_EPStartXfer+0x4d4>
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	2250      	movs	r2, #80	@ 0x50
 80194f6:	5a9b      	ldrh	r3, [r3, r2]
 80194f8:	b29b      	uxth	r3, r3
 80194fa:	001a      	movs	r2, r3
 80194fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80194fe:	189b      	adds	r3, r3, r2
 8019500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019502:	683b      	ldr	r3, [r7, #0]
 8019504:	781b      	ldrb	r3, [r3, #0]
 8019506:	00da      	lsls	r2, r3, #3
 8019508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801950a:	18d3      	adds	r3, r2, r3
 801950c:	4acd      	ldr	r2, [pc, #820]	@ (8019844 <USB_EPStartXfer+0x748>)
 801950e:	4694      	mov	ip, r2
 8019510:	4463      	add	r3, ip
 8019512:	647b      	str	r3, [r7, #68]	@ 0x44
 8019514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019516:	881b      	ldrh	r3, [r3, #0]
 8019518:	b29b      	uxth	r3, r3
 801951a:	059b      	lsls	r3, r3, #22
 801951c:	0d9b      	lsrs	r3, r3, #22
 801951e:	b29a      	uxth	r2, r3
 8019520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019522:	801a      	strh	r2, [r3, #0]
 8019524:	1d7b      	adds	r3, r7, #5
 8019526:	33ff      	adds	r3, #255	@ 0xff
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	2b3e      	cmp	r3, #62	@ 0x3e
 801952c:	d922      	bls.n	8019574 <USB_EPStartXfer+0x478>
 801952e:	1d7b      	adds	r3, r7, #5
 8019530:	33ff      	adds	r3, #255	@ 0xff
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	095b      	lsrs	r3, r3, #5
 8019536:	21f8      	movs	r1, #248	@ 0xf8
 8019538:	187a      	adds	r2, r7, r1
 801953a:	6013      	str	r3, [r2, #0]
 801953c:	1d7b      	adds	r3, r7, #5
 801953e:	33ff      	adds	r3, #255	@ 0xff
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	221f      	movs	r2, #31
 8019544:	4013      	ands	r3, r2
 8019546:	d104      	bne.n	8019552 <USB_EPStartXfer+0x456>
 8019548:	187b      	adds	r3, r7, r1
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	3b01      	subs	r3, #1
 801954e:	187a      	adds	r2, r7, r1
 8019550:	6013      	str	r3, [r2, #0]
 8019552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019554:	881b      	ldrh	r3, [r3, #0]
 8019556:	b29a      	uxth	r2, r3
 8019558:	23f8      	movs	r3, #248	@ 0xf8
 801955a:	18fb      	adds	r3, r7, r3
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	b29b      	uxth	r3, r3
 8019560:	029b      	lsls	r3, r3, #10
 8019562:	b29b      	uxth	r3, r3
 8019564:	4313      	orrs	r3, r2
 8019566:	b29b      	uxth	r3, r3
 8019568:	4ab7      	ldr	r2, [pc, #732]	@ (8019848 <USB_EPStartXfer+0x74c>)
 801956a:	4313      	orrs	r3, r2
 801956c:	b29a      	uxth	r2, r3
 801956e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019570:	801a      	strh	r2, [r3, #0]
 8019572:	e04a      	b.n	801960a <USB_EPStartXfer+0x50e>
 8019574:	1d7b      	adds	r3, r7, #5
 8019576:	33ff      	adds	r3, #255	@ 0xff
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d108      	bne.n	8019590 <USB_EPStartXfer+0x494>
 801957e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019580:	881b      	ldrh	r3, [r3, #0]
 8019582:	b29b      	uxth	r3, r3
 8019584:	4ab0      	ldr	r2, [pc, #704]	@ (8019848 <USB_EPStartXfer+0x74c>)
 8019586:	4313      	orrs	r3, r2
 8019588:	b29a      	uxth	r2, r3
 801958a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801958c:	801a      	strh	r2, [r3, #0]
 801958e:	e03c      	b.n	801960a <USB_EPStartXfer+0x50e>
 8019590:	1d7b      	adds	r3, r7, #5
 8019592:	33ff      	adds	r3, #255	@ 0xff
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	085b      	lsrs	r3, r3, #1
 8019598:	21f8      	movs	r1, #248	@ 0xf8
 801959a:	187a      	adds	r2, r7, r1
 801959c:	6013      	str	r3, [r2, #0]
 801959e:	1d7b      	adds	r3, r7, #5
 80195a0:	33ff      	adds	r3, #255	@ 0xff
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	2201      	movs	r2, #1
 80195a6:	4013      	ands	r3, r2
 80195a8:	d004      	beq.n	80195b4 <USB_EPStartXfer+0x4b8>
 80195aa:	187b      	adds	r3, r7, r1
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	3301      	adds	r3, #1
 80195b0:	187a      	adds	r2, r7, r1
 80195b2:	6013      	str	r3, [r2, #0]
 80195b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195b6:	881b      	ldrh	r3, [r3, #0]
 80195b8:	b29a      	uxth	r2, r3
 80195ba:	23f8      	movs	r3, #248	@ 0xf8
 80195bc:	18fb      	adds	r3, r7, r3
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	b29b      	uxth	r3, r3
 80195c2:	029b      	lsls	r3, r3, #10
 80195c4:	b29b      	uxth	r3, r3
 80195c6:	4313      	orrs	r3, r2
 80195c8:	b29a      	uxth	r2, r3
 80195ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195cc:	801a      	strh	r2, [r3, #0]
 80195ce:	e01c      	b.n	801960a <USB_EPStartXfer+0x50e>
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	785b      	ldrb	r3, [r3, #1]
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	d118      	bne.n	801960a <USB_EPStartXfer+0x50e>
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	653b      	str	r3, [r7, #80]	@ 0x50
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2250      	movs	r2, #80	@ 0x50
 80195e0:	5a9b      	ldrh	r3, [r3, r2]
 80195e2:	b29b      	uxth	r3, r3
 80195e4:	001a      	movs	r2, r3
 80195e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195e8:	189b      	adds	r3, r3, r2
 80195ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	781b      	ldrb	r3, [r3, #0]
 80195f0:	00da      	lsls	r2, r3, #3
 80195f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195f4:	18d3      	adds	r3, r2, r3
 80195f6:	4a93      	ldr	r2, [pc, #588]	@ (8019844 <USB_EPStartXfer+0x748>)
 80195f8:	4694      	mov	ip, r2
 80195fa:	4463      	add	r3, ip
 80195fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80195fe:	1d7b      	adds	r3, r7, #5
 8019600:	33ff      	adds	r3, #255	@ 0xff
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	b29a      	uxth	r2, r3
 8019606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019608:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801960a:	2076      	movs	r0, #118	@ 0x76
 801960c:	183b      	adds	r3, r7, r0
 801960e:	683a      	ldr	r2, [r7, #0]
 8019610:	8912      	ldrh	r2, [r2, #8]
 8019612:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019614:	683b      	ldr	r3, [r7, #0]
 8019616:	6959      	ldr	r1, [r3, #20]
 8019618:	1d7b      	adds	r3, r7, #5
 801961a:	33ff      	adds	r3, #255	@ 0xff
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	b29c      	uxth	r4, r3
 8019620:	183b      	adds	r3, r7, r0
 8019622:	881a      	ldrh	r2, [r3, #0]
 8019624:	6878      	ldr	r0, [r7, #4]
 8019626:	0023      	movs	r3, r4
 8019628:	f000 ffda 	bl	801a5e0 <USB_WritePMA>
            ep->xfer_buff += len;
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	695a      	ldr	r2, [r3, #20]
 8019630:	1d7b      	adds	r3, r7, #5
 8019632:	33ff      	adds	r3, #255	@ 0xff
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	18d2      	adds	r2, r2, r3
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	6a1a      	ldr	r2, [r3, #32]
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	691b      	ldr	r3, [r3, #16]
 8019644:	429a      	cmp	r2, r3
 8019646:	d908      	bls.n	801965a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	6a1a      	ldr	r2, [r3, #32]
 801964c:	1d7b      	adds	r3, r7, #5
 801964e:	33ff      	adds	r3, #255	@ 0xff
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	1ad2      	subs	r2, r2, r3
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	621a      	str	r2, [r3, #32]
 8019658:	e007      	b.n	801966a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801965a:	683b      	ldr	r3, [r7, #0]
 801965c:	6a1b      	ldr	r3, [r3, #32]
 801965e:	1d7a      	adds	r2, r7, #5
 8019660:	32ff      	adds	r2, #255	@ 0xff
 8019662:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	2200      	movs	r2, #0
 8019668:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	643b      	str	r3, [r7, #64]	@ 0x40
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	785b      	ldrb	r3, [r3, #1]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d000      	beq.n	8019678 <USB_EPStartXfer+0x57c>
 8019676:	e070      	b.n	801975a <USB_EPStartXfer+0x65e>
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	2250      	movs	r2, #80	@ 0x50
 8019680:	5a9b      	ldrh	r3, [r3, r2]
 8019682:	b29b      	uxth	r3, r3
 8019684:	001a      	movs	r2, r3
 8019686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019688:	189b      	adds	r3, r3, r2
 801968a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	781b      	ldrb	r3, [r3, #0]
 8019690:	00da      	lsls	r2, r3, #3
 8019692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019694:	18d3      	adds	r3, r2, r3
 8019696:	4a6d      	ldr	r2, [pc, #436]	@ (801984c <USB_EPStartXfer+0x750>)
 8019698:	4694      	mov	ip, r2
 801969a:	4463      	add	r3, ip
 801969c:	637b      	str	r3, [r7, #52]	@ 0x34
 801969e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196a0:	881b      	ldrh	r3, [r3, #0]
 80196a2:	b29b      	uxth	r3, r3
 80196a4:	059b      	lsls	r3, r3, #22
 80196a6:	0d9b      	lsrs	r3, r3, #22
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196ac:	801a      	strh	r2, [r3, #0]
 80196ae:	1d7b      	adds	r3, r7, #5
 80196b0:	33ff      	adds	r3, #255	@ 0xff
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80196b6:	d922      	bls.n	80196fe <USB_EPStartXfer+0x602>
 80196b8:	1d7b      	adds	r3, r7, #5
 80196ba:	33ff      	adds	r3, #255	@ 0xff
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	095b      	lsrs	r3, r3, #5
 80196c0:	21f4      	movs	r1, #244	@ 0xf4
 80196c2:	187a      	adds	r2, r7, r1
 80196c4:	6013      	str	r3, [r2, #0]
 80196c6:	1d7b      	adds	r3, r7, #5
 80196c8:	33ff      	adds	r3, #255	@ 0xff
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	221f      	movs	r2, #31
 80196ce:	4013      	ands	r3, r2
 80196d0:	d104      	bne.n	80196dc <USB_EPStartXfer+0x5e0>
 80196d2:	187b      	adds	r3, r7, r1
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	3b01      	subs	r3, #1
 80196d8:	187a      	adds	r2, r7, r1
 80196da:	6013      	str	r3, [r2, #0]
 80196dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196de:	881b      	ldrh	r3, [r3, #0]
 80196e0:	b29a      	uxth	r2, r3
 80196e2:	23f4      	movs	r3, #244	@ 0xf4
 80196e4:	18fb      	adds	r3, r7, r3
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	029b      	lsls	r3, r3, #10
 80196ec:	b29b      	uxth	r3, r3
 80196ee:	4313      	orrs	r3, r2
 80196f0:	b29b      	uxth	r3, r3
 80196f2:	4a55      	ldr	r2, [pc, #340]	@ (8019848 <USB_EPStartXfer+0x74c>)
 80196f4:	4313      	orrs	r3, r2
 80196f6:	b29a      	uxth	r2, r3
 80196f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196fa:	801a      	strh	r2, [r3, #0]
 80196fc:	e048      	b.n	8019790 <USB_EPStartXfer+0x694>
 80196fe:	1d7b      	adds	r3, r7, #5
 8019700:	33ff      	adds	r3, #255	@ 0xff
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d108      	bne.n	801971a <USB_EPStartXfer+0x61e>
 8019708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801970a:	881b      	ldrh	r3, [r3, #0]
 801970c:	b29b      	uxth	r3, r3
 801970e:	4a4e      	ldr	r2, [pc, #312]	@ (8019848 <USB_EPStartXfer+0x74c>)
 8019710:	4313      	orrs	r3, r2
 8019712:	b29a      	uxth	r2, r3
 8019714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019716:	801a      	strh	r2, [r3, #0]
 8019718:	e03a      	b.n	8019790 <USB_EPStartXfer+0x694>
 801971a:	1d7b      	adds	r3, r7, #5
 801971c:	33ff      	adds	r3, #255	@ 0xff
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	085b      	lsrs	r3, r3, #1
 8019722:	21f4      	movs	r1, #244	@ 0xf4
 8019724:	187a      	adds	r2, r7, r1
 8019726:	6013      	str	r3, [r2, #0]
 8019728:	1d7b      	adds	r3, r7, #5
 801972a:	33ff      	adds	r3, #255	@ 0xff
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	2201      	movs	r2, #1
 8019730:	4013      	ands	r3, r2
 8019732:	d004      	beq.n	801973e <USB_EPStartXfer+0x642>
 8019734:	187b      	adds	r3, r7, r1
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	3301      	adds	r3, #1
 801973a:	187a      	adds	r2, r7, r1
 801973c:	6013      	str	r3, [r2, #0]
 801973e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019740:	881b      	ldrh	r3, [r3, #0]
 8019742:	b29a      	uxth	r2, r3
 8019744:	23f4      	movs	r3, #244	@ 0xf4
 8019746:	18fb      	adds	r3, r7, r3
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	b29b      	uxth	r3, r3
 801974c:	029b      	lsls	r3, r3, #10
 801974e:	b29b      	uxth	r3, r3
 8019750:	4313      	orrs	r3, r2
 8019752:	b29a      	uxth	r2, r3
 8019754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019756:	801a      	strh	r2, [r3, #0]
 8019758:	e01a      	b.n	8019790 <USB_EPStartXfer+0x694>
 801975a:	683b      	ldr	r3, [r7, #0]
 801975c:	785b      	ldrb	r3, [r3, #1]
 801975e:	2b01      	cmp	r3, #1
 8019760:	d116      	bne.n	8019790 <USB_EPStartXfer+0x694>
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	2250      	movs	r2, #80	@ 0x50
 8019766:	5a9b      	ldrh	r3, [r3, r2]
 8019768:	b29b      	uxth	r3, r3
 801976a:	001a      	movs	r2, r3
 801976c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801976e:	189b      	adds	r3, r3, r2
 8019770:	643b      	str	r3, [r7, #64]	@ 0x40
 8019772:	683b      	ldr	r3, [r7, #0]
 8019774:	781b      	ldrb	r3, [r3, #0]
 8019776:	00da      	lsls	r2, r3, #3
 8019778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801977a:	18d3      	adds	r3, r2, r3
 801977c:	4a33      	ldr	r2, [pc, #204]	@ (801984c <USB_EPStartXfer+0x750>)
 801977e:	4694      	mov	ip, r2
 8019780:	4463      	add	r3, ip
 8019782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019784:	1d7b      	adds	r3, r7, #5
 8019786:	33ff      	adds	r3, #255	@ 0xff
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	b29a      	uxth	r2, r3
 801978c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801978e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019790:	2076      	movs	r0, #118	@ 0x76
 8019792:	183b      	adds	r3, r7, r0
 8019794:	683a      	ldr	r2, [r7, #0]
 8019796:	8952      	ldrh	r2, [r2, #10]
 8019798:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801979a:	683b      	ldr	r3, [r7, #0]
 801979c:	6959      	ldr	r1, [r3, #20]
 801979e:	1d7b      	adds	r3, r7, #5
 80197a0:	33ff      	adds	r3, #255	@ 0xff
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	b29c      	uxth	r4, r3
 80197a6:	183b      	adds	r3, r7, r0
 80197a8:	881a      	ldrh	r2, [r3, #0]
 80197aa:	6878      	ldr	r0, [r7, #4]
 80197ac:	0023      	movs	r3, r4
 80197ae:	f000 ff17 	bl	801a5e0 <USB_WritePMA>
 80197b2:	e1b6      	b.n	8019b22 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	6a1b      	ldr	r3, [r3, #32]
 80197b8:	1d7a      	adds	r2, r7, #5
 80197ba:	32ff      	adds	r2, #255	@ 0xff
 80197bc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80197be:	687a      	ldr	r2, [r7, #4]
 80197c0:	683b      	ldr	r3, [r7, #0]
 80197c2:	781b      	ldrb	r3, [r3, #0]
 80197c4:	009b      	lsls	r3, r3, #2
 80197c6:	18d3      	adds	r3, r2, r3
 80197c8:	881b      	ldrh	r3, [r3, #0]
 80197ca:	b29a      	uxth	r2, r3
 80197cc:	2062      	movs	r0, #98	@ 0x62
 80197ce:	183b      	adds	r3, r7, r0
 80197d0:	491f      	ldr	r1, [pc, #124]	@ (8019850 <USB_EPStartXfer+0x754>)
 80197d2:	400a      	ands	r2, r1
 80197d4:	801a      	strh	r2, [r3, #0]
 80197d6:	687a      	ldr	r2, [r7, #4]
 80197d8:	683b      	ldr	r3, [r7, #0]
 80197da:	781b      	ldrb	r3, [r3, #0]
 80197dc:	009b      	lsls	r3, r3, #2
 80197de:	18d3      	adds	r3, r2, r3
 80197e0:	183a      	adds	r2, r7, r0
 80197e2:	8812      	ldrh	r2, [r2, #0]
 80197e4:	491b      	ldr	r1, [pc, #108]	@ (8019854 <USB_EPStartXfer+0x758>)
 80197e6:	430a      	orrs	r2, r1
 80197e8:	b292      	uxth	r2, r2
 80197ea:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	2250      	movs	r2, #80	@ 0x50
 80197f4:	5a9b      	ldrh	r3, [r3, r2]
 80197f6:	b29b      	uxth	r3, r3
 80197f8:	001a      	movs	r2, r3
 80197fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80197fc:	189b      	adds	r3, r3, r2
 80197fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019800:	683b      	ldr	r3, [r7, #0]
 8019802:	781b      	ldrb	r3, [r3, #0]
 8019804:	00da      	lsls	r2, r3, #3
 8019806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019808:	18d3      	adds	r3, r2, r3
 801980a:	4a0e      	ldr	r2, [pc, #56]	@ (8019844 <USB_EPStartXfer+0x748>)
 801980c:	4694      	mov	ip, r2
 801980e:	4463      	add	r3, ip
 8019810:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019812:	1d7b      	adds	r3, r7, #5
 8019814:	33ff      	adds	r3, #255	@ 0xff
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	b29a      	uxth	r2, r3
 801981a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801981c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801981e:	2076      	movs	r0, #118	@ 0x76
 8019820:	183b      	adds	r3, r7, r0
 8019822:	683a      	ldr	r2, [r7, #0]
 8019824:	8912      	ldrh	r2, [r2, #8]
 8019826:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	6959      	ldr	r1, [r3, #20]
 801982c:	1d7b      	adds	r3, r7, #5
 801982e:	33ff      	adds	r3, #255	@ 0xff
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	b29c      	uxth	r4, r3
 8019834:	183b      	adds	r3, r7, r0
 8019836:	881a      	ldrh	r2, [r3, #0]
 8019838:	6878      	ldr	r0, [r7, #4]
 801983a:	0023      	movs	r3, r4
 801983c:	f000 fed0 	bl	801a5e0 <USB_WritePMA>
 8019840:	e16f      	b.n	8019b22 <USB_EPStartXfer+0xa26>
 8019842:	46c0      	nop			@ (mov r8, r8)
 8019844:	00000402 	.word	0x00000402
 8019848:	ffff8000 	.word	0xffff8000
 801984c:	00000406 	.word	0x00000406
 8019850:	ffff8e8f 	.word	0xffff8e8f
 8019854:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	6a1a      	ldr	r2, [r3, #32]
 801985c:	1d7b      	adds	r3, r7, #5
 801985e:	33ff      	adds	r3, #255	@ 0xff
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	1ad2      	subs	r2, r2, r3
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019868:	687a      	ldr	r2, [r7, #4]
 801986a:	683b      	ldr	r3, [r7, #0]
 801986c:	781b      	ldrb	r3, [r3, #0]
 801986e:	009b      	lsls	r3, r3, #2
 8019870:	18d3      	adds	r3, r2, r3
 8019872:	881b      	ldrh	r3, [r3, #0]
 8019874:	b29b      	uxth	r3, r3
 8019876:	001a      	movs	r2, r3
 8019878:	2340      	movs	r3, #64	@ 0x40
 801987a:	4013      	ands	r3, r2
 801987c:	d100      	bne.n	8019880 <USB_EPStartXfer+0x784>
 801987e:	e0a4      	b.n	80199ca <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	673b      	str	r3, [r7, #112]	@ 0x70
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	785b      	ldrb	r3, [r3, #1]
 8019888:	2b00      	cmp	r3, #0
 801988a:	d000      	beq.n	801988e <USB_EPStartXfer+0x792>
 801988c:	e070      	b.n	8019970 <USB_EPStartXfer+0x874>
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2250      	movs	r2, #80	@ 0x50
 8019896:	5a9b      	ldrh	r3, [r3, r2]
 8019898:	b29b      	uxth	r3, r3
 801989a:	001a      	movs	r2, r3
 801989c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801989e:	189b      	adds	r3, r3, r2
 80198a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	781b      	ldrb	r3, [r3, #0]
 80198a6:	00da      	lsls	r2, r3, #3
 80198a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80198aa:	18d3      	adds	r3, r2, r3
 80198ac:	4abc      	ldr	r2, [pc, #752]	@ (8019ba0 <USB_EPStartXfer+0xaa4>)
 80198ae:	4694      	mov	ip, r2
 80198b0:	4463      	add	r3, ip
 80198b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80198b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198b6:	881b      	ldrh	r3, [r3, #0]
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	059b      	lsls	r3, r3, #22
 80198bc:	0d9b      	lsrs	r3, r3, #22
 80198be:	b29a      	uxth	r2, r3
 80198c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198c2:	801a      	strh	r2, [r3, #0]
 80198c4:	1d7b      	adds	r3, r7, #5
 80198c6:	33ff      	adds	r3, #255	@ 0xff
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80198cc:	d922      	bls.n	8019914 <USB_EPStartXfer+0x818>
 80198ce:	1d7b      	adds	r3, r7, #5
 80198d0:	33ff      	adds	r3, #255	@ 0xff
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	095b      	lsrs	r3, r3, #5
 80198d6:	21f0      	movs	r1, #240	@ 0xf0
 80198d8:	187a      	adds	r2, r7, r1
 80198da:	6013      	str	r3, [r2, #0]
 80198dc:	1d7b      	adds	r3, r7, #5
 80198de:	33ff      	adds	r3, #255	@ 0xff
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	221f      	movs	r2, #31
 80198e4:	4013      	ands	r3, r2
 80198e6:	d104      	bne.n	80198f2 <USB_EPStartXfer+0x7f6>
 80198e8:	187b      	adds	r3, r7, r1
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	3b01      	subs	r3, #1
 80198ee:	187a      	adds	r2, r7, r1
 80198f0:	6013      	str	r3, [r2, #0]
 80198f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198f4:	881b      	ldrh	r3, [r3, #0]
 80198f6:	b29a      	uxth	r2, r3
 80198f8:	23f0      	movs	r3, #240	@ 0xf0
 80198fa:	18fb      	adds	r3, r7, r3
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	b29b      	uxth	r3, r3
 8019900:	029b      	lsls	r3, r3, #10
 8019902:	b29b      	uxth	r3, r3
 8019904:	4313      	orrs	r3, r2
 8019906:	b29b      	uxth	r3, r3
 8019908:	4aa6      	ldr	r2, [pc, #664]	@ (8019ba4 <USB_EPStartXfer+0xaa8>)
 801990a:	4313      	orrs	r3, r2
 801990c:	b29a      	uxth	r2, r3
 801990e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019910:	801a      	strh	r2, [r3, #0]
 8019912:	e048      	b.n	80199a6 <USB_EPStartXfer+0x8aa>
 8019914:	1d7b      	adds	r3, r7, #5
 8019916:	33ff      	adds	r3, #255	@ 0xff
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d108      	bne.n	8019930 <USB_EPStartXfer+0x834>
 801991e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019920:	881b      	ldrh	r3, [r3, #0]
 8019922:	b29b      	uxth	r3, r3
 8019924:	4a9f      	ldr	r2, [pc, #636]	@ (8019ba4 <USB_EPStartXfer+0xaa8>)
 8019926:	4313      	orrs	r3, r2
 8019928:	b29a      	uxth	r2, r3
 801992a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801992c:	801a      	strh	r2, [r3, #0]
 801992e:	e03a      	b.n	80199a6 <USB_EPStartXfer+0x8aa>
 8019930:	1d7b      	adds	r3, r7, #5
 8019932:	33ff      	adds	r3, #255	@ 0xff
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	085b      	lsrs	r3, r3, #1
 8019938:	21f0      	movs	r1, #240	@ 0xf0
 801993a:	187a      	adds	r2, r7, r1
 801993c:	6013      	str	r3, [r2, #0]
 801993e:	1d7b      	adds	r3, r7, #5
 8019940:	33ff      	adds	r3, #255	@ 0xff
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	2201      	movs	r2, #1
 8019946:	4013      	ands	r3, r2
 8019948:	d004      	beq.n	8019954 <USB_EPStartXfer+0x858>
 801994a:	187b      	adds	r3, r7, r1
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	3301      	adds	r3, #1
 8019950:	187a      	adds	r2, r7, r1
 8019952:	6013      	str	r3, [r2, #0]
 8019954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019956:	881b      	ldrh	r3, [r3, #0]
 8019958:	b29a      	uxth	r2, r3
 801995a:	23f0      	movs	r3, #240	@ 0xf0
 801995c:	18fb      	adds	r3, r7, r3
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	b29b      	uxth	r3, r3
 8019962:	029b      	lsls	r3, r3, #10
 8019964:	b29b      	uxth	r3, r3
 8019966:	4313      	orrs	r3, r2
 8019968:	b29a      	uxth	r2, r3
 801996a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801996c:	801a      	strh	r2, [r3, #0]
 801996e:	e01a      	b.n	80199a6 <USB_EPStartXfer+0x8aa>
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	785b      	ldrb	r3, [r3, #1]
 8019974:	2b01      	cmp	r3, #1
 8019976:	d116      	bne.n	80199a6 <USB_EPStartXfer+0x8aa>
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	2250      	movs	r2, #80	@ 0x50
 801997c:	5a9b      	ldrh	r3, [r3, r2]
 801997e:	b29b      	uxth	r3, r3
 8019980:	001a      	movs	r2, r3
 8019982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019984:	189b      	adds	r3, r3, r2
 8019986:	673b      	str	r3, [r7, #112]	@ 0x70
 8019988:	683b      	ldr	r3, [r7, #0]
 801998a:	781b      	ldrb	r3, [r3, #0]
 801998c:	00da      	lsls	r2, r3, #3
 801998e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019990:	18d3      	adds	r3, r2, r3
 8019992:	4a83      	ldr	r2, [pc, #524]	@ (8019ba0 <USB_EPStartXfer+0xaa4>)
 8019994:	4694      	mov	ip, r2
 8019996:	4463      	add	r3, ip
 8019998:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801999a:	1d7b      	adds	r3, r7, #5
 801999c:	33ff      	adds	r3, #255	@ 0xff
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	b29a      	uxth	r2, r3
 80199a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80199a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80199a6:	2076      	movs	r0, #118	@ 0x76
 80199a8:	183b      	adds	r3, r7, r0
 80199aa:	683a      	ldr	r2, [r7, #0]
 80199ac:	8952      	ldrh	r2, [r2, #10]
 80199ae:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80199b0:	683b      	ldr	r3, [r7, #0]
 80199b2:	6959      	ldr	r1, [r3, #20]
 80199b4:	1d7b      	adds	r3, r7, #5
 80199b6:	33ff      	adds	r3, #255	@ 0xff
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	b29c      	uxth	r4, r3
 80199bc:	183b      	adds	r3, r7, r0
 80199be:	881a      	ldrh	r2, [r3, #0]
 80199c0:	6878      	ldr	r0, [r7, #4]
 80199c2:	0023      	movs	r3, r4
 80199c4:	f000 fe0c 	bl	801a5e0 <USB_WritePMA>
 80199c8:	e0ab      	b.n	8019b22 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80199ca:	683b      	ldr	r3, [r7, #0]
 80199cc:	785b      	ldrb	r3, [r3, #1]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d000      	beq.n	80199d4 <USB_EPStartXfer+0x8d8>
 80199d2:	e070      	b.n	8019ab6 <USB_EPStartXfer+0x9ba>
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	2250      	movs	r2, #80	@ 0x50
 80199dc:	5a9b      	ldrh	r3, [r3, r2]
 80199de:	b29b      	uxth	r3, r3
 80199e0:	001a      	movs	r2, r3
 80199e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80199e4:	189b      	adds	r3, r3, r2
 80199e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80199e8:	683b      	ldr	r3, [r7, #0]
 80199ea:	781b      	ldrb	r3, [r3, #0]
 80199ec:	00da      	lsls	r2, r3, #3
 80199ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80199f0:	18d3      	adds	r3, r2, r3
 80199f2:	4a6d      	ldr	r2, [pc, #436]	@ (8019ba8 <USB_EPStartXfer+0xaac>)
 80199f4:	4694      	mov	ip, r2
 80199f6:	4463      	add	r3, ip
 80199f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80199fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80199fc:	881b      	ldrh	r3, [r3, #0]
 80199fe:	b29b      	uxth	r3, r3
 8019a00:	059b      	lsls	r3, r3, #22
 8019a02:	0d9b      	lsrs	r3, r3, #22
 8019a04:	b29a      	uxth	r2, r3
 8019a06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a08:	801a      	strh	r2, [r3, #0]
 8019a0a:	1d7b      	adds	r3, r7, #5
 8019a0c:	33ff      	adds	r3, #255	@ 0xff
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	2b3e      	cmp	r3, #62	@ 0x3e
 8019a12:	d922      	bls.n	8019a5a <USB_EPStartXfer+0x95e>
 8019a14:	1d7b      	adds	r3, r7, #5
 8019a16:	33ff      	adds	r3, #255	@ 0xff
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	095b      	lsrs	r3, r3, #5
 8019a1c:	21ec      	movs	r1, #236	@ 0xec
 8019a1e:	187a      	adds	r2, r7, r1
 8019a20:	6013      	str	r3, [r2, #0]
 8019a22:	1d7b      	adds	r3, r7, #5
 8019a24:	33ff      	adds	r3, #255	@ 0xff
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	221f      	movs	r2, #31
 8019a2a:	4013      	ands	r3, r2
 8019a2c:	d104      	bne.n	8019a38 <USB_EPStartXfer+0x93c>
 8019a2e:	187b      	adds	r3, r7, r1
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	3b01      	subs	r3, #1
 8019a34:	187a      	adds	r2, r7, r1
 8019a36:	6013      	str	r3, [r2, #0]
 8019a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a3a:	881b      	ldrh	r3, [r3, #0]
 8019a3c:	b29a      	uxth	r2, r3
 8019a3e:	23ec      	movs	r3, #236	@ 0xec
 8019a40:	18fb      	adds	r3, r7, r3
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	b29b      	uxth	r3, r3
 8019a46:	029b      	lsls	r3, r3, #10
 8019a48:	b29b      	uxth	r3, r3
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	b29b      	uxth	r3, r3
 8019a4e:	4a55      	ldr	r2, [pc, #340]	@ (8019ba4 <USB_EPStartXfer+0xaa8>)
 8019a50:	4313      	orrs	r3, r2
 8019a52:	b29a      	uxth	r2, r3
 8019a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a56:	801a      	strh	r2, [r3, #0]
 8019a58:	e052      	b.n	8019b00 <USB_EPStartXfer+0xa04>
 8019a5a:	1d7b      	adds	r3, r7, #5
 8019a5c:	33ff      	adds	r3, #255	@ 0xff
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d108      	bne.n	8019a76 <USB_EPStartXfer+0x97a>
 8019a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a66:	881b      	ldrh	r3, [r3, #0]
 8019a68:	b29b      	uxth	r3, r3
 8019a6a:	4a4e      	ldr	r2, [pc, #312]	@ (8019ba4 <USB_EPStartXfer+0xaa8>)
 8019a6c:	4313      	orrs	r3, r2
 8019a6e:	b29a      	uxth	r2, r3
 8019a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a72:	801a      	strh	r2, [r3, #0]
 8019a74:	e044      	b.n	8019b00 <USB_EPStartXfer+0xa04>
 8019a76:	1d7b      	adds	r3, r7, #5
 8019a78:	33ff      	adds	r3, #255	@ 0xff
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	085b      	lsrs	r3, r3, #1
 8019a7e:	21ec      	movs	r1, #236	@ 0xec
 8019a80:	187a      	adds	r2, r7, r1
 8019a82:	6013      	str	r3, [r2, #0]
 8019a84:	1d7b      	adds	r3, r7, #5
 8019a86:	33ff      	adds	r3, #255	@ 0xff
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	2201      	movs	r2, #1
 8019a8c:	4013      	ands	r3, r2
 8019a8e:	d004      	beq.n	8019a9a <USB_EPStartXfer+0x99e>
 8019a90:	187b      	adds	r3, r7, r1
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	3301      	adds	r3, #1
 8019a96:	187a      	adds	r2, r7, r1
 8019a98:	6013      	str	r3, [r2, #0]
 8019a9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a9c:	881b      	ldrh	r3, [r3, #0]
 8019a9e:	b29a      	uxth	r2, r3
 8019aa0:	23ec      	movs	r3, #236	@ 0xec
 8019aa2:	18fb      	adds	r3, r7, r3
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	b29b      	uxth	r3, r3
 8019aa8:	029b      	lsls	r3, r3, #10
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	4313      	orrs	r3, r2
 8019aae:	b29a      	uxth	r2, r3
 8019ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019ab2:	801a      	strh	r2, [r3, #0]
 8019ab4:	e024      	b.n	8019b00 <USB_EPStartXfer+0xa04>
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	785b      	ldrb	r3, [r3, #1]
 8019aba:	2b01      	cmp	r3, #1
 8019abc:	d120      	bne.n	8019b00 <USB_EPStartXfer+0xa04>
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	2184      	movs	r1, #132	@ 0x84
 8019ac2:	187a      	adds	r2, r7, r1
 8019ac4:	6013      	str	r3, [r2, #0]
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	2250      	movs	r2, #80	@ 0x50
 8019aca:	5a9b      	ldrh	r3, [r3, r2]
 8019acc:	b29b      	uxth	r3, r3
 8019ace:	001a      	movs	r2, r3
 8019ad0:	187b      	adds	r3, r7, r1
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	189b      	adds	r3, r3, r2
 8019ad6:	187a      	adds	r2, r7, r1
 8019ad8:	6013      	str	r3, [r2, #0]
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	781b      	ldrb	r3, [r3, #0]
 8019ade:	00da      	lsls	r2, r3, #3
 8019ae0:	187b      	adds	r3, r7, r1
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	18d3      	adds	r3, r2, r3
 8019ae6:	4a30      	ldr	r2, [pc, #192]	@ (8019ba8 <USB_EPStartXfer+0xaac>)
 8019ae8:	4694      	mov	ip, r2
 8019aea:	4463      	add	r3, ip
 8019aec:	2180      	movs	r1, #128	@ 0x80
 8019aee:	187a      	adds	r2, r7, r1
 8019af0:	6013      	str	r3, [r2, #0]
 8019af2:	1d7b      	adds	r3, r7, #5
 8019af4:	33ff      	adds	r3, #255	@ 0xff
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	b29a      	uxth	r2, r3
 8019afa:	187b      	adds	r3, r7, r1
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019b00:	2076      	movs	r0, #118	@ 0x76
 8019b02:	183b      	adds	r3, r7, r0
 8019b04:	683a      	ldr	r2, [r7, #0]
 8019b06:	8912      	ldrh	r2, [r2, #8]
 8019b08:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	6959      	ldr	r1, [r3, #20]
 8019b0e:	1d7b      	adds	r3, r7, #5
 8019b10:	33ff      	adds	r3, #255	@ 0xff
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	b29c      	uxth	r4, r3
 8019b16:	183b      	adds	r3, r7, r0
 8019b18:	881a      	ldrh	r2, [r3, #0]
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	0023      	movs	r3, r4
 8019b1e:	f000 fd5f 	bl	801a5e0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8019b22:	687a      	ldr	r2, [r7, #4]
 8019b24:	683b      	ldr	r3, [r7, #0]
 8019b26:	781b      	ldrb	r3, [r3, #0]
 8019b28:	009b      	lsls	r3, r3, #2
 8019b2a:	18d3      	adds	r3, r2, r3
 8019b2c:	881b      	ldrh	r3, [r3, #0]
 8019b2e:	b29a      	uxth	r2, r3
 8019b30:	200a      	movs	r0, #10
 8019b32:	183b      	adds	r3, r7, r0
 8019b34:	491d      	ldr	r1, [pc, #116]	@ (8019bac <USB_EPStartXfer+0xab0>)
 8019b36:	400a      	ands	r2, r1
 8019b38:	801a      	strh	r2, [r3, #0]
 8019b3a:	183b      	adds	r3, r7, r0
 8019b3c:	183a      	adds	r2, r7, r0
 8019b3e:	8812      	ldrh	r2, [r2, #0]
 8019b40:	2110      	movs	r1, #16
 8019b42:	404a      	eors	r2, r1
 8019b44:	801a      	strh	r2, [r3, #0]
 8019b46:	183b      	adds	r3, r7, r0
 8019b48:	183a      	adds	r2, r7, r0
 8019b4a:	8812      	ldrh	r2, [r2, #0]
 8019b4c:	2120      	movs	r1, #32
 8019b4e:	404a      	eors	r2, r1
 8019b50:	801a      	strh	r2, [r3, #0]
 8019b52:	687a      	ldr	r2, [r7, #4]
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	781b      	ldrb	r3, [r3, #0]
 8019b58:	009b      	lsls	r3, r3, #2
 8019b5a:	18d3      	adds	r3, r2, r3
 8019b5c:	183a      	adds	r2, r7, r0
 8019b5e:	8812      	ldrh	r2, [r2, #0]
 8019b60:	4913      	ldr	r1, [pc, #76]	@ (8019bb0 <USB_EPStartXfer+0xab4>)
 8019b62:	430a      	orrs	r2, r1
 8019b64:	b292      	uxth	r2, r2
 8019b66:	801a      	strh	r2, [r3, #0]
 8019b68:	f000 fbf4 	bl	801a354 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8019b6c:	683b      	ldr	r3, [r7, #0]
 8019b6e:	7b1b      	ldrb	r3, [r3, #12]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d000      	beq.n	8019b76 <USB_EPStartXfer+0xa7a>
 8019b74:	e0a9      	b.n	8019cca <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8019b76:	683b      	ldr	r3, [r7, #0]
 8019b78:	699a      	ldr	r2, [r3, #24]
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	691b      	ldr	r3, [r3, #16]
 8019b7e:	429a      	cmp	r2, r3
 8019b80:	d918      	bls.n	8019bb4 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8019b82:	683b      	ldr	r3, [r7, #0]
 8019b84:	691b      	ldr	r3, [r3, #16]
 8019b86:	1d7a      	adds	r2, r7, #5
 8019b88:	32ff      	adds	r2, #255	@ 0xff
 8019b8a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	699a      	ldr	r2, [r3, #24]
 8019b90:	1d7b      	adds	r3, r7, #5
 8019b92:	33ff      	adds	r3, #255	@ 0xff
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	1ad2      	subs	r2, r2, r3
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	619a      	str	r2, [r3, #24]
 8019b9c:	e012      	b.n	8019bc4 <USB_EPStartXfer+0xac8>
 8019b9e:	46c0      	nop			@ (mov r8, r8)
 8019ba0:	00000406 	.word	0x00000406
 8019ba4:	ffff8000 	.word	0xffff8000
 8019ba8:	00000402 	.word	0x00000402
 8019bac:	ffff8fbf 	.word	0xffff8fbf
 8019bb0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	699b      	ldr	r3, [r3, #24]
 8019bb8:	1d7a      	adds	r2, r7, #5
 8019bba:	32ff      	adds	r2, #255	@ 0xff
 8019bbc:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8019bbe:	683b      	ldr	r3, [r7, #0]
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	2190      	movs	r1, #144	@ 0x90
 8019bc8:	187a      	adds	r2, r7, r1
 8019bca:	6013      	str	r3, [r2, #0]
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	2250      	movs	r2, #80	@ 0x50
 8019bd0:	5a9b      	ldrh	r3, [r3, r2]
 8019bd2:	b29b      	uxth	r3, r3
 8019bd4:	001a      	movs	r2, r3
 8019bd6:	187b      	adds	r3, r7, r1
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	189b      	adds	r3, r3, r2
 8019bdc:	187a      	adds	r2, r7, r1
 8019bde:	6013      	str	r3, [r2, #0]
 8019be0:	683b      	ldr	r3, [r7, #0]
 8019be2:	781b      	ldrb	r3, [r3, #0]
 8019be4:	00da      	lsls	r2, r3, #3
 8019be6:	187b      	adds	r3, r7, r1
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	18d3      	adds	r3, r2, r3
 8019bec:	4acf      	ldr	r2, [pc, #828]	@ (8019f2c <USB_EPStartXfer+0xe30>)
 8019bee:	4694      	mov	ip, r2
 8019bf0:	4463      	add	r3, ip
 8019bf2:	218c      	movs	r1, #140	@ 0x8c
 8019bf4:	187a      	adds	r2, r7, r1
 8019bf6:	6013      	str	r3, [r2, #0]
 8019bf8:	187b      	adds	r3, r7, r1
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	881b      	ldrh	r3, [r3, #0]
 8019bfe:	b29b      	uxth	r3, r3
 8019c00:	059b      	lsls	r3, r3, #22
 8019c02:	0d9b      	lsrs	r3, r3, #22
 8019c04:	b29a      	uxth	r2, r3
 8019c06:	187b      	adds	r3, r7, r1
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	801a      	strh	r2, [r3, #0]
 8019c0c:	1d7b      	adds	r3, r7, #5
 8019c0e:	33ff      	adds	r3, #255	@ 0xff
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	2b3e      	cmp	r3, #62	@ 0x3e
 8019c14:	d925      	bls.n	8019c62 <USB_EPStartXfer+0xb66>
 8019c16:	1d7b      	adds	r3, r7, #5
 8019c18:	33ff      	adds	r3, #255	@ 0xff
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	095b      	lsrs	r3, r3, #5
 8019c1e:	21e8      	movs	r1, #232	@ 0xe8
 8019c20:	187a      	adds	r2, r7, r1
 8019c22:	6013      	str	r3, [r2, #0]
 8019c24:	1d7b      	adds	r3, r7, #5
 8019c26:	33ff      	adds	r3, #255	@ 0xff
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	221f      	movs	r2, #31
 8019c2c:	4013      	ands	r3, r2
 8019c2e:	d104      	bne.n	8019c3a <USB_EPStartXfer+0xb3e>
 8019c30:	187b      	adds	r3, r7, r1
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	3b01      	subs	r3, #1
 8019c36:	187a      	adds	r2, r7, r1
 8019c38:	6013      	str	r3, [r2, #0]
 8019c3a:	218c      	movs	r1, #140	@ 0x8c
 8019c3c:	187b      	adds	r3, r7, r1
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	881b      	ldrh	r3, [r3, #0]
 8019c42:	b29a      	uxth	r2, r3
 8019c44:	23e8      	movs	r3, #232	@ 0xe8
 8019c46:	18fb      	adds	r3, r7, r3
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	b29b      	uxth	r3, r3
 8019c4c:	029b      	lsls	r3, r3, #10
 8019c4e:	b29b      	uxth	r3, r3
 8019c50:	4313      	orrs	r3, r2
 8019c52:	b29b      	uxth	r3, r3
 8019c54:	4ab6      	ldr	r2, [pc, #728]	@ (8019f30 <USB_EPStartXfer+0xe34>)
 8019c56:	4313      	orrs	r3, r2
 8019c58:	b29a      	uxth	r2, r3
 8019c5a:	187b      	adds	r3, r7, r1
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	801a      	strh	r2, [r3, #0]
 8019c60:	e353      	b.n	801a30a <USB_EPStartXfer+0x120e>
 8019c62:	1d7b      	adds	r3, r7, #5
 8019c64:	33ff      	adds	r3, #255	@ 0xff
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d10b      	bne.n	8019c84 <USB_EPStartXfer+0xb88>
 8019c6c:	218c      	movs	r1, #140	@ 0x8c
 8019c6e:	187b      	adds	r3, r7, r1
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	881b      	ldrh	r3, [r3, #0]
 8019c74:	b29b      	uxth	r3, r3
 8019c76:	4aae      	ldr	r2, [pc, #696]	@ (8019f30 <USB_EPStartXfer+0xe34>)
 8019c78:	4313      	orrs	r3, r2
 8019c7a:	b29a      	uxth	r2, r3
 8019c7c:	187b      	adds	r3, r7, r1
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	801a      	strh	r2, [r3, #0]
 8019c82:	e342      	b.n	801a30a <USB_EPStartXfer+0x120e>
 8019c84:	1d7b      	adds	r3, r7, #5
 8019c86:	33ff      	adds	r3, #255	@ 0xff
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	085b      	lsrs	r3, r3, #1
 8019c8c:	21e8      	movs	r1, #232	@ 0xe8
 8019c8e:	187a      	adds	r2, r7, r1
 8019c90:	6013      	str	r3, [r2, #0]
 8019c92:	1d7b      	adds	r3, r7, #5
 8019c94:	33ff      	adds	r3, #255	@ 0xff
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	2201      	movs	r2, #1
 8019c9a:	4013      	ands	r3, r2
 8019c9c:	d004      	beq.n	8019ca8 <USB_EPStartXfer+0xbac>
 8019c9e:	187b      	adds	r3, r7, r1
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	3301      	adds	r3, #1
 8019ca4:	187a      	adds	r2, r7, r1
 8019ca6:	6013      	str	r3, [r2, #0]
 8019ca8:	218c      	movs	r1, #140	@ 0x8c
 8019caa:	187b      	adds	r3, r7, r1
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	881b      	ldrh	r3, [r3, #0]
 8019cb0:	b29a      	uxth	r2, r3
 8019cb2:	23e8      	movs	r3, #232	@ 0xe8
 8019cb4:	18fb      	adds	r3, r7, r3
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	b29b      	uxth	r3, r3
 8019cba:	029b      	lsls	r3, r3, #10
 8019cbc:	b29b      	uxth	r3, r3
 8019cbe:	4313      	orrs	r3, r2
 8019cc0:	b29a      	uxth	r2, r3
 8019cc2:	187b      	adds	r3, r7, r1
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	801a      	strh	r2, [r3, #0]
 8019cc8:	e31f      	b.n	801a30a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8019cca:	683b      	ldr	r3, [r7, #0]
 8019ccc:	78db      	ldrb	r3, [r3, #3]
 8019cce:	2b02      	cmp	r3, #2
 8019cd0:	d000      	beq.n	8019cd4 <USB_EPStartXfer+0xbd8>
 8019cd2:	e191      	b.n	8019ff8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8019cd4:	683b      	ldr	r3, [r7, #0]
 8019cd6:	785b      	ldrb	r3, [r3, #1]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d000      	beq.n	8019cde <USB_EPStartXfer+0xbe2>
 8019cdc:	e07c      	b.n	8019dd8 <USB_EPStartXfer+0xcdc>
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	21ac      	movs	r1, #172	@ 0xac
 8019ce2:	187a      	adds	r2, r7, r1
 8019ce4:	6013      	str	r3, [r2, #0]
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	2250      	movs	r2, #80	@ 0x50
 8019cea:	5a9b      	ldrh	r3, [r3, r2]
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	001a      	movs	r2, r3
 8019cf0:	187b      	adds	r3, r7, r1
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	189b      	adds	r3, r3, r2
 8019cf6:	187a      	adds	r2, r7, r1
 8019cf8:	6013      	str	r3, [r2, #0]
 8019cfa:	683b      	ldr	r3, [r7, #0]
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	00da      	lsls	r2, r3, #3
 8019d00:	187b      	adds	r3, r7, r1
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	18d3      	adds	r3, r2, r3
 8019d06:	4a8b      	ldr	r2, [pc, #556]	@ (8019f34 <USB_EPStartXfer+0xe38>)
 8019d08:	4694      	mov	ip, r2
 8019d0a:	4463      	add	r3, ip
 8019d0c:	21a8      	movs	r1, #168	@ 0xa8
 8019d0e:	187a      	adds	r2, r7, r1
 8019d10:	6013      	str	r3, [r2, #0]
 8019d12:	187b      	adds	r3, r7, r1
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	881b      	ldrh	r3, [r3, #0]
 8019d18:	b29b      	uxth	r3, r3
 8019d1a:	059b      	lsls	r3, r3, #22
 8019d1c:	0d9b      	lsrs	r3, r3, #22
 8019d1e:	b29a      	uxth	r2, r3
 8019d20:	187b      	adds	r3, r7, r1
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	801a      	strh	r2, [r3, #0]
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	691b      	ldr	r3, [r3, #16]
 8019d2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8019d2c:	d923      	bls.n	8019d76 <USB_EPStartXfer+0xc7a>
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	691b      	ldr	r3, [r3, #16]
 8019d32:	095b      	lsrs	r3, r3, #5
 8019d34:	21e4      	movs	r1, #228	@ 0xe4
 8019d36:	187a      	adds	r2, r7, r1
 8019d38:	6013      	str	r3, [r2, #0]
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	691b      	ldr	r3, [r3, #16]
 8019d3e:	221f      	movs	r2, #31
 8019d40:	4013      	ands	r3, r2
 8019d42:	d104      	bne.n	8019d4e <USB_EPStartXfer+0xc52>
 8019d44:	187b      	adds	r3, r7, r1
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	3b01      	subs	r3, #1
 8019d4a:	187a      	adds	r2, r7, r1
 8019d4c:	6013      	str	r3, [r2, #0]
 8019d4e:	21a8      	movs	r1, #168	@ 0xa8
 8019d50:	187b      	adds	r3, r7, r1
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	881b      	ldrh	r3, [r3, #0]
 8019d56:	b29a      	uxth	r2, r3
 8019d58:	23e4      	movs	r3, #228	@ 0xe4
 8019d5a:	18fb      	adds	r3, r7, r3
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	b29b      	uxth	r3, r3
 8019d60:	029b      	lsls	r3, r3, #10
 8019d62:	b29b      	uxth	r3, r3
 8019d64:	4313      	orrs	r3, r2
 8019d66:	b29b      	uxth	r3, r3
 8019d68:	4a71      	ldr	r2, [pc, #452]	@ (8019f30 <USB_EPStartXfer+0xe34>)
 8019d6a:	4313      	orrs	r3, r2
 8019d6c:	b29a      	uxth	r2, r3
 8019d6e:	187b      	adds	r3, r7, r1
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	801a      	strh	r2, [r3, #0]
 8019d74:	e054      	b.n	8019e20 <USB_EPStartXfer+0xd24>
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	691b      	ldr	r3, [r3, #16]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d10b      	bne.n	8019d96 <USB_EPStartXfer+0xc9a>
 8019d7e:	21a8      	movs	r1, #168	@ 0xa8
 8019d80:	187b      	adds	r3, r7, r1
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	881b      	ldrh	r3, [r3, #0]
 8019d86:	b29b      	uxth	r3, r3
 8019d88:	4a69      	ldr	r2, [pc, #420]	@ (8019f30 <USB_EPStartXfer+0xe34>)
 8019d8a:	4313      	orrs	r3, r2
 8019d8c:	b29a      	uxth	r2, r3
 8019d8e:	187b      	adds	r3, r7, r1
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	801a      	strh	r2, [r3, #0]
 8019d94:	e044      	b.n	8019e20 <USB_EPStartXfer+0xd24>
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	691b      	ldr	r3, [r3, #16]
 8019d9a:	085b      	lsrs	r3, r3, #1
 8019d9c:	21e4      	movs	r1, #228	@ 0xe4
 8019d9e:	187a      	adds	r2, r7, r1
 8019da0:	6013      	str	r3, [r2, #0]
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	691b      	ldr	r3, [r3, #16]
 8019da6:	2201      	movs	r2, #1
 8019da8:	4013      	ands	r3, r2
 8019daa:	d004      	beq.n	8019db6 <USB_EPStartXfer+0xcba>
 8019dac:	187b      	adds	r3, r7, r1
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	3301      	adds	r3, #1
 8019db2:	187a      	adds	r2, r7, r1
 8019db4:	6013      	str	r3, [r2, #0]
 8019db6:	21a8      	movs	r1, #168	@ 0xa8
 8019db8:	187b      	adds	r3, r7, r1
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	881b      	ldrh	r3, [r3, #0]
 8019dbe:	b29a      	uxth	r2, r3
 8019dc0:	23e4      	movs	r3, #228	@ 0xe4
 8019dc2:	18fb      	adds	r3, r7, r3
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	b29b      	uxth	r3, r3
 8019dc8:	029b      	lsls	r3, r3, #10
 8019dca:	b29b      	uxth	r3, r3
 8019dcc:	4313      	orrs	r3, r2
 8019dce:	b29a      	uxth	r2, r3
 8019dd0:	187b      	adds	r3, r7, r1
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	801a      	strh	r2, [r3, #0]
 8019dd6:	e023      	b.n	8019e20 <USB_EPStartXfer+0xd24>
 8019dd8:	683b      	ldr	r3, [r7, #0]
 8019dda:	785b      	ldrb	r3, [r3, #1]
 8019ddc:	2b01      	cmp	r3, #1
 8019dde:	d11f      	bne.n	8019e20 <USB_EPStartXfer+0xd24>
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	21b4      	movs	r1, #180	@ 0xb4
 8019de4:	187a      	adds	r2, r7, r1
 8019de6:	6013      	str	r3, [r2, #0]
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	2250      	movs	r2, #80	@ 0x50
 8019dec:	5a9b      	ldrh	r3, [r3, r2]
 8019dee:	b29b      	uxth	r3, r3
 8019df0:	001a      	movs	r2, r3
 8019df2:	187b      	adds	r3, r7, r1
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	189b      	adds	r3, r3, r2
 8019df8:	187a      	adds	r2, r7, r1
 8019dfa:	6013      	str	r3, [r2, #0]
 8019dfc:	683b      	ldr	r3, [r7, #0]
 8019dfe:	781b      	ldrb	r3, [r3, #0]
 8019e00:	00da      	lsls	r2, r3, #3
 8019e02:	187b      	adds	r3, r7, r1
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	18d3      	adds	r3, r2, r3
 8019e08:	4a4a      	ldr	r2, [pc, #296]	@ (8019f34 <USB_EPStartXfer+0xe38>)
 8019e0a:	4694      	mov	ip, r2
 8019e0c:	4463      	add	r3, ip
 8019e0e:	21b0      	movs	r1, #176	@ 0xb0
 8019e10:	187a      	adds	r2, r7, r1
 8019e12:	6013      	str	r3, [r2, #0]
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	691b      	ldr	r3, [r3, #16]
 8019e18:	b29a      	uxth	r2, r3
 8019e1a:	187b      	adds	r3, r7, r1
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	801a      	strh	r2, [r3, #0]
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	22a4      	movs	r2, #164	@ 0xa4
 8019e24:	18ba      	adds	r2, r7, r2
 8019e26:	6013      	str	r3, [r2, #0]
 8019e28:	683b      	ldr	r3, [r7, #0]
 8019e2a:	785b      	ldrb	r3, [r3, #1]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d000      	beq.n	8019e32 <USB_EPStartXfer+0xd36>
 8019e30:	e082      	b.n	8019f38 <USB_EPStartXfer+0xe3c>
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	219c      	movs	r1, #156	@ 0x9c
 8019e36:	187a      	adds	r2, r7, r1
 8019e38:	6013      	str	r3, [r2, #0]
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	2250      	movs	r2, #80	@ 0x50
 8019e3e:	5a9b      	ldrh	r3, [r3, r2]
 8019e40:	b29b      	uxth	r3, r3
 8019e42:	001a      	movs	r2, r3
 8019e44:	187b      	adds	r3, r7, r1
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	189b      	adds	r3, r3, r2
 8019e4a:	187a      	adds	r2, r7, r1
 8019e4c:	6013      	str	r3, [r2, #0]
 8019e4e:	683b      	ldr	r3, [r7, #0]
 8019e50:	781b      	ldrb	r3, [r3, #0]
 8019e52:	00da      	lsls	r2, r3, #3
 8019e54:	187b      	adds	r3, r7, r1
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	18d3      	adds	r3, r2, r3
 8019e5a:	4a34      	ldr	r2, [pc, #208]	@ (8019f2c <USB_EPStartXfer+0xe30>)
 8019e5c:	4694      	mov	ip, r2
 8019e5e:	4463      	add	r3, ip
 8019e60:	2198      	movs	r1, #152	@ 0x98
 8019e62:	187a      	adds	r2, r7, r1
 8019e64:	6013      	str	r3, [r2, #0]
 8019e66:	187b      	adds	r3, r7, r1
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	881b      	ldrh	r3, [r3, #0]
 8019e6c:	b29b      	uxth	r3, r3
 8019e6e:	059b      	lsls	r3, r3, #22
 8019e70:	0d9b      	lsrs	r3, r3, #22
 8019e72:	b29a      	uxth	r2, r3
 8019e74:	187b      	adds	r3, r7, r1
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	801a      	strh	r2, [r3, #0]
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	691b      	ldr	r3, [r3, #16]
 8019e7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e80:	d923      	bls.n	8019eca <USB_EPStartXfer+0xdce>
 8019e82:	683b      	ldr	r3, [r7, #0]
 8019e84:	691b      	ldr	r3, [r3, #16]
 8019e86:	095b      	lsrs	r3, r3, #5
 8019e88:	21e0      	movs	r1, #224	@ 0xe0
 8019e8a:	187a      	adds	r2, r7, r1
 8019e8c:	6013      	str	r3, [r2, #0]
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	691b      	ldr	r3, [r3, #16]
 8019e92:	221f      	movs	r2, #31
 8019e94:	4013      	ands	r3, r2
 8019e96:	d104      	bne.n	8019ea2 <USB_EPStartXfer+0xda6>
 8019e98:	187b      	adds	r3, r7, r1
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	3b01      	subs	r3, #1
 8019e9e:	187a      	adds	r2, r7, r1
 8019ea0:	6013      	str	r3, [r2, #0]
 8019ea2:	2198      	movs	r1, #152	@ 0x98
 8019ea4:	187b      	adds	r3, r7, r1
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	881b      	ldrh	r3, [r3, #0]
 8019eaa:	b29a      	uxth	r2, r3
 8019eac:	23e0      	movs	r3, #224	@ 0xe0
 8019eae:	18fb      	adds	r3, r7, r3
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	b29b      	uxth	r3, r3
 8019eb4:	029b      	lsls	r3, r3, #10
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	4313      	orrs	r3, r2
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8019f30 <USB_EPStartXfer+0xe34>)
 8019ebe:	4313      	orrs	r3, r2
 8019ec0:	b29a      	uxth	r2, r3
 8019ec2:	187b      	adds	r3, r7, r1
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	801a      	strh	r2, [r3, #0]
 8019ec8:	e057      	b.n	8019f7a <USB_EPStartXfer+0xe7e>
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	691b      	ldr	r3, [r3, #16]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d10b      	bne.n	8019eea <USB_EPStartXfer+0xdee>
 8019ed2:	2198      	movs	r1, #152	@ 0x98
 8019ed4:	187b      	adds	r3, r7, r1
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	881b      	ldrh	r3, [r3, #0]
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	4a14      	ldr	r2, [pc, #80]	@ (8019f30 <USB_EPStartXfer+0xe34>)
 8019ede:	4313      	orrs	r3, r2
 8019ee0:	b29a      	uxth	r2, r3
 8019ee2:	187b      	adds	r3, r7, r1
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	801a      	strh	r2, [r3, #0]
 8019ee8:	e047      	b.n	8019f7a <USB_EPStartXfer+0xe7e>
 8019eea:	683b      	ldr	r3, [r7, #0]
 8019eec:	691b      	ldr	r3, [r3, #16]
 8019eee:	085b      	lsrs	r3, r3, #1
 8019ef0:	21e0      	movs	r1, #224	@ 0xe0
 8019ef2:	187a      	adds	r2, r7, r1
 8019ef4:	6013      	str	r3, [r2, #0]
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	691b      	ldr	r3, [r3, #16]
 8019efa:	2201      	movs	r2, #1
 8019efc:	4013      	ands	r3, r2
 8019efe:	d004      	beq.n	8019f0a <USB_EPStartXfer+0xe0e>
 8019f00:	187b      	adds	r3, r7, r1
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	3301      	adds	r3, #1
 8019f06:	187a      	adds	r2, r7, r1
 8019f08:	6013      	str	r3, [r2, #0]
 8019f0a:	2198      	movs	r1, #152	@ 0x98
 8019f0c:	187b      	adds	r3, r7, r1
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	881b      	ldrh	r3, [r3, #0]
 8019f12:	b29a      	uxth	r2, r3
 8019f14:	23e0      	movs	r3, #224	@ 0xe0
 8019f16:	18fb      	adds	r3, r7, r3
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	b29b      	uxth	r3, r3
 8019f1c:	029b      	lsls	r3, r3, #10
 8019f1e:	b29b      	uxth	r3, r3
 8019f20:	4313      	orrs	r3, r2
 8019f22:	b29a      	uxth	r2, r3
 8019f24:	187b      	adds	r3, r7, r1
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	801a      	strh	r2, [r3, #0]
 8019f2a:	e026      	b.n	8019f7a <USB_EPStartXfer+0xe7e>
 8019f2c:	00000406 	.word	0x00000406
 8019f30:	ffff8000 	.word	0xffff8000
 8019f34:	00000402 	.word	0x00000402
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	785b      	ldrb	r3, [r3, #1]
 8019f3c:	2b01      	cmp	r3, #1
 8019f3e:	d11c      	bne.n	8019f7a <USB_EPStartXfer+0xe7e>
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	2250      	movs	r2, #80	@ 0x50
 8019f44:	5a9b      	ldrh	r3, [r3, r2]
 8019f46:	b29b      	uxth	r3, r3
 8019f48:	001a      	movs	r2, r3
 8019f4a:	21a4      	movs	r1, #164	@ 0xa4
 8019f4c:	187b      	adds	r3, r7, r1
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	189b      	adds	r3, r3, r2
 8019f52:	187a      	adds	r2, r7, r1
 8019f54:	6013      	str	r3, [r2, #0]
 8019f56:	683b      	ldr	r3, [r7, #0]
 8019f58:	781b      	ldrb	r3, [r3, #0]
 8019f5a:	00da      	lsls	r2, r3, #3
 8019f5c:	187b      	adds	r3, r7, r1
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	18d3      	adds	r3, r2, r3
 8019f62:	4ad2      	ldr	r2, [pc, #840]	@ (801a2ac <USB_EPStartXfer+0x11b0>)
 8019f64:	4694      	mov	ip, r2
 8019f66:	4463      	add	r3, ip
 8019f68:	21a0      	movs	r1, #160	@ 0xa0
 8019f6a:	187a      	adds	r2, r7, r1
 8019f6c:	6013      	str	r3, [r2, #0]
 8019f6e:	683b      	ldr	r3, [r7, #0]
 8019f70:	691b      	ldr	r3, [r3, #16]
 8019f72:	b29a      	uxth	r2, r3
 8019f74:	187b      	adds	r3, r7, r1
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8019f7a:	683b      	ldr	r3, [r7, #0]
 8019f7c:	69db      	ldr	r3, [r3, #28]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d100      	bne.n	8019f84 <USB_EPStartXfer+0xe88>
 8019f82:	e1c2      	b.n	801a30a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8019f84:	687a      	ldr	r2, [r7, #4]
 8019f86:	683b      	ldr	r3, [r7, #0]
 8019f88:	781b      	ldrb	r3, [r3, #0]
 8019f8a:	009b      	lsls	r3, r3, #2
 8019f8c:	18d2      	adds	r2, r2, r3
 8019f8e:	2196      	movs	r1, #150	@ 0x96
 8019f90:	187b      	adds	r3, r7, r1
 8019f92:	8812      	ldrh	r2, [r2, #0]
 8019f94:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019f96:	187b      	adds	r3, r7, r1
 8019f98:	881a      	ldrh	r2, [r3, #0]
 8019f9a:	2380      	movs	r3, #128	@ 0x80
 8019f9c:	01db      	lsls	r3, r3, #7
 8019f9e:	4013      	ands	r3, r2
 8019fa0:	d004      	beq.n	8019fac <USB_EPStartXfer+0xeb0>
 8019fa2:	187b      	adds	r3, r7, r1
 8019fa4:	881b      	ldrh	r3, [r3, #0]
 8019fa6:	2240      	movs	r2, #64	@ 0x40
 8019fa8:	4013      	ands	r3, r2
 8019faa:	d10d      	bne.n	8019fc8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019fac:	2196      	movs	r1, #150	@ 0x96
 8019fae:	187b      	adds	r3, r7, r1
 8019fb0:	881a      	ldrh	r2, [r3, #0]
 8019fb2:	2380      	movs	r3, #128	@ 0x80
 8019fb4:	01db      	lsls	r3, r3, #7
 8019fb6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019fb8:	d000      	beq.n	8019fbc <USB_EPStartXfer+0xec0>
 8019fba:	e1a6      	b.n	801a30a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019fbc:	187b      	adds	r3, r7, r1
 8019fbe:	881b      	ldrh	r3, [r3, #0]
 8019fc0:	2240      	movs	r2, #64	@ 0x40
 8019fc2:	4013      	ands	r3, r2
 8019fc4:	d000      	beq.n	8019fc8 <USB_EPStartXfer+0xecc>
 8019fc6:	e1a0      	b.n	801a30a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8019fc8:	687a      	ldr	r2, [r7, #4]
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	781b      	ldrb	r3, [r3, #0]
 8019fce:	009b      	lsls	r3, r3, #2
 8019fd0:	18d3      	adds	r3, r2, r3
 8019fd2:	881b      	ldrh	r3, [r3, #0]
 8019fd4:	b29a      	uxth	r2, r3
 8019fd6:	2094      	movs	r0, #148	@ 0x94
 8019fd8:	183b      	adds	r3, r7, r0
 8019fda:	49b5      	ldr	r1, [pc, #724]	@ (801a2b0 <USB_EPStartXfer+0x11b4>)
 8019fdc:	400a      	ands	r2, r1
 8019fde:	801a      	strh	r2, [r3, #0]
 8019fe0:	687a      	ldr	r2, [r7, #4]
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	781b      	ldrb	r3, [r3, #0]
 8019fe6:	009b      	lsls	r3, r3, #2
 8019fe8:	18d3      	adds	r3, r2, r3
 8019fea:	183a      	adds	r2, r7, r0
 8019fec:	8812      	ldrh	r2, [r2, #0]
 8019fee:	49b1      	ldr	r1, [pc, #708]	@ (801a2b4 <USB_EPStartXfer+0x11b8>)
 8019ff0:	430a      	orrs	r2, r1
 8019ff2:	b292      	uxth	r2, r2
 8019ff4:	801a      	strh	r2, [r3, #0]
 8019ff6:	e188      	b.n	801a30a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8019ff8:	683b      	ldr	r3, [r7, #0]
 8019ffa:	78db      	ldrb	r3, [r3, #3]
 8019ffc:	2b01      	cmp	r3, #1
 8019ffe:	d000      	beq.n	801a002 <USB_EPStartXfer+0xf06>
 801a000:	e181      	b.n	801a306 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801a002:	683b      	ldr	r3, [r7, #0]
 801a004:	699a      	ldr	r2, [r3, #24]
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	691b      	ldr	r3, [r3, #16]
 801a00a:	429a      	cmp	r2, r3
 801a00c:	d90d      	bls.n	801a02a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801a00e:	683b      	ldr	r3, [r7, #0]
 801a010:	691b      	ldr	r3, [r3, #16]
 801a012:	1d7a      	adds	r2, r7, #5
 801a014:	32ff      	adds	r2, #255	@ 0xff
 801a016:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801a018:	683b      	ldr	r3, [r7, #0]
 801a01a:	699a      	ldr	r2, [r3, #24]
 801a01c:	1d7b      	adds	r3, r7, #5
 801a01e:	33ff      	adds	r3, #255	@ 0xff
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	1ad2      	subs	r2, r2, r3
 801a024:	683b      	ldr	r3, [r7, #0]
 801a026:	619a      	str	r2, [r3, #24]
 801a028:	e007      	b.n	801a03a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	699b      	ldr	r3, [r3, #24]
 801a02e:	1d7a      	adds	r2, r7, #5
 801a030:	32ff      	adds	r2, #255	@ 0xff
 801a032:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801a034:	683b      	ldr	r3, [r7, #0]
 801a036:	2200      	movs	r2, #0
 801a038:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801a03a:	683b      	ldr	r3, [r7, #0]
 801a03c:	785b      	ldrb	r3, [r3, #1]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d000      	beq.n	801a044 <USB_EPStartXfer+0xf48>
 801a042:	e082      	b.n	801a14a <USB_EPStartXfer+0x104e>
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	21cc      	movs	r1, #204	@ 0xcc
 801a048:	187a      	adds	r2, r7, r1
 801a04a:	6013      	str	r3, [r2, #0]
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	2250      	movs	r2, #80	@ 0x50
 801a050:	5a9b      	ldrh	r3, [r3, r2]
 801a052:	b29b      	uxth	r3, r3
 801a054:	001a      	movs	r2, r3
 801a056:	187b      	adds	r3, r7, r1
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	189b      	adds	r3, r3, r2
 801a05c:	187a      	adds	r2, r7, r1
 801a05e:	6013      	str	r3, [r2, #0]
 801a060:	683b      	ldr	r3, [r7, #0]
 801a062:	781b      	ldrb	r3, [r3, #0]
 801a064:	00da      	lsls	r2, r3, #3
 801a066:	187b      	adds	r3, r7, r1
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	18d3      	adds	r3, r2, r3
 801a06c:	4a92      	ldr	r2, [pc, #584]	@ (801a2b8 <USB_EPStartXfer+0x11bc>)
 801a06e:	4694      	mov	ip, r2
 801a070:	4463      	add	r3, ip
 801a072:	21c8      	movs	r1, #200	@ 0xc8
 801a074:	187a      	adds	r2, r7, r1
 801a076:	6013      	str	r3, [r2, #0]
 801a078:	187b      	adds	r3, r7, r1
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	881b      	ldrh	r3, [r3, #0]
 801a07e:	b29b      	uxth	r3, r3
 801a080:	059b      	lsls	r3, r3, #22
 801a082:	0d9b      	lsrs	r3, r3, #22
 801a084:	b29a      	uxth	r2, r3
 801a086:	187b      	adds	r3, r7, r1
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	801a      	strh	r2, [r3, #0]
 801a08c:	1d7b      	adds	r3, r7, #5
 801a08e:	33ff      	adds	r3, #255	@ 0xff
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	2b3e      	cmp	r3, #62	@ 0x3e
 801a094:	d925      	bls.n	801a0e2 <USB_EPStartXfer+0xfe6>
 801a096:	1d7b      	adds	r3, r7, #5
 801a098:	33ff      	adds	r3, #255	@ 0xff
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	095b      	lsrs	r3, r3, #5
 801a09e:	21dc      	movs	r1, #220	@ 0xdc
 801a0a0:	187a      	adds	r2, r7, r1
 801a0a2:	6013      	str	r3, [r2, #0]
 801a0a4:	1d7b      	adds	r3, r7, #5
 801a0a6:	33ff      	adds	r3, #255	@ 0xff
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	221f      	movs	r2, #31
 801a0ac:	4013      	ands	r3, r2
 801a0ae:	d104      	bne.n	801a0ba <USB_EPStartXfer+0xfbe>
 801a0b0:	187b      	adds	r3, r7, r1
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	3b01      	subs	r3, #1
 801a0b6:	187a      	adds	r2, r7, r1
 801a0b8:	6013      	str	r3, [r2, #0]
 801a0ba:	21c8      	movs	r1, #200	@ 0xc8
 801a0bc:	187b      	adds	r3, r7, r1
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	881b      	ldrh	r3, [r3, #0]
 801a0c2:	b29a      	uxth	r2, r3
 801a0c4:	23dc      	movs	r3, #220	@ 0xdc
 801a0c6:	18fb      	adds	r3, r7, r3
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	b29b      	uxth	r3, r3
 801a0cc:	029b      	lsls	r3, r3, #10
 801a0ce:	b29b      	uxth	r3, r3
 801a0d0:	4313      	orrs	r3, r2
 801a0d2:	b29b      	uxth	r3, r3
 801a0d4:	4a79      	ldr	r2, [pc, #484]	@ (801a2bc <USB_EPStartXfer+0x11c0>)
 801a0d6:	4313      	orrs	r3, r2
 801a0d8:	b29a      	uxth	r2, r3
 801a0da:	187b      	adds	r3, r7, r1
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	801a      	strh	r2, [r3, #0]
 801a0e0:	e058      	b.n	801a194 <USB_EPStartXfer+0x1098>
 801a0e2:	1d7b      	adds	r3, r7, #5
 801a0e4:	33ff      	adds	r3, #255	@ 0xff
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d10b      	bne.n	801a104 <USB_EPStartXfer+0x1008>
 801a0ec:	21c8      	movs	r1, #200	@ 0xc8
 801a0ee:	187b      	adds	r3, r7, r1
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	881b      	ldrh	r3, [r3, #0]
 801a0f4:	b29b      	uxth	r3, r3
 801a0f6:	4a71      	ldr	r2, [pc, #452]	@ (801a2bc <USB_EPStartXfer+0x11c0>)
 801a0f8:	4313      	orrs	r3, r2
 801a0fa:	b29a      	uxth	r2, r3
 801a0fc:	187b      	adds	r3, r7, r1
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	801a      	strh	r2, [r3, #0]
 801a102:	e047      	b.n	801a194 <USB_EPStartXfer+0x1098>
 801a104:	1d7b      	adds	r3, r7, #5
 801a106:	33ff      	adds	r3, #255	@ 0xff
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	085b      	lsrs	r3, r3, #1
 801a10c:	21dc      	movs	r1, #220	@ 0xdc
 801a10e:	187a      	adds	r2, r7, r1
 801a110:	6013      	str	r3, [r2, #0]
 801a112:	1d7b      	adds	r3, r7, #5
 801a114:	33ff      	adds	r3, #255	@ 0xff
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	2201      	movs	r2, #1
 801a11a:	4013      	ands	r3, r2
 801a11c:	d004      	beq.n	801a128 <USB_EPStartXfer+0x102c>
 801a11e:	187b      	adds	r3, r7, r1
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	3301      	adds	r3, #1
 801a124:	187a      	adds	r2, r7, r1
 801a126:	6013      	str	r3, [r2, #0]
 801a128:	21c8      	movs	r1, #200	@ 0xc8
 801a12a:	187b      	adds	r3, r7, r1
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	881b      	ldrh	r3, [r3, #0]
 801a130:	b29a      	uxth	r2, r3
 801a132:	23dc      	movs	r3, #220	@ 0xdc
 801a134:	18fb      	adds	r3, r7, r3
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	b29b      	uxth	r3, r3
 801a13a:	029b      	lsls	r3, r3, #10
 801a13c:	b29b      	uxth	r3, r3
 801a13e:	4313      	orrs	r3, r2
 801a140:	b29a      	uxth	r2, r3
 801a142:	187b      	adds	r3, r7, r1
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	801a      	strh	r2, [r3, #0]
 801a148:	e024      	b.n	801a194 <USB_EPStartXfer+0x1098>
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	785b      	ldrb	r3, [r3, #1]
 801a14e:	2b01      	cmp	r3, #1
 801a150:	d120      	bne.n	801a194 <USB_EPStartXfer+0x1098>
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	21d4      	movs	r1, #212	@ 0xd4
 801a156:	187a      	adds	r2, r7, r1
 801a158:	6013      	str	r3, [r2, #0]
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2250      	movs	r2, #80	@ 0x50
 801a15e:	5a9b      	ldrh	r3, [r3, r2]
 801a160:	b29b      	uxth	r3, r3
 801a162:	001a      	movs	r2, r3
 801a164:	187b      	adds	r3, r7, r1
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	189b      	adds	r3, r3, r2
 801a16a:	187a      	adds	r2, r7, r1
 801a16c:	6013      	str	r3, [r2, #0]
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	781b      	ldrb	r3, [r3, #0]
 801a172:	00da      	lsls	r2, r3, #3
 801a174:	187b      	adds	r3, r7, r1
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	18d3      	adds	r3, r2, r3
 801a17a:	4a4f      	ldr	r2, [pc, #316]	@ (801a2b8 <USB_EPStartXfer+0x11bc>)
 801a17c:	4694      	mov	ip, r2
 801a17e:	4463      	add	r3, ip
 801a180:	21d0      	movs	r1, #208	@ 0xd0
 801a182:	187a      	adds	r2, r7, r1
 801a184:	6013      	str	r3, [r2, #0]
 801a186:	1d7b      	adds	r3, r7, #5
 801a188:	33ff      	adds	r3, #255	@ 0xff
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	187b      	adds	r3, r7, r1
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	801a      	strh	r2, [r3, #0]
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	22c4      	movs	r2, #196	@ 0xc4
 801a198:	18ba      	adds	r2, r7, r2
 801a19a:	6013      	str	r3, [r2, #0]
 801a19c:	683b      	ldr	r3, [r7, #0]
 801a19e:	785b      	ldrb	r3, [r3, #1]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d000      	beq.n	801a1a6 <USB_EPStartXfer+0x10aa>
 801a1a4:	e08c      	b.n	801a2c0 <USB_EPStartXfer+0x11c4>
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	21bc      	movs	r1, #188	@ 0xbc
 801a1aa:	187a      	adds	r2, r7, r1
 801a1ac:	6013      	str	r3, [r2, #0]
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2250      	movs	r2, #80	@ 0x50
 801a1b2:	5a9b      	ldrh	r3, [r3, r2]
 801a1b4:	b29b      	uxth	r3, r3
 801a1b6:	001a      	movs	r2, r3
 801a1b8:	187b      	adds	r3, r7, r1
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	189b      	adds	r3, r3, r2
 801a1be:	187a      	adds	r2, r7, r1
 801a1c0:	6013      	str	r3, [r2, #0]
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	781b      	ldrb	r3, [r3, #0]
 801a1c6:	00da      	lsls	r2, r3, #3
 801a1c8:	187b      	adds	r3, r7, r1
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	18d3      	adds	r3, r2, r3
 801a1ce:	4a37      	ldr	r2, [pc, #220]	@ (801a2ac <USB_EPStartXfer+0x11b0>)
 801a1d0:	4694      	mov	ip, r2
 801a1d2:	4463      	add	r3, ip
 801a1d4:	21b8      	movs	r1, #184	@ 0xb8
 801a1d6:	187a      	adds	r2, r7, r1
 801a1d8:	6013      	str	r3, [r2, #0]
 801a1da:	187b      	adds	r3, r7, r1
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	881b      	ldrh	r3, [r3, #0]
 801a1e0:	b29b      	uxth	r3, r3
 801a1e2:	059b      	lsls	r3, r3, #22
 801a1e4:	0d9b      	lsrs	r3, r3, #22
 801a1e6:	b29a      	uxth	r2, r3
 801a1e8:	187b      	adds	r3, r7, r1
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	801a      	strh	r2, [r3, #0]
 801a1ee:	1d7b      	adds	r3, r7, #5
 801a1f0:	33ff      	adds	r3, #255	@ 0xff
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	2b3e      	cmp	r3, #62	@ 0x3e
 801a1f6:	d925      	bls.n	801a244 <USB_EPStartXfer+0x1148>
 801a1f8:	1d7b      	adds	r3, r7, #5
 801a1fa:	33ff      	adds	r3, #255	@ 0xff
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	095b      	lsrs	r3, r3, #5
 801a200:	21d8      	movs	r1, #216	@ 0xd8
 801a202:	187a      	adds	r2, r7, r1
 801a204:	6013      	str	r3, [r2, #0]
 801a206:	1d7b      	adds	r3, r7, #5
 801a208:	33ff      	adds	r3, #255	@ 0xff
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	221f      	movs	r2, #31
 801a20e:	4013      	ands	r3, r2
 801a210:	d104      	bne.n	801a21c <USB_EPStartXfer+0x1120>
 801a212:	187b      	adds	r3, r7, r1
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	3b01      	subs	r3, #1
 801a218:	187a      	adds	r2, r7, r1
 801a21a:	6013      	str	r3, [r2, #0]
 801a21c:	21b8      	movs	r1, #184	@ 0xb8
 801a21e:	187b      	adds	r3, r7, r1
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	881b      	ldrh	r3, [r3, #0]
 801a224:	b29a      	uxth	r2, r3
 801a226:	23d8      	movs	r3, #216	@ 0xd8
 801a228:	18fb      	adds	r3, r7, r3
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	b29b      	uxth	r3, r3
 801a22e:	029b      	lsls	r3, r3, #10
 801a230:	b29b      	uxth	r3, r3
 801a232:	4313      	orrs	r3, r2
 801a234:	b29b      	uxth	r3, r3
 801a236:	4a21      	ldr	r2, [pc, #132]	@ (801a2bc <USB_EPStartXfer+0x11c0>)
 801a238:	4313      	orrs	r3, r2
 801a23a:	b29a      	uxth	r2, r3
 801a23c:	187b      	adds	r3, r7, r1
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	801a      	strh	r2, [r3, #0]
 801a242:	e062      	b.n	801a30a <USB_EPStartXfer+0x120e>
 801a244:	1d7b      	adds	r3, r7, #5
 801a246:	33ff      	adds	r3, #255	@ 0xff
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d10b      	bne.n	801a266 <USB_EPStartXfer+0x116a>
 801a24e:	21b8      	movs	r1, #184	@ 0xb8
 801a250:	187b      	adds	r3, r7, r1
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	881b      	ldrh	r3, [r3, #0]
 801a256:	b29b      	uxth	r3, r3
 801a258:	4a18      	ldr	r2, [pc, #96]	@ (801a2bc <USB_EPStartXfer+0x11c0>)
 801a25a:	4313      	orrs	r3, r2
 801a25c:	b29a      	uxth	r2, r3
 801a25e:	187b      	adds	r3, r7, r1
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	801a      	strh	r2, [r3, #0]
 801a264:	e051      	b.n	801a30a <USB_EPStartXfer+0x120e>
 801a266:	1d7b      	adds	r3, r7, #5
 801a268:	33ff      	adds	r3, #255	@ 0xff
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	085b      	lsrs	r3, r3, #1
 801a26e:	21d8      	movs	r1, #216	@ 0xd8
 801a270:	187a      	adds	r2, r7, r1
 801a272:	6013      	str	r3, [r2, #0]
 801a274:	1d7b      	adds	r3, r7, #5
 801a276:	33ff      	adds	r3, #255	@ 0xff
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	2201      	movs	r2, #1
 801a27c:	4013      	ands	r3, r2
 801a27e:	d004      	beq.n	801a28a <USB_EPStartXfer+0x118e>
 801a280:	187b      	adds	r3, r7, r1
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	3301      	adds	r3, #1
 801a286:	187a      	adds	r2, r7, r1
 801a288:	6013      	str	r3, [r2, #0]
 801a28a:	21b8      	movs	r1, #184	@ 0xb8
 801a28c:	187b      	adds	r3, r7, r1
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	881b      	ldrh	r3, [r3, #0]
 801a292:	b29a      	uxth	r2, r3
 801a294:	23d8      	movs	r3, #216	@ 0xd8
 801a296:	18fb      	adds	r3, r7, r3
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	b29b      	uxth	r3, r3
 801a29c:	029b      	lsls	r3, r3, #10
 801a29e:	b29b      	uxth	r3, r3
 801a2a0:	4313      	orrs	r3, r2
 801a2a2:	b29a      	uxth	r2, r3
 801a2a4:	187b      	adds	r3, r7, r1
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	801a      	strh	r2, [r3, #0]
 801a2aa:	e02e      	b.n	801a30a <USB_EPStartXfer+0x120e>
 801a2ac:	00000406 	.word	0x00000406
 801a2b0:	ffff8f8f 	.word	0xffff8f8f
 801a2b4:	ffff80c0 	.word	0xffff80c0
 801a2b8:	00000402 	.word	0x00000402
 801a2bc:	ffff8000 	.word	0xffff8000
 801a2c0:	683b      	ldr	r3, [r7, #0]
 801a2c2:	785b      	ldrb	r3, [r3, #1]
 801a2c4:	2b01      	cmp	r3, #1
 801a2c6:	d120      	bne.n	801a30a <USB_EPStartXfer+0x120e>
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	2250      	movs	r2, #80	@ 0x50
 801a2cc:	5a9b      	ldrh	r3, [r3, r2]
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	001a      	movs	r2, r3
 801a2d2:	21c4      	movs	r1, #196	@ 0xc4
 801a2d4:	187b      	adds	r3, r7, r1
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	189b      	adds	r3, r3, r2
 801a2da:	187a      	adds	r2, r7, r1
 801a2dc:	6013      	str	r3, [r2, #0]
 801a2de:	683b      	ldr	r3, [r7, #0]
 801a2e0:	781b      	ldrb	r3, [r3, #0]
 801a2e2:	00da      	lsls	r2, r3, #3
 801a2e4:	187b      	adds	r3, r7, r1
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	18d3      	adds	r3, r2, r3
 801a2ea:	4a1d      	ldr	r2, [pc, #116]	@ (801a360 <USB_EPStartXfer+0x1264>)
 801a2ec:	4694      	mov	ip, r2
 801a2ee:	4463      	add	r3, ip
 801a2f0:	21c0      	movs	r1, #192	@ 0xc0
 801a2f2:	187a      	adds	r2, r7, r1
 801a2f4:	6013      	str	r3, [r2, #0]
 801a2f6:	1d7b      	adds	r3, r7, #5
 801a2f8:	33ff      	adds	r3, #255	@ 0xff
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	b29a      	uxth	r2, r3
 801a2fe:	187b      	adds	r3, r7, r1
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	801a      	strh	r2, [r3, #0]
 801a304:	e001      	b.n	801a30a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801a306:	2301      	movs	r3, #1
 801a308:	e025      	b.n	801a356 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a30a:	687a      	ldr	r2, [r7, #4]
 801a30c:	683b      	ldr	r3, [r7, #0]
 801a30e:	781b      	ldrb	r3, [r3, #0]
 801a310:	009b      	lsls	r3, r3, #2
 801a312:	18d3      	adds	r3, r2, r3
 801a314:	881b      	ldrh	r3, [r3, #0]
 801a316:	b29a      	uxth	r2, r3
 801a318:	208a      	movs	r0, #138	@ 0x8a
 801a31a:	183b      	adds	r3, r7, r0
 801a31c:	4911      	ldr	r1, [pc, #68]	@ (801a364 <USB_EPStartXfer+0x1268>)
 801a31e:	400a      	ands	r2, r1
 801a320:	801a      	strh	r2, [r3, #0]
 801a322:	183b      	adds	r3, r7, r0
 801a324:	183a      	adds	r2, r7, r0
 801a326:	8812      	ldrh	r2, [r2, #0]
 801a328:	2180      	movs	r1, #128	@ 0x80
 801a32a:	0149      	lsls	r1, r1, #5
 801a32c:	404a      	eors	r2, r1
 801a32e:	801a      	strh	r2, [r3, #0]
 801a330:	183b      	adds	r3, r7, r0
 801a332:	183a      	adds	r2, r7, r0
 801a334:	8812      	ldrh	r2, [r2, #0]
 801a336:	2180      	movs	r1, #128	@ 0x80
 801a338:	0189      	lsls	r1, r1, #6
 801a33a:	404a      	eors	r2, r1
 801a33c:	801a      	strh	r2, [r3, #0]
 801a33e:	687a      	ldr	r2, [r7, #4]
 801a340:	683b      	ldr	r3, [r7, #0]
 801a342:	781b      	ldrb	r3, [r3, #0]
 801a344:	009b      	lsls	r3, r3, #2
 801a346:	18d3      	adds	r3, r2, r3
 801a348:	183a      	adds	r2, r7, r0
 801a34a:	8812      	ldrh	r2, [r2, #0]
 801a34c:	4906      	ldr	r1, [pc, #24]	@ (801a368 <USB_EPStartXfer+0x126c>)
 801a34e:	430a      	orrs	r2, r1
 801a350:	b292      	uxth	r2, r2
 801a352:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a354:	2300      	movs	r3, #0
}
 801a356:	0018      	movs	r0, r3
 801a358:	46bd      	mov	sp, r7
 801a35a:	b043      	add	sp, #268	@ 0x10c
 801a35c:	bd90      	pop	{r4, r7, pc}
 801a35e:	46c0      	nop			@ (mov r8, r8)
 801a360:	00000406 	.word	0x00000406
 801a364:	ffffbf8f 	.word	0xffffbf8f
 801a368:	ffff8080 	.word	0xffff8080

0801a36c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b084      	sub	sp, #16
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
 801a374:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801a376:	683b      	ldr	r3, [r7, #0]
 801a378:	785b      	ldrb	r3, [r3, #1]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d01d      	beq.n	801a3ba <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801a37e:	687a      	ldr	r2, [r7, #4]
 801a380:	683b      	ldr	r3, [r7, #0]
 801a382:	781b      	ldrb	r3, [r3, #0]
 801a384:	009b      	lsls	r3, r3, #2
 801a386:	18d3      	adds	r3, r2, r3
 801a388:	881b      	ldrh	r3, [r3, #0]
 801a38a:	b29a      	uxth	r2, r3
 801a38c:	200c      	movs	r0, #12
 801a38e:	183b      	adds	r3, r7, r0
 801a390:	491b      	ldr	r1, [pc, #108]	@ (801a400 <USB_EPSetStall+0x94>)
 801a392:	400a      	ands	r2, r1
 801a394:	801a      	strh	r2, [r3, #0]
 801a396:	183b      	adds	r3, r7, r0
 801a398:	183a      	adds	r2, r7, r0
 801a39a:	8812      	ldrh	r2, [r2, #0]
 801a39c:	2110      	movs	r1, #16
 801a39e:	404a      	eors	r2, r1
 801a3a0:	801a      	strh	r2, [r3, #0]
 801a3a2:	687a      	ldr	r2, [r7, #4]
 801a3a4:	683b      	ldr	r3, [r7, #0]
 801a3a6:	781b      	ldrb	r3, [r3, #0]
 801a3a8:	009b      	lsls	r3, r3, #2
 801a3aa:	18d3      	adds	r3, r2, r3
 801a3ac:	183a      	adds	r2, r7, r0
 801a3ae:	8812      	ldrh	r2, [r2, #0]
 801a3b0:	4914      	ldr	r1, [pc, #80]	@ (801a404 <USB_EPSetStall+0x98>)
 801a3b2:	430a      	orrs	r2, r1
 801a3b4:	b292      	uxth	r2, r2
 801a3b6:	801a      	strh	r2, [r3, #0]
 801a3b8:	e01d      	b.n	801a3f6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801a3ba:	687a      	ldr	r2, [r7, #4]
 801a3bc:	683b      	ldr	r3, [r7, #0]
 801a3be:	781b      	ldrb	r3, [r3, #0]
 801a3c0:	009b      	lsls	r3, r3, #2
 801a3c2:	18d3      	adds	r3, r2, r3
 801a3c4:	881b      	ldrh	r3, [r3, #0]
 801a3c6:	b29a      	uxth	r2, r3
 801a3c8:	200e      	movs	r0, #14
 801a3ca:	183b      	adds	r3, r7, r0
 801a3cc:	490e      	ldr	r1, [pc, #56]	@ (801a408 <USB_EPSetStall+0x9c>)
 801a3ce:	400a      	ands	r2, r1
 801a3d0:	801a      	strh	r2, [r3, #0]
 801a3d2:	183b      	adds	r3, r7, r0
 801a3d4:	183a      	adds	r2, r7, r0
 801a3d6:	8812      	ldrh	r2, [r2, #0]
 801a3d8:	2180      	movs	r1, #128	@ 0x80
 801a3da:	0149      	lsls	r1, r1, #5
 801a3dc:	404a      	eors	r2, r1
 801a3de:	801a      	strh	r2, [r3, #0]
 801a3e0:	687a      	ldr	r2, [r7, #4]
 801a3e2:	683b      	ldr	r3, [r7, #0]
 801a3e4:	781b      	ldrb	r3, [r3, #0]
 801a3e6:	009b      	lsls	r3, r3, #2
 801a3e8:	18d3      	adds	r3, r2, r3
 801a3ea:	183a      	adds	r2, r7, r0
 801a3ec:	8812      	ldrh	r2, [r2, #0]
 801a3ee:	4905      	ldr	r1, [pc, #20]	@ (801a404 <USB_EPSetStall+0x98>)
 801a3f0:	430a      	orrs	r2, r1
 801a3f2:	b292      	uxth	r2, r2
 801a3f4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a3f6:	2300      	movs	r3, #0
}
 801a3f8:	0018      	movs	r0, r3
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	b004      	add	sp, #16
 801a3fe:	bd80      	pop	{r7, pc}
 801a400:	ffff8fbf 	.word	0xffff8fbf
 801a404:	ffff8080 	.word	0xffff8080
 801a408:	ffffbf8f 	.word	0xffffbf8f

0801a40c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b086      	sub	sp, #24
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
 801a414:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	7b1b      	ldrb	r3, [r3, #12]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d000      	beq.n	801a420 <USB_EPClearStall+0x14>
 801a41e:	e095      	b.n	801a54c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801a420:	683b      	ldr	r3, [r7, #0]
 801a422:	785b      	ldrb	r3, [r3, #1]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d046      	beq.n	801a4b6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a428:	687a      	ldr	r2, [r7, #4]
 801a42a:	683b      	ldr	r3, [r7, #0]
 801a42c:	781b      	ldrb	r3, [r3, #0]
 801a42e:	009b      	lsls	r3, r3, #2
 801a430:	18d2      	adds	r2, r2, r3
 801a432:	2110      	movs	r1, #16
 801a434:	187b      	adds	r3, r7, r1
 801a436:	8812      	ldrh	r2, [r2, #0]
 801a438:	801a      	strh	r2, [r3, #0]
 801a43a:	187b      	adds	r3, r7, r1
 801a43c:	881b      	ldrh	r3, [r3, #0]
 801a43e:	2240      	movs	r2, #64	@ 0x40
 801a440:	4013      	ands	r3, r2
 801a442:	d016      	beq.n	801a472 <USB_EPClearStall+0x66>
 801a444:	687a      	ldr	r2, [r7, #4]
 801a446:	683b      	ldr	r3, [r7, #0]
 801a448:	781b      	ldrb	r3, [r3, #0]
 801a44a:	009b      	lsls	r3, r3, #2
 801a44c:	18d3      	adds	r3, r2, r3
 801a44e:	881b      	ldrh	r3, [r3, #0]
 801a450:	b29a      	uxth	r2, r3
 801a452:	200e      	movs	r0, #14
 801a454:	183b      	adds	r3, r7, r0
 801a456:	4940      	ldr	r1, [pc, #256]	@ (801a558 <USB_EPClearStall+0x14c>)
 801a458:	400a      	ands	r2, r1
 801a45a:	801a      	strh	r2, [r3, #0]
 801a45c:	687a      	ldr	r2, [r7, #4]
 801a45e:	683b      	ldr	r3, [r7, #0]
 801a460:	781b      	ldrb	r3, [r3, #0]
 801a462:	009b      	lsls	r3, r3, #2
 801a464:	18d3      	adds	r3, r2, r3
 801a466:	183a      	adds	r2, r7, r0
 801a468:	8812      	ldrh	r2, [r2, #0]
 801a46a:	493c      	ldr	r1, [pc, #240]	@ (801a55c <USB_EPClearStall+0x150>)
 801a46c:	430a      	orrs	r2, r1
 801a46e:	b292      	uxth	r2, r2
 801a470:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a472:	683b      	ldr	r3, [r7, #0]
 801a474:	78db      	ldrb	r3, [r3, #3]
 801a476:	2b01      	cmp	r3, #1
 801a478:	d068      	beq.n	801a54c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a47a:	687a      	ldr	r2, [r7, #4]
 801a47c:	683b      	ldr	r3, [r7, #0]
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	009b      	lsls	r3, r3, #2
 801a482:	18d3      	adds	r3, r2, r3
 801a484:	881b      	ldrh	r3, [r3, #0]
 801a486:	b29a      	uxth	r2, r3
 801a488:	200c      	movs	r0, #12
 801a48a:	183b      	adds	r3, r7, r0
 801a48c:	4934      	ldr	r1, [pc, #208]	@ (801a560 <USB_EPClearStall+0x154>)
 801a48e:	400a      	ands	r2, r1
 801a490:	801a      	strh	r2, [r3, #0]
 801a492:	183b      	adds	r3, r7, r0
 801a494:	183a      	adds	r2, r7, r0
 801a496:	8812      	ldrh	r2, [r2, #0]
 801a498:	2120      	movs	r1, #32
 801a49a:	404a      	eors	r2, r1
 801a49c:	801a      	strh	r2, [r3, #0]
 801a49e:	687a      	ldr	r2, [r7, #4]
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	18d3      	adds	r3, r2, r3
 801a4a8:	183a      	adds	r2, r7, r0
 801a4aa:	8812      	ldrh	r2, [r2, #0]
 801a4ac:	492d      	ldr	r1, [pc, #180]	@ (801a564 <USB_EPClearStall+0x158>)
 801a4ae:	430a      	orrs	r2, r1
 801a4b0:	b292      	uxth	r2, r2
 801a4b2:	801a      	strh	r2, [r3, #0]
 801a4b4:	e04a      	b.n	801a54c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a4b6:	687a      	ldr	r2, [r7, #4]
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	781b      	ldrb	r3, [r3, #0]
 801a4bc:	009b      	lsls	r3, r3, #2
 801a4be:	18d2      	adds	r2, r2, r3
 801a4c0:	2116      	movs	r1, #22
 801a4c2:	187b      	adds	r3, r7, r1
 801a4c4:	8812      	ldrh	r2, [r2, #0]
 801a4c6:	801a      	strh	r2, [r3, #0]
 801a4c8:	187b      	adds	r3, r7, r1
 801a4ca:	881a      	ldrh	r2, [r3, #0]
 801a4cc:	2380      	movs	r3, #128	@ 0x80
 801a4ce:	01db      	lsls	r3, r3, #7
 801a4d0:	4013      	ands	r3, r2
 801a4d2:	d016      	beq.n	801a502 <USB_EPClearStall+0xf6>
 801a4d4:	687a      	ldr	r2, [r7, #4]
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	781b      	ldrb	r3, [r3, #0]
 801a4da:	009b      	lsls	r3, r3, #2
 801a4dc:	18d3      	adds	r3, r2, r3
 801a4de:	881b      	ldrh	r3, [r3, #0]
 801a4e0:	b29a      	uxth	r2, r3
 801a4e2:	2014      	movs	r0, #20
 801a4e4:	183b      	adds	r3, r7, r0
 801a4e6:	491c      	ldr	r1, [pc, #112]	@ (801a558 <USB_EPClearStall+0x14c>)
 801a4e8:	400a      	ands	r2, r1
 801a4ea:	801a      	strh	r2, [r3, #0]
 801a4ec:	687a      	ldr	r2, [r7, #4]
 801a4ee:	683b      	ldr	r3, [r7, #0]
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	009b      	lsls	r3, r3, #2
 801a4f4:	18d3      	adds	r3, r2, r3
 801a4f6:	183a      	adds	r2, r7, r0
 801a4f8:	8812      	ldrh	r2, [r2, #0]
 801a4fa:	491b      	ldr	r1, [pc, #108]	@ (801a568 <USB_EPClearStall+0x15c>)
 801a4fc:	430a      	orrs	r2, r1
 801a4fe:	b292      	uxth	r2, r2
 801a500:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a502:	687a      	ldr	r2, [r7, #4]
 801a504:	683b      	ldr	r3, [r7, #0]
 801a506:	781b      	ldrb	r3, [r3, #0]
 801a508:	009b      	lsls	r3, r3, #2
 801a50a:	18d3      	adds	r3, r2, r3
 801a50c:	881b      	ldrh	r3, [r3, #0]
 801a50e:	b29a      	uxth	r2, r3
 801a510:	2012      	movs	r0, #18
 801a512:	183b      	adds	r3, r7, r0
 801a514:	4915      	ldr	r1, [pc, #84]	@ (801a56c <USB_EPClearStall+0x160>)
 801a516:	400a      	ands	r2, r1
 801a518:	801a      	strh	r2, [r3, #0]
 801a51a:	183b      	adds	r3, r7, r0
 801a51c:	183a      	adds	r2, r7, r0
 801a51e:	8812      	ldrh	r2, [r2, #0]
 801a520:	2180      	movs	r1, #128	@ 0x80
 801a522:	0149      	lsls	r1, r1, #5
 801a524:	404a      	eors	r2, r1
 801a526:	801a      	strh	r2, [r3, #0]
 801a528:	183b      	adds	r3, r7, r0
 801a52a:	183a      	adds	r2, r7, r0
 801a52c:	8812      	ldrh	r2, [r2, #0]
 801a52e:	2180      	movs	r1, #128	@ 0x80
 801a530:	0189      	lsls	r1, r1, #6
 801a532:	404a      	eors	r2, r1
 801a534:	801a      	strh	r2, [r3, #0]
 801a536:	687a      	ldr	r2, [r7, #4]
 801a538:	683b      	ldr	r3, [r7, #0]
 801a53a:	781b      	ldrb	r3, [r3, #0]
 801a53c:	009b      	lsls	r3, r3, #2
 801a53e:	18d3      	adds	r3, r2, r3
 801a540:	183a      	adds	r2, r7, r0
 801a542:	8812      	ldrh	r2, [r2, #0]
 801a544:	4907      	ldr	r1, [pc, #28]	@ (801a564 <USB_EPClearStall+0x158>)
 801a546:	430a      	orrs	r2, r1
 801a548:	b292      	uxth	r2, r2
 801a54a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801a54c:	2300      	movs	r3, #0
}
 801a54e:	0018      	movs	r0, r3
 801a550:	46bd      	mov	sp, r7
 801a552:	b006      	add	sp, #24
 801a554:	bd80      	pop	{r7, pc}
 801a556:	46c0      	nop			@ (mov r8, r8)
 801a558:	ffff8f8f 	.word	0xffff8f8f
 801a55c:	ffff80c0 	.word	0xffff80c0
 801a560:	ffff8fbf 	.word	0xffff8fbf
 801a564:	ffff8080 	.word	0xffff8080
 801a568:	ffffc080 	.word	0xffffc080
 801a56c:	ffffbf8f 	.word	0xffffbf8f

0801a570 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801a570:	b580      	push	{r7, lr}
 801a572:	b082      	sub	sp, #8
 801a574:	af00      	add	r7, sp, #0
 801a576:	6078      	str	r0, [r7, #4]
 801a578:	000a      	movs	r2, r1
 801a57a:	1cfb      	adds	r3, r7, #3
 801a57c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801a57e:	1cfb      	adds	r3, r7, #3
 801a580:	781b      	ldrb	r3, [r3, #0]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d103      	bne.n	801a58e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	224c      	movs	r2, #76	@ 0x4c
 801a58a:	2180      	movs	r1, #128	@ 0x80
 801a58c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801a58e:	2300      	movs	r3, #0
}
 801a590:	0018      	movs	r0, r3
 801a592:	46bd      	mov	sp, r7
 801a594:	b002      	add	sp, #8
 801a596:	bd80      	pop	{r7, pc}

0801a598 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b082      	sub	sp, #8
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	2258      	movs	r2, #88	@ 0x58
 801a5a4:	5a9b      	ldrh	r3, [r3, r2]
 801a5a6:	b29b      	uxth	r3, r3
 801a5a8:	4a05      	ldr	r2, [pc, #20]	@ (801a5c0 <USB_DevConnect+0x28>)
 801a5aa:	4313      	orrs	r3, r2
 801a5ac:	b299      	uxth	r1, r3
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2258      	movs	r2, #88	@ 0x58
 801a5b2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a5b4:	2300      	movs	r3, #0
}
 801a5b6:	0018      	movs	r0, r3
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	b002      	add	sp, #8
 801a5bc:	bd80      	pop	{r7, pc}
 801a5be:	46c0      	nop			@ (mov r8, r8)
 801a5c0:	ffff8000 	.word	0xffff8000

0801a5c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b084      	sub	sp, #16
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	2244      	movs	r2, #68	@ 0x44
 801a5d0:	5a9b      	ldrh	r3, [r3, r2]
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801a5d6:	68fb      	ldr	r3, [r7, #12]
}
 801a5d8:	0018      	movs	r0, r3
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	b004      	add	sp, #16
 801a5de:	bd80      	pop	{r7, pc}

0801a5e0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	b08a      	sub	sp, #40	@ 0x28
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	60f8      	str	r0, [r7, #12]
 801a5e8:	60b9      	str	r1, [r7, #8]
 801a5ea:	0019      	movs	r1, r3
 801a5ec:	1dbb      	adds	r3, r7, #6
 801a5ee:	801a      	strh	r2, [r3, #0]
 801a5f0:	1d3b      	adds	r3, r7, #4
 801a5f2:	1c0a      	adds	r2, r1, #0
 801a5f4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801a5f6:	1d3b      	adds	r3, r7, #4
 801a5f8:	881b      	ldrh	r3, [r3, #0]
 801a5fa:	3301      	adds	r3, #1
 801a5fc:	085b      	lsrs	r3, r3, #1
 801a5fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a608:	1dbb      	adds	r3, r7, #6
 801a60a:	881a      	ldrh	r2, [r3, #0]
 801a60c:	697b      	ldr	r3, [r7, #20]
 801a60e:	18d3      	adds	r3, r2, r3
 801a610:	2280      	movs	r2, #128	@ 0x80
 801a612:	00d2      	lsls	r2, r2, #3
 801a614:	4694      	mov	ip, r2
 801a616:	4463      	add	r3, ip
 801a618:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a61a:	69bb      	ldr	r3, [r7, #24]
 801a61c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a61e:	e020      	b.n	801a662 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801a620:	69fb      	ldr	r3, [r7, #28]
 801a622:	781a      	ldrb	r2, [r3, #0]
 801a624:	2112      	movs	r1, #18
 801a626:	187b      	adds	r3, r7, r1
 801a628:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801a62a:	69fb      	ldr	r3, [r7, #28]
 801a62c:	3301      	adds	r3, #1
 801a62e:	781b      	ldrb	r3, [r3, #0]
 801a630:	021b      	lsls	r3, r3, #8
 801a632:	b21a      	sxth	r2, r3
 801a634:	187b      	adds	r3, r7, r1
 801a636:	2000      	movs	r0, #0
 801a638:	5e1b      	ldrsh	r3, [r3, r0]
 801a63a:	4313      	orrs	r3, r2
 801a63c:	b21a      	sxth	r2, r3
 801a63e:	187b      	adds	r3, r7, r1
 801a640:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801a642:	6a3b      	ldr	r3, [r7, #32]
 801a644:	187a      	adds	r2, r7, r1
 801a646:	8812      	ldrh	r2, [r2, #0]
 801a648:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801a64a:	6a3b      	ldr	r3, [r7, #32]
 801a64c:	3302      	adds	r3, #2
 801a64e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801a650:	69fb      	ldr	r3, [r7, #28]
 801a652:	3301      	adds	r3, #1
 801a654:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801a656:	69fb      	ldr	r3, [r7, #28]
 801a658:	3301      	adds	r3, #1
 801a65a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a65e:	3b01      	subs	r3, #1
 801a660:	627b      	str	r3, [r7, #36]	@ 0x24
 801a662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a664:	2b00      	cmp	r3, #0
 801a666:	d1db      	bne.n	801a620 <USB_WritePMA+0x40>
  }
}
 801a668:	46c0      	nop			@ (mov r8, r8)
 801a66a:	46c0      	nop			@ (mov r8, r8)
 801a66c:	46bd      	mov	sp, r7
 801a66e:	b00a      	add	sp, #40	@ 0x28
 801a670:	bd80      	pop	{r7, pc}

0801a672 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a672:	b580      	push	{r7, lr}
 801a674:	b08a      	sub	sp, #40	@ 0x28
 801a676:	af00      	add	r7, sp, #0
 801a678:	60f8      	str	r0, [r7, #12]
 801a67a:	60b9      	str	r1, [r7, #8]
 801a67c:	0019      	movs	r1, r3
 801a67e:	1dbb      	adds	r3, r7, #6
 801a680:	801a      	strh	r2, [r3, #0]
 801a682:	1d3b      	adds	r3, r7, #4
 801a684:	1c0a      	adds	r2, r1, #0
 801a686:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801a688:	1d3b      	adds	r3, r7, #4
 801a68a:	881b      	ldrh	r3, [r3, #0]
 801a68c:	085b      	lsrs	r3, r3, #1
 801a68e:	b29b      	uxth	r3, r3
 801a690:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a696:	68bb      	ldr	r3, [r7, #8]
 801a698:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a69a:	1dbb      	adds	r3, r7, #6
 801a69c:	881a      	ldrh	r2, [r3, #0]
 801a69e:	697b      	ldr	r3, [r7, #20]
 801a6a0:	18d3      	adds	r3, r2, r3
 801a6a2:	2280      	movs	r2, #128	@ 0x80
 801a6a4:	00d2      	lsls	r2, r2, #3
 801a6a6:	4694      	mov	ip, r2
 801a6a8:	4463      	add	r3, ip
 801a6aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a6ac:	69bb      	ldr	r3, [r7, #24]
 801a6ae:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6b0:	e018      	b.n	801a6e4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801a6b2:	6a3b      	ldr	r3, [r7, #32]
 801a6b4:	881b      	ldrh	r3, [r3, #0]
 801a6b6:	b29b      	uxth	r3, r3
 801a6b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801a6ba:	6a3b      	ldr	r3, [r7, #32]
 801a6bc:	3302      	adds	r3, #2
 801a6be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a6c0:	693b      	ldr	r3, [r7, #16]
 801a6c2:	b2da      	uxtb	r2, r3
 801a6c4:	69fb      	ldr	r3, [r7, #28]
 801a6c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a6c8:	69fb      	ldr	r3, [r7, #28]
 801a6ca:	3301      	adds	r3, #1
 801a6cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801a6ce:	693b      	ldr	r3, [r7, #16]
 801a6d0:	0a1b      	lsrs	r3, r3, #8
 801a6d2:	b2da      	uxtb	r2, r3
 801a6d4:	69fb      	ldr	r3, [r7, #28]
 801a6d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a6d8:	69fb      	ldr	r3, [r7, #28]
 801a6da:	3301      	adds	r3, #1
 801a6dc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6e0:	3b01      	subs	r3, #1
 801a6e2:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d1e3      	bne.n	801a6b2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801a6ea:	1d3b      	adds	r3, r7, #4
 801a6ec:	881b      	ldrh	r3, [r3, #0]
 801a6ee:	2201      	movs	r2, #1
 801a6f0:	4013      	ands	r3, r2
 801a6f2:	b29b      	uxth	r3, r3
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d007      	beq.n	801a708 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801a6f8:	6a3b      	ldr	r3, [r7, #32]
 801a6fa:	881b      	ldrh	r3, [r3, #0]
 801a6fc:	b29b      	uxth	r3, r3
 801a6fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a700:	693b      	ldr	r3, [r7, #16]
 801a702:	b2da      	uxtb	r2, r3
 801a704:	69fb      	ldr	r3, [r7, #28]
 801a706:	701a      	strb	r2, [r3, #0]
  }
}
 801a708:	46c0      	nop			@ (mov r8, r8)
 801a70a:	46bd      	mov	sp, r7
 801a70c:	b00a      	add	sp, #40	@ 0x28
 801a70e:	bd80      	pop	{r7, pc}

0801a710 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b084      	sub	sp, #16
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
 801a718:	000a      	movs	r2, r1
 801a71a:	1cfb      	adds	r3, r7, #3
 801a71c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a71e:	230f      	movs	r3, #15
 801a720:	18fb      	adds	r3, r7, r3
 801a722:	2200      	movs	r2, #0
 801a724:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	7c1b      	ldrb	r3, [r3, #16]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d116      	bne.n	801a75c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a72e:	2380      	movs	r3, #128	@ 0x80
 801a730:	009b      	lsls	r3, r3, #2
 801a732:	6878      	ldr	r0, [r7, #4]
 801a734:	2202      	movs	r2, #2
 801a736:	2181      	movs	r1, #129	@ 0x81
 801a738:	f002 f8eb 	bl	801c912 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	2201      	movs	r2, #1
 801a740:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a742:	2380      	movs	r3, #128	@ 0x80
 801a744:	009b      	lsls	r3, r3, #2
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	2202      	movs	r2, #2
 801a74a:	2101      	movs	r1, #1
 801a74c:	f002 f8e1 	bl	801c912 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a750:	687a      	ldr	r2, [r7, #4]
 801a752:	23b6      	movs	r3, #182	@ 0xb6
 801a754:	005b      	lsls	r3, r3, #1
 801a756:	2101      	movs	r1, #1
 801a758:	50d1      	str	r1, [r2, r3]
 801a75a:	e013      	b.n	801a784 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	2340      	movs	r3, #64	@ 0x40
 801a760:	2202      	movs	r2, #2
 801a762:	2181      	movs	r1, #129	@ 0x81
 801a764:	f002 f8d5 	bl	801c912 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	2201      	movs	r2, #1
 801a76c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a76e:	6878      	ldr	r0, [r7, #4]
 801a770:	2340      	movs	r3, #64	@ 0x40
 801a772:	2202      	movs	r2, #2
 801a774:	2101      	movs	r1, #1
 801a776:	f002 f8cc 	bl	801c912 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a77a:	687a      	ldr	r2, [r7, #4]
 801a77c:	23b6      	movs	r3, #182	@ 0xb6
 801a77e:	005b      	lsls	r3, r3, #1
 801a780:	2101      	movs	r1, #1
 801a782:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a784:	6878      	ldr	r0, [r7, #4]
 801a786:	2308      	movs	r3, #8
 801a788:	2203      	movs	r2, #3
 801a78a:	2182      	movs	r1, #130	@ 0x82
 801a78c:	f002 f8c1 	bl	801c912 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	2201      	movs	r2, #1
 801a794:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a796:	2387      	movs	r3, #135	@ 0x87
 801a798:	009b      	lsls	r3, r3, #2
 801a79a:	0018      	movs	r0, r3
 801a79c:	f002 fa52 	bl	801cc44 <USBD_static_malloc>
 801a7a0:	0001      	movs	r1, r0
 801a7a2:	687a      	ldr	r2, [r7, #4]
 801a7a4:	23ae      	movs	r3, #174	@ 0xae
 801a7a6:	009b      	lsls	r3, r3, #2
 801a7a8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801a7aa:	687a      	ldr	r2, [r7, #4]
 801a7ac:	23ae      	movs	r3, #174	@ 0xae
 801a7ae:	009b      	lsls	r3, r3, #2
 801a7b0:	58d3      	ldr	r3, [r2, r3]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d104      	bne.n	801a7c0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801a7b6:	230f      	movs	r3, #15
 801a7b8:	18fb      	adds	r3, r7, r3
 801a7ba:	2201      	movs	r2, #1
 801a7bc:	701a      	strb	r2, [r3, #0]
 801a7be:	e02c      	b.n	801a81a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a7c0:	687a      	ldr	r2, [r7, #4]
 801a7c2:	23ae      	movs	r3, #174	@ 0xae
 801a7c4:	009b      	lsls	r3, r3, #2
 801a7c6:	58d3      	ldr	r3, [r2, r3]
 801a7c8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801a7ca:	687a      	ldr	r2, [r7, #4]
 801a7cc:	23af      	movs	r3, #175	@ 0xaf
 801a7ce:	009b      	lsls	r3, r3, #2
 801a7d0:	58d3      	ldr	r3, [r2, r3]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801a7d6:	68ba      	ldr	r2, [r7, #8]
 801a7d8:	2385      	movs	r3, #133	@ 0x85
 801a7da:	009b      	lsls	r3, r3, #2
 801a7dc:	2100      	movs	r1, #0
 801a7de:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801a7e0:	68ba      	ldr	r2, [r7, #8]
 801a7e2:	2386      	movs	r3, #134	@ 0x86
 801a7e4:	009b      	lsls	r3, r3, #2
 801a7e6:	2100      	movs	r1, #0
 801a7e8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	7c1b      	ldrb	r3, [r3, #16]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d10a      	bne.n	801a808 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a7f2:	68ba      	ldr	r2, [r7, #8]
 801a7f4:	2381      	movs	r3, #129	@ 0x81
 801a7f6:	009b      	lsls	r3, r3, #2
 801a7f8:	58d2      	ldr	r2, [r2, r3]
 801a7fa:	2380      	movs	r3, #128	@ 0x80
 801a7fc:	009b      	lsls	r3, r3, #2
 801a7fe:	6878      	ldr	r0, [r7, #4]
 801a800:	2101      	movs	r1, #1
 801a802:	f002 f9d1 	bl	801cba8 <USBD_LL_PrepareReceive>
 801a806:	e008      	b.n	801a81a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a808:	68ba      	ldr	r2, [r7, #8]
 801a80a:	2381      	movs	r3, #129	@ 0x81
 801a80c:	009b      	lsls	r3, r3, #2
 801a80e:	58d2      	ldr	r2, [r2, r3]
 801a810:	6878      	ldr	r0, [r7, #4]
 801a812:	2340      	movs	r3, #64	@ 0x40
 801a814:	2101      	movs	r1, #1
 801a816:	f002 f9c7 	bl	801cba8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801a81a:	230f      	movs	r3, #15
 801a81c:	18fb      	adds	r3, r7, r3
 801a81e:	781b      	ldrb	r3, [r3, #0]
}
 801a820:	0018      	movs	r0, r3
 801a822:	46bd      	mov	sp, r7
 801a824:	b004      	add	sp, #16
 801a826:	bd80      	pop	{r7, pc}

0801a828 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b084      	sub	sp, #16
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
 801a830:	000a      	movs	r2, r1
 801a832:	1cfb      	adds	r3, r7, #3
 801a834:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a836:	230f      	movs	r3, #15
 801a838:	18fb      	adds	r3, r7, r3
 801a83a:	2200      	movs	r2, #0
 801a83c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	2181      	movs	r1, #129	@ 0x81
 801a842:	0018      	movs	r0, r3
 801a844:	f002 f89c 	bl	801c980 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	2200      	movs	r2, #0
 801a84c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	2101      	movs	r1, #1
 801a852:	0018      	movs	r0, r3
 801a854:	f002 f894 	bl	801c980 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a858:	687a      	ldr	r2, [r7, #4]
 801a85a:	23b6      	movs	r3, #182	@ 0xb6
 801a85c:	005b      	lsls	r3, r3, #1
 801a85e:	2100      	movs	r1, #0
 801a860:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	2182      	movs	r1, #130	@ 0x82
 801a866:	0018      	movs	r0, r3
 801a868:	f002 f88a 	bl	801c980 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	2200      	movs	r2, #0
 801a870:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a872:	687a      	ldr	r2, [r7, #4]
 801a874:	23ae      	movs	r3, #174	@ 0xae
 801a876:	009b      	lsls	r3, r3, #2
 801a878:	58d3      	ldr	r3, [r2, r3]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d011      	beq.n	801a8a2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a87e:	687a      	ldr	r2, [r7, #4]
 801a880:	23af      	movs	r3, #175	@ 0xaf
 801a882:	009b      	lsls	r3, r3, #2
 801a884:	58d3      	ldr	r3, [r2, r3]
 801a886:	685b      	ldr	r3, [r3, #4]
 801a888:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801a88a:	687a      	ldr	r2, [r7, #4]
 801a88c:	23ae      	movs	r3, #174	@ 0xae
 801a88e:	009b      	lsls	r3, r3, #2
 801a890:	58d3      	ldr	r3, [r2, r3]
 801a892:	0018      	movs	r0, r3
 801a894:	f002 f9e2 	bl	801cc5c <USBD_static_free>
    pdev->pClassData = NULL;
 801a898:	687a      	ldr	r2, [r7, #4]
 801a89a:	23ae      	movs	r3, #174	@ 0xae
 801a89c:	009b      	lsls	r3, r3, #2
 801a89e:	2100      	movs	r1, #0
 801a8a0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801a8a2:	230f      	movs	r3, #15
 801a8a4:	18fb      	adds	r3, r7, r3
 801a8a6:	781b      	ldrb	r3, [r3, #0]
}
 801a8a8:	0018      	movs	r0, r3
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	b004      	add	sp, #16
 801a8ae:	bd80      	pop	{r7, pc}

0801a8b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	b086      	sub	sp, #24
 801a8b4:	af00      	add	r7, sp, #0
 801a8b6:	6078      	str	r0, [r7, #4]
 801a8b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a8ba:	687a      	ldr	r2, [r7, #4]
 801a8bc:	23ae      	movs	r3, #174	@ 0xae
 801a8be:	009b      	lsls	r3, r3, #2
 801a8c0:	58d3      	ldr	r3, [r2, r3]
 801a8c2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801a8c4:	230f      	movs	r3, #15
 801a8c6:	18fb      	adds	r3, r7, r3
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801a8cc:	230c      	movs	r3, #12
 801a8ce:	18fb      	adds	r3, r7, r3
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801a8d4:	2317      	movs	r3, #23
 801a8d6:	18fb      	adds	r3, r7, r3
 801a8d8:	2200      	movs	r2, #0
 801a8da:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a8dc:	683b      	ldr	r3, [r7, #0]
 801a8de:	781b      	ldrb	r3, [r3, #0]
 801a8e0:	001a      	movs	r2, r3
 801a8e2:	2360      	movs	r3, #96	@ 0x60
 801a8e4:	4013      	ands	r3, r2
 801a8e6:	d03d      	beq.n	801a964 <USBD_CDC_Setup+0xb4>
 801a8e8:	2b20      	cmp	r3, #32
 801a8ea:	d000      	beq.n	801a8ee <USBD_CDC_Setup+0x3e>
 801a8ec:	e094      	b.n	801aa18 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	88db      	ldrh	r3, [r3, #6]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d02b      	beq.n	801a94e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801a8f6:	683b      	ldr	r3, [r7, #0]
 801a8f8:	781b      	ldrb	r3, [r3, #0]
 801a8fa:	b25b      	sxtb	r3, r3
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	da12      	bge.n	801a926 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a900:	687a      	ldr	r2, [r7, #4]
 801a902:	23af      	movs	r3, #175	@ 0xaf
 801a904:	009b      	lsls	r3, r3, #2
 801a906:	58d3      	ldr	r3, [r2, r3]
 801a908:	689b      	ldr	r3, [r3, #8]
 801a90a:	683a      	ldr	r2, [r7, #0]
 801a90c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801a90e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a910:	683a      	ldr	r2, [r7, #0]
 801a912:	88d2      	ldrh	r2, [r2, #6]
 801a914:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a916:	6939      	ldr	r1, [r7, #16]
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	88da      	ldrh	r2, [r3, #6]
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	0018      	movs	r0, r3
 801a920:	f001 fbaf 	bl	801c082 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801a924:	e083      	b.n	801aa2e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801a926:	683b      	ldr	r3, [r7, #0]
 801a928:	7859      	ldrb	r1, [r3, #1]
 801a92a:	693a      	ldr	r2, [r7, #16]
 801a92c:	2380      	movs	r3, #128	@ 0x80
 801a92e:	009b      	lsls	r3, r3, #2
 801a930:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a932:	683b      	ldr	r3, [r7, #0]
 801a934:	88db      	ldrh	r3, [r3, #6]
 801a936:	b2d9      	uxtb	r1, r3
 801a938:	693b      	ldr	r3, [r7, #16]
 801a93a:	4a40      	ldr	r2, [pc, #256]	@ (801aa3c <USBD_CDC_Setup+0x18c>)
 801a93c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a93e:	6939      	ldr	r1, [r7, #16]
 801a940:	683b      	ldr	r3, [r7, #0]
 801a942:	88da      	ldrh	r2, [r3, #6]
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	0018      	movs	r0, r3
 801a948:	f001 fbce 	bl	801c0e8 <USBD_CtlPrepareRx>
      break;
 801a94c:	e06f      	b.n	801aa2e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a94e:	687a      	ldr	r2, [r7, #4]
 801a950:	23af      	movs	r3, #175	@ 0xaf
 801a952:	009b      	lsls	r3, r3, #2
 801a954:	58d3      	ldr	r3, [r2, r3]
 801a956:	689b      	ldr	r3, [r3, #8]
 801a958:	683a      	ldr	r2, [r7, #0]
 801a95a:	7850      	ldrb	r0, [r2, #1]
 801a95c:	6839      	ldr	r1, [r7, #0]
 801a95e:	2200      	movs	r2, #0
 801a960:	4798      	blx	r3
      break;
 801a962:	e064      	b.n	801aa2e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a964:	683b      	ldr	r3, [r7, #0]
 801a966:	785b      	ldrb	r3, [r3, #1]
 801a968:	2b0b      	cmp	r3, #11
 801a96a:	d037      	beq.n	801a9dc <USBD_CDC_Setup+0x12c>
 801a96c:	dc47      	bgt.n	801a9fe <USBD_CDC_Setup+0x14e>
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d002      	beq.n	801a978 <USBD_CDC_Setup+0xc8>
 801a972:	2b0a      	cmp	r3, #10
 801a974:	d019      	beq.n	801a9aa <USBD_CDC_Setup+0xfa>
 801a976:	e042      	b.n	801a9fe <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a978:	687a      	ldr	r2, [r7, #4]
 801a97a:	23a7      	movs	r3, #167	@ 0xa7
 801a97c:	009b      	lsls	r3, r3, #2
 801a97e:	5cd3      	ldrb	r3, [r2, r3]
 801a980:	2b03      	cmp	r3, #3
 801a982:	d107      	bne.n	801a994 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801a984:	230c      	movs	r3, #12
 801a986:	18f9      	adds	r1, r7, r3
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	2202      	movs	r2, #2
 801a98c:	0018      	movs	r0, r3
 801a98e:	f001 fb78 	bl	801c082 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a992:	e040      	b.n	801aa16 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a994:	683a      	ldr	r2, [r7, #0]
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	0011      	movs	r1, r2
 801a99a:	0018      	movs	r0, r3
 801a99c:	f001 faf3 	bl	801bf86 <USBD_CtlError>
            ret = USBD_FAIL;
 801a9a0:	2317      	movs	r3, #23
 801a9a2:	18fb      	adds	r3, r7, r3
 801a9a4:	2202      	movs	r2, #2
 801a9a6:	701a      	strb	r2, [r3, #0]
          break;
 801a9a8:	e035      	b.n	801aa16 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a9aa:	687a      	ldr	r2, [r7, #4]
 801a9ac:	23a7      	movs	r3, #167	@ 0xa7
 801a9ae:	009b      	lsls	r3, r3, #2
 801a9b0:	5cd3      	ldrb	r3, [r2, r3]
 801a9b2:	2b03      	cmp	r3, #3
 801a9b4:	d107      	bne.n	801a9c6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801a9b6:	230f      	movs	r3, #15
 801a9b8:	18f9      	adds	r1, r7, r3
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	2201      	movs	r2, #1
 801a9be:	0018      	movs	r0, r3
 801a9c0:	f001 fb5f 	bl	801c082 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a9c4:	e027      	b.n	801aa16 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a9c6:	683a      	ldr	r2, [r7, #0]
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	0011      	movs	r1, r2
 801a9cc:	0018      	movs	r0, r3
 801a9ce:	f001 fada 	bl	801bf86 <USBD_CtlError>
            ret = USBD_FAIL;
 801a9d2:	2317      	movs	r3, #23
 801a9d4:	18fb      	adds	r3, r7, r3
 801a9d6:	2202      	movs	r2, #2
 801a9d8:	701a      	strb	r2, [r3, #0]
          break;
 801a9da:	e01c      	b.n	801aa16 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a9dc:	687a      	ldr	r2, [r7, #4]
 801a9de:	23a7      	movs	r3, #167	@ 0xa7
 801a9e0:	009b      	lsls	r3, r3, #2
 801a9e2:	5cd3      	ldrb	r3, [r2, r3]
 801a9e4:	2b03      	cmp	r3, #3
 801a9e6:	d015      	beq.n	801aa14 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801a9e8:	683a      	ldr	r2, [r7, #0]
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	0011      	movs	r1, r2
 801a9ee:	0018      	movs	r0, r3
 801a9f0:	f001 fac9 	bl	801bf86 <USBD_CtlError>
            ret = USBD_FAIL;
 801a9f4:	2317      	movs	r3, #23
 801a9f6:	18fb      	adds	r3, r7, r3
 801a9f8:	2202      	movs	r2, #2
 801a9fa:	701a      	strb	r2, [r3, #0]
          }
          break;
 801a9fc:	e00a      	b.n	801aa14 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801a9fe:	683a      	ldr	r2, [r7, #0]
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	0011      	movs	r1, r2
 801aa04:	0018      	movs	r0, r3
 801aa06:	f001 fabe 	bl	801bf86 <USBD_CtlError>
          ret = USBD_FAIL;
 801aa0a:	2317      	movs	r3, #23
 801aa0c:	18fb      	adds	r3, r7, r3
 801aa0e:	2202      	movs	r2, #2
 801aa10:	701a      	strb	r2, [r3, #0]
          break;
 801aa12:	e000      	b.n	801aa16 <USBD_CDC_Setup+0x166>
          break;
 801aa14:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801aa16:	e00a      	b.n	801aa2e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801aa18:	683a      	ldr	r2, [r7, #0]
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	0011      	movs	r1, r2
 801aa1e:	0018      	movs	r0, r3
 801aa20:	f001 fab1 	bl	801bf86 <USBD_CtlError>
      ret = USBD_FAIL;
 801aa24:	2317      	movs	r3, #23
 801aa26:	18fb      	adds	r3, r7, r3
 801aa28:	2202      	movs	r2, #2
 801aa2a:	701a      	strb	r2, [r3, #0]
      break;
 801aa2c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801aa2e:	2317      	movs	r3, #23
 801aa30:	18fb      	adds	r3, r7, r3
 801aa32:	781b      	ldrb	r3, [r3, #0]
}
 801aa34:	0018      	movs	r0, r3
 801aa36:	46bd      	mov	sp, r7
 801aa38:	b006      	add	sp, #24
 801aa3a:	bd80      	pop	{r7, pc}
 801aa3c:	00000201 	.word	0x00000201

0801aa40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b084      	sub	sp, #16
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	6078      	str	r0, [r7, #4]
 801aa48:	000a      	movs	r2, r1
 801aa4a:	1cfb      	adds	r3, r7, #3
 801aa4c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801aa4e:	687a      	ldr	r2, [r7, #4]
 801aa50:	23ae      	movs	r3, #174	@ 0xae
 801aa52:	009b      	lsls	r3, r3, #2
 801aa54:	58d3      	ldr	r3, [r2, r3]
 801aa56:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801aa58:	687a      	ldr	r2, [r7, #4]
 801aa5a:	23b0      	movs	r3, #176	@ 0xb0
 801aa5c:	009b      	lsls	r3, r3, #2
 801aa5e:	58d3      	ldr	r3, [r2, r3]
 801aa60:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801aa62:	687a      	ldr	r2, [r7, #4]
 801aa64:	23ae      	movs	r3, #174	@ 0xae
 801aa66:	009b      	lsls	r3, r3, #2
 801aa68:	58d3      	ldr	r3, [r2, r3]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d03e      	beq.n	801aaec <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801aa6e:	1cfb      	adds	r3, r7, #3
 801aa70:	781a      	ldrb	r2, [r3, #0]
 801aa72:	6879      	ldr	r1, [r7, #4]
 801aa74:	0013      	movs	r3, r2
 801aa76:	009b      	lsls	r3, r3, #2
 801aa78:	189b      	adds	r3, r3, r2
 801aa7a:	009b      	lsls	r3, r3, #2
 801aa7c:	18cb      	adds	r3, r1, r3
 801aa7e:	331c      	adds	r3, #28
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d02b      	beq.n	801aade <USBD_CDC_DataIn+0x9e>
 801aa86:	1cfb      	adds	r3, r7, #3
 801aa88:	781a      	ldrb	r2, [r3, #0]
 801aa8a:	6879      	ldr	r1, [r7, #4]
 801aa8c:	0013      	movs	r3, r2
 801aa8e:	009b      	lsls	r3, r3, #2
 801aa90:	189b      	adds	r3, r3, r2
 801aa92:	009b      	lsls	r3, r3, #2
 801aa94:	18cb      	adds	r3, r1, r3
 801aa96:	331c      	adds	r3, #28
 801aa98:	6818      	ldr	r0, [r3, #0]
 801aa9a:	1cfb      	adds	r3, r7, #3
 801aa9c:	781a      	ldrb	r2, [r3, #0]
 801aa9e:	68b9      	ldr	r1, [r7, #8]
 801aaa0:	0013      	movs	r3, r2
 801aaa2:	009b      	lsls	r3, r3, #2
 801aaa4:	189b      	adds	r3, r3, r2
 801aaa6:	00db      	lsls	r3, r3, #3
 801aaa8:	18cb      	adds	r3, r1, r3
 801aaaa:	3338      	adds	r3, #56	@ 0x38
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	0019      	movs	r1, r3
 801aab0:	f7e5 fbfe 	bl	80002b0 <__aeabi_uidivmod>
 801aab4:	1e0b      	subs	r3, r1, #0
 801aab6:	d112      	bne.n	801aade <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801aab8:	1cfb      	adds	r3, r7, #3
 801aaba:	781a      	ldrb	r2, [r3, #0]
 801aabc:	6879      	ldr	r1, [r7, #4]
 801aabe:	0013      	movs	r3, r2
 801aac0:	009b      	lsls	r3, r3, #2
 801aac2:	189b      	adds	r3, r3, r2
 801aac4:	009b      	lsls	r3, r3, #2
 801aac6:	18cb      	adds	r3, r1, r3
 801aac8:	331c      	adds	r3, #28
 801aaca:	2200      	movs	r2, #0
 801aacc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801aace:	1cfb      	adds	r3, r7, #3
 801aad0:	7819      	ldrb	r1, [r3, #0]
 801aad2:	6878      	ldr	r0, [r7, #4]
 801aad4:	2300      	movs	r3, #0
 801aad6:	2200      	movs	r2, #0
 801aad8:	f002 f82f 	bl	801cb3a <USBD_LL_Transmit>
 801aadc:	e004      	b.n	801aae8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801aade:	68fa      	ldr	r2, [r7, #12]
 801aae0:	2385      	movs	r3, #133	@ 0x85
 801aae2:	009b      	lsls	r3, r3, #2
 801aae4:	2100      	movs	r1, #0
 801aae6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801aae8:	2300      	movs	r3, #0
 801aaea:	e000      	b.n	801aaee <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801aaec:	2302      	movs	r3, #2
  }
}
 801aaee:	0018      	movs	r0, r3
 801aaf0:	46bd      	mov	sp, r7
 801aaf2:	b004      	add	sp, #16
 801aaf4:	bd80      	pop	{r7, pc}

0801aaf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801aaf6:	b580      	push	{r7, lr}
 801aaf8:	b084      	sub	sp, #16
 801aafa:	af00      	add	r7, sp, #0
 801aafc:	6078      	str	r0, [r7, #4]
 801aafe:	000a      	movs	r2, r1
 801ab00:	1cfb      	adds	r3, r7, #3
 801ab02:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ab04:	687a      	ldr	r2, [r7, #4]
 801ab06:	23ae      	movs	r3, #174	@ 0xae
 801ab08:	009b      	lsls	r3, r3, #2
 801ab0a:	58d3      	ldr	r3, [r2, r3]
 801ab0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801ab0e:	1cfb      	adds	r3, r7, #3
 801ab10:	781a      	ldrb	r2, [r3, #0]
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	0011      	movs	r1, r2
 801ab16:	0018      	movs	r0, r3
 801ab18:	f002 f87d 	bl	801cc16 <USBD_LL_GetRxDataSize>
 801ab1c:	0001      	movs	r1, r0
 801ab1e:	68fa      	ldr	r2, [r7, #12]
 801ab20:	2383      	movs	r3, #131	@ 0x83
 801ab22:	009b      	lsls	r3, r3, #2
 801ab24:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801ab26:	687a      	ldr	r2, [r7, #4]
 801ab28:	23ae      	movs	r3, #174	@ 0xae
 801ab2a:	009b      	lsls	r3, r3, #2
 801ab2c:	58d3      	ldr	r3, [r2, r3]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d011      	beq.n	801ab56 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801ab32:	687a      	ldr	r2, [r7, #4]
 801ab34:	23af      	movs	r3, #175	@ 0xaf
 801ab36:	009b      	lsls	r3, r3, #2
 801ab38:	58d3      	ldr	r3, [r2, r3]
 801ab3a:	68da      	ldr	r2, [r3, #12]
 801ab3c:	68f9      	ldr	r1, [r7, #12]
 801ab3e:	2381      	movs	r3, #129	@ 0x81
 801ab40:	009b      	lsls	r3, r3, #2
 801ab42:	58c8      	ldr	r0, [r1, r3]
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	2183      	movs	r1, #131	@ 0x83
 801ab48:	0089      	lsls	r1, r1, #2
 801ab4a:	468c      	mov	ip, r1
 801ab4c:	4463      	add	r3, ip
 801ab4e:	0019      	movs	r1, r3
 801ab50:	4790      	blx	r2

    return USBD_OK;
 801ab52:	2300      	movs	r3, #0
 801ab54:	e000      	b.n	801ab58 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801ab56:	2302      	movs	r3, #2
  }
}
 801ab58:	0018      	movs	r0, r3
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	b004      	add	sp, #16
 801ab5e:	bd80      	pop	{r7, pc}

0801ab60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801ab60:	b590      	push	{r4, r7, lr}
 801ab62:	b085      	sub	sp, #20
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ab68:	687a      	ldr	r2, [r7, #4]
 801ab6a:	23ae      	movs	r3, #174	@ 0xae
 801ab6c:	009b      	lsls	r3, r3, #2
 801ab6e:	58d3      	ldr	r3, [r2, r3]
 801ab70:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801ab72:	687a      	ldr	r2, [r7, #4]
 801ab74:	23af      	movs	r3, #175	@ 0xaf
 801ab76:	009b      	lsls	r3, r3, #2
 801ab78:	58d3      	ldr	r3, [r2, r3]
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d018      	beq.n	801abb0 <USBD_CDC_EP0_RxReady+0x50>
 801ab7e:	68fa      	ldr	r2, [r7, #12]
 801ab80:	2380      	movs	r3, #128	@ 0x80
 801ab82:	009b      	lsls	r3, r3, #2
 801ab84:	5cd3      	ldrb	r3, [r2, r3]
 801ab86:	2bff      	cmp	r3, #255	@ 0xff
 801ab88:	d012      	beq.n	801abb0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ab8a:	687a      	ldr	r2, [r7, #4]
 801ab8c:	23af      	movs	r3, #175	@ 0xaf
 801ab8e:	009b      	lsls	r3, r3, #2
 801ab90:	58d3      	ldr	r3, [r2, r3]
 801ab92:	689b      	ldr	r3, [r3, #8]
 801ab94:	68f9      	ldr	r1, [r7, #12]
 801ab96:	2280      	movs	r2, #128	@ 0x80
 801ab98:	0092      	lsls	r2, r2, #2
 801ab9a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801ab9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801ab9e:	68fa      	ldr	r2, [r7, #12]
 801aba0:	4c06      	ldr	r4, [pc, #24]	@ (801abbc <USBD_CDC_EP0_RxReady+0x5c>)
 801aba2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801aba4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801aba6:	68fa      	ldr	r2, [r7, #12]
 801aba8:	2380      	movs	r3, #128	@ 0x80
 801abaa:	009b      	lsls	r3, r3, #2
 801abac:	21ff      	movs	r1, #255	@ 0xff
 801abae:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801abb0:	2300      	movs	r3, #0
}
 801abb2:	0018      	movs	r0, r3
 801abb4:	46bd      	mov	sp, r7
 801abb6:	b005      	add	sp, #20
 801abb8:	bd90      	pop	{r4, r7, pc}
 801abba:	46c0      	nop			@ (mov r8, r8)
 801abbc:	00000201 	.word	0x00000201

0801abc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b082      	sub	sp, #8
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2243      	movs	r2, #67	@ 0x43
 801abcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801abce:	4b02      	ldr	r3, [pc, #8]	@ (801abd8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801abd0:	0018      	movs	r0, r3
 801abd2:	46bd      	mov	sp, r7
 801abd4:	b002      	add	sp, #8
 801abd6:	bd80      	pop	{r7, pc}
 801abd8:	20000168 	.word	0x20000168

0801abdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b082      	sub	sp, #8
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	2243      	movs	r2, #67	@ 0x43
 801abe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801abea:	4b02      	ldr	r3, [pc, #8]	@ (801abf4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801abec:	0018      	movs	r0, r3
 801abee:	46bd      	mov	sp, r7
 801abf0:	b002      	add	sp, #8
 801abf2:	bd80      	pop	{r7, pc}
 801abf4:	20000124 	.word	0x20000124

0801abf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801abf8:	b580      	push	{r7, lr}
 801abfa:	b082      	sub	sp, #8
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2243      	movs	r2, #67	@ 0x43
 801ac04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801ac06:	4b02      	ldr	r3, [pc, #8]	@ (801ac10 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801ac08:	0018      	movs	r0, r3
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	b002      	add	sp, #8
 801ac0e:	bd80      	pop	{r7, pc}
 801ac10:	200001ac 	.word	0x200001ac

0801ac14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b082      	sub	sp, #8
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	220a      	movs	r2, #10
 801ac20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801ac22:	4b02      	ldr	r3, [pc, #8]	@ (801ac2c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801ac24:	0018      	movs	r0, r3
 801ac26:	46bd      	mov	sp, r7
 801ac28:	b002      	add	sp, #8
 801ac2a:	bd80      	pop	{r7, pc}
 801ac2c:	200000e0 	.word	0x200000e0

0801ac30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	b084      	sub	sp, #16
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	6078      	str	r0, [r7, #4]
 801ac38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801ac3a:	200f      	movs	r0, #15
 801ac3c:	183b      	adds	r3, r7, r0
 801ac3e:	2202      	movs	r2, #2
 801ac40:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801ac42:	683b      	ldr	r3, [r7, #0]
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d007      	beq.n	801ac58 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801ac48:	687a      	ldr	r2, [r7, #4]
 801ac4a:	23af      	movs	r3, #175	@ 0xaf
 801ac4c:	009b      	lsls	r3, r3, #2
 801ac4e:	6839      	ldr	r1, [r7, #0]
 801ac50:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801ac52:	183b      	adds	r3, r7, r0
 801ac54:	2200      	movs	r2, #0
 801ac56:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801ac58:	230f      	movs	r3, #15
 801ac5a:	18fb      	adds	r3, r7, r3
 801ac5c:	781b      	ldrb	r3, [r3, #0]
}
 801ac5e:	0018      	movs	r0, r3
 801ac60:	46bd      	mov	sp, r7
 801ac62:	b004      	add	sp, #16
 801ac64:	bd80      	pop	{r7, pc}

0801ac66 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801ac66:	b580      	push	{r7, lr}
 801ac68:	b086      	sub	sp, #24
 801ac6a:	af00      	add	r7, sp, #0
 801ac6c:	60f8      	str	r0, [r7, #12]
 801ac6e:	60b9      	str	r1, [r7, #8]
 801ac70:	1dbb      	adds	r3, r7, #6
 801ac72:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ac74:	68fa      	ldr	r2, [r7, #12]
 801ac76:	23ae      	movs	r3, #174	@ 0xae
 801ac78:	009b      	lsls	r3, r3, #2
 801ac7a:	58d3      	ldr	r3, [r2, r3]
 801ac7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801ac7e:	697a      	ldr	r2, [r7, #20]
 801ac80:	2382      	movs	r3, #130	@ 0x82
 801ac82:	009b      	lsls	r3, r3, #2
 801ac84:	68b9      	ldr	r1, [r7, #8]
 801ac86:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801ac88:	1dbb      	adds	r3, r7, #6
 801ac8a:	8819      	ldrh	r1, [r3, #0]
 801ac8c:	697a      	ldr	r2, [r7, #20]
 801ac8e:	2384      	movs	r3, #132	@ 0x84
 801ac90:	009b      	lsls	r3, r3, #2
 801ac92:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801ac94:	2300      	movs	r3, #0
}
 801ac96:	0018      	movs	r0, r3
 801ac98:	46bd      	mov	sp, r7
 801ac9a:	b006      	add	sp, #24
 801ac9c:	bd80      	pop	{r7, pc}

0801ac9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801ac9e:	b580      	push	{r7, lr}
 801aca0:	b084      	sub	sp, #16
 801aca2:	af00      	add	r7, sp, #0
 801aca4:	6078      	str	r0, [r7, #4]
 801aca6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801aca8:	687a      	ldr	r2, [r7, #4]
 801acaa:	23ae      	movs	r3, #174	@ 0xae
 801acac:	009b      	lsls	r3, r3, #2
 801acae:	58d3      	ldr	r3, [r2, r3]
 801acb0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801acb2:	68fa      	ldr	r2, [r7, #12]
 801acb4:	2381      	movs	r3, #129	@ 0x81
 801acb6:	009b      	lsls	r3, r3, #2
 801acb8:	6839      	ldr	r1, [r7, #0]
 801acba:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801acbc:	2300      	movs	r3, #0
}
 801acbe:	0018      	movs	r0, r3
 801acc0:	46bd      	mov	sp, r7
 801acc2:	b004      	add	sp, #16
 801acc4:	bd80      	pop	{r7, pc}

0801acc6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801acc6:	b580      	push	{r7, lr}
 801acc8:	b084      	sub	sp, #16
 801acca:	af00      	add	r7, sp, #0
 801accc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801acce:	687a      	ldr	r2, [r7, #4]
 801acd0:	23ae      	movs	r3, #174	@ 0xae
 801acd2:	009b      	lsls	r3, r3, #2
 801acd4:	58d3      	ldr	r3, [r2, r3]
 801acd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801acd8:	687a      	ldr	r2, [r7, #4]
 801acda:	23ae      	movs	r3, #174	@ 0xae
 801acdc:	009b      	lsls	r3, r3, #2
 801acde:	58d3      	ldr	r3, [r2, r3]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d022      	beq.n	801ad2a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801ace4:	68fa      	ldr	r2, [r7, #12]
 801ace6:	2385      	movs	r3, #133	@ 0x85
 801ace8:	009b      	lsls	r3, r3, #2
 801acea:	58d3      	ldr	r3, [r2, r3]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d11a      	bne.n	801ad26 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801acf0:	68fa      	ldr	r2, [r7, #12]
 801acf2:	2385      	movs	r3, #133	@ 0x85
 801acf4:	009b      	lsls	r3, r3, #2
 801acf6:	2101      	movs	r1, #1
 801acf8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801acfa:	68fa      	ldr	r2, [r7, #12]
 801acfc:	2384      	movs	r3, #132	@ 0x84
 801acfe:	009b      	lsls	r3, r3, #2
 801ad00:	58d2      	ldr	r2, [r2, r3]
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801ad06:	68fa      	ldr	r2, [r7, #12]
 801ad08:	2382      	movs	r3, #130	@ 0x82
 801ad0a:	009b      	lsls	r3, r3, #2
 801ad0c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801ad0e:	68fa      	ldr	r2, [r7, #12]
 801ad10:	2384      	movs	r3, #132	@ 0x84
 801ad12:	009b      	lsls	r3, r3, #2
 801ad14:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801ad16:	b29b      	uxth	r3, r3
 801ad18:	6878      	ldr	r0, [r7, #4]
 801ad1a:	000a      	movs	r2, r1
 801ad1c:	2181      	movs	r1, #129	@ 0x81
 801ad1e:	f001 ff0c 	bl	801cb3a <USBD_LL_Transmit>

      return USBD_OK;
 801ad22:	2300      	movs	r3, #0
 801ad24:	e002      	b.n	801ad2c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801ad26:	2301      	movs	r3, #1
 801ad28:	e000      	b.n	801ad2c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801ad2a:	2302      	movs	r3, #2
  }
}
 801ad2c:	0018      	movs	r0, r3
 801ad2e:	46bd      	mov	sp, r7
 801ad30:	b004      	add	sp, #16
 801ad32:	bd80      	pop	{r7, pc}

0801ad34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	b084      	sub	sp, #16
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ad3c:	687a      	ldr	r2, [r7, #4]
 801ad3e:	23ae      	movs	r3, #174	@ 0xae
 801ad40:	009b      	lsls	r3, r3, #2
 801ad42:	58d3      	ldr	r3, [r2, r3]
 801ad44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801ad46:	687a      	ldr	r2, [r7, #4]
 801ad48:	23ae      	movs	r3, #174	@ 0xae
 801ad4a:	009b      	lsls	r3, r3, #2
 801ad4c:	58d3      	ldr	r3, [r2, r3]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d019      	beq.n	801ad86 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	7c1b      	ldrb	r3, [r3, #16]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d10a      	bne.n	801ad70 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ad5a:	68fa      	ldr	r2, [r7, #12]
 801ad5c:	2381      	movs	r3, #129	@ 0x81
 801ad5e:	009b      	lsls	r3, r3, #2
 801ad60:	58d2      	ldr	r2, [r2, r3]
 801ad62:	2380      	movs	r3, #128	@ 0x80
 801ad64:	009b      	lsls	r3, r3, #2
 801ad66:	6878      	ldr	r0, [r7, #4]
 801ad68:	2101      	movs	r1, #1
 801ad6a:	f001 ff1d 	bl	801cba8 <USBD_LL_PrepareReceive>
 801ad6e:	e008      	b.n	801ad82 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ad70:	68fa      	ldr	r2, [r7, #12]
 801ad72:	2381      	movs	r3, #129	@ 0x81
 801ad74:	009b      	lsls	r3, r3, #2
 801ad76:	58d2      	ldr	r2, [r2, r3]
 801ad78:	6878      	ldr	r0, [r7, #4]
 801ad7a:	2340      	movs	r3, #64	@ 0x40
 801ad7c:	2101      	movs	r1, #1
 801ad7e:	f001 ff13 	bl	801cba8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801ad82:	2300      	movs	r3, #0
 801ad84:	e000      	b.n	801ad88 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801ad86:	2302      	movs	r3, #2
  }
}
 801ad88:	0018      	movs	r0, r3
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	b004      	add	sp, #16
 801ad8e:	bd80      	pop	{r7, pc}

0801ad90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b084      	sub	sp, #16
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	60f8      	str	r0, [r7, #12]
 801ad98:	60b9      	str	r1, [r7, #8]
 801ad9a:	1dfb      	adds	r3, r7, #7
 801ad9c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d101      	bne.n	801ada8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801ada4:	2302      	movs	r3, #2
 801ada6:	e020      	b.n	801adea <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801ada8:	68fa      	ldr	r2, [r7, #12]
 801adaa:	23ad      	movs	r3, #173	@ 0xad
 801adac:	009b      	lsls	r3, r3, #2
 801adae:	58d3      	ldr	r3, [r2, r3]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d004      	beq.n	801adbe <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801adb4:	68fa      	ldr	r2, [r7, #12]
 801adb6:	23ad      	movs	r3, #173	@ 0xad
 801adb8:	009b      	lsls	r3, r3, #2
 801adba:	2100      	movs	r1, #0
 801adbc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801adbe:	68bb      	ldr	r3, [r7, #8]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d004      	beq.n	801adce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801adc4:	68fa      	ldr	r2, [r7, #12]
 801adc6:	23ac      	movs	r3, #172	@ 0xac
 801adc8:	009b      	lsls	r3, r3, #2
 801adca:	68b9      	ldr	r1, [r7, #8]
 801adcc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801adce:	68fa      	ldr	r2, [r7, #12]
 801add0:	23a7      	movs	r3, #167	@ 0xa7
 801add2:	009b      	lsls	r3, r3, #2
 801add4:	2101      	movs	r1, #1
 801add6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	1dfa      	adds	r2, r7, #7
 801addc:	7812      	ldrb	r2, [r2, #0]
 801adde:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	0018      	movs	r0, r3
 801ade4:	f001 fd0c 	bl	801c800 <USBD_LL_Init>

  return USBD_OK;
 801ade8:	2300      	movs	r3, #0
}
 801adea:	0018      	movs	r0, r3
 801adec:	46bd      	mov	sp, r7
 801adee:	b004      	add	sp, #16
 801adf0:	bd80      	pop	{r7, pc}

0801adf2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801adf2:	b580      	push	{r7, lr}
 801adf4:	b084      	sub	sp, #16
 801adf6:	af00      	add	r7, sp, #0
 801adf8:	6078      	str	r0, [r7, #4]
 801adfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801adfc:	200f      	movs	r0, #15
 801adfe:	183b      	adds	r3, r7, r0
 801ae00:	2200      	movs	r2, #0
 801ae02:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801ae04:	683b      	ldr	r3, [r7, #0]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d008      	beq.n	801ae1c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801ae0a:	687a      	ldr	r2, [r7, #4]
 801ae0c:	23ad      	movs	r3, #173	@ 0xad
 801ae0e:	009b      	lsls	r3, r3, #2
 801ae10:	6839      	ldr	r1, [r7, #0]
 801ae12:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801ae14:	183b      	adds	r3, r7, r0
 801ae16:	2200      	movs	r2, #0
 801ae18:	701a      	strb	r2, [r3, #0]
 801ae1a:	e003      	b.n	801ae24 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801ae1c:	230f      	movs	r3, #15
 801ae1e:	18fb      	adds	r3, r7, r3
 801ae20:	2202      	movs	r2, #2
 801ae22:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801ae24:	230f      	movs	r3, #15
 801ae26:	18fb      	adds	r3, r7, r3
 801ae28:	781b      	ldrb	r3, [r3, #0]
}
 801ae2a:	0018      	movs	r0, r3
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	b004      	add	sp, #16
 801ae30:	bd80      	pop	{r7, pc}

0801ae32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801ae32:	b580      	push	{r7, lr}
 801ae34:	b082      	sub	sp, #8
 801ae36:	af00      	add	r7, sp, #0
 801ae38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	0018      	movs	r0, r3
 801ae3e:	f001 fd43 	bl	801c8c8 <USBD_LL_Start>

  return USBD_OK;
 801ae42:	2300      	movs	r3, #0
}
 801ae44:	0018      	movs	r0, r3
 801ae46:	46bd      	mov	sp, r7
 801ae48:	b002      	add	sp, #8
 801ae4a:	bd80      	pop	{r7, pc}

0801ae4c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b082      	sub	sp, #8
 801ae50:	af00      	add	r7, sp, #0
 801ae52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ae54:	2300      	movs	r3, #0
}
 801ae56:	0018      	movs	r0, r3
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	b002      	add	sp, #8
 801ae5c:	bd80      	pop	{r7, pc}

0801ae5e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ae5e:	b590      	push	{r4, r7, lr}
 801ae60:	b085      	sub	sp, #20
 801ae62:	af00      	add	r7, sp, #0
 801ae64:	6078      	str	r0, [r7, #4]
 801ae66:	000a      	movs	r2, r1
 801ae68:	1cfb      	adds	r3, r7, #3
 801ae6a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801ae6c:	240f      	movs	r4, #15
 801ae6e:	193b      	adds	r3, r7, r4
 801ae70:	2202      	movs	r2, #2
 801ae72:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801ae74:	687a      	ldr	r2, [r7, #4]
 801ae76:	23ad      	movs	r3, #173	@ 0xad
 801ae78:	009b      	lsls	r3, r3, #2
 801ae7a:	58d3      	ldr	r3, [r2, r3]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d00e      	beq.n	801ae9e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801ae80:	687a      	ldr	r2, [r7, #4]
 801ae82:	23ad      	movs	r3, #173	@ 0xad
 801ae84:	009b      	lsls	r3, r3, #2
 801ae86:	58d3      	ldr	r3, [r2, r3]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	1cfa      	adds	r2, r7, #3
 801ae8c:	7811      	ldrb	r1, [r2, #0]
 801ae8e:	687a      	ldr	r2, [r7, #4]
 801ae90:	0010      	movs	r0, r2
 801ae92:	4798      	blx	r3
 801ae94:	1e03      	subs	r3, r0, #0
 801ae96:	d102      	bne.n	801ae9e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801ae98:	193b      	adds	r3, r7, r4
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801ae9e:	230f      	movs	r3, #15
 801aea0:	18fb      	adds	r3, r7, r3
 801aea2:	781b      	ldrb	r3, [r3, #0]
}
 801aea4:	0018      	movs	r0, r3
 801aea6:	46bd      	mov	sp, r7
 801aea8:	b005      	add	sp, #20
 801aeaa:	bd90      	pop	{r4, r7, pc}

0801aeac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b082      	sub	sp, #8
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	6078      	str	r0, [r7, #4]
 801aeb4:	000a      	movs	r2, r1
 801aeb6:	1cfb      	adds	r3, r7, #3
 801aeb8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801aeba:	687a      	ldr	r2, [r7, #4]
 801aebc:	23ad      	movs	r3, #173	@ 0xad
 801aebe:	009b      	lsls	r3, r3, #2
 801aec0:	58d3      	ldr	r3, [r2, r3]
 801aec2:	685b      	ldr	r3, [r3, #4]
 801aec4:	1cfa      	adds	r2, r7, #3
 801aec6:	7811      	ldrb	r1, [r2, #0]
 801aec8:	687a      	ldr	r2, [r7, #4]
 801aeca:	0010      	movs	r0, r2
 801aecc:	4798      	blx	r3

  return USBD_OK;
 801aece:	2300      	movs	r3, #0
}
 801aed0:	0018      	movs	r0, r3
 801aed2:	46bd      	mov	sp, r7
 801aed4:	b002      	add	sp, #8
 801aed6:	bd80      	pop	{r7, pc}

0801aed8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b082      	sub	sp, #8
 801aedc:	af00      	add	r7, sp, #0
 801aede:	6078      	str	r0, [r7, #4]
 801aee0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	22aa      	movs	r2, #170	@ 0xaa
 801aee6:	0092      	lsls	r2, r2, #2
 801aee8:	4694      	mov	ip, r2
 801aeea:	4463      	add	r3, ip
 801aeec:	683a      	ldr	r2, [r7, #0]
 801aeee:	0011      	movs	r1, r2
 801aef0:	0018      	movs	r0, r3
 801aef2:	f001 f810 	bl	801bf16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801aef6:	687a      	ldr	r2, [r7, #4]
 801aef8:	23a5      	movs	r3, #165	@ 0xa5
 801aefa:	009b      	lsls	r3, r3, #2
 801aefc:	2101      	movs	r1, #1
 801aefe:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	4a23      	ldr	r2, [pc, #140]	@ (801af90 <USBD_LL_SetupStage+0xb8>)
 801af04:	5a9b      	ldrh	r3, [r3, r2]
 801af06:	0019      	movs	r1, r3
 801af08:	687a      	ldr	r2, [r7, #4]
 801af0a:	23a6      	movs	r3, #166	@ 0xa6
 801af0c:	009b      	lsls	r3, r3, #2
 801af0e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801af10:	687a      	ldr	r2, [r7, #4]
 801af12:	23aa      	movs	r3, #170	@ 0xaa
 801af14:	009b      	lsls	r3, r3, #2
 801af16:	5cd3      	ldrb	r3, [r2, r3]
 801af18:	001a      	movs	r2, r3
 801af1a:	231f      	movs	r3, #31
 801af1c:	4013      	ands	r3, r2
 801af1e:	2b02      	cmp	r3, #2
 801af20:	d019      	beq.n	801af56 <USBD_LL_SetupStage+0x7e>
 801af22:	d822      	bhi.n	801af6a <USBD_LL_SetupStage+0x92>
 801af24:	2b00      	cmp	r3, #0
 801af26:	d002      	beq.n	801af2e <USBD_LL_SetupStage+0x56>
 801af28:	2b01      	cmp	r3, #1
 801af2a:	d00a      	beq.n	801af42 <USBD_LL_SetupStage+0x6a>
 801af2c:	e01d      	b.n	801af6a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	22aa      	movs	r2, #170	@ 0xaa
 801af32:	0092      	lsls	r2, r2, #2
 801af34:	189a      	adds	r2, r3, r2
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	0011      	movs	r1, r2
 801af3a:	0018      	movs	r0, r3
 801af3c:	f000 fa10 	bl	801b360 <USBD_StdDevReq>
      break;
 801af40:	e020      	b.n	801af84 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	22aa      	movs	r2, #170	@ 0xaa
 801af46:	0092      	lsls	r2, r2, #2
 801af48:	189a      	adds	r2, r3, r2
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	0011      	movs	r1, r2
 801af4e:	0018      	movs	r0, r3
 801af50:	f000 fa78 	bl	801b444 <USBD_StdItfReq>
      break;
 801af54:	e016      	b.n	801af84 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	22aa      	movs	r2, #170	@ 0xaa
 801af5a:	0092      	lsls	r2, r2, #2
 801af5c:	189a      	adds	r2, r3, r2
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	0011      	movs	r1, r2
 801af62:	0018      	movs	r0, r3
 801af64:	f000 fac5 	bl	801b4f2 <USBD_StdEPReq>
      break;
 801af68:	e00c      	b.n	801af84 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801af6a:	687a      	ldr	r2, [r7, #4]
 801af6c:	23aa      	movs	r3, #170	@ 0xaa
 801af6e:	009b      	lsls	r3, r3, #2
 801af70:	5cd3      	ldrb	r3, [r2, r3]
 801af72:	227f      	movs	r2, #127	@ 0x7f
 801af74:	4393      	bics	r3, r2
 801af76:	b2da      	uxtb	r2, r3
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	0011      	movs	r1, r2
 801af7c:	0018      	movs	r0, r3
 801af7e:	f001 fd2a 	bl	801c9d6 <USBD_LL_StallEP>
      break;
 801af82:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801af84:	2300      	movs	r3, #0
}
 801af86:	0018      	movs	r0, r3
 801af88:	46bd      	mov	sp, r7
 801af8a:	b002      	add	sp, #8
 801af8c:	bd80      	pop	{r7, pc}
 801af8e:	46c0      	nop			@ (mov r8, r8)
 801af90:	000002ae 	.word	0x000002ae

0801af94 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801af94:	b580      	push	{r7, lr}
 801af96:	b086      	sub	sp, #24
 801af98:	af00      	add	r7, sp, #0
 801af9a:	60f8      	str	r0, [r7, #12]
 801af9c:	607a      	str	r2, [r7, #4]
 801af9e:	200b      	movs	r0, #11
 801afa0:	183b      	adds	r3, r7, r0
 801afa2:	1c0a      	adds	r2, r1, #0
 801afa4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801afa6:	183b      	adds	r3, r7, r0
 801afa8:	781b      	ldrb	r3, [r3, #0]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d154      	bne.n	801b058 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	3355      	adds	r3, #85	@ 0x55
 801afb2:	33ff      	adds	r3, #255	@ 0xff
 801afb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801afb6:	68fa      	ldr	r2, [r7, #12]
 801afb8:	23a5      	movs	r3, #165	@ 0xa5
 801afba:	009b      	lsls	r3, r3, #2
 801afbc:	58d3      	ldr	r3, [r2, r3]
 801afbe:	2b03      	cmp	r3, #3
 801afc0:	d139      	bne.n	801b036 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801afc2:	697b      	ldr	r3, [r7, #20]
 801afc4:	68da      	ldr	r2, [r3, #12]
 801afc6:	697b      	ldr	r3, [r7, #20]
 801afc8:	691b      	ldr	r3, [r3, #16]
 801afca:	429a      	cmp	r2, r3
 801afcc:	d919      	bls.n	801b002 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801afce:	697b      	ldr	r3, [r7, #20]
 801afd0:	68da      	ldr	r2, [r3, #12]
 801afd2:	697b      	ldr	r3, [r7, #20]
 801afd4:	691b      	ldr	r3, [r3, #16]
 801afd6:	1ad2      	subs	r2, r2, r3
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801afdc:	697b      	ldr	r3, [r7, #20]
 801afde:	68da      	ldr	r2, [r3, #12]
 801afe0:	697b      	ldr	r3, [r7, #20]
 801afe2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801afe4:	429a      	cmp	r2, r3
 801afe6:	d203      	bcs.n	801aff0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801afe8:	697b      	ldr	r3, [r7, #20]
 801afea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801afec:	b29b      	uxth	r3, r3
 801afee:	e002      	b.n	801aff6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801aff0:	697b      	ldr	r3, [r7, #20]
 801aff2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801aff4:	b29b      	uxth	r3, r3
 801aff6:	6879      	ldr	r1, [r7, #4]
 801aff8:	68f8      	ldr	r0, [r7, #12]
 801affa:	001a      	movs	r2, r3
 801affc:	f001 f898 	bl	801c130 <USBD_CtlContinueRx>
 801b000:	e045      	b.n	801b08e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b002:	68fa      	ldr	r2, [r7, #12]
 801b004:	23ad      	movs	r3, #173	@ 0xad
 801b006:	009b      	lsls	r3, r3, #2
 801b008:	58d3      	ldr	r3, [r2, r3]
 801b00a:	691b      	ldr	r3, [r3, #16]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d00d      	beq.n	801b02c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b010:	68fa      	ldr	r2, [r7, #12]
 801b012:	23a7      	movs	r3, #167	@ 0xa7
 801b014:	009b      	lsls	r3, r3, #2
 801b016:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b018:	2b03      	cmp	r3, #3
 801b01a:	d107      	bne.n	801b02c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801b01c:	68fa      	ldr	r2, [r7, #12]
 801b01e:	23ad      	movs	r3, #173	@ 0xad
 801b020:	009b      	lsls	r3, r3, #2
 801b022:	58d3      	ldr	r3, [r2, r3]
 801b024:	691b      	ldr	r3, [r3, #16]
 801b026:	68fa      	ldr	r2, [r7, #12]
 801b028:	0010      	movs	r0, r2
 801b02a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	0018      	movs	r0, r3
 801b030:	f001 f891 	bl	801c156 <USBD_CtlSendStatus>
 801b034:	e02b      	b.n	801b08e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801b036:	68fa      	ldr	r2, [r7, #12]
 801b038:	23a5      	movs	r3, #165	@ 0xa5
 801b03a:	009b      	lsls	r3, r3, #2
 801b03c:	58d3      	ldr	r3, [r2, r3]
 801b03e:	2b05      	cmp	r3, #5
 801b040:	d125      	bne.n	801b08e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801b042:	68fa      	ldr	r2, [r7, #12]
 801b044:	23a5      	movs	r3, #165	@ 0xa5
 801b046:	009b      	lsls	r3, r3, #2
 801b048:	2100      	movs	r1, #0
 801b04a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	2100      	movs	r1, #0
 801b050:	0018      	movs	r0, r3
 801b052:	f001 fcc0 	bl	801c9d6 <USBD_LL_StallEP>
 801b056:	e01a      	b.n	801b08e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801b058:	68fa      	ldr	r2, [r7, #12]
 801b05a:	23ad      	movs	r3, #173	@ 0xad
 801b05c:	009b      	lsls	r3, r3, #2
 801b05e:	58d3      	ldr	r3, [r2, r3]
 801b060:	699b      	ldr	r3, [r3, #24]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d011      	beq.n	801b08a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b066:	68fa      	ldr	r2, [r7, #12]
 801b068:	23a7      	movs	r3, #167	@ 0xa7
 801b06a:	009b      	lsls	r3, r3, #2
 801b06c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801b06e:	2b03      	cmp	r3, #3
 801b070:	d10b      	bne.n	801b08a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801b072:	68fa      	ldr	r2, [r7, #12]
 801b074:	23ad      	movs	r3, #173	@ 0xad
 801b076:	009b      	lsls	r3, r3, #2
 801b078:	58d3      	ldr	r3, [r2, r3]
 801b07a:	699b      	ldr	r3, [r3, #24]
 801b07c:	220b      	movs	r2, #11
 801b07e:	18ba      	adds	r2, r7, r2
 801b080:	7811      	ldrb	r1, [r2, #0]
 801b082:	68fa      	ldr	r2, [r7, #12]
 801b084:	0010      	movs	r0, r2
 801b086:	4798      	blx	r3
 801b088:	e001      	b.n	801b08e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b08a:	2302      	movs	r3, #2
 801b08c:	e000      	b.n	801b090 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801b08e:	2300      	movs	r3, #0
}
 801b090:	0018      	movs	r0, r3
 801b092:	46bd      	mov	sp, r7
 801b094:	b006      	add	sp, #24
 801b096:	bd80      	pop	{r7, pc}

0801b098 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b086      	sub	sp, #24
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	60f8      	str	r0, [r7, #12]
 801b0a0:	607a      	str	r2, [r7, #4]
 801b0a2:	200b      	movs	r0, #11
 801b0a4:	183b      	adds	r3, r7, r0
 801b0a6:	1c0a      	adds	r2, r1, #0
 801b0a8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b0aa:	183b      	adds	r3, r7, r0
 801b0ac:	781b      	ldrb	r3, [r3, #0]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d000      	beq.n	801b0b4 <USBD_LL_DataInStage+0x1c>
 801b0b2:	e08e      	b.n	801b1d2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	3314      	adds	r3, #20
 801b0b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b0ba:	68fa      	ldr	r2, [r7, #12]
 801b0bc:	23a5      	movs	r3, #165	@ 0xa5
 801b0be:	009b      	lsls	r3, r3, #2
 801b0c0:	58d3      	ldr	r3, [r2, r3]
 801b0c2:	2b02      	cmp	r3, #2
 801b0c4:	d164      	bne.n	801b190 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801b0c6:	697b      	ldr	r3, [r7, #20]
 801b0c8:	68da      	ldr	r2, [r3, #12]
 801b0ca:	697b      	ldr	r3, [r7, #20]
 801b0cc:	691b      	ldr	r3, [r3, #16]
 801b0ce:	429a      	cmp	r2, r3
 801b0d0:	d915      	bls.n	801b0fe <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801b0d2:	697b      	ldr	r3, [r7, #20]
 801b0d4:	68da      	ldr	r2, [r3, #12]
 801b0d6:	697b      	ldr	r3, [r7, #20]
 801b0d8:	691b      	ldr	r3, [r3, #16]
 801b0da:	1ad2      	subs	r2, r2, r3
 801b0dc:	697b      	ldr	r3, [r7, #20]
 801b0de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801b0e0:	697b      	ldr	r3, [r7, #20]
 801b0e2:	68db      	ldr	r3, [r3, #12]
 801b0e4:	b29a      	uxth	r2, r3
 801b0e6:	6879      	ldr	r1, [r7, #4]
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	0018      	movs	r0, r3
 801b0ec:	f000 ffe9 	bl	801c0c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b0f0:	68f8      	ldr	r0, [r7, #12]
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	2200      	movs	r2, #0
 801b0f6:	2100      	movs	r1, #0
 801b0f8:	f001 fd56 	bl	801cba8 <USBD_LL_PrepareReceive>
 801b0fc:	e059      	b.n	801b1b2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b0fe:	697b      	ldr	r3, [r7, #20]
 801b100:	689a      	ldr	r2, [r3, #8]
 801b102:	697b      	ldr	r3, [r7, #20]
 801b104:	691b      	ldr	r3, [r3, #16]
 801b106:	0019      	movs	r1, r3
 801b108:	0010      	movs	r0, r2
 801b10a:	f7e5 f8d1 	bl	80002b0 <__aeabi_uidivmod>
 801b10e:	1e0b      	subs	r3, r1, #0
 801b110:	d11f      	bne.n	801b152 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801b112:	697b      	ldr	r3, [r7, #20]
 801b114:	689a      	ldr	r2, [r3, #8]
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b11a:	429a      	cmp	r2, r3
 801b11c:	d319      	bcc.n	801b152 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801b11e:	697b      	ldr	r3, [r7, #20]
 801b120:	689a      	ldr	r2, [r3, #8]
 801b122:	68f9      	ldr	r1, [r7, #12]
 801b124:	23a6      	movs	r3, #166	@ 0xa6
 801b126:	009b      	lsls	r3, r3, #2
 801b128:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801b12a:	429a      	cmp	r2, r3
 801b12c:	d211      	bcs.n	801b152 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	2200      	movs	r2, #0
 801b132:	2100      	movs	r1, #0
 801b134:	0018      	movs	r0, r3
 801b136:	f000 ffc4 	bl	801c0c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801b13a:	68fa      	ldr	r2, [r7, #12]
 801b13c:	23a6      	movs	r3, #166	@ 0xa6
 801b13e:	009b      	lsls	r3, r3, #2
 801b140:	2100      	movs	r1, #0
 801b142:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b144:	68f8      	ldr	r0, [r7, #12]
 801b146:	2300      	movs	r3, #0
 801b148:	2200      	movs	r2, #0
 801b14a:	2100      	movs	r1, #0
 801b14c:	f001 fd2c 	bl	801cba8 <USBD_LL_PrepareReceive>
 801b150:	e02f      	b.n	801b1b2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b152:	68fa      	ldr	r2, [r7, #12]
 801b154:	23ad      	movs	r3, #173	@ 0xad
 801b156:	009b      	lsls	r3, r3, #2
 801b158:	58d3      	ldr	r3, [r2, r3]
 801b15a:	68db      	ldr	r3, [r3, #12]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d00d      	beq.n	801b17c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b160:	68fa      	ldr	r2, [r7, #12]
 801b162:	23a7      	movs	r3, #167	@ 0xa7
 801b164:	009b      	lsls	r3, r3, #2
 801b166:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b168:	2b03      	cmp	r3, #3
 801b16a:	d107      	bne.n	801b17c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801b16c:	68fa      	ldr	r2, [r7, #12]
 801b16e:	23ad      	movs	r3, #173	@ 0xad
 801b170:	009b      	lsls	r3, r3, #2
 801b172:	58d3      	ldr	r3, [r2, r3]
 801b174:	68db      	ldr	r3, [r3, #12]
 801b176:	68fa      	ldr	r2, [r7, #12]
 801b178:	0010      	movs	r0, r2
 801b17a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	2180      	movs	r1, #128	@ 0x80
 801b180:	0018      	movs	r0, r3
 801b182:	f001 fc28 	bl	801c9d6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	0018      	movs	r0, r3
 801b18a:	f000 fff8 	bl	801c17e <USBD_CtlReceiveStatus>
 801b18e:	e010      	b.n	801b1b2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b190:	68fa      	ldr	r2, [r7, #12]
 801b192:	23a5      	movs	r3, #165	@ 0xa5
 801b194:	009b      	lsls	r3, r3, #2
 801b196:	58d3      	ldr	r3, [r2, r3]
 801b198:	2b04      	cmp	r3, #4
 801b19a:	d005      	beq.n	801b1a8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801b19c:	68fa      	ldr	r2, [r7, #12]
 801b19e:	23a5      	movs	r3, #165	@ 0xa5
 801b1a0:	009b      	lsls	r3, r3, #2
 801b1a2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d104      	bne.n	801b1b2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	2180      	movs	r1, #128	@ 0x80
 801b1ac:	0018      	movs	r0, r3
 801b1ae:	f001 fc12 	bl	801c9d6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801b1b2:	68fa      	ldr	r2, [r7, #12]
 801b1b4:	23a8      	movs	r3, #168	@ 0xa8
 801b1b6:	009b      	lsls	r3, r3, #2
 801b1b8:	5cd3      	ldrb	r3, [r2, r3]
 801b1ba:	2b01      	cmp	r3, #1
 801b1bc:	d124      	bne.n	801b208 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	0018      	movs	r0, r3
 801b1c2:	f7ff fe43 	bl	801ae4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b1c6:	68fa      	ldr	r2, [r7, #12]
 801b1c8:	23a8      	movs	r3, #168	@ 0xa8
 801b1ca:	009b      	lsls	r3, r3, #2
 801b1cc:	2100      	movs	r1, #0
 801b1ce:	54d1      	strb	r1, [r2, r3]
 801b1d0:	e01a      	b.n	801b208 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801b1d2:	68fa      	ldr	r2, [r7, #12]
 801b1d4:	23ad      	movs	r3, #173	@ 0xad
 801b1d6:	009b      	lsls	r3, r3, #2
 801b1d8:	58d3      	ldr	r3, [r2, r3]
 801b1da:	695b      	ldr	r3, [r3, #20]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d011      	beq.n	801b204 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b1e0:	68fa      	ldr	r2, [r7, #12]
 801b1e2:	23a7      	movs	r3, #167	@ 0xa7
 801b1e4:	009b      	lsls	r3, r3, #2
 801b1e6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801b1e8:	2b03      	cmp	r3, #3
 801b1ea:	d10b      	bne.n	801b204 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801b1ec:	68fa      	ldr	r2, [r7, #12]
 801b1ee:	23ad      	movs	r3, #173	@ 0xad
 801b1f0:	009b      	lsls	r3, r3, #2
 801b1f2:	58d3      	ldr	r3, [r2, r3]
 801b1f4:	695b      	ldr	r3, [r3, #20]
 801b1f6:	220b      	movs	r2, #11
 801b1f8:	18ba      	adds	r2, r7, r2
 801b1fa:	7811      	ldrb	r1, [r2, #0]
 801b1fc:	68fa      	ldr	r2, [r7, #12]
 801b1fe:	0010      	movs	r0, r2
 801b200:	4798      	blx	r3
 801b202:	e001      	b.n	801b208 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b204:	2302      	movs	r3, #2
 801b206:	e000      	b.n	801b20a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801b208:	2300      	movs	r3, #0
}
 801b20a:	0018      	movs	r0, r3
 801b20c:	46bd      	mov	sp, r7
 801b20e:	b006      	add	sp, #24
 801b210:	bd80      	pop	{r7, pc}

0801b212 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b212:	b580      	push	{r7, lr}
 801b214:	b082      	sub	sp, #8
 801b216:	af00      	add	r7, sp, #0
 801b218:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b21a:	6878      	ldr	r0, [r7, #4]
 801b21c:	2340      	movs	r3, #64	@ 0x40
 801b21e:	2200      	movs	r2, #0
 801b220:	2100      	movs	r1, #0
 801b222:	f001 fb76 	bl	801c912 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b226:	687a      	ldr	r2, [r7, #4]
 801b228:	23ac      	movs	r3, #172	@ 0xac
 801b22a:	005b      	lsls	r3, r3, #1
 801b22c:	2101      	movs	r1, #1
 801b22e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b230:	687a      	ldr	r2, [r7, #4]
 801b232:	23b2      	movs	r3, #178	@ 0xb2
 801b234:	005b      	lsls	r3, r3, #1
 801b236:	2140      	movs	r1, #64	@ 0x40
 801b238:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b23a:	6878      	ldr	r0, [r7, #4]
 801b23c:	2340      	movs	r3, #64	@ 0x40
 801b23e:	2200      	movs	r2, #0
 801b240:	2180      	movs	r1, #128	@ 0x80
 801b242:	f001 fb66 	bl	801c912 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	2201      	movs	r2, #1
 801b24a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	2240      	movs	r2, #64	@ 0x40
 801b250:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b252:	687a      	ldr	r2, [r7, #4]
 801b254:	23a7      	movs	r3, #167	@ 0xa7
 801b256:	009b      	lsls	r3, r3, #2
 801b258:	2101      	movs	r1, #1
 801b25a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801b25c:	687a      	ldr	r2, [r7, #4]
 801b25e:	23a5      	movs	r3, #165	@ 0xa5
 801b260:	009b      	lsls	r3, r3, #2
 801b262:	2100      	movs	r1, #0
 801b264:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2200      	movs	r2, #0
 801b26a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b26c:	687a      	ldr	r2, [r7, #4]
 801b26e:	23a9      	movs	r3, #169	@ 0xa9
 801b270:	009b      	lsls	r3, r3, #2
 801b272:	2100      	movs	r1, #0
 801b274:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801b276:	687a      	ldr	r2, [r7, #4]
 801b278:	23ae      	movs	r3, #174	@ 0xae
 801b27a:	009b      	lsls	r3, r3, #2
 801b27c:	58d3      	ldr	r3, [r2, r3]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d00a      	beq.n	801b298 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801b282:	687a      	ldr	r2, [r7, #4]
 801b284:	23ad      	movs	r3, #173	@ 0xad
 801b286:	009b      	lsls	r3, r3, #2
 801b288:	58d3      	ldr	r3, [r2, r3]
 801b28a:	685a      	ldr	r2, [r3, #4]
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	685b      	ldr	r3, [r3, #4]
 801b290:	b2d9      	uxtb	r1, r3
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	0018      	movs	r0, r3
 801b296:	4790      	blx	r2
  }

  return USBD_OK;
 801b298:	2300      	movs	r3, #0
}
 801b29a:	0018      	movs	r0, r3
 801b29c:	46bd      	mov	sp, r7
 801b29e:	b002      	add	sp, #8
 801b2a0:	bd80      	pop	{r7, pc}

0801b2a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b2a2:	b580      	push	{r7, lr}
 801b2a4:	b082      	sub	sp, #8
 801b2a6:	af00      	add	r7, sp, #0
 801b2a8:	6078      	str	r0, [r7, #4]
 801b2aa:	000a      	movs	r2, r1
 801b2ac:	1cfb      	adds	r3, r7, #3
 801b2ae:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	1cfa      	adds	r2, r7, #3
 801b2b4:	7812      	ldrb	r2, [r2, #0]
 801b2b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b2b8:	2300      	movs	r3, #0
}
 801b2ba:	0018      	movs	r0, r3
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	b002      	add	sp, #8
 801b2c0:	bd80      	pop	{r7, pc}
	...

0801b2c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b082      	sub	sp, #8
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801b2cc:	687a      	ldr	r2, [r7, #4]
 801b2ce:	23a7      	movs	r3, #167	@ 0xa7
 801b2d0:	009b      	lsls	r3, r3, #2
 801b2d2:	5cd1      	ldrb	r1, [r2, r3]
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	4a06      	ldr	r2, [pc, #24]	@ (801b2f0 <USBD_LL_Suspend+0x2c>)
 801b2d8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801b2da:	687a      	ldr	r2, [r7, #4]
 801b2dc:	23a7      	movs	r3, #167	@ 0xa7
 801b2de:	009b      	lsls	r3, r3, #2
 801b2e0:	2104      	movs	r1, #4
 801b2e2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801b2e4:	2300      	movs	r3, #0
}
 801b2e6:	0018      	movs	r0, r3
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	b002      	add	sp, #8
 801b2ec:	bd80      	pop	{r7, pc}
 801b2ee:	46c0      	nop			@ (mov r8, r8)
 801b2f0:	0000029d 	.word	0x0000029d

0801b2f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b082      	sub	sp, #8
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b2fc:	687a      	ldr	r2, [r7, #4]
 801b2fe:	23a7      	movs	r3, #167	@ 0xa7
 801b300:	009b      	lsls	r3, r3, #2
 801b302:	5cd3      	ldrb	r3, [r2, r3]
 801b304:	2b04      	cmp	r3, #4
 801b306:	d106      	bne.n	801b316 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	4a05      	ldr	r2, [pc, #20]	@ (801b320 <USBD_LL_Resume+0x2c>)
 801b30c:	5c99      	ldrb	r1, [r3, r2]
 801b30e:	687a      	ldr	r2, [r7, #4]
 801b310:	23a7      	movs	r3, #167	@ 0xa7
 801b312:	009b      	lsls	r3, r3, #2
 801b314:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801b316:	2300      	movs	r3, #0
}
 801b318:	0018      	movs	r0, r3
 801b31a:	46bd      	mov	sp, r7
 801b31c:	b002      	add	sp, #8
 801b31e:	bd80      	pop	{r7, pc}
 801b320:	0000029d 	.word	0x0000029d

0801b324 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b324:	b580      	push	{r7, lr}
 801b326:	b082      	sub	sp, #8
 801b328:	af00      	add	r7, sp, #0
 801b32a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b32c:	687a      	ldr	r2, [r7, #4]
 801b32e:	23a7      	movs	r3, #167	@ 0xa7
 801b330:	009b      	lsls	r3, r3, #2
 801b332:	5cd3      	ldrb	r3, [r2, r3]
 801b334:	2b03      	cmp	r3, #3
 801b336:	d10e      	bne.n	801b356 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801b338:	687a      	ldr	r2, [r7, #4]
 801b33a:	23ad      	movs	r3, #173	@ 0xad
 801b33c:	009b      	lsls	r3, r3, #2
 801b33e:	58d3      	ldr	r3, [r2, r3]
 801b340:	69db      	ldr	r3, [r3, #28]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d007      	beq.n	801b356 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801b346:	687a      	ldr	r2, [r7, #4]
 801b348:	23ad      	movs	r3, #173	@ 0xad
 801b34a:	009b      	lsls	r3, r3, #2
 801b34c:	58d3      	ldr	r3, [r2, r3]
 801b34e:	69db      	ldr	r3, [r3, #28]
 801b350:	687a      	ldr	r2, [r7, #4]
 801b352:	0010      	movs	r0, r2
 801b354:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b356:	2300      	movs	r3, #0
}
 801b358:	0018      	movs	r0, r3
 801b35a:	46bd      	mov	sp, r7
 801b35c:	b002      	add	sp, #8
 801b35e:	bd80      	pop	{r7, pc}

0801b360 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801b360:	b580      	push	{r7, lr}
 801b362:	b084      	sub	sp, #16
 801b364:	af00      	add	r7, sp, #0
 801b366:	6078      	str	r0, [r7, #4]
 801b368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b36a:	230f      	movs	r3, #15
 801b36c:	18fb      	adds	r3, r7, r3
 801b36e:	2200      	movs	r2, #0
 801b370:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	781b      	ldrb	r3, [r3, #0]
 801b376:	001a      	movs	r2, r3
 801b378:	2360      	movs	r3, #96	@ 0x60
 801b37a:	4013      	ands	r3, r2
 801b37c:	2b40      	cmp	r3, #64	@ 0x40
 801b37e:	d004      	beq.n	801b38a <USBD_StdDevReq+0x2a>
 801b380:	d84f      	bhi.n	801b422 <USBD_StdDevReq+0xc2>
 801b382:	2b00      	cmp	r3, #0
 801b384:	d00b      	beq.n	801b39e <USBD_StdDevReq+0x3e>
 801b386:	2b20      	cmp	r3, #32
 801b388:	d14b      	bne.n	801b422 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b38a:	687a      	ldr	r2, [r7, #4]
 801b38c:	23ad      	movs	r3, #173	@ 0xad
 801b38e:	009b      	lsls	r3, r3, #2
 801b390:	58d3      	ldr	r3, [r2, r3]
 801b392:	689b      	ldr	r3, [r3, #8]
 801b394:	6839      	ldr	r1, [r7, #0]
 801b396:	687a      	ldr	r2, [r7, #4]
 801b398:	0010      	movs	r0, r2
 801b39a:	4798      	blx	r3
      break;
 801b39c:	e048      	b.n	801b430 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b39e:	683b      	ldr	r3, [r7, #0]
 801b3a0:	785b      	ldrb	r3, [r3, #1]
 801b3a2:	2b09      	cmp	r3, #9
 801b3a4:	d835      	bhi.n	801b412 <USBD_StdDevReq+0xb2>
 801b3a6:	009a      	lsls	r2, r3, #2
 801b3a8:	4b25      	ldr	r3, [pc, #148]	@ (801b440 <USBD_StdDevReq+0xe0>)
 801b3aa:	18d3      	adds	r3, r2, r3
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b3b0:	683a      	ldr	r2, [r7, #0]
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	0011      	movs	r1, r2
 801b3b6:	0018      	movs	r0, r3
 801b3b8:	f000 fa52 	bl	801b860 <USBD_GetDescriptor>
          break;
 801b3bc:	e030      	b.n	801b420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b3be:	683a      	ldr	r2, [r7, #0]
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	0011      	movs	r1, r2
 801b3c4:	0018      	movs	r0, r3
 801b3c6:	f000 fbfd 	bl	801bbc4 <USBD_SetAddress>
          break;
 801b3ca:	e029      	b.n	801b420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801b3cc:	683a      	ldr	r2, [r7, #0]
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	0011      	movs	r1, r2
 801b3d2:	0018      	movs	r0, r3
 801b3d4:	f000 fc4a 	bl	801bc6c <USBD_SetConfig>
          break;
 801b3d8:	e022      	b.n	801b420 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b3da:	683a      	ldr	r2, [r7, #0]
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	0011      	movs	r1, r2
 801b3e0:	0018      	movs	r0, r3
 801b3e2:	f000 fce7 	bl	801bdb4 <USBD_GetConfig>
          break;
 801b3e6:	e01b      	b.n	801b420 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b3e8:	683a      	ldr	r2, [r7, #0]
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	0011      	movs	r1, r2
 801b3ee:	0018      	movs	r0, r3
 801b3f0:	f000 fd1b 	bl	801be2a <USBD_GetStatus>
          break;
 801b3f4:	e014      	b.n	801b420 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b3f6:	683a      	ldr	r2, [r7, #0]
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	0011      	movs	r1, r2
 801b3fc:	0018      	movs	r0, r3
 801b3fe:	f000 fd4e 	bl	801be9e <USBD_SetFeature>
          break;
 801b402:	e00d      	b.n	801b420 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b404:	683a      	ldr	r2, [r7, #0]
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	0011      	movs	r1, r2
 801b40a:	0018      	movs	r0, r3
 801b40c:	f000 fd5d 	bl	801beca <USBD_ClrFeature>
          break;
 801b410:	e006      	b.n	801b420 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b412:	683a      	ldr	r2, [r7, #0]
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	0011      	movs	r1, r2
 801b418:	0018      	movs	r0, r3
 801b41a:	f000 fdb4 	bl	801bf86 <USBD_CtlError>
          break;
 801b41e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b420:	e006      	b.n	801b430 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801b422:	683a      	ldr	r2, [r7, #0]
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	0011      	movs	r1, r2
 801b428:	0018      	movs	r0, r3
 801b42a:	f000 fdac 	bl	801bf86 <USBD_CtlError>
      break;
 801b42e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b430:	230f      	movs	r3, #15
 801b432:	18fb      	adds	r3, r7, r3
 801b434:	781b      	ldrb	r3, [r3, #0]
}
 801b436:	0018      	movs	r0, r3
 801b438:	46bd      	mov	sp, r7
 801b43a:	b004      	add	sp, #16
 801b43c:	bd80      	pop	{r7, pc}
 801b43e:	46c0      	nop			@ (mov r8, r8)
 801b440:	0802493c 	.word	0x0802493c

0801b444 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801b444:	b5b0      	push	{r4, r5, r7, lr}
 801b446:	b084      	sub	sp, #16
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
 801b44c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b44e:	230f      	movs	r3, #15
 801b450:	18fb      	adds	r3, r7, r3
 801b452:	2200      	movs	r2, #0
 801b454:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b456:	683b      	ldr	r3, [r7, #0]
 801b458:	781b      	ldrb	r3, [r3, #0]
 801b45a:	001a      	movs	r2, r3
 801b45c:	2360      	movs	r3, #96	@ 0x60
 801b45e:	4013      	ands	r3, r2
 801b460:	2b40      	cmp	r3, #64	@ 0x40
 801b462:	d004      	beq.n	801b46e <USBD_StdItfReq+0x2a>
 801b464:	d839      	bhi.n	801b4da <USBD_StdItfReq+0x96>
 801b466:	2b00      	cmp	r3, #0
 801b468:	d001      	beq.n	801b46e <USBD_StdItfReq+0x2a>
 801b46a:	2b20      	cmp	r3, #32
 801b46c:	d135      	bne.n	801b4da <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b46e:	687a      	ldr	r2, [r7, #4]
 801b470:	23a7      	movs	r3, #167	@ 0xa7
 801b472:	009b      	lsls	r3, r3, #2
 801b474:	5cd3      	ldrb	r3, [r2, r3]
 801b476:	3b01      	subs	r3, #1
 801b478:	2b02      	cmp	r3, #2
 801b47a:	d825      	bhi.n	801b4c8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b47c:	683b      	ldr	r3, [r7, #0]
 801b47e:	889b      	ldrh	r3, [r3, #4]
 801b480:	b2db      	uxtb	r3, r3
 801b482:	2b01      	cmp	r3, #1
 801b484:	d819      	bhi.n	801b4ba <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b486:	687a      	ldr	r2, [r7, #4]
 801b488:	23ad      	movs	r3, #173	@ 0xad
 801b48a:	009b      	lsls	r3, r3, #2
 801b48c:	58d3      	ldr	r3, [r2, r3]
 801b48e:	689b      	ldr	r3, [r3, #8]
 801b490:	250f      	movs	r5, #15
 801b492:	197c      	adds	r4, r7, r5
 801b494:	6839      	ldr	r1, [r7, #0]
 801b496:	687a      	ldr	r2, [r7, #4]
 801b498:	0010      	movs	r0, r2
 801b49a:	4798      	blx	r3
 801b49c:	0003      	movs	r3, r0
 801b49e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b4a0:	683b      	ldr	r3, [r7, #0]
 801b4a2:	88db      	ldrh	r3, [r3, #6]
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d116      	bne.n	801b4d6 <USBD_StdItfReq+0x92>
 801b4a8:	197b      	adds	r3, r7, r5
 801b4aa:	781b      	ldrb	r3, [r3, #0]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d112      	bne.n	801b4d6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	0018      	movs	r0, r3
 801b4b4:	f000 fe4f 	bl	801c156 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b4b8:	e00d      	b.n	801b4d6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801b4ba:	683a      	ldr	r2, [r7, #0]
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	0011      	movs	r1, r2
 801b4c0:	0018      	movs	r0, r3
 801b4c2:	f000 fd60 	bl	801bf86 <USBD_CtlError>
          break;
 801b4c6:	e006      	b.n	801b4d6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801b4c8:	683a      	ldr	r2, [r7, #0]
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	0011      	movs	r1, r2
 801b4ce:	0018      	movs	r0, r3
 801b4d0:	f000 fd59 	bl	801bf86 <USBD_CtlError>
          break;
 801b4d4:	e000      	b.n	801b4d8 <USBD_StdItfReq+0x94>
          break;
 801b4d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b4d8:	e006      	b.n	801b4e8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801b4da:	683a      	ldr	r2, [r7, #0]
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	0011      	movs	r1, r2
 801b4e0:	0018      	movs	r0, r3
 801b4e2:	f000 fd50 	bl	801bf86 <USBD_CtlError>
      break;
 801b4e6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b4e8:	2300      	movs	r3, #0
}
 801b4ea:	0018      	movs	r0, r3
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	b004      	add	sp, #16
 801b4f0:	bdb0      	pop	{r4, r5, r7, pc}

0801b4f2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801b4f2:	b5b0      	push	{r4, r5, r7, lr}
 801b4f4:	b084      	sub	sp, #16
 801b4f6:	af00      	add	r7, sp, #0
 801b4f8:	6078      	str	r0, [r7, #4]
 801b4fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801b4fc:	230f      	movs	r3, #15
 801b4fe:	18fb      	adds	r3, r7, r3
 801b500:	2200      	movs	r2, #0
 801b502:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801b504:	683b      	ldr	r3, [r7, #0]
 801b506:	889a      	ldrh	r2, [r3, #4]
 801b508:	230e      	movs	r3, #14
 801b50a:	18fb      	adds	r3, r7, r3
 801b50c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b50e:	683b      	ldr	r3, [r7, #0]
 801b510:	781b      	ldrb	r3, [r3, #0]
 801b512:	001a      	movs	r2, r3
 801b514:	2360      	movs	r3, #96	@ 0x60
 801b516:	4013      	ands	r3, r2
 801b518:	2b40      	cmp	r3, #64	@ 0x40
 801b51a:	d006      	beq.n	801b52a <USBD_StdEPReq+0x38>
 801b51c:	d900      	bls.n	801b520 <USBD_StdEPReq+0x2e>
 801b51e:	e190      	b.n	801b842 <USBD_StdEPReq+0x350>
 801b520:	2b00      	cmp	r3, #0
 801b522:	d00c      	beq.n	801b53e <USBD_StdEPReq+0x4c>
 801b524:	2b20      	cmp	r3, #32
 801b526:	d000      	beq.n	801b52a <USBD_StdEPReq+0x38>
 801b528:	e18b      	b.n	801b842 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b52a:	687a      	ldr	r2, [r7, #4]
 801b52c:	23ad      	movs	r3, #173	@ 0xad
 801b52e:	009b      	lsls	r3, r3, #2
 801b530:	58d3      	ldr	r3, [r2, r3]
 801b532:	689b      	ldr	r3, [r3, #8]
 801b534:	6839      	ldr	r1, [r7, #0]
 801b536:	687a      	ldr	r2, [r7, #4]
 801b538:	0010      	movs	r0, r2
 801b53a:	4798      	blx	r3
      break;
 801b53c:	e188      	b.n	801b850 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801b53e:	683b      	ldr	r3, [r7, #0]
 801b540:	781b      	ldrb	r3, [r3, #0]
 801b542:	001a      	movs	r2, r3
 801b544:	2360      	movs	r3, #96	@ 0x60
 801b546:	4013      	ands	r3, r2
 801b548:	2b20      	cmp	r3, #32
 801b54a:	d10f      	bne.n	801b56c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b54c:	687a      	ldr	r2, [r7, #4]
 801b54e:	23ad      	movs	r3, #173	@ 0xad
 801b550:	009b      	lsls	r3, r3, #2
 801b552:	58d3      	ldr	r3, [r2, r3]
 801b554:	689b      	ldr	r3, [r3, #8]
 801b556:	250f      	movs	r5, #15
 801b558:	197c      	adds	r4, r7, r5
 801b55a:	6839      	ldr	r1, [r7, #0]
 801b55c:	687a      	ldr	r2, [r7, #4]
 801b55e:	0010      	movs	r0, r2
 801b560:	4798      	blx	r3
 801b562:	0003      	movs	r3, r0
 801b564:	7023      	strb	r3, [r4, #0]

        return ret;
 801b566:	197b      	adds	r3, r7, r5
 801b568:	781b      	ldrb	r3, [r3, #0]
 801b56a:	e174      	b.n	801b856 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801b56c:	683b      	ldr	r3, [r7, #0]
 801b56e:	785b      	ldrb	r3, [r3, #1]
 801b570:	2b03      	cmp	r3, #3
 801b572:	d007      	beq.n	801b584 <USBD_StdEPReq+0x92>
 801b574:	dd00      	ble.n	801b578 <USBD_StdEPReq+0x86>
 801b576:	e15c      	b.n	801b832 <USBD_StdEPReq+0x340>
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d100      	bne.n	801b57e <USBD_StdEPReq+0x8c>
 801b57c:	e092      	b.n	801b6a4 <USBD_StdEPReq+0x1b2>
 801b57e:	2b01      	cmp	r3, #1
 801b580:	d04b      	beq.n	801b61a <USBD_StdEPReq+0x128>
 801b582:	e156      	b.n	801b832 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b584:	687a      	ldr	r2, [r7, #4]
 801b586:	23a7      	movs	r3, #167	@ 0xa7
 801b588:	009b      	lsls	r3, r3, #2
 801b58a:	5cd3      	ldrb	r3, [r2, r3]
 801b58c:	2b02      	cmp	r3, #2
 801b58e:	d002      	beq.n	801b596 <USBD_StdEPReq+0xa4>
 801b590:	2b03      	cmp	r3, #3
 801b592:	d01d      	beq.n	801b5d0 <USBD_StdEPReq+0xde>
 801b594:	e039      	b.n	801b60a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b596:	220e      	movs	r2, #14
 801b598:	18bb      	adds	r3, r7, r2
 801b59a:	781b      	ldrb	r3, [r3, #0]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d010      	beq.n	801b5c2 <USBD_StdEPReq+0xd0>
 801b5a0:	18bb      	adds	r3, r7, r2
 801b5a2:	781b      	ldrb	r3, [r3, #0]
 801b5a4:	2b80      	cmp	r3, #128	@ 0x80
 801b5a6:	d00c      	beq.n	801b5c2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b5a8:	18bb      	adds	r3, r7, r2
 801b5aa:	781a      	ldrb	r2, [r3, #0]
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	0011      	movs	r1, r2
 801b5b0:	0018      	movs	r0, r3
 801b5b2:	f001 fa10 	bl	801c9d6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	2180      	movs	r1, #128	@ 0x80
 801b5ba:	0018      	movs	r0, r3
 801b5bc:	f001 fa0b 	bl	801c9d6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b5c0:	e02a      	b.n	801b618 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801b5c2:	683a      	ldr	r2, [r7, #0]
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	0011      	movs	r1, r2
 801b5c8:	0018      	movs	r0, r3
 801b5ca:	f000 fcdc 	bl	801bf86 <USBD_CtlError>
              break;
 801b5ce:	e023      	b.n	801b618 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b5d0:	683b      	ldr	r3, [r7, #0]
 801b5d2:	885b      	ldrh	r3, [r3, #2]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d113      	bne.n	801b600 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801b5d8:	220e      	movs	r2, #14
 801b5da:	18bb      	adds	r3, r7, r2
 801b5dc:	781b      	ldrb	r3, [r3, #0]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d00e      	beq.n	801b600 <USBD_StdEPReq+0x10e>
 801b5e2:	18bb      	adds	r3, r7, r2
 801b5e4:	781b      	ldrb	r3, [r3, #0]
 801b5e6:	2b80      	cmp	r3, #128	@ 0x80
 801b5e8:	d00a      	beq.n	801b600 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b5ea:	683b      	ldr	r3, [r7, #0]
 801b5ec:	88db      	ldrh	r3, [r3, #6]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d106      	bne.n	801b600 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801b5f2:	18bb      	adds	r3, r7, r2
 801b5f4:	781a      	ldrb	r2, [r3, #0]
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	0011      	movs	r1, r2
 801b5fa:	0018      	movs	r0, r3
 801b5fc:	f001 f9eb 	bl	801c9d6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	0018      	movs	r0, r3
 801b604:	f000 fda7 	bl	801c156 <USBD_CtlSendStatus>

              break;
 801b608:	e006      	b.n	801b618 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801b60a:	683a      	ldr	r2, [r7, #0]
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	0011      	movs	r1, r2
 801b610:	0018      	movs	r0, r3
 801b612:	f000 fcb8 	bl	801bf86 <USBD_CtlError>
              break;
 801b616:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b618:	e112      	b.n	801b840 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b61a:	687a      	ldr	r2, [r7, #4]
 801b61c:	23a7      	movs	r3, #167	@ 0xa7
 801b61e:	009b      	lsls	r3, r3, #2
 801b620:	5cd3      	ldrb	r3, [r2, r3]
 801b622:	2b02      	cmp	r3, #2
 801b624:	d002      	beq.n	801b62c <USBD_StdEPReq+0x13a>
 801b626:	2b03      	cmp	r3, #3
 801b628:	d01d      	beq.n	801b666 <USBD_StdEPReq+0x174>
 801b62a:	e032      	b.n	801b692 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b62c:	220e      	movs	r2, #14
 801b62e:	18bb      	adds	r3, r7, r2
 801b630:	781b      	ldrb	r3, [r3, #0]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d010      	beq.n	801b658 <USBD_StdEPReq+0x166>
 801b636:	18bb      	adds	r3, r7, r2
 801b638:	781b      	ldrb	r3, [r3, #0]
 801b63a:	2b80      	cmp	r3, #128	@ 0x80
 801b63c:	d00c      	beq.n	801b658 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b63e:	18bb      	adds	r3, r7, r2
 801b640:	781a      	ldrb	r2, [r3, #0]
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	0011      	movs	r1, r2
 801b646:	0018      	movs	r0, r3
 801b648:	f001 f9c5 	bl	801c9d6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	2180      	movs	r1, #128	@ 0x80
 801b650:	0018      	movs	r0, r3
 801b652:	f001 f9c0 	bl	801c9d6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b656:	e024      	b.n	801b6a2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801b658:	683a      	ldr	r2, [r7, #0]
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	0011      	movs	r1, r2
 801b65e:	0018      	movs	r0, r3
 801b660:	f000 fc91 	bl	801bf86 <USBD_CtlError>
              break;
 801b664:	e01d      	b.n	801b6a2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b666:	683b      	ldr	r3, [r7, #0]
 801b668:	885b      	ldrh	r3, [r3, #2]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d118      	bne.n	801b6a0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b66e:	210e      	movs	r1, #14
 801b670:	187b      	adds	r3, r7, r1
 801b672:	781b      	ldrb	r3, [r3, #0]
 801b674:	227f      	movs	r2, #127	@ 0x7f
 801b676:	4013      	ands	r3, r2
 801b678:	d006      	beq.n	801b688 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801b67a:	187b      	adds	r3, r7, r1
 801b67c:	781a      	ldrb	r2, [r3, #0]
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	0011      	movs	r1, r2
 801b682:	0018      	movs	r0, r3
 801b684:	f001 f9d2 	bl	801ca2c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	0018      	movs	r0, r3
 801b68c:	f000 fd63 	bl	801c156 <USBD_CtlSendStatus>
              }
              break;
 801b690:	e006      	b.n	801b6a0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801b692:	683a      	ldr	r2, [r7, #0]
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	0011      	movs	r1, r2
 801b698:	0018      	movs	r0, r3
 801b69a:	f000 fc74 	bl	801bf86 <USBD_CtlError>
              break;
 801b69e:	e000      	b.n	801b6a2 <USBD_StdEPReq+0x1b0>
              break;
 801b6a0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b6a2:	e0cd      	b.n	801b840 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b6a4:	687a      	ldr	r2, [r7, #4]
 801b6a6:	23a7      	movs	r3, #167	@ 0xa7
 801b6a8:	009b      	lsls	r3, r3, #2
 801b6aa:	5cd3      	ldrb	r3, [r2, r3]
 801b6ac:	2b02      	cmp	r3, #2
 801b6ae:	d002      	beq.n	801b6b6 <USBD_StdEPReq+0x1c4>
 801b6b0:	2b03      	cmp	r3, #3
 801b6b2:	d03c      	beq.n	801b72e <USBD_StdEPReq+0x23c>
 801b6b4:	e0b5      	b.n	801b822 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b6b6:	220e      	movs	r2, #14
 801b6b8:	18bb      	adds	r3, r7, r2
 801b6ba:	781b      	ldrb	r3, [r3, #0]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d00a      	beq.n	801b6d6 <USBD_StdEPReq+0x1e4>
 801b6c0:	18bb      	adds	r3, r7, r2
 801b6c2:	781b      	ldrb	r3, [r3, #0]
 801b6c4:	2b80      	cmp	r3, #128	@ 0x80
 801b6c6:	d006      	beq.n	801b6d6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801b6c8:	683a      	ldr	r2, [r7, #0]
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	0011      	movs	r1, r2
 801b6ce:	0018      	movs	r0, r3
 801b6d0:	f000 fc59 	bl	801bf86 <USBD_CtlError>
                break;
 801b6d4:	e0ac      	b.n	801b830 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b6d6:	220e      	movs	r2, #14
 801b6d8:	18bb      	adds	r3, r7, r2
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	b25b      	sxtb	r3, r3
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	da0c      	bge.n	801b6fc <USBD_StdEPReq+0x20a>
 801b6e2:	18bb      	adds	r3, r7, r2
 801b6e4:	781b      	ldrb	r3, [r3, #0]
 801b6e6:	227f      	movs	r2, #127	@ 0x7f
 801b6e8:	401a      	ands	r2, r3
 801b6ea:	0013      	movs	r3, r2
 801b6ec:	009b      	lsls	r3, r3, #2
 801b6ee:	189b      	adds	r3, r3, r2
 801b6f0:	009b      	lsls	r3, r3, #2
 801b6f2:	3310      	adds	r3, #16
 801b6f4:	687a      	ldr	r2, [r7, #4]
 801b6f6:	18d3      	adds	r3, r2, r3
 801b6f8:	3304      	adds	r3, #4
 801b6fa:	e00d      	b.n	801b718 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b6fc:	230e      	movs	r3, #14
 801b6fe:	18fb      	adds	r3, r7, r3
 801b700:	781b      	ldrb	r3, [r3, #0]
 801b702:	227f      	movs	r2, #127	@ 0x7f
 801b704:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b706:	0013      	movs	r3, r2
 801b708:	009b      	lsls	r3, r3, #2
 801b70a:	189b      	adds	r3, r3, r2
 801b70c:	009b      	lsls	r3, r3, #2
 801b70e:	3351      	adds	r3, #81	@ 0x51
 801b710:	33ff      	adds	r3, #255	@ 0xff
 801b712:	687a      	ldr	r2, [r7, #4]
 801b714:	18d3      	adds	r3, r2, r3
 801b716:	3304      	adds	r3, #4
 801b718:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b71a:	68bb      	ldr	r3, [r7, #8]
 801b71c:	2200      	movs	r2, #0
 801b71e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b720:	68b9      	ldr	r1, [r7, #8]
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	2202      	movs	r2, #2
 801b726:	0018      	movs	r0, r3
 801b728:	f000 fcab 	bl	801c082 <USBD_CtlSendData>
              break;
 801b72c:	e080      	b.n	801b830 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b72e:	220e      	movs	r2, #14
 801b730:	18bb      	adds	r3, r7, r2
 801b732:	781b      	ldrb	r3, [r3, #0]
 801b734:	b25b      	sxtb	r3, r3
 801b736:	2b00      	cmp	r3, #0
 801b738:	da14      	bge.n	801b764 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b73a:	18bb      	adds	r3, r7, r2
 801b73c:	781b      	ldrb	r3, [r3, #0]
 801b73e:	220f      	movs	r2, #15
 801b740:	401a      	ands	r2, r3
 801b742:	6879      	ldr	r1, [r7, #4]
 801b744:	0013      	movs	r3, r2
 801b746:	009b      	lsls	r3, r3, #2
 801b748:	189b      	adds	r3, r3, r2
 801b74a:	009b      	lsls	r3, r3, #2
 801b74c:	18cb      	adds	r3, r1, r3
 801b74e:	3318      	adds	r3, #24
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d11e      	bne.n	801b794 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b756:	683a      	ldr	r2, [r7, #0]
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	0011      	movs	r1, r2
 801b75c:	0018      	movs	r0, r3
 801b75e:	f000 fc12 	bl	801bf86 <USBD_CtlError>
                  break;
 801b762:	e065      	b.n	801b830 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b764:	230e      	movs	r3, #14
 801b766:	18fb      	adds	r3, r7, r3
 801b768:	781b      	ldrb	r3, [r3, #0]
 801b76a:	220f      	movs	r2, #15
 801b76c:	401a      	ands	r2, r3
 801b76e:	6878      	ldr	r0, [r7, #4]
 801b770:	23ac      	movs	r3, #172	@ 0xac
 801b772:	0059      	lsls	r1, r3, #1
 801b774:	0013      	movs	r3, r2
 801b776:	009b      	lsls	r3, r3, #2
 801b778:	189b      	adds	r3, r3, r2
 801b77a:	009b      	lsls	r3, r3, #2
 801b77c:	18c3      	adds	r3, r0, r3
 801b77e:	185b      	adds	r3, r3, r1
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d106      	bne.n	801b794 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b786:	683a      	ldr	r2, [r7, #0]
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	0011      	movs	r1, r2
 801b78c:	0018      	movs	r0, r3
 801b78e:	f000 fbfa 	bl	801bf86 <USBD_CtlError>
                  break;
 801b792:	e04d      	b.n	801b830 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b794:	220e      	movs	r2, #14
 801b796:	18bb      	adds	r3, r7, r2
 801b798:	781b      	ldrb	r3, [r3, #0]
 801b79a:	b25b      	sxtb	r3, r3
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	da0c      	bge.n	801b7ba <USBD_StdEPReq+0x2c8>
 801b7a0:	18bb      	adds	r3, r7, r2
 801b7a2:	781b      	ldrb	r3, [r3, #0]
 801b7a4:	227f      	movs	r2, #127	@ 0x7f
 801b7a6:	401a      	ands	r2, r3
 801b7a8:	0013      	movs	r3, r2
 801b7aa:	009b      	lsls	r3, r3, #2
 801b7ac:	189b      	adds	r3, r3, r2
 801b7ae:	009b      	lsls	r3, r3, #2
 801b7b0:	3310      	adds	r3, #16
 801b7b2:	687a      	ldr	r2, [r7, #4]
 801b7b4:	18d3      	adds	r3, r2, r3
 801b7b6:	3304      	adds	r3, #4
 801b7b8:	e00d      	b.n	801b7d6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b7ba:	230e      	movs	r3, #14
 801b7bc:	18fb      	adds	r3, r7, r3
 801b7be:	781b      	ldrb	r3, [r3, #0]
 801b7c0:	227f      	movs	r2, #127	@ 0x7f
 801b7c2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b7c4:	0013      	movs	r3, r2
 801b7c6:	009b      	lsls	r3, r3, #2
 801b7c8:	189b      	adds	r3, r3, r2
 801b7ca:	009b      	lsls	r3, r3, #2
 801b7cc:	3351      	adds	r3, #81	@ 0x51
 801b7ce:	33ff      	adds	r3, #255	@ 0xff
 801b7d0:	687a      	ldr	r2, [r7, #4]
 801b7d2:	18d3      	adds	r3, r2, r3
 801b7d4:	3304      	adds	r3, #4
 801b7d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b7d8:	220e      	movs	r2, #14
 801b7da:	18bb      	adds	r3, r7, r2
 801b7dc:	781b      	ldrb	r3, [r3, #0]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d003      	beq.n	801b7ea <USBD_StdEPReq+0x2f8>
 801b7e2:	18bb      	adds	r3, r7, r2
 801b7e4:	781b      	ldrb	r3, [r3, #0]
 801b7e6:	2b80      	cmp	r3, #128	@ 0x80
 801b7e8:	d103      	bne.n	801b7f2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801b7ea:	68bb      	ldr	r3, [r7, #8]
 801b7ec:	2200      	movs	r2, #0
 801b7ee:	601a      	str	r2, [r3, #0]
 801b7f0:	e010      	b.n	801b814 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801b7f2:	230e      	movs	r3, #14
 801b7f4:	18fb      	adds	r3, r7, r3
 801b7f6:	781a      	ldrb	r2, [r3, #0]
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	0011      	movs	r1, r2
 801b7fc:	0018      	movs	r0, r3
 801b7fe:	f001 f940 	bl	801ca82 <USBD_LL_IsStallEP>
 801b802:	1e03      	subs	r3, r0, #0
 801b804:	d003      	beq.n	801b80e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801b806:	68bb      	ldr	r3, [r7, #8]
 801b808:	2201      	movs	r2, #1
 801b80a:	601a      	str	r2, [r3, #0]
 801b80c:	e002      	b.n	801b814 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801b80e:	68bb      	ldr	r3, [r7, #8]
 801b810:	2200      	movs	r2, #0
 801b812:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b814:	68b9      	ldr	r1, [r7, #8]
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	2202      	movs	r2, #2
 801b81a:	0018      	movs	r0, r3
 801b81c:	f000 fc31 	bl	801c082 <USBD_CtlSendData>
              break;
 801b820:	e006      	b.n	801b830 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801b822:	683a      	ldr	r2, [r7, #0]
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	0011      	movs	r1, r2
 801b828:	0018      	movs	r0, r3
 801b82a:	f000 fbac 	bl	801bf86 <USBD_CtlError>
              break;
 801b82e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b830:	e006      	b.n	801b840 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801b832:	683a      	ldr	r2, [r7, #0]
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	0011      	movs	r1, r2
 801b838:	0018      	movs	r0, r3
 801b83a:	f000 fba4 	bl	801bf86 <USBD_CtlError>
          break;
 801b83e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b840:	e006      	b.n	801b850 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801b842:	683a      	ldr	r2, [r7, #0]
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	0011      	movs	r1, r2
 801b848:	0018      	movs	r0, r3
 801b84a:	f000 fb9c 	bl	801bf86 <USBD_CtlError>
      break;
 801b84e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b850:	230f      	movs	r3, #15
 801b852:	18fb      	adds	r3, r7, r3
 801b854:	781b      	ldrb	r3, [r3, #0]
}
 801b856:	0018      	movs	r0, r3
 801b858:	46bd      	mov	sp, r7
 801b85a:	b004      	add	sp, #16
 801b85c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b860 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b860:	b580      	push	{r7, lr}
 801b862:	b084      	sub	sp, #16
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
 801b868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b86a:	2308      	movs	r3, #8
 801b86c:	18fb      	adds	r3, r7, r3
 801b86e:	2200      	movs	r2, #0
 801b870:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801b872:	2300      	movs	r3, #0
 801b874:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b876:	230b      	movs	r3, #11
 801b878:	18fb      	adds	r3, r7, r3
 801b87a:	2200      	movs	r2, #0
 801b87c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801b87e:	683b      	ldr	r3, [r7, #0]
 801b880:	885b      	ldrh	r3, [r3, #2]
 801b882:	0a1b      	lsrs	r3, r3, #8
 801b884:	b29b      	uxth	r3, r3
 801b886:	2b07      	cmp	r3, #7
 801b888:	d900      	bls.n	801b88c <USBD_GetDescriptor+0x2c>
 801b88a:	e159      	b.n	801bb40 <USBD_GetDescriptor+0x2e0>
 801b88c:	009a      	lsls	r2, r3, #2
 801b88e:	4bcb      	ldr	r3, [pc, #812]	@ (801bbbc <USBD_GetDescriptor+0x35c>)
 801b890:	18d3      	adds	r3, r2, r3
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b896:	687a      	ldr	r2, [r7, #4]
 801b898:	23ac      	movs	r3, #172	@ 0xac
 801b89a:	009b      	lsls	r3, r3, #2
 801b89c:	58d3      	ldr	r3, [r2, r3]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	687a      	ldr	r2, [r7, #4]
 801b8a2:	7c12      	ldrb	r2, [r2, #16]
 801b8a4:	2108      	movs	r1, #8
 801b8a6:	1879      	adds	r1, r7, r1
 801b8a8:	0010      	movs	r0, r2
 801b8aa:	4798      	blx	r3
 801b8ac:	0003      	movs	r3, r0
 801b8ae:	60fb      	str	r3, [r7, #12]
      break;
 801b8b0:	e153      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	7c1b      	ldrb	r3, [r3, #16]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d10f      	bne.n	801b8da <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801b8ba:	687a      	ldr	r2, [r7, #4]
 801b8bc:	23ad      	movs	r3, #173	@ 0xad
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	58d3      	ldr	r3, [r2, r3]
 801b8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8c4:	2208      	movs	r2, #8
 801b8c6:	18ba      	adds	r2, r7, r2
 801b8c8:	0010      	movs	r0, r2
 801b8ca:	4798      	blx	r3
 801b8cc:	0003      	movs	r3, r0
 801b8ce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	3301      	adds	r3, #1
 801b8d4:	2202      	movs	r2, #2
 801b8d6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b8d8:	e13f      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b8da:	687a      	ldr	r2, [r7, #4]
 801b8dc:	23ad      	movs	r3, #173	@ 0xad
 801b8de:	009b      	lsls	r3, r3, #2
 801b8e0:	58d3      	ldr	r3, [r2, r3]
 801b8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8e4:	2208      	movs	r2, #8
 801b8e6:	18ba      	adds	r2, r7, r2
 801b8e8:	0010      	movs	r0, r2
 801b8ea:	4798      	blx	r3
 801b8ec:	0003      	movs	r3, r0
 801b8ee:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	3301      	adds	r3, #1
 801b8f4:	2202      	movs	r2, #2
 801b8f6:	701a      	strb	r2, [r3, #0]
      break;
 801b8f8:	e12f      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b8fa:	683b      	ldr	r3, [r7, #0]
 801b8fc:	885b      	ldrh	r3, [r3, #2]
 801b8fe:	b2db      	uxtb	r3, r3
 801b900:	2b05      	cmp	r3, #5
 801b902:	d900      	bls.n	801b906 <USBD_GetDescriptor+0xa6>
 801b904:	e0d0      	b.n	801baa8 <USBD_GetDescriptor+0x248>
 801b906:	009a      	lsls	r2, r3, #2
 801b908:	4bad      	ldr	r3, [pc, #692]	@ (801bbc0 <USBD_GetDescriptor+0x360>)
 801b90a:	18d3      	adds	r3, r2, r3
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b910:	687a      	ldr	r2, [r7, #4]
 801b912:	23ac      	movs	r3, #172	@ 0xac
 801b914:	009b      	lsls	r3, r3, #2
 801b916:	58d3      	ldr	r3, [r2, r3]
 801b918:	685b      	ldr	r3, [r3, #4]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d00d      	beq.n	801b93a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b91e:	687a      	ldr	r2, [r7, #4]
 801b920:	23ac      	movs	r3, #172	@ 0xac
 801b922:	009b      	lsls	r3, r3, #2
 801b924:	58d3      	ldr	r3, [r2, r3]
 801b926:	685b      	ldr	r3, [r3, #4]
 801b928:	687a      	ldr	r2, [r7, #4]
 801b92a:	7c12      	ldrb	r2, [r2, #16]
 801b92c:	2108      	movs	r1, #8
 801b92e:	1879      	adds	r1, r7, r1
 801b930:	0010      	movs	r0, r2
 801b932:	4798      	blx	r3
 801b934:	0003      	movs	r3, r0
 801b936:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b938:	e0c3      	b.n	801bac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b93a:	683a      	ldr	r2, [r7, #0]
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	0011      	movs	r1, r2
 801b940:	0018      	movs	r0, r3
 801b942:	f000 fb20 	bl	801bf86 <USBD_CtlError>
            err++;
 801b946:	210b      	movs	r1, #11
 801b948:	187b      	adds	r3, r7, r1
 801b94a:	781a      	ldrb	r2, [r3, #0]
 801b94c:	187b      	adds	r3, r7, r1
 801b94e:	3201      	adds	r2, #1
 801b950:	701a      	strb	r2, [r3, #0]
          break;
 801b952:	e0b6      	b.n	801bac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b954:	687a      	ldr	r2, [r7, #4]
 801b956:	23ac      	movs	r3, #172	@ 0xac
 801b958:	009b      	lsls	r3, r3, #2
 801b95a:	58d3      	ldr	r3, [r2, r3]
 801b95c:	689b      	ldr	r3, [r3, #8]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d00d      	beq.n	801b97e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801b962:	687a      	ldr	r2, [r7, #4]
 801b964:	23ac      	movs	r3, #172	@ 0xac
 801b966:	009b      	lsls	r3, r3, #2
 801b968:	58d3      	ldr	r3, [r2, r3]
 801b96a:	689b      	ldr	r3, [r3, #8]
 801b96c:	687a      	ldr	r2, [r7, #4]
 801b96e:	7c12      	ldrb	r2, [r2, #16]
 801b970:	2108      	movs	r1, #8
 801b972:	1879      	adds	r1, r7, r1
 801b974:	0010      	movs	r0, r2
 801b976:	4798      	blx	r3
 801b978:	0003      	movs	r3, r0
 801b97a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b97c:	e0a1      	b.n	801bac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b97e:	683a      	ldr	r2, [r7, #0]
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	0011      	movs	r1, r2
 801b984:	0018      	movs	r0, r3
 801b986:	f000 fafe 	bl	801bf86 <USBD_CtlError>
            err++;
 801b98a:	210b      	movs	r1, #11
 801b98c:	187b      	adds	r3, r7, r1
 801b98e:	781a      	ldrb	r2, [r3, #0]
 801b990:	187b      	adds	r3, r7, r1
 801b992:	3201      	adds	r2, #1
 801b994:	701a      	strb	r2, [r3, #0]
          break;
 801b996:	e094      	b.n	801bac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801b998:	687a      	ldr	r2, [r7, #4]
 801b99a:	23ac      	movs	r3, #172	@ 0xac
 801b99c:	009b      	lsls	r3, r3, #2
 801b99e:	58d3      	ldr	r3, [r2, r3]
 801b9a0:	68db      	ldr	r3, [r3, #12]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d00d      	beq.n	801b9c2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801b9a6:	687a      	ldr	r2, [r7, #4]
 801b9a8:	23ac      	movs	r3, #172	@ 0xac
 801b9aa:	009b      	lsls	r3, r3, #2
 801b9ac:	58d3      	ldr	r3, [r2, r3]
 801b9ae:	68db      	ldr	r3, [r3, #12]
 801b9b0:	687a      	ldr	r2, [r7, #4]
 801b9b2:	7c12      	ldrb	r2, [r2, #16]
 801b9b4:	2108      	movs	r1, #8
 801b9b6:	1879      	adds	r1, r7, r1
 801b9b8:	0010      	movs	r0, r2
 801b9ba:	4798      	blx	r3
 801b9bc:	0003      	movs	r3, r0
 801b9be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b9c0:	e07f      	b.n	801bac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b9c2:	683a      	ldr	r2, [r7, #0]
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	0011      	movs	r1, r2
 801b9c8:	0018      	movs	r0, r3
 801b9ca:	f000 fadc 	bl	801bf86 <USBD_CtlError>
            err++;
 801b9ce:	210b      	movs	r1, #11
 801b9d0:	187b      	adds	r3, r7, r1
 801b9d2:	781a      	ldrb	r2, [r3, #0]
 801b9d4:	187b      	adds	r3, r7, r1
 801b9d6:	3201      	adds	r2, #1
 801b9d8:	701a      	strb	r2, [r3, #0]
          break;
 801b9da:	e072      	b.n	801bac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801b9dc:	687a      	ldr	r2, [r7, #4]
 801b9de:	23ac      	movs	r3, #172	@ 0xac
 801b9e0:	009b      	lsls	r3, r3, #2
 801b9e2:	58d3      	ldr	r3, [r2, r3]
 801b9e4:	691b      	ldr	r3, [r3, #16]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d00d      	beq.n	801ba06 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801b9ea:	687a      	ldr	r2, [r7, #4]
 801b9ec:	23ac      	movs	r3, #172	@ 0xac
 801b9ee:	009b      	lsls	r3, r3, #2
 801b9f0:	58d3      	ldr	r3, [r2, r3]
 801b9f2:	691b      	ldr	r3, [r3, #16]
 801b9f4:	687a      	ldr	r2, [r7, #4]
 801b9f6:	7c12      	ldrb	r2, [r2, #16]
 801b9f8:	2108      	movs	r1, #8
 801b9fa:	1879      	adds	r1, r7, r1
 801b9fc:	0010      	movs	r0, r2
 801b9fe:	4798      	blx	r3
 801ba00:	0003      	movs	r3, r0
 801ba02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba04:	e05d      	b.n	801bac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba06:	683a      	ldr	r2, [r7, #0]
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	0011      	movs	r1, r2
 801ba0c:	0018      	movs	r0, r3
 801ba0e:	f000 faba 	bl	801bf86 <USBD_CtlError>
            err++;
 801ba12:	210b      	movs	r1, #11
 801ba14:	187b      	adds	r3, r7, r1
 801ba16:	781a      	ldrb	r2, [r3, #0]
 801ba18:	187b      	adds	r3, r7, r1
 801ba1a:	3201      	adds	r2, #1
 801ba1c:	701a      	strb	r2, [r3, #0]
          break;
 801ba1e:	e050      	b.n	801bac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ba20:	687a      	ldr	r2, [r7, #4]
 801ba22:	23ac      	movs	r3, #172	@ 0xac
 801ba24:	009b      	lsls	r3, r3, #2
 801ba26:	58d3      	ldr	r3, [r2, r3]
 801ba28:	695b      	ldr	r3, [r3, #20]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d00d      	beq.n	801ba4a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ba2e:	687a      	ldr	r2, [r7, #4]
 801ba30:	23ac      	movs	r3, #172	@ 0xac
 801ba32:	009b      	lsls	r3, r3, #2
 801ba34:	58d3      	ldr	r3, [r2, r3]
 801ba36:	695b      	ldr	r3, [r3, #20]
 801ba38:	687a      	ldr	r2, [r7, #4]
 801ba3a:	7c12      	ldrb	r2, [r2, #16]
 801ba3c:	2108      	movs	r1, #8
 801ba3e:	1879      	adds	r1, r7, r1
 801ba40:	0010      	movs	r0, r2
 801ba42:	4798      	blx	r3
 801ba44:	0003      	movs	r3, r0
 801ba46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba48:	e03b      	b.n	801bac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba4a:	683a      	ldr	r2, [r7, #0]
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	0011      	movs	r1, r2
 801ba50:	0018      	movs	r0, r3
 801ba52:	f000 fa98 	bl	801bf86 <USBD_CtlError>
            err++;
 801ba56:	210b      	movs	r1, #11
 801ba58:	187b      	adds	r3, r7, r1
 801ba5a:	781a      	ldrb	r2, [r3, #0]
 801ba5c:	187b      	adds	r3, r7, r1
 801ba5e:	3201      	adds	r2, #1
 801ba60:	701a      	strb	r2, [r3, #0]
          break;
 801ba62:	e02e      	b.n	801bac2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ba64:	687a      	ldr	r2, [r7, #4]
 801ba66:	23ac      	movs	r3, #172	@ 0xac
 801ba68:	009b      	lsls	r3, r3, #2
 801ba6a:	58d3      	ldr	r3, [r2, r3]
 801ba6c:	699b      	ldr	r3, [r3, #24]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d00d      	beq.n	801ba8e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ba72:	687a      	ldr	r2, [r7, #4]
 801ba74:	23ac      	movs	r3, #172	@ 0xac
 801ba76:	009b      	lsls	r3, r3, #2
 801ba78:	58d3      	ldr	r3, [r2, r3]
 801ba7a:	699b      	ldr	r3, [r3, #24]
 801ba7c:	687a      	ldr	r2, [r7, #4]
 801ba7e:	7c12      	ldrb	r2, [r2, #16]
 801ba80:	2108      	movs	r1, #8
 801ba82:	1879      	adds	r1, r7, r1
 801ba84:	0010      	movs	r0, r2
 801ba86:	4798      	blx	r3
 801ba88:	0003      	movs	r3, r0
 801ba8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba8c:	e019      	b.n	801bac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba8e:	683a      	ldr	r2, [r7, #0]
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	0011      	movs	r1, r2
 801ba94:	0018      	movs	r0, r3
 801ba96:	f000 fa76 	bl	801bf86 <USBD_CtlError>
            err++;
 801ba9a:	210b      	movs	r1, #11
 801ba9c:	187b      	adds	r3, r7, r1
 801ba9e:	781a      	ldrb	r2, [r3, #0]
 801baa0:	187b      	adds	r3, r7, r1
 801baa2:	3201      	adds	r2, #1
 801baa4:	701a      	strb	r2, [r3, #0]
          break;
 801baa6:	e00c      	b.n	801bac2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801baa8:	683a      	ldr	r2, [r7, #0]
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	0011      	movs	r1, r2
 801baae:	0018      	movs	r0, r3
 801bab0:	f000 fa69 	bl	801bf86 <USBD_CtlError>
          err++;
 801bab4:	210b      	movs	r1, #11
 801bab6:	187b      	adds	r3, r7, r1
 801bab8:	781a      	ldrb	r2, [r3, #0]
 801baba:	187b      	adds	r3, r7, r1
 801babc:	3201      	adds	r2, #1
 801babe:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801bac0:	e04b      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>
 801bac2:	e04a      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	7c1b      	ldrb	r3, [r3, #16]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d10b      	bne.n	801bae4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801bacc:	687a      	ldr	r2, [r7, #4]
 801bace:	23ad      	movs	r3, #173	@ 0xad
 801bad0:	009b      	lsls	r3, r3, #2
 801bad2:	58d3      	ldr	r3, [r2, r3]
 801bad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bad6:	2208      	movs	r2, #8
 801bad8:	18ba      	adds	r2, r7, r2
 801bada:	0010      	movs	r0, r2
 801badc:	4798      	blx	r3
 801bade:	0003      	movs	r3, r0
 801bae0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bae2:	e03a      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801bae4:	683a      	ldr	r2, [r7, #0]
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	0011      	movs	r1, r2
 801baea:	0018      	movs	r0, r3
 801baec:	f000 fa4b 	bl	801bf86 <USBD_CtlError>
        err++;
 801baf0:	210b      	movs	r1, #11
 801baf2:	187b      	adds	r3, r7, r1
 801baf4:	781a      	ldrb	r2, [r3, #0]
 801baf6:	187b      	adds	r3, r7, r1
 801baf8:	3201      	adds	r2, #1
 801bafa:	701a      	strb	r2, [r3, #0]
      break;
 801bafc:	e02d      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	7c1b      	ldrb	r3, [r3, #16]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d10f      	bne.n	801bb26 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801bb06:	687a      	ldr	r2, [r7, #4]
 801bb08:	23ad      	movs	r3, #173	@ 0xad
 801bb0a:	009b      	lsls	r3, r3, #2
 801bb0c:	58d3      	ldr	r3, [r2, r3]
 801bb0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb10:	2208      	movs	r2, #8
 801bb12:	18ba      	adds	r2, r7, r2
 801bb14:	0010      	movs	r0, r2
 801bb16:	4798      	blx	r3
 801bb18:	0003      	movs	r3, r0
 801bb1a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	3301      	adds	r3, #1
 801bb20:	2207      	movs	r2, #7
 801bb22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bb24:	e019      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801bb26:	683a      	ldr	r2, [r7, #0]
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	0011      	movs	r1, r2
 801bb2c:	0018      	movs	r0, r3
 801bb2e:	f000 fa2a 	bl	801bf86 <USBD_CtlError>
        err++;
 801bb32:	210b      	movs	r1, #11
 801bb34:	187b      	adds	r3, r7, r1
 801bb36:	781a      	ldrb	r2, [r3, #0]
 801bb38:	187b      	adds	r3, r7, r1
 801bb3a:	3201      	adds	r2, #1
 801bb3c:	701a      	strb	r2, [r3, #0]
      break;
 801bb3e:	e00c      	b.n	801bb5a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801bb40:	683a      	ldr	r2, [r7, #0]
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	0011      	movs	r1, r2
 801bb46:	0018      	movs	r0, r3
 801bb48:	f000 fa1d 	bl	801bf86 <USBD_CtlError>
      err++;
 801bb4c:	210b      	movs	r1, #11
 801bb4e:	187b      	adds	r3, r7, r1
 801bb50:	781a      	ldrb	r2, [r3, #0]
 801bb52:	187b      	adds	r3, r7, r1
 801bb54:	3201      	adds	r2, #1
 801bb56:	701a      	strb	r2, [r3, #0]
      break;
 801bb58:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801bb5a:	230b      	movs	r3, #11
 801bb5c:	18fb      	adds	r3, r7, r3
 801bb5e:	781b      	ldrb	r3, [r3, #0]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d127      	bne.n	801bbb4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801bb64:	2108      	movs	r1, #8
 801bb66:	187b      	adds	r3, r7, r1
 801bb68:	881b      	ldrh	r3, [r3, #0]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d019      	beq.n	801bba2 <USBD_GetDescriptor+0x342>
 801bb6e:	683b      	ldr	r3, [r7, #0]
 801bb70:	88db      	ldrh	r3, [r3, #6]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d015      	beq.n	801bba2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801bb76:	683b      	ldr	r3, [r7, #0]
 801bb78:	88da      	ldrh	r2, [r3, #6]
 801bb7a:	187b      	adds	r3, r7, r1
 801bb7c:	881b      	ldrh	r3, [r3, #0]
 801bb7e:	1c18      	adds	r0, r3, #0
 801bb80:	1c11      	adds	r1, r2, #0
 801bb82:	b28a      	uxth	r2, r1
 801bb84:	b283      	uxth	r3, r0
 801bb86:	429a      	cmp	r2, r3
 801bb88:	d900      	bls.n	801bb8c <USBD_GetDescriptor+0x32c>
 801bb8a:	1c01      	adds	r1, r0, #0
 801bb8c:	b28a      	uxth	r2, r1
 801bb8e:	2108      	movs	r1, #8
 801bb90:	187b      	adds	r3, r7, r1
 801bb92:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801bb94:	187b      	adds	r3, r7, r1
 801bb96:	881a      	ldrh	r2, [r3, #0]
 801bb98:	68f9      	ldr	r1, [r7, #12]
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	0018      	movs	r0, r3
 801bb9e:	f000 fa70 	bl	801c082 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801bba2:	683b      	ldr	r3, [r7, #0]
 801bba4:	88db      	ldrh	r3, [r3, #6]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d105      	bne.n	801bbb6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	0018      	movs	r0, r3
 801bbae:	f000 fad2 	bl	801c156 <USBD_CtlSendStatus>
 801bbb2:	e000      	b.n	801bbb6 <USBD_GetDescriptor+0x356>
    return;
 801bbb4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bbb6:	46bd      	mov	sp, r7
 801bbb8:	b004      	add	sp, #16
 801bbba:	bd80      	pop	{r7, pc}
 801bbbc:	08024964 	.word	0x08024964
 801bbc0:	08024984 	.word	0x08024984

0801bbc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bbc4:	b590      	push	{r4, r7, lr}
 801bbc6:	b085      	sub	sp, #20
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	6078      	str	r0, [r7, #4]
 801bbcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801bbce:	683b      	ldr	r3, [r7, #0]
 801bbd0:	889b      	ldrh	r3, [r3, #4]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d13d      	bne.n	801bc52 <USBD_SetAddress+0x8e>
 801bbd6:	683b      	ldr	r3, [r7, #0]
 801bbd8:	88db      	ldrh	r3, [r3, #6]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d139      	bne.n	801bc52 <USBD_SetAddress+0x8e>
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	885b      	ldrh	r3, [r3, #2]
 801bbe2:	2b7f      	cmp	r3, #127	@ 0x7f
 801bbe4:	d835      	bhi.n	801bc52 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801bbe6:	683b      	ldr	r3, [r7, #0]
 801bbe8:	885b      	ldrh	r3, [r3, #2]
 801bbea:	b2da      	uxtb	r2, r3
 801bbec:	230f      	movs	r3, #15
 801bbee:	18fb      	adds	r3, r7, r3
 801bbf0:	217f      	movs	r1, #127	@ 0x7f
 801bbf2:	400a      	ands	r2, r1
 801bbf4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bbf6:	687a      	ldr	r2, [r7, #4]
 801bbf8:	23a7      	movs	r3, #167	@ 0xa7
 801bbfa:	009b      	lsls	r3, r3, #2
 801bbfc:	5cd3      	ldrb	r3, [r2, r3]
 801bbfe:	2b03      	cmp	r3, #3
 801bc00:	d106      	bne.n	801bc10 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801bc02:	683a      	ldr	r2, [r7, #0]
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	0011      	movs	r1, r2
 801bc08:	0018      	movs	r0, r3
 801bc0a:	f000 f9bc 	bl	801bf86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc0e:	e027      	b.n	801bc60 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	240f      	movs	r4, #15
 801bc14:	193a      	adds	r2, r7, r4
 801bc16:	4914      	ldr	r1, [pc, #80]	@ (801bc68 <USBD_SetAddress+0xa4>)
 801bc18:	7812      	ldrb	r2, [r2, #0]
 801bc1a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801bc1c:	193b      	adds	r3, r7, r4
 801bc1e:	781a      	ldrb	r2, [r3, #0]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	0011      	movs	r1, r2
 801bc24:	0018      	movs	r0, r3
 801bc26:	f000 ff5d 	bl	801cae4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	0018      	movs	r0, r3
 801bc2e:	f000 fa92 	bl	801c156 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801bc32:	193b      	adds	r3, r7, r4
 801bc34:	781b      	ldrb	r3, [r3, #0]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d005      	beq.n	801bc46 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bc3a:	687a      	ldr	r2, [r7, #4]
 801bc3c:	23a7      	movs	r3, #167	@ 0xa7
 801bc3e:	009b      	lsls	r3, r3, #2
 801bc40:	2102      	movs	r1, #2
 801bc42:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc44:	e00c      	b.n	801bc60 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801bc46:	687a      	ldr	r2, [r7, #4]
 801bc48:	23a7      	movs	r3, #167	@ 0xa7
 801bc4a:	009b      	lsls	r3, r3, #2
 801bc4c:	2101      	movs	r1, #1
 801bc4e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc50:	e006      	b.n	801bc60 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801bc52:	683a      	ldr	r2, [r7, #0]
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	0011      	movs	r1, r2
 801bc58:	0018      	movs	r0, r3
 801bc5a:	f000 f994 	bl	801bf86 <USBD_CtlError>
  }
}
 801bc5e:	46c0      	nop			@ (mov r8, r8)
 801bc60:	46c0      	nop			@ (mov r8, r8)
 801bc62:	46bd      	mov	sp, r7
 801bc64:	b005      	add	sp, #20
 801bc66:	bd90      	pop	{r4, r7, pc}
 801bc68:	0000029e 	.word	0x0000029e

0801bc6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b082      	sub	sp, #8
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	6078      	str	r0, [r7, #4]
 801bc74:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801bc76:	683b      	ldr	r3, [r7, #0]
 801bc78:	885b      	ldrh	r3, [r3, #2]
 801bc7a:	b2da      	uxtb	r2, r3
 801bc7c:	4b4c      	ldr	r3, [pc, #304]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bc7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801bc80:	4b4b      	ldr	r3, [pc, #300]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bc82:	781b      	ldrb	r3, [r3, #0]
 801bc84:	2b01      	cmp	r3, #1
 801bc86:	d906      	bls.n	801bc96 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801bc88:	683a      	ldr	r2, [r7, #0]
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	0011      	movs	r1, r2
 801bc8e:	0018      	movs	r0, r3
 801bc90:	f000 f979 	bl	801bf86 <USBD_CtlError>
 801bc94:	e088      	b.n	801bda8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801bc96:	687a      	ldr	r2, [r7, #4]
 801bc98:	23a7      	movs	r3, #167	@ 0xa7
 801bc9a:	009b      	lsls	r3, r3, #2
 801bc9c:	5cd3      	ldrb	r3, [r2, r3]
 801bc9e:	2b02      	cmp	r3, #2
 801bca0:	d002      	beq.n	801bca8 <USBD_SetConfig+0x3c>
 801bca2:	2b03      	cmp	r3, #3
 801bca4:	d029      	beq.n	801bcfa <USBD_SetConfig+0x8e>
 801bca6:	e071      	b.n	801bd8c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801bca8:	4b41      	ldr	r3, [pc, #260]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bcaa:	781b      	ldrb	r3, [r3, #0]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d01f      	beq.n	801bcf0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801bcb0:	4b3f      	ldr	r3, [pc, #252]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	001a      	movs	r2, r3
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801bcba:	687a      	ldr	r2, [r7, #4]
 801bcbc:	23a7      	movs	r3, #167	@ 0xa7
 801bcbe:	009b      	lsls	r3, r3, #2
 801bcc0:	2103      	movs	r1, #3
 801bcc2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801bcc4:	4b3a      	ldr	r3, [pc, #232]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bcc6:	781a      	ldrb	r2, [r3, #0]
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	0011      	movs	r1, r2
 801bccc:	0018      	movs	r0, r3
 801bcce:	f7ff f8c6 	bl	801ae5e <USBD_SetClassConfig>
 801bcd2:	0003      	movs	r3, r0
 801bcd4:	2b02      	cmp	r3, #2
 801bcd6:	d106      	bne.n	801bce6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801bcd8:	683a      	ldr	r2, [r7, #0]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	0011      	movs	r1, r2
 801bcde:	0018      	movs	r0, r3
 801bce0:	f000 f951 	bl	801bf86 <USBD_CtlError>
            return;
 801bce4:	e060      	b.n	801bda8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	0018      	movs	r0, r3
 801bcea:	f000 fa34 	bl	801c156 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801bcee:	e05b      	b.n	801bda8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	0018      	movs	r0, r3
 801bcf4:	f000 fa2f 	bl	801c156 <USBD_CtlSendStatus>
        break;
 801bcf8:	e056      	b.n	801bda8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801bcfa:	4b2d      	ldr	r3, [pc, #180]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bcfc:	781b      	ldrb	r3, [r3, #0]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d115      	bne.n	801bd2e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801bd02:	687a      	ldr	r2, [r7, #4]
 801bd04:	23a7      	movs	r3, #167	@ 0xa7
 801bd06:	009b      	lsls	r3, r3, #2
 801bd08:	2102      	movs	r1, #2
 801bd0a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801bd0c:	4b28      	ldr	r3, [pc, #160]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bd0e:	781b      	ldrb	r3, [r3, #0]
 801bd10:	001a      	movs	r2, r3
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801bd16:	4b26      	ldr	r3, [pc, #152]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bd18:	781a      	ldrb	r2, [r3, #0]
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	0011      	movs	r1, r2
 801bd1e:	0018      	movs	r0, r3
 801bd20:	f7ff f8c4 	bl	801aeac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	0018      	movs	r0, r3
 801bd28:	f000 fa15 	bl	801c156 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801bd2c:	e03c      	b.n	801bda8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801bd2e:	4b20      	ldr	r3, [pc, #128]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bd30:	781b      	ldrb	r3, [r3, #0]
 801bd32:	001a      	movs	r2, r3
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	685b      	ldr	r3, [r3, #4]
 801bd38:	429a      	cmp	r2, r3
 801bd3a:	d022      	beq.n	801bd82 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	685b      	ldr	r3, [r3, #4]
 801bd40:	b2da      	uxtb	r2, r3
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	0011      	movs	r1, r2
 801bd46:	0018      	movs	r0, r3
 801bd48:	f7ff f8b0 	bl	801aeac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801bd4c:	4b18      	ldr	r3, [pc, #96]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bd4e:	781b      	ldrb	r3, [r3, #0]
 801bd50:	001a      	movs	r2, r3
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801bd56:	4b16      	ldr	r3, [pc, #88]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bd58:	781a      	ldrb	r2, [r3, #0]
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	0011      	movs	r1, r2
 801bd5e:	0018      	movs	r0, r3
 801bd60:	f7ff f87d 	bl	801ae5e <USBD_SetClassConfig>
 801bd64:	0003      	movs	r3, r0
 801bd66:	2b02      	cmp	r3, #2
 801bd68:	d106      	bne.n	801bd78 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801bd6a:	683a      	ldr	r2, [r7, #0]
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	0011      	movs	r1, r2
 801bd70:	0018      	movs	r0, r3
 801bd72:	f000 f908 	bl	801bf86 <USBD_CtlError>
            return;
 801bd76:	e017      	b.n	801bda8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	0018      	movs	r0, r3
 801bd7c:	f000 f9eb 	bl	801c156 <USBD_CtlSendStatus>
        break;
 801bd80:	e012      	b.n	801bda8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	0018      	movs	r0, r3
 801bd86:	f000 f9e6 	bl	801c156 <USBD_CtlSendStatus>
        break;
 801bd8a:	e00d      	b.n	801bda8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801bd8c:	683a      	ldr	r2, [r7, #0]
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	0011      	movs	r1, r2
 801bd92:	0018      	movs	r0, r3
 801bd94:	f000 f8f7 	bl	801bf86 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801bd98:	4b05      	ldr	r3, [pc, #20]	@ (801bdb0 <USBD_SetConfig+0x144>)
 801bd9a:	781a      	ldrb	r2, [r3, #0]
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	0011      	movs	r1, r2
 801bda0:	0018      	movs	r0, r3
 801bda2:	f7ff f883 	bl	801aeac <USBD_ClrClassConfig>
        break;
 801bda6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	b002      	add	sp, #8
 801bdac:	bd80      	pop	{r7, pc}
 801bdae:	46c0      	nop			@ (mov r8, r8)
 801bdb0:	20002518 	.word	0x20002518

0801bdb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b082      	sub	sp, #8
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
 801bdbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801bdbe:	683b      	ldr	r3, [r7, #0]
 801bdc0:	88db      	ldrh	r3, [r3, #6]
 801bdc2:	2b01      	cmp	r3, #1
 801bdc4:	d006      	beq.n	801bdd4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801bdc6:	683a      	ldr	r2, [r7, #0]
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	0011      	movs	r1, r2
 801bdcc:	0018      	movs	r0, r3
 801bdce:	f000 f8da 	bl	801bf86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801bdd2:	e026      	b.n	801be22 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801bdd4:	687a      	ldr	r2, [r7, #4]
 801bdd6:	23a7      	movs	r3, #167	@ 0xa7
 801bdd8:	009b      	lsls	r3, r3, #2
 801bdda:	5cd3      	ldrb	r3, [r2, r3]
 801bddc:	2b02      	cmp	r3, #2
 801bdde:	dc02      	bgt.n	801bde6 <USBD_GetConfig+0x32>
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	dc03      	bgt.n	801bdec <USBD_GetConfig+0x38>
 801bde4:	e016      	b.n	801be14 <USBD_GetConfig+0x60>
 801bde6:	2b03      	cmp	r3, #3
 801bde8:	d00c      	beq.n	801be04 <USBD_GetConfig+0x50>
 801bdea:	e013      	b.n	801be14 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	2200      	movs	r2, #0
 801bdf0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	3308      	adds	r3, #8
 801bdf6:	0019      	movs	r1, r3
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	2201      	movs	r2, #1
 801bdfc:	0018      	movs	r0, r3
 801bdfe:	f000 f940 	bl	801c082 <USBD_CtlSendData>
        break;
 801be02:	e00e      	b.n	801be22 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	1d19      	adds	r1, r3, #4
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	2201      	movs	r2, #1
 801be0c:	0018      	movs	r0, r3
 801be0e:	f000 f938 	bl	801c082 <USBD_CtlSendData>
        break;
 801be12:	e006      	b.n	801be22 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801be14:	683a      	ldr	r2, [r7, #0]
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	0011      	movs	r1, r2
 801be1a:	0018      	movs	r0, r3
 801be1c:	f000 f8b3 	bl	801bf86 <USBD_CtlError>
        break;
 801be20:	46c0      	nop			@ (mov r8, r8)
}
 801be22:	46c0      	nop			@ (mov r8, r8)
 801be24:	46bd      	mov	sp, r7
 801be26:	b002      	add	sp, #8
 801be28:	bd80      	pop	{r7, pc}

0801be2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801be2a:	b580      	push	{r7, lr}
 801be2c:	b082      	sub	sp, #8
 801be2e:	af00      	add	r7, sp, #0
 801be30:	6078      	str	r0, [r7, #4]
 801be32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801be34:	687a      	ldr	r2, [r7, #4]
 801be36:	23a7      	movs	r3, #167	@ 0xa7
 801be38:	009b      	lsls	r3, r3, #2
 801be3a:	5cd3      	ldrb	r3, [r2, r3]
 801be3c:	3b01      	subs	r3, #1
 801be3e:	2b02      	cmp	r3, #2
 801be40:	d822      	bhi.n	801be88 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801be42:	683b      	ldr	r3, [r7, #0]
 801be44:	88db      	ldrh	r3, [r3, #6]
 801be46:	2b02      	cmp	r3, #2
 801be48:	d006      	beq.n	801be58 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801be4a:	683a      	ldr	r2, [r7, #0]
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	0011      	movs	r1, r2
 801be50:	0018      	movs	r0, r3
 801be52:	f000 f898 	bl	801bf86 <USBD_CtlError>
        break;
 801be56:	e01e      	b.n	801be96 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	2201      	movs	r2, #1
 801be5c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801be5e:	687a      	ldr	r2, [r7, #4]
 801be60:	23a9      	movs	r3, #169	@ 0xa9
 801be62:	009b      	lsls	r3, r3, #2
 801be64:	58d3      	ldr	r3, [r2, r3]
 801be66:	2b00      	cmp	r3, #0
 801be68:	d005      	beq.n	801be76 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	68db      	ldr	r3, [r3, #12]
 801be6e:	2202      	movs	r2, #2
 801be70:	431a      	orrs	r2, r3
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	330c      	adds	r3, #12
 801be7a:	0019      	movs	r1, r3
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	2202      	movs	r2, #2
 801be80:	0018      	movs	r0, r3
 801be82:	f000 f8fe 	bl	801c082 <USBD_CtlSendData>
      break;
 801be86:	e006      	b.n	801be96 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801be88:	683a      	ldr	r2, [r7, #0]
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	0011      	movs	r1, r2
 801be8e:	0018      	movs	r0, r3
 801be90:	f000 f879 	bl	801bf86 <USBD_CtlError>
      break;
 801be94:	46c0      	nop			@ (mov r8, r8)
  }
}
 801be96:	46c0      	nop			@ (mov r8, r8)
 801be98:	46bd      	mov	sp, r7
 801be9a:	b002      	add	sp, #8
 801be9c:	bd80      	pop	{r7, pc}

0801be9e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801be9e:	b580      	push	{r7, lr}
 801bea0:	b082      	sub	sp, #8
 801bea2:	af00      	add	r7, sp, #0
 801bea4:	6078      	str	r0, [r7, #4]
 801bea6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bea8:	683b      	ldr	r3, [r7, #0]
 801beaa:	885b      	ldrh	r3, [r3, #2]
 801beac:	2b01      	cmp	r3, #1
 801beae:	d108      	bne.n	801bec2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801beb0:	687a      	ldr	r2, [r7, #4]
 801beb2:	23a9      	movs	r3, #169	@ 0xa9
 801beb4:	009b      	lsls	r3, r3, #2
 801beb6:	2101      	movs	r1, #1
 801beb8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	0018      	movs	r0, r3
 801bebe:	f000 f94a 	bl	801c156 <USBD_CtlSendStatus>
  }
}
 801bec2:	46c0      	nop			@ (mov r8, r8)
 801bec4:	46bd      	mov	sp, r7
 801bec6:	b002      	add	sp, #8
 801bec8:	bd80      	pop	{r7, pc}

0801beca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801beca:	b580      	push	{r7, lr}
 801becc:	b082      	sub	sp, #8
 801bece:	af00      	add	r7, sp, #0
 801bed0:	6078      	str	r0, [r7, #4]
 801bed2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bed4:	687a      	ldr	r2, [r7, #4]
 801bed6:	23a7      	movs	r3, #167	@ 0xa7
 801bed8:	009b      	lsls	r3, r3, #2
 801beda:	5cd3      	ldrb	r3, [r2, r3]
 801bedc:	3b01      	subs	r3, #1
 801bede:	2b02      	cmp	r3, #2
 801bee0:	d80d      	bhi.n	801befe <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bee2:	683b      	ldr	r3, [r7, #0]
 801bee4:	885b      	ldrh	r3, [r3, #2]
 801bee6:	2b01      	cmp	r3, #1
 801bee8:	d110      	bne.n	801bf0c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801beea:	687a      	ldr	r2, [r7, #4]
 801beec:	23a9      	movs	r3, #169	@ 0xa9
 801beee:	009b      	lsls	r3, r3, #2
 801bef0:	2100      	movs	r1, #0
 801bef2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	0018      	movs	r0, r3
 801bef8:	f000 f92d 	bl	801c156 <USBD_CtlSendStatus>
      }
      break;
 801befc:	e006      	b.n	801bf0c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801befe:	683a      	ldr	r2, [r7, #0]
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	0011      	movs	r1, r2
 801bf04:	0018      	movs	r0, r3
 801bf06:	f000 f83e 	bl	801bf86 <USBD_CtlError>
      break;
 801bf0a:	e000      	b.n	801bf0e <USBD_ClrFeature+0x44>
      break;
 801bf0c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bf0e:	46c0      	nop			@ (mov r8, r8)
 801bf10:	46bd      	mov	sp, r7
 801bf12:	b002      	add	sp, #8
 801bf14:	bd80      	pop	{r7, pc}

0801bf16 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801bf16:	b580      	push	{r7, lr}
 801bf18:	b082      	sub	sp, #8
 801bf1a:	af00      	add	r7, sp, #0
 801bf1c:	6078      	str	r0, [r7, #4]
 801bf1e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801bf20:	683b      	ldr	r3, [r7, #0]
 801bf22:	781a      	ldrb	r2, [r3, #0]
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801bf28:	683b      	ldr	r3, [r7, #0]
 801bf2a:	785a      	ldrb	r2, [r3, #1]
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801bf30:	683b      	ldr	r3, [r7, #0]
 801bf32:	3302      	adds	r3, #2
 801bf34:	781b      	ldrb	r3, [r3, #0]
 801bf36:	001a      	movs	r2, r3
 801bf38:	683b      	ldr	r3, [r7, #0]
 801bf3a:	3303      	adds	r3, #3
 801bf3c:	781b      	ldrb	r3, [r3, #0]
 801bf3e:	021b      	lsls	r3, r3, #8
 801bf40:	b29b      	uxth	r3, r3
 801bf42:	18d3      	adds	r3, r2, r3
 801bf44:	b29a      	uxth	r2, r3
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801bf4a:	683b      	ldr	r3, [r7, #0]
 801bf4c:	3304      	adds	r3, #4
 801bf4e:	781b      	ldrb	r3, [r3, #0]
 801bf50:	001a      	movs	r2, r3
 801bf52:	683b      	ldr	r3, [r7, #0]
 801bf54:	3305      	adds	r3, #5
 801bf56:	781b      	ldrb	r3, [r3, #0]
 801bf58:	021b      	lsls	r3, r3, #8
 801bf5a:	b29b      	uxth	r3, r3
 801bf5c:	18d3      	adds	r3, r2, r3
 801bf5e:	b29a      	uxth	r2, r3
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801bf64:	683b      	ldr	r3, [r7, #0]
 801bf66:	3306      	adds	r3, #6
 801bf68:	781b      	ldrb	r3, [r3, #0]
 801bf6a:	001a      	movs	r2, r3
 801bf6c:	683b      	ldr	r3, [r7, #0]
 801bf6e:	3307      	adds	r3, #7
 801bf70:	781b      	ldrb	r3, [r3, #0]
 801bf72:	021b      	lsls	r3, r3, #8
 801bf74:	b29b      	uxth	r3, r3
 801bf76:	18d3      	adds	r3, r2, r3
 801bf78:	b29a      	uxth	r2, r3
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	80da      	strh	r2, [r3, #6]

}
 801bf7e:	46c0      	nop			@ (mov r8, r8)
 801bf80:	46bd      	mov	sp, r7
 801bf82:	b002      	add	sp, #8
 801bf84:	bd80      	pop	{r7, pc}

0801bf86 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801bf86:	b580      	push	{r7, lr}
 801bf88:	b082      	sub	sp, #8
 801bf8a:	af00      	add	r7, sp, #0
 801bf8c:	6078      	str	r0, [r7, #4]
 801bf8e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	2180      	movs	r1, #128	@ 0x80
 801bf94:	0018      	movs	r0, r3
 801bf96:	f000 fd1e 	bl	801c9d6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	2100      	movs	r1, #0
 801bf9e:	0018      	movs	r0, r3
 801bfa0:	f000 fd19 	bl	801c9d6 <USBD_LL_StallEP>
}
 801bfa4:	46c0      	nop			@ (mov r8, r8)
 801bfa6:	46bd      	mov	sp, r7
 801bfa8:	b002      	add	sp, #8
 801bfaa:	bd80      	pop	{r7, pc}

0801bfac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801bfac:	b590      	push	{r4, r7, lr}
 801bfae:	b087      	sub	sp, #28
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	60f8      	str	r0, [r7, #12]
 801bfb4:	60b9      	str	r1, [r7, #8]
 801bfb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801bfb8:	2417      	movs	r4, #23
 801bfba:	193b      	adds	r3, r7, r4
 801bfbc:	2200      	movs	r2, #0
 801bfbe:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d03c      	beq.n	801c040 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	0018      	movs	r0, r3
 801bfca:	f000 f83d 	bl	801c048 <USBD_GetLen>
 801bfce:	0003      	movs	r3, r0
 801bfd0:	3301      	adds	r3, #1
 801bfd2:	b29b      	uxth	r3, r3
 801bfd4:	18db      	adds	r3, r3, r3
 801bfd6:	b29a      	uxth	r2, r3
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801bfdc:	193b      	adds	r3, r7, r4
 801bfde:	781b      	ldrb	r3, [r3, #0]
 801bfe0:	193a      	adds	r2, r7, r4
 801bfe2:	1c59      	adds	r1, r3, #1
 801bfe4:	7011      	strb	r1, [r2, #0]
 801bfe6:	001a      	movs	r2, r3
 801bfe8:	68bb      	ldr	r3, [r7, #8]
 801bfea:	189b      	adds	r3, r3, r2
 801bfec:	687a      	ldr	r2, [r7, #4]
 801bfee:	7812      	ldrb	r2, [r2, #0]
 801bff0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801bff2:	193b      	adds	r3, r7, r4
 801bff4:	781b      	ldrb	r3, [r3, #0]
 801bff6:	193a      	adds	r2, r7, r4
 801bff8:	1c59      	adds	r1, r3, #1
 801bffa:	7011      	strb	r1, [r2, #0]
 801bffc:	001a      	movs	r2, r3
 801bffe:	68bb      	ldr	r3, [r7, #8]
 801c000:	189b      	adds	r3, r3, r2
 801c002:	2203      	movs	r2, #3
 801c004:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801c006:	e017      	b.n	801c038 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	1c5a      	adds	r2, r3, #1
 801c00c:	60fa      	str	r2, [r7, #12]
 801c00e:	2417      	movs	r4, #23
 801c010:	193a      	adds	r2, r7, r4
 801c012:	7812      	ldrb	r2, [r2, #0]
 801c014:	1939      	adds	r1, r7, r4
 801c016:	1c50      	adds	r0, r2, #1
 801c018:	7008      	strb	r0, [r1, #0]
 801c01a:	0011      	movs	r1, r2
 801c01c:	68ba      	ldr	r2, [r7, #8]
 801c01e:	1852      	adds	r2, r2, r1
 801c020:	781b      	ldrb	r3, [r3, #0]
 801c022:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801c024:	193b      	adds	r3, r7, r4
 801c026:	781b      	ldrb	r3, [r3, #0]
 801c028:	193a      	adds	r2, r7, r4
 801c02a:	1c59      	adds	r1, r3, #1
 801c02c:	7011      	strb	r1, [r2, #0]
 801c02e:	001a      	movs	r2, r3
 801c030:	68bb      	ldr	r3, [r7, #8]
 801c032:	189b      	adds	r3, r3, r2
 801c034:	2200      	movs	r2, #0
 801c036:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	781b      	ldrb	r3, [r3, #0]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d1e3      	bne.n	801c008 <USBD_GetString+0x5c>
    }
  }
}
 801c040:	46c0      	nop			@ (mov r8, r8)
 801c042:	46bd      	mov	sp, r7
 801c044:	b007      	add	sp, #28
 801c046:	bd90      	pop	{r4, r7, pc}

0801c048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c048:	b580      	push	{r7, lr}
 801c04a:	b084      	sub	sp, #16
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c050:	230f      	movs	r3, #15
 801c052:	18fb      	adds	r3, r7, r3
 801c054:	2200      	movs	r2, #0
 801c056:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801c058:	e008      	b.n	801c06c <USBD_GetLen+0x24>
  {
    len++;
 801c05a:	210f      	movs	r1, #15
 801c05c:	187b      	adds	r3, r7, r1
 801c05e:	781a      	ldrb	r2, [r3, #0]
 801c060:	187b      	adds	r3, r7, r1
 801c062:	3201      	adds	r2, #1
 801c064:	701a      	strb	r2, [r3, #0]
    buf++;
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	3301      	adds	r3, #1
 801c06a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	781b      	ldrb	r3, [r3, #0]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d1f2      	bne.n	801c05a <USBD_GetLen+0x12>
  }

  return len;
 801c074:	230f      	movs	r3, #15
 801c076:	18fb      	adds	r3, r7, r3
 801c078:	781b      	ldrb	r3, [r3, #0]
}
 801c07a:	0018      	movs	r0, r3
 801c07c:	46bd      	mov	sp, r7
 801c07e:	b004      	add	sp, #16
 801c080:	bd80      	pop	{r7, pc}

0801c082 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801c082:	b580      	push	{r7, lr}
 801c084:	b084      	sub	sp, #16
 801c086:	af00      	add	r7, sp, #0
 801c088:	60f8      	str	r0, [r7, #12]
 801c08a:	60b9      	str	r1, [r7, #8]
 801c08c:	1dbb      	adds	r3, r7, #6
 801c08e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c090:	68fa      	ldr	r2, [r7, #12]
 801c092:	23a5      	movs	r3, #165	@ 0xa5
 801c094:	009b      	lsls	r3, r3, #2
 801c096:	2102      	movs	r1, #2
 801c098:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801c09a:	1dbb      	adds	r3, r7, #6
 801c09c:	881a      	ldrh	r2, [r3, #0]
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801c0a2:	1dbb      	adds	r3, r7, #6
 801c0a4:	881a      	ldrh	r2, [r3, #0]
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c0aa:	1dbb      	adds	r3, r7, #6
 801c0ac:	881b      	ldrh	r3, [r3, #0]
 801c0ae:	68ba      	ldr	r2, [r7, #8]
 801c0b0:	68f8      	ldr	r0, [r7, #12]
 801c0b2:	2100      	movs	r1, #0
 801c0b4:	f000 fd41 	bl	801cb3a <USBD_LL_Transmit>

  return USBD_OK;
 801c0b8:	2300      	movs	r3, #0
}
 801c0ba:	0018      	movs	r0, r3
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	b004      	add	sp, #16
 801c0c0:	bd80      	pop	{r7, pc}

0801c0c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801c0c2:	b580      	push	{r7, lr}
 801c0c4:	b084      	sub	sp, #16
 801c0c6:	af00      	add	r7, sp, #0
 801c0c8:	60f8      	str	r0, [r7, #12]
 801c0ca:	60b9      	str	r1, [r7, #8]
 801c0cc:	1dbb      	adds	r3, r7, #6
 801c0ce:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c0d0:	1dbb      	adds	r3, r7, #6
 801c0d2:	881b      	ldrh	r3, [r3, #0]
 801c0d4:	68ba      	ldr	r2, [r7, #8]
 801c0d6:	68f8      	ldr	r0, [r7, #12]
 801c0d8:	2100      	movs	r1, #0
 801c0da:	f000 fd2e 	bl	801cb3a <USBD_LL_Transmit>

  return USBD_OK;
 801c0de:	2300      	movs	r3, #0
}
 801c0e0:	0018      	movs	r0, r3
 801c0e2:	46bd      	mov	sp, r7
 801c0e4:	b004      	add	sp, #16
 801c0e6:	bd80      	pop	{r7, pc}

0801c0e8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b084      	sub	sp, #16
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	60f8      	str	r0, [r7, #12]
 801c0f0:	60b9      	str	r1, [r7, #8]
 801c0f2:	1dbb      	adds	r3, r7, #6
 801c0f4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c0f6:	68fa      	ldr	r2, [r7, #12]
 801c0f8:	23a5      	movs	r3, #165	@ 0xa5
 801c0fa:	009b      	lsls	r3, r3, #2
 801c0fc:	2103      	movs	r1, #3
 801c0fe:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801c100:	1dbb      	adds	r3, r7, #6
 801c102:	8819      	ldrh	r1, [r3, #0]
 801c104:	68fa      	ldr	r2, [r7, #12]
 801c106:	23ae      	movs	r3, #174	@ 0xae
 801c108:	005b      	lsls	r3, r3, #1
 801c10a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801c10c:	1dbb      	adds	r3, r7, #6
 801c10e:	8819      	ldrh	r1, [r3, #0]
 801c110:	68fa      	ldr	r2, [r7, #12]
 801c112:	23b0      	movs	r3, #176	@ 0xb0
 801c114:	005b      	lsls	r3, r3, #1
 801c116:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c118:	1dbb      	adds	r3, r7, #6
 801c11a:	881b      	ldrh	r3, [r3, #0]
 801c11c:	68ba      	ldr	r2, [r7, #8]
 801c11e:	68f8      	ldr	r0, [r7, #12]
 801c120:	2100      	movs	r1, #0
 801c122:	f000 fd41 	bl	801cba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c126:	2300      	movs	r3, #0
}
 801c128:	0018      	movs	r0, r3
 801c12a:	46bd      	mov	sp, r7
 801c12c:	b004      	add	sp, #16
 801c12e:	bd80      	pop	{r7, pc}

0801c130 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b084      	sub	sp, #16
 801c134:	af00      	add	r7, sp, #0
 801c136:	60f8      	str	r0, [r7, #12]
 801c138:	60b9      	str	r1, [r7, #8]
 801c13a:	1dbb      	adds	r3, r7, #6
 801c13c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c13e:	1dbb      	adds	r3, r7, #6
 801c140:	881b      	ldrh	r3, [r3, #0]
 801c142:	68ba      	ldr	r2, [r7, #8]
 801c144:	68f8      	ldr	r0, [r7, #12]
 801c146:	2100      	movs	r1, #0
 801c148:	f000 fd2e 	bl	801cba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c14c:	2300      	movs	r3, #0
}
 801c14e:	0018      	movs	r0, r3
 801c150:	46bd      	mov	sp, r7
 801c152:	b004      	add	sp, #16
 801c154:	bd80      	pop	{r7, pc}

0801c156 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c156:	b580      	push	{r7, lr}
 801c158:	b082      	sub	sp, #8
 801c15a:	af00      	add	r7, sp, #0
 801c15c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c15e:	687a      	ldr	r2, [r7, #4]
 801c160:	23a5      	movs	r3, #165	@ 0xa5
 801c162:	009b      	lsls	r3, r3, #2
 801c164:	2104      	movs	r1, #4
 801c166:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c168:	6878      	ldr	r0, [r7, #4]
 801c16a:	2300      	movs	r3, #0
 801c16c:	2200      	movs	r2, #0
 801c16e:	2100      	movs	r1, #0
 801c170:	f000 fce3 	bl	801cb3a <USBD_LL_Transmit>

  return USBD_OK;
 801c174:	2300      	movs	r3, #0
}
 801c176:	0018      	movs	r0, r3
 801c178:	46bd      	mov	sp, r7
 801c17a:	b002      	add	sp, #8
 801c17c:	bd80      	pop	{r7, pc}

0801c17e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c17e:	b580      	push	{r7, lr}
 801c180:	b082      	sub	sp, #8
 801c182:	af00      	add	r7, sp, #0
 801c184:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c186:	687a      	ldr	r2, [r7, #4]
 801c188:	23a5      	movs	r3, #165	@ 0xa5
 801c18a:	009b      	lsls	r3, r3, #2
 801c18c:	2105      	movs	r1, #5
 801c18e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c190:	6878      	ldr	r0, [r7, #4]
 801c192:	2300      	movs	r3, #0
 801c194:	2200      	movs	r2, #0
 801c196:	2100      	movs	r1, #0
 801c198:	f000 fd06 	bl	801cba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c19c:	2300      	movs	r3, #0
}
 801c19e:	0018      	movs	r0, r3
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	b002      	add	sp, #8
 801c1a4:	bd80      	pop	{r7, pc}
	...

0801c1a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c1ac:	4914      	ldr	r1, [pc, #80]	@ (801c200 <MX_USB_DEVICE_Init+0x58>)
 801c1ae:	4b15      	ldr	r3, [pc, #84]	@ (801c204 <MX_USB_DEVICE_Init+0x5c>)
 801c1b0:	2200      	movs	r2, #0
 801c1b2:	0018      	movs	r0, r3
 801c1b4:	f7fe fdec 	bl	801ad90 <USBD_Init>
 801c1b8:	1e03      	subs	r3, r0, #0
 801c1ba:	d001      	beq.n	801c1c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c1bc:	f7ec f96e 	bl	800849c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c1c0:	4a11      	ldr	r2, [pc, #68]	@ (801c208 <MX_USB_DEVICE_Init+0x60>)
 801c1c2:	4b10      	ldr	r3, [pc, #64]	@ (801c204 <MX_USB_DEVICE_Init+0x5c>)
 801c1c4:	0011      	movs	r1, r2
 801c1c6:	0018      	movs	r0, r3
 801c1c8:	f7fe fe13 	bl	801adf2 <USBD_RegisterClass>
 801c1cc:	1e03      	subs	r3, r0, #0
 801c1ce:	d001      	beq.n	801c1d4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801c1d0:	f7ec f964 	bl	800849c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c1d4:	4a0d      	ldr	r2, [pc, #52]	@ (801c20c <MX_USB_DEVICE_Init+0x64>)
 801c1d6:	4b0b      	ldr	r3, [pc, #44]	@ (801c204 <MX_USB_DEVICE_Init+0x5c>)
 801c1d8:	0011      	movs	r1, r2
 801c1da:	0018      	movs	r0, r3
 801c1dc:	f7fe fd28 	bl	801ac30 <USBD_CDC_RegisterInterface>
 801c1e0:	1e03      	subs	r3, r0, #0
 801c1e2:	d001      	beq.n	801c1e8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801c1e4:	f7ec f95a 	bl	800849c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c1e8:	4b06      	ldr	r3, [pc, #24]	@ (801c204 <MX_USB_DEVICE_Init+0x5c>)
 801c1ea:	0018      	movs	r0, r3
 801c1ec:	f7fe fe21 	bl	801ae32 <USBD_Start>
 801c1f0:	1e03      	subs	r3, r0, #0
 801c1f2:	d001      	beq.n	801c1f8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801c1f4:	f7ec f952 	bl	800849c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c1f8:	46c0      	nop			@ (mov r8, r8)
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	46c0      	nop			@ (mov r8, r8)
 801c200:	20000200 	.word	0x20000200
 801c204:	2000251c 	.word	0x2000251c
 801c208:	200000ec 	.word	0x200000ec
 801c20c:	200001f0 	.word	0x200001f0

0801c210 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c214:	4907      	ldr	r1, [pc, #28]	@ (801c234 <CDC_Init_FS+0x24>)
 801c216:	4b08      	ldr	r3, [pc, #32]	@ (801c238 <CDC_Init_FS+0x28>)
 801c218:	2200      	movs	r2, #0
 801c21a:	0018      	movs	r0, r3
 801c21c:	f7fe fd23 	bl	801ac66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c220:	4a06      	ldr	r2, [pc, #24]	@ (801c23c <CDC_Init_FS+0x2c>)
 801c222:	4b05      	ldr	r3, [pc, #20]	@ (801c238 <CDC_Init_FS+0x28>)
 801c224:	0011      	movs	r1, r2
 801c226:	0018      	movs	r0, r3
 801c228:	f7fe fd39 	bl	801ac9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c22c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c22e:	0018      	movs	r0, r3
 801c230:	46bd      	mov	sp, r7
 801c232:	bd80      	pop	{r7, pc}
 801c234:	20002ca0 	.word	0x20002ca0
 801c238:	2000251c 	.word	0x2000251c
 801c23c:	200028a0 	.word	0x200028a0

0801c240 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c240:	b580      	push	{r7, lr}
 801c242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c244:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c246:	0018      	movs	r0, r3
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}

0801c24c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b082      	sub	sp, #8
 801c250:	af00      	add	r7, sp, #0
 801c252:	6039      	str	r1, [r7, #0]
 801c254:	0011      	movs	r1, r2
 801c256:	1dfb      	adds	r3, r7, #7
 801c258:	1c02      	adds	r2, r0, #0
 801c25a:	701a      	strb	r2, [r3, #0]
 801c25c:	1d3b      	adds	r3, r7, #4
 801c25e:	1c0a      	adds	r2, r1, #0
 801c260:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c262:	1dfb      	adds	r3, r7, #7
 801c264:	781b      	ldrb	r3, [r3, #0]
 801c266:	2b23      	cmp	r3, #35	@ 0x23
 801c268:	d804      	bhi.n	801c274 <CDC_Control_FS+0x28>
 801c26a:	009a      	lsls	r2, r3, #2
 801c26c:	4b04      	ldr	r3, [pc, #16]	@ (801c280 <CDC_Control_FS+0x34>)
 801c26e:	18d3      	adds	r3, r2, r3
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c274:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801c276:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c278:	0018      	movs	r0, r3
 801c27a:	46bd      	mov	sp, r7
 801c27c:	b002      	add	sp, #8
 801c27e:	bd80      	pop	{r7, pc}
 801c280:	0802499c 	.word	0x0802499c

0801c284 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b082      	sub	sp, #8
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]
 801c28c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801c28e:	4b12      	ldr	r3, [pc, #72]	@ (801c2d8 <CDC_Receive_FS+0x54>)
 801c290:	781b      	ldrb	r3, [r3, #0]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d013      	beq.n	801c2be <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801c296:	683b      	ldr	r3, [r7, #0]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	b29a      	uxth	r2, r3
 801c29c:	2301      	movs	r3, #1
 801c29e:	425b      	negs	r3, r3
 801c2a0:	6879      	ldr	r1, [r7, #4]
 801c2a2:	480e      	ldr	r0, [pc, #56]	@ (801c2dc <CDC_Receive_FS+0x58>)
 801c2a4:	f7fa fa46 	bl	8016734 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c2a8:	687a      	ldr	r2, [r7, #4]
 801c2aa:	4b0d      	ldr	r3, [pc, #52]	@ (801c2e0 <CDC_Receive_FS+0x5c>)
 801c2ac:	0011      	movs	r1, r2
 801c2ae:	0018      	movs	r0, r3
 801c2b0:	f7fe fcf5 	bl	801ac9e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c2b4:	4b0a      	ldr	r3, [pc, #40]	@ (801c2e0 <CDC_Receive_FS+0x5c>)
 801c2b6:	0018      	movs	r0, r3
 801c2b8:	f7fe fd3c 	bl	801ad34 <USBD_CDC_ReceivePacket>
 801c2bc:	e006      	b.n	801c2cc <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801c2be:	683b      	ldr	r3, [r7, #0]
 801c2c0:	681a      	ldr	r2, [r3, #0]
 801c2c2:	4b08      	ldr	r3, [pc, #32]	@ (801c2e4 <CDC_Receive_FS+0x60>)
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	18d2      	adds	r2, r2, r3
 801c2c8:	4b06      	ldr	r3, [pc, #24]	@ (801c2e4 <CDC_Receive_FS+0x60>)
 801c2ca:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801c2cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c2ce:	0018      	movs	r0, r3
 801c2d0:	46bd      	mov	sp, r7
 801c2d2:	b002      	add	sp, #8
 801c2d4:	bd80      	pop	{r7, pc}
 801c2d6:	46c0      	nop			@ (mov r8, r8)
 801c2d8:	200027e0 	.word	0x200027e0
 801c2dc:	200027e4 	.word	0x200027e4
 801c2e0:	2000251c 	.word	0x2000251c
 801c2e4:	2000289c 	.word	0x2000289c

0801c2e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c2e8:	b5b0      	push	{r4, r5, r7, lr}
 801c2ea:	b084      	sub	sp, #16
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	6078      	str	r0, [r7, #4]
 801c2f0:	000a      	movs	r2, r1
 801c2f2:	1cbb      	adds	r3, r7, #2
 801c2f4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801c2f6:	230f      	movs	r3, #15
 801c2f8:	18fb      	adds	r3, r7, r3
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c2fe:	4a11      	ldr	r2, [pc, #68]	@ (801c344 <CDC_Transmit_FS+0x5c>)
 801c300:	23ae      	movs	r3, #174	@ 0xae
 801c302:	009b      	lsls	r3, r3, #2
 801c304:	58d3      	ldr	r3, [r2, r3]
 801c306:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c308:	68ba      	ldr	r2, [r7, #8]
 801c30a:	2385      	movs	r3, #133	@ 0x85
 801c30c:	009b      	lsls	r3, r3, #2
 801c30e:	58d3      	ldr	r3, [r2, r3]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d001      	beq.n	801c318 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801c314:	2301      	movs	r3, #1
 801c316:	e010      	b.n	801c33a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c318:	1cbb      	adds	r3, r7, #2
 801c31a:	881a      	ldrh	r2, [r3, #0]
 801c31c:	6879      	ldr	r1, [r7, #4]
 801c31e:	4b09      	ldr	r3, [pc, #36]	@ (801c344 <CDC_Transmit_FS+0x5c>)
 801c320:	0018      	movs	r0, r3
 801c322:	f7fe fca0 	bl	801ac66 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c326:	250f      	movs	r5, #15
 801c328:	197c      	adds	r4, r7, r5
 801c32a:	4b06      	ldr	r3, [pc, #24]	@ (801c344 <CDC_Transmit_FS+0x5c>)
 801c32c:	0018      	movs	r0, r3
 801c32e:	f7fe fcca 	bl	801acc6 <USBD_CDC_TransmitPacket>
 801c332:	0003      	movs	r3, r0
 801c334:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801c336:	197b      	adds	r3, r7, r5
 801c338:	781b      	ldrb	r3, [r3, #0]
}
 801c33a:	0018      	movs	r0, r3
 801c33c:	46bd      	mov	sp, r7
 801c33e:	b004      	add	sp, #16
 801c340:	bdb0      	pop	{r4, r5, r7, pc}
 801c342:	46c0      	nop			@ (mov r8, r8)
 801c344:	2000251c 	.word	0x2000251c

0801c348 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801c348:	b580      	push	{r7, lr}
 801c34a:	af00      	add	r7, sp, #0
  ESPProg = true;
 801c34c:	4b02      	ldr	r3, [pc, #8]	@ (801c358 <EnableESPProg+0x10>)
 801c34e:	2201      	movs	r2, #1
 801c350:	701a      	strb	r2, [r3, #0]
}
 801c352:	46c0      	nop			@ (mov r8, r8)
 801c354:	46bd      	mov	sp, r7
 801c356:	bd80      	pop	{r7, pc}
 801c358:	200027e0 	.word	0x200027e0

0801c35c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801c35c:	b580      	push	{r7, lr}
 801c35e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801c360:	4b01      	ldr	r3, [pc, #4]	@ (801c368 <GetUsbRxPointer+0xc>)
}
 801c362:	0018      	movs	r0, r3
 801c364:	46bd      	mov	sp, r7
 801c366:	bd80      	pop	{r7, pc}
 801c368:	200028a0 	.word	0x200028a0

0801c36c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801c370:	4b07      	ldr	r3, [pc, #28]	@ (801c390 <ResetUsbRxDataSize+0x24>)
 801c372:	2200      	movs	r2, #0
 801c374:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801c376:	4a07      	ldr	r2, [pc, #28]	@ (801c394 <ResetUsbRxDataSize+0x28>)
 801c378:	4b07      	ldr	r3, [pc, #28]	@ (801c398 <ResetUsbRxDataSize+0x2c>)
 801c37a:	0011      	movs	r1, r2
 801c37c:	0018      	movs	r0, r3
 801c37e:	f7fe fc8e 	bl	801ac9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c382:	4b05      	ldr	r3, [pc, #20]	@ (801c398 <ResetUsbRxDataSize+0x2c>)
 801c384:	0018      	movs	r0, r3
 801c386:	f7fe fcd5 	bl	801ad34 <USBD_CDC_ReceivePacket>
}
 801c38a:	46c0      	nop			@ (mov r8, r8)
 801c38c:	46bd      	mov	sp, r7
 801c38e:	bd80      	pop	{r7, pc}
 801c390:	2000289c 	.word	0x2000289c
 801c394:	200028a0 	.word	0x200028a0
 801c398:	2000251c 	.word	0x2000251c

0801c39c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801c39c:	b580      	push	{r7, lr}
 801c39e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801c3a0:	4b02      	ldr	r3, [pc, #8]	@ (801c3ac <GetUsbRxDataSize+0x10>)
 801c3a2:	681b      	ldr	r3, [r3, #0]
}
 801c3a4:	0018      	movs	r0, r3
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	bd80      	pop	{r7, pc}
 801c3aa:	46c0      	nop			@ (mov r8, r8)
 801c3ac:	2000289c 	.word	0x2000289c

0801c3b0 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b082      	sub	sp, #8
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801c3b8:	687a      	ldr	r2, [r7, #4]
 801c3ba:	4b07      	ldr	r3, [pc, #28]	@ (801c3d8 <GetUsbRxNextChunk+0x28>)
 801c3bc:	18d2      	adds	r2, r2, r3
 801c3be:	4b07      	ldr	r3, [pc, #28]	@ (801c3dc <GetUsbRxNextChunk+0x2c>)
 801c3c0:	0011      	movs	r1, r2
 801c3c2:	0018      	movs	r0, r3
 801c3c4:	f7fe fc6b 	bl	801ac9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c3c8:	4b04      	ldr	r3, [pc, #16]	@ (801c3dc <GetUsbRxNextChunk+0x2c>)
 801c3ca:	0018      	movs	r0, r3
 801c3cc:	f7fe fcb2 	bl	801ad34 <USBD_CDC_ReceivePacket>
}
 801c3d0:	46c0      	nop			@ (mov r8, r8)
 801c3d2:	46bd      	mov	sp, r7
 801c3d4:	b002      	add	sp, #8
 801c3d6:	bd80      	pop	{r7, pc}
 801c3d8:	200028a0 	.word	0x200028a0
 801c3dc:	2000251c 	.word	0x2000251c

0801c3e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b082      	sub	sp, #8
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	0002      	movs	r2, r0
 801c3e8:	6039      	str	r1, [r7, #0]
 801c3ea:	1dfb      	adds	r3, r7, #7
 801c3ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	2212      	movs	r2, #18
 801c3f2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c3f4:	4b02      	ldr	r3, [pc, #8]	@ (801c400 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c3f6:	0018      	movs	r0, r3
 801c3f8:	46bd      	mov	sp, r7
 801c3fa:	b002      	add	sp, #8
 801c3fc:	bd80      	pop	{r7, pc}
 801c3fe:	46c0      	nop			@ (mov r8, r8)
 801c400:	2000021c 	.word	0x2000021c

0801c404 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b082      	sub	sp, #8
 801c408:	af00      	add	r7, sp, #0
 801c40a:	0002      	movs	r2, r0
 801c40c:	6039      	str	r1, [r7, #0]
 801c40e:	1dfb      	adds	r3, r7, #7
 801c410:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c412:	683b      	ldr	r3, [r7, #0]
 801c414:	2204      	movs	r2, #4
 801c416:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c418:	4b02      	ldr	r3, [pc, #8]	@ (801c424 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c41a:	0018      	movs	r0, r3
 801c41c:	46bd      	mov	sp, r7
 801c41e:	b002      	add	sp, #8
 801c420:	bd80      	pop	{r7, pc}
 801c422:	46c0      	nop			@ (mov r8, r8)
 801c424:	20000230 	.word	0x20000230

0801c428 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b082      	sub	sp, #8
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	0002      	movs	r2, r0
 801c430:	6039      	str	r1, [r7, #0]
 801c432:	1dfb      	adds	r3, r7, #7
 801c434:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c436:	1dfb      	adds	r3, r7, #7
 801c438:	781b      	ldrb	r3, [r3, #0]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d106      	bne.n	801c44c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c43e:	683a      	ldr	r2, [r7, #0]
 801c440:	4908      	ldr	r1, [pc, #32]	@ (801c464 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c442:	4b09      	ldr	r3, [pc, #36]	@ (801c468 <USBD_FS_ProductStrDescriptor+0x40>)
 801c444:	0018      	movs	r0, r3
 801c446:	f7ff fdb1 	bl	801bfac <USBD_GetString>
 801c44a:	e005      	b.n	801c458 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c44c:	683a      	ldr	r2, [r7, #0]
 801c44e:	4905      	ldr	r1, [pc, #20]	@ (801c464 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c450:	4b05      	ldr	r3, [pc, #20]	@ (801c468 <USBD_FS_ProductStrDescriptor+0x40>)
 801c452:	0018      	movs	r0, r3
 801c454:	f7ff fdaa 	bl	801bfac <USBD_GetString>
  }
  return USBD_StrDesc;
 801c458:	4b02      	ldr	r3, [pc, #8]	@ (801c464 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801c45a:	0018      	movs	r0, r3
 801c45c:	46bd      	mov	sp, r7
 801c45e:	b002      	add	sp, #8
 801c460:	bd80      	pop	{r7, pc}
 801c462:	46c0      	nop			@ (mov r8, r8)
 801c464:	200030a0 	.word	0x200030a0
 801c468:	0802442c 	.word	0x0802442c

0801c46c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c46c:	b580      	push	{r7, lr}
 801c46e:	b082      	sub	sp, #8
 801c470:	af00      	add	r7, sp, #0
 801c472:	0002      	movs	r2, r0
 801c474:	6039      	str	r1, [r7, #0]
 801c476:	1dfb      	adds	r3, r7, #7
 801c478:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c47a:	683a      	ldr	r2, [r7, #0]
 801c47c:	4904      	ldr	r1, [pc, #16]	@ (801c490 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c47e:	4b05      	ldr	r3, [pc, #20]	@ (801c494 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801c480:	0018      	movs	r0, r3
 801c482:	f7ff fd93 	bl	801bfac <USBD_GetString>
  return USBD_StrDesc;
 801c486:	4b02      	ldr	r3, [pc, #8]	@ (801c490 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801c488:	0018      	movs	r0, r3
 801c48a:	46bd      	mov	sp, r7
 801c48c:	b002      	add	sp, #8
 801c48e:	bd80      	pop	{r7, pc}
 801c490:	200030a0 	.word	0x200030a0
 801c494:	08024444 	.word	0x08024444

0801c498 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b082      	sub	sp, #8
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	0002      	movs	r2, r0
 801c4a0:	6039      	str	r1, [r7, #0]
 801c4a2:	1dfb      	adds	r3, r7, #7
 801c4a4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c4a6:	683b      	ldr	r3, [r7, #0]
 801c4a8:	221a      	movs	r2, #26
 801c4aa:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c4ac:	f000 f84c 	bl	801c548 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c4b0:	4b02      	ldr	r3, [pc, #8]	@ (801c4bc <USBD_FS_SerialStrDescriptor+0x24>)
}
 801c4b2:	0018      	movs	r0, r3
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	b002      	add	sp, #8
 801c4b8:	bd80      	pop	{r7, pc}
 801c4ba:	46c0      	nop			@ (mov r8, r8)
 801c4bc:	20000234 	.word	0x20000234

0801c4c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b082      	sub	sp, #8
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	0002      	movs	r2, r0
 801c4c8:	6039      	str	r1, [r7, #0]
 801c4ca:	1dfb      	adds	r3, r7, #7
 801c4cc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c4ce:	1dfb      	adds	r3, r7, #7
 801c4d0:	781b      	ldrb	r3, [r3, #0]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d106      	bne.n	801c4e4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c4d6:	683a      	ldr	r2, [r7, #0]
 801c4d8:	4908      	ldr	r1, [pc, #32]	@ (801c4fc <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c4da:	4b09      	ldr	r3, [pc, #36]	@ (801c500 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c4dc:	0018      	movs	r0, r3
 801c4de:	f7ff fd65 	bl	801bfac <USBD_GetString>
 801c4e2:	e005      	b.n	801c4f0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c4e4:	683a      	ldr	r2, [r7, #0]
 801c4e6:	4905      	ldr	r1, [pc, #20]	@ (801c4fc <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c4e8:	4b05      	ldr	r3, [pc, #20]	@ (801c500 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c4ea:	0018      	movs	r0, r3
 801c4ec:	f7ff fd5e 	bl	801bfac <USBD_GetString>
  }
  return USBD_StrDesc;
 801c4f0:	4b02      	ldr	r3, [pc, #8]	@ (801c4fc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801c4f2:	0018      	movs	r0, r3
 801c4f4:	46bd      	mov	sp, r7
 801c4f6:	b002      	add	sp, #8
 801c4f8:	bd80      	pop	{r7, pc}
 801c4fa:	46c0      	nop			@ (mov r8, r8)
 801c4fc:	200030a0 	.word	0x200030a0
 801c500:	08024458 	.word	0x08024458

0801c504 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c504:	b580      	push	{r7, lr}
 801c506:	b082      	sub	sp, #8
 801c508:	af00      	add	r7, sp, #0
 801c50a:	0002      	movs	r2, r0
 801c50c:	6039      	str	r1, [r7, #0]
 801c50e:	1dfb      	adds	r3, r7, #7
 801c510:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c512:	1dfb      	adds	r3, r7, #7
 801c514:	781b      	ldrb	r3, [r3, #0]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d106      	bne.n	801c528 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c51a:	683a      	ldr	r2, [r7, #0]
 801c51c:	4908      	ldr	r1, [pc, #32]	@ (801c540 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c51e:	4b09      	ldr	r3, [pc, #36]	@ (801c544 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c520:	0018      	movs	r0, r3
 801c522:	f7ff fd43 	bl	801bfac <USBD_GetString>
 801c526:	e005      	b.n	801c534 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c528:	683a      	ldr	r2, [r7, #0]
 801c52a:	4905      	ldr	r1, [pc, #20]	@ (801c540 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c52c:	4b05      	ldr	r3, [pc, #20]	@ (801c544 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c52e:	0018      	movs	r0, r3
 801c530:	f7ff fd3c 	bl	801bfac <USBD_GetString>
  }
  return USBD_StrDesc;
 801c534:	4b02      	ldr	r3, [pc, #8]	@ (801c540 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801c536:	0018      	movs	r0, r3
 801c538:	46bd      	mov	sp, r7
 801c53a:	b002      	add	sp, #8
 801c53c:	bd80      	pop	{r7, pc}
 801c53e:	46c0      	nop			@ (mov r8, r8)
 801c540:	200030a0 	.word	0x200030a0
 801c544:	08024464 	.word	0x08024464

0801c548 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b084      	sub	sp, #16
 801c54c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c54e:	4b10      	ldr	r3, [pc, #64]	@ (801c590 <Get_SerialNum+0x48>)
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c554:	4b0f      	ldr	r3, [pc, #60]	@ (801c594 <Get_SerialNum+0x4c>)
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c55a:	4b0f      	ldr	r3, [pc, #60]	@ (801c598 <Get_SerialNum+0x50>)
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c560:	68fa      	ldr	r2, [r7, #12]
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	18d3      	adds	r3, r2, r3
 801c566:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d00b      	beq.n	801c586 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c56e:	490b      	ldr	r1, [pc, #44]	@ (801c59c <Get_SerialNum+0x54>)
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	2208      	movs	r2, #8
 801c574:	0018      	movs	r0, r3
 801c576:	f000 f815 	bl	801c5a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c57a:	4909      	ldr	r1, [pc, #36]	@ (801c5a0 <Get_SerialNum+0x58>)
 801c57c:	68bb      	ldr	r3, [r7, #8]
 801c57e:	2204      	movs	r2, #4
 801c580:	0018      	movs	r0, r3
 801c582:	f000 f80f 	bl	801c5a4 <IntToUnicode>
  }
}
 801c586:	46c0      	nop			@ (mov r8, r8)
 801c588:	46bd      	mov	sp, r7
 801c58a:	b004      	add	sp, #16
 801c58c:	bd80      	pop	{r7, pc}
 801c58e:	46c0      	nop			@ (mov r8, r8)
 801c590:	1ff80050 	.word	0x1ff80050
 801c594:	1ff80054 	.word	0x1ff80054
 801c598:	1ff80058 	.word	0x1ff80058
 801c59c:	20000236 	.word	0x20000236
 801c5a0:	20000246 	.word	0x20000246

0801c5a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b086      	sub	sp, #24
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	60f8      	str	r0, [r7, #12]
 801c5ac:	60b9      	str	r1, [r7, #8]
 801c5ae:	1dfb      	adds	r3, r7, #7
 801c5b0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801c5b2:	2117      	movs	r1, #23
 801c5b4:	187b      	adds	r3, r7, r1
 801c5b6:	2200      	movs	r2, #0
 801c5b8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801c5ba:	187b      	adds	r3, r7, r1
 801c5bc:	2200      	movs	r2, #0
 801c5be:	701a      	strb	r2, [r3, #0]
 801c5c0:	e02f      	b.n	801c622 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	0f1b      	lsrs	r3, r3, #28
 801c5c6:	2b09      	cmp	r3, #9
 801c5c8:	d80d      	bhi.n	801c5e6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	0f1b      	lsrs	r3, r3, #28
 801c5ce:	b2da      	uxtb	r2, r3
 801c5d0:	2317      	movs	r3, #23
 801c5d2:	18fb      	adds	r3, r7, r3
 801c5d4:	781b      	ldrb	r3, [r3, #0]
 801c5d6:	005b      	lsls	r3, r3, #1
 801c5d8:	0019      	movs	r1, r3
 801c5da:	68bb      	ldr	r3, [r7, #8]
 801c5dc:	185b      	adds	r3, r3, r1
 801c5de:	3230      	adds	r2, #48	@ 0x30
 801c5e0:	b2d2      	uxtb	r2, r2
 801c5e2:	701a      	strb	r2, [r3, #0]
 801c5e4:	e00c      	b.n	801c600 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	0f1b      	lsrs	r3, r3, #28
 801c5ea:	b2da      	uxtb	r2, r3
 801c5ec:	2317      	movs	r3, #23
 801c5ee:	18fb      	adds	r3, r7, r3
 801c5f0:	781b      	ldrb	r3, [r3, #0]
 801c5f2:	005b      	lsls	r3, r3, #1
 801c5f4:	0019      	movs	r1, r3
 801c5f6:	68bb      	ldr	r3, [r7, #8]
 801c5f8:	185b      	adds	r3, r3, r1
 801c5fa:	3237      	adds	r2, #55	@ 0x37
 801c5fc:	b2d2      	uxtb	r2, r2
 801c5fe:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	011b      	lsls	r3, r3, #4
 801c604:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c606:	2117      	movs	r1, #23
 801c608:	187b      	adds	r3, r7, r1
 801c60a:	781b      	ldrb	r3, [r3, #0]
 801c60c:	005b      	lsls	r3, r3, #1
 801c60e:	3301      	adds	r3, #1
 801c610:	68ba      	ldr	r2, [r7, #8]
 801c612:	18d3      	adds	r3, r2, r3
 801c614:	2200      	movs	r2, #0
 801c616:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c618:	187b      	adds	r3, r7, r1
 801c61a:	781a      	ldrb	r2, [r3, #0]
 801c61c:	187b      	adds	r3, r7, r1
 801c61e:	3201      	adds	r2, #1
 801c620:	701a      	strb	r2, [r3, #0]
 801c622:	2317      	movs	r3, #23
 801c624:	18fa      	adds	r2, r7, r3
 801c626:	1dfb      	adds	r3, r7, #7
 801c628:	7812      	ldrb	r2, [r2, #0]
 801c62a:	781b      	ldrb	r3, [r3, #0]
 801c62c:	429a      	cmp	r2, r3
 801c62e:	d3c8      	bcc.n	801c5c2 <IntToUnicode+0x1e>
  }
}
 801c630:	46c0      	nop			@ (mov r8, r8)
 801c632:	46c0      	nop			@ (mov r8, r8)
 801c634:	46bd      	mov	sp, r7
 801c636:	b006      	add	sp, #24
 801c638:	bd80      	pop	{r7, pc}
	...

0801c63c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c63c:	b580      	push	{r7, lr}
 801c63e:	b082      	sub	sp, #8
 801c640:	af00      	add	r7, sp, #0
 801c642:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	4a0a      	ldr	r2, [pc, #40]	@ (801c674 <HAL_PCD_MspInit+0x38>)
 801c64a:	4293      	cmp	r3, r2
 801c64c:	d10e      	bne.n	801c66c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801c64e:	4b0a      	ldr	r3, [pc, #40]	@ (801c678 <HAL_PCD_MspInit+0x3c>)
 801c650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c652:	4b09      	ldr	r3, [pc, #36]	@ (801c678 <HAL_PCD_MspInit+0x3c>)
 801c654:	2180      	movs	r1, #128	@ 0x80
 801c656:	0409      	lsls	r1, r1, #16
 801c658:	430a      	orrs	r2, r1
 801c65a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801c65c:	2200      	movs	r2, #0
 801c65e:	2100      	movs	r1, #0
 801c660:	201f      	movs	r0, #31
 801c662:	f7f2 fae3 	bl	800ec2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801c666:	201f      	movs	r0, #31
 801c668:	f7f2 faf5 	bl	800ec56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801c66c:	46c0      	nop			@ (mov r8, r8)
 801c66e:	46bd      	mov	sp, r7
 801c670:	b002      	add	sp, #8
 801c672:	bd80      	pop	{r7, pc}
 801c674:	40005c00 	.word	0x40005c00
 801c678:	40021000 	.word	0x40021000

0801c67c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b082      	sub	sp, #8
 801c680:	af00      	add	r7, sp, #0
 801c682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c684:	687a      	ldr	r2, [r7, #4]
 801c686:	23bc      	movs	r3, #188	@ 0xbc
 801c688:	009b      	lsls	r3, r3, #2
 801c68a:	58d2      	ldr	r2, [r2, r3]
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	21ac      	movs	r1, #172	@ 0xac
 801c690:	0089      	lsls	r1, r1, #2
 801c692:	468c      	mov	ip, r1
 801c694:	4463      	add	r3, ip
 801c696:	0019      	movs	r1, r3
 801c698:	0010      	movs	r0, r2
 801c69a:	f7fe fc1d 	bl	801aed8 <USBD_LL_SetupStage>
}
 801c69e:	46c0      	nop			@ (mov r8, r8)
 801c6a0:	46bd      	mov	sp, r7
 801c6a2:	b002      	add	sp, #8
 801c6a4:	bd80      	pop	{r7, pc}

0801c6a6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c6a6:	b590      	push	{r4, r7, lr}
 801c6a8:	b083      	sub	sp, #12
 801c6aa:	af00      	add	r7, sp, #0
 801c6ac:	6078      	str	r0, [r7, #4]
 801c6ae:	000a      	movs	r2, r1
 801c6b0:	1cfb      	adds	r3, r7, #3
 801c6b2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c6b4:	687a      	ldr	r2, [r7, #4]
 801c6b6:	23bc      	movs	r3, #188	@ 0xbc
 801c6b8:	009b      	lsls	r3, r3, #2
 801c6ba:	58d4      	ldr	r4, [r2, r3]
 801c6bc:	1cfb      	adds	r3, r7, #3
 801c6be:	781a      	ldrb	r2, [r3, #0]
 801c6c0:	6878      	ldr	r0, [r7, #4]
 801c6c2:	23be      	movs	r3, #190	@ 0xbe
 801c6c4:	0059      	lsls	r1, r3, #1
 801c6c6:	0013      	movs	r3, r2
 801c6c8:	009b      	lsls	r3, r3, #2
 801c6ca:	189b      	adds	r3, r3, r2
 801c6cc:	00db      	lsls	r3, r3, #3
 801c6ce:	18c3      	adds	r3, r0, r3
 801c6d0:	185b      	adds	r3, r3, r1
 801c6d2:	681a      	ldr	r2, [r3, #0]
 801c6d4:	1cfb      	adds	r3, r7, #3
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	0019      	movs	r1, r3
 801c6da:	0020      	movs	r0, r4
 801c6dc:	f7fe fc5a 	bl	801af94 <USBD_LL_DataOutStage>
}
 801c6e0:	46c0      	nop			@ (mov r8, r8)
 801c6e2:	46bd      	mov	sp, r7
 801c6e4:	b003      	add	sp, #12
 801c6e6:	bd90      	pop	{r4, r7, pc}

0801c6e8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b082      	sub	sp, #8
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
 801c6f0:	000a      	movs	r2, r1
 801c6f2:	1cfb      	adds	r3, r7, #3
 801c6f4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c6f6:	687a      	ldr	r2, [r7, #4]
 801c6f8:	23bc      	movs	r3, #188	@ 0xbc
 801c6fa:	009b      	lsls	r3, r3, #2
 801c6fc:	58d0      	ldr	r0, [r2, r3]
 801c6fe:	1cfb      	adds	r3, r7, #3
 801c700:	781a      	ldrb	r2, [r3, #0]
 801c702:	6879      	ldr	r1, [r7, #4]
 801c704:	0013      	movs	r3, r2
 801c706:	009b      	lsls	r3, r3, #2
 801c708:	189b      	adds	r3, r3, r2
 801c70a:	00db      	lsls	r3, r3, #3
 801c70c:	18cb      	adds	r3, r1, r3
 801c70e:	333c      	adds	r3, #60	@ 0x3c
 801c710:	681a      	ldr	r2, [r3, #0]
 801c712:	1cfb      	adds	r3, r7, #3
 801c714:	781b      	ldrb	r3, [r3, #0]
 801c716:	0019      	movs	r1, r3
 801c718:	f7fe fcbe 	bl	801b098 <USBD_LL_DataInStage>
}
 801c71c:	46c0      	nop			@ (mov r8, r8)
 801c71e:	46bd      	mov	sp, r7
 801c720:	b002      	add	sp, #8
 801c722:	bd80      	pop	{r7, pc}

0801c724 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b082      	sub	sp, #8
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c72c:	687a      	ldr	r2, [r7, #4]
 801c72e:	23bc      	movs	r3, #188	@ 0xbc
 801c730:	009b      	lsls	r3, r3, #2
 801c732:	58d3      	ldr	r3, [r2, r3]
 801c734:	0018      	movs	r0, r3
 801c736:	f7fe fdf5 	bl	801b324 <USBD_LL_SOF>
}
 801c73a:	46c0      	nop			@ (mov r8, r8)
 801c73c:	46bd      	mov	sp, r7
 801c73e:	b002      	add	sp, #8
 801c740:	bd80      	pop	{r7, pc}

0801c742 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c742:	b580      	push	{r7, lr}
 801c744:	b084      	sub	sp, #16
 801c746:	af00      	add	r7, sp, #0
 801c748:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c74a:	230f      	movs	r3, #15
 801c74c:	18fb      	adds	r3, r7, r3
 801c74e:	2201      	movs	r2, #1
 801c750:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	689b      	ldr	r3, [r3, #8]
 801c756:	2b02      	cmp	r3, #2
 801c758:	d001      	beq.n	801c75e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801c75a:	f7eb fe9f 	bl	800849c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c75e:	687a      	ldr	r2, [r7, #4]
 801c760:	23bc      	movs	r3, #188	@ 0xbc
 801c762:	009b      	lsls	r3, r3, #2
 801c764:	58d2      	ldr	r2, [r2, r3]
 801c766:	230f      	movs	r3, #15
 801c768:	18fb      	adds	r3, r7, r3
 801c76a:	781b      	ldrb	r3, [r3, #0]
 801c76c:	0019      	movs	r1, r3
 801c76e:	0010      	movs	r0, r2
 801c770:	f7fe fd97 	bl	801b2a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c774:	687a      	ldr	r2, [r7, #4]
 801c776:	23bc      	movs	r3, #188	@ 0xbc
 801c778:	009b      	lsls	r3, r3, #2
 801c77a:	58d3      	ldr	r3, [r2, r3]
 801c77c:	0018      	movs	r0, r3
 801c77e:	f7fe fd48 	bl	801b212 <USBD_LL_Reset>
}
 801c782:	46c0      	nop			@ (mov r8, r8)
 801c784:	46bd      	mov	sp, r7
 801c786:	b004      	add	sp, #16
 801c788:	bd80      	pop	{r7, pc}
	...

0801c78c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b082      	sub	sp, #8
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c794:	687a      	ldr	r2, [r7, #4]
 801c796:	23bc      	movs	r3, #188	@ 0xbc
 801c798:	009b      	lsls	r3, r3, #2
 801c79a:	58d3      	ldr	r3, [r2, r3]
 801c79c:	0018      	movs	r0, r3
 801c79e:	f7fe fd91 	bl	801b2c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	699b      	ldr	r3, [r3, #24]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d005      	beq.n	801c7b6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c7aa:	4b05      	ldr	r3, [pc, #20]	@ (801c7c0 <HAL_PCD_SuspendCallback+0x34>)
 801c7ac:	691a      	ldr	r2, [r3, #16]
 801c7ae:	4b04      	ldr	r3, [pc, #16]	@ (801c7c0 <HAL_PCD_SuspendCallback+0x34>)
 801c7b0:	2106      	movs	r1, #6
 801c7b2:	430a      	orrs	r2, r1
 801c7b4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801c7b6:	46c0      	nop			@ (mov r8, r8)
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	b002      	add	sp, #8
 801c7bc:	bd80      	pop	{r7, pc}
 801c7be:	46c0      	nop			@ (mov r8, r8)
 801c7c0:	e000ed00 	.word	0xe000ed00

0801c7c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7c4:	b580      	push	{r7, lr}
 801c7c6:	b082      	sub	sp, #8
 801c7c8:	af00      	add	r7, sp, #0
 801c7ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	699b      	ldr	r3, [r3, #24]
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d007      	beq.n	801c7e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c7d4:	4b09      	ldr	r3, [pc, #36]	@ (801c7fc <HAL_PCD_ResumeCallback+0x38>)
 801c7d6:	691a      	ldr	r2, [r3, #16]
 801c7d8:	4b08      	ldr	r3, [pc, #32]	@ (801c7fc <HAL_PCD_ResumeCallback+0x38>)
 801c7da:	2106      	movs	r1, #6
 801c7dc:	438a      	bics	r2, r1
 801c7de:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801c7e0:	f000 fa44 	bl	801cc6c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c7e4:	687a      	ldr	r2, [r7, #4]
 801c7e6:	23bc      	movs	r3, #188	@ 0xbc
 801c7e8:	009b      	lsls	r3, r3, #2
 801c7ea:	58d3      	ldr	r3, [r2, r3]
 801c7ec:	0018      	movs	r0, r3
 801c7ee:	f7fe fd81 	bl	801b2f4 <USBD_LL_Resume>
}
 801c7f2:	46c0      	nop			@ (mov r8, r8)
 801c7f4:	46bd      	mov	sp, r7
 801c7f6:	b002      	add	sp, #8
 801c7f8:	bd80      	pop	{r7, pc}
 801c7fa:	46c0      	nop			@ (mov r8, r8)
 801c7fc:	e000ed00 	.word	0xe000ed00

0801c800 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b082      	sub	sp, #8
 801c804:	af00      	add	r7, sp, #0
 801c806:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801c808:	4a2d      	ldr	r2, [pc, #180]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c80a:	23bc      	movs	r3, #188	@ 0xbc
 801c80c:	009b      	lsls	r3, r3, #2
 801c80e:	6879      	ldr	r1, [r7, #4]
 801c810:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801c812:	687a      	ldr	r2, [r7, #4]
 801c814:	23b0      	movs	r3, #176	@ 0xb0
 801c816:	009b      	lsls	r3, r3, #2
 801c818:	4929      	ldr	r1, [pc, #164]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c81a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801c81c:	4b28      	ldr	r3, [pc, #160]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c81e:	4a29      	ldr	r2, [pc, #164]	@ (801c8c4 <USBD_LL_Init+0xc4>)
 801c820:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801c822:	4b27      	ldr	r3, [pc, #156]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c824:	2208      	movs	r2, #8
 801c826:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801c828:	4b25      	ldr	r3, [pc, #148]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c82a:	2202      	movs	r2, #2
 801c82c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c82e:	4b24      	ldr	r3, [pc, #144]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c830:	2202      	movs	r2, #2
 801c832:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801c834:	4b22      	ldr	r3, [pc, #136]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c836:	2200      	movs	r2, #0
 801c838:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801c83a:	4b21      	ldr	r3, [pc, #132]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c83c:	2200      	movs	r2, #0
 801c83e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801c840:	4b1f      	ldr	r3, [pc, #124]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c842:	2200      	movs	r2, #0
 801c844:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801c846:	4b1e      	ldr	r3, [pc, #120]	@ (801c8c0 <USBD_LL_Init+0xc0>)
 801c848:	0018      	movs	r0, r3
 801c84a:	f7f5 ff95 	bl	8012778 <HAL_PCD_Init>
 801c84e:	1e03      	subs	r3, r0, #0
 801c850:	d001      	beq.n	801c856 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801c852:	f7eb fe23 	bl	800849c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801c856:	687a      	ldr	r2, [r7, #4]
 801c858:	23b0      	movs	r3, #176	@ 0xb0
 801c85a:	009b      	lsls	r3, r3, #2
 801c85c:	58d0      	ldr	r0, [r2, r3]
 801c85e:	2318      	movs	r3, #24
 801c860:	2200      	movs	r2, #0
 801c862:	2100      	movs	r1, #0
 801c864:	f7f7 fd56 	bl	8014314 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801c868:	687a      	ldr	r2, [r7, #4]
 801c86a:	23b0      	movs	r3, #176	@ 0xb0
 801c86c:	009b      	lsls	r3, r3, #2
 801c86e:	58d0      	ldr	r0, [r2, r3]
 801c870:	2358      	movs	r3, #88	@ 0x58
 801c872:	2200      	movs	r2, #0
 801c874:	2180      	movs	r1, #128	@ 0x80
 801c876:	f7f7 fd4d 	bl	8014314 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801c87a:	687a      	ldr	r2, [r7, #4]
 801c87c:	23b0      	movs	r3, #176	@ 0xb0
 801c87e:	009b      	lsls	r3, r3, #2
 801c880:	58d0      	ldr	r0, [r2, r3]
 801c882:	23c0      	movs	r3, #192	@ 0xc0
 801c884:	2200      	movs	r2, #0
 801c886:	2181      	movs	r1, #129	@ 0x81
 801c888:	f7f7 fd44 	bl	8014314 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801c88c:	687a      	ldr	r2, [r7, #4]
 801c88e:	23b0      	movs	r3, #176	@ 0xb0
 801c890:	009b      	lsls	r3, r3, #2
 801c892:	58d0      	ldr	r0, [r2, r3]
 801c894:	2388      	movs	r3, #136	@ 0x88
 801c896:	005b      	lsls	r3, r3, #1
 801c898:	2200      	movs	r2, #0
 801c89a:	2101      	movs	r1, #1
 801c89c:	f7f7 fd3a 	bl	8014314 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801c8a0:	687a      	ldr	r2, [r7, #4]
 801c8a2:	23b0      	movs	r3, #176	@ 0xb0
 801c8a4:	009b      	lsls	r3, r3, #2
 801c8a6:	58d0      	ldr	r0, [r2, r3]
 801c8a8:	2380      	movs	r3, #128	@ 0x80
 801c8aa:	005b      	lsls	r3, r3, #1
 801c8ac:	2200      	movs	r2, #0
 801c8ae:	2182      	movs	r1, #130	@ 0x82
 801c8b0:	f7f7 fd30 	bl	8014314 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801c8b4:	2300      	movs	r3, #0
}
 801c8b6:	0018      	movs	r0, r3
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	b002      	add	sp, #8
 801c8bc:	bd80      	pop	{r7, pc}
 801c8be:	46c0      	nop			@ (mov r8, r8)
 801c8c0:	200032a0 	.word	0x200032a0
 801c8c4:	40005c00 	.word	0x40005c00

0801c8c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8ca:	b085      	sub	sp, #20
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c8d0:	210f      	movs	r1, #15
 801c8d2:	187b      	adds	r3, r7, r1
 801c8d4:	2200      	movs	r2, #0
 801c8d6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c8d8:	260e      	movs	r6, #14
 801c8da:	19bb      	adds	r3, r7, r6
 801c8dc:	2200      	movs	r2, #0
 801c8de:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c8e0:	687a      	ldr	r2, [r7, #4]
 801c8e2:	23b0      	movs	r3, #176	@ 0xb0
 801c8e4:	009b      	lsls	r3, r3, #2
 801c8e6:	58d3      	ldr	r3, [r2, r3]
 801c8e8:	000d      	movs	r5, r1
 801c8ea:	187c      	adds	r4, r7, r1
 801c8ec:	0018      	movs	r0, r3
 801c8ee:	f7f6 f843 	bl	8012978 <HAL_PCD_Start>
 801c8f2:	0003      	movs	r3, r0
 801c8f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c8f6:	19bc      	adds	r4, r7, r6
 801c8f8:	197b      	adds	r3, r7, r5
 801c8fa:	781b      	ldrb	r3, [r3, #0]
 801c8fc:	0018      	movs	r0, r3
 801c8fe:	f000 f9bc 	bl	801cc7a <USBD_Get_USB_Status>
 801c902:	0003      	movs	r3, r0
 801c904:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c906:	19bb      	adds	r3, r7, r6
 801c908:	781b      	ldrb	r3, [r3, #0]
}
 801c90a:	0018      	movs	r0, r3
 801c90c:	46bd      	mov	sp, r7
 801c90e:	b005      	add	sp, #20
 801c910:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c912 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c912:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c914:	b085      	sub	sp, #20
 801c916:	af00      	add	r7, sp, #0
 801c918:	6078      	str	r0, [r7, #4]
 801c91a:	000c      	movs	r4, r1
 801c91c:	0010      	movs	r0, r2
 801c91e:	0019      	movs	r1, r3
 801c920:	1cfb      	adds	r3, r7, #3
 801c922:	1c22      	adds	r2, r4, #0
 801c924:	701a      	strb	r2, [r3, #0]
 801c926:	1cbb      	adds	r3, r7, #2
 801c928:	1c02      	adds	r2, r0, #0
 801c92a:	701a      	strb	r2, [r3, #0]
 801c92c:	003b      	movs	r3, r7
 801c92e:	1c0a      	adds	r2, r1, #0
 801c930:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c932:	260f      	movs	r6, #15
 801c934:	19bb      	adds	r3, r7, r6
 801c936:	2200      	movs	r2, #0
 801c938:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c93a:	250e      	movs	r5, #14
 801c93c:	197b      	adds	r3, r7, r5
 801c93e:	2200      	movs	r2, #0
 801c940:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c942:	687a      	ldr	r2, [r7, #4]
 801c944:	23b0      	movs	r3, #176	@ 0xb0
 801c946:	009b      	lsls	r3, r3, #2
 801c948:	58d0      	ldr	r0, [r2, r3]
 801c94a:	19bc      	adds	r4, r7, r6
 801c94c:	1cbb      	adds	r3, r7, #2
 801c94e:	781d      	ldrb	r5, [r3, #0]
 801c950:	003b      	movs	r3, r7
 801c952:	881a      	ldrh	r2, [r3, #0]
 801c954:	1cfb      	adds	r3, r7, #3
 801c956:	7819      	ldrb	r1, [r3, #0]
 801c958:	002b      	movs	r3, r5
 801c95a:	f7f6 f9a2 	bl	8012ca2 <HAL_PCD_EP_Open>
 801c95e:	0003      	movs	r3, r0
 801c960:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c962:	250e      	movs	r5, #14
 801c964:	197c      	adds	r4, r7, r5
 801c966:	19bb      	adds	r3, r7, r6
 801c968:	781b      	ldrb	r3, [r3, #0]
 801c96a:	0018      	movs	r0, r3
 801c96c:	f000 f985 	bl	801cc7a <USBD_Get_USB_Status>
 801c970:	0003      	movs	r3, r0
 801c972:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c974:	197b      	adds	r3, r7, r5
 801c976:	781b      	ldrb	r3, [r3, #0]
}
 801c978:	0018      	movs	r0, r3
 801c97a:	46bd      	mov	sp, r7
 801c97c:	b005      	add	sp, #20
 801c97e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c980 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c980:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c982:	b085      	sub	sp, #20
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
 801c988:	000a      	movs	r2, r1
 801c98a:	1cfb      	adds	r3, r7, #3
 801c98c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c98e:	210f      	movs	r1, #15
 801c990:	187b      	adds	r3, r7, r1
 801c992:	2200      	movs	r2, #0
 801c994:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c996:	260e      	movs	r6, #14
 801c998:	19bb      	adds	r3, r7, r6
 801c99a:	2200      	movs	r2, #0
 801c99c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c99e:	687a      	ldr	r2, [r7, #4]
 801c9a0:	23b0      	movs	r3, #176	@ 0xb0
 801c9a2:	009b      	lsls	r3, r3, #2
 801c9a4:	58d2      	ldr	r2, [r2, r3]
 801c9a6:	000d      	movs	r5, r1
 801c9a8:	187c      	adds	r4, r7, r1
 801c9aa:	1cfb      	adds	r3, r7, #3
 801c9ac:	781b      	ldrb	r3, [r3, #0]
 801c9ae:	0019      	movs	r1, r3
 801c9b0:	0010      	movs	r0, r2
 801c9b2:	f7f6 f9e5 	bl	8012d80 <HAL_PCD_EP_Close>
 801c9b6:	0003      	movs	r3, r0
 801c9b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c9ba:	19bc      	adds	r4, r7, r6
 801c9bc:	197b      	adds	r3, r7, r5
 801c9be:	781b      	ldrb	r3, [r3, #0]
 801c9c0:	0018      	movs	r0, r3
 801c9c2:	f000 f95a 	bl	801cc7a <USBD_Get_USB_Status>
 801c9c6:	0003      	movs	r3, r0
 801c9c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c9ca:	19bb      	adds	r3, r7, r6
 801c9cc:	781b      	ldrb	r3, [r3, #0]
}
 801c9ce:	0018      	movs	r0, r3
 801c9d0:	46bd      	mov	sp, r7
 801c9d2:	b005      	add	sp, #20
 801c9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c9d6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c9d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9d8:	b085      	sub	sp, #20
 801c9da:	af00      	add	r7, sp, #0
 801c9dc:	6078      	str	r0, [r7, #4]
 801c9de:	000a      	movs	r2, r1
 801c9e0:	1cfb      	adds	r3, r7, #3
 801c9e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c9e4:	210f      	movs	r1, #15
 801c9e6:	187b      	adds	r3, r7, r1
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c9ec:	260e      	movs	r6, #14
 801c9ee:	19bb      	adds	r3, r7, r6
 801c9f0:	2200      	movs	r2, #0
 801c9f2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c9f4:	687a      	ldr	r2, [r7, #4]
 801c9f6:	23b0      	movs	r3, #176	@ 0xb0
 801c9f8:	009b      	lsls	r3, r3, #2
 801c9fa:	58d2      	ldr	r2, [r2, r3]
 801c9fc:	000d      	movs	r5, r1
 801c9fe:	187c      	adds	r4, r7, r1
 801ca00:	1cfb      	adds	r3, r7, #3
 801ca02:	781b      	ldrb	r3, [r3, #0]
 801ca04:	0019      	movs	r1, r3
 801ca06:	0010      	movs	r0, r2
 801ca08:	f7f6 fa97 	bl	8012f3a <HAL_PCD_EP_SetStall>
 801ca0c:	0003      	movs	r3, r0
 801ca0e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca10:	19bc      	adds	r4, r7, r6
 801ca12:	197b      	adds	r3, r7, r5
 801ca14:	781b      	ldrb	r3, [r3, #0]
 801ca16:	0018      	movs	r0, r3
 801ca18:	f000 f92f 	bl	801cc7a <USBD_Get_USB_Status>
 801ca1c:	0003      	movs	r3, r0
 801ca1e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ca20:	19bb      	adds	r3, r7, r6
 801ca22:	781b      	ldrb	r3, [r3, #0]
}
 801ca24:	0018      	movs	r0, r3
 801ca26:	46bd      	mov	sp, r7
 801ca28:	b005      	add	sp, #20
 801ca2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca2c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca2e:	b085      	sub	sp, #20
 801ca30:	af00      	add	r7, sp, #0
 801ca32:	6078      	str	r0, [r7, #4]
 801ca34:	000a      	movs	r2, r1
 801ca36:	1cfb      	adds	r3, r7, #3
 801ca38:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca3a:	210f      	movs	r1, #15
 801ca3c:	187b      	adds	r3, r7, r1
 801ca3e:	2200      	movs	r2, #0
 801ca40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca42:	260e      	movs	r6, #14
 801ca44:	19bb      	adds	r3, r7, r6
 801ca46:	2200      	movs	r2, #0
 801ca48:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ca4a:	687a      	ldr	r2, [r7, #4]
 801ca4c:	23b0      	movs	r3, #176	@ 0xb0
 801ca4e:	009b      	lsls	r3, r3, #2
 801ca50:	58d2      	ldr	r2, [r2, r3]
 801ca52:	000d      	movs	r5, r1
 801ca54:	187c      	adds	r4, r7, r1
 801ca56:	1cfb      	adds	r3, r7, #3
 801ca58:	781b      	ldrb	r3, [r3, #0]
 801ca5a:	0019      	movs	r1, r3
 801ca5c:	0010      	movs	r0, r2
 801ca5e:	f7f6 fac8 	bl	8012ff2 <HAL_PCD_EP_ClrStall>
 801ca62:	0003      	movs	r3, r0
 801ca64:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca66:	19bc      	adds	r4, r7, r6
 801ca68:	197b      	adds	r3, r7, r5
 801ca6a:	781b      	ldrb	r3, [r3, #0]
 801ca6c:	0018      	movs	r0, r3
 801ca6e:	f000 f904 	bl	801cc7a <USBD_Get_USB_Status>
 801ca72:	0003      	movs	r3, r0
 801ca74:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ca76:	19bb      	adds	r3, r7, r6
 801ca78:	781b      	ldrb	r3, [r3, #0]
}
 801ca7a:	0018      	movs	r0, r3
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	b005      	add	sp, #20
 801ca80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca82 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca82:	b580      	push	{r7, lr}
 801ca84:	b084      	sub	sp, #16
 801ca86:	af00      	add	r7, sp, #0
 801ca88:	6078      	str	r0, [r7, #4]
 801ca8a:	000a      	movs	r2, r1
 801ca8c:	1cfb      	adds	r3, r7, #3
 801ca8e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ca90:	687a      	ldr	r2, [r7, #4]
 801ca92:	23b0      	movs	r3, #176	@ 0xb0
 801ca94:	009b      	lsls	r3, r3, #2
 801ca96:	58d3      	ldr	r3, [r2, r3]
 801ca98:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ca9a:	1cfb      	adds	r3, r7, #3
 801ca9c:	781b      	ldrb	r3, [r3, #0]
 801ca9e:	b25b      	sxtb	r3, r3
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	da0d      	bge.n	801cac0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801caa4:	1cfb      	adds	r3, r7, #3
 801caa6:	781b      	ldrb	r3, [r3, #0]
 801caa8:	227f      	movs	r2, #127	@ 0x7f
 801caaa:	4013      	ands	r3, r2
 801caac:	68f9      	ldr	r1, [r7, #12]
 801caae:	1c5a      	adds	r2, r3, #1
 801cab0:	0013      	movs	r3, r2
 801cab2:	009b      	lsls	r3, r3, #2
 801cab4:	189b      	adds	r3, r3, r2
 801cab6:	00db      	lsls	r3, r3, #3
 801cab8:	18cb      	adds	r3, r1, r3
 801caba:	3302      	adds	r3, #2
 801cabc:	781b      	ldrb	r3, [r3, #0]
 801cabe:	e00d      	b.n	801cadc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cac0:	1cfb      	adds	r3, r7, #3
 801cac2:	781b      	ldrb	r3, [r3, #0]
 801cac4:	227f      	movs	r2, #127	@ 0x7f
 801cac6:	401a      	ands	r2, r3
 801cac8:	68f8      	ldr	r0, [r7, #12]
 801caca:	23b5      	movs	r3, #181	@ 0xb5
 801cacc:	0059      	lsls	r1, r3, #1
 801cace:	0013      	movs	r3, r2
 801cad0:	009b      	lsls	r3, r3, #2
 801cad2:	189b      	adds	r3, r3, r2
 801cad4:	00db      	lsls	r3, r3, #3
 801cad6:	18c3      	adds	r3, r0, r3
 801cad8:	185b      	adds	r3, r3, r1
 801cada:	781b      	ldrb	r3, [r3, #0]
  }
}
 801cadc:	0018      	movs	r0, r3
 801cade:	46bd      	mov	sp, r7
 801cae0:	b004      	add	sp, #16
 801cae2:	bd80      	pop	{r7, pc}

0801cae4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cae6:	b085      	sub	sp, #20
 801cae8:	af00      	add	r7, sp, #0
 801caea:	6078      	str	r0, [r7, #4]
 801caec:	000a      	movs	r2, r1
 801caee:	1cfb      	adds	r3, r7, #3
 801caf0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801caf2:	210f      	movs	r1, #15
 801caf4:	187b      	adds	r3, r7, r1
 801caf6:	2200      	movs	r2, #0
 801caf8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cafa:	260e      	movs	r6, #14
 801cafc:	19bb      	adds	r3, r7, r6
 801cafe:	2200      	movs	r2, #0
 801cb00:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801cb02:	687a      	ldr	r2, [r7, #4]
 801cb04:	23b0      	movs	r3, #176	@ 0xb0
 801cb06:	009b      	lsls	r3, r3, #2
 801cb08:	58d2      	ldr	r2, [r2, r3]
 801cb0a:	000d      	movs	r5, r1
 801cb0c:	187c      	adds	r4, r7, r1
 801cb0e:	1cfb      	adds	r3, r7, #3
 801cb10:	781b      	ldrb	r3, [r3, #0]
 801cb12:	0019      	movs	r1, r3
 801cb14:	0010      	movs	r0, r2
 801cb16:	f7f6 f899 	bl	8012c4c <HAL_PCD_SetAddress>
 801cb1a:	0003      	movs	r3, r0
 801cb1c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb1e:	19bc      	adds	r4, r7, r6
 801cb20:	197b      	adds	r3, r7, r5
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	0018      	movs	r0, r3
 801cb26:	f000 f8a8 	bl	801cc7a <USBD_Get_USB_Status>
 801cb2a:	0003      	movs	r3, r0
 801cb2c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cb2e:	19bb      	adds	r3, r7, r6
 801cb30:	781b      	ldrb	r3, [r3, #0]
}
 801cb32:	0018      	movs	r0, r3
 801cb34:	46bd      	mov	sp, r7
 801cb36:	b005      	add	sp, #20
 801cb38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cb3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb3c:	b087      	sub	sp, #28
 801cb3e:	af00      	add	r7, sp, #0
 801cb40:	60f8      	str	r0, [r7, #12]
 801cb42:	0008      	movs	r0, r1
 801cb44:	607a      	str	r2, [r7, #4]
 801cb46:	0019      	movs	r1, r3
 801cb48:	230b      	movs	r3, #11
 801cb4a:	18fb      	adds	r3, r7, r3
 801cb4c:	1c02      	adds	r2, r0, #0
 801cb4e:	701a      	strb	r2, [r3, #0]
 801cb50:	2408      	movs	r4, #8
 801cb52:	193b      	adds	r3, r7, r4
 801cb54:	1c0a      	adds	r2, r1, #0
 801cb56:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb58:	2117      	movs	r1, #23
 801cb5a:	187b      	adds	r3, r7, r1
 801cb5c:	2200      	movs	r2, #0
 801cb5e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb60:	2516      	movs	r5, #22
 801cb62:	197b      	adds	r3, r7, r5
 801cb64:	2200      	movs	r2, #0
 801cb66:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cb68:	68fa      	ldr	r2, [r7, #12]
 801cb6a:	23b0      	movs	r3, #176	@ 0xb0
 801cb6c:	009b      	lsls	r3, r3, #2
 801cb6e:	58d0      	ldr	r0, [r2, r3]
 801cb70:	193b      	adds	r3, r7, r4
 801cb72:	881d      	ldrh	r5, [r3, #0]
 801cb74:	000e      	movs	r6, r1
 801cb76:	187c      	adds	r4, r7, r1
 801cb78:	687a      	ldr	r2, [r7, #4]
 801cb7a:	230b      	movs	r3, #11
 801cb7c:	18fb      	adds	r3, r7, r3
 801cb7e:	7819      	ldrb	r1, [r3, #0]
 801cb80:	002b      	movs	r3, r5
 801cb82:	f7f6 f99e 	bl	8012ec2 <HAL_PCD_EP_Transmit>
 801cb86:	0003      	movs	r3, r0
 801cb88:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb8a:	2516      	movs	r5, #22
 801cb8c:	197c      	adds	r4, r7, r5
 801cb8e:	19bb      	adds	r3, r7, r6
 801cb90:	781b      	ldrb	r3, [r3, #0]
 801cb92:	0018      	movs	r0, r3
 801cb94:	f000 f871 	bl	801cc7a <USBD_Get_USB_Status>
 801cb98:	0003      	movs	r3, r0
 801cb9a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cb9c:	197b      	adds	r3, r7, r5
 801cb9e:	781b      	ldrb	r3, [r3, #0]
}
 801cba0:	0018      	movs	r0, r3
 801cba2:	46bd      	mov	sp, r7
 801cba4:	b007      	add	sp, #28
 801cba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cba8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbaa:	b087      	sub	sp, #28
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	60f8      	str	r0, [r7, #12]
 801cbb0:	0008      	movs	r0, r1
 801cbb2:	607a      	str	r2, [r7, #4]
 801cbb4:	0019      	movs	r1, r3
 801cbb6:	230b      	movs	r3, #11
 801cbb8:	18fb      	adds	r3, r7, r3
 801cbba:	1c02      	adds	r2, r0, #0
 801cbbc:	701a      	strb	r2, [r3, #0]
 801cbbe:	2408      	movs	r4, #8
 801cbc0:	193b      	adds	r3, r7, r4
 801cbc2:	1c0a      	adds	r2, r1, #0
 801cbc4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cbc6:	2117      	movs	r1, #23
 801cbc8:	187b      	adds	r3, r7, r1
 801cbca:	2200      	movs	r2, #0
 801cbcc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cbce:	2516      	movs	r5, #22
 801cbd0:	197b      	adds	r3, r7, r5
 801cbd2:	2200      	movs	r2, #0
 801cbd4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cbd6:	68fa      	ldr	r2, [r7, #12]
 801cbd8:	23b0      	movs	r3, #176	@ 0xb0
 801cbda:	009b      	lsls	r3, r3, #2
 801cbdc:	58d0      	ldr	r0, [r2, r3]
 801cbde:	193b      	adds	r3, r7, r4
 801cbe0:	881d      	ldrh	r5, [r3, #0]
 801cbe2:	000e      	movs	r6, r1
 801cbe4:	187c      	adds	r4, r7, r1
 801cbe6:	687a      	ldr	r2, [r7, #4]
 801cbe8:	230b      	movs	r3, #11
 801cbea:	18fb      	adds	r3, r7, r3
 801cbec:	7819      	ldrb	r1, [r3, #0]
 801cbee:	002b      	movs	r3, r5
 801cbf0:	f7f6 f917 	bl	8012e22 <HAL_PCD_EP_Receive>
 801cbf4:	0003      	movs	r3, r0
 801cbf6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cbf8:	2516      	movs	r5, #22
 801cbfa:	197c      	adds	r4, r7, r5
 801cbfc:	19bb      	adds	r3, r7, r6
 801cbfe:	781b      	ldrb	r3, [r3, #0]
 801cc00:	0018      	movs	r0, r3
 801cc02:	f000 f83a 	bl	801cc7a <USBD_Get_USB_Status>
 801cc06:	0003      	movs	r3, r0
 801cc08:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cc0a:	197b      	adds	r3, r7, r5
 801cc0c:	781b      	ldrb	r3, [r3, #0]
}
 801cc0e:	0018      	movs	r0, r3
 801cc10:	46bd      	mov	sp, r7
 801cc12:	b007      	add	sp, #28
 801cc14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cc16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cc16:	b580      	push	{r7, lr}
 801cc18:	b082      	sub	sp, #8
 801cc1a:	af00      	add	r7, sp, #0
 801cc1c:	6078      	str	r0, [r7, #4]
 801cc1e:	000a      	movs	r2, r1
 801cc20:	1cfb      	adds	r3, r7, #3
 801cc22:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cc24:	687a      	ldr	r2, [r7, #4]
 801cc26:	23b0      	movs	r3, #176	@ 0xb0
 801cc28:	009b      	lsls	r3, r3, #2
 801cc2a:	58d2      	ldr	r2, [r2, r3]
 801cc2c:	1cfb      	adds	r3, r7, #3
 801cc2e:	781b      	ldrb	r3, [r3, #0]
 801cc30:	0019      	movs	r1, r3
 801cc32:	0010      	movs	r0, r2
 801cc34:	f7f6 f92c 	bl	8012e90 <HAL_PCD_EP_GetRxCount>
 801cc38:	0003      	movs	r3, r0
}
 801cc3a:	0018      	movs	r0, r3
 801cc3c:	46bd      	mov	sp, r7
 801cc3e:	b002      	add	sp, #8
 801cc40:	bd80      	pop	{r7, pc}
	...

0801cc44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b082      	sub	sp, #8
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801cc4c:	4b02      	ldr	r3, [pc, #8]	@ (801cc58 <USBD_static_malloc+0x14>)
}
 801cc4e:	0018      	movs	r0, r3
 801cc50:	46bd      	mov	sp, r7
 801cc52:	b002      	add	sp, #8
 801cc54:	bd80      	pop	{r7, pc}
 801cc56:	46c0      	nop			@ (mov r8, r8)
 801cc58:	20003594 	.word	0x20003594

0801cc5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b082      	sub	sp, #8
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	6078      	str	r0, [r7, #4]

}
 801cc64:	46c0      	nop			@ (mov r8, r8)
 801cc66:	46bd      	mov	sp, r7
 801cc68:	b002      	add	sp, #8
 801cc6a:	bd80      	pop	{r7, pc}

0801cc6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801cc70:	f7eb faca 	bl	8008208 <SystemClock_Config>
}
 801cc74:	46c0      	nop			@ (mov r8, r8)
 801cc76:	46bd      	mov	sp, r7
 801cc78:	bd80      	pop	{r7, pc}

0801cc7a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cc7a:	b580      	push	{r7, lr}
 801cc7c:	b084      	sub	sp, #16
 801cc7e:	af00      	add	r7, sp, #0
 801cc80:	0002      	movs	r2, r0
 801cc82:	1dfb      	adds	r3, r7, #7
 801cc84:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc86:	230f      	movs	r3, #15
 801cc88:	18fb      	adds	r3, r7, r3
 801cc8a:	2200      	movs	r2, #0
 801cc8c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801cc8e:	1dfb      	adds	r3, r7, #7
 801cc90:	781b      	ldrb	r3, [r3, #0]
 801cc92:	2b03      	cmp	r3, #3
 801cc94:	d017      	beq.n	801ccc6 <USBD_Get_USB_Status+0x4c>
 801cc96:	dc1b      	bgt.n	801ccd0 <USBD_Get_USB_Status+0x56>
 801cc98:	2b02      	cmp	r3, #2
 801cc9a:	d00f      	beq.n	801ccbc <USBD_Get_USB_Status+0x42>
 801cc9c:	dc18      	bgt.n	801ccd0 <USBD_Get_USB_Status+0x56>
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d002      	beq.n	801cca8 <USBD_Get_USB_Status+0x2e>
 801cca2:	2b01      	cmp	r3, #1
 801cca4:	d005      	beq.n	801ccb2 <USBD_Get_USB_Status+0x38>
 801cca6:	e013      	b.n	801ccd0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801cca8:	230f      	movs	r3, #15
 801ccaa:	18fb      	adds	r3, r7, r3
 801ccac:	2200      	movs	r2, #0
 801ccae:	701a      	strb	r2, [r3, #0]
    break;
 801ccb0:	e013      	b.n	801ccda <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ccb2:	230f      	movs	r3, #15
 801ccb4:	18fb      	adds	r3, r7, r3
 801ccb6:	2202      	movs	r2, #2
 801ccb8:	701a      	strb	r2, [r3, #0]
    break;
 801ccba:	e00e      	b.n	801ccda <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ccbc:	230f      	movs	r3, #15
 801ccbe:	18fb      	adds	r3, r7, r3
 801ccc0:	2201      	movs	r2, #1
 801ccc2:	701a      	strb	r2, [r3, #0]
    break;
 801ccc4:	e009      	b.n	801ccda <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ccc6:	230f      	movs	r3, #15
 801ccc8:	18fb      	adds	r3, r7, r3
 801ccca:	2202      	movs	r2, #2
 801cccc:	701a      	strb	r2, [r3, #0]
    break;
 801ccce:	e004      	b.n	801ccda <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801ccd0:	230f      	movs	r3, #15
 801ccd2:	18fb      	adds	r3, r7, r3
 801ccd4:	2202      	movs	r2, #2
 801ccd6:	701a      	strb	r2, [r3, #0]
    break;
 801ccd8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801ccda:	230f      	movs	r3, #15
 801ccdc:	18fb      	adds	r3, r7, r3
 801ccde:	781b      	ldrb	r3, [r3, #0]
}
 801cce0:	0018      	movs	r0, r3
 801cce2:	46bd      	mov	sp, r7
 801cce4:	b004      	add	sp, #16
 801cce6:	bd80      	pop	{r7, pc}

0801cce8 <arm_cfft_radix4by2_q31>:
 801cce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccea:	465f      	mov	r7, fp
 801ccec:	4656      	mov	r6, sl
 801ccee:	464d      	mov	r5, r9
 801ccf0:	4644      	mov	r4, r8
 801ccf2:	000b      	movs	r3, r1
 801ccf4:	b4f0      	push	{r4, r5, r6, r7}
 801ccf6:	085b      	lsrs	r3, r3, #1
 801ccf8:	b08f      	sub	sp, #60	@ 0x3c
 801ccfa:	910a      	str	r1, [sp, #40]	@ 0x28
 801ccfc:	0007      	movs	r7, r0
 801ccfe:	9009      	str	r0, [sp, #36]	@ 0x24
 801cd00:	0011      	movs	r1, r2
 801cd02:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cd04:	930c      	str	r3, [sp, #48]	@ 0x30
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d100      	bne.n	801cd0c <arm_cfft_radix4by2_q31+0x24>
 801cd0a:	e0a0      	b.n	801ce4e <arm_cfft_radix4by2_q31+0x166>
 801cd0c:	0002      	movs	r2, r0
 801cd0e:	00db      	lsls	r3, r3, #3
 801cd10:	3204      	adds	r2, #4
 801cd12:	4691      	mov	r9, r2
 801cd14:	4698      	mov	r8, r3
 801cd16:	000a      	movs	r2, r1
 801cd18:	464e      	mov	r6, r9
 801cd1a:	4442      	add	r2, r8
 801cd1c:	4699      	mov	r9, r3
 801cd1e:	4688      	mov	r8, r1
 801cd20:	9208      	str	r2, [sp, #32]
 801cd22:	900d      	str	r0, [sp, #52]	@ 0x34
 801cd24:	4643      	mov	r3, r8
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	469b      	mov	fp, r3
 801cd2a:	4643      	mov	r3, r8
 801cd2c:	685b      	ldr	r3, [r3, #4]
 801cd2e:	469a      	mov	sl, r3
 801cd30:	683b      	ldr	r3, [r7, #0]
 801cd32:	109c      	asrs	r4, r3, #2
 801cd34:	464b      	mov	r3, r9
 801cd36:	58fb      	ldr	r3, [r7, r3]
 801cd38:	109a      	asrs	r2, r3, #2
 801cd3a:	18a3      	adds	r3, r4, r2
 801cd3c:	603b      	str	r3, [r7, #0]
 801cd3e:	6833      	ldr	r3, [r6, #0]
 801cd40:	1aa4      	subs	r4, r4, r2
 801cd42:	109d      	asrs	r5, r3, #2
 801cd44:	464b      	mov	r3, r9
 801cd46:	58f3      	ldr	r3, [r6, r3]
 801cd48:	17e2      	asrs	r2, r4, #31
 801cd4a:	109b      	asrs	r3, r3, #2
 801cd4c:	18e9      	adds	r1, r5, r3
 801cd4e:	6031      	str	r1, [r6, #0]
 801cd50:	0011      	movs	r1, r2
 801cd52:	465a      	mov	r2, fp
 801cd54:	17d2      	asrs	r2, r2, #31
 801cd56:	0010      	movs	r0, r2
 801cd58:	4652      	mov	r2, sl
 801cd5a:	1aed      	subs	r5, r5, r3
 801cd5c:	17eb      	asrs	r3, r5, #31
 801cd5e:	17d2      	asrs	r2, r2, #31
 801cd60:	9307      	str	r3, [sp, #28]
 801cd62:	9204      	str	r2, [sp, #16]
 801cd64:	0003      	movs	r3, r0
 801cd66:	465a      	mov	r2, fp
 801cd68:	9006      	str	r0, [sp, #24]
 801cd6a:	0020      	movs	r0, r4
 801cd6c:	9105      	str	r1, [sp, #20]
 801cd6e:	f7e3 fc27 	bl	80005c0 <__aeabi_lmul>
 801cd72:	2280      	movs	r2, #128	@ 0x80
 801cd74:	2300      	movs	r3, #0
 801cd76:	0612      	lsls	r2, r2, #24
 801cd78:	1880      	adds	r0, r0, r2
 801cd7a:	4159      	adcs	r1, r3
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	9101      	str	r1, [sp, #4]
 801cd80:	9300      	str	r3, [sp, #0]
 801cd82:	4652      	mov	r2, sl
 801cd84:	9b04      	ldr	r3, [sp, #16]
 801cd86:	0028      	movs	r0, r5
 801cd88:	17e9      	asrs	r1, r5, #31
 801cd8a:	f7e3 fc19 	bl	80005c0 <__aeabi_lmul>
 801cd8e:	9a00      	ldr	r2, [sp, #0]
 801cd90:	9b01      	ldr	r3, [sp, #4]
 801cd92:	1880      	adds	r0, r0, r2
 801cd94:	4159      	adcs	r1, r3
 801cd96:	2280      	movs	r2, #128	@ 0x80
 801cd98:	2300      	movs	r3, #0
 801cd9a:	0612      	lsls	r2, r2, #24
 801cd9c:	1880      	adds	r0, r0, r2
 801cd9e:	4159      	adcs	r1, r3
 801cda0:	464a      	mov	r2, r9
 801cda2:	004b      	lsls	r3, r1, #1
 801cda4:	50bb      	str	r3, [r7, r2]
 801cda6:	4658      	mov	r0, fp
 801cda8:	002a      	movs	r2, r5
 801cdaa:	9b07      	ldr	r3, [sp, #28]
 801cdac:	9906      	ldr	r1, [sp, #24]
 801cdae:	f7e3 fc07 	bl	80005c0 <__aeabi_lmul>
 801cdb2:	2280      	movs	r2, #128	@ 0x80
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	0612      	lsls	r2, r2, #24
 801cdb8:	1880      	adds	r0, r0, r2
 801cdba:	4159      	adcs	r1, r3
 801cdbc:	2000      	movs	r0, #0
 801cdbe:	9103      	str	r1, [sp, #12]
 801cdc0:	9002      	str	r0, [sp, #8]
 801cdc2:	4652      	mov	r2, sl
 801cdc4:	9b04      	ldr	r3, [sp, #16]
 801cdc6:	0020      	movs	r0, r4
 801cdc8:	9905      	ldr	r1, [sp, #20]
 801cdca:	f7e3 fbf9 	bl	80005c0 <__aeabi_lmul>
 801cdce:	9a02      	ldr	r2, [sp, #8]
 801cdd0:	9b03      	ldr	r3, [sp, #12]
 801cdd2:	1a12      	subs	r2, r2, r0
 801cdd4:	418b      	sbcs	r3, r1
 801cdd6:	2080      	movs	r0, #128	@ 0x80
 801cdd8:	2100      	movs	r1, #0
 801cdda:	0600      	lsls	r0, r0, #24
 801cddc:	1812      	adds	r2, r2, r0
 801cdde:	414b      	adcs	r3, r1
 801cde0:	464a      	mov	r2, r9
 801cde2:	005b      	lsls	r3, r3, #1
 801cde4:	50b3      	str	r3, [r6, r2]
 801cde6:	2308      	movs	r3, #8
 801cde8:	469c      	mov	ip, r3
 801cdea:	9b08      	ldr	r3, [sp, #32]
 801cdec:	44e0      	add	r8, ip
 801cdee:	3708      	adds	r7, #8
 801cdf0:	3608      	adds	r6, #8
 801cdf2:	4598      	cmp	r8, r3
 801cdf4:	d196      	bne.n	801cd24 <arm_cfft_radix4by2_q31+0x3c>
 801cdf6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cdf8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cdfa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cdfc:	2302      	movs	r3, #2
 801cdfe:	003a      	movs	r2, r7
 801ce00:	0029      	movs	r1, r5
 801ce02:	0020      	movs	r0, r4
 801ce04:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801ce06:	f000 f957 	bl	801d0b8 <arm_radix4_butterfly_q31>
 801ce0a:	46a4      	mov	ip, r4
 801ce0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ce0e:	2302      	movs	r3, #2
 801ce10:	0088      	lsls	r0, r1, #2
 801ce12:	4460      	add	r0, ip
 801ce14:	003a      	movs	r2, r7
 801ce16:	0029      	movs	r1, r5
 801ce18:	f000 f94e 	bl	801d0b8 <arm_radix4_butterfly_q31>
 801ce1c:	46a4      	mov	ip, r4
 801ce1e:	0128      	lsls	r0, r5, #4
 801ce20:	4460      	add	r0, ip
 801ce22:	6833      	ldr	r3, [r6, #0]
 801ce24:	005b      	lsls	r3, r3, #1
 801ce26:	6033      	str	r3, [r6, #0]
 801ce28:	6873      	ldr	r3, [r6, #4]
 801ce2a:	005b      	lsls	r3, r3, #1
 801ce2c:	6073      	str	r3, [r6, #4]
 801ce2e:	68b3      	ldr	r3, [r6, #8]
 801ce30:	005b      	lsls	r3, r3, #1
 801ce32:	60b3      	str	r3, [r6, #8]
 801ce34:	68f3      	ldr	r3, [r6, #12]
 801ce36:	005b      	lsls	r3, r3, #1
 801ce38:	60f3      	str	r3, [r6, #12]
 801ce3a:	3610      	adds	r6, #16
 801ce3c:	42b0      	cmp	r0, r6
 801ce3e:	d1f0      	bne.n	801ce22 <arm_cfft_radix4by2_q31+0x13a>
 801ce40:	b00f      	add	sp, #60	@ 0x3c
 801ce42:	bc3c      	pop	{r2, r3, r4, r5}
 801ce44:	4690      	mov	r8, r2
 801ce46:	4699      	mov	r9, r3
 801ce48:	46a2      	mov	sl, r4
 801ce4a:	46ab      	mov	fp, r5
 801ce4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce4e:	2302      	movs	r3, #2
 801ce50:	2100      	movs	r1, #0
 801ce52:	0015      	movs	r5, r2
 801ce54:	f000 f930 	bl	801d0b8 <arm_radix4_butterfly_q31>
 801ce58:	46bc      	mov	ip, r7
 801ce5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce5c:	002a      	movs	r2, r5
 801ce5e:	0098      	lsls	r0, r3, #2
 801ce60:	4460      	add	r0, ip
 801ce62:	2302      	movs	r3, #2
 801ce64:	2100      	movs	r1, #0
 801ce66:	f000 f927 	bl	801d0b8 <arm_radix4_butterfly_q31>
 801ce6a:	e7e9      	b.n	801ce40 <arm_cfft_radix4by2_q31+0x158>

0801ce6c <arm_cfft_radix4by2_inverse_q31>:
 801ce6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce6e:	465f      	mov	r7, fp
 801ce70:	4656      	mov	r6, sl
 801ce72:	464d      	mov	r5, r9
 801ce74:	4644      	mov	r4, r8
 801ce76:	000b      	movs	r3, r1
 801ce78:	b4f0      	push	{r4, r5, r6, r7}
 801ce7a:	085b      	lsrs	r3, r3, #1
 801ce7c:	b08f      	sub	sp, #60	@ 0x3c
 801ce7e:	910a      	str	r1, [sp, #40]	@ 0x28
 801ce80:	0007      	movs	r7, r0
 801ce82:	9009      	str	r0, [sp, #36]	@ 0x24
 801ce84:	0011      	movs	r1, r2
 801ce86:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ce88:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d100      	bne.n	801ce90 <arm_cfft_radix4by2_inverse_q31+0x24>
 801ce8e:	e0a0      	b.n	801cfd2 <arm_cfft_radix4by2_inverse_q31+0x166>
 801ce90:	0002      	movs	r2, r0
 801ce92:	00db      	lsls	r3, r3, #3
 801ce94:	3204      	adds	r2, #4
 801ce96:	4691      	mov	r9, r2
 801ce98:	4698      	mov	r8, r3
 801ce9a:	000a      	movs	r2, r1
 801ce9c:	464e      	mov	r6, r9
 801ce9e:	4442      	add	r2, r8
 801cea0:	4699      	mov	r9, r3
 801cea2:	4688      	mov	r8, r1
 801cea4:	9208      	str	r2, [sp, #32]
 801cea6:	900d      	str	r0, [sp, #52]	@ 0x34
 801cea8:	4643      	mov	r3, r8
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	469b      	mov	fp, r3
 801ceae:	4643      	mov	r3, r8
 801ceb0:	685b      	ldr	r3, [r3, #4]
 801ceb2:	469a      	mov	sl, r3
 801ceb4:	683b      	ldr	r3, [r7, #0]
 801ceb6:	109c      	asrs	r4, r3, #2
 801ceb8:	464b      	mov	r3, r9
 801ceba:	58fb      	ldr	r3, [r7, r3]
 801cebc:	109a      	asrs	r2, r3, #2
 801cebe:	18a3      	adds	r3, r4, r2
 801cec0:	603b      	str	r3, [r7, #0]
 801cec2:	6833      	ldr	r3, [r6, #0]
 801cec4:	1aa4      	subs	r4, r4, r2
 801cec6:	109d      	asrs	r5, r3, #2
 801cec8:	464b      	mov	r3, r9
 801ceca:	58f3      	ldr	r3, [r6, r3]
 801cecc:	17e2      	asrs	r2, r4, #31
 801cece:	109b      	asrs	r3, r3, #2
 801ced0:	18e9      	adds	r1, r5, r3
 801ced2:	6031      	str	r1, [r6, #0]
 801ced4:	0011      	movs	r1, r2
 801ced6:	465a      	mov	r2, fp
 801ced8:	17d2      	asrs	r2, r2, #31
 801ceda:	0010      	movs	r0, r2
 801cedc:	4652      	mov	r2, sl
 801cede:	1aed      	subs	r5, r5, r3
 801cee0:	17eb      	asrs	r3, r5, #31
 801cee2:	17d2      	asrs	r2, r2, #31
 801cee4:	9307      	str	r3, [sp, #28]
 801cee6:	9204      	str	r2, [sp, #16]
 801cee8:	0003      	movs	r3, r0
 801ceea:	465a      	mov	r2, fp
 801ceec:	9006      	str	r0, [sp, #24]
 801ceee:	0020      	movs	r0, r4
 801cef0:	9105      	str	r1, [sp, #20]
 801cef2:	f7e3 fb65 	bl	80005c0 <__aeabi_lmul>
 801cef6:	2280      	movs	r2, #128	@ 0x80
 801cef8:	2300      	movs	r3, #0
 801cefa:	0612      	lsls	r2, r2, #24
 801cefc:	1880      	adds	r0, r0, r2
 801cefe:	4159      	adcs	r1, r3
 801cf00:	2300      	movs	r3, #0
 801cf02:	9101      	str	r1, [sp, #4]
 801cf04:	9300      	str	r3, [sp, #0]
 801cf06:	4652      	mov	r2, sl
 801cf08:	9b04      	ldr	r3, [sp, #16]
 801cf0a:	0028      	movs	r0, r5
 801cf0c:	17e9      	asrs	r1, r5, #31
 801cf0e:	f7e3 fb57 	bl	80005c0 <__aeabi_lmul>
 801cf12:	9a00      	ldr	r2, [sp, #0]
 801cf14:	9b01      	ldr	r3, [sp, #4]
 801cf16:	1a12      	subs	r2, r2, r0
 801cf18:	418b      	sbcs	r3, r1
 801cf1a:	2080      	movs	r0, #128	@ 0x80
 801cf1c:	2100      	movs	r1, #0
 801cf1e:	0600      	lsls	r0, r0, #24
 801cf20:	1812      	adds	r2, r2, r0
 801cf22:	414b      	adcs	r3, r1
 801cf24:	464a      	mov	r2, r9
 801cf26:	005b      	lsls	r3, r3, #1
 801cf28:	50bb      	str	r3, [r7, r2]
 801cf2a:	4658      	mov	r0, fp
 801cf2c:	002a      	movs	r2, r5
 801cf2e:	9b07      	ldr	r3, [sp, #28]
 801cf30:	9906      	ldr	r1, [sp, #24]
 801cf32:	f7e3 fb45 	bl	80005c0 <__aeabi_lmul>
 801cf36:	2280      	movs	r2, #128	@ 0x80
 801cf38:	2300      	movs	r3, #0
 801cf3a:	0612      	lsls	r2, r2, #24
 801cf3c:	1880      	adds	r0, r0, r2
 801cf3e:	4159      	adcs	r1, r3
 801cf40:	2000      	movs	r0, #0
 801cf42:	9103      	str	r1, [sp, #12]
 801cf44:	9002      	str	r0, [sp, #8]
 801cf46:	4652      	mov	r2, sl
 801cf48:	9b04      	ldr	r3, [sp, #16]
 801cf4a:	0020      	movs	r0, r4
 801cf4c:	9905      	ldr	r1, [sp, #20]
 801cf4e:	f7e3 fb37 	bl	80005c0 <__aeabi_lmul>
 801cf52:	9b02      	ldr	r3, [sp, #8]
 801cf54:	9c03      	ldr	r4, [sp, #12]
 801cf56:	18c0      	adds	r0, r0, r3
 801cf58:	4161      	adcs	r1, r4
 801cf5a:	2380      	movs	r3, #128	@ 0x80
 801cf5c:	2400      	movs	r4, #0
 801cf5e:	061b      	lsls	r3, r3, #24
 801cf60:	18c0      	adds	r0, r0, r3
 801cf62:	4161      	adcs	r1, r4
 801cf64:	464a      	mov	r2, r9
 801cf66:	004b      	lsls	r3, r1, #1
 801cf68:	50b3      	str	r3, [r6, r2]
 801cf6a:	2308      	movs	r3, #8
 801cf6c:	469c      	mov	ip, r3
 801cf6e:	9b08      	ldr	r3, [sp, #32]
 801cf70:	44e0      	add	r8, ip
 801cf72:	3708      	adds	r7, #8
 801cf74:	3608      	adds	r6, #8
 801cf76:	4598      	cmp	r8, r3
 801cf78:	d196      	bne.n	801cea8 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801cf7a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cf7c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cf7e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cf80:	2302      	movs	r3, #2
 801cf82:	003a      	movs	r2, r7
 801cf84:	0029      	movs	r1, r5
 801cf86:	0020      	movs	r0, r4
 801cf88:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801cf8a:	f000 fb3b 	bl	801d604 <arm_radix4_butterfly_inverse_q31>
 801cf8e:	46a4      	mov	ip, r4
 801cf90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cf92:	2302      	movs	r3, #2
 801cf94:	0088      	lsls	r0, r1, #2
 801cf96:	4460      	add	r0, ip
 801cf98:	003a      	movs	r2, r7
 801cf9a:	0029      	movs	r1, r5
 801cf9c:	f000 fb32 	bl	801d604 <arm_radix4_butterfly_inverse_q31>
 801cfa0:	46a4      	mov	ip, r4
 801cfa2:	0128      	lsls	r0, r5, #4
 801cfa4:	4460      	add	r0, ip
 801cfa6:	6833      	ldr	r3, [r6, #0]
 801cfa8:	005b      	lsls	r3, r3, #1
 801cfaa:	6033      	str	r3, [r6, #0]
 801cfac:	6873      	ldr	r3, [r6, #4]
 801cfae:	005b      	lsls	r3, r3, #1
 801cfb0:	6073      	str	r3, [r6, #4]
 801cfb2:	68b3      	ldr	r3, [r6, #8]
 801cfb4:	005b      	lsls	r3, r3, #1
 801cfb6:	60b3      	str	r3, [r6, #8]
 801cfb8:	68f3      	ldr	r3, [r6, #12]
 801cfba:	005b      	lsls	r3, r3, #1
 801cfbc:	60f3      	str	r3, [r6, #12]
 801cfbe:	3610      	adds	r6, #16
 801cfc0:	42b0      	cmp	r0, r6
 801cfc2:	d1f0      	bne.n	801cfa6 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801cfc4:	b00f      	add	sp, #60	@ 0x3c
 801cfc6:	bc3c      	pop	{r2, r3, r4, r5}
 801cfc8:	4690      	mov	r8, r2
 801cfca:	4699      	mov	r9, r3
 801cfcc:	46a2      	mov	sl, r4
 801cfce:	46ab      	mov	fp, r5
 801cfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfd2:	2302      	movs	r3, #2
 801cfd4:	2100      	movs	r1, #0
 801cfd6:	0015      	movs	r5, r2
 801cfd8:	f000 fb14 	bl	801d604 <arm_radix4_butterfly_inverse_q31>
 801cfdc:	46bc      	mov	ip, r7
 801cfde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cfe0:	002a      	movs	r2, r5
 801cfe2:	0098      	lsls	r0, r3, #2
 801cfe4:	4460      	add	r0, ip
 801cfe6:	2302      	movs	r3, #2
 801cfe8:	2100      	movs	r1, #0
 801cfea:	f000 fb0b 	bl	801d604 <arm_radix4_butterfly_inverse_q31>
 801cfee:	e7e9      	b.n	801cfc4 <arm_cfft_radix4by2_inverse_q31+0x158>

0801cff0 <arm_cfft_q31>:
 801cff0:	b570      	push	{r4, r5, r6, lr}
 801cff2:	001e      	movs	r6, r3
 801cff4:	2380      	movs	r3, #128	@ 0x80
 801cff6:	000d      	movs	r5, r1
 801cff8:	0004      	movs	r4, r0
 801cffa:	8801      	ldrh	r1, [r0, #0]
 801cffc:	005b      	lsls	r3, r3, #1
 801cffe:	2a01      	cmp	r2, #1
 801d000:	d028      	beq.n	801d054 <arm_cfft_q31+0x64>
 801d002:	4299      	cmp	r1, r3
 801d004:	d020      	beq.n	801d048 <arm_cfft_q31+0x58>
 801d006:	d812      	bhi.n	801d02e <arm_cfft_q31+0x3e>
 801d008:	2920      	cmp	r1, #32
 801d00a:	d004      	beq.n	801d016 <arm_cfft_q31+0x26>
 801d00c:	d949      	bls.n	801d0a2 <arm_cfft_q31+0xb2>
 801d00e:	2940      	cmp	r1, #64	@ 0x40
 801d010:	d01a      	beq.n	801d048 <arm_cfft_q31+0x58>
 801d012:	2980      	cmp	r1, #128	@ 0x80
 801d014:	d103      	bne.n	801d01e <arm_cfft_q31+0x2e>
 801d016:	6862      	ldr	r2, [r4, #4]
 801d018:	0028      	movs	r0, r5
 801d01a:	f7ff fe65 	bl	801cce8 <arm_cfft_radix4by2_q31>
 801d01e:	2e00      	cmp	r6, #0
 801d020:	d004      	beq.n	801d02c <arm_cfft_q31+0x3c>
 801d022:	68a2      	ldr	r2, [r4, #8]
 801d024:	89a1      	ldrh	r1, [r4, #12]
 801d026:	0028      	movs	r0, r5
 801d028:	f7e3 f86e 	bl	8000108 <arm_bitreversal_32>
 801d02c:	bd70      	pop	{r4, r5, r6, pc}
 801d02e:	2380      	movs	r3, #128	@ 0x80
 801d030:	00db      	lsls	r3, r3, #3
 801d032:	4299      	cmp	r1, r3
 801d034:	d008      	beq.n	801d048 <arm_cfft_q31+0x58>
 801d036:	d92f      	bls.n	801d098 <arm_cfft_q31+0xa8>
 801d038:	2380      	movs	r3, #128	@ 0x80
 801d03a:	011b      	lsls	r3, r3, #4
 801d03c:	4299      	cmp	r1, r3
 801d03e:	d0ea      	beq.n	801d016 <arm_cfft_q31+0x26>
 801d040:	2380      	movs	r3, #128	@ 0x80
 801d042:	015b      	lsls	r3, r3, #5
 801d044:	4299      	cmp	r1, r3
 801d046:	d1ea      	bne.n	801d01e <arm_cfft_q31+0x2e>
 801d048:	2301      	movs	r3, #1
 801d04a:	6862      	ldr	r2, [r4, #4]
 801d04c:	0028      	movs	r0, r5
 801d04e:	f000 f833 	bl	801d0b8 <arm_radix4_butterfly_q31>
 801d052:	e7e4      	b.n	801d01e <arm_cfft_q31+0x2e>
 801d054:	4299      	cmp	r1, r3
 801d056:	d019      	beq.n	801d08c <arm_cfft_q31+0x9c>
 801d058:	d80b      	bhi.n	801d072 <arm_cfft_q31+0x82>
 801d05a:	2920      	cmp	r1, #32
 801d05c:	d004      	beq.n	801d068 <arm_cfft_q31+0x78>
 801d05e:	d928      	bls.n	801d0b2 <arm_cfft_q31+0xc2>
 801d060:	2940      	cmp	r1, #64	@ 0x40
 801d062:	d013      	beq.n	801d08c <arm_cfft_q31+0x9c>
 801d064:	2980      	cmp	r1, #128	@ 0x80
 801d066:	d1da      	bne.n	801d01e <arm_cfft_q31+0x2e>
 801d068:	6862      	ldr	r2, [r4, #4]
 801d06a:	0028      	movs	r0, r5
 801d06c:	f7ff fefe 	bl	801ce6c <arm_cfft_radix4by2_inverse_q31>
 801d070:	e7d5      	b.n	801d01e <arm_cfft_q31+0x2e>
 801d072:	2380      	movs	r3, #128	@ 0x80
 801d074:	00db      	lsls	r3, r3, #3
 801d076:	4299      	cmp	r1, r3
 801d078:	d008      	beq.n	801d08c <arm_cfft_q31+0x9c>
 801d07a:	d915      	bls.n	801d0a8 <arm_cfft_q31+0xb8>
 801d07c:	2380      	movs	r3, #128	@ 0x80
 801d07e:	011b      	lsls	r3, r3, #4
 801d080:	4299      	cmp	r1, r3
 801d082:	d0f1      	beq.n	801d068 <arm_cfft_q31+0x78>
 801d084:	2380      	movs	r3, #128	@ 0x80
 801d086:	015b      	lsls	r3, r3, #5
 801d088:	4299      	cmp	r1, r3
 801d08a:	d1c8      	bne.n	801d01e <arm_cfft_q31+0x2e>
 801d08c:	2301      	movs	r3, #1
 801d08e:	6862      	ldr	r2, [r4, #4]
 801d090:	0028      	movs	r0, r5
 801d092:	f000 fab7 	bl	801d604 <arm_radix4_butterfly_inverse_q31>
 801d096:	e7c2      	b.n	801d01e <arm_cfft_q31+0x2e>
 801d098:	2380      	movs	r3, #128	@ 0x80
 801d09a:	009b      	lsls	r3, r3, #2
 801d09c:	4299      	cmp	r1, r3
 801d09e:	d0ba      	beq.n	801d016 <arm_cfft_q31+0x26>
 801d0a0:	e7bd      	b.n	801d01e <arm_cfft_q31+0x2e>
 801d0a2:	2910      	cmp	r1, #16
 801d0a4:	d1bb      	bne.n	801d01e <arm_cfft_q31+0x2e>
 801d0a6:	e7cf      	b.n	801d048 <arm_cfft_q31+0x58>
 801d0a8:	2380      	movs	r3, #128	@ 0x80
 801d0aa:	009b      	lsls	r3, r3, #2
 801d0ac:	4299      	cmp	r1, r3
 801d0ae:	d0db      	beq.n	801d068 <arm_cfft_q31+0x78>
 801d0b0:	e7b5      	b.n	801d01e <arm_cfft_q31+0x2e>
 801d0b2:	2910      	cmp	r1, #16
 801d0b4:	d1b3      	bne.n	801d01e <arm_cfft_q31+0x2e>
 801d0b6:	e7e9      	b.n	801d08c <arm_cfft_q31+0x9c>

0801d0b8 <arm_radix4_butterfly_q31>:
 801d0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0ba:	464d      	mov	r5, r9
 801d0bc:	4644      	mov	r4, r8
 801d0be:	465f      	mov	r7, fp
 801d0c0:	4656      	mov	r6, sl
 801d0c2:	469c      	mov	ip, r3
 801d0c4:	b4f0      	push	{r4, r5, r6, r7}
 801d0c6:	b0a7      	sub	sp, #156	@ 0x9c
 801d0c8:	9114      	str	r1, [sp, #80]	@ 0x50
 801d0ca:	0889      	lsrs	r1, r1, #2
 801d0cc:	9310      	str	r3, [sp, #64]	@ 0x40
 801d0ce:	00cb      	lsls	r3, r1, #3
 801d0d0:	0015      	movs	r5, r2
 801d0d2:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d0d4:	18c2      	adds	r2, r0, r3
 801d0d6:	000c      	movs	r4, r1
 801d0d8:	469a      	mov	sl, r3
 801d0da:	9124      	str	r1, [sp, #144]	@ 0x90
 801d0dc:	18d1      	adds	r1, r2, r3
 801d0de:	4663      	mov	r3, ip
 801d0e0:	468b      	mov	fp, r1
 801d0e2:	0119      	lsls	r1, r3, #4
 801d0e4:	910d      	str	r1, [sp, #52]	@ 0x34
 801d0e6:	00d9      	lsls	r1, r3, #3
 801d0e8:	005b      	lsls	r3, r3, #1
 801d0ea:	4463      	add	r3, ip
 801d0ec:	910e      	str	r1, [sp, #56]	@ 0x38
 801d0ee:	00d9      	lsls	r1, r3, #3
 801d0f0:	465b      	mov	r3, fp
 801d0f2:	44da      	add	sl, fp
 801d0f4:	4690      	mov	r8, r2
 801d0f6:	4683      	mov	fp, r0
 801d0f8:	4699      	mov	r9, r3
 801d0fa:	9022      	str	r0, [sp, #136]	@ 0x88
 801d0fc:	9025      	str	r0, [sp, #148]	@ 0x94
 801d0fe:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d100:	9502      	str	r5, [sp, #8]
 801d102:	9500      	str	r5, [sp, #0]
 801d104:	9501      	str	r5, [sp, #4]
 801d106:	9407      	str	r4, [sp, #28]
 801d108:	465b      	mov	r3, fp
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	4642      	mov	r2, r8
 801d10e:	111c      	asrs	r4, r3, #4
 801d110:	464b      	mov	r3, r9
 801d112:	4658      	mov	r0, fp
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	6812      	ldr	r2, [r2, #0]
 801d118:	111b      	asrs	r3, r3, #4
 801d11a:	18e7      	adds	r7, r4, r3
 801d11c:	1ae3      	subs	r3, r4, r3
 801d11e:	1114      	asrs	r4, r2, #4
 801d120:	4652      	mov	r2, sl
 801d122:	6840      	ldr	r0, [r0, #4]
 801d124:	6812      	ldr	r2, [r2, #0]
 801d126:	1105      	asrs	r5, r0, #4
 801d128:	4648      	mov	r0, r9
 801d12a:	9303      	str	r3, [sp, #12]
 801d12c:	1113      	asrs	r3, r2, #4
 801d12e:	18e2      	adds	r2, r4, r3
 801d130:	465c      	mov	r4, fp
 801d132:	6840      	ldr	r0, [r0, #4]
 801d134:	1103      	asrs	r3, r0, #4
 801d136:	18ee      	adds	r6, r5, r3
 801d138:	1ae8      	subs	r0, r5, r3
 801d13a:	18bb      	adds	r3, r7, r2
 801d13c:	6023      	str	r3, [r4, #0]
 801d13e:	4644      	mov	r4, r8
 801d140:	6864      	ldr	r4, [r4, #4]
 801d142:	9004      	str	r0, [sp, #16]
 801d144:	1125      	asrs	r5, r4, #4
 801d146:	4654      	mov	r4, sl
 801d148:	6864      	ldr	r4, [r4, #4]
 801d14a:	1123      	asrs	r3, r4, #4
 801d14c:	465c      	mov	r4, fp
 801d14e:	18eb      	adds	r3, r5, r3
 801d150:	18f1      	adds	r1, r6, r3
 801d152:	6061      	str	r1, [r4, #4]
 801d154:	4655      	mov	r5, sl
 801d156:	4644      	mov	r4, r8
 801d158:	686d      	ldr	r5, [r5, #4]
 801d15a:	6864      	ldr	r4, [r4, #4]
 801d15c:	1129      	asrs	r1, r5, #4
 801d15e:	1124      	asrs	r4, r4, #4
 801d160:	1a64      	subs	r4, r4, r1
 801d162:	4641      	mov	r1, r8
 801d164:	6809      	ldr	r1, [r1, #0]
 801d166:	9405      	str	r4, [sp, #20]
 801d168:	1108      	asrs	r0, r1, #4
 801d16a:	4651      	mov	r1, sl
 801d16c:	6809      	ldr	r1, [r1, #0]
 801d16e:	1abc      	subs	r4, r7, r2
 801d170:	1109      	asrs	r1, r1, #4
 801d172:	1a41      	subs	r1, r0, r1
 801d174:	17e2      	asrs	r2, r4, #31
 801d176:	9106      	str	r1, [sp, #24]
 801d178:	0011      	movs	r1, r2
 801d17a:	9a01      	ldr	r2, [sp, #4]
 801d17c:	9108      	str	r1, [sp, #32]
 801d17e:	6817      	ldr	r7, [r2, #0]
 801d180:	17fd      	asrs	r5, r7, #31
 801d182:	0028      	movs	r0, r5
 801d184:	1af5      	subs	r5, r6, r3
 801d186:	17ee      	asrs	r6, r5, #31
 801d188:	960a      	str	r6, [sp, #40]	@ 0x28
 801d18a:	6856      	ldr	r6, [r2, #4]
 801d18c:	9009      	str	r0, [sp, #36]	@ 0x24
 801d18e:	17f3      	asrs	r3, r6, #31
 801d190:	003a      	movs	r2, r7
 801d192:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d194:	0003      	movs	r3, r0
 801d196:	0020      	movs	r0, r4
 801d198:	f7e3 fa12 	bl	80005c0 <__aeabi_lmul>
 801d19c:	0032      	movs	r2, r6
 801d19e:	17f3      	asrs	r3, r6, #31
 801d1a0:	910c      	str	r1, [sp, #48]	@ 0x30
 801d1a2:	0028      	movs	r0, r5
 801d1a4:	17e9      	asrs	r1, r5, #31
 801d1a6:	f7e3 fa0b 	bl	80005c0 <__aeabi_lmul>
 801d1aa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d1ac:	002a      	movs	r2, r5
 801d1ae:	4684      	mov	ip, r0
 801d1b0:	4640      	mov	r0, r8
 801d1b2:	4461      	add	r1, ip
 801d1b4:	0049      	lsls	r1, r1, #1
 801d1b6:	6001      	str	r1, [r0, #0]
 801d1b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d1bc:	0038      	movs	r0, r7
 801d1be:	f7e3 f9ff 	bl	80005c0 <__aeabi_lmul>
 801d1c2:	0032      	movs	r2, r6
 801d1c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1c6:	000d      	movs	r5, r1
 801d1c8:	0020      	movs	r0, r4
 801d1ca:	9908      	ldr	r1, [sp, #32]
 801d1cc:	f7e3 f9f8 	bl	80005c0 <__aeabi_lmul>
 801d1d0:	4646      	mov	r6, r8
 801d1d2:	1a6d      	subs	r5, r5, r1
 801d1d4:	006d      	lsls	r5, r5, #1
 801d1d6:	6075      	str	r5, [r6, #4]
 801d1d8:	9903      	ldr	r1, [sp, #12]
 801d1da:	9d05      	ldr	r5, [sp, #20]
 801d1dc:	000c      	movs	r4, r1
 801d1de:	46ac      	mov	ip, r5
 801d1e0:	4464      	add	r4, ip
 801d1e2:	17e6      	asrs	r6, r4, #31
 801d1e4:	0031      	movs	r1, r6
 801d1e6:	9b00      	ldr	r3, [sp, #0]
 801d1e8:	9804      	ldr	r0, [sp, #16]
 801d1ea:	681e      	ldr	r6, [r3, #0]
 801d1ec:	17f7      	asrs	r7, r6, #31
 801d1ee:	9709      	str	r7, [sp, #36]	@ 0x24
 801d1f0:	9f06      	ldr	r7, [sp, #24]
 801d1f2:	0032      	movs	r2, r6
 801d1f4:	1bc7      	subs	r7, r0, r7
 801d1f6:	17fd      	asrs	r5, r7, #31
 801d1f8:	950a      	str	r5, [sp, #40]	@ 0x28
 801d1fa:	685d      	ldr	r5, [r3, #4]
 801d1fc:	17f3      	asrs	r3, r6, #31
 801d1fe:	17e8      	asrs	r0, r5, #31
 801d200:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d202:	0020      	movs	r0, r4
 801d204:	9108      	str	r1, [sp, #32]
 801d206:	f7e3 f9db 	bl	80005c0 <__aeabi_lmul>
 801d20a:	002a      	movs	r2, r5
 801d20c:	17eb      	asrs	r3, r5, #31
 801d20e:	910c      	str	r1, [sp, #48]	@ 0x30
 801d210:	0038      	movs	r0, r7
 801d212:	17f9      	asrs	r1, r7, #31
 801d214:	f7e3 f9d4 	bl	80005c0 <__aeabi_lmul>
 801d218:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d21a:	003a      	movs	r2, r7
 801d21c:	4684      	mov	ip, r0
 801d21e:	4648      	mov	r0, r9
 801d220:	4461      	add	r1, ip
 801d222:	0049      	lsls	r1, r1, #1
 801d224:	6001      	str	r1, [r0, #0]
 801d226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d228:	0030      	movs	r0, r6
 801d22a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d22c:	f7e3 f9c8 	bl	80005c0 <__aeabi_lmul>
 801d230:	002a      	movs	r2, r5
 801d232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d234:	000e      	movs	r6, r1
 801d236:	0020      	movs	r0, r4
 801d238:	9908      	ldr	r1, [sp, #32]
 801d23a:	f7e3 f9c1 	bl	80005c0 <__aeabi_lmul>
 801d23e:	464c      	mov	r4, r9
 801d240:	9d05      	ldr	r5, [sp, #20]
 801d242:	1a76      	subs	r6, r6, r1
 801d244:	9903      	ldr	r1, [sp, #12]
 801d246:	0076      	lsls	r6, r6, #1
 801d248:	6066      	str	r6, [r4, #4]
 801d24a:	1b4c      	subs	r4, r1, r5
 801d24c:	9e06      	ldr	r6, [sp, #24]
 801d24e:	17e1      	asrs	r1, r4, #31
 801d250:	9103      	str	r1, [sp, #12]
 801d252:	9902      	ldr	r1, [sp, #8]
 801d254:	46b4      	mov	ip, r6
 801d256:	680f      	ldr	r7, [r1, #0]
 801d258:	9804      	ldr	r0, [sp, #16]
 801d25a:	17fd      	asrs	r5, r7, #31
 801d25c:	002b      	movs	r3, r5
 801d25e:	684e      	ldr	r6, [r1, #4]
 801d260:	4460      	add	r0, ip
 801d262:	0005      	movs	r5, r0
 801d264:	17c0      	asrs	r0, r0, #31
 801d266:	9005      	str	r0, [sp, #20]
 801d268:	17f0      	asrs	r0, r6, #31
 801d26a:	9006      	str	r0, [sp, #24]
 801d26c:	003a      	movs	r2, r7
 801d26e:	0020      	movs	r0, r4
 801d270:	17e1      	asrs	r1, r4, #31
 801d272:	9304      	str	r3, [sp, #16]
 801d274:	f7e3 f9a4 	bl	80005c0 <__aeabi_lmul>
 801d278:	0032      	movs	r2, r6
 801d27a:	9108      	str	r1, [sp, #32]
 801d27c:	17f3      	asrs	r3, r6, #31
 801d27e:	0028      	movs	r0, r5
 801d280:	17e9      	asrs	r1, r5, #31
 801d282:	f7e3 f99d 	bl	80005c0 <__aeabi_lmul>
 801d286:	9808      	ldr	r0, [sp, #32]
 801d288:	002a      	movs	r2, r5
 801d28a:	4684      	mov	ip, r0
 801d28c:	4650      	mov	r0, sl
 801d28e:	4461      	add	r1, ip
 801d290:	0049      	lsls	r1, r1, #1
 801d292:	6001      	str	r1, [r0, #0]
 801d294:	9b05      	ldr	r3, [sp, #20]
 801d296:	9904      	ldr	r1, [sp, #16]
 801d298:	0038      	movs	r0, r7
 801d29a:	f7e3 f991 	bl	80005c0 <__aeabi_lmul>
 801d29e:	0020      	movs	r0, r4
 801d2a0:	2408      	movs	r4, #8
 801d2a2:	000d      	movs	r5, r1
 801d2a4:	0032      	movs	r2, r6
 801d2a6:	9b06      	ldr	r3, [sp, #24]
 801d2a8:	9903      	ldr	r1, [sp, #12]
 801d2aa:	f7e3 f989 	bl	80005c0 <__aeabi_lmul>
 801d2ae:	46a4      	mov	ip, r4
 801d2b0:	4650      	mov	r0, sl
 801d2b2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d2b4:	44e3      	add	fp, ip
 801d2b6:	44e0      	add	r8, ip
 801d2b8:	44e1      	add	r9, ip
 801d2ba:	44e2      	add	sl, ip
 801d2bc:	46a4      	mov	ip, r4
 801d2be:	1a6d      	subs	r5, r5, r1
 801d2c0:	006d      	lsls	r5, r5, #1
 801d2c2:	9a01      	ldr	r2, [sp, #4]
 801d2c4:	6045      	str	r5, [r0, #4]
 801d2c6:	9807      	ldr	r0, [sp, #28]
 801d2c8:	4462      	add	r2, ip
 801d2ca:	3801      	subs	r0, #1
 801d2cc:	9201      	str	r2, [sp, #4]
 801d2ce:	9007      	str	r0, [sp, #28]
 801d2d0:	9b00      	ldr	r3, [sp, #0]
 801d2d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d2d4:	9902      	ldr	r1, [sp, #8]
 801d2d6:	4694      	mov	ip, r2
 801d2d8:	4463      	add	r3, ip
 801d2da:	9300      	str	r3, [sp, #0]
 801d2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d2de:	469c      	mov	ip, r3
 801d2e0:	4461      	add	r1, ip
 801d2e2:	9102      	str	r1, [sp, #8]
 801d2e4:	2800      	cmp	r0, #0
 801d2e6:	d000      	beq.n	801d2ea <arm_radix4_butterfly_q31+0x232>
 801d2e8:	e70e      	b.n	801d108 <arm_radix4_butterfly_q31+0x50>
 801d2ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2ec:	009b      	lsls	r3, r3, #2
 801d2ee:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d2f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d2f2:	9320      	str	r3, [sp, #128]	@ 0x80
 801d2f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d2f6:	2b04      	cmp	r3, #4
 801d2f8:	d800      	bhi.n	801d2fc <arm_radix4_butterfly_q31+0x244>
 801d2fa:	e180      	b.n	801d5fe <arm_radix4_butterfly_q31+0x546>
 801d2fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d2fe:	0893      	lsrs	r3, r2, #2
 801d300:	1e59      	subs	r1, r3, #1
 801d302:	9321      	str	r3, [sp, #132]	@ 0x84
 801d304:	00db      	lsls	r3, r3, #3
 801d306:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d308:	00d3      	lsls	r3, r2, #3
 801d30a:	9300      	str	r3, [sp, #0]
 801d30c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d30e:	911a      	str	r1, [sp, #104]	@ 0x68
 801d310:	00da      	lsls	r2, r3, #3
 801d312:	921e      	str	r2, [sp, #120]	@ 0x78
 801d314:	011a      	lsls	r2, r3, #4
 801d316:	921d      	str	r2, [sp, #116]	@ 0x74
 801d318:	001a      	movs	r2, r3
 801d31a:	4694      	mov	ip, r2
 801d31c:	005b      	lsls	r3, r3, #1
 801d31e:	4463      	add	r3, ip
 801d320:	00db      	lsls	r3, r3, #3
 801d322:	931c      	str	r3, [sp, #112]	@ 0x70
 801d324:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d326:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d328:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d32a:	9318      	str	r3, [sp, #96]	@ 0x60
 801d32c:	9319      	str	r3, [sp, #100]	@ 0x64
 801d32e:	9316      	str	r3, [sp, #88]	@ 0x58
 801d330:	2300      	movs	r3, #0
 801d332:	9315      	str	r3, [sp, #84]	@ 0x54
 801d334:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d336:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d338:	681a      	ldr	r2, [r3, #0]
 801d33a:	685b      	ldr	r3, [r3, #4]
 801d33c:	9205      	str	r2, [sp, #20]
 801d33e:	9306      	str	r3, [sp, #24]
 801d340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d342:	468c      	mov	ip, r1
 801d344:	681a      	ldr	r2, [r3, #0]
 801d346:	685b      	ldr	r3, [r3, #4]
 801d348:	9207      	str	r2, [sp, #28]
 801d34a:	9308      	str	r3, [sp, #32]
 801d34c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d34e:	681a      	ldr	r2, [r3, #0]
 801d350:	685b      	ldr	r3, [r3, #4]
 801d352:	9209      	str	r2, [sp, #36]	@ 0x24
 801d354:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d356:	930a      	str	r3, [sp, #40]	@ 0x28
 801d358:	0013      	movs	r3, r2
 801d35a:	4463      	add	r3, ip
 801d35c:	4698      	mov	r8, r3
 801d35e:	0013      	movs	r3, r2
 801d360:	4442      	add	r2, r8
 801d362:	4691      	mov	r9, r2
 801d364:	001a      	movs	r2, r3
 801d366:	444a      	add	r2, r9
 801d368:	4692      	mov	sl, r2
 801d36a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d36c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d36e:	4293      	cmp	r3, r2
 801d370:	d800      	bhi.n	801d374 <arm_radix4_butterfly_q31+0x2bc>
 801d372:	e0dd      	b.n	801d530 <arm_radix4_butterfly_q31+0x478>
 801d374:	4694      	mov	ip, r2
 801d376:	468b      	mov	fp, r1
 801d378:	4644      	mov	r4, r8
 801d37a:	4655      	mov	r5, sl
 801d37c:	9b07      	ldr	r3, [sp, #28]
 801d37e:	17db      	asrs	r3, r3, #31
 801d380:	930c      	str	r3, [sp, #48]	@ 0x30
 801d382:	9b08      	ldr	r3, [sp, #32]
 801d384:	17db      	asrs	r3, r3, #31
 801d386:	930d      	str	r3, [sp, #52]	@ 0x34
 801d388:	9b05      	ldr	r3, [sp, #20]
 801d38a:	17db      	asrs	r3, r3, #31
 801d38c:	930e      	str	r3, [sp, #56]	@ 0x38
 801d38e:	9b06      	ldr	r3, [sp, #24]
 801d390:	17db      	asrs	r3, r3, #31
 801d392:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d396:	17db      	asrs	r3, r3, #31
 801d398:	9310      	str	r3, [sp, #64]	@ 0x40
 801d39a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d39c:	17db      	asrs	r3, r3, #31
 801d39e:	9311      	str	r3, [sp, #68]	@ 0x44
 801d3a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d3a2:	4463      	add	r3, ip
 801d3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d3a6:	465b      	mov	r3, fp
 801d3a8:	4659      	mov	r1, fp
 801d3aa:	681a      	ldr	r2, [r3, #0]
 801d3ac:	464b      	mov	r3, r9
 801d3ae:	684f      	ldr	r7, [r1, #4]
 801d3b0:	4649      	mov	r1, r9
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	18d6      	adds	r6, r2, r3
 801d3b6:	1ad3      	subs	r3, r2, r3
 801d3b8:	9301      	str	r3, [sp, #4]
 801d3ba:	684b      	ldr	r3, [r1, #4]
 801d3bc:	18f8      	adds	r0, r7, r3
 801d3be:	1af9      	subs	r1, r7, r3
 801d3c0:	6827      	ldr	r7, [r4, #0]
 801d3c2:	9102      	str	r1, [sp, #8]
 801d3c4:	003a      	movs	r2, r7
 801d3c6:	682f      	ldr	r7, [r5, #0]
 801d3c8:	46bc      	mov	ip, r7
 801d3ca:	465f      	mov	r7, fp
 801d3cc:	4462      	add	r2, ip
 801d3ce:	18b3      	adds	r3, r6, r2
 801d3d0:	109b      	asrs	r3, r3, #2
 801d3d2:	603b      	str	r3, [r7, #0]
 801d3d4:	6867      	ldr	r7, [r4, #4]
 801d3d6:	1ab6      	subs	r6, r6, r2
 801d3d8:	46b8      	mov	r8, r7
 801d3da:	686f      	ldr	r7, [r5, #4]
 801d3dc:	17f2      	asrs	r2, r6, #31
 801d3de:	46bc      	mov	ip, r7
 801d3e0:	44e0      	add	r8, ip
 801d3e2:	4643      	mov	r3, r8
 801d3e4:	465f      	mov	r7, fp
 801d3e6:	18c1      	adds	r1, r0, r3
 801d3e8:	1089      	asrs	r1, r1, #2
 801d3ea:	6079      	str	r1, [r7, #4]
 801d3ec:	9900      	ldr	r1, [sp, #0]
 801d3ee:	4690      	mov	r8, r2
 801d3f0:	468c      	mov	ip, r1
 801d3f2:	6867      	ldr	r7, [r4, #4]
 801d3f4:	6869      	ldr	r1, [r5, #4]
 801d3f6:	44e3      	add	fp, ip
 801d3f8:	1a7f      	subs	r7, r7, r1
 801d3fa:	9703      	str	r7, [sp, #12]
 801d3fc:	6829      	ldr	r1, [r5, #0]
 801d3fe:	6827      	ldr	r7, [r4, #0]
 801d400:	1a7f      	subs	r7, r7, r1
 801d402:	9704      	str	r7, [sp, #16]
 801d404:	1ac7      	subs	r7, r0, r3
 801d406:	17fa      	asrs	r2, r7, #31
 801d408:	4692      	mov	sl, r2
 801d40a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d40c:	9a07      	ldr	r2, [sp, #28]
 801d40e:	0030      	movs	r0, r6
 801d410:	4641      	mov	r1, r8
 801d412:	f7e3 f8d5 	bl	80005c0 <__aeabi_lmul>
 801d416:	9a08      	ldr	r2, [sp, #32]
 801d418:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d41a:	9112      	str	r1, [sp, #72]	@ 0x48
 801d41c:	0038      	movs	r0, r7
 801d41e:	4651      	mov	r1, sl
 801d420:	f7e3 f8ce 	bl	80005c0 <__aeabi_lmul>
 801d424:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d426:	9a07      	ldr	r2, [sp, #28]
 801d428:	4684      	mov	ip, r0
 801d42a:	4461      	add	r1, ip
 801d42c:	1049      	asrs	r1, r1, #1
 801d42e:	6021      	str	r1, [r4, #0]
 801d430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d432:	0038      	movs	r0, r7
 801d434:	4651      	mov	r1, sl
 801d436:	f7e3 f8c3 	bl	80005c0 <__aeabi_lmul>
 801d43a:	9a08      	ldr	r2, [sp, #32]
 801d43c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d43e:	000f      	movs	r7, r1
 801d440:	0030      	movs	r0, r6
 801d442:	4641      	mov	r1, r8
 801d444:	f7e3 f8bc 	bl	80005c0 <__aeabi_lmul>
 801d448:	9b00      	ldr	r3, [sp, #0]
 801d44a:	9a01      	ldr	r2, [sp, #4]
 801d44c:	469c      	mov	ip, r3
 801d44e:	9803      	ldr	r0, [sp, #12]
 801d450:	1a7f      	subs	r7, r7, r1
 801d452:	107f      	asrs	r7, r7, #1
 801d454:	6067      	str	r7, [r4, #4]
 801d456:	0016      	movs	r6, r2
 801d458:	4464      	add	r4, ip
 801d45a:	4684      	mov	ip, r0
 801d45c:	4466      	add	r6, ip
 801d45e:	17f2      	asrs	r2, r6, #31
 801d460:	4690      	mov	r8, r2
 801d462:	9902      	ldr	r1, [sp, #8]
 801d464:	9f04      	ldr	r7, [sp, #16]
 801d466:	0030      	movs	r0, r6
 801d468:	1bcf      	subs	r7, r1, r7
 801d46a:	17fa      	asrs	r2, r7, #31
 801d46c:	4692      	mov	sl, r2
 801d46e:	4641      	mov	r1, r8
 801d470:	9a05      	ldr	r2, [sp, #20]
 801d472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d474:	f7e3 f8a4 	bl	80005c0 <__aeabi_lmul>
 801d478:	9a06      	ldr	r2, [sp, #24]
 801d47a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d47c:	9112      	str	r1, [sp, #72]	@ 0x48
 801d47e:	0038      	movs	r0, r7
 801d480:	4651      	mov	r1, sl
 801d482:	f7e3 f89d 	bl	80005c0 <__aeabi_lmul>
 801d486:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d488:	9a05      	ldr	r2, [sp, #20]
 801d48a:	4684      	mov	ip, r0
 801d48c:	4648      	mov	r0, r9
 801d48e:	4461      	add	r1, ip
 801d490:	1049      	asrs	r1, r1, #1
 801d492:	6001      	str	r1, [r0, #0]
 801d494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d496:	0038      	movs	r0, r7
 801d498:	4651      	mov	r1, sl
 801d49a:	f7e3 f891 	bl	80005c0 <__aeabi_lmul>
 801d49e:	9a06      	ldr	r2, [sp, #24]
 801d4a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d4a2:	000f      	movs	r7, r1
 801d4a4:	0030      	movs	r0, r6
 801d4a6:	4641      	mov	r1, r8
 801d4a8:	f7e3 f88a 	bl	80005c0 <__aeabi_lmul>
 801d4ac:	464e      	mov	r6, r9
 801d4ae:	9a00      	ldr	r2, [sp, #0]
 801d4b0:	9b01      	ldr	r3, [sp, #4]
 801d4b2:	4694      	mov	ip, r2
 801d4b4:	9803      	ldr	r0, [sp, #12]
 801d4b6:	1a7f      	subs	r7, r7, r1
 801d4b8:	107f      	asrs	r7, r7, #1
 801d4ba:	6077      	str	r7, [r6, #4]
 801d4bc:	1a1e      	subs	r6, r3, r0
 801d4be:	9b04      	ldr	r3, [sp, #16]
 801d4c0:	44e1      	add	r9, ip
 801d4c2:	469c      	mov	ip, r3
 801d4c4:	17f0      	asrs	r0, r6, #31
 801d4c6:	4680      	mov	r8, r0
 801d4c8:	9902      	ldr	r1, [sp, #8]
 801d4ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4cc:	4461      	add	r1, ip
 801d4ce:	17cb      	asrs	r3, r1, #31
 801d4d0:	000f      	movs	r7, r1
 801d4d2:	469a      	mov	sl, r3
 801d4d4:	0030      	movs	r0, r6
 801d4d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d4d8:	4641      	mov	r1, r8
 801d4da:	f7e3 f871 	bl	80005c0 <__aeabi_lmul>
 801d4de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d4e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d4e2:	9101      	str	r1, [sp, #4]
 801d4e4:	0038      	movs	r0, r7
 801d4e6:	4651      	mov	r1, sl
 801d4e8:	f7e3 f86a 	bl	80005c0 <__aeabi_lmul>
 801d4ec:	9801      	ldr	r0, [sp, #4]
 801d4ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4f0:	4684      	mov	ip, r0
 801d4f2:	4461      	add	r1, ip
 801d4f4:	1049      	asrs	r1, r1, #1
 801d4f6:	6029      	str	r1, [r5, #0]
 801d4f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d4fa:	0038      	movs	r0, r7
 801d4fc:	4651      	mov	r1, sl
 801d4fe:	f7e3 f85f 	bl	80005c0 <__aeabi_lmul>
 801d502:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d504:	000f      	movs	r7, r1
 801d506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d508:	0030      	movs	r0, r6
 801d50a:	4641      	mov	r1, r8
 801d50c:	f7e3 f858 	bl	80005c0 <__aeabi_lmul>
 801d510:	1a7f      	subs	r7, r7, r1
 801d512:	107f      	asrs	r7, r7, #1
 801d514:	606f      	str	r7, [r5, #4]
 801d516:	9a00      	ldr	r2, [sp, #0]
 801d518:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d51a:	4694      	mov	ip, r2
 801d51c:	4465      	add	r5, ip
 801d51e:	468c      	mov	ip, r1
 801d520:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d522:	0013      	movs	r3, r2
 801d524:	4462      	add	r2, ip
 801d526:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d528:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d52a:	429a      	cmp	r2, r3
 801d52c:	d900      	bls.n	801d530 <arm_radix4_butterfly_q31+0x478>
 801d52e:	e73a      	b.n	801d3a6 <arm_radix4_butterfly_q31+0x2ee>
 801d530:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d532:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d534:	468c      	mov	ip, r1
 801d536:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d538:	4462      	add	r2, ip
 801d53a:	468c      	mov	ip, r1
 801d53c:	9216      	str	r2, [sp, #88]	@ 0x58
 801d53e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d540:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d542:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d544:	4462      	add	r2, ip
 801d546:	468c      	mov	ip, r1
 801d548:	9219      	str	r2, [sp, #100]	@ 0x64
 801d54a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d54c:	3301      	adds	r3, #1
 801d54e:	4462      	add	r2, ip
 801d550:	9218      	str	r2, [sp, #96]	@ 0x60
 801d552:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d554:	9315      	str	r3, [sp, #84]	@ 0x54
 801d556:	3208      	adds	r2, #8
 801d558:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d55a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d55c:	4293      	cmp	r3, r2
 801d55e:	d800      	bhi.n	801d562 <arm_radix4_butterfly_q31+0x4aa>
 801d560:	e6e8      	b.n	801d334 <arm_radix4_butterfly_q31+0x27c>
 801d562:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d564:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d566:	009b      	lsls	r3, r3, #2
 801d568:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d56a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d56c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d56e:	089b      	lsrs	r3, r3, #2
 801d570:	9320      	str	r3, [sp, #128]	@ 0x80
 801d572:	2b04      	cmp	r3, #4
 801d574:	d900      	bls.n	801d578 <arm_radix4_butterfly_q31+0x4c0>
 801d576:	e6c1      	b.n	801d2fc <arm_radix4_butterfly_q31+0x244>
 801d578:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d57a:	469a      	mov	sl, r3
 801d57c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d57e:	691c      	ldr	r4, [r3, #16]
 801d580:	685a      	ldr	r2, [r3, #4]
 801d582:	46a1      	mov	r9, r4
 801d584:	4690      	mov	r8, r2
 801d586:	6819      	ldr	r1, [r3, #0]
 801d588:	689a      	ldr	r2, [r3, #8]
 801d58a:	699f      	ldr	r7, [r3, #24]
 801d58c:	188d      	adds	r5, r1, r2
 801d58e:	444d      	add	r5, r9
 801d590:	19ed      	adds	r5, r5, r7
 801d592:	69de      	ldr	r6, [r3, #28]
 801d594:	601d      	str	r5, [r3, #0]
 801d596:	4645      	mov	r5, r8
 801d598:	46b4      	mov	ip, r6
 801d59a:	68d8      	ldr	r0, [r3, #12]
 801d59c:	695c      	ldr	r4, [r3, #20]
 801d59e:	182d      	adds	r5, r5, r0
 801d5a0:	192d      	adds	r5, r5, r4
 801d5a2:	4465      	add	r5, ip
 801d5a4:	605d      	str	r5, [r3, #4]
 801d5a6:	1a8d      	subs	r5, r1, r2
 801d5a8:	444d      	add	r5, r9
 801d5aa:	1bed      	subs	r5, r5, r7
 801d5ac:	609d      	str	r5, [r3, #8]
 801d5ae:	4645      	mov	r5, r8
 801d5b0:	1a2d      	subs	r5, r5, r0
 801d5b2:	192d      	adds	r5, r5, r4
 801d5b4:	1bad      	subs	r5, r5, r6
 801d5b6:	464e      	mov	r6, r9
 801d5b8:	60dd      	str	r5, [r3, #12]
 801d5ba:	180d      	adds	r5, r1, r0
 801d5bc:	1bad      	subs	r5, r5, r6
 801d5be:	4666      	mov	r6, ip
 801d5c0:	1bad      	subs	r5, r5, r6
 801d5c2:	611d      	str	r5, [r3, #16]
 801d5c4:	4645      	mov	r5, r8
 801d5c6:	1aad      	subs	r5, r5, r2
 801d5c8:	4442      	add	r2, r8
 801d5ca:	1b12      	subs	r2, r2, r4
 801d5cc:	1bd2      	subs	r2, r2, r7
 801d5ce:	1a08      	subs	r0, r1, r0
 801d5d0:	61da      	str	r2, [r3, #28]
 801d5d2:	4649      	mov	r1, r9
 801d5d4:	2201      	movs	r2, #1
 801d5d6:	1a41      	subs	r1, r0, r1
 801d5d8:	4252      	negs	r2, r2
 801d5da:	4461      	add	r1, ip
 801d5dc:	4694      	mov	ip, r2
 801d5de:	44e2      	add	sl, ip
 801d5e0:	4652      	mov	r2, sl
 801d5e2:	1b2d      	subs	r5, r5, r4
 801d5e4:	19ed      	adds	r5, r5, r7
 801d5e6:	615d      	str	r5, [r3, #20]
 801d5e8:	6199      	str	r1, [r3, #24]
 801d5ea:	3320      	adds	r3, #32
 801d5ec:	2a00      	cmp	r2, #0
 801d5ee:	d1c6      	bne.n	801d57e <arm_radix4_butterfly_q31+0x4c6>
 801d5f0:	b027      	add	sp, #156	@ 0x9c
 801d5f2:	bc3c      	pop	{r2, r3, r4, r5}
 801d5f4:	4690      	mov	r8, r2
 801d5f6:	4699      	mov	r9, r3
 801d5f8:	46a2      	mov	sl, r4
 801d5fa:	46ab      	mov	fp, r5
 801d5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d5fe:	469a      	mov	sl, r3
 801d600:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d602:	e7bc      	b.n	801d57e <arm_radix4_butterfly_q31+0x4c6>

0801d604 <arm_radix4_butterfly_inverse_q31>:
 801d604:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d606:	464d      	mov	r5, r9
 801d608:	4644      	mov	r4, r8
 801d60a:	465f      	mov	r7, fp
 801d60c:	4656      	mov	r6, sl
 801d60e:	b4f0      	push	{r4, r5, r6, r7}
 801d610:	b0a7      	sub	sp, #156	@ 0x9c
 801d612:	469c      	mov	ip, r3
 801d614:	9114      	str	r1, [sp, #80]	@ 0x50
 801d616:	0889      	lsrs	r1, r1, #2
 801d618:	9310      	str	r3, [sp, #64]	@ 0x40
 801d61a:	00cb      	lsls	r3, r1, #3
 801d61c:	0015      	movs	r5, r2
 801d61e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d620:	18c2      	adds	r2, r0, r3
 801d622:	000c      	movs	r4, r1
 801d624:	9124      	str	r1, [sp, #144]	@ 0x90
 801d626:	18d1      	adds	r1, r2, r3
 801d628:	468b      	mov	fp, r1
 801d62a:	469a      	mov	sl, r3
 801d62c:	4663      	mov	r3, ip
 801d62e:	44da      	add	sl, fp
 801d630:	46d0      	mov	r8, sl
 801d632:	4681      	mov	r9, r0
 801d634:	4692      	mov	sl, r2
 801d636:	0119      	lsls	r1, r3, #4
 801d638:	910d      	str	r1, [sp, #52]	@ 0x34
 801d63a:	00d9      	lsls	r1, r3, #3
 801d63c:	005b      	lsls	r3, r3, #1
 801d63e:	4463      	add	r3, ip
 801d640:	910e      	str	r1, [sp, #56]	@ 0x38
 801d642:	00d9      	lsls	r1, r3, #3
 801d644:	9022      	str	r0, [sp, #136]	@ 0x88
 801d646:	9025      	str	r0, [sp, #148]	@ 0x94
 801d648:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d64a:	9502      	str	r5, [sp, #8]
 801d64c:	9500      	str	r5, [sp, #0]
 801d64e:	9501      	str	r5, [sp, #4]
 801d650:	9409      	str	r4, [sp, #36]	@ 0x24
 801d652:	464b      	mov	r3, r9
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	4652      	mov	r2, sl
 801d658:	111c      	asrs	r4, r3, #4
 801d65a:	465b      	mov	r3, fp
 801d65c:	4648      	mov	r0, r9
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	6812      	ldr	r2, [r2, #0]
 801d662:	6840      	ldr	r0, [r0, #4]
 801d664:	111b      	asrs	r3, r3, #4
 801d666:	18e7      	adds	r7, r4, r3
 801d668:	1ae3      	subs	r3, r4, r3
 801d66a:	1114      	asrs	r4, r2, #4
 801d66c:	4642      	mov	r2, r8
 801d66e:	1105      	asrs	r5, r0, #4
 801d670:	4658      	mov	r0, fp
 801d672:	6812      	ldr	r2, [r2, #0]
 801d674:	6840      	ldr	r0, [r0, #4]
 801d676:	9303      	str	r3, [sp, #12]
 801d678:	1113      	asrs	r3, r2, #4
 801d67a:	18e2      	adds	r2, r4, r3
 801d67c:	1103      	asrs	r3, r0, #4
 801d67e:	18ee      	adds	r6, r5, r3
 801d680:	1ae8      	subs	r0, r5, r3
 801d682:	464d      	mov	r5, r9
 801d684:	18bb      	adds	r3, r7, r2
 801d686:	602b      	str	r3, [r5, #0]
 801d688:	4641      	mov	r1, r8
 801d68a:	4655      	mov	r5, sl
 801d68c:	6849      	ldr	r1, [r1, #4]
 801d68e:	686d      	ldr	r5, [r5, #4]
 801d690:	110b      	asrs	r3, r1, #4
 801d692:	112d      	asrs	r5, r5, #4
 801d694:	18eb      	adds	r3, r5, r3
 801d696:	464d      	mov	r5, r9
 801d698:	18f1      	adds	r1, r6, r3
 801d69a:	6069      	str	r1, [r5, #4]
 801d69c:	4655      	mov	r5, sl
 801d69e:	686d      	ldr	r5, [r5, #4]
 801d6a0:	9004      	str	r0, [sp, #16]
 801d6a2:	112c      	asrs	r4, r5, #4
 801d6a4:	4645      	mov	r5, r8
 801d6a6:	686d      	ldr	r5, [r5, #4]
 801d6a8:	1129      	asrs	r1, r5, #4
 801d6aa:	1a65      	subs	r5, r4, r1
 801d6ac:	4651      	mov	r1, sl
 801d6ae:	6809      	ldr	r1, [r1, #0]
 801d6b0:	1abc      	subs	r4, r7, r2
 801d6b2:	1108      	asrs	r0, r1, #4
 801d6b4:	4641      	mov	r1, r8
 801d6b6:	17e2      	asrs	r2, r4, #31
 801d6b8:	6809      	ldr	r1, [r1, #0]
 801d6ba:	9207      	str	r2, [sp, #28]
 801d6bc:	9a01      	ldr	r2, [sp, #4]
 801d6be:	1109      	asrs	r1, r1, #4
 801d6c0:	6817      	ldr	r7, [r2, #0]
 801d6c2:	1a41      	subs	r1, r0, r1
 801d6c4:	9106      	str	r1, [sp, #24]
 801d6c6:	0039      	movs	r1, r7
 801d6c8:	17ff      	asrs	r7, r7, #31
 801d6ca:	0038      	movs	r0, r7
 801d6cc:	9505      	str	r5, [sp, #20]
 801d6ce:	1af5      	subs	r5, r6, r3
 801d6d0:	17ef      	asrs	r7, r5, #31
 801d6d2:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d6d4:	6857      	ldr	r7, [r2, #4]
 801d6d6:	0003      	movs	r3, r0
 801d6d8:	17fe      	asrs	r6, r7, #31
 801d6da:	000a      	movs	r2, r1
 801d6dc:	9108      	str	r1, [sp, #32]
 801d6de:	900a      	str	r0, [sp, #40]	@ 0x28
 801d6e0:	17e1      	asrs	r1, r4, #31
 801d6e2:	0020      	movs	r0, r4
 801d6e4:	960c      	str	r6, [sp, #48]	@ 0x30
 801d6e6:	f7e2 ff6b 	bl	80005c0 <__aeabi_lmul>
 801d6ea:	003a      	movs	r2, r7
 801d6ec:	17fb      	asrs	r3, r7, #31
 801d6ee:	000e      	movs	r6, r1
 801d6f0:	0028      	movs	r0, r5
 801d6f2:	17e9      	asrs	r1, r5, #31
 801d6f4:	f7e2 ff64 	bl	80005c0 <__aeabi_lmul>
 801d6f8:	4653      	mov	r3, sl
 801d6fa:	1a76      	subs	r6, r6, r1
 801d6fc:	0076      	lsls	r6, r6, #1
 801d6fe:	601e      	str	r6, [r3, #0]
 801d700:	002a      	movs	r2, r5
 801d702:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d704:	9808      	ldr	r0, [sp, #32]
 801d706:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d708:	f7e2 ff5a 	bl	80005c0 <__aeabi_lmul>
 801d70c:	003a      	movs	r2, r7
 801d70e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d710:	000d      	movs	r5, r1
 801d712:	0020      	movs	r0, r4
 801d714:	9907      	ldr	r1, [sp, #28]
 801d716:	f7e2 ff53 	bl	80005c0 <__aeabi_lmul>
 801d71a:	4657      	mov	r7, sl
 801d71c:	186d      	adds	r5, r5, r1
 801d71e:	006d      	lsls	r5, r5, #1
 801d720:	607d      	str	r5, [r7, #4]
 801d722:	9b03      	ldr	r3, [sp, #12]
 801d724:	9e06      	ldr	r6, [sp, #24]
 801d726:	9d05      	ldr	r5, [sp, #20]
 801d728:	46b4      	mov	ip, r6
 801d72a:	1b5d      	subs	r5, r3, r5
 801d72c:	9b00      	ldr	r3, [sp, #0]
 801d72e:	17ef      	asrs	r7, r5, #31
 801d730:	0039      	movs	r1, r7
 801d732:	681f      	ldr	r7, [r3, #0]
 801d734:	17fc      	asrs	r4, r7, #31
 801d736:	0020      	movs	r0, r4
 801d738:	9c04      	ldr	r4, [sp, #16]
 801d73a:	4464      	add	r4, ip
 801d73c:	17e6      	asrs	r6, r4, #31
 801d73e:	9407      	str	r4, [sp, #28]
 801d740:	9608      	str	r6, [sp, #32]
 801d742:	685e      	ldr	r6, [r3, #4]
 801d744:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d746:	17f2      	asrs	r2, r6, #31
 801d748:	0003      	movs	r3, r0
 801d74a:	920c      	str	r2, [sp, #48]	@ 0x30
 801d74c:	0028      	movs	r0, r5
 801d74e:	003a      	movs	r2, r7
 801d750:	910a      	str	r1, [sp, #40]	@ 0x28
 801d752:	f7e2 ff35 	bl	80005c0 <__aeabi_lmul>
 801d756:	0032      	movs	r2, r6
 801d758:	17f3      	asrs	r3, r6, #31
 801d75a:	9807      	ldr	r0, [sp, #28]
 801d75c:	000c      	movs	r4, r1
 801d75e:	9908      	ldr	r1, [sp, #32]
 801d760:	f7e2 ff2e 	bl	80005c0 <__aeabi_lmul>
 801d764:	4658      	mov	r0, fp
 801d766:	1a64      	subs	r4, r4, r1
 801d768:	0064      	lsls	r4, r4, #1
 801d76a:	9a07      	ldr	r2, [sp, #28]
 801d76c:	6004      	str	r4, [r0, #0]
 801d76e:	9b08      	ldr	r3, [sp, #32]
 801d770:	0038      	movs	r0, r7
 801d772:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d774:	f7e2 ff24 	bl	80005c0 <__aeabi_lmul>
 801d778:	0032      	movs	r2, r6
 801d77a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d77c:	000c      	movs	r4, r1
 801d77e:	0028      	movs	r0, r5
 801d780:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d782:	f7e2 ff1d 	bl	80005c0 <__aeabi_lmul>
 801d786:	9d05      	ldr	r5, [sp, #20]
 801d788:	465f      	mov	r7, fp
 801d78a:	46ac      	mov	ip, r5
 801d78c:	1864      	adds	r4, r4, r1
 801d78e:	9903      	ldr	r1, [sp, #12]
 801d790:	0064      	lsls	r4, r4, #1
 801d792:	4461      	add	r1, ip
 801d794:	607c      	str	r4, [r7, #4]
 801d796:	000c      	movs	r4, r1
 801d798:	17c9      	asrs	r1, r1, #31
 801d79a:	9105      	str	r1, [sp, #20]
 801d79c:	9902      	ldr	r1, [sp, #8]
 801d79e:	9804      	ldr	r0, [sp, #16]
 801d7a0:	680d      	ldr	r5, [r1, #0]
 801d7a2:	9e06      	ldr	r6, [sp, #24]
 801d7a4:	002b      	movs	r3, r5
 801d7a6:	17ed      	asrs	r5, r5, #31
 801d7a8:	684f      	ldr	r7, [r1, #4]
 801d7aa:	9503      	str	r5, [sp, #12]
 801d7ac:	1b85      	subs	r5, r0, r6
 801d7ae:	17e8      	asrs	r0, r5, #31
 801d7b0:	001a      	movs	r2, r3
 801d7b2:	9006      	str	r0, [sp, #24]
 801d7b4:	17fe      	asrs	r6, r7, #31
 801d7b6:	9304      	str	r3, [sp, #16]
 801d7b8:	0020      	movs	r0, r4
 801d7ba:	9b03      	ldr	r3, [sp, #12]
 801d7bc:	17e1      	asrs	r1, r4, #31
 801d7be:	9607      	str	r6, [sp, #28]
 801d7c0:	f7e2 fefe 	bl	80005c0 <__aeabi_lmul>
 801d7c4:	003a      	movs	r2, r7
 801d7c6:	000e      	movs	r6, r1
 801d7c8:	17fb      	asrs	r3, r7, #31
 801d7ca:	0028      	movs	r0, r5
 801d7cc:	17e9      	asrs	r1, r5, #31
 801d7ce:	f7e2 fef7 	bl	80005c0 <__aeabi_lmul>
 801d7d2:	4640      	mov	r0, r8
 801d7d4:	1a76      	subs	r6, r6, r1
 801d7d6:	0076      	lsls	r6, r6, #1
 801d7d8:	002a      	movs	r2, r5
 801d7da:	9b06      	ldr	r3, [sp, #24]
 801d7dc:	6006      	str	r6, [r0, #0]
 801d7de:	9903      	ldr	r1, [sp, #12]
 801d7e0:	9804      	ldr	r0, [sp, #16]
 801d7e2:	f7e2 feed 	bl	80005c0 <__aeabi_lmul>
 801d7e6:	0020      	movs	r0, r4
 801d7e8:	2408      	movs	r4, #8
 801d7ea:	9b07      	ldr	r3, [sp, #28]
 801d7ec:	000d      	movs	r5, r1
 801d7ee:	003a      	movs	r2, r7
 801d7f0:	9905      	ldr	r1, [sp, #20]
 801d7f2:	f7e2 fee5 	bl	80005c0 <__aeabi_lmul>
 801d7f6:	4640      	mov	r0, r8
 801d7f8:	46a4      	mov	ip, r4
 801d7fa:	186d      	adds	r5, r5, r1
 801d7fc:	006d      	lsls	r5, r5, #1
 801d7fe:	6045      	str	r5, [r0, #4]
 801d800:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d802:	44e1      	add	r9, ip
 801d804:	3801      	subs	r0, #1
 801d806:	9009      	str	r0, [sp, #36]	@ 0x24
 801d808:	9a01      	ldr	r2, [sp, #4]
 801d80a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d80c:	44e2      	add	sl, ip
 801d80e:	44e3      	add	fp, ip
 801d810:	44e0      	add	r8, ip
 801d812:	46a4      	mov	ip, r4
 801d814:	4462      	add	r2, ip
 801d816:	9201      	str	r2, [sp, #4]
 801d818:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d81a:	9b00      	ldr	r3, [sp, #0]
 801d81c:	4694      	mov	ip, r2
 801d81e:	4463      	add	r3, ip
 801d820:	9300      	str	r3, [sp, #0]
 801d822:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d824:	9902      	ldr	r1, [sp, #8]
 801d826:	469c      	mov	ip, r3
 801d828:	4461      	add	r1, ip
 801d82a:	9102      	str	r1, [sp, #8]
 801d82c:	2800      	cmp	r0, #0
 801d82e:	d000      	beq.n	801d832 <arm_radix4_butterfly_inverse_q31+0x22e>
 801d830:	e70f      	b.n	801d652 <arm_radix4_butterfly_inverse_q31+0x4e>
 801d832:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d834:	009b      	lsls	r3, r3, #2
 801d836:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d838:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d83a:	9320      	str	r3, [sp, #128]	@ 0x80
 801d83c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d83e:	2b04      	cmp	r3, #4
 801d840:	d800      	bhi.n	801d844 <arm_radix4_butterfly_inverse_q31+0x240>
 801d842:	e17c      	b.n	801db3e <arm_radix4_butterfly_inverse_q31+0x53a>
 801d844:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d846:	0893      	lsrs	r3, r2, #2
 801d848:	1e59      	subs	r1, r3, #1
 801d84a:	9321      	str	r3, [sp, #132]	@ 0x84
 801d84c:	00db      	lsls	r3, r3, #3
 801d84e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d850:	00d3      	lsls	r3, r2, #3
 801d852:	9300      	str	r3, [sp, #0]
 801d854:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d856:	911a      	str	r1, [sp, #104]	@ 0x68
 801d858:	00da      	lsls	r2, r3, #3
 801d85a:	921e      	str	r2, [sp, #120]	@ 0x78
 801d85c:	011a      	lsls	r2, r3, #4
 801d85e:	921d      	str	r2, [sp, #116]	@ 0x74
 801d860:	001a      	movs	r2, r3
 801d862:	4694      	mov	ip, r2
 801d864:	005b      	lsls	r3, r3, #1
 801d866:	4463      	add	r3, ip
 801d868:	00db      	lsls	r3, r3, #3
 801d86a:	931c      	str	r3, [sp, #112]	@ 0x70
 801d86c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d86e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d870:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d872:	9318      	str	r3, [sp, #96]	@ 0x60
 801d874:	9319      	str	r3, [sp, #100]	@ 0x64
 801d876:	9316      	str	r3, [sp, #88]	@ 0x58
 801d878:	2300      	movs	r3, #0
 801d87a:	9315      	str	r3, [sp, #84]	@ 0x54
 801d87c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d87e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d880:	681a      	ldr	r2, [r3, #0]
 801d882:	685b      	ldr	r3, [r3, #4]
 801d884:	9205      	str	r2, [sp, #20]
 801d886:	9306      	str	r3, [sp, #24]
 801d888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d88a:	468c      	mov	ip, r1
 801d88c:	681a      	ldr	r2, [r3, #0]
 801d88e:	685b      	ldr	r3, [r3, #4]
 801d890:	9207      	str	r2, [sp, #28]
 801d892:	9308      	str	r3, [sp, #32]
 801d894:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d896:	681a      	ldr	r2, [r3, #0]
 801d898:	685b      	ldr	r3, [r3, #4]
 801d89a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d89c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d89e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d8a0:	0013      	movs	r3, r2
 801d8a2:	4463      	add	r3, ip
 801d8a4:	4698      	mov	r8, r3
 801d8a6:	0013      	movs	r3, r2
 801d8a8:	4442      	add	r2, r8
 801d8aa:	4691      	mov	r9, r2
 801d8ac:	001a      	movs	r2, r3
 801d8ae:	444a      	add	r2, r9
 801d8b0:	4692      	mov	sl, r2
 801d8b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d8b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d8b6:	4293      	cmp	r3, r2
 801d8b8:	d800      	bhi.n	801d8bc <arm_radix4_butterfly_inverse_q31+0x2b8>
 801d8ba:	e0d9      	b.n	801da70 <arm_radix4_butterfly_inverse_q31+0x46c>
 801d8bc:	4694      	mov	ip, r2
 801d8be:	4644      	mov	r4, r8
 801d8c0:	4655      	mov	r5, sl
 801d8c2:	4688      	mov	r8, r1
 801d8c4:	9b07      	ldr	r3, [sp, #28]
 801d8c6:	17db      	asrs	r3, r3, #31
 801d8c8:	930c      	str	r3, [sp, #48]	@ 0x30
 801d8ca:	9b08      	ldr	r3, [sp, #32]
 801d8cc:	17db      	asrs	r3, r3, #31
 801d8ce:	930d      	str	r3, [sp, #52]	@ 0x34
 801d8d0:	9b05      	ldr	r3, [sp, #20]
 801d8d2:	17db      	asrs	r3, r3, #31
 801d8d4:	930e      	str	r3, [sp, #56]	@ 0x38
 801d8d6:	9b06      	ldr	r3, [sp, #24]
 801d8d8:	17db      	asrs	r3, r3, #31
 801d8da:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8de:	17db      	asrs	r3, r3, #31
 801d8e0:	9310      	str	r3, [sp, #64]	@ 0x40
 801d8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d8e4:	17db      	asrs	r3, r3, #31
 801d8e6:	9311      	str	r3, [sp, #68]	@ 0x44
 801d8e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d8ea:	4463      	add	r3, ip
 801d8ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d8ee:	4643      	mov	r3, r8
 801d8f0:	4641      	mov	r1, r8
 801d8f2:	681a      	ldr	r2, [r3, #0]
 801d8f4:	464b      	mov	r3, r9
 801d8f6:	684f      	ldr	r7, [r1, #4]
 801d8f8:	4649      	mov	r1, r9
 801d8fa:	681b      	ldr	r3, [r3, #0]
 801d8fc:	18d6      	adds	r6, r2, r3
 801d8fe:	1ad3      	subs	r3, r2, r3
 801d900:	9301      	str	r3, [sp, #4]
 801d902:	684b      	ldr	r3, [r1, #4]
 801d904:	1af9      	subs	r1, r7, r3
 801d906:	9102      	str	r1, [sp, #8]
 801d908:	6829      	ldr	r1, [r5, #0]
 801d90a:	18f8      	adds	r0, r7, r3
 801d90c:	468c      	mov	ip, r1
 801d90e:	6827      	ldr	r7, [r4, #0]
 801d910:	4467      	add	r7, ip
 801d912:	003a      	movs	r2, r7
 801d914:	19f3      	adds	r3, r6, r7
 801d916:	4647      	mov	r7, r8
 801d918:	109b      	asrs	r3, r3, #2
 801d91a:	603b      	str	r3, [r7, #0]
 801d91c:	6869      	ldr	r1, [r5, #4]
 801d91e:	6867      	ldr	r7, [r4, #4]
 801d920:	468c      	mov	ip, r1
 801d922:	4467      	add	r7, ip
 801d924:	003b      	movs	r3, r7
 801d926:	19c1      	adds	r1, r0, r7
 801d928:	4647      	mov	r7, r8
 801d92a:	1ab6      	subs	r6, r6, r2
 801d92c:	1089      	asrs	r1, r1, #2
 801d92e:	6079      	str	r1, [r7, #4]
 801d930:	17f2      	asrs	r2, r6, #31
 801d932:	9900      	ldr	r1, [sp, #0]
 801d934:	4692      	mov	sl, r2
 801d936:	468c      	mov	ip, r1
 801d938:	6867      	ldr	r7, [r4, #4]
 801d93a:	6869      	ldr	r1, [r5, #4]
 801d93c:	44e0      	add	r8, ip
 801d93e:	1a7f      	subs	r7, r7, r1
 801d940:	9703      	str	r7, [sp, #12]
 801d942:	6821      	ldr	r1, [r4, #0]
 801d944:	682f      	ldr	r7, [r5, #0]
 801d946:	1bc9      	subs	r1, r1, r7
 801d948:	1ac7      	subs	r7, r0, r3
 801d94a:	17fa      	asrs	r2, r7, #31
 801d94c:	4693      	mov	fp, r2
 801d94e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d950:	9a07      	ldr	r2, [sp, #28]
 801d952:	9104      	str	r1, [sp, #16]
 801d954:	0030      	movs	r0, r6
 801d956:	4651      	mov	r1, sl
 801d958:	f7e2 fe32 	bl	80005c0 <__aeabi_lmul>
 801d95c:	9a08      	ldr	r2, [sp, #32]
 801d95e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d960:	9112      	str	r1, [sp, #72]	@ 0x48
 801d962:	0038      	movs	r0, r7
 801d964:	4659      	mov	r1, fp
 801d966:	f7e2 fe2b 	bl	80005c0 <__aeabi_lmul>
 801d96a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d96c:	9a07      	ldr	r2, [sp, #28]
 801d96e:	1a41      	subs	r1, r0, r1
 801d970:	1049      	asrs	r1, r1, #1
 801d972:	6021      	str	r1, [r4, #0]
 801d974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d976:	0038      	movs	r0, r7
 801d978:	4659      	mov	r1, fp
 801d97a:	f7e2 fe21 	bl	80005c0 <__aeabi_lmul>
 801d97e:	9a08      	ldr	r2, [sp, #32]
 801d980:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d982:	000f      	movs	r7, r1
 801d984:	0030      	movs	r0, r6
 801d986:	4651      	mov	r1, sl
 801d988:	f7e2 fe1a 	bl	80005c0 <__aeabi_lmul>
 801d98c:	9b00      	ldr	r3, [sp, #0]
 801d98e:	187f      	adds	r7, r7, r1
 801d990:	469c      	mov	ip, r3
 801d992:	107f      	asrs	r7, r7, #1
 801d994:	6067      	str	r7, [r4, #4]
 801d996:	9a01      	ldr	r2, [sp, #4]
 801d998:	9f03      	ldr	r7, [sp, #12]
 801d99a:	9802      	ldr	r0, [sp, #8]
 801d99c:	1bd7      	subs	r7, r2, r7
 801d99e:	17fe      	asrs	r6, r7, #31
 801d9a0:	0031      	movs	r1, r6
 801d9a2:	9e04      	ldr	r6, [sp, #16]
 801d9a4:	4682      	mov	sl, r0
 801d9a6:	4464      	add	r4, ip
 801d9a8:	46b4      	mov	ip, r6
 801d9aa:	44e2      	add	sl, ip
 801d9ac:	4652      	mov	r2, sl
 801d9ae:	17d2      	asrs	r2, r2, #31
 801d9b0:	4693      	mov	fp, r2
 801d9b2:	0038      	movs	r0, r7
 801d9b4:	9a05      	ldr	r2, [sp, #20]
 801d9b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9b8:	9112      	str	r1, [sp, #72]	@ 0x48
 801d9ba:	f7e2 fe01 	bl	80005c0 <__aeabi_lmul>
 801d9be:	9a06      	ldr	r2, [sp, #24]
 801d9c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9c2:	000e      	movs	r6, r1
 801d9c4:	4650      	mov	r0, sl
 801d9c6:	4659      	mov	r1, fp
 801d9c8:	f7e2 fdfa 	bl	80005c0 <__aeabi_lmul>
 801d9cc:	4648      	mov	r0, r9
 801d9ce:	1a76      	subs	r6, r6, r1
 801d9d0:	1076      	asrs	r6, r6, #1
 801d9d2:	6006      	str	r6, [r0, #0]
 801d9d4:	9a05      	ldr	r2, [sp, #20]
 801d9d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9d8:	4650      	mov	r0, sl
 801d9da:	4659      	mov	r1, fp
 801d9dc:	f7e2 fdf0 	bl	80005c0 <__aeabi_lmul>
 801d9e0:	9a06      	ldr	r2, [sp, #24]
 801d9e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9e4:	000e      	movs	r6, r1
 801d9e6:	0038      	movs	r0, r7
 801d9e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d9ea:	f7e2 fde9 	bl	80005c0 <__aeabi_lmul>
 801d9ee:	9a00      	ldr	r2, [sp, #0]
 801d9f0:	9f03      	ldr	r7, [sp, #12]
 801d9f2:	4694      	mov	ip, r2
 801d9f4:	1876      	adds	r6, r6, r1
 801d9f6:	4649      	mov	r1, r9
 801d9f8:	44e1      	add	r9, ip
 801d9fa:	46bc      	mov	ip, r7
 801d9fc:	9b01      	ldr	r3, [sp, #4]
 801d9fe:	1076      	asrs	r6, r6, #1
 801da00:	4463      	add	r3, ip
 801da02:	17df      	asrs	r7, r3, #31
 801da04:	604e      	str	r6, [r1, #4]
 801da06:	46ba      	mov	sl, r7
 801da08:	001e      	movs	r6, r3
 801da0a:	9802      	ldr	r0, [sp, #8]
 801da0c:	9b04      	ldr	r3, [sp, #16]
 801da0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da10:	1ac7      	subs	r7, r0, r3
 801da12:	17fb      	asrs	r3, r7, #31
 801da14:	469b      	mov	fp, r3
 801da16:	0030      	movs	r0, r6
 801da18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da1a:	4651      	mov	r1, sl
 801da1c:	f7e2 fdd0 	bl	80005c0 <__aeabi_lmul>
 801da20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801da22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801da24:	9101      	str	r1, [sp, #4]
 801da26:	0038      	movs	r0, r7
 801da28:	4659      	mov	r1, fp
 801da2a:	f7e2 fdc9 	bl	80005c0 <__aeabi_lmul>
 801da2e:	9801      	ldr	r0, [sp, #4]
 801da30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da32:	1a41      	subs	r1, r0, r1
 801da34:	1049      	asrs	r1, r1, #1
 801da36:	6029      	str	r1, [r5, #0]
 801da38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da3a:	0038      	movs	r0, r7
 801da3c:	4659      	mov	r1, fp
 801da3e:	f7e2 fdbf 	bl	80005c0 <__aeabi_lmul>
 801da42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801da44:	000f      	movs	r7, r1
 801da46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801da48:	0030      	movs	r0, r6
 801da4a:	4651      	mov	r1, sl
 801da4c:	f7e2 fdb8 	bl	80005c0 <__aeabi_lmul>
 801da50:	187f      	adds	r7, r7, r1
 801da52:	107f      	asrs	r7, r7, #1
 801da54:	606f      	str	r7, [r5, #4]
 801da56:	9a00      	ldr	r2, [sp, #0]
 801da58:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801da5a:	4694      	mov	ip, r2
 801da5c:	4465      	add	r5, ip
 801da5e:	468c      	mov	ip, r1
 801da60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801da62:	0013      	movs	r3, r2
 801da64:	4462      	add	r2, ip
 801da66:	920b      	str	r2, [sp, #44]	@ 0x2c
 801da68:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801da6a:	429a      	cmp	r2, r3
 801da6c:	d900      	bls.n	801da70 <arm_radix4_butterfly_inverse_q31+0x46c>
 801da6e:	e73e      	b.n	801d8ee <arm_radix4_butterfly_inverse_q31+0x2ea>
 801da70:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801da72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801da74:	468c      	mov	ip, r1
 801da76:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801da78:	4462      	add	r2, ip
 801da7a:	468c      	mov	ip, r1
 801da7c:	9216      	str	r2, [sp, #88]	@ 0x58
 801da7e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801da80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801da82:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801da84:	4462      	add	r2, ip
 801da86:	468c      	mov	ip, r1
 801da88:	9219      	str	r2, [sp, #100]	@ 0x64
 801da8a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801da8c:	3301      	adds	r3, #1
 801da8e:	4462      	add	r2, ip
 801da90:	9218      	str	r2, [sp, #96]	@ 0x60
 801da92:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801da94:	9315      	str	r3, [sp, #84]	@ 0x54
 801da96:	3208      	adds	r2, #8
 801da98:	9217      	str	r2, [sp, #92]	@ 0x5c
 801da9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801da9c:	4293      	cmp	r3, r2
 801da9e:	d800      	bhi.n	801daa2 <arm_radix4_butterfly_inverse_q31+0x49e>
 801daa0:	e6ec      	b.n	801d87c <arm_radix4_butterfly_inverse_q31+0x278>
 801daa2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801daa4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801daa6:	009b      	lsls	r3, r3, #2
 801daa8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801daaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801daac:	9213      	str	r2, [sp, #76]	@ 0x4c
 801daae:	089b      	lsrs	r3, r3, #2
 801dab0:	9320      	str	r3, [sp, #128]	@ 0x80
 801dab2:	2b04      	cmp	r3, #4
 801dab4:	d900      	bls.n	801dab8 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801dab6:	e6c5      	b.n	801d844 <arm_radix4_butterfly_inverse_q31+0x240>
 801dab8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801daba:	469a      	mov	sl, r3
 801dabc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dabe:	681a      	ldr	r2, [r3, #0]
 801dac0:	6918      	ldr	r0, [r3, #16]
 801dac2:	4691      	mov	r9, r2
 801dac4:	464c      	mov	r4, r9
 801dac6:	4680      	mov	r8, r0
 801dac8:	69de      	ldr	r6, [r3, #28]
 801daca:	689d      	ldr	r5, [r3, #8]
 801dacc:	46b4      	mov	ip, r6
 801dace:	6998      	ldr	r0, [r3, #24]
 801dad0:	1964      	adds	r4, r4, r5
 801dad2:	6859      	ldr	r1, [r3, #4]
 801dad4:	68da      	ldr	r2, [r3, #12]
 801dad6:	4444      	add	r4, r8
 801dad8:	695f      	ldr	r7, [r3, #20]
 801dada:	1824      	adds	r4, r4, r0
 801dadc:	601c      	str	r4, [r3, #0]
 801dade:	188c      	adds	r4, r1, r2
 801dae0:	19e4      	adds	r4, r4, r7
 801dae2:	4464      	add	r4, ip
 801dae4:	605c      	str	r4, [r3, #4]
 801dae6:	464c      	mov	r4, r9
 801dae8:	1b64      	subs	r4, r4, r5
 801daea:	4444      	add	r4, r8
 801daec:	1a24      	subs	r4, r4, r0
 801daee:	609c      	str	r4, [r3, #8]
 801daf0:	1a8c      	subs	r4, r1, r2
 801daf2:	19e4      	adds	r4, r4, r7
 801daf4:	1ba4      	subs	r4, r4, r6
 801daf6:	60dc      	str	r4, [r3, #12]
 801daf8:	464c      	mov	r4, r9
 801dafa:	4646      	mov	r6, r8
 801dafc:	1aa4      	subs	r4, r4, r2
 801dafe:	1ba4      	subs	r4, r4, r6
 801db00:	4464      	add	r4, ip
 801db02:	611c      	str	r4, [r3, #16]
 801db04:	194c      	adds	r4, r1, r5
 801db06:	1be4      	subs	r4, r4, r7
 801db08:	1a24      	subs	r4, r4, r0
 801db0a:	615c      	str	r4, [r3, #20]
 801db0c:	4644      	mov	r4, r8
 801db0e:	4666      	mov	r6, ip
 801db10:	444a      	add	r2, r9
 801db12:	1b12      	subs	r2, r2, r4
 801db14:	1b92      	subs	r2, r2, r6
 801db16:	619a      	str	r2, [r3, #24]
 801db18:	1b4a      	subs	r2, r1, r5
 801db1a:	1bd1      	subs	r1, r2, r7
 801db1c:	2201      	movs	r2, #1
 801db1e:	4252      	negs	r2, r2
 801db20:	4694      	mov	ip, r2
 801db22:	44e2      	add	sl, ip
 801db24:	4652      	mov	r2, sl
 801db26:	1809      	adds	r1, r1, r0
 801db28:	61d9      	str	r1, [r3, #28]
 801db2a:	3320      	adds	r3, #32
 801db2c:	2a00      	cmp	r2, #0
 801db2e:	d1c6      	bne.n	801dabe <arm_radix4_butterfly_inverse_q31+0x4ba>
 801db30:	b027      	add	sp, #156	@ 0x9c
 801db32:	bc3c      	pop	{r2, r3, r4, r5}
 801db34:	4690      	mov	r8, r2
 801db36:	4699      	mov	r9, r3
 801db38:	46a2      	mov	sl, r4
 801db3a:	46ab      	mov	fp, r5
 801db3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db3e:	469a      	mov	sl, r3
 801db40:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801db42:	e7bc      	b.n	801dabe <arm_radix4_butterfly_inverse_q31+0x4ba>

0801db44 <arm_cmplx_mag_squared_q31>:
 801db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db46:	464f      	mov	r7, r9
 801db48:	4646      	mov	r6, r8
 801db4a:	0004      	movs	r4, r0
 801db4c:	b4c0      	push	{r6, r7}
 801db4e:	0016      	movs	r6, r2
 801db50:	000f      	movs	r7, r1
 801db52:	2a00      	cmp	r2, #0
 801db54:	d018      	beq.n	801db88 <arm_cmplx_mag_squared_q31+0x44>
 801db56:	6823      	ldr	r3, [r4, #0]
 801db58:	6822      	ldr	r2, [r4, #0]
 801db5a:	17d9      	asrs	r1, r3, #31
 801db5c:	6863      	ldr	r3, [r4, #4]
 801db5e:	0010      	movs	r0, r2
 801db60:	4698      	mov	r8, r3
 801db62:	17db      	asrs	r3, r3, #31
 801db64:	4699      	mov	r9, r3
 801db66:	000b      	movs	r3, r1
 801db68:	f7e2 fd2a 	bl	80005c0 <__aeabi_lmul>
 801db6c:	4642      	mov	r2, r8
 801db6e:	104d      	asrs	r5, r1, #1
 801db70:	464b      	mov	r3, r9
 801db72:	4640      	mov	r0, r8
 801db74:	4649      	mov	r1, r9
 801db76:	f7e2 fd23 	bl	80005c0 <__aeabi_lmul>
 801db7a:	1049      	asrs	r1, r1, #1
 801db7c:	1869      	adds	r1, r5, r1
 801db7e:	3e01      	subs	r6, #1
 801db80:	c702      	stmia	r7!, {r1}
 801db82:	3408      	adds	r4, #8
 801db84:	2e00      	cmp	r6, #0
 801db86:	d1e6      	bne.n	801db56 <arm_cmplx_mag_squared_q31+0x12>
 801db88:	bc0c      	pop	{r2, r3}
 801db8a:	4690      	mov	r8, r2
 801db8c:	4699      	mov	r9, r3
 801db8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801db90 <arm_mult_q31>:
 801db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db92:	4646      	mov	r6, r8
 801db94:	464f      	mov	r7, r9
 801db96:	4690      	mov	r8, r2
 801db98:	b4c0      	push	{r6, r7}
 801db9a:	001d      	movs	r5, r3
 801db9c:	0006      	movs	r6, r0
 801db9e:	000f      	movs	r7, r1
 801dba0:	2400      	movs	r4, #0
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d020      	beq.n	801dbe8 <arm_mult_q31+0x58>
 801dba6:	4b12      	ldr	r3, [pc, #72]	@ (801dbf0 <arm_mult_q31+0x60>)
 801dba8:	4699      	mov	r9, r3
 801dbaa:	e007      	b.n	801dbbc <arm_mult_q31+0x2c>
 801dbac:	464b      	mov	r3, r9
 801dbae:	4059      	eors	r1, r3
 801dbb0:	4643      	mov	r3, r8
 801dbb2:	3d01      	subs	r5, #1
 801dbb4:	5119      	str	r1, [r3, r4]
 801dbb6:	3404      	adds	r4, #4
 801dbb8:	2d00      	cmp	r5, #0
 801dbba:	d015      	beq.n	801dbe8 <arm_mult_q31+0x58>
 801dbbc:	5933      	ldr	r3, [r6, r4]
 801dbbe:	593a      	ldr	r2, [r7, r4]
 801dbc0:	17d9      	asrs	r1, r3, #31
 801dbc2:	593b      	ldr	r3, [r7, r4]
 801dbc4:	5930      	ldr	r0, [r6, r4]
 801dbc6:	17db      	asrs	r3, r3, #31
 801dbc8:	f7e2 fcfa 	bl	80005c0 <__aeabi_lmul>
 801dbcc:	004b      	lsls	r3, r1, #1
 801dbce:	0fc0      	lsrs	r0, r0, #31
 801dbd0:	4318      	orrs	r0, r3
 801dbd2:	17c9      	asrs	r1, r1, #31
 801dbd4:	17c3      	asrs	r3, r0, #31
 801dbd6:	428b      	cmp	r3, r1
 801dbd8:	d1e8      	bne.n	801dbac <arm_mult_q31+0x1c>
 801dbda:	0001      	movs	r1, r0
 801dbdc:	4643      	mov	r3, r8
 801dbde:	3d01      	subs	r5, #1
 801dbe0:	5119      	str	r1, [r3, r4]
 801dbe2:	3404      	adds	r4, #4
 801dbe4:	2d00      	cmp	r5, #0
 801dbe6:	d1e9      	bne.n	801dbbc <arm_mult_q31+0x2c>
 801dbe8:	bc0c      	pop	{r2, r3}
 801dbea:	4690      	mov	r8, r2
 801dbec:	4699      	mov	r9, r3
 801dbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbf0:	7fffffff 	.word	0x7fffffff

0801dbf4 <arm_add_q31>:
 801dbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbf6:	465f      	mov	r7, fp
 801dbf8:	4656      	mov	r6, sl
 801dbfa:	464d      	mov	r5, r9
 801dbfc:	4644      	mov	r4, r8
 801dbfe:	b4f0      	push	{r4, r5, r6, r7}
 801dc00:	4693      	mov	fp, r2
 801dc02:	b083      	sub	sp, #12
 801dc04:	4681      	mov	r9, r0
 801dc06:	468a      	mov	sl, r1
 801dc08:	4698      	mov	r8, r3
 801dc0a:	2200      	movs	r2, #0
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d020      	beq.n	801dc52 <arm_add_q31+0x5e>
 801dc10:	4649      	mov	r1, r9
 801dc12:	4653      	mov	r3, sl
 801dc14:	588e      	ldr	r6, [r1, r2]
 801dc16:	589b      	ldr	r3, [r3, r2]
 801dc18:	17f7      	asrs	r7, r6, #31
 801dc1a:	001c      	movs	r4, r3
 801dc1c:	0030      	movs	r0, r6
 801dc1e:	0039      	movs	r1, r7
 801dc20:	17dd      	asrs	r5, r3, #31
 801dc22:	46b4      	mov	ip, r6
 801dc24:	1900      	adds	r0, r0, r4
 801dc26:	4169      	adcs	r1, r5
 801dc28:	4463      	add	r3, ip
 801dc2a:	9000      	str	r0, [sp, #0]
 801dc2c:	9101      	str	r1, [sp, #4]
 801dc2e:	17d9      	asrs	r1, r3, #31
 801dc30:	468c      	mov	ip, r1
 801dc32:	9901      	ldr	r1, [sp, #4]
 801dc34:	458c      	cmp	ip, r1
 801dc36:	d002      	beq.n	801dc3e <arm_add_q31+0x4a>
 801dc38:	17cb      	asrs	r3, r1, #31
 801dc3a:	4909      	ldr	r1, [pc, #36]	@ (801dc60 <arm_add_q31+0x6c>)
 801dc3c:	404b      	eors	r3, r1
 801dc3e:	4659      	mov	r1, fp
 801dc40:	508b      	str	r3, [r1, r2]
 801dc42:	2301      	movs	r3, #1
 801dc44:	425b      	negs	r3, r3
 801dc46:	469c      	mov	ip, r3
 801dc48:	44e0      	add	r8, ip
 801dc4a:	4643      	mov	r3, r8
 801dc4c:	3204      	adds	r2, #4
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d1de      	bne.n	801dc10 <arm_add_q31+0x1c>
 801dc52:	b003      	add	sp, #12
 801dc54:	bc3c      	pop	{r2, r3, r4, r5}
 801dc56:	4690      	mov	r8, r2
 801dc58:	4699      	mov	r9, r3
 801dc5a:	46a2      	mov	sl, r4
 801dc5c:	46ab      	mov	fp, r5
 801dc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc60:	7fffffff 	.word	0x7fffffff

0801dc64 <atof>:
 801dc64:	b510      	push	{r4, lr}
 801dc66:	2100      	movs	r1, #0
 801dc68:	f000 fe12 	bl	801e890 <strtod>
 801dc6c:	bd10      	pop	{r4, pc}

0801dc6e <atoi>:
 801dc6e:	b510      	push	{r4, lr}
 801dc70:	220a      	movs	r2, #10
 801dc72:	2100      	movs	r1, #0
 801dc74:	f000 fea4 	bl	801e9c0 <strtol>
 801dc78:	bd10      	pop	{r4, pc}
	...

0801dc7c <sulp>:
 801dc7c:	b570      	push	{r4, r5, r6, lr}
 801dc7e:	0016      	movs	r6, r2
 801dc80:	000d      	movs	r5, r1
 801dc82:	f003 fcf3 	bl	802166c <__ulp>
 801dc86:	2e00      	cmp	r6, #0
 801dc88:	d00d      	beq.n	801dca6 <sulp+0x2a>
 801dc8a:	236b      	movs	r3, #107	@ 0x6b
 801dc8c:	006a      	lsls	r2, r5, #1
 801dc8e:	0d52      	lsrs	r2, r2, #21
 801dc90:	1a9b      	subs	r3, r3, r2
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	dd07      	ble.n	801dca6 <sulp+0x2a>
 801dc96:	2400      	movs	r4, #0
 801dc98:	4a03      	ldr	r2, [pc, #12]	@ (801dca8 <sulp+0x2c>)
 801dc9a:	051b      	lsls	r3, r3, #20
 801dc9c:	189d      	adds	r5, r3, r2
 801dc9e:	002b      	movs	r3, r5
 801dca0:	0022      	movs	r2, r4
 801dca2:	f7e4 fccb 	bl	800263c <__aeabi_dmul>
 801dca6:	bd70      	pop	{r4, r5, r6, pc}
 801dca8:	3ff00000 	.word	0x3ff00000

0801dcac <_strtod_l>:
 801dcac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcae:	b0a3      	sub	sp, #140	@ 0x8c
 801dcb0:	921b      	str	r2, [sp, #108]	@ 0x6c
 801dcb2:	2200      	movs	r2, #0
 801dcb4:	2600      	movs	r6, #0
 801dcb6:	2700      	movs	r7, #0
 801dcb8:	9005      	str	r0, [sp, #20]
 801dcba:	9109      	str	r1, [sp, #36]	@ 0x24
 801dcbc:	921e      	str	r2, [sp, #120]	@ 0x78
 801dcbe:	911d      	str	r1, [sp, #116]	@ 0x74
 801dcc0:	780a      	ldrb	r2, [r1, #0]
 801dcc2:	2a2b      	cmp	r2, #43	@ 0x2b
 801dcc4:	d053      	beq.n	801dd6e <_strtod_l+0xc2>
 801dcc6:	d83f      	bhi.n	801dd48 <_strtod_l+0x9c>
 801dcc8:	2a0d      	cmp	r2, #13
 801dcca:	d839      	bhi.n	801dd40 <_strtod_l+0x94>
 801dccc:	2a08      	cmp	r2, #8
 801dcce:	d839      	bhi.n	801dd44 <_strtod_l+0x98>
 801dcd0:	2a00      	cmp	r2, #0
 801dcd2:	d042      	beq.n	801dd5a <_strtod_l+0xae>
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	9212      	str	r2, [sp, #72]	@ 0x48
 801dcd8:	2100      	movs	r1, #0
 801dcda:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801dcdc:	910c      	str	r1, [sp, #48]	@ 0x30
 801dcde:	782a      	ldrb	r2, [r5, #0]
 801dce0:	2a30      	cmp	r2, #48	@ 0x30
 801dce2:	d000      	beq.n	801dce6 <_strtod_l+0x3a>
 801dce4:	e083      	b.n	801ddee <_strtod_l+0x142>
 801dce6:	786a      	ldrb	r2, [r5, #1]
 801dce8:	3120      	adds	r1, #32
 801dcea:	438a      	bics	r2, r1
 801dcec:	2a58      	cmp	r2, #88	@ 0x58
 801dcee:	d000      	beq.n	801dcf2 <_strtod_l+0x46>
 801dcf0:	e073      	b.n	801ddda <_strtod_l+0x12e>
 801dcf2:	9302      	str	r3, [sp, #8]
 801dcf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dcf6:	4a95      	ldr	r2, [pc, #596]	@ (801df4c <_strtod_l+0x2a0>)
 801dcf8:	9301      	str	r3, [sp, #4]
 801dcfa:	ab1e      	add	r3, sp, #120	@ 0x78
 801dcfc:	9300      	str	r3, [sp, #0]
 801dcfe:	9805      	ldr	r0, [sp, #20]
 801dd00:	ab1f      	add	r3, sp, #124	@ 0x7c
 801dd02:	a91d      	add	r1, sp, #116	@ 0x74
 801dd04:	f002 fd62 	bl	80207cc <__gethex>
 801dd08:	230f      	movs	r3, #15
 801dd0a:	0002      	movs	r2, r0
 801dd0c:	401a      	ands	r2, r3
 801dd0e:	0004      	movs	r4, r0
 801dd10:	9206      	str	r2, [sp, #24]
 801dd12:	4218      	tst	r0, r3
 801dd14:	d005      	beq.n	801dd22 <_strtod_l+0x76>
 801dd16:	2a06      	cmp	r2, #6
 801dd18:	d12b      	bne.n	801dd72 <_strtod_l+0xc6>
 801dd1a:	2300      	movs	r3, #0
 801dd1c:	3501      	adds	r5, #1
 801dd1e:	951d      	str	r5, [sp, #116]	@ 0x74
 801dd20:	9312      	str	r3, [sp, #72]	@ 0x48
 801dd22:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d002      	beq.n	801dd2e <_strtod_l+0x82>
 801dd28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dd2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dd2c:	6013      	str	r3, [r2, #0]
 801dd2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	d019      	beq.n	801dd68 <_strtod_l+0xbc>
 801dd34:	2380      	movs	r3, #128	@ 0x80
 801dd36:	0030      	movs	r0, r6
 801dd38:	061b      	lsls	r3, r3, #24
 801dd3a:	18f9      	adds	r1, r7, r3
 801dd3c:	b023      	add	sp, #140	@ 0x8c
 801dd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd40:	2a20      	cmp	r2, #32
 801dd42:	d1c7      	bne.n	801dcd4 <_strtod_l+0x28>
 801dd44:	3101      	adds	r1, #1
 801dd46:	e7ba      	b.n	801dcbe <_strtod_l+0x12>
 801dd48:	2a2d      	cmp	r2, #45	@ 0x2d
 801dd4a:	d1c3      	bne.n	801dcd4 <_strtod_l+0x28>
 801dd4c:	3a2c      	subs	r2, #44	@ 0x2c
 801dd4e:	9212      	str	r2, [sp, #72]	@ 0x48
 801dd50:	1c4a      	adds	r2, r1, #1
 801dd52:	921d      	str	r2, [sp, #116]	@ 0x74
 801dd54:	784a      	ldrb	r2, [r1, #1]
 801dd56:	2a00      	cmp	r2, #0
 801dd58:	d1be      	bne.n	801dcd8 <_strtod_l+0x2c>
 801dd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd5c:	931d      	str	r3, [sp, #116]	@ 0x74
 801dd5e:	2300      	movs	r3, #0
 801dd60:	9312      	str	r3, [sp, #72]	@ 0x48
 801dd62:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d1df      	bne.n	801dd28 <_strtod_l+0x7c>
 801dd68:	0030      	movs	r0, r6
 801dd6a:	0039      	movs	r1, r7
 801dd6c:	e7e6      	b.n	801dd3c <_strtod_l+0x90>
 801dd6e:	2200      	movs	r2, #0
 801dd70:	e7ed      	b.n	801dd4e <_strtod_l+0xa2>
 801dd72:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801dd74:	2a00      	cmp	r2, #0
 801dd76:	d007      	beq.n	801dd88 <_strtod_l+0xdc>
 801dd78:	2135      	movs	r1, #53	@ 0x35
 801dd7a:	a820      	add	r0, sp, #128	@ 0x80
 801dd7c:	f003 fd6c 	bl	8021858 <__copybits>
 801dd80:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dd82:	9805      	ldr	r0, [sp, #20]
 801dd84:	f003 f926 	bl	8020fd4 <_Bfree>
 801dd88:	9806      	ldr	r0, [sp, #24]
 801dd8a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dd8c:	3801      	subs	r0, #1
 801dd8e:	2804      	cmp	r0, #4
 801dd90:	d806      	bhi.n	801dda0 <_strtod_l+0xf4>
 801dd92:	f7e2 f9f3 	bl	800017c <__gnu_thumb1_case_uqi>
 801dd96:	0312      	.short	0x0312
 801dd98:	1e1c      	.short	0x1e1c
 801dd9a:	12          	.byte	0x12
 801dd9b:	00          	.byte	0x00
 801dd9c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801dd9e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801dda0:	05e4      	lsls	r4, r4, #23
 801dda2:	d502      	bpl.n	801ddaa <_strtod_l+0xfe>
 801dda4:	2380      	movs	r3, #128	@ 0x80
 801dda6:	061b      	lsls	r3, r3, #24
 801dda8:	431f      	orrs	r7, r3
 801ddaa:	4b69      	ldr	r3, [pc, #420]	@ (801df50 <_strtod_l+0x2a4>)
 801ddac:	423b      	tst	r3, r7
 801ddae:	d1b8      	bne.n	801dd22 <_strtod_l+0x76>
 801ddb0:	f001 fd90 	bl	801f8d4 <__errno>
 801ddb4:	2322      	movs	r3, #34	@ 0x22
 801ddb6:	6003      	str	r3, [r0, #0]
 801ddb8:	e7b3      	b.n	801dd22 <_strtod_l+0x76>
 801ddba:	4966      	ldr	r1, [pc, #408]	@ (801df54 <_strtod_l+0x2a8>)
 801ddbc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ddbe:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ddc0:	400a      	ands	r2, r1
 801ddc2:	4965      	ldr	r1, [pc, #404]	@ (801df58 <_strtod_l+0x2ac>)
 801ddc4:	185b      	adds	r3, r3, r1
 801ddc6:	051b      	lsls	r3, r3, #20
 801ddc8:	431a      	orrs	r2, r3
 801ddca:	0017      	movs	r7, r2
 801ddcc:	e7e8      	b.n	801dda0 <_strtod_l+0xf4>
 801ddce:	4f60      	ldr	r7, [pc, #384]	@ (801df50 <_strtod_l+0x2a4>)
 801ddd0:	e7e6      	b.n	801dda0 <_strtod_l+0xf4>
 801ddd2:	2601      	movs	r6, #1
 801ddd4:	4f61      	ldr	r7, [pc, #388]	@ (801df5c <_strtod_l+0x2b0>)
 801ddd6:	4276      	negs	r6, r6
 801ddd8:	e7e2      	b.n	801dda0 <_strtod_l+0xf4>
 801ddda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dddc:	1c5a      	adds	r2, r3, #1
 801ddde:	921d      	str	r2, [sp, #116]	@ 0x74
 801dde0:	785b      	ldrb	r3, [r3, #1]
 801dde2:	2b30      	cmp	r3, #48	@ 0x30
 801dde4:	d0f9      	beq.n	801ddda <_strtod_l+0x12e>
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d09b      	beq.n	801dd22 <_strtod_l+0x76>
 801ddea:	2301      	movs	r3, #1
 801ddec:	930c      	str	r3, [sp, #48]	@ 0x30
 801ddee:	2500      	movs	r5, #0
 801ddf0:	220a      	movs	r2, #10
 801ddf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ddf4:	950d      	str	r5, [sp, #52]	@ 0x34
 801ddf6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ddf8:	9508      	str	r5, [sp, #32]
 801ddfa:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ddfc:	7804      	ldrb	r4, [r0, #0]
 801ddfe:	0023      	movs	r3, r4
 801de00:	3b30      	subs	r3, #48	@ 0x30
 801de02:	b2d9      	uxtb	r1, r3
 801de04:	2909      	cmp	r1, #9
 801de06:	d927      	bls.n	801de58 <_strtod_l+0x1ac>
 801de08:	2201      	movs	r2, #1
 801de0a:	4955      	ldr	r1, [pc, #340]	@ (801df60 <_strtod_l+0x2b4>)
 801de0c:	f001 fcd4 	bl	801f7b8 <strncmp>
 801de10:	2800      	cmp	r0, #0
 801de12:	d031      	beq.n	801de78 <_strtod_l+0x1cc>
 801de14:	2000      	movs	r0, #0
 801de16:	0023      	movs	r3, r4
 801de18:	4684      	mov	ip, r0
 801de1a:	9a08      	ldr	r2, [sp, #32]
 801de1c:	900e      	str	r0, [sp, #56]	@ 0x38
 801de1e:	9206      	str	r2, [sp, #24]
 801de20:	2220      	movs	r2, #32
 801de22:	0019      	movs	r1, r3
 801de24:	4391      	bics	r1, r2
 801de26:	000a      	movs	r2, r1
 801de28:	2100      	movs	r1, #0
 801de2a:	9107      	str	r1, [sp, #28]
 801de2c:	2a45      	cmp	r2, #69	@ 0x45
 801de2e:	d000      	beq.n	801de32 <_strtod_l+0x186>
 801de30:	e0c0      	b.n	801dfb4 <_strtod_l+0x308>
 801de32:	9b06      	ldr	r3, [sp, #24]
 801de34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801de36:	4303      	orrs	r3, r0
 801de38:	4313      	orrs	r3, r2
 801de3a:	428b      	cmp	r3, r1
 801de3c:	d08d      	beq.n	801dd5a <_strtod_l+0xae>
 801de3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de40:	9309      	str	r3, [sp, #36]	@ 0x24
 801de42:	3301      	adds	r3, #1
 801de44:	931d      	str	r3, [sp, #116]	@ 0x74
 801de46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de48:	785b      	ldrb	r3, [r3, #1]
 801de4a:	2b2b      	cmp	r3, #43	@ 0x2b
 801de4c:	d070      	beq.n	801df30 <_strtod_l+0x284>
 801de4e:	000c      	movs	r4, r1
 801de50:	2b2d      	cmp	r3, #45	@ 0x2d
 801de52:	d173      	bne.n	801df3c <_strtod_l+0x290>
 801de54:	2401      	movs	r4, #1
 801de56:	e06c      	b.n	801df32 <_strtod_l+0x286>
 801de58:	9908      	ldr	r1, [sp, #32]
 801de5a:	2908      	cmp	r1, #8
 801de5c:	dc09      	bgt.n	801de72 <_strtod_l+0x1c6>
 801de5e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801de60:	4351      	muls	r1, r2
 801de62:	185b      	adds	r3, r3, r1
 801de64:	930d      	str	r3, [sp, #52]	@ 0x34
 801de66:	9b08      	ldr	r3, [sp, #32]
 801de68:	3001      	adds	r0, #1
 801de6a:	3301      	adds	r3, #1
 801de6c:	9308      	str	r3, [sp, #32]
 801de6e:	901d      	str	r0, [sp, #116]	@ 0x74
 801de70:	e7c3      	b.n	801ddfa <_strtod_l+0x14e>
 801de72:	4355      	muls	r5, r2
 801de74:	195d      	adds	r5, r3, r5
 801de76:	e7f6      	b.n	801de66 <_strtod_l+0x1ba>
 801de78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de7a:	1c5a      	adds	r2, r3, #1
 801de7c:	921d      	str	r2, [sp, #116]	@ 0x74
 801de7e:	9a08      	ldr	r2, [sp, #32]
 801de80:	785b      	ldrb	r3, [r3, #1]
 801de82:	2a00      	cmp	r2, #0
 801de84:	d03a      	beq.n	801defc <_strtod_l+0x250>
 801de86:	900e      	str	r0, [sp, #56]	@ 0x38
 801de88:	9206      	str	r2, [sp, #24]
 801de8a:	001a      	movs	r2, r3
 801de8c:	3a30      	subs	r2, #48	@ 0x30
 801de8e:	2a09      	cmp	r2, #9
 801de90:	d912      	bls.n	801deb8 <_strtod_l+0x20c>
 801de92:	2201      	movs	r2, #1
 801de94:	4694      	mov	ip, r2
 801de96:	e7c3      	b.n	801de20 <_strtod_l+0x174>
 801de98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de9a:	3001      	adds	r0, #1
 801de9c:	1c5a      	adds	r2, r3, #1
 801de9e:	921d      	str	r2, [sp, #116]	@ 0x74
 801dea0:	785b      	ldrb	r3, [r3, #1]
 801dea2:	2b30      	cmp	r3, #48	@ 0x30
 801dea4:	d0f8      	beq.n	801de98 <_strtod_l+0x1ec>
 801dea6:	001a      	movs	r2, r3
 801dea8:	3a31      	subs	r2, #49	@ 0x31
 801deaa:	2a08      	cmp	r2, #8
 801deac:	d83b      	bhi.n	801df26 <_strtod_l+0x27a>
 801deae:	900e      	str	r0, [sp, #56]	@ 0x38
 801deb0:	2000      	movs	r0, #0
 801deb2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801deb4:	9006      	str	r0, [sp, #24]
 801deb6:	9213      	str	r2, [sp, #76]	@ 0x4c
 801deb8:	001a      	movs	r2, r3
 801deba:	1c41      	adds	r1, r0, #1
 801debc:	3a30      	subs	r2, #48	@ 0x30
 801debe:	2b30      	cmp	r3, #48	@ 0x30
 801dec0:	d016      	beq.n	801def0 <_strtod_l+0x244>
 801dec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dec4:	185b      	adds	r3, r3, r1
 801dec6:	930e      	str	r3, [sp, #56]	@ 0x38
 801dec8:	9b06      	ldr	r3, [sp, #24]
 801deca:	210a      	movs	r1, #10
 801decc:	469c      	mov	ip, r3
 801dece:	4484      	add	ip, r0
 801ded0:	459c      	cmp	ip, r3
 801ded2:	d115      	bne.n	801df00 <_strtod_l+0x254>
 801ded4:	9906      	ldr	r1, [sp, #24]
 801ded6:	9b06      	ldr	r3, [sp, #24]
 801ded8:	3101      	adds	r1, #1
 801deda:	1809      	adds	r1, r1, r0
 801dedc:	181b      	adds	r3, r3, r0
 801dede:	9106      	str	r1, [sp, #24]
 801dee0:	2b08      	cmp	r3, #8
 801dee2:	dc19      	bgt.n	801df18 <_strtod_l+0x26c>
 801dee4:	230a      	movs	r3, #10
 801dee6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801dee8:	434b      	muls	r3, r1
 801deea:	2100      	movs	r1, #0
 801deec:	18d3      	adds	r3, r2, r3
 801deee:	930d      	str	r3, [sp, #52]	@ 0x34
 801def0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801def2:	0008      	movs	r0, r1
 801def4:	1c5a      	adds	r2, r3, #1
 801def6:	921d      	str	r2, [sp, #116]	@ 0x74
 801def8:	785b      	ldrb	r3, [r3, #1]
 801defa:	e7c6      	b.n	801de8a <_strtod_l+0x1de>
 801defc:	9808      	ldr	r0, [sp, #32]
 801defe:	e7d0      	b.n	801dea2 <_strtod_l+0x1f6>
 801df00:	1c5c      	adds	r4, r3, #1
 801df02:	2b08      	cmp	r3, #8
 801df04:	dc04      	bgt.n	801df10 <_strtod_l+0x264>
 801df06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801df08:	434b      	muls	r3, r1
 801df0a:	930d      	str	r3, [sp, #52]	@ 0x34
 801df0c:	0023      	movs	r3, r4
 801df0e:	e7df      	b.n	801ded0 <_strtod_l+0x224>
 801df10:	2c10      	cmp	r4, #16
 801df12:	dcfb      	bgt.n	801df0c <_strtod_l+0x260>
 801df14:	434d      	muls	r5, r1
 801df16:	e7f9      	b.n	801df0c <_strtod_l+0x260>
 801df18:	2100      	movs	r1, #0
 801df1a:	2b0f      	cmp	r3, #15
 801df1c:	dce8      	bgt.n	801def0 <_strtod_l+0x244>
 801df1e:	230a      	movs	r3, #10
 801df20:	435d      	muls	r5, r3
 801df22:	1955      	adds	r5, r2, r5
 801df24:	e7e4      	b.n	801def0 <_strtod_l+0x244>
 801df26:	2200      	movs	r2, #0
 801df28:	920e      	str	r2, [sp, #56]	@ 0x38
 801df2a:	9206      	str	r2, [sp, #24]
 801df2c:	3201      	adds	r2, #1
 801df2e:	e7b1      	b.n	801de94 <_strtod_l+0x1e8>
 801df30:	2400      	movs	r4, #0
 801df32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df34:	3302      	adds	r3, #2
 801df36:	931d      	str	r3, [sp, #116]	@ 0x74
 801df38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df3a:	789b      	ldrb	r3, [r3, #2]
 801df3c:	001a      	movs	r2, r3
 801df3e:	3a30      	subs	r2, #48	@ 0x30
 801df40:	2a09      	cmp	r2, #9
 801df42:	d913      	bls.n	801df6c <_strtod_l+0x2c0>
 801df44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df46:	921d      	str	r2, [sp, #116]	@ 0x74
 801df48:	2200      	movs	r2, #0
 801df4a:	e032      	b.n	801dfb2 <_strtod_l+0x306>
 801df4c:	08024e34 	.word	0x08024e34
 801df50:	7ff00000 	.word	0x7ff00000
 801df54:	ffefffff 	.word	0xffefffff
 801df58:	00000433 	.word	0x00000433
 801df5c:	7fffffff 	.word	0x7fffffff
 801df60:	08024e1c 	.word	0x08024e1c
 801df64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df66:	1c5a      	adds	r2, r3, #1
 801df68:	921d      	str	r2, [sp, #116]	@ 0x74
 801df6a:	785b      	ldrb	r3, [r3, #1]
 801df6c:	2b30      	cmp	r3, #48	@ 0x30
 801df6e:	d0f9      	beq.n	801df64 <_strtod_l+0x2b8>
 801df70:	2200      	movs	r2, #0
 801df72:	9207      	str	r2, [sp, #28]
 801df74:	001a      	movs	r2, r3
 801df76:	3a31      	subs	r2, #49	@ 0x31
 801df78:	2a08      	cmp	r2, #8
 801df7a:	d81b      	bhi.n	801dfb4 <_strtod_l+0x308>
 801df7c:	3b30      	subs	r3, #48	@ 0x30
 801df7e:	9310      	str	r3, [sp, #64]	@ 0x40
 801df80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df82:	9307      	str	r3, [sp, #28]
 801df84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df86:	1c59      	adds	r1, r3, #1
 801df88:	911d      	str	r1, [sp, #116]	@ 0x74
 801df8a:	785b      	ldrb	r3, [r3, #1]
 801df8c:	001a      	movs	r2, r3
 801df8e:	3a30      	subs	r2, #48	@ 0x30
 801df90:	2a09      	cmp	r2, #9
 801df92:	d93a      	bls.n	801e00a <_strtod_l+0x35e>
 801df94:	9a07      	ldr	r2, [sp, #28]
 801df96:	1a8a      	subs	r2, r1, r2
 801df98:	49b4      	ldr	r1, [pc, #720]	@ (801e26c <_strtod_l+0x5c0>)
 801df9a:	9107      	str	r1, [sp, #28]
 801df9c:	2a08      	cmp	r2, #8
 801df9e:	dc04      	bgt.n	801dfaa <_strtod_l+0x2fe>
 801dfa0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dfa2:	9207      	str	r2, [sp, #28]
 801dfa4:	428a      	cmp	r2, r1
 801dfa6:	dd00      	ble.n	801dfaa <_strtod_l+0x2fe>
 801dfa8:	9107      	str	r1, [sp, #28]
 801dfaa:	2c00      	cmp	r4, #0
 801dfac:	d002      	beq.n	801dfb4 <_strtod_l+0x308>
 801dfae:	9a07      	ldr	r2, [sp, #28]
 801dfb0:	4252      	negs	r2, r2
 801dfb2:	9207      	str	r2, [sp, #28]
 801dfb4:	9a06      	ldr	r2, [sp, #24]
 801dfb6:	2a00      	cmp	r2, #0
 801dfb8:	d14d      	bne.n	801e056 <_strtod_l+0x3aa>
 801dfba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dfbc:	4310      	orrs	r0, r2
 801dfbe:	d000      	beq.n	801dfc2 <_strtod_l+0x316>
 801dfc0:	e6af      	b.n	801dd22 <_strtod_l+0x76>
 801dfc2:	4662      	mov	r2, ip
 801dfc4:	2a00      	cmp	r2, #0
 801dfc6:	d000      	beq.n	801dfca <_strtod_l+0x31e>
 801dfc8:	e6c7      	b.n	801dd5a <_strtod_l+0xae>
 801dfca:	2b69      	cmp	r3, #105	@ 0x69
 801dfcc:	d027      	beq.n	801e01e <_strtod_l+0x372>
 801dfce:	dc23      	bgt.n	801e018 <_strtod_l+0x36c>
 801dfd0:	2b49      	cmp	r3, #73	@ 0x49
 801dfd2:	d024      	beq.n	801e01e <_strtod_l+0x372>
 801dfd4:	2b4e      	cmp	r3, #78	@ 0x4e
 801dfd6:	d000      	beq.n	801dfda <_strtod_l+0x32e>
 801dfd8:	e6bf      	b.n	801dd5a <_strtod_l+0xae>
 801dfda:	49a5      	ldr	r1, [pc, #660]	@ (801e270 <_strtod_l+0x5c4>)
 801dfdc:	a81d      	add	r0, sp, #116	@ 0x74
 801dfde:	f002 fe2b 	bl	8020c38 <__match>
 801dfe2:	2800      	cmp	r0, #0
 801dfe4:	d100      	bne.n	801dfe8 <_strtod_l+0x33c>
 801dfe6:	e6b8      	b.n	801dd5a <_strtod_l+0xae>
 801dfe8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dfea:	781b      	ldrb	r3, [r3, #0]
 801dfec:	2b28      	cmp	r3, #40	@ 0x28
 801dfee:	d12c      	bne.n	801e04a <_strtod_l+0x39e>
 801dff0:	49a0      	ldr	r1, [pc, #640]	@ (801e274 <_strtod_l+0x5c8>)
 801dff2:	aa20      	add	r2, sp, #128	@ 0x80
 801dff4:	a81d      	add	r0, sp, #116	@ 0x74
 801dff6:	f002 fe33 	bl	8020c60 <__hexnan>
 801dffa:	2805      	cmp	r0, #5
 801dffc:	d125      	bne.n	801e04a <_strtod_l+0x39e>
 801dffe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e000:	4a9d      	ldr	r2, [pc, #628]	@ (801e278 <_strtod_l+0x5cc>)
 801e002:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e004:	431a      	orrs	r2, r3
 801e006:	0017      	movs	r7, r2
 801e008:	e68b      	b.n	801dd22 <_strtod_l+0x76>
 801e00a:	220a      	movs	r2, #10
 801e00c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e00e:	434a      	muls	r2, r1
 801e010:	18d2      	adds	r2, r2, r3
 801e012:	3a30      	subs	r2, #48	@ 0x30
 801e014:	9210      	str	r2, [sp, #64]	@ 0x40
 801e016:	e7b5      	b.n	801df84 <_strtod_l+0x2d8>
 801e018:	2b6e      	cmp	r3, #110	@ 0x6e
 801e01a:	d0de      	beq.n	801dfda <_strtod_l+0x32e>
 801e01c:	e69d      	b.n	801dd5a <_strtod_l+0xae>
 801e01e:	4997      	ldr	r1, [pc, #604]	@ (801e27c <_strtod_l+0x5d0>)
 801e020:	a81d      	add	r0, sp, #116	@ 0x74
 801e022:	f002 fe09 	bl	8020c38 <__match>
 801e026:	2800      	cmp	r0, #0
 801e028:	d100      	bne.n	801e02c <_strtod_l+0x380>
 801e02a:	e696      	b.n	801dd5a <_strtod_l+0xae>
 801e02c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e02e:	4994      	ldr	r1, [pc, #592]	@ (801e280 <_strtod_l+0x5d4>)
 801e030:	3b01      	subs	r3, #1
 801e032:	a81d      	add	r0, sp, #116	@ 0x74
 801e034:	931d      	str	r3, [sp, #116]	@ 0x74
 801e036:	f002 fdff 	bl	8020c38 <__match>
 801e03a:	2800      	cmp	r0, #0
 801e03c:	d102      	bne.n	801e044 <_strtod_l+0x398>
 801e03e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e040:	3301      	adds	r3, #1
 801e042:	931d      	str	r3, [sp, #116]	@ 0x74
 801e044:	2600      	movs	r6, #0
 801e046:	4f8c      	ldr	r7, [pc, #560]	@ (801e278 <_strtod_l+0x5cc>)
 801e048:	e66b      	b.n	801dd22 <_strtod_l+0x76>
 801e04a:	488e      	ldr	r0, [pc, #568]	@ (801e284 <_strtod_l+0x5d8>)
 801e04c:	f001 fc84 	bl	801f958 <nan>
 801e050:	0006      	movs	r6, r0
 801e052:	000f      	movs	r7, r1
 801e054:	e665      	b.n	801dd22 <_strtod_l+0x76>
 801e056:	9b07      	ldr	r3, [sp, #28]
 801e058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e05a:	1a9b      	subs	r3, r3, r2
 801e05c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e05e:	9b08      	ldr	r3, [sp, #32]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d101      	bne.n	801e068 <_strtod_l+0x3bc>
 801e064:	9b06      	ldr	r3, [sp, #24]
 801e066:	9308      	str	r3, [sp, #32]
 801e068:	9c06      	ldr	r4, [sp, #24]
 801e06a:	2c10      	cmp	r4, #16
 801e06c:	dd00      	ble.n	801e070 <_strtod_l+0x3c4>
 801e06e:	2410      	movs	r4, #16
 801e070:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e072:	f7e5 f9d3 	bl	800341c <__aeabi_ui2d>
 801e076:	9b06      	ldr	r3, [sp, #24]
 801e078:	0006      	movs	r6, r0
 801e07a:	000f      	movs	r7, r1
 801e07c:	2b09      	cmp	r3, #9
 801e07e:	dc13      	bgt.n	801e0a8 <_strtod_l+0x3fc>
 801e080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e082:	2b00      	cmp	r3, #0
 801e084:	d100      	bne.n	801e088 <_strtod_l+0x3dc>
 801e086:	e64c      	b.n	801dd22 <_strtod_l+0x76>
 801e088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e08a:	2b00      	cmp	r3, #0
 801e08c:	dc00      	bgt.n	801e090 <_strtod_l+0x3e4>
 801e08e:	e07e      	b.n	801e18e <_strtod_l+0x4e2>
 801e090:	2b16      	cmp	r3, #22
 801e092:	dc63      	bgt.n	801e15c <_strtod_l+0x4b0>
 801e094:	497c      	ldr	r1, [pc, #496]	@ (801e288 <_strtod_l+0x5dc>)
 801e096:	00db      	lsls	r3, r3, #3
 801e098:	18c9      	adds	r1, r1, r3
 801e09a:	0032      	movs	r2, r6
 801e09c:	6808      	ldr	r0, [r1, #0]
 801e09e:	6849      	ldr	r1, [r1, #4]
 801e0a0:	003b      	movs	r3, r7
 801e0a2:	f7e4 facb 	bl	800263c <__aeabi_dmul>
 801e0a6:	e7d3      	b.n	801e050 <_strtod_l+0x3a4>
 801e0a8:	0022      	movs	r2, r4
 801e0aa:	4b77      	ldr	r3, [pc, #476]	@ (801e288 <_strtod_l+0x5dc>)
 801e0ac:	3a09      	subs	r2, #9
 801e0ae:	00d2      	lsls	r2, r2, #3
 801e0b0:	189b      	adds	r3, r3, r2
 801e0b2:	681a      	ldr	r2, [r3, #0]
 801e0b4:	685b      	ldr	r3, [r3, #4]
 801e0b6:	f7e4 fac1 	bl	800263c <__aeabi_dmul>
 801e0ba:	0006      	movs	r6, r0
 801e0bc:	0028      	movs	r0, r5
 801e0be:	000f      	movs	r7, r1
 801e0c0:	f7e5 f9ac 	bl	800341c <__aeabi_ui2d>
 801e0c4:	000b      	movs	r3, r1
 801e0c6:	0002      	movs	r2, r0
 801e0c8:	0039      	movs	r1, r7
 801e0ca:	0030      	movs	r0, r6
 801e0cc:	f7e3 fb0e 	bl	80016ec <__aeabi_dadd>
 801e0d0:	9b06      	ldr	r3, [sp, #24]
 801e0d2:	0006      	movs	r6, r0
 801e0d4:	000f      	movs	r7, r1
 801e0d6:	2b0f      	cmp	r3, #15
 801e0d8:	ddd2      	ble.n	801e080 <_strtod_l+0x3d4>
 801e0da:	9b06      	ldr	r3, [sp, #24]
 801e0dc:	1b1c      	subs	r4, r3, r4
 801e0de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0e0:	18e4      	adds	r4, r4, r3
 801e0e2:	2c00      	cmp	r4, #0
 801e0e4:	dc00      	bgt.n	801e0e8 <_strtod_l+0x43c>
 801e0e6:	e09b      	b.n	801e220 <_strtod_l+0x574>
 801e0e8:	220f      	movs	r2, #15
 801e0ea:	0023      	movs	r3, r4
 801e0ec:	4013      	ands	r3, r2
 801e0ee:	4214      	tst	r4, r2
 801e0f0:	d00a      	beq.n	801e108 <_strtod_l+0x45c>
 801e0f2:	4965      	ldr	r1, [pc, #404]	@ (801e288 <_strtod_l+0x5dc>)
 801e0f4:	00db      	lsls	r3, r3, #3
 801e0f6:	18c9      	adds	r1, r1, r3
 801e0f8:	0032      	movs	r2, r6
 801e0fa:	6808      	ldr	r0, [r1, #0]
 801e0fc:	6849      	ldr	r1, [r1, #4]
 801e0fe:	003b      	movs	r3, r7
 801e100:	f7e4 fa9c 	bl	800263c <__aeabi_dmul>
 801e104:	0006      	movs	r6, r0
 801e106:	000f      	movs	r7, r1
 801e108:	230f      	movs	r3, #15
 801e10a:	439c      	bics	r4, r3
 801e10c:	d073      	beq.n	801e1f6 <_strtod_l+0x54a>
 801e10e:	3326      	adds	r3, #38	@ 0x26
 801e110:	33ff      	adds	r3, #255	@ 0xff
 801e112:	429c      	cmp	r4, r3
 801e114:	dd4b      	ble.n	801e1ae <_strtod_l+0x502>
 801e116:	2300      	movs	r3, #0
 801e118:	9306      	str	r3, [sp, #24]
 801e11a:	9307      	str	r3, [sp, #28]
 801e11c:	930d      	str	r3, [sp, #52]	@ 0x34
 801e11e:	9308      	str	r3, [sp, #32]
 801e120:	2322      	movs	r3, #34	@ 0x22
 801e122:	2600      	movs	r6, #0
 801e124:	9a05      	ldr	r2, [sp, #20]
 801e126:	4f54      	ldr	r7, [pc, #336]	@ (801e278 <_strtod_l+0x5cc>)
 801e128:	6013      	str	r3, [r2, #0]
 801e12a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e12c:	42b3      	cmp	r3, r6
 801e12e:	d100      	bne.n	801e132 <_strtod_l+0x486>
 801e130:	e5f7      	b.n	801dd22 <_strtod_l+0x76>
 801e132:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e134:	9805      	ldr	r0, [sp, #20]
 801e136:	f002 ff4d 	bl	8020fd4 <_Bfree>
 801e13a:	9908      	ldr	r1, [sp, #32]
 801e13c:	9805      	ldr	r0, [sp, #20]
 801e13e:	f002 ff49 	bl	8020fd4 <_Bfree>
 801e142:	9907      	ldr	r1, [sp, #28]
 801e144:	9805      	ldr	r0, [sp, #20]
 801e146:	f002 ff45 	bl	8020fd4 <_Bfree>
 801e14a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e14c:	9805      	ldr	r0, [sp, #20]
 801e14e:	f002 ff41 	bl	8020fd4 <_Bfree>
 801e152:	9906      	ldr	r1, [sp, #24]
 801e154:	9805      	ldr	r0, [sp, #20]
 801e156:	f002 ff3d 	bl	8020fd4 <_Bfree>
 801e15a:	e5e2      	b.n	801dd22 <_strtod_l+0x76>
 801e15c:	2325      	movs	r3, #37	@ 0x25
 801e15e:	9a06      	ldr	r2, [sp, #24]
 801e160:	1a9b      	subs	r3, r3, r2
 801e162:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e164:	4293      	cmp	r3, r2
 801e166:	dbb8      	blt.n	801e0da <_strtod_l+0x42e>
 801e168:	240f      	movs	r4, #15
 801e16a:	9b06      	ldr	r3, [sp, #24]
 801e16c:	4d46      	ldr	r5, [pc, #280]	@ (801e288 <_strtod_l+0x5dc>)
 801e16e:	1ae4      	subs	r4, r4, r3
 801e170:	00e1      	lsls	r1, r4, #3
 801e172:	1869      	adds	r1, r5, r1
 801e174:	0032      	movs	r2, r6
 801e176:	6808      	ldr	r0, [r1, #0]
 801e178:	6849      	ldr	r1, [r1, #4]
 801e17a:	003b      	movs	r3, r7
 801e17c:	f7e4 fa5e 	bl	800263c <__aeabi_dmul>
 801e180:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e182:	1b1c      	subs	r4, r3, r4
 801e184:	00e4      	lsls	r4, r4, #3
 801e186:	192d      	adds	r5, r5, r4
 801e188:	682a      	ldr	r2, [r5, #0]
 801e18a:	686b      	ldr	r3, [r5, #4]
 801e18c:	e789      	b.n	801e0a2 <_strtod_l+0x3f6>
 801e18e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e190:	3316      	adds	r3, #22
 801e192:	dba2      	blt.n	801e0da <_strtod_l+0x42e>
 801e194:	9907      	ldr	r1, [sp, #28]
 801e196:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e198:	4b3b      	ldr	r3, [pc, #236]	@ (801e288 <_strtod_l+0x5dc>)
 801e19a:	1a52      	subs	r2, r2, r1
 801e19c:	00d2      	lsls	r2, r2, #3
 801e19e:	189b      	adds	r3, r3, r2
 801e1a0:	0030      	movs	r0, r6
 801e1a2:	681a      	ldr	r2, [r3, #0]
 801e1a4:	685b      	ldr	r3, [r3, #4]
 801e1a6:	0039      	movs	r1, r7
 801e1a8:	f7e3 fe04 	bl	8001db4 <__aeabi_ddiv>
 801e1ac:	e750      	b.n	801e050 <_strtod_l+0x3a4>
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	0030      	movs	r0, r6
 801e1b2:	0039      	movs	r1, r7
 801e1b4:	4d35      	ldr	r5, [pc, #212]	@ (801e28c <_strtod_l+0x5e0>)
 801e1b6:	1124      	asrs	r4, r4, #4
 801e1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1ba:	2c01      	cmp	r4, #1
 801e1bc:	dc1e      	bgt.n	801e1fc <_strtod_l+0x550>
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d001      	beq.n	801e1c6 <_strtod_l+0x51a>
 801e1c2:	0006      	movs	r6, r0
 801e1c4:	000f      	movs	r7, r1
 801e1c6:	4b32      	ldr	r3, [pc, #200]	@ (801e290 <_strtod_l+0x5e4>)
 801e1c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e1ca:	18ff      	adds	r7, r7, r3
 801e1cc:	4b2f      	ldr	r3, [pc, #188]	@ (801e28c <_strtod_l+0x5e0>)
 801e1ce:	00d5      	lsls	r5, r2, #3
 801e1d0:	195d      	adds	r5, r3, r5
 801e1d2:	0032      	movs	r2, r6
 801e1d4:	6828      	ldr	r0, [r5, #0]
 801e1d6:	6869      	ldr	r1, [r5, #4]
 801e1d8:	003b      	movs	r3, r7
 801e1da:	f7e4 fa2f 	bl	800263c <__aeabi_dmul>
 801e1de:	4b26      	ldr	r3, [pc, #152]	@ (801e278 <_strtod_l+0x5cc>)
 801e1e0:	4a2c      	ldr	r2, [pc, #176]	@ (801e294 <_strtod_l+0x5e8>)
 801e1e2:	0006      	movs	r6, r0
 801e1e4:	400b      	ands	r3, r1
 801e1e6:	4293      	cmp	r3, r2
 801e1e8:	d895      	bhi.n	801e116 <_strtod_l+0x46a>
 801e1ea:	4a2b      	ldr	r2, [pc, #172]	@ (801e298 <_strtod_l+0x5ec>)
 801e1ec:	4293      	cmp	r3, r2
 801e1ee:	d913      	bls.n	801e218 <_strtod_l+0x56c>
 801e1f0:	2601      	movs	r6, #1
 801e1f2:	4f2a      	ldr	r7, [pc, #168]	@ (801e29c <_strtod_l+0x5f0>)
 801e1f4:	4276      	negs	r6, r6
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1fa:	e086      	b.n	801e30a <_strtod_l+0x65e>
 801e1fc:	2201      	movs	r2, #1
 801e1fe:	4214      	tst	r4, r2
 801e200:	d004      	beq.n	801e20c <_strtod_l+0x560>
 801e202:	682a      	ldr	r2, [r5, #0]
 801e204:	686b      	ldr	r3, [r5, #4]
 801e206:	f7e4 fa19 	bl	800263c <__aeabi_dmul>
 801e20a:	2301      	movs	r3, #1
 801e20c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e20e:	1064      	asrs	r4, r4, #1
 801e210:	3201      	adds	r2, #1
 801e212:	9209      	str	r2, [sp, #36]	@ 0x24
 801e214:	3508      	adds	r5, #8
 801e216:	e7d0      	b.n	801e1ba <_strtod_l+0x50e>
 801e218:	23d4      	movs	r3, #212	@ 0xd4
 801e21a:	049b      	lsls	r3, r3, #18
 801e21c:	18cf      	adds	r7, r1, r3
 801e21e:	e7ea      	b.n	801e1f6 <_strtod_l+0x54a>
 801e220:	2c00      	cmp	r4, #0
 801e222:	d0e8      	beq.n	801e1f6 <_strtod_l+0x54a>
 801e224:	4264      	negs	r4, r4
 801e226:	230f      	movs	r3, #15
 801e228:	0022      	movs	r2, r4
 801e22a:	401a      	ands	r2, r3
 801e22c:	421c      	tst	r4, r3
 801e22e:	d00a      	beq.n	801e246 <_strtod_l+0x59a>
 801e230:	4b15      	ldr	r3, [pc, #84]	@ (801e288 <_strtod_l+0x5dc>)
 801e232:	00d2      	lsls	r2, r2, #3
 801e234:	189b      	adds	r3, r3, r2
 801e236:	0030      	movs	r0, r6
 801e238:	681a      	ldr	r2, [r3, #0]
 801e23a:	685b      	ldr	r3, [r3, #4]
 801e23c:	0039      	movs	r1, r7
 801e23e:	f7e3 fdb9 	bl	8001db4 <__aeabi_ddiv>
 801e242:	0006      	movs	r6, r0
 801e244:	000f      	movs	r7, r1
 801e246:	1124      	asrs	r4, r4, #4
 801e248:	d0d5      	beq.n	801e1f6 <_strtod_l+0x54a>
 801e24a:	2c1f      	cmp	r4, #31
 801e24c:	dd28      	ble.n	801e2a0 <_strtod_l+0x5f4>
 801e24e:	2300      	movs	r3, #0
 801e250:	9306      	str	r3, [sp, #24]
 801e252:	9307      	str	r3, [sp, #28]
 801e254:	930d      	str	r3, [sp, #52]	@ 0x34
 801e256:	9308      	str	r3, [sp, #32]
 801e258:	2322      	movs	r3, #34	@ 0x22
 801e25a:	9a05      	ldr	r2, [sp, #20]
 801e25c:	2600      	movs	r6, #0
 801e25e:	6013      	str	r3, [r2, #0]
 801e260:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e262:	2700      	movs	r7, #0
 801e264:	2b00      	cmp	r3, #0
 801e266:	d000      	beq.n	801e26a <_strtod_l+0x5be>
 801e268:	e763      	b.n	801e132 <_strtod_l+0x486>
 801e26a:	e55a      	b.n	801dd22 <_strtod_l+0x76>
 801e26c:	00004e1f 	.word	0x00004e1f
 801e270:	08024f7e 	.word	0x08024f7e
 801e274:	08024e20 	.word	0x08024e20
 801e278:	7ff00000 	.word	0x7ff00000
 801e27c:	08024f76 	.word	0x08024f76
 801e280:	08024fb0 	.word	0x08024fb0
 801e284:	0802523c 	.word	0x0802523c
 801e288:	08025128 	.word	0x08025128
 801e28c:	08025100 	.word	0x08025100
 801e290:	fcb00000 	.word	0xfcb00000
 801e294:	7ca00000 	.word	0x7ca00000
 801e298:	7c900000 	.word	0x7c900000
 801e29c:	7fefffff 	.word	0x7fefffff
 801e2a0:	2310      	movs	r3, #16
 801e2a2:	0022      	movs	r2, r4
 801e2a4:	401a      	ands	r2, r3
 801e2a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2a8:	421c      	tst	r4, r3
 801e2aa:	d001      	beq.n	801e2b0 <_strtod_l+0x604>
 801e2ac:	335a      	adds	r3, #90	@ 0x5a
 801e2ae:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2b0:	0030      	movs	r0, r6
 801e2b2:	0039      	movs	r1, r7
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	4dbf      	ldr	r5, [pc, #764]	@ (801e5b4 <_strtod_l+0x908>)
 801e2b8:	2201      	movs	r2, #1
 801e2ba:	4214      	tst	r4, r2
 801e2bc:	d004      	beq.n	801e2c8 <_strtod_l+0x61c>
 801e2be:	682a      	ldr	r2, [r5, #0]
 801e2c0:	686b      	ldr	r3, [r5, #4]
 801e2c2:	f7e4 f9bb 	bl	800263c <__aeabi_dmul>
 801e2c6:	2301      	movs	r3, #1
 801e2c8:	1064      	asrs	r4, r4, #1
 801e2ca:	3508      	adds	r5, #8
 801e2cc:	2c00      	cmp	r4, #0
 801e2ce:	d1f3      	bne.n	801e2b8 <_strtod_l+0x60c>
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d001      	beq.n	801e2d8 <_strtod_l+0x62c>
 801e2d4:	0006      	movs	r6, r0
 801e2d6:	000f      	movs	r7, r1
 801e2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d00d      	beq.n	801e2fa <_strtod_l+0x64e>
 801e2de:	236b      	movs	r3, #107	@ 0x6b
 801e2e0:	007a      	lsls	r2, r7, #1
 801e2e2:	0d52      	lsrs	r2, r2, #21
 801e2e4:	0039      	movs	r1, r7
 801e2e6:	1a9b      	subs	r3, r3, r2
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	dd06      	ble.n	801e2fa <_strtod_l+0x64e>
 801e2ec:	2b1f      	cmp	r3, #31
 801e2ee:	dd5a      	ble.n	801e3a6 <_strtod_l+0x6fa>
 801e2f0:	2600      	movs	r6, #0
 801e2f2:	2b34      	cmp	r3, #52	@ 0x34
 801e2f4:	dd50      	ble.n	801e398 <_strtod_l+0x6ec>
 801e2f6:	27dc      	movs	r7, #220	@ 0xdc
 801e2f8:	04bf      	lsls	r7, r7, #18
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	2300      	movs	r3, #0
 801e2fe:	0030      	movs	r0, r6
 801e300:	0039      	movs	r1, r7
 801e302:	f7e2 f8d5 	bl	80004b0 <__aeabi_dcmpeq>
 801e306:	2800      	cmp	r0, #0
 801e308:	d1a1      	bne.n	801e24e <_strtod_l+0x5a2>
 801e30a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e30c:	9a08      	ldr	r2, [sp, #32]
 801e30e:	9300      	str	r3, [sp, #0]
 801e310:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e312:	9b06      	ldr	r3, [sp, #24]
 801e314:	9805      	ldr	r0, [sp, #20]
 801e316:	f002 fec5 	bl	80210a4 <__s2b>
 801e31a:	900d      	str	r0, [sp, #52]	@ 0x34
 801e31c:	2800      	cmp	r0, #0
 801e31e:	d100      	bne.n	801e322 <_strtod_l+0x676>
 801e320:	e6f9      	b.n	801e116 <_strtod_l+0x46a>
 801e322:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e324:	9907      	ldr	r1, [sp, #28]
 801e326:	17da      	asrs	r2, r3, #31
 801e328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e32a:	1a5b      	subs	r3, r3, r1
 801e32c:	401a      	ands	r2, r3
 801e32e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e330:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e332:	43db      	mvns	r3, r3
 801e334:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e336:	17db      	asrs	r3, r3, #31
 801e338:	401a      	ands	r2, r3
 801e33a:	2300      	movs	r3, #0
 801e33c:	921a      	str	r2, [sp, #104]	@ 0x68
 801e33e:	9306      	str	r3, [sp, #24]
 801e340:	9307      	str	r3, [sp, #28]
 801e342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e344:	9805      	ldr	r0, [sp, #20]
 801e346:	6859      	ldr	r1, [r3, #4]
 801e348:	f002 fe00 	bl	8020f4c <_Balloc>
 801e34c:	9008      	str	r0, [sp, #32]
 801e34e:	2800      	cmp	r0, #0
 801e350:	d100      	bne.n	801e354 <_strtod_l+0x6a8>
 801e352:	e6e5      	b.n	801e120 <_strtod_l+0x474>
 801e354:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e356:	300c      	adds	r0, #12
 801e358:	0019      	movs	r1, r3
 801e35a:	691a      	ldr	r2, [r3, #16]
 801e35c:	310c      	adds	r1, #12
 801e35e:	3202      	adds	r2, #2
 801e360:	0092      	lsls	r2, r2, #2
 801e362:	f001 faef 	bl	801f944 <memcpy>
 801e366:	ab20      	add	r3, sp, #128	@ 0x80
 801e368:	9301      	str	r3, [sp, #4]
 801e36a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e36c:	9300      	str	r3, [sp, #0]
 801e36e:	0032      	movs	r2, r6
 801e370:	003b      	movs	r3, r7
 801e372:	9805      	ldr	r0, [sp, #20]
 801e374:	9610      	str	r6, [sp, #64]	@ 0x40
 801e376:	9711      	str	r7, [sp, #68]	@ 0x44
 801e378:	f003 f9e4 	bl	8021744 <__d2b>
 801e37c:	901e      	str	r0, [sp, #120]	@ 0x78
 801e37e:	2800      	cmp	r0, #0
 801e380:	d100      	bne.n	801e384 <_strtod_l+0x6d8>
 801e382:	e6cd      	b.n	801e120 <_strtod_l+0x474>
 801e384:	2101      	movs	r1, #1
 801e386:	9805      	ldr	r0, [sp, #20]
 801e388:	f002 ff28 	bl	80211dc <__i2b>
 801e38c:	9007      	str	r0, [sp, #28]
 801e38e:	2800      	cmp	r0, #0
 801e390:	d10e      	bne.n	801e3b0 <_strtod_l+0x704>
 801e392:	2300      	movs	r3, #0
 801e394:	9307      	str	r3, [sp, #28]
 801e396:	e6c3      	b.n	801e120 <_strtod_l+0x474>
 801e398:	234b      	movs	r3, #75	@ 0x4b
 801e39a:	1a9a      	subs	r2, r3, r2
 801e39c:	3b4c      	subs	r3, #76	@ 0x4c
 801e39e:	4093      	lsls	r3, r2
 801e3a0:	4019      	ands	r1, r3
 801e3a2:	000f      	movs	r7, r1
 801e3a4:	e7a9      	b.n	801e2fa <_strtod_l+0x64e>
 801e3a6:	2201      	movs	r2, #1
 801e3a8:	4252      	negs	r2, r2
 801e3aa:	409a      	lsls	r2, r3
 801e3ac:	4016      	ands	r6, r2
 801e3ae:	e7a4      	b.n	801e2fa <_strtod_l+0x64e>
 801e3b0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e3b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e3b4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801e3b6:	1ad4      	subs	r4, r2, r3
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	db01      	blt.n	801e3c0 <_strtod_l+0x714>
 801e3bc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e3be:	195d      	adds	r5, r3, r5
 801e3c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e3c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e3c4:	1a5b      	subs	r3, r3, r1
 801e3c6:	2136      	movs	r1, #54	@ 0x36
 801e3c8:	189b      	adds	r3, r3, r2
 801e3ca:	1a8a      	subs	r2, r1, r2
 801e3cc:	497a      	ldr	r1, [pc, #488]	@ (801e5b8 <_strtod_l+0x90c>)
 801e3ce:	2001      	movs	r0, #1
 801e3d0:	468c      	mov	ip, r1
 801e3d2:	2100      	movs	r1, #0
 801e3d4:	3b01      	subs	r3, #1
 801e3d6:	9116      	str	r1, [sp, #88]	@ 0x58
 801e3d8:	9014      	str	r0, [sp, #80]	@ 0x50
 801e3da:	4563      	cmp	r3, ip
 801e3dc:	da06      	bge.n	801e3ec <_strtod_l+0x740>
 801e3de:	4661      	mov	r1, ip
 801e3e0:	1ac9      	subs	r1, r1, r3
 801e3e2:	1a52      	subs	r2, r2, r1
 801e3e4:	291f      	cmp	r1, #31
 801e3e6:	dc3f      	bgt.n	801e468 <_strtod_l+0x7bc>
 801e3e8:	4088      	lsls	r0, r1
 801e3ea:	9014      	str	r0, [sp, #80]	@ 0x50
 801e3ec:	18ab      	adds	r3, r5, r2
 801e3ee:	930e      	str	r3, [sp, #56]	@ 0x38
 801e3f0:	18a4      	adds	r4, r4, r2
 801e3f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e3f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e3f6:	191c      	adds	r4, r3, r4
 801e3f8:	002b      	movs	r3, r5
 801e3fa:	4295      	cmp	r5, r2
 801e3fc:	dd00      	ble.n	801e400 <_strtod_l+0x754>
 801e3fe:	0013      	movs	r3, r2
 801e400:	42a3      	cmp	r3, r4
 801e402:	dd00      	ble.n	801e406 <_strtod_l+0x75a>
 801e404:	0023      	movs	r3, r4
 801e406:	2b00      	cmp	r3, #0
 801e408:	dd04      	ble.n	801e414 <_strtod_l+0x768>
 801e40a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e40c:	1ae4      	subs	r4, r4, r3
 801e40e:	1ad2      	subs	r2, r2, r3
 801e410:	920e      	str	r2, [sp, #56]	@ 0x38
 801e412:	1aed      	subs	r5, r5, r3
 801e414:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e416:	2b00      	cmp	r3, #0
 801e418:	dd16      	ble.n	801e448 <_strtod_l+0x79c>
 801e41a:	001a      	movs	r2, r3
 801e41c:	9907      	ldr	r1, [sp, #28]
 801e41e:	9805      	ldr	r0, [sp, #20]
 801e420:	f002 ffa6 	bl	8021370 <__pow5mult>
 801e424:	9007      	str	r0, [sp, #28]
 801e426:	2800      	cmp	r0, #0
 801e428:	d0b3      	beq.n	801e392 <_strtod_l+0x6e6>
 801e42a:	0001      	movs	r1, r0
 801e42c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e42e:	9805      	ldr	r0, [sp, #20]
 801e430:	f002 feec 	bl	802120c <__multiply>
 801e434:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e436:	2800      	cmp	r0, #0
 801e438:	d100      	bne.n	801e43c <_strtod_l+0x790>
 801e43a:	e671      	b.n	801e120 <_strtod_l+0x474>
 801e43c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e43e:	9805      	ldr	r0, [sp, #20]
 801e440:	f002 fdc8 	bl	8020fd4 <_Bfree>
 801e444:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e446:	931e      	str	r3, [sp, #120]	@ 0x78
 801e448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	dc12      	bgt.n	801e474 <_strtod_l+0x7c8>
 801e44e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e450:	2b00      	cmp	r3, #0
 801e452:	dd18      	ble.n	801e486 <_strtod_l+0x7da>
 801e454:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e456:	9908      	ldr	r1, [sp, #32]
 801e458:	9805      	ldr	r0, [sp, #20]
 801e45a:	f002 ff89 	bl	8021370 <__pow5mult>
 801e45e:	9008      	str	r0, [sp, #32]
 801e460:	2800      	cmp	r0, #0
 801e462:	d110      	bne.n	801e486 <_strtod_l+0x7da>
 801e464:	2300      	movs	r3, #0
 801e466:	e65a      	b.n	801e11e <_strtod_l+0x472>
 801e468:	4954      	ldr	r1, [pc, #336]	@ (801e5bc <_strtod_l+0x910>)
 801e46a:	1acb      	subs	r3, r1, r3
 801e46c:	0001      	movs	r1, r0
 801e46e:	4099      	lsls	r1, r3
 801e470:	9116      	str	r1, [sp, #88]	@ 0x58
 801e472:	e7ba      	b.n	801e3ea <_strtod_l+0x73e>
 801e474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e476:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e478:	9805      	ldr	r0, [sp, #20]
 801e47a:	f002 ffd5 	bl	8021428 <__lshift>
 801e47e:	901e      	str	r0, [sp, #120]	@ 0x78
 801e480:	2800      	cmp	r0, #0
 801e482:	d1e4      	bne.n	801e44e <_strtod_l+0x7a2>
 801e484:	e64c      	b.n	801e120 <_strtod_l+0x474>
 801e486:	2c00      	cmp	r4, #0
 801e488:	dd07      	ble.n	801e49a <_strtod_l+0x7ee>
 801e48a:	0022      	movs	r2, r4
 801e48c:	9908      	ldr	r1, [sp, #32]
 801e48e:	9805      	ldr	r0, [sp, #20]
 801e490:	f002 ffca 	bl	8021428 <__lshift>
 801e494:	9008      	str	r0, [sp, #32]
 801e496:	2800      	cmp	r0, #0
 801e498:	d0e4      	beq.n	801e464 <_strtod_l+0x7b8>
 801e49a:	2d00      	cmp	r5, #0
 801e49c:	dd08      	ble.n	801e4b0 <_strtod_l+0x804>
 801e49e:	002a      	movs	r2, r5
 801e4a0:	9907      	ldr	r1, [sp, #28]
 801e4a2:	9805      	ldr	r0, [sp, #20]
 801e4a4:	f002 ffc0 	bl	8021428 <__lshift>
 801e4a8:	9007      	str	r0, [sp, #28]
 801e4aa:	2800      	cmp	r0, #0
 801e4ac:	d100      	bne.n	801e4b0 <_strtod_l+0x804>
 801e4ae:	e637      	b.n	801e120 <_strtod_l+0x474>
 801e4b0:	9a08      	ldr	r2, [sp, #32]
 801e4b2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e4b4:	9805      	ldr	r0, [sp, #20]
 801e4b6:	f003 f83f 	bl	8021538 <__mdiff>
 801e4ba:	9006      	str	r0, [sp, #24]
 801e4bc:	2800      	cmp	r0, #0
 801e4be:	d100      	bne.n	801e4c2 <_strtod_l+0x816>
 801e4c0:	e62e      	b.n	801e120 <_strtod_l+0x474>
 801e4c2:	68c3      	ldr	r3, [r0, #12]
 801e4c4:	9907      	ldr	r1, [sp, #28]
 801e4c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	60c3      	str	r3, [r0, #12]
 801e4cc:	f003 f818 	bl	8021500 <__mcmp>
 801e4d0:	2800      	cmp	r0, #0
 801e4d2:	da3b      	bge.n	801e54c <_strtod_l+0x8a0>
 801e4d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e4d6:	4333      	orrs	r3, r6
 801e4d8:	d167      	bne.n	801e5aa <_strtod_l+0x8fe>
 801e4da:	033b      	lsls	r3, r7, #12
 801e4dc:	d165      	bne.n	801e5aa <_strtod_l+0x8fe>
 801e4de:	22d6      	movs	r2, #214	@ 0xd6
 801e4e0:	4b37      	ldr	r3, [pc, #220]	@ (801e5c0 <_strtod_l+0x914>)
 801e4e2:	04d2      	lsls	r2, r2, #19
 801e4e4:	403b      	ands	r3, r7
 801e4e6:	4293      	cmp	r3, r2
 801e4e8:	d95f      	bls.n	801e5aa <_strtod_l+0x8fe>
 801e4ea:	9b06      	ldr	r3, [sp, #24]
 801e4ec:	695b      	ldr	r3, [r3, #20]
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d103      	bne.n	801e4fa <_strtod_l+0x84e>
 801e4f2:	9b06      	ldr	r3, [sp, #24]
 801e4f4:	691b      	ldr	r3, [r3, #16]
 801e4f6:	2b01      	cmp	r3, #1
 801e4f8:	dd57      	ble.n	801e5aa <_strtod_l+0x8fe>
 801e4fa:	9906      	ldr	r1, [sp, #24]
 801e4fc:	2201      	movs	r2, #1
 801e4fe:	9805      	ldr	r0, [sp, #20]
 801e500:	f002 ff92 	bl	8021428 <__lshift>
 801e504:	9907      	ldr	r1, [sp, #28]
 801e506:	9006      	str	r0, [sp, #24]
 801e508:	f002 fffa 	bl	8021500 <__mcmp>
 801e50c:	2800      	cmp	r0, #0
 801e50e:	dd4c      	ble.n	801e5aa <_strtod_l+0x8fe>
 801e510:	4b2b      	ldr	r3, [pc, #172]	@ (801e5c0 <_strtod_l+0x914>)
 801e512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e514:	403b      	ands	r3, r7
 801e516:	2a00      	cmp	r2, #0
 801e518:	d074      	beq.n	801e604 <_strtod_l+0x958>
 801e51a:	22d6      	movs	r2, #214	@ 0xd6
 801e51c:	04d2      	lsls	r2, r2, #19
 801e51e:	4293      	cmp	r3, r2
 801e520:	d870      	bhi.n	801e604 <_strtod_l+0x958>
 801e522:	22dc      	movs	r2, #220	@ 0xdc
 801e524:	0492      	lsls	r2, r2, #18
 801e526:	4293      	cmp	r3, r2
 801e528:	d800      	bhi.n	801e52c <_strtod_l+0x880>
 801e52a:	e695      	b.n	801e258 <_strtod_l+0x5ac>
 801e52c:	0030      	movs	r0, r6
 801e52e:	0039      	movs	r1, r7
 801e530:	4b24      	ldr	r3, [pc, #144]	@ (801e5c4 <_strtod_l+0x918>)
 801e532:	2200      	movs	r2, #0
 801e534:	f7e4 f882 	bl	800263c <__aeabi_dmul>
 801e538:	4b21      	ldr	r3, [pc, #132]	@ (801e5c0 <_strtod_l+0x914>)
 801e53a:	0006      	movs	r6, r0
 801e53c:	000f      	movs	r7, r1
 801e53e:	420b      	tst	r3, r1
 801e540:	d000      	beq.n	801e544 <_strtod_l+0x898>
 801e542:	e5f6      	b.n	801e132 <_strtod_l+0x486>
 801e544:	2322      	movs	r3, #34	@ 0x22
 801e546:	9a05      	ldr	r2, [sp, #20]
 801e548:	6013      	str	r3, [r2, #0]
 801e54a:	e5f2      	b.n	801e132 <_strtod_l+0x486>
 801e54c:	970e      	str	r7, [sp, #56]	@ 0x38
 801e54e:	2800      	cmp	r0, #0
 801e550:	d175      	bne.n	801e63e <_strtod_l+0x992>
 801e552:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e554:	033b      	lsls	r3, r7, #12
 801e556:	0b1b      	lsrs	r3, r3, #12
 801e558:	2a00      	cmp	r2, #0
 801e55a:	d039      	beq.n	801e5d0 <_strtod_l+0x924>
 801e55c:	4a1a      	ldr	r2, [pc, #104]	@ (801e5c8 <_strtod_l+0x91c>)
 801e55e:	4293      	cmp	r3, r2
 801e560:	d138      	bne.n	801e5d4 <_strtod_l+0x928>
 801e562:	2101      	movs	r1, #1
 801e564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e566:	4249      	negs	r1, r1
 801e568:	0032      	movs	r2, r6
 801e56a:	0008      	movs	r0, r1
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	d00b      	beq.n	801e588 <_strtod_l+0x8dc>
 801e570:	24d4      	movs	r4, #212	@ 0xd4
 801e572:	4b13      	ldr	r3, [pc, #76]	@ (801e5c0 <_strtod_l+0x914>)
 801e574:	0008      	movs	r0, r1
 801e576:	403b      	ands	r3, r7
 801e578:	04e4      	lsls	r4, r4, #19
 801e57a:	42a3      	cmp	r3, r4
 801e57c:	d804      	bhi.n	801e588 <_strtod_l+0x8dc>
 801e57e:	306c      	adds	r0, #108	@ 0x6c
 801e580:	0d1b      	lsrs	r3, r3, #20
 801e582:	1ac3      	subs	r3, r0, r3
 801e584:	4099      	lsls	r1, r3
 801e586:	0008      	movs	r0, r1
 801e588:	4282      	cmp	r2, r0
 801e58a:	d123      	bne.n	801e5d4 <_strtod_l+0x928>
 801e58c:	4b0f      	ldr	r3, [pc, #60]	@ (801e5cc <_strtod_l+0x920>)
 801e58e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e590:	4299      	cmp	r1, r3
 801e592:	d102      	bne.n	801e59a <_strtod_l+0x8ee>
 801e594:	3201      	adds	r2, #1
 801e596:	d100      	bne.n	801e59a <_strtod_l+0x8ee>
 801e598:	e5c2      	b.n	801e120 <_strtod_l+0x474>
 801e59a:	4b09      	ldr	r3, [pc, #36]	@ (801e5c0 <_strtod_l+0x914>)
 801e59c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e59e:	2600      	movs	r6, #0
 801e5a0:	401a      	ands	r2, r3
 801e5a2:	0013      	movs	r3, r2
 801e5a4:	2280      	movs	r2, #128	@ 0x80
 801e5a6:	0352      	lsls	r2, r2, #13
 801e5a8:	189f      	adds	r7, r3, r2
 801e5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d1bd      	bne.n	801e52c <_strtod_l+0x880>
 801e5b0:	e5bf      	b.n	801e132 <_strtod_l+0x486>
 801e5b2:	46c0      	nop			@ (mov r8, r8)
 801e5b4:	08024e48 	.word	0x08024e48
 801e5b8:	fffffc02 	.word	0xfffffc02
 801e5bc:	fffffbe2 	.word	0xfffffbe2
 801e5c0:	7ff00000 	.word	0x7ff00000
 801e5c4:	39500000 	.word	0x39500000
 801e5c8:	000fffff 	.word	0x000fffff
 801e5cc:	7fefffff 	.word	0x7fefffff
 801e5d0:	4333      	orrs	r3, r6
 801e5d2:	d09d      	beq.n	801e510 <_strtod_l+0x864>
 801e5d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	d01c      	beq.n	801e614 <_strtod_l+0x968>
 801e5da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e5de:	4213      	tst	r3, r2
 801e5e0:	d0e3      	beq.n	801e5aa <_strtod_l+0x8fe>
 801e5e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e5e4:	0030      	movs	r0, r6
 801e5e6:	0039      	movs	r1, r7
 801e5e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d016      	beq.n	801e61c <_strtod_l+0x970>
 801e5ee:	f7ff fb45 	bl	801dc7c <sulp>
 801e5f2:	0002      	movs	r2, r0
 801e5f4:	000b      	movs	r3, r1
 801e5f6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e5f8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e5fa:	f7e3 f877 	bl	80016ec <__aeabi_dadd>
 801e5fe:	0006      	movs	r6, r0
 801e600:	000f      	movs	r7, r1
 801e602:	e7d2      	b.n	801e5aa <_strtod_l+0x8fe>
 801e604:	2601      	movs	r6, #1
 801e606:	4a92      	ldr	r2, [pc, #584]	@ (801e850 <_strtod_l+0xba4>)
 801e608:	4276      	negs	r6, r6
 801e60a:	189b      	adds	r3, r3, r2
 801e60c:	4a91      	ldr	r2, [pc, #580]	@ (801e854 <_strtod_l+0xba8>)
 801e60e:	431a      	orrs	r2, r3
 801e610:	0017      	movs	r7, r2
 801e612:	e7ca      	b.n	801e5aa <_strtod_l+0x8fe>
 801e614:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e616:	4233      	tst	r3, r6
 801e618:	d0c7      	beq.n	801e5aa <_strtod_l+0x8fe>
 801e61a:	e7e2      	b.n	801e5e2 <_strtod_l+0x936>
 801e61c:	f7ff fb2e 	bl	801dc7c <sulp>
 801e620:	0002      	movs	r2, r0
 801e622:	000b      	movs	r3, r1
 801e624:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e626:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e628:	f7e4 fad0 	bl	8002bcc <__aeabi_dsub>
 801e62c:	2200      	movs	r2, #0
 801e62e:	2300      	movs	r3, #0
 801e630:	0006      	movs	r6, r0
 801e632:	000f      	movs	r7, r1
 801e634:	f7e1 ff3c 	bl	80004b0 <__aeabi_dcmpeq>
 801e638:	2800      	cmp	r0, #0
 801e63a:	d0b6      	beq.n	801e5aa <_strtod_l+0x8fe>
 801e63c:	e60c      	b.n	801e258 <_strtod_l+0x5ac>
 801e63e:	9907      	ldr	r1, [sp, #28]
 801e640:	9806      	ldr	r0, [sp, #24]
 801e642:	f003 f8df 	bl	8021804 <__ratio>
 801e646:	2380      	movs	r3, #128	@ 0x80
 801e648:	2200      	movs	r2, #0
 801e64a:	05db      	lsls	r3, r3, #23
 801e64c:	0004      	movs	r4, r0
 801e64e:	000d      	movs	r5, r1
 801e650:	f7e1 ff3e 	bl	80004d0 <__aeabi_dcmple>
 801e654:	2800      	cmp	r0, #0
 801e656:	d06c      	beq.n	801e732 <_strtod_l+0xa86>
 801e658:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d177      	bne.n	801e74e <_strtod_l+0xaa2>
 801e65e:	2e00      	cmp	r6, #0
 801e660:	d157      	bne.n	801e712 <_strtod_l+0xa66>
 801e662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e664:	031b      	lsls	r3, r3, #12
 801e666:	d15a      	bne.n	801e71e <_strtod_l+0xa72>
 801e668:	2200      	movs	r2, #0
 801e66a:	0020      	movs	r0, r4
 801e66c:	0029      	movs	r1, r5
 801e66e:	4b7a      	ldr	r3, [pc, #488]	@ (801e858 <_strtod_l+0xbac>)
 801e670:	f7e1 ff24 	bl	80004bc <__aeabi_dcmplt>
 801e674:	2800      	cmp	r0, #0
 801e676:	d159      	bne.n	801e72c <_strtod_l+0xa80>
 801e678:	0020      	movs	r0, r4
 801e67a:	0029      	movs	r1, r5
 801e67c:	2200      	movs	r2, #0
 801e67e:	4b77      	ldr	r3, [pc, #476]	@ (801e85c <_strtod_l+0xbb0>)
 801e680:	f7e3 ffdc 	bl	800263c <__aeabi_dmul>
 801e684:	0004      	movs	r4, r0
 801e686:	000d      	movs	r5, r1
 801e688:	2380      	movs	r3, #128	@ 0x80
 801e68a:	061b      	lsls	r3, r3, #24
 801e68c:	18eb      	adds	r3, r5, r3
 801e68e:	940a      	str	r4, [sp, #40]	@ 0x28
 801e690:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e692:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e694:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e696:	9214      	str	r2, [sp, #80]	@ 0x50
 801e698:	9315      	str	r3, [sp, #84]	@ 0x54
 801e69a:	4a71      	ldr	r2, [pc, #452]	@ (801e860 <_strtod_l+0xbb4>)
 801e69c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e69e:	4013      	ands	r3, r2
 801e6a0:	9316      	str	r3, [sp, #88]	@ 0x58
 801e6a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e6a4:	4b6f      	ldr	r3, [pc, #444]	@ (801e864 <_strtod_l+0xbb8>)
 801e6a6:	429a      	cmp	r2, r3
 801e6a8:	d000      	beq.n	801e6ac <_strtod_l+0xa00>
 801e6aa:	e087      	b.n	801e7bc <_strtod_l+0xb10>
 801e6ac:	4a6e      	ldr	r2, [pc, #440]	@ (801e868 <_strtod_l+0xbbc>)
 801e6ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6b0:	4694      	mov	ip, r2
 801e6b2:	4463      	add	r3, ip
 801e6b4:	001f      	movs	r7, r3
 801e6b6:	0030      	movs	r0, r6
 801e6b8:	0019      	movs	r1, r3
 801e6ba:	f002 ffd7 	bl	802166c <__ulp>
 801e6be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e6c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6c2:	f7e3 ffbb 	bl	800263c <__aeabi_dmul>
 801e6c6:	0032      	movs	r2, r6
 801e6c8:	003b      	movs	r3, r7
 801e6ca:	f7e3 f80f 	bl	80016ec <__aeabi_dadd>
 801e6ce:	4a64      	ldr	r2, [pc, #400]	@ (801e860 <_strtod_l+0xbb4>)
 801e6d0:	4b66      	ldr	r3, [pc, #408]	@ (801e86c <_strtod_l+0xbc0>)
 801e6d2:	0006      	movs	r6, r0
 801e6d4:	400a      	ands	r2, r1
 801e6d6:	429a      	cmp	r2, r3
 801e6d8:	d940      	bls.n	801e75c <_strtod_l+0xab0>
 801e6da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e6dc:	4a64      	ldr	r2, [pc, #400]	@ (801e870 <_strtod_l+0xbc4>)
 801e6de:	4293      	cmp	r3, r2
 801e6e0:	d103      	bne.n	801e6ea <_strtod_l+0xa3e>
 801e6e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e6e4:	3301      	adds	r3, #1
 801e6e6:	d100      	bne.n	801e6ea <_strtod_l+0xa3e>
 801e6e8:	e51a      	b.n	801e120 <_strtod_l+0x474>
 801e6ea:	2601      	movs	r6, #1
 801e6ec:	4f60      	ldr	r7, [pc, #384]	@ (801e870 <_strtod_l+0xbc4>)
 801e6ee:	4276      	negs	r6, r6
 801e6f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e6f2:	9805      	ldr	r0, [sp, #20]
 801e6f4:	f002 fc6e 	bl	8020fd4 <_Bfree>
 801e6f8:	9908      	ldr	r1, [sp, #32]
 801e6fa:	9805      	ldr	r0, [sp, #20]
 801e6fc:	f002 fc6a 	bl	8020fd4 <_Bfree>
 801e700:	9907      	ldr	r1, [sp, #28]
 801e702:	9805      	ldr	r0, [sp, #20]
 801e704:	f002 fc66 	bl	8020fd4 <_Bfree>
 801e708:	9906      	ldr	r1, [sp, #24]
 801e70a:	9805      	ldr	r0, [sp, #20]
 801e70c:	f002 fc62 	bl	8020fd4 <_Bfree>
 801e710:	e617      	b.n	801e342 <_strtod_l+0x696>
 801e712:	2e01      	cmp	r6, #1
 801e714:	d103      	bne.n	801e71e <_strtod_l+0xa72>
 801e716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d100      	bne.n	801e71e <_strtod_l+0xa72>
 801e71c:	e59c      	b.n	801e258 <_strtod_l+0x5ac>
 801e71e:	2300      	movs	r3, #0
 801e720:	4c54      	ldr	r4, [pc, #336]	@ (801e874 <_strtod_l+0xbc8>)
 801e722:	4d4d      	ldr	r5, [pc, #308]	@ (801e858 <_strtod_l+0xbac>)
 801e724:	930a      	str	r3, [sp, #40]	@ 0x28
 801e726:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e728:	2400      	movs	r4, #0
 801e72a:	e7b2      	b.n	801e692 <_strtod_l+0x9e6>
 801e72c:	2400      	movs	r4, #0
 801e72e:	4d4b      	ldr	r5, [pc, #300]	@ (801e85c <_strtod_l+0xbb0>)
 801e730:	e7aa      	b.n	801e688 <_strtod_l+0x9dc>
 801e732:	0020      	movs	r0, r4
 801e734:	0029      	movs	r1, r5
 801e736:	4b49      	ldr	r3, [pc, #292]	@ (801e85c <_strtod_l+0xbb0>)
 801e738:	2200      	movs	r2, #0
 801e73a:	f7e3 ff7f 	bl	800263c <__aeabi_dmul>
 801e73e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e740:	0004      	movs	r4, r0
 801e742:	000d      	movs	r5, r1
 801e744:	2b00      	cmp	r3, #0
 801e746:	d09f      	beq.n	801e688 <_strtod_l+0x9dc>
 801e748:	940a      	str	r4, [sp, #40]	@ 0x28
 801e74a:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e74c:	e7a1      	b.n	801e692 <_strtod_l+0x9e6>
 801e74e:	2300      	movs	r3, #0
 801e750:	4c41      	ldr	r4, [pc, #260]	@ (801e858 <_strtod_l+0xbac>)
 801e752:	0025      	movs	r5, r4
 801e754:	930a      	str	r3, [sp, #40]	@ 0x28
 801e756:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e758:	001c      	movs	r4, r3
 801e75a:	e79a      	b.n	801e692 <_strtod_l+0x9e6>
 801e75c:	23d4      	movs	r3, #212	@ 0xd4
 801e75e:	049b      	lsls	r3, r3, #18
 801e760:	18cf      	adds	r7, r1, r3
 801e762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e764:	9710      	str	r7, [sp, #64]	@ 0x40
 801e766:	2b00      	cmp	r3, #0
 801e768:	d1c2      	bne.n	801e6f0 <_strtod_l+0xa44>
 801e76a:	4b3d      	ldr	r3, [pc, #244]	@ (801e860 <_strtod_l+0xbb4>)
 801e76c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e76e:	403b      	ands	r3, r7
 801e770:	429a      	cmp	r2, r3
 801e772:	d1bd      	bne.n	801e6f0 <_strtod_l+0xa44>
 801e774:	0020      	movs	r0, r4
 801e776:	0029      	movs	r1, r5
 801e778:	f7e1 ff86 	bl	8000688 <__aeabi_d2lz>
 801e77c:	f7e1 ffbe 	bl	80006fc <__aeabi_l2d>
 801e780:	0002      	movs	r2, r0
 801e782:	000b      	movs	r3, r1
 801e784:	0020      	movs	r0, r4
 801e786:	0029      	movs	r1, r5
 801e788:	f7e4 fa20 	bl	8002bcc <__aeabi_dsub>
 801e78c:	033c      	lsls	r4, r7, #12
 801e78e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e790:	0b24      	lsrs	r4, r4, #12
 801e792:	4334      	orrs	r4, r6
 801e794:	900e      	str	r0, [sp, #56]	@ 0x38
 801e796:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e798:	4a37      	ldr	r2, [pc, #220]	@ (801e878 <_strtod_l+0xbcc>)
 801e79a:	431c      	orrs	r4, r3
 801e79c:	d052      	beq.n	801e844 <_strtod_l+0xb98>
 801e79e:	4b37      	ldr	r3, [pc, #220]	@ (801e87c <_strtod_l+0xbd0>)
 801e7a0:	f7e1 fe8c 	bl	80004bc <__aeabi_dcmplt>
 801e7a4:	2800      	cmp	r0, #0
 801e7a6:	d000      	beq.n	801e7aa <_strtod_l+0xafe>
 801e7a8:	e4c3      	b.n	801e132 <_strtod_l+0x486>
 801e7aa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e7ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e7ae:	4a34      	ldr	r2, [pc, #208]	@ (801e880 <_strtod_l+0xbd4>)
 801e7b0:	4b2a      	ldr	r3, [pc, #168]	@ (801e85c <_strtod_l+0xbb0>)
 801e7b2:	f7e1 fe97 	bl	80004e4 <__aeabi_dcmpgt>
 801e7b6:	2800      	cmp	r0, #0
 801e7b8:	d09a      	beq.n	801e6f0 <_strtod_l+0xa44>
 801e7ba:	e4ba      	b.n	801e132 <_strtod_l+0x486>
 801e7bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d02a      	beq.n	801e818 <_strtod_l+0xb6c>
 801e7c2:	23d4      	movs	r3, #212	@ 0xd4
 801e7c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e7c6:	04db      	lsls	r3, r3, #19
 801e7c8:	429a      	cmp	r2, r3
 801e7ca:	d825      	bhi.n	801e818 <_strtod_l+0xb6c>
 801e7cc:	0020      	movs	r0, r4
 801e7ce:	0029      	movs	r1, r5
 801e7d0:	4a2c      	ldr	r2, [pc, #176]	@ (801e884 <_strtod_l+0xbd8>)
 801e7d2:	4b2d      	ldr	r3, [pc, #180]	@ (801e888 <_strtod_l+0xbdc>)
 801e7d4:	f7e1 fe7c 	bl	80004d0 <__aeabi_dcmple>
 801e7d8:	2800      	cmp	r0, #0
 801e7da:	d016      	beq.n	801e80a <_strtod_l+0xb5e>
 801e7dc:	0020      	movs	r0, r4
 801e7de:	0029      	movs	r1, r5
 801e7e0:	f7e1 ff34 	bl	800064c <__aeabi_d2uiz>
 801e7e4:	2800      	cmp	r0, #0
 801e7e6:	d100      	bne.n	801e7ea <_strtod_l+0xb3e>
 801e7e8:	3001      	adds	r0, #1
 801e7ea:	f7e4 fe17 	bl	800341c <__aeabi_ui2d>
 801e7ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e7f0:	0004      	movs	r4, r0
 801e7f2:	000d      	movs	r5, r1
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	d122      	bne.n	801e83e <_strtod_l+0xb92>
 801e7f8:	2380      	movs	r3, #128	@ 0x80
 801e7fa:	061b      	lsls	r3, r3, #24
 801e7fc:	18cb      	adds	r3, r1, r3
 801e7fe:	9018      	str	r0, [sp, #96]	@ 0x60
 801e800:	9319      	str	r3, [sp, #100]	@ 0x64
 801e802:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e804:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e806:	9214      	str	r2, [sp, #80]	@ 0x50
 801e808:	9315      	str	r3, [sp, #84]	@ 0x54
 801e80a:	22d6      	movs	r2, #214	@ 0xd6
 801e80c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e80e:	04d2      	lsls	r2, r2, #19
 801e810:	189b      	adds	r3, r3, r2
 801e812:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e814:	1a9b      	subs	r3, r3, r2
 801e816:	9315      	str	r3, [sp, #84]	@ 0x54
 801e818:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e81a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e81c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e81e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e820:	f002 ff24 	bl	802166c <__ulp>
 801e824:	0002      	movs	r2, r0
 801e826:	000b      	movs	r3, r1
 801e828:	0030      	movs	r0, r6
 801e82a:	0039      	movs	r1, r7
 801e82c:	f7e3 ff06 	bl	800263c <__aeabi_dmul>
 801e830:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e832:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e834:	f7e2 ff5a 	bl	80016ec <__aeabi_dadd>
 801e838:	0006      	movs	r6, r0
 801e83a:	000f      	movs	r7, r1
 801e83c:	e791      	b.n	801e762 <_strtod_l+0xab6>
 801e83e:	9418      	str	r4, [sp, #96]	@ 0x60
 801e840:	9519      	str	r5, [sp, #100]	@ 0x64
 801e842:	e7de      	b.n	801e802 <_strtod_l+0xb56>
 801e844:	4b11      	ldr	r3, [pc, #68]	@ (801e88c <_strtod_l+0xbe0>)
 801e846:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e848:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e84a:	f7e1 fe37 	bl	80004bc <__aeabi_dcmplt>
 801e84e:	e7b2      	b.n	801e7b6 <_strtod_l+0xb0a>
 801e850:	fff00000 	.word	0xfff00000
 801e854:	000fffff 	.word	0x000fffff
 801e858:	3ff00000 	.word	0x3ff00000
 801e85c:	3fe00000 	.word	0x3fe00000
 801e860:	7ff00000 	.word	0x7ff00000
 801e864:	7fe00000 	.word	0x7fe00000
 801e868:	fcb00000 	.word	0xfcb00000
 801e86c:	7c9fffff 	.word	0x7c9fffff
 801e870:	7fefffff 	.word	0x7fefffff
 801e874:	bff00000 	.word	0xbff00000
 801e878:	94a03595 	.word	0x94a03595
 801e87c:	3fdfffff 	.word	0x3fdfffff
 801e880:	35afe535 	.word	0x35afe535
 801e884:	ffc00000 	.word	0xffc00000
 801e888:	41dfffff 	.word	0x41dfffff
 801e88c:	3fcfffff 	.word	0x3fcfffff

0801e890 <strtod>:
 801e890:	b510      	push	{r4, lr}
 801e892:	4c04      	ldr	r4, [pc, #16]	@ (801e8a4 <strtod+0x14>)
 801e894:	000a      	movs	r2, r1
 801e896:	0001      	movs	r1, r0
 801e898:	4b03      	ldr	r3, [pc, #12]	@ (801e8a8 <strtod+0x18>)
 801e89a:	6820      	ldr	r0, [r4, #0]
 801e89c:	f7ff fa06 	bl	801dcac <_strtod_l>
 801e8a0:	bd10      	pop	{r4, pc}
 801e8a2:	46c0      	nop			@ (mov r8, r8)
 801e8a4:	200003c8 	.word	0x200003c8
 801e8a8:	2000025c 	.word	0x2000025c

0801e8ac <_strtol_l.constprop.0>:
 801e8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8ae:	b085      	sub	sp, #20
 801e8b0:	0017      	movs	r7, r2
 801e8b2:	001e      	movs	r6, r3
 801e8b4:	9003      	str	r0, [sp, #12]
 801e8b6:	9101      	str	r1, [sp, #4]
 801e8b8:	2b24      	cmp	r3, #36	@ 0x24
 801e8ba:	d844      	bhi.n	801e946 <_strtol_l.constprop.0+0x9a>
 801e8bc:	000c      	movs	r4, r1
 801e8be:	2b01      	cmp	r3, #1
 801e8c0:	d041      	beq.n	801e946 <_strtol_l.constprop.0+0x9a>
 801e8c2:	4b3d      	ldr	r3, [pc, #244]	@ (801e9b8 <_strtol_l.constprop.0+0x10c>)
 801e8c4:	2208      	movs	r2, #8
 801e8c6:	469c      	mov	ip, r3
 801e8c8:	0023      	movs	r3, r4
 801e8ca:	4661      	mov	r1, ip
 801e8cc:	781d      	ldrb	r5, [r3, #0]
 801e8ce:	3401      	adds	r4, #1
 801e8d0:	5d48      	ldrb	r0, [r1, r5]
 801e8d2:	0001      	movs	r1, r0
 801e8d4:	4011      	ands	r1, r2
 801e8d6:	4210      	tst	r0, r2
 801e8d8:	d1f6      	bne.n	801e8c8 <_strtol_l.constprop.0+0x1c>
 801e8da:	2d2d      	cmp	r5, #45	@ 0x2d
 801e8dc:	d13a      	bne.n	801e954 <_strtol_l.constprop.0+0xa8>
 801e8de:	7825      	ldrb	r5, [r4, #0]
 801e8e0:	1c9c      	adds	r4, r3, #2
 801e8e2:	2301      	movs	r3, #1
 801e8e4:	9300      	str	r3, [sp, #0]
 801e8e6:	2210      	movs	r2, #16
 801e8e8:	0033      	movs	r3, r6
 801e8ea:	4393      	bics	r3, r2
 801e8ec:	d109      	bne.n	801e902 <_strtol_l.constprop.0+0x56>
 801e8ee:	2d30      	cmp	r5, #48	@ 0x30
 801e8f0:	d136      	bne.n	801e960 <_strtol_l.constprop.0+0xb4>
 801e8f2:	2120      	movs	r1, #32
 801e8f4:	7823      	ldrb	r3, [r4, #0]
 801e8f6:	438b      	bics	r3, r1
 801e8f8:	2b58      	cmp	r3, #88	@ 0x58
 801e8fa:	d131      	bne.n	801e960 <_strtol_l.constprop.0+0xb4>
 801e8fc:	0016      	movs	r6, r2
 801e8fe:	7865      	ldrb	r5, [r4, #1]
 801e900:	3402      	adds	r4, #2
 801e902:	4a2e      	ldr	r2, [pc, #184]	@ (801e9bc <_strtol_l.constprop.0+0x110>)
 801e904:	9b00      	ldr	r3, [sp, #0]
 801e906:	4694      	mov	ip, r2
 801e908:	4463      	add	r3, ip
 801e90a:	0031      	movs	r1, r6
 801e90c:	0018      	movs	r0, r3
 801e90e:	9302      	str	r3, [sp, #8]
 801e910:	f7e1 fcce 	bl	80002b0 <__aeabi_uidivmod>
 801e914:	2200      	movs	r2, #0
 801e916:	4684      	mov	ip, r0
 801e918:	0010      	movs	r0, r2
 801e91a:	002b      	movs	r3, r5
 801e91c:	3b30      	subs	r3, #48	@ 0x30
 801e91e:	2b09      	cmp	r3, #9
 801e920:	d825      	bhi.n	801e96e <_strtol_l.constprop.0+0xc2>
 801e922:	001d      	movs	r5, r3
 801e924:	42ae      	cmp	r6, r5
 801e926:	dd31      	ble.n	801e98c <_strtol_l.constprop.0+0xe0>
 801e928:	1c53      	adds	r3, r2, #1
 801e92a:	d009      	beq.n	801e940 <_strtol_l.constprop.0+0x94>
 801e92c:	2201      	movs	r2, #1
 801e92e:	4252      	negs	r2, r2
 801e930:	4584      	cmp	ip, r0
 801e932:	d305      	bcc.n	801e940 <_strtol_l.constprop.0+0x94>
 801e934:	d101      	bne.n	801e93a <_strtol_l.constprop.0+0x8e>
 801e936:	42a9      	cmp	r1, r5
 801e938:	db25      	blt.n	801e986 <_strtol_l.constprop.0+0xda>
 801e93a:	2201      	movs	r2, #1
 801e93c:	4370      	muls	r0, r6
 801e93e:	1828      	adds	r0, r5, r0
 801e940:	7825      	ldrb	r5, [r4, #0]
 801e942:	3401      	adds	r4, #1
 801e944:	e7e9      	b.n	801e91a <_strtol_l.constprop.0+0x6e>
 801e946:	f000 ffc5 	bl	801f8d4 <__errno>
 801e94a:	2316      	movs	r3, #22
 801e94c:	6003      	str	r3, [r0, #0]
 801e94e:	2000      	movs	r0, #0
 801e950:	b005      	add	sp, #20
 801e952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e954:	9100      	str	r1, [sp, #0]
 801e956:	2d2b      	cmp	r5, #43	@ 0x2b
 801e958:	d1c5      	bne.n	801e8e6 <_strtol_l.constprop.0+0x3a>
 801e95a:	7825      	ldrb	r5, [r4, #0]
 801e95c:	1c9c      	adds	r4, r3, #2
 801e95e:	e7c2      	b.n	801e8e6 <_strtol_l.constprop.0+0x3a>
 801e960:	2e00      	cmp	r6, #0
 801e962:	d1ce      	bne.n	801e902 <_strtol_l.constprop.0+0x56>
 801e964:	3608      	adds	r6, #8
 801e966:	2d30      	cmp	r5, #48	@ 0x30
 801e968:	d0cb      	beq.n	801e902 <_strtol_l.constprop.0+0x56>
 801e96a:	3602      	adds	r6, #2
 801e96c:	e7c9      	b.n	801e902 <_strtol_l.constprop.0+0x56>
 801e96e:	002b      	movs	r3, r5
 801e970:	3b41      	subs	r3, #65	@ 0x41
 801e972:	2b19      	cmp	r3, #25
 801e974:	d801      	bhi.n	801e97a <_strtol_l.constprop.0+0xce>
 801e976:	3d37      	subs	r5, #55	@ 0x37
 801e978:	e7d4      	b.n	801e924 <_strtol_l.constprop.0+0x78>
 801e97a:	002b      	movs	r3, r5
 801e97c:	3b61      	subs	r3, #97	@ 0x61
 801e97e:	2b19      	cmp	r3, #25
 801e980:	d804      	bhi.n	801e98c <_strtol_l.constprop.0+0xe0>
 801e982:	3d57      	subs	r5, #87	@ 0x57
 801e984:	e7ce      	b.n	801e924 <_strtol_l.constprop.0+0x78>
 801e986:	2201      	movs	r2, #1
 801e988:	4252      	negs	r2, r2
 801e98a:	e7d9      	b.n	801e940 <_strtol_l.constprop.0+0x94>
 801e98c:	1c53      	adds	r3, r2, #1
 801e98e:	d108      	bne.n	801e9a2 <_strtol_l.constprop.0+0xf6>
 801e990:	2322      	movs	r3, #34	@ 0x22
 801e992:	9a03      	ldr	r2, [sp, #12]
 801e994:	9802      	ldr	r0, [sp, #8]
 801e996:	6013      	str	r3, [r2, #0]
 801e998:	2f00      	cmp	r7, #0
 801e99a:	d0d9      	beq.n	801e950 <_strtol_l.constprop.0+0xa4>
 801e99c:	1e63      	subs	r3, r4, #1
 801e99e:	9301      	str	r3, [sp, #4]
 801e9a0:	e007      	b.n	801e9b2 <_strtol_l.constprop.0+0x106>
 801e9a2:	9b00      	ldr	r3, [sp, #0]
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d000      	beq.n	801e9aa <_strtol_l.constprop.0+0xfe>
 801e9a8:	4240      	negs	r0, r0
 801e9aa:	2f00      	cmp	r7, #0
 801e9ac:	d0d0      	beq.n	801e950 <_strtol_l.constprop.0+0xa4>
 801e9ae:	2a00      	cmp	r2, #0
 801e9b0:	d1f4      	bne.n	801e99c <_strtol_l.constprop.0+0xf0>
 801e9b2:	9b01      	ldr	r3, [sp, #4]
 801e9b4:	603b      	str	r3, [r7, #0]
 801e9b6:	e7cb      	b.n	801e950 <_strtol_l.constprop.0+0xa4>
 801e9b8:	08024e71 	.word	0x08024e71
 801e9bc:	7fffffff 	.word	0x7fffffff

0801e9c0 <strtol>:
 801e9c0:	b510      	push	{r4, lr}
 801e9c2:	4c04      	ldr	r4, [pc, #16]	@ (801e9d4 <strtol+0x14>)
 801e9c4:	0013      	movs	r3, r2
 801e9c6:	000a      	movs	r2, r1
 801e9c8:	0001      	movs	r1, r0
 801e9ca:	6820      	ldr	r0, [r4, #0]
 801e9cc:	f7ff ff6e 	bl	801e8ac <_strtol_l.constprop.0>
 801e9d0:	bd10      	pop	{r4, pc}
 801e9d2:	46c0      	nop			@ (mov r8, r8)
 801e9d4:	200003c8 	.word	0x200003c8

0801e9d8 <__cvt>:
 801e9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9da:	001f      	movs	r7, r3
 801e9dc:	2300      	movs	r3, #0
 801e9de:	0016      	movs	r6, r2
 801e9e0:	b08b      	sub	sp, #44	@ 0x2c
 801e9e2:	429f      	cmp	r7, r3
 801e9e4:	da04      	bge.n	801e9f0 <__cvt+0x18>
 801e9e6:	2180      	movs	r1, #128	@ 0x80
 801e9e8:	0609      	lsls	r1, r1, #24
 801e9ea:	187b      	adds	r3, r7, r1
 801e9ec:	001f      	movs	r7, r3
 801e9ee:	232d      	movs	r3, #45	@ 0x2d
 801e9f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e9f2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e9f4:	7013      	strb	r3, [r2, #0]
 801e9f6:	2320      	movs	r3, #32
 801e9f8:	2203      	movs	r2, #3
 801e9fa:	439d      	bics	r5, r3
 801e9fc:	2d46      	cmp	r5, #70	@ 0x46
 801e9fe:	d007      	beq.n	801ea10 <__cvt+0x38>
 801ea00:	002b      	movs	r3, r5
 801ea02:	3b45      	subs	r3, #69	@ 0x45
 801ea04:	4259      	negs	r1, r3
 801ea06:	414b      	adcs	r3, r1
 801ea08:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ea0a:	3a01      	subs	r2, #1
 801ea0c:	18cb      	adds	r3, r1, r3
 801ea0e:	9310      	str	r3, [sp, #64]	@ 0x40
 801ea10:	ab09      	add	r3, sp, #36	@ 0x24
 801ea12:	9304      	str	r3, [sp, #16]
 801ea14:	ab08      	add	r3, sp, #32
 801ea16:	9303      	str	r3, [sp, #12]
 801ea18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ea1a:	9200      	str	r2, [sp, #0]
 801ea1c:	9302      	str	r3, [sp, #8]
 801ea1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea20:	0032      	movs	r2, r6
 801ea22:	9301      	str	r3, [sp, #4]
 801ea24:	003b      	movs	r3, r7
 801ea26:	f001 f82b 	bl	801fa80 <_dtoa_r>
 801ea2a:	0004      	movs	r4, r0
 801ea2c:	2d47      	cmp	r5, #71	@ 0x47
 801ea2e:	d11b      	bne.n	801ea68 <__cvt+0x90>
 801ea30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ea32:	07db      	lsls	r3, r3, #31
 801ea34:	d511      	bpl.n	801ea5a <__cvt+0x82>
 801ea36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea38:	18c3      	adds	r3, r0, r3
 801ea3a:	9307      	str	r3, [sp, #28]
 801ea3c:	2200      	movs	r2, #0
 801ea3e:	2300      	movs	r3, #0
 801ea40:	0030      	movs	r0, r6
 801ea42:	0039      	movs	r1, r7
 801ea44:	f7e1 fd34 	bl	80004b0 <__aeabi_dcmpeq>
 801ea48:	2800      	cmp	r0, #0
 801ea4a:	d001      	beq.n	801ea50 <__cvt+0x78>
 801ea4c:	9b07      	ldr	r3, [sp, #28]
 801ea4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea50:	2230      	movs	r2, #48	@ 0x30
 801ea52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea54:	9907      	ldr	r1, [sp, #28]
 801ea56:	428b      	cmp	r3, r1
 801ea58:	d320      	bcc.n	801ea9c <__cvt+0xc4>
 801ea5a:	0020      	movs	r0, r4
 801ea5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea5e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ea60:	1b1b      	subs	r3, r3, r4
 801ea62:	6013      	str	r3, [r2, #0]
 801ea64:	b00b      	add	sp, #44	@ 0x2c
 801ea66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea6a:	18c3      	adds	r3, r0, r3
 801ea6c:	9307      	str	r3, [sp, #28]
 801ea6e:	2d46      	cmp	r5, #70	@ 0x46
 801ea70:	d1e4      	bne.n	801ea3c <__cvt+0x64>
 801ea72:	7803      	ldrb	r3, [r0, #0]
 801ea74:	2b30      	cmp	r3, #48	@ 0x30
 801ea76:	d10c      	bne.n	801ea92 <__cvt+0xba>
 801ea78:	2200      	movs	r2, #0
 801ea7a:	2300      	movs	r3, #0
 801ea7c:	0030      	movs	r0, r6
 801ea7e:	0039      	movs	r1, r7
 801ea80:	f7e1 fd16 	bl	80004b0 <__aeabi_dcmpeq>
 801ea84:	2800      	cmp	r0, #0
 801ea86:	d104      	bne.n	801ea92 <__cvt+0xba>
 801ea88:	2301      	movs	r3, #1
 801ea8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ea8c:	1a9b      	subs	r3, r3, r2
 801ea8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ea90:	6013      	str	r3, [r2, #0]
 801ea92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ea94:	9a07      	ldr	r2, [sp, #28]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	18d3      	adds	r3, r2, r3
 801ea9a:	e7ce      	b.n	801ea3a <__cvt+0x62>
 801ea9c:	1c59      	adds	r1, r3, #1
 801ea9e:	9109      	str	r1, [sp, #36]	@ 0x24
 801eaa0:	701a      	strb	r2, [r3, #0]
 801eaa2:	e7d6      	b.n	801ea52 <__cvt+0x7a>

0801eaa4 <__exponent>:
 801eaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eaa6:	232b      	movs	r3, #43	@ 0x2b
 801eaa8:	0005      	movs	r5, r0
 801eaaa:	000c      	movs	r4, r1
 801eaac:	b085      	sub	sp, #20
 801eaae:	7002      	strb	r2, [r0, #0]
 801eab0:	2900      	cmp	r1, #0
 801eab2:	da01      	bge.n	801eab8 <__exponent+0x14>
 801eab4:	424c      	negs	r4, r1
 801eab6:	3302      	adds	r3, #2
 801eab8:	706b      	strb	r3, [r5, #1]
 801eaba:	2c09      	cmp	r4, #9
 801eabc:	dd2c      	ble.n	801eb18 <__exponent+0x74>
 801eabe:	ab02      	add	r3, sp, #8
 801eac0:	1dde      	adds	r6, r3, #7
 801eac2:	0020      	movs	r0, r4
 801eac4:	210a      	movs	r1, #10
 801eac6:	f7e1 fcdd 	bl	8000484 <__aeabi_idivmod>
 801eaca:	0037      	movs	r7, r6
 801eacc:	3130      	adds	r1, #48	@ 0x30
 801eace:	3e01      	subs	r6, #1
 801ead0:	0020      	movs	r0, r4
 801ead2:	7031      	strb	r1, [r6, #0]
 801ead4:	210a      	movs	r1, #10
 801ead6:	9401      	str	r4, [sp, #4]
 801ead8:	f7e1 fbee 	bl	80002b8 <__divsi3>
 801eadc:	9b01      	ldr	r3, [sp, #4]
 801eade:	0004      	movs	r4, r0
 801eae0:	2b63      	cmp	r3, #99	@ 0x63
 801eae2:	dcee      	bgt.n	801eac2 <__exponent+0x1e>
 801eae4:	1eba      	subs	r2, r7, #2
 801eae6:	1ca8      	adds	r0, r5, #2
 801eae8:	0001      	movs	r1, r0
 801eaea:	0013      	movs	r3, r2
 801eaec:	3430      	adds	r4, #48	@ 0x30
 801eaee:	7014      	strb	r4, [r2, #0]
 801eaf0:	ac02      	add	r4, sp, #8
 801eaf2:	3407      	adds	r4, #7
 801eaf4:	429c      	cmp	r4, r3
 801eaf6:	d80a      	bhi.n	801eb0e <__exponent+0x6a>
 801eaf8:	2300      	movs	r3, #0
 801eafa:	42a2      	cmp	r2, r4
 801eafc:	d803      	bhi.n	801eb06 <__exponent+0x62>
 801eafe:	3309      	adds	r3, #9
 801eb00:	aa02      	add	r2, sp, #8
 801eb02:	189b      	adds	r3, r3, r2
 801eb04:	1bdb      	subs	r3, r3, r7
 801eb06:	18c0      	adds	r0, r0, r3
 801eb08:	1b40      	subs	r0, r0, r5
 801eb0a:	b005      	add	sp, #20
 801eb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb0e:	781c      	ldrb	r4, [r3, #0]
 801eb10:	3301      	adds	r3, #1
 801eb12:	700c      	strb	r4, [r1, #0]
 801eb14:	3101      	adds	r1, #1
 801eb16:	e7eb      	b.n	801eaf0 <__exponent+0x4c>
 801eb18:	2330      	movs	r3, #48	@ 0x30
 801eb1a:	18e4      	adds	r4, r4, r3
 801eb1c:	70ab      	strb	r3, [r5, #2]
 801eb1e:	1d28      	adds	r0, r5, #4
 801eb20:	70ec      	strb	r4, [r5, #3]
 801eb22:	e7f1      	b.n	801eb08 <__exponent+0x64>

0801eb24 <_printf_float>:
 801eb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb26:	b097      	sub	sp, #92	@ 0x5c
 801eb28:	000d      	movs	r5, r1
 801eb2a:	920a      	str	r2, [sp, #40]	@ 0x28
 801eb2c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801eb2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb30:	9009      	str	r0, [sp, #36]	@ 0x24
 801eb32:	f000 fe7d 	bl	801f830 <_localeconv_r>
 801eb36:	6803      	ldr	r3, [r0, #0]
 801eb38:	0018      	movs	r0, r3
 801eb3a:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb3c:	f7e1 fb16 	bl	800016c <strlen>
 801eb40:	2300      	movs	r3, #0
 801eb42:	900f      	str	r0, [sp, #60]	@ 0x3c
 801eb44:	9314      	str	r3, [sp, #80]	@ 0x50
 801eb46:	7e2b      	ldrb	r3, [r5, #24]
 801eb48:	2207      	movs	r2, #7
 801eb4a:	930c      	str	r3, [sp, #48]	@ 0x30
 801eb4c:	682b      	ldr	r3, [r5, #0]
 801eb4e:	930e      	str	r3, [sp, #56]	@ 0x38
 801eb50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801eb52:	6823      	ldr	r3, [r4, #0]
 801eb54:	05c9      	lsls	r1, r1, #23
 801eb56:	d545      	bpl.n	801ebe4 <_printf_float+0xc0>
 801eb58:	189b      	adds	r3, r3, r2
 801eb5a:	4393      	bics	r3, r2
 801eb5c:	001a      	movs	r2, r3
 801eb5e:	3208      	adds	r2, #8
 801eb60:	6022      	str	r2, [r4, #0]
 801eb62:	2201      	movs	r2, #1
 801eb64:	681e      	ldr	r6, [r3, #0]
 801eb66:	685f      	ldr	r7, [r3, #4]
 801eb68:	007b      	lsls	r3, r7, #1
 801eb6a:	085b      	lsrs	r3, r3, #1
 801eb6c:	9311      	str	r3, [sp, #68]	@ 0x44
 801eb6e:	9610      	str	r6, [sp, #64]	@ 0x40
 801eb70:	64ae      	str	r6, [r5, #72]	@ 0x48
 801eb72:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801eb74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801eb76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801eb78:	4ba7      	ldr	r3, [pc, #668]	@ (801ee18 <_printf_float+0x2f4>)
 801eb7a:	4252      	negs	r2, r2
 801eb7c:	f7e4 fbc2 	bl	8003304 <__aeabi_dcmpun>
 801eb80:	2800      	cmp	r0, #0
 801eb82:	d131      	bne.n	801ebe8 <_printf_float+0xc4>
 801eb84:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801eb86:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801eb88:	2201      	movs	r2, #1
 801eb8a:	4ba3      	ldr	r3, [pc, #652]	@ (801ee18 <_printf_float+0x2f4>)
 801eb8c:	4252      	negs	r2, r2
 801eb8e:	f7e1 fc9f 	bl	80004d0 <__aeabi_dcmple>
 801eb92:	2800      	cmp	r0, #0
 801eb94:	d128      	bne.n	801ebe8 <_printf_float+0xc4>
 801eb96:	2200      	movs	r2, #0
 801eb98:	2300      	movs	r3, #0
 801eb9a:	0030      	movs	r0, r6
 801eb9c:	0039      	movs	r1, r7
 801eb9e:	f7e1 fc8d 	bl	80004bc <__aeabi_dcmplt>
 801eba2:	2800      	cmp	r0, #0
 801eba4:	d003      	beq.n	801ebae <_printf_float+0x8a>
 801eba6:	002b      	movs	r3, r5
 801eba8:	222d      	movs	r2, #45	@ 0x2d
 801ebaa:	3343      	adds	r3, #67	@ 0x43
 801ebac:	701a      	strb	r2, [r3, #0]
 801ebae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ebb0:	4f9a      	ldr	r7, [pc, #616]	@ (801ee1c <_printf_float+0x2f8>)
 801ebb2:	2b47      	cmp	r3, #71	@ 0x47
 801ebb4:	d900      	bls.n	801ebb8 <_printf_float+0x94>
 801ebb6:	4f9a      	ldr	r7, [pc, #616]	@ (801ee20 <_printf_float+0x2fc>)
 801ebb8:	2303      	movs	r3, #3
 801ebba:	2400      	movs	r4, #0
 801ebbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ebbe:	612b      	str	r3, [r5, #16]
 801ebc0:	3301      	adds	r3, #1
 801ebc2:	439a      	bics	r2, r3
 801ebc4:	602a      	str	r2, [r5, #0]
 801ebc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ebc8:	0029      	movs	r1, r5
 801ebca:	9300      	str	r3, [sp, #0]
 801ebcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ebd0:	aa15      	add	r2, sp, #84	@ 0x54
 801ebd2:	f000 f9e5 	bl	801efa0 <_printf_common>
 801ebd6:	3001      	adds	r0, #1
 801ebd8:	d000      	beq.n	801ebdc <_printf_float+0xb8>
 801ebda:	e09f      	b.n	801ed1c <_printf_float+0x1f8>
 801ebdc:	2001      	movs	r0, #1
 801ebde:	4240      	negs	r0, r0
 801ebe0:	b017      	add	sp, #92	@ 0x5c
 801ebe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebe4:	3307      	adds	r3, #7
 801ebe6:	e7b8      	b.n	801eb5a <_printf_float+0x36>
 801ebe8:	0032      	movs	r2, r6
 801ebea:	003b      	movs	r3, r7
 801ebec:	0030      	movs	r0, r6
 801ebee:	0039      	movs	r1, r7
 801ebf0:	f7e4 fb88 	bl	8003304 <__aeabi_dcmpun>
 801ebf4:	2800      	cmp	r0, #0
 801ebf6:	d00b      	beq.n	801ec10 <_printf_float+0xec>
 801ebf8:	2f00      	cmp	r7, #0
 801ebfa:	da03      	bge.n	801ec04 <_printf_float+0xe0>
 801ebfc:	002b      	movs	r3, r5
 801ebfe:	222d      	movs	r2, #45	@ 0x2d
 801ec00:	3343      	adds	r3, #67	@ 0x43
 801ec02:	701a      	strb	r2, [r3, #0]
 801ec04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec06:	4f87      	ldr	r7, [pc, #540]	@ (801ee24 <_printf_float+0x300>)
 801ec08:	2b47      	cmp	r3, #71	@ 0x47
 801ec0a:	d9d5      	bls.n	801ebb8 <_printf_float+0x94>
 801ec0c:	4f86      	ldr	r7, [pc, #536]	@ (801ee28 <_printf_float+0x304>)
 801ec0e:	e7d3      	b.n	801ebb8 <_printf_float+0x94>
 801ec10:	2220      	movs	r2, #32
 801ec12:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ec14:	686b      	ldr	r3, [r5, #4]
 801ec16:	4394      	bics	r4, r2
 801ec18:	1c5a      	adds	r2, r3, #1
 801ec1a:	d146      	bne.n	801ecaa <_printf_float+0x186>
 801ec1c:	3307      	adds	r3, #7
 801ec1e:	606b      	str	r3, [r5, #4]
 801ec20:	2380      	movs	r3, #128	@ 0x80
 801ec22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec24:	00db      	lsls	r3, r3, #3
 801ec26:	4313      	orrs	r3, r2
 801ec28:	2200      	movs	r2, #0
 801ec2a:	602b      	str	r3, [r5, #0]
 801ec2c:	9206      	str	r2, [sp, #24]
 801ec2e:	aa14      	add	r2, sp, #80	@ 0x50
 801ec30:	9205      	str	r2, [sp, #20]
 801ec32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec34:	a90a      	add	r1, sp, #40	@ 0x28
 801ec36:	9204      	str	r2, [sp, #16]
 801ec38:	aa13      	add	r2, sp, #76	@ 0x4c
 801ec3a:	9203      	str	r2, [sp, #12]
 801ec3c:	2223      	movs	r2, #35	@ 0x23
 801ec3e:	1852      	adds	r2, r2, r1
 801ec40:	9202      	str	r2, [sp, #8]
 801ec42:	9301      	str	r3, [sp, #4]
 801ec44:	686b      	ldr	r3, [r5, #4]
 801ec46:	0032      	movs	r2, r6
 801ec48:	9300      	str	r3, [sp, #0]
 801ec4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec4c:	003b      	movs	r3, r7
 801ec4e:	f7ff fec3 	bl	801e9d8 <__cvt>
 801ec52:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ec54:	0007      	movs	r7, r0
 801ec56:	2c47      	cmp	r4, #71	@ 0x47
 801ec58:	d12d      	bne.n	801ecb6 <_printf_float+0x192>
 801ec5a:	1cd3      	adds	r3, r2, #3
 801ec5c:	db02      	blt.n	801ec64 <_printf_float+0x140>
 801ec5e:	686b      	ldr	r3, [r5, #4]
 801ec60:	429a      	cmp	r2, r3
 801ec62:	dd48      	ble.n	801ecf6 <_printf_float+0x1d2>
 801ec64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec66:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ec68:	3b02      	subs	r3, #2
 801ec6a:	b2db      	uxtb	r3, r3
 801ec6c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec6e:	0028      	movs	r0, r5
 801ec70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec72:	3901      	subs	r1, #1
 801ec74:	3050      	adds	r0, #80	@ 0x50
 801ec76:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ec78:	f7ff ff14 	bl	801eaa4 <__exponent>
 801ec7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ec7e:	0004      	movs	r4, r0
 801ec80:	1813      	adds	r3, r2, r0
 801ec82:	612b      	str	r3, [r5, #16]
 801ec84:	2a01      	cmp	r2, #1
 801ec86:	dc02      	bgt.n	801ec8e <_printf_float+0x16a>
 801ec88:	682a      	ldr	r2, [r5, #0]
 801ec8a:	07d2      	lsls	r2, r2, #31
 801ec8c:	d501      	bpl.n	801ec92 <_printf_float+0x16e>
 801ec8e:	3301      	adds	r3, #1
 801ec90:	612b      	str	r3, [r5, #16]
 801ec92:	2323      	movs	r3, #35	@ 0x23
 801ec94:	aa0a      	add	r2, sp, #40	@ 0x28
 801ec96:	189b      	adds	r3, r3, r2
 801ec98:	781b      	ldrb	r3, [r3, #0]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d100      	bne.n	801eca0 <_printf_float+0x17c>
 801ec9e:	e792      	b.n	801ebc6 <_printf_float+0xa2>
 801eca0:	002b      	movs	r3, r5
 801eca2:	222d      	movs	r2, #45	@ 0x2d
 801eca4:	3343      	adds	r3, #67	@ 0x43
 801eca6:	701a      	strb	r2, [r3, #0]
 801eca8:	e78d      	b.n	801ebc6 <_printf_float+0xa2>
 801ecaa:	2c47      	cmp	r4, #71	@ 0x47
 801ecac:	d1b8      	bne.n	801ec20 <_printf_float+0xfc>
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d1b6      	bne.n	801ec20 <_printf_float+0xfc>
 801ecb2:	3301      	adds	r3, #1
 801ecb4:	e7b3      	b.n	801ec1e <_printf_float+0xfa>
 801ecb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecb8:	0011      	movs	r1, r2
 801ecba:	2b65      	cmp	r3, #101	@ 0x65
 801ecbc:	d9d7      	bls.n	801ec6e <_printf_float+0x14a>
 801ecbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecc0:	2b66      	cmp	r3, #102	@ 0x66
 801ecc2:	d11a      	bne.n	801ecfa <_printf_float+0x1d6>
 801ecc4:	686b      	ldr	r3, [r5, #4]
 801ecc6:	2a00      	cmp	r2, #0
 801ecc8:	dd09      	ble.n	801ecde <_printf_float+0x1ba>
 801ecca:	612a      	str	r2, [r5, #16]
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d102      	bne.n	801ecd6 <_printf_float+0x1b2>
 801ecd0:	6829      	ldr	r1, [r5, #0]
 801ecd2:	07c9      	lsls	r1, r1, #31
 801ecd4:	d50b      	bpl.n	801ecee <_printf_float+0x1ca>
 801ecd6:	3301      	adds	r3, #1
 801ecd8:	189b      	adds	r3, r3, r2
 801ecda:	612b      	str	r3, [r5, #16]
 801ecdc:	e007      	b.n	801ecee <_printf_float+0x1ca>
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d103      	bne.n	801ecea <_printf_float+0x1c6>
 801ece2:	2201      	movs	r2, #1
 801ece4:	6829      	ldr	r1, [r5, #0]
 801ece6:	4211      	tst	r1, r2
 801ece8:	d000      	beq.n	801ecec <_printf_float+0x1c8>
 801ecea:	1c9a      	adds	r2, r3, #2
 801ecec:	612a      	str	r2, [r5, #16]
 801ecee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ecf0:	2400      	movs	r4, #0
 801ecf2:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ecf4:	e7cd      	b.n	801ec92 <_printf_float+0x16e>
 801ecf6:	2367      	movs	r3, #103	@ 0x67
 801ecf8:	930c      	str	r3, [sp, #48]	@ 0x30
 801ecfa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ecfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ecfe:	4299      	cmp	r1, r3
 801ed00:	db06      	blt.n	801ed10 <_printf_float+0x1ec>
 801ed02:	682b      	ldr	r3, [r5, #0]
 801ed04:	6129      	str	r1, [r5, #16]
 801ed06:	07db      	lsls	r3, r3, #31
 801ed08:	d5f1      	bpl.n	801ecee <_printf_float+0x1ca>
 801ed0a:	3101      	adds	r1, #1
 801ed0c:	6129      	str	r1, [r5, #16]
 801ed0e:	e7ee      	b.n	801ecee <_printf_float+0x1ca>
 801ed10:	2201      	movs	r2, #1
 801ed12:	2900      	cmp	r1, #0
 801ed14:	dce0      	bgt.n	801ecd8 <_printf_float+0x1b4>
 801ed16:	1892      	adds	r2, r2, r2
 801ed18:	1a52      	subs	r2, r2, r1
 801ed1a:	e7dd      	b.n	801ecd8 <_printf_float+0x1b4>
 801ed1c:	682a      	ldr	r2, [r5, #0]
 801ed1e:	0553      	lsls	r3, r2, #21
 801ed20:	d408      	bmi.n	801ed34 <_printf_float+0x210>
 801ed22:	692b      	ldr	r3, [r5, #16]
 801ed24:	003a      	movs	r2, r7
 801ed26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed2a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed2c:	47a0      	blx	r4
 801ed2e:	3001      	adds	r0, #1
 801ed30:	d129      	bne.n	801ed86 <_printf_float+0x262>
 801ed32:	e753      	b.n	801ebdc <_printf_float+0xb8>
 801ed34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed36:	2b65      	cmp	r3, #101	@ 0x65
 801ed38:	d800      	bhi.n	801ed3c <_printf_float+0x218>
 801ed3a:	e0da      	b.n	801eef2 <_printf_float+0x3ce>
 801ed3c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ed3e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ed40:	2200      	movs	r2, #0
 801ed42:	2300      	movs	r3, #0
 801ed44:	f7e1 fbb4 	bl	80004b0 <__aeabi_dcmpeq>
 801ed48:	2800      	cmp	r0, #0
 801ed4a:	d033      	beq.n	801edb4 <_printf_float+0x290>
 801ed4c:	2301      	movs	r3, #1
 801ed4e:	4a37      	ldr	r2, [pc, #220]	@ (801ee2c <_printf_float+0x308>)
 801ed50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed56:	47a0      	blx	r4
 801ed58:	3001      	adds	r0, #1
 801ed5a:	d100      	bne.n	801ed5e <_printf_float+0x23a>
 801ed5c:	e73e      	b.n	801ebdc <_printf_float+0xb8>
 801ed5e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ed60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ed62:	42b3      	cmp	r3, r6
 801ed64:	db02      	blt.n	801ed6c <_printf_float+0x248>
 801ed66:	682b      	ldr	r3, [r5, #0]
 801ed68:	07db      	lsls	r3, r3, #31
 801ed6a:	d50c      	bpl.n	801ed86 <_printf_float+0x262>
 801ed6c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ed72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed76:	47a0      	blx	r4
 801ed78:	2400      	movs	r4, #0
 801ed7a:	3001      	adds	r0, #1
 801ed7c:	d100      	bne.n	801ed80 <_printf_float+0x25c>
 801ed7e:	e72d      	b.n	801ebdc <_printf_float+0xb8>
 801ed80:	1e73      	subs	r3, r6, #1
 801ed82:	42a3      	cmp	r3, r4
 801ed84:	dc0a      	bgt.n	801ed9c <_printf_float+0x278>
 801ed86:	682b      	ldr	r3, [r5, #0]
 801ed88:	079b      	lsls	r3, r3, #30
 801ed8a:	d500      	bpl.n	801ed8e <_printf_float+0x26a>
 801ed8c:	e105      	b.n	801ef9a <_printf_float+0x476>
 801ed8e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ed90:	68e8      	ldr	r0, [r5, #12]
 801ed92:	4298      	cmp	r0, r3
 801ed94:	db00      	blt.n	801ed98 <_printf_float+0x274>
 801ed96:	e723      	b.n	801ebe0 <_printf_float+0xbc>
 801ed98:	0018      	movs	r0, r3
 801ed9a:	e721      	b.n	801ebe0 <_printf_float+0xbc>
 801ed9c:	002a      	movs	r2, r5
 801ed9e:	2301      	movs	r3, #1
 801eda0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eda2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eda4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eda6:	321a      	adds	r2, #26
 801eda8:	47b8      	blx	r7
 801edaa:	3001      	adds	r0, #1
 801edac:	d100      	bne.n	801edb0 <_printf_float+0x28c>
 801edae:	e715      	b.n	801ebdc <_printf_float+0xb8>
 801edb0:	3401      	adds	r4, #1
 801edb2:	e7e5      	b.n	801ed80 <_printf_float+0x25c>
 801edb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	dc3a      	bgt.n	801ee30 <_printf_float+0x30c>
 801edba:	2301      	movs	r3, #1
 801edbc:	4a1b      	ldr	r2, [pc, #108]	@ (801ee2c <_printf_float+0x308>)
 801edbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801edc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edc2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edc4:	47a0      	blx	r4
 801edc6:	3001      	adds	r0, #1
 801edc8:	d100      	bne.n	801edcc <_printf_float+0x2a8>
 801edca:	e707      	b.n	801ebdc <_printf_float+0xb8>
 801edcc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801edce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801edd0:	4333      	orrs	r3, r6
 801edd2:	d102      	bne.n	801edda <_printf_float+0x2b6>
 801edd4:	682b      	ldr	r3, [r5, #0]
 801edd6:	07db      	lsls	r3, r3, #31
 801edd8:	d5d5      	bpl.n	801ed86 <_printf_float+0x262>
 801edda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eddc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801edde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ede0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ede2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ede4:	47a0      	blx	r4
 801ede6:	2300      	movs	r3, #0
 801ede8:	3001      	adds	r0, #1
 801edea:	d100      	bne.n	801edee <_printf_float+0x2ca>
 801edec:	e6f6      	b.n	801ebdc <_printf_float+0xb8>
 801edee:	930c      	str	r3, [sp, #48]	@ 0x30
 801edf0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801edf2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801edf4:	425b      	negs	r3, r3
 801edf6:	4293      	cmp	r3, r2
 801edf8:	dc01      	bgt.n	801edfe <_printf_float+0x2da>
 801edfa:	0033      	movs	r3, r6
 801edfc:	e792      	b.n	801ed24 <_printf_float+0x200>
 801edfe:	002a      	movs	r2, r5
 801ee00:	2301      	movs	r3, #1
 801ee02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ee04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ee08:	321a      	adds	r2, #26
 801ee0a:	47a0      	blx	r4
 801ee0c:	3001      	adds	r0, #1
 801ee0e:	d100      	bne.n	801ee12 <_printf_float+0x2ee>
 801ee10:	e6e4      	b.n	801ebdc <_printf_float+0xb8>
 801ee12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee14:	3301      	adds	r3, #1
 801ee16:	e7ea      	b.n	801edee <_printf_float+0x2ca>
 801ee18:	7fefffff 	.word	0x7fefffff
 801ee1c:	08024f71 	.word	0x08024f71
 801ee20:	08024f75 	.word	0x08024f75
 801ee24:	08024f79 	.word	0x08024f79
 801ee28:	08024f7d 	.word	0x08024f7d
 801ee2c:	08024f81 	.word	0x08024f81
 801ee30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ee32:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801ee34:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee36:	429e      	cmp	r6, r3
 801ee38:	dd00      	ble.n	801ee3c <_printf_float+0x318>
 801ee3a:	001e      	movs	r6, r3
 801ee3c:	2e00      	cmp	r6, #0
 801ee3e:	dc31      	bgt.n	801eea4 <_printf_float+0x380>
 801ee40:	43f3      	mvns	r3, r6
 801ee42:	2400      	movs	r4, #0
 801ee44:	17db      	asrs	r3, r3, #31
 801ee46:	4033      	ands	r3, r6
 801ee48:	930e      	str	r3, [sp, #56]	@ 0x38
 801ee4a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801ee4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee4e:	1af3      	subs	r3, r6, r3
 801ee50:	42a3      	cmp	r3, r4
 801ee52:	dc30      	bgt.n	801eeb6 <_printf_float+0x392>
 801ee54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee58:	429a      	cmp	r2, r3
 801ee5a:	dc38      	bgt.n	801eece <_printf_float+0x3aa>
 801ee5c:	682b      	ldr	r3, [r5, #0]
 801ee5e:	07db      	lsls	r3, r3, #31
 801ee60:	d435      	bmi.n	801eece <_printf_float+0x3aa>
 801ee62:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ee64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee68:	1b9b      	subs	r3, r3, r6
 801ee6a:	1b14      	subs	r4, r2, r4
 801ee6c:	429c      	cmp	r4, r3
 801ee6e:	dd00      	ble.n	801ee72 <_printf_float+0x34e>
 801ee70:	001c      	movs	r4, r3
 801ee72:	2c00      	cmp	r4, #0
 801ee74:	dc34      	bgt.n	801eee0 <_printf_float+0x3bc>
 801ee76:	43e3      	mvns	r3, r4
 801ee78:	2600      	movs	r6, #0
 801ee7a:	17db      	asrs	r3, r3, #31
 801ee7c:	401c      	ands	r4, r3
 801ee7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee82:	1ad3      	subs	r3, r2, r3
 801ee84:	1b1b      	subs	r3, r3, r4
 801ee86:	42b3      	cmp	r3, r6
 801ee88:	dc00      	bgt.n	801ee8c <_printf_float+0x368>
 801ee8a:	e77c      	b.n	801ed86 <_printf_float+0x262>
 801ee8c:	002a      	movs	r2, r5
 801ee8e:	2301      	movs	r3, #1
 801ee90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ee92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee94:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ee96:	321a      	adds	r2, #26
 801ee98:	47b8      	blx	r7
 801ee9a:	3001      	adds	r0, #1
 801ee9c:	d100      	bne.n	801eea0 <_printf_float+0x37c>
 801ee9e:	e69d      	b.n	801ebdc <_printf_float+0xb8>
 801eea0:	3601      	adds	r6, #1
 801eea2:	e7ec      	b.n	801ee7e <_printf_float+0x35a>
 801eea4:	0033      	movs	r3, r6
 801eea6:	003a      	movs	r2, r7
 801eea8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eeaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eeac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eeae:	47a0      	blx	r4
 801eeb0:	3001      	adds	r0, #1
 801eeb2:	d1c5      	bne.n	801ee40 <_printf_float+0x31c>
 801eeb4:	e692      	b.n	801ebdc <_printf_float+0xb8>
 801eeb6:	002a      	movs	r2, r5
 801eeb8:	2301      	movs	r3, #1
 801eeba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eebc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eebe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801eec0:	321a      	adds	r2, #26
 801eec2:	47b0      	blx	r6
 801eec4:	3001      	adds	r0, #1
 801eec6:	d100      	bne.n	801eeca <_printf_float+0x3a6>
 801eec8:	e688      	b.n	801ebdc <_printf_float+0xb8>
 801eeca:	3401      	adds	r4, #1
 801eecc:	e7bd      	b.n	801ee4a <_printf_float+0x326>
 801eece:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eed0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eed2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eed4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eed6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eed8:	47a0      	blx	r4
 801eeda:	3001      	adds	r0, #1
 801eedc:	d1c1      	bne.n	801ee62 <_printf_float+0x33e>
 801eede:	e67d      	b.n	801ebdc <_printf_float+0xb8>
 801eee0:	19ba      	adds	r2, r7, r6
 801eee2:	0023      	movs	r3, r4
 801eee4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eee8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801eeea:	47b0      	blx	r6
 801eeec:	3001      	adds	r0, #1
 801eeee:	d1c2      	bne.n	801ee76 <_printf_float+0x352>
 801eef0:	e674      	b.n	801ebdc <_printf_float+0xb8>
 801eef2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801eef4:	930c      	str	r3, [sp, #48]	@ 0x30
 801eef6:	2b01      	cmp	r3, #1
 801eef8:	dc02      	bgt.n	801ef00 <_printf_float+0x3dc>
 801eefa:	2301      	movs	r3, #1
 801eefc:	421a      	tst	r2, r3
 801eefe:	d039      	beq.n	801ef74 <_printf_float+0x450>
 801ef00:	2301      	movs	r3, #1
 801ef02:	003a      	movs	r2, r7
 801ef04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef08:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef0a:	47b0      	blx	r6
 801ef0c:	3001      	adds	r0, #1
 801ef0e:	d100      	bne.n	801ef12 <_printf_float+0x3ee>
 801ef10:	e664      	b.n	801ebdc <_printf_float+0xb8>
 801ef12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ef16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef1a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef1c:	47b0      	blx	r6
 801ef1e:	3001      	adds	r0, #1
 801ef20:	d100      	bne.n	801ef24 <_printf_float+0x400>
 801ef22:	e65b      	b.n	801ebdc <_printf_float+0xb8>
 801ef24:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ef26:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ef28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef2a:	2200      	movs	r2, #0
 801ef2c:	3b01      	subs	r3, #1
 801ef2e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef30:	2300      	movs	r3, #0
 801ef32:	f7e1 fabd 	bl	80004b0 <__aeabi_dcmpeq>
 801ef36:	2800      	cmp	r0, #0
 801ef38:	d11a      	bne.n	801ef70 <_printf_float+0x44c>
 801ef3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef3c:	1c7a      	adds	r2, r7, #1
 801ef3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef42:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef44:	47b0      	blx	r6
 801ef46:	3001      	adds	r0, #1
 801ef48:	d10e      	bne.n	801ef68 <_printf_float+0x444>
 801ef4a:	e647      	b.n	801ebdc <_printf_float+0xb8>
 801ef4c:	002a      	movs	r2, r5
 801ef4e:	2301      	movs	r3, #1
 801ef50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef54:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ef56:	321a      	adds	r2, #26
 801ef58:	47b8      	blx	r7
 801ef5a:	3001      	adds	r0, #1
 801ef5c:	d100      	bne.n	801ef60 <_printf_float+0x43c>
 801ef5e:	e63d      	b.n	801ebdc <_printf_float+0xb8>
 801ef60:	3601      	adds	r6, #1
 801ef62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef64:	429e      	cmp	r6, r3
 801ef66:	dbf1      	blt.n	801ef4c <_printf_float+0x428>
 801ef68:	002a      	movs	r2, r5
 801ef6a:	0023      	movs	r3, r4
 801ef6c:	3250      	adds	r2, #80	@ 0x50
 801ef6e:	e6da      	b.n	801ed26 <_printf_float+0x202>
 801ef70:	2600      	movs	r6, #0
 801ef72:	e7f6      	b.n	801ef62 <_printf_float+0x43e>
 801ef74:	003a      	movs	r2, r7
 801ef76:	e7e2      	b.n	801ef3e <_printf_float+0x41a>
 801ef78:	002a      	movs	r2, r5
 801ef7a:	2301      	movs	r3, #1
 801ef7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef80:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef82:	3219      	adds	r2, #25
 801ef84:	47b0      	blx	r6
 801ef86:	3001      	adds	r0, #1
 801ef88:	d100      	bne.n	801ef8c <_printf_float+0x468>
 801ef8a:	e627      	b.n	801ebdc <_printf_float+0xb8>
 801ef8c:	3401      	adds	r4, #1
 801ef8e:	68eb      	ldr	r3, [r5, #12]
 801ef90:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ef92:	1a9b      	subs	r3, r3, r2
 801ef94:	42a3      	cmp	r3, r4
 801ef96:	dcef      	bgt.n	801ef78 <_printf_float+0x454>
 801ef98:	e6f9      	b.n	801ed8e <_printf_float+0x26a>
 801ef9a:	2400      	movs	r4, #0
 801ef9c:	e7f7      	b.n	801ef8e <_printf_float+0x46a>
 801ef9e:	46c0      	nop			@ (mov r8, r8)

0801efa0 <_printf_common>:
 801efa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801efa2:	0016      	movs	r6, r2
 801efa4:	9301      	str	r3, [sp, #4]
 801efa6:	688a      	ldr	r2, [r1, #8]
 801efa8:	690b      	ldr	r3, [r1, #16]
 801efaa:	000c      	movs	r4, r1
 801efac:	9000      	str	r0, [sp, #0]
 801efae:	4293      	cmp	r3, r2
 801efb0:	da00      	bge.n	801efb4 <_printf_common+0x14>
 801efb2:	0013      	movs	r3, r2
 801efb4:	0022      	movs	r2, r4
 801efb6:	6033      	str	r3, [r6, #0]
 801efb8:	3243      	adds	r2, #67	@ 0x43
 801efba:	7812      	ldrb	r2, [r2, #0]
 801efbc:	2a00      	cmp	r2, #0
 801efbe:	d001      	beq.n	801efc4 <_printf_common+0x24>
 801efc0:	3301      	adds	r3, #1
 801efc2:	6033      	str	r3, [r6, #0]
 801efc4:	6823      	ldr	r3, [r4, #0]
 801efc6:	069b      	lsls	r3, r3, #26
 801efc8:	d502      	bpl.n	801efd0 <_printf_common+0x30>
 801efca:	6833      	ldr	r3, [r6, #0]
 801efcc:	3302      	adds	r3, #2
 801efce:	6033      	str	r3, [r6, #0]
 801efd0:	6822      	ldr	r2, [r4, #0]
 801efd2:	2306      	movs	r3, #6
 801efd4:	0015      	movs	r5, r2
 801efd6:	401d      	ands	r5, r3
 801efd8:	421a      	tst	r2, r3
 801efda:	d027      	beq.n	801f02c <_printf_common+0x8c>
 801efdc:	0023      	movs	r3, r4
 801efde:	3343      	adds	r3, #67	@ 0x43
 801efe0:	781b      	ldrb	r3, [r3, #0]
 801efe2:	1e5a      	subs	r2, r3, #1
 801efe4:	4193      	sbcs	r3, r2
 801efe6:	6822      	ldr	r2, [r4, #0]
 801efe8:	0692      	lsls	r2, r2, #26
 801efea:	d430      	bmi.n	801f04e <_printf_common+0xae>
 801efec:	0022      	movs	r2, r4
 801efee:	9901      	ldr	r1, [sp, #4]
 801eff0:	9800      	ldr	r0, [sp, #0]
 801eff2:	9d08      	ldr	r5, [sp, #32]
 801eff4:	3243      	adds	r2, #67	@ 0x43
 801eff6:	47a8      	blx	r5
 801eff8:	3001      	adds	r0, #1
 801effa:	d025      	beq.n	801f048 <_printf_common+0xa8>
 801effc:	2206      	movs	r2, #6
 801effe:	6823      	ldr	r3, [r4, #0]
 801f000:	2500      	movs	r5, #0
 801f002:	4013      	ands	r3, r2
 801f004:	2b04      	cmp	r3, #4
 801f006:	d105      	bne.n	801f014 <_printf_common+0x74>
 801f008:	6833      	ldr	r3, [r6, #0]
 801f00a:	68e5      	ldr	r5, [r4, #12]
 801f00c:	1aed      	subs	r5, r5, r3
 801f00e:	43eb      	mvns	r3, r5
 801f010:	17db      	asrs	r3, r3, #31
 801f012:	401d      	ands	r5, r3
 801f014:	68a3      	ldr	r3, [r4, #8]
 801f016:	6922      	ldr	r2, [r4, #16]
 801f018:	4293      	cmp	r3, r2
 801f01a:	dd01      	ble.n	801f020 <_printf_common+0x80>
 801f01c:	1a9b      	subs	r3, r3, r2
 801f01e:	18ed      	adds	r5, r5, r3
 801f020:	2600      	movs	r6, #0
 801f022:	42b5      	cmp	r5, r6
 801f024:	d120      	bne.n	801f068 <_printf_common+0xc8>
 801f026:	2000      	movs	r0, #0
 801f028:	e010      	b.n	801f04c <_printf_common+0xac>
 801f02a:	3501      	adds	r5, #1
 801f02c:	68e3      	ldr	r3, [r4, #12]
 801f02e:	6832      	ldr	r2, [r6, #0]
 801f030:	1a9b      	subs	r3, r3, r2
 801f032:	42ab      	cmp	r3, r5
 801f034:	ddd2      	ble.n	801efdc <_printf_common+0x3c>
 801f036:	0022      	movs	r2, r4
 801f038:	2301      	movs	r3, #1
 801f03a:	9901      	ldr	r1, [sp, #4]
 801f03c:	9800      	ldr	r0, [sp, #0]
 801f03e:	9f08      	ldr	r7, [sp, #32]
 801f040:	3219      	adds	r2, #25
 801f042:	47b8      	blx	r7
 801f044:	3001      	adds	r0, #1
 801f046:	d1f0      	bne.n	801f02a <_printf_common+0x8a>
 801f048:	2001      	movs	r0, #1
 801f04a:	4240      	negs	r0, r0
 801f04c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f04e:	2030      	movs	r0, #48	@ 0x30
 801f050:	18e1      	adds	r1, r4, r3
 801f052:	3143      	adds	r1, #67	@ 0x43
 801f054:	7008      	strb	r0, [r1, #0]
 801f056:	0021      	movs	r1, r4
 801f058:	1c5a      	adds	r2, r3, #1
 801f05a:	3145      	adds	r1, #69	@ 0x45
 801f05c:	7809      	ldrb	r1, [r1, #0]
 801f05e:	18a2      	adds	r2, r4, r2
 801f060:	3243      	adds	r2, #67	@ 0x43
 801f062:	3302      	adds	r3, #2
 801f064:	7011      	strb	r1, [r2, #0]
 801f066:	e7c1      	b.n	801efec <_printf_common+0x4c>
 801f068:	0022      	movs	r2, r4
 801f06a:	2301      	movs	r3, #1
 801f06c:	9901      	ldr	r1, [sp, #4]
 801f06e:	9800      	ldr	r0, [sp, #0]
 801f070:	9f08      	ldr	r7, [sp, #32]
 801f072:	321a      	adds	r2, #26
 801f074:	47b8      	blx	r7
 801f076:	3001      	adds	r0, #1
 801f078:	d0e6      	beq.n	801f048 <_printf_common+0xa8>
 801f07a:	3601      	adds	r6, #1
 801f07c:	e7d1      	b.n	801f022 <_printf_common+0x82>
	...

0801f080 <_printf_i>:
 801f080:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f082:	b08b      	sub	sp, #44	@ 0x2c
 801f084:	9206      	str	r2, [sp, #24]
 801f086:	000a      	movs	r2, r1
 801f088:	3243      	adds	r2, #67	@ 0x43
 801f08a:	9307      	str	r3, [sp, #28]
 801f08c:	9005      	str	r0, [sp, #20]
 801f08e:	9203      	str	r2, [sp, #12]
 801f090:	7e0a      	ldrb	r2, [r1, #24]
 801f092:	000c      	movs	r4, r1
 801f094:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f096:	2a78      	cmp	r2, #120	@ 0x78
 801f098:	d809      	bhi.n	801f0ae <_printf_i+0x2e>
 801f09a:	2a62      	cmp	r2, #98	@ 0x62
 801f09c:	d80b      	bhi.n	801f0b6 <_printf_i+0x36>
 801f09e:	2a00      	cmp	r2, #0
 801f0a0:	d100      	bne.n	801f0a4 <_printf_i+0x24>
 801f0a2:	e0bc      	b.n	801f21e <_printf_i+0x19e>
 801f0a4:	497b      	ldr	r1, [pc, #492]	@ (801f294 <_printf_i+0x214>)
 801f0a6:	9104      	str	r1, [sp, #16]
 801f0a8:	2a58      	cmp	r2, #88	@ 0x58
 801f0aa:	d100      	bne.n	801f0ae <_printf_i+0x2e>
 801f0ac:	e090      	b.n	801f1d0 <_printf_i+0x150>
 801f0ae:	0025      	movs	r5, r4
 801f0b0:	3542      	adds	r5, #66	@ 0x42
 801f0b2:	702a      	strb	r2, [r5, #0]
 801f0b4:	e022      	b.n	801f0fc <_printf_i+0x7c>
 801f0b6:	0010      	movs	r0, r2
 801f0b8:	3863      	subs	r0, #99	@ 0x63
 801f0ba:	2815      	cmp	r0, #21
 801f0bc:	d8f7      	bhi.n	801f0ae <_printf_i+0x2e>
 801f0be:	f7e1 f867 	bl	8000190 <__gnu_thumb1_case_shi>
 801f0c2:	0016      	.short	0x0016
 801f0c4:	fff6001f 	.word	0xfff6001f
 801f0c8:	fff6fff6 	.word	0xfff6fff6
 801f0cc:	001ffff6 	.word	0x001ffff6
 801f0d0:	fff6fff6 	.word	0xfff6fff6
 801f0d4:	fff6fff6 	.word	0xfff6fff6
 801f0d8:	003600a1 	.word	0x003600a1
 801f0dc:	fff60080 	.word	0xfff60080
 801f0e0:	00b2fff6 	.word	0x00b2fff6
 801f0e4:	0036fff6 	.word	0x0036fff6
 801f0e8:	fff6fff6 	.word	0xfff6fff6
 801f0ec:	0084      	.short	0x0084
 801f0ee:	0025      	movs	r5, r4
 801f0f0:	681a      	ldr	r2, [r3, #0]
 801f0f2:	3542      	adds	r5, #66	@ 0x42
 801f0f4:	1d11      	adds	r1, r2, #4
 801f0f6:	6019      	str	r1, [r3, #0]
 801f0f8:	6813      	ldr	r3, [r2, #0]
 801f0fa:	702b      	strb	r3, [r5, #0]
 801f0fc:	2301      	movs	r3, #1
 801f0fe:	e0a0      	b.n	801f242 <_printf_i+0x1c2>
 801f100:	6818      	ldr	r0, [r3, #0]
 801f102:	6809      	ldr	r1, [r1, #0]
 801f104:	1d02      	adds	r2, r0, #4
 801f106:	060d      	lsls	r5, r1, #24
 801f108:	d50b      	bpl.n	801f122 <_printf_i+0xa2>
 801f10a:	6806      	ldr	r6, [r0, #0]
 801f10c:	601a      	str	r2, [r3, #0]
 801f10e:	2e00      	cmp	r6, #0
 801f110:	da03      	bge.n	801f11a <_printf_i+0x9a>
 801f112:	232d      	movs	r3, #45	@ 0x2d
 801f114:	9a03      	ldr	r2, [sp, #12]
 801f116:	4276      	negs	r6, r6
 801f118:	7013      	strb	r3, [r2, #0]
 801f11a:	4b5e      	ldr	r3, [pc, #376]	@ (801f294 <_printf_i+0x214>)
 801f11c:	270a      	movs	r7, #10
 801f11e:	9304      	str	r3, [sp, #16]
 801f120:	e018      	b.n	801f154 <_printf_i+0xd4>
 801f122:	6806      	ldr	r6, [r0, #0]
 801f124:	601a      	str	r2, [r3, #0]
 801f126:	0649      	lsls	r1, r1, #25
 801f128:	d5f1      	bpl.n	801f10e <_printf_i+0x8e>
 801f12a:	b236      	sxth	r6, r6
 801f12c:	e7ef      	b.n	801f10e <_printf_i+0x8e>
 801f12e:	6808      	ldr	r0, [r1, #0]
 801f130:	6819      	ldr	r1, [r3, #0]
 801f132:	c940      	ldmia	r1!, {r6}
 801f134:	0605      	lsls	r5, r0, #24
 801f136:	d402      	bmi.n	801f13e <_printf_i+0xbe>
 801f138:	0640      	lsls	r0, r0, #25
 801f13a:	d500      	bpl.n	801f13e <_printf_i+0xbe>
 801f13c:	b2b6      	uxth	r6, r6
 801f13e:	6019      	str	r1, [r3, #0]
 801f140:	4b54      	ldr	r3, [pc, #336]	@ (801f294 <_printf_i+0x214>)
 801f142:	270a      	movs	r7, #10
 801f144:	9304      	str	r3, [sp, #16]
 801f146:	2a6f      	cmp	r2, #111	@ 0x6f
 801f148:	d100      	bne.n	801f14c <_printf_i+0xcc>
 801f14a:	3f02      	subs	r7, #2
 801f14c:	0023      	movs	r3, r4
 801f14e:	2200      	movs	r2, #0
 801f150:	3343      	adds	r3, #67	@ 0x43
 801f152:	701a      	strb	r2, [r3, #0]
 801f154:	6863      	ldr	r3, [r4, #4]
 801f156:	60a3      	str	r3, [r4, #8]
 801f158:	2b00      	cmp	r3, #0
 801f15a:	db03      	blt.n	801f164 <_printf_i+0xe4>
 801f15c:	2104      	movs	r1, #4
 801f15e:	6822      	ldr	r2, [r4, #0]
 801f160:	438a      	bics	r2, r1
 801f162:	6022      	str	r2, [r4, #0]
 801f164:	2e00      	cmp	r6, #0
 801f166:	d102      	bne.n	801f16e <_printf_i+0xee>
 801f168:	9d03      	ldr	r5, [sp, #12]
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	d00c      	beq.n	801f188 <_printf_i+0x108>
 801f16e:	9d03      	ldr	r5, [sp, #12]
 801f170:	0030      	movs	r0, r6
 801f172:	0039      	movs	r1, r7
 801f174:	f7e1 f89c 	bl	80002b0 <__aeabi_uidivmod>
 801f178:	9b04      	ldr	r3, [sp, #16]
 801f17a:	3d01      	subs	r5, #1
 801f17c:	5c5b      	ldrb	r3, [r3, r1]
 801f17e:	702b      	strb	r3, [r5, #0]
 801f180:	0033      	movs	r3, r6
 801f182:	0006      	movs	r6, r0
 801f184:	429f      	cmp	r7, r3
 801f186:	d9f3      	bls.n	801f170 <_printf_i+0xf0>
 801f188:	2f08      	cmp	r7, #8
 801f18a:	d109      	bne.n	801f1a0 <_printf_i+0x120>
 801f18c:	6823      	ldr	r3, [r4, #0]
 801f18e:	07db      	lsls	r3, r3, #31
 801f190:	d506      	bpl.n	801f1a0 <_printf_i+0x120>
 801f192:	6862      	ldr	r2, [r4, #4]
 801f194:	6923      	ldr	r3, [r4, #16]
 801f196:	429a      	cmp	r2, r3
 801f198:	dc02      	bgt.n	801f1a0 <_printf_i+0x120>
 801f19a:	2330      	movs	r3, #48	@ 0x30
 801f19c:	3d01      	subs	r5, #1
 801f19e:	702b      	strb	r3, [r5, #0]
 801f1a0:	9b03      	ldr	r3, [sp, #12]
 801f1a2:	1b5b      	subs	r3, r3, r5
 801f1a4:	6123      	str	r3, [r4, #16]
 801f1a6:	9b07      	ldr	r3, [sp, #28]
 801f1a8:	0021      	movs	r1, r4
 801f1aa:	9300      	str	r3, [sp, #0]
 801f1ac:	9805      	ldr	r0, [sp, #20]
 801f1ae:	9b06      	ldr	r3, [sp, #24]
 801f1b0:	aa09      	add	r2, sp, #36	@ 0x24
 801f1b2:	f7ff fef5 	bl	801efa0 <_printf_common>
 801f1b6:	3001      	adds	r0, #1
 801f1b8:	d148      	bne.n	801f24c <_printf_i+0x1cc>
 801f1ba:	2001      	movs	r0, #1
 801f1bc:	4240      	negs	r0, r0
 801f1be:	b00b      	add	sp, #44	@ 0x2c
 801f1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1c2:	2220      	movs	r2, #32
 801f1c4:	6809      	ldr	r1, [r1, #0]
 801f1c6:	430a      	orrs	r2, r1
 801f1c8:	6022      	str	r2, [r4, #0]
 801f1ca:	2278      	movs	r2, #120	@ 0x78
 801f1cc:	4932      	ldr	r1, [pc, #200]	@ (801f298 <_printf_i+0x218>)
 801f1ce:	9104      	str	r1, [sp, #16]
 801f1d0:	0021      	movs	r1, r4
 801f1d2:	3145      	adds	r1, #69	@ 0x45
 801f1d4:	700a      	strb	r2, [r1, #0]
 801f1d6:	6819      	ldr	r1, [r3, #0]
 801f1d8:	6822      	ldr	r2, [r4, #0]
 801f1da:	c940      	ldmia	r1!, {r6}
 801f1dc:	0610      	lsls	r0, r2, #24
 801f1de:	d402      	bmi.n	801f1e6 <_printf_i+0x166>
 801f1e0:	0650      	lsls	r0, r2, #25
 801f1e2:	d500      	bpl.n	801f1e6 <_printf_i+0x166>
 801f1e4:	b2b6      	uxth	r6, r6
 801f1e6:	6019      	str	r1, [r3, #0]
 801f1e8:	07d3      	lsls	r3, r2, #31
 801f1ea:	d502      	bpl.n	801f1f2 <_printf_i+0x172>
 801f1ec:	2320      	movs	r3, #32
 801f1ee:	4313      	orrs	r3, r2
 801f1f0:	6023      	str	r3, [r4, #0]
 801f1f2:	2e00      	cmp	r6, #0
 801f1f4:	d001      	beq.n	801f1fa <_printf_i+0x17a>
 801f1f6:	2710      	movs	r7, #16
 801f1f8:	e7a8      	b.n	801f14c <_printf_i+0xcc>
 801f1fa:	2220      	movs	r2, #32
 801f1fc:	6823      	ldr	r3, [r4, #0]
 801f1fe:	4393      	bics	r3, r2
 801f200:	6023      	str	r3, [r4, #0]
 801f202:	e7f8      	b.n	801f1f6 <_printf_i+0x176>
 801f204:	681a      	ldr	r2, [r3, #0]
 801f206:	680d      	ldr	r5, [r1, #0]
 801f208:	1d10      	adds	r0, r2, #4
 801f20a:	6949      	ldr	r1, [r1, #20]
 801f20c:	6018      	str	r0, [r3, #0]
 801f20e:	6813      	ldr	r3, [r2, #0]
 801f210:	062e      	lsls	r6, r5, #24
 801f212:	d501      	bpl.n	801f218 <_printf_i+0x198>
 801f214:	6019      	str	r1, [r3, #0]
 801f216:	e002      	b.n	801f21e <_printf_i+0x19e>
 801f218:	066d      	lsls	r5, r5, #25
 801f21a:	d5fb      	bpl.n	801f214 <_printf_i+0x194>
 801f21c:	8019      	strh	r1, [r3, #0]
 801f21e:	2300      	movs	r3, #0
 801f220:	9d03      	ldr	r5, [sp, #12]
 801f222:	6123      	str	r3, [r4, #16]
 801f224:	e7bf      	b.n	801f1a6 <_printf_i+0x126>
 801f226:	681a      	ldr	r2, [r3, #0]
 801f228:	1d11      	adds	r1, r2, #4
 801f22a:	6019      	str	r1, [r3, #0]
 801f22c:	6815      	ldr	r5, [r2, #0]
 801f22e:	2100      	movs	r1, #0
 801f230:	0028      	movs	r0, r5
 801f232:	6862      	ldr	r2, [r4, #4]
 801f234:	f000 fb7b 	bl	801f92e <memchr>
 801f238:	2800      	cmp	r0, #0
 801f23a:	d001      	beq.n	801f240 <_printf_i+0x1c0>
 801f23c:	1b40      	subs	r0, r0, r5
 801f23e:	6060      	str	r0, [r4, #4]
 801f240:	6863      	ldr	r3, [r4, #4]
 801f242:	6123      	str	r3, [r4, #16]
 801f244:	2300      	movs	r3, #0
 801f246:	9a03      	ldr	r2, [sp, #12]
 801f248:	7013      	strb	r3, [r2, #0]
 801f24a:	e7ac      	b.n	801f1a6 <_printf_i+0x126>
 801f24c:	002a      	movs	r2, r5
 801f24e:	6923      	ldr	r3, [r4, #16]
 801f250:	9906      	ldr	r1, [sp, #24]
 801f252:	9805      	ldr	r0, [sp, #20]
 801f254:	9d07      	ldr	r5, [sp, #28]
 801f256:	47a8      	blx	r5
 801f258:	3001      	adds	r0, #1
 801f25a:	d0ae      	beq.n	801f1ba <_printf_i+0x13a>
 801f25c:	6823      	ldr	r3, [r4, #0]
 801f25e:	079b      	lsls	r3, r3, #30
 801f260:	d415      	bmi.n	801f28e <_printf_i+0x20e>
 801f262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f264:	68e0      	ldr	r0, [r4, #12]
 801f266:	4298      	cmp	r0, r3
 801f268:	daa9      	bge.n	801f1be <_printf_i+0x13e>
 801f26a:	0018      	movs	r0, r3
 801f26c:	e7a7      	b.n	801f1be <_printf_i+0x13e>
 801f26e:	0022      	movs	r2, r4
 801f270:	2301      	movs	r3, #1
 801f272:	9906      	ldr	r1, [sp, #24]
 801f274:	9805      	ldr	r0, [sp, #20]
 801f276:	9e07      	ldr	r6, [sp, #28]
 801f278:	3219      	adds	r2, #25
 801f27a:	47b0      	blx	r6
 801f27c:	3001      	adds	r0, #1
 801f27e:	d09c      	beq.n	801f1ba <_printf_i+0x13a>
 801f280:	3501      	adds	r5, #1
 801f282:	68e3      	ldr	r3, [r4, #12]
 801f284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f286:	1a9b      	subs	r3, r3, r2
 801f288:	42ab      	cmp	r3, r5
 801f28a:	dcf0      	bgt.n	801f26e <_printf_i+0x1ee>
 801f28c:	e7e9      	b.n	801f262 <_printf_i+0x1e2>
 801f28e:	2500      	movs	r5, #0
 801f290:	e7f7      	b.n	801f282 <_printf_i+0x202>
 801f292:	46c0      	nop			@ (mov r8, r8)
 801f294:	08024f83 	.word	0x08024f83
 801f298:	08024f94 	.word	0x08024f94

0801f29c <std>:
 801f29c:	2300      	movs	r3, #0
 801f29e:	b510      	push	{r4, lr}
 801f2a0:	0004      	movs	r4, r0
 801f2a2:	6003      	str	r3, [r0, #0]
 801f2a4:	6043      	str	r3, [r0, #4]
 801f2a6:	6083      	str	r3, [r0, #8]
 801f2a8:	8181      	strh	r1, [r0, #12]
 801f2aa:	6643      	str	r3, [r0, #100]	@ 0x64
 801f2ac:	81c2      	strh	r2, [r0, #14]
 801f2ae:	6103      	str	r3, [r0, #16]
 801f2b0:	6143      	str	r3, [r0, #20]
 801f2b2:	6183      	str	r3, [r0, #24]
 801f2b4:	0019      	movs	r1, r3
 801f2b6:	2208      	movs	r2, #8
 801f2b8:	305c      	adds	r0, #92	@ 0x5c
 801f2ba:	f000 fa67 	bl	801f78c <memset>
 801f2be:	4b0b      	ldr	r3, [pc, #44]	@ (801f2ec <std+0x50>)
 801f2c0:	6224      	str	r4, [r4, #32]
 801f2c2:	6263      	str	r3, [r4, #36]	@ 0x24
 801f2c4:	4b0a      	ldr	r3, [pc, #40]	@ (801f2f0 <std+0x54>)
 801f2c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f2c8:	4b0a      	ldr	r3, [pc, #40]	@ (801f2f4 <std+0x58>)
 801f2ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f2cc:	4b0a      	ldr	r3, [pc, #40]	@ (801f2f8 <std+0x5c>)
 801f2ce:	6323      	str	r3, [r4, #48]	@ 0x30
 801f2d0:	4b0a      	ldr	r3, [pc, #40]	@ (801f2fc <std+0x60>)
 801f2d2:	429c      	cmp	r4, r3
 801f2d4:	d005      	beq.n	801f2e2 <std+0x46>
 801f2d6:	4b0a      	ldr	r3, [pc, #40]	@ (801f300 <std+0x64>)
 801f2d8:	429c      	cmp	r4, r3
 801f2da:	d002      	beq.n	801f2e2 <std+0x46>
 801f2dc:	4b09      	ldr	r3, [pc, #36]	@ (801f304 <std+0x68>)
 801f2de:	429c      	cmp	r4, r3
 801f2e0:	d103      	bne.n	801f2ea <std+0x4e>
 801f2e2:	0020      	movs	r0, r4
 801f2e4:	3058      	adds	r0, #88	@ 0x58
 801f2e6:	f000 fb1f 	bl	801f928 <__retarget_lock_init_recursive>
 801f2ea:	bd10      	pop	{r4, pc}
 801f2ec:	0801f545 	.word	0x0801f545
 801f2f0:	0801f56d 	.word	0x0801f56d
 801f2f4:	0801f5a5 	.word	0x0801f5a5
 801f2f8:	0801f5d1 	.word	0x0801f5d1
 801f2fc:	200037b4 	.word	0x200037b4
 801f300:	2000381c 	.word	0x2000381c
 801f304:	20003884 	.word	0x20003884

0801f308 <stdio_exit_handler>:
 801f308:	b510      	push	{r4, lr}
 801f30a:	4a03      	ldr	r2, [pc, #12]	@ (801f318 <stdio_exit_handler+0x10>)
 801f30c:	4903      	ldr	r1, [pc, #12]	@ (801f31c <stdio_exit_handler+0x14>)
 801f30e:	4804      	ldr	r0, [pc, #16]	@ (801f320 <stdio_exit_handler+0x18>)
 801f310:	f000 f86c 	bl	801f3ec <_fwalk_sglue>
 801f314:	bd10      	pop	{r4, pc}
 801f316:	46c0      	nop			@ (mov r8, r8)
 801f318:	20000250 	.word	0x20000250
 801f31c:	08021f4d 	.word	0x08021f4d
 801f320:	200003cc 	.word	0x200003cc

0801f324 <cleanup_stdio>:
 801f324:	6841      	ldr	r1, [r0, #4]
 801f326:	4b0b      	ldr	r3, [pc, #44]	@ (801f354 <cleanup_stdio+0x30>)
 801f328:	b510      	push	{r4, lr}
 801f32a:	0004      	movs	r4, r0
 801f32c:	4299      	cmp	r1, r3
 801f32e:	d001      	beq.n	801f334 <cleanup_stdio+0x10>
 801f330:	f002 fe0c 	bl	8021f4c <_fflush_r>
 801f334:	68a1      	ldr	r1, [r4, #8]
 801f336:	4b08      	ldr	r3, [pc, #32]	@ (801f358 <cleanup_stdio+0x34>)
 801f338:	4299      	cmp	r1, r3
 801f33a:	d002      	beq.n	801f342 <cleanup_stdio+0x1e>
 801f33c:	0020      	movs	r0, r4
 801f33e:	f002 fe05 	bl	8021f4c <_fflush_r>
 801f342:	68e1      	ldr	r1, [r4, #12]
 801f344:	4b05      	ldr	r3, [pc, #20]	@ (801f35c <cleanup_stdio+0x38>)
 801f346:	4299      	cmp	r1, r3
 801f348:	d002      	beq.n	801f350 <cleanup_stdio+0x2c>
 801f34a:	0020      	movs	r0, r4
 801f34c:	f002 fdfe 	bl	8021f4c <_fflush_r>
 801f350:	bd10      	pop	{r4, pc}
 801f352:	46c0      	nop			@ (mov r8, r8)
 801f354:	200037b4 	.word	0x200037b4
 801f358:	2000381c 	.word	0x2000381c
 801f35c:	20003884 	.word	0x20003884

0801f360 <global_stdio_init.part.0>:
 801f360:	b510      	push	{r4, lr}
 801f362:	4b09      	ldr	r3, [pc, #36]	@ (801f388 <global_stdio_init.part.0+0x28>)
 801f364:	4a09      	ldr	r2, [pc, #36]	@ (801f38c <global_stdio_init.part.0+0x2c>)
 801f366:	2104      	movs	r1, #4
 801f368:	601a      	str	r2, [r3, #0]
 801f36a:	4809      	ldr	r0, [pc, #36]	@ (801f390 <global_stdio_init.part.0+0x30>)
 801f36c:	2200      	movs	r2, #0
 801f36e:	f7ff ff95 	bl	801f29c <std>
 801f372:	2201      	movs	r2, #1
 801f374:	2109      	movs	r1, #9
 801f376:	4807      	ldr	r0, [pc, #28]	@ (801f394 <global_stdio_init.part.0+0x34>)
 801f378:	f7ff ff90 	bl	801f29c <std>
 801f37c:	2202      	movs	r2, #2
 801f37e:	2112      	movs	r1, #18
 801f380:	4805      	ldr	r0, [pc, #20]	@ (801f398 <global_stdio_init.part.0+0x38>)
 801f382:	f7ff ff8b 	bl	801f29c <std>
 801f386:	bd10      	pop	{r4, pc}
 801f388:	200038ec 	.word	0x200038ec
 801f38c:	0801f309 	.word	0x0801f309
 801f390:	200037b4 	.word	0x200037b4
 801f394:	2000381c 	.word	0x2000381c
 801f398:	20003884 	.word	0x20003884

0801f39c <__sfp_lock_acquire>:
 801f39c:	b510      	push	{r4, lr}
 801f39e:	4802      	ldr	r0, [pc, #8]	@ (801f3a8 <__sfp_lock_acquire+0xc>)
 801f3a0:	f000 fac3 	bl	801f92a <__retarget_lock_acquire_recursive>
 801f3a4:	bd10      	pop	{r4, pc}
 801f3a6:	46c0      	nop			@ (mov r8, r8)
 801f3a8:	200038f5 	.word	0x200038f5

0801f3ac <__sfp_lock_release>:
 801f3ac:	b510      	push	{r4, lr}
 801f3ae:	4802      	ldr	r0, [pc, #8]	@ (801f3b8 <__sfp_lock_release+0xc>)
 801f3b0:	f000 fabc 	bl	801f92c <__retarget_lock_release_recursive>
 801f3b4:	bd10      	pop	{r4, pc}
 801f3b6:	46c0      	nop			@ (mov r8, r8)
 801f3b8:	200038f5 	.word	0x200038f5

0801f3bc <__sinit>:
 801f3bc:	b510      	push	{r4, lr}
 801f3be:	0004      	movs	r4, r0
 801f3c0:	f7ff ffec 	bl	801f39c <__sfp_lock_acquire>
 801f3c4:	6a23      	ldr	r3, [r4, #32]
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	d002      	beq.n	801f3d0 <__sinit+0x14>
 801f3ca:	f7ff ffef 	bl	801f3ac <__sfp_lock_release>
 801f3ce:	bd10      	pop	{r4, pc}
 801f3d0:	4b04      	ldr	r3, [pc, #16]	@ (801f3e4 <__sinit+0x28>)
 801f3d2:	6223      	str	r3, [r4, #32]
 801f3d4:	4b04      	ldr	r3, [pc, #16]	@ (801f3e8 <__sinit+0x2c>)
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d1f6      	bne.n	801f3ca <__sinit+0xe>
 801f3dc:	f7ff ffc0 	bl	801f360 <global_stdio_init.part.0>
 801f3e0:	e7f3      	b.n	801f3ca <__sinit+0xe>
 801f3e2:	46c0      	nop			@ (mov r8, r8)
 801f3e4:	0801f325 	.word	0x0801f325
 801f3e8:	200038ec 	.word	0x200038ec

0801f3ec <_fwalk_sglue>:
 801f3ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f3ee:	0014      	movs	r4, r2
 801f3f0:	2600      	movs	r6, #0
 801f3f2:	9000      	str	r0, [sp, #0]
 801f3f4:	9101      	str	r1, [sp, #4]
 801f3f6:	68a5      	ldr	r5, [r4, #8]
 801f3f8:	6867      	ldr	r7, [r4, #4]
 801f3fa:	3f01      	subs	r7, #1
 801f3fc:	d504      	bpl.n	801f408 <_fwalk_sglue+0x1c>
 801f3fe:	6824      	ldr	r4, [r4, #0]
 801f400:	2c00      	cmp	r4, #0
 801f402:	d1f8      	bne.n	801f3f6 <_fwalk_sglue+0xa>
 801f404:	0030      	movs	r0, r6
 801f406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f408:	89ab      	ldrh	r3, [r5, #12]
 801f40a:	2b01      	cmp	r3, #1
 801f40c:	d908      	bls.n	801f420 <_fwalk_sglue+0x34>
 801f40e:	220e      	movs	r2, #14
 801f410:	5eab      	ldrsh	r3, [r5, r2]
 801f412:	3301      	adds	r3, #1
 801f414:	d004      	beq.n	801f420 <_fwalk_sglue+0x34>
 801f416:	0029      	movs	r1, r5
 801f418:	9800      	ldr	r0, [sp, #0]
 801f41a:	9b01      	ldr	r3, [sp, #4]
 801f41c:	4798      	blx	r3
 801f41e:	4306      	orrs	r6, r0
 801f420:	3568      	adds	r5, #104	@ 0x68
 801f422:	e7ea      	b.n	801f3fa <_fwalk_sglue+0xe>

0801f424 <iprintf>:
 801f424:	b40f      	push	{r0, r1, r2, r3}
 801f426:	b507      	push	{r0, r1, r2, lr}
 801f428:	4905      	ldr	r1, [pc, #20]	@ (801f440 <iprintf+0x1c>)
 801f42a:	ab04      	add	r3, sp, #16
 801f42c:	6808      	ldr	r0, [r1, #0]
 801f42e:	cb04      	ldmia	r3!, {r2}
 801f430:	6881      	ldr	r1, [r0, #8]
 801f432:	9301      	str	r3, [sp, #4]
 801f434:	f002 fbe8 	bl	8021c08 <_vfiprintf_r>
 801f438:	b003      	add	sp, #12
 801f43a:	bc08      	pop	{r3}
 801f43c:	b004      	add	sp, #16
 801f43e:	4718      	bx	r3
 801f440:	200003c8 	.word	0x200003c8

0801f444 <_puts_r>:
 801f444:	6a03      	ldr	r3, [r0, #32]
 801f446:	b570      	push	{r4, r5, r6, lr}
 801f448:	0005      	movs	r5, r0
 801f44a:	000e      	movs	r6, r1
 801f44c:	6884      	ldr	r4, [r0, #8]
 801f44e:	2b00      	cmp	r3, #0
 801f450:	d101      	bne.n	801f456 <_puts_r+0x12>
 801f452:	f7ff ffb3 	bl	801f3bc <__sinit>
 801f456:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f458:	07db      	lsls	r3, r3, #31
 801f45a:	d405      	bmi.n	801f468 <_puts_r+0x24>
 801f45c:	89a3      	ldrh	r3, [r4, #12]
 801f45e:	059b      	lsls	r3, r3, #22
 801f460:	d402      	bmi.n	801f468 <_puts_r+0x24>
 801f462:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f464:	f000 fa61 	bl	801f92a <__retarget_lock_acquire_recursive>
 801f468:	89a3      	ldrh	r3, [r4, #12]
 801f46a:	071b      	lsls	r3, r3, #28
 801f46c:	d502      	bpl.n	801f474 <_puts_r+0x30>
 801f46e:	6923      	ldr	r3, [r4, #16]
 801f470:	2b00      	cmp	r3, #0
 801f472:	d11f      	bne.n	801f4b4 <_puts_r+0x70>
 801f474:	0021      	movs	r1, r4
 801f476:	0028      	movs	r0, r5
 801f478:	f000 f92a 	bl	801f6d0 <__swsetup_r>
 801f47c:	2800      	cmp	r0, #0
 801f47e:	d019      	beq.n	801f4b4 <_puts_r+0x70>
 801f480:	2501      	movs	r5, #1
 801f482:	426d      	negs	r5, r5
 801f484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f486:	07db      	lsls	r3, r3, #31
 801f488:	d405      	bmi.n	801f496 <_puts_r+0x52>
 801f48a:	89a3      	ldrh	r3, [r4, #12]
 801f48c:	059b      	lsls	r3, r3, #22
 801f48e:	d402      	bmi.n	801f496 <_puts_r+0x52>
 801f490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f492:	f000 fa4b 	bl	801f92c <__retarget_lock_release_recursive>
 801f496:	0028      	movs	r0, r5
 801f498:	bd70      	pop	{r4, r5, r6, pc}
 801f49a:	3601      	adds	r6, #1
 801f49c:	60a3      	str	r3, [r4, #8]
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	da04      	bge.n	801f4ac <_puts_r+0x68>
 801f4a2:	69a2      	ldr	r2, [r4, #24]
 801f4a4:	429a      	cmp	r2, r3
 801f4a6:	dc16      	bgt.n	801f4d6 <_puts_r+0x92>
 801f4a8:	290a      	cmp	r1, #10
 801f4aa:	d014      	beq.n	801f4d6 <_puts_r+0x92>
 801f4ac:	6823      	ldr	r3, [r4, #0]
 801f4ae:	1c5a      	adds	r2, r3, #1
 801f4b0:	6022      	str	r2, [r4, #0]
 801f4b2:	7019      	strb	r1, [r3, #0]
 801f4b4:	68a3      	ldr	r3, [r4, #8]
 801f4b6:	7831      	ldrb	r1, [r6, #0]
 801f4b8:	3b01      	subs	r3, #1
 801f4ba:	2900      	cmp	r1, #0
 801f4bc:	d1ed      	bne.n	801f49a <_puts_r+0x56>
 801f4be:	60a3      	str	r3, [r4, #8]
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	da0f      	bge.n	801f4e4 <_puts_r+0xa0>
 801f4c4:	0022      	movs	r2, r4
 801f4c6:	0028      	movs	r0, r5
 801f4c8:	310a      	adds	r1, #10
 801f4ca:	f000 f8bf 	bl	801f64c <__swbuf_r>
 801f4ce:	3001      	adds	r0, #1
 801f4d0:	d0d6      	beq.n	801f480 <_puts_r+0x3c>
 801f4d2:	250a      	movs	r5, #10
 801f4d4:	e7d6      	b.n	801f484 <_puts_r+0x40>
 801f4d6:	0022      	movs	r2, r4
 801f4d8:	0028      	movs	r0, r5
 801f4da:	f000 f8b7 	bl	801f64c <__swbuf_r>
 801f4de:	3001      	adds	r0, #1
 801f4e0:	d1e8      	bne.n	801f4b4 <_puts_r+0x70>
 801f4e2:	e7cd      	b.n	801f480 <_puts_r+0x3c>
 801f4e4:	6823      	ldr	r3, [r4, #0]
 801f4e6:	1c5a      	adds	r2, r3, #1
 801f4e8:	6022      	str	r2, [r4, #0]
 801f4ea:	220a      	movs	r2, #10
 801f4ec:	701a      	strb	r2, [r3, #0]
 801f4ee:	e7f0      	b.n	801f4d2 <_puts_r+0x8e>

0801f4f0 <puts>:
 801f4f0:	b510      	push	{r4, lr}
 801f4f2:	4b03      	ldr	r3, [pc, #12]	@ (801f500 <puts+0x10>)
 801f4f4:	0001      	movs	r1, r0
 801f4f6:	6818      	ldr	r0, [r3, #0]
 801f4f8:	f7ff ffa4 	bl	801f444 <_puts_r>
 801f4fc:	bd10      	pop	{r4, pc}
 801f4fe:	46c0      	nop			@ (mov r8, r8)
 801f500:	200003c8 	.word	0x200003c8

0801f504 <siprintf>:
 801f504:	b40e      	push	{r1, r2, r3}
 801f506:	b500      	push	{lr}
 801f508:	490b      	ldr	r1, [pc, #44]	@ (801f538 <siprintf+0x34>)
 801f50a:	b09c      	sub	sp, #112	@ 0x70
 801f50c:	ab1d      	add	r3, sp, #116	@ 0x74
 801f50e:	9002      	str	r0, [sp, #8]
 801f510:	9006      	str	r0, [sp, #24]
 801f512:	9107      	str	r1, [sp, #28]
 801f514:	9104      	str	r1, [sp, #16]
 801f516:	4809      	ldr	r0, [pc, #36]	@ (801f53c <siprintf+0x38>)
 801f518:	4909      	ldr	r1, [pc, #36]	@ (801f540 <siprintf+0x3c>)
 801f51a:	cb04      	ldmia	r3!, {r2}
 801f51c:	9105      	str	r1, [sp, #20]
 801f51e:	6800      	ldr	r0, [r0, #0]
 801f520:	a902      	add	r1, sp, #8
 801f522:	9301      	str	r3, [sp, #4]
 801f524:	f002 fa4a 	bl	80219bc <_svfiprintf_r>
 801f528:	2200      	movs	r2, #0
 801f52a:	9b02      	ldr	r3, [sp, #8]
 801f52c:	701a      	strb	r2, [r3, #0]
 801f52e:	b01c      	add	sp, #112	@ 0x70
 801f530:	bc08      	pop	{r3}
 801f532:	b003      	add	sp, #12
 801f534:	4718      	bx	r3
 801f536:	46c0      	nop			@ (mov r8, r8)
 801f538:	7fffffff 	.word	0x7fffffff
 801f53c:	200003c8 	.word	0x200003c8
 801f540:	ffff0208 	.word	0xffff0208

0801f544 <__sread>:
 801f544:	b570      	push	{r4, r5, r6, lr}
 801f546:	000c      	movs	r4, r1
 801f548:	250e      	movs	r5, #14
 801f54a:	5f49      	ldrsh	r1, [r1, r5]
 801f54c:	f000 f99a 	bl	801f884 <_read_r>
 801f550:	2800      	cmp	r0, #0
 801f552:	db03      	blt.n	801f55c <__sread+0x18>
 801f554:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f556:	181b      	adds	r3, r3, r0
 801f558:	6563      	str	r3, [r4, #84]	@ 0x54
 801f55a:	bd70      	pop	{r4, r5, r6, pc}
 801f55c:	89a3      	ldrh	r3, [r4, #12]
 801f55e:	4a02      	ldr	r2, [pc, #8]	@ (801f568 <__sread+0x24>)
 801f560:	4013      	ands	r3, r2
 801f562:	81a3      	strh	r3, [r4, #12]
 801f564:	e7f9      	b.n	801f55a <__sread+0x16>
 801f566:	46c0      	nop			@ (mov r8, r8)
 801f568:	ffffefff 	.word	0xffffefff

0801f56c <__swrite>:
 801f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f56e:	001f      	movs	r7, r3
 801f570:	898b      	ldrh	r3, [r1, #12]
 801f572:	0005      	movs	r5, r0
 801f574:	000c      	movs	r4, r1
 801f576:	0016      	movs	r6, r2
 801f578:	05db      	lsls	r3, r3, #23
 801f57a:	d505      	bpl.n	801f588 <__swrite+0x1c>
 801f57c:	230e      	movs	r3, #14
 801f57e:	5ec9      	ldrsh	r1, [r1, r3]
 801f580:	2200      	movs	r2, #0
 801f582:	2302      	movs	r3, #2
 801f584:	f000 f96a 	bl	801f85c <_lseek_r>
 801f588:	89a3      	ldrh	r3, [r4, #12]
 801f58a:	4a05      	ldr	r2, [pc, #20]	@ (801f5a0 <__swrite+0x34>)
 801f58c:	0028      	movs	r0, r5
 801f58e:	4013      	ands	r3, r2
 801f590:	81a3      	strh	r3, [r4, #12]
 801f592:	0032      	movs	r2, r6
 801f594:	230e      	movs	r3, #14
 801f596:	5ee1      	ldrsh	r1, [r4, r3]
 801f598:	003b      	movs	r3, r7
 801f59a:	f000 f987 	bl	801f8ac <_write_r>
 801f59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5a0:	ffffefff 	.word	0xffffefff

0801f5a4 <__sseek>:
 801f5a4:	b570      	push	{r4, r5, r6, lr}
 801f5a6:	000c      	movs	r4, r1
 801f5a8:	250e      	movs	r5, #14
 801f5aa:	5f49      	ldrsh	r1, [r1, r5]
 801f5ac:	f000 f956 	bl	801f85c <_lseek_r>
 801f5b0:	89a3      	ldrh	r3, [r4, #12]
 801f5b2:	1c42      	adds	r2, r0, #1
 801f5b4:	d103      	bne.n	801f5be <__sseek+0x1a>
 801f5b6:	4a05      	ldr	r2, [pc, #20]	@ (801f5cc <__sseek+0x28>)
 801f5b8:	4013      	ands	r3, r2
 801f5ba:	81a3      	strh	r3, [r4, #12]
 801f5bc:	bd70      	pop	{r4, r5, r6, pc}
 801f5be:	2280      	movs	r2, #128	@ 0x80
 801f5c0:	0152      	lsls	r2, r2, #5
 801f5c2:	4313      	orrs	r3, r2
 801f5c4:	81a3      	strh	r3, [r4, #12]
 801f5c6:	6560      	str	r0, [r4, #84]	@ 0x54
 801f5c8:	e7f8      	b.n	801f5bc <__sseek+0x18>
 801f5ca:	46c0      	nop			@ (mov r8, r8)
 801f5cc:	ffffefff 	.word	0xffffefff

0801f5d0 <__sclose>:
 801f5d0:	b510      	push	{r4, lr}
 801f5d2:	230e      	movs	r3, #14
 801f5d4:	5ec9      	ldrsh	r1, [r1, r3]
 801f5d6:	f000 f92f 	bl	801f838 <_close_r>
 801f5da:	bd10      	pop	{r4, pc}

0801f5dc <_vsniprintf_r>:
 801f5dc:	b530      	push	{r4, r5, lr}
 801f5de:	0014      	movs	r4, r2
 801f5e0:	0005      	movs	r5, r0
 801f5e2:	001a      	movs	r2, r3
 801f5e4:	b09b      	sub	sp, #108	@ 0x6c
 801f5e6:	2c00      	cmp	r4, #0
 801f5e8:	da05      	bge.n	801f5f6 <_vsniprintf_r+0x1a>
 801f5ea:	238b      	movs	r3, #139	@ 0x8b
 801f5ec:	6003      	str	r3, [r0, #0]
 801f5ee:	2001      	movs	r0, #1
 801f5f0:	4240      	negs	r0, r0
 801f5f2:	b01b      	add	sp, #108	@ 0x6c
 801f5f4:	bd30      	pop	{r4, r5, pc}
 801f5f6:	2382      	movs	r3, #130	@ 0x82
 801f5f8:	4668      	mov	r0, sp
 801f5fa:	009b      	lsls	r3, r3, #2
 801f5fc:	8183      	strh	r3, [r0, #12]
 801f5fe:	2300      	movs	r3, #0
 801f600:	9100      	str	r1, [sp, #0]
 801f602:	9104      	str	r1, [sp, #16]
 801f604:	429c      	cmp	r4, r3
 801f606:	d000      	beq.n	801f60a <_vsniprintf_r+0x2e>
 801f608:	1e63      	subs	r3, r4, #1
 801f60a:	9302      	str	r3, [sp, #8]
 801f60c:	9305      	str	r3, [sp, #20]
 801f60e:	2301      	movs	r3, #1
 801f610:	4669      	mov	r1, sp
 801f612:	425b      	negs	r3, r3
 801f614:	81cb      	strh	r3, [r1, #14]
 801f616:	0028      	movs	r0, r5
 801f618:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f61a:	f002 f9cf 	bl	80219bc <_svfiprintf_r>
 801f61e:	1c43      	adds	r3, r0, #1
 801f620:	da01      	bge.n	801f626 <_vsniprintf_r+0x4a>
 801f622:	238b      	movs	r3, #139	@ 0x8b
 801f624:	602b      	str	r3, [r5, #0]
 801f626:	2c00      	cmp	r4, #0
 801f628:	d0e3      	beq.n	801f5f2 <_vsniprintf_r+0x16>
 801f62a:	2200      	movs	r2, #0
 801f62c:	9b00      	ldr	r3, [sp, #0]
 801f62e:	701a      	strb	r2, [r3, #0]
 801f630:	e7df      	b.n	801f5f2 <_vsniprintf_r+0x16>
	...

0801f634 <vsniprintf>:
 801f634:	b513      	push	{r0, r1, r4, lr}
 801f636:	4c04      	ldr	r4, [pc, #16]	@ (801f648 <vsniprintf+0x14>)
 801f638:	9300      	str	r3, [sp, #0]
 801f63a:	0013      	movs	r3, r2
 801f63c:	000a      	movs	r2, r1
 801f63e:	0001      	movs	r1, r0
 801f640:	6820      	ldr	r0, [r4, #0]
 801f642:	f7ff ffcb 	bl	801f5dc <_vsniprintf_r>
 801f646:	bd16      	pop	{r1, r2, r4, pc}
 801f648:	200003c8 	.word	0x200003c8

0801f64c <__swbuf_r>:
 801f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f64e:	0006      	movs	r6, r0
 801f650:	000d      	movs	r5, r1
 801f652:	0014      	movs	r4, r2
 801f654:	2800      	cmp	r0, #0
 801f656:	d004      	beq.n	801f662 <__swbuf_r+0x16>
 801f658:	6a03      	ldr	r3, [r0, #32]
 801f65a:	2b00      	cmp	r3, #0
 801f65c:	d101      	bne.n	801f662 <__swbuf_r+0x16>
 801f65e:	f7ff fead 	bl	801f3bc <__sinit>
 801f662:	69a3      	ldr	r3, [r4, #24]
 801f664:	60a3      	str	r3, [r4, #8]
 801f666:	89a3      	ldrh	r3, [r4, #12]
 801f668:	071b      	lsls	r3, r3, #28
 801f66a:	d502      	bpl.n	801f672 <__swbuf_r+0x26>
 801f66c:	6923      	ldr	r3, [r4, #16]
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d109      	bne.n	801f686 <__swbuf_r+0x3a>
 801f672:	0021      	movs	r1, r4
 801f674:	0030      	movs	r0, r6
 801f676:	f000 f82b 	bl	801f6d0 <__swsetup_r>
 801f67a:	2800      	cmp	r0, #0
 801f67c:	d003      	beq.n	801f686 <__swbuf_r+0x3a>
 801f67e:	2501      	movs	r5, #1
 801f680:	426d      	negs	r5, r5
 801f682:	0028      	movs	r0, r5
 801f684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f686:	6923      	ldr	r3, [r4, #16]
 801f688:	6820      	ldr	r0, [r4, #0]
 801f68a:	b2ef      	uxtb	r7, r5
 801f68c:	1ac0      	subs	r0, r0, r3
 801f68e:	6963      	ldr	r3, [r4, #20]
 801f690:	b2ed      	uxtb	r5, r5
 801f692:	4283      	cmp	r3, r0
 801f694:	dc05      	bgt.n	801f6a2 <__swbuf_r+0x56>
 801f696:	0021      	movs	r1, r4
 801f698:	0030      	movs	r0, r6
 801f69a:	f002 fc57 	bl	8021f4c <_fflush_r>
 801f69e:	2800      	cmp	r0, #0
 801f6a0:	d1ed      	bne.n	801f67e <__swbuf_r+0x32>
 801f6a2:	68a3      	ldr	r3, [r4, #8]
 801f6a4:	3001      	adds	r0, #1
 801f6a6:	3b01      	subs	r3, #1
 801f6a8:	60a3      	str	r3, [r4, #8]
 801f6aa:	6823      	ldr	r3, [r4, #0]
 801f6ac:	1c5a      	adds	r2, r3, #1
 801f6ae:	6022      	str	r2, [r4, #0]
 801f6b0:	701f      	strb	r7, [r3, #0]
 801f6b2:	6963      	ldr	r3, [r4, #20]
 801f6b4:	4283      	cmp	r3, r0
 801f6b6:	d004      	beq.n	801f6c2 <__swbuf_r+0x76>
 801f6b8:	89a3      	ldrh	r3, [r4, #12]
 801f6ba:	07db      	lsls	r3, r3, #31
 801f6bc:	d5e1      	bpl.n	801f682 <__swbuf_r+0x36>
 801f6be:	2d0a      	cmp	r5, #10
 801f6c0:	d1df      	bne.n	801f682 <__swbuf_r+0x36>
 801f6c2:	0021      	movs	r1, r4
 801f6c4:	0030      	movs	r0, r6
 801f6c6:	f002 fc41 	bl	8021f4c <_fflush_r>
 801f6ca:	2800      	cmp	r0, #0
 801f6cc:	d0d9      	beq.n	801f682 <__swbuf_r+0x36>
 801f6ce:	e7d6      	b.n	801f67e <__swbuf_r+0x32>

0801f6d0 <__swsetup_r>:
 801f6d0:	4b2d      	ldr	r3, [pc, #180]	@ (801f788 <__swsetup_r+0xb8>)
 801f6d2:	b570      	push	{r4, r5, r6, lr}
 801f6d4:	0005      	movs	r5, r0
 801f6d6:	6818      	ldr	r0, [r3, #0]
 801f6d8:	000c      	movs	r4, r1
 801f6da:	2800      	cmp	r0, #0
 801f6dc:	d004      	beq.n	801f6e8 <__swsetup_r+0x18>
 801f6de:	6a03      	ldr	r3, [r0, #32]
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d101      	bne.n	801f6e8 <__swsetup_r+0x18>
 801f6e4:	f7ff fe6a 	bl	801f3bc <__sinit>
 801f6e8:	230c      	movs	r3, #12
 801f6ea:	5ee2      	ldrsh	r2, [r4, r3]
 801f6ec:	0713      	lsls	r3, r2, #28
 801f6ee:	d423      	bmi.n	801f738 <__swsetup_r+0x68>
 801f6f0:	06d3      	lsls	r3, r2, #27
 801f6f2:	d407      	bmi.n	801f704 <__swsetup_r+0x34>
 801f6f4:	2309      	movs	r3, #9
 801f6f6:	602b      	str	r3, [r5, #0]
 801f6f8:	2340      	movs	r3, #64	@ 0x40
 801f6fa:	2001      	movs	r0, #1
 801f6fc:	4313      	orrs	r3, r2
 801f6fe:	81a3      	strh	r3, [r4, #12]
 801f700:	4240      	negs	r0, r0
 801f702:	e03a      	b.n	801f77a <__swsetup_r+0xaa>
 801f704:	0752      	lsls	r2, r2, #29
 801f706:	d513      	bpl.n	801f730 <__swsetup_r+0x60>
 801f708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f70a:	2900      	cmp	r1, #0
 801f70c:	d008      	beq.n	801f720 <__swsetup_r+0x50>
 801f70e:	0023      	movs	r3, r4
 801f710:	3344      	adds	r3, #68	@ 0x44
 801f712:	4299      	cmp	r1, r3
 801f714:	d002      	beq.n	801f71c <__swsetup_r+0x4c>
 801f716:	0028      	movs	r0, r5
 801f718:	f000 ffa6 	bl	8020668 <_free_r>
 801f71c:	2300      	movs	r3, #0
 801f71e:	6363      	str	r3, [r4, #52]	@ 0x34
 801f720:	2224      	movs	r2, #36	@ 0x24
 801f722:	89a3      	ldrh	r3, [r4, #12]
 801f724:	4393      	bics	r3, r2
 801f726:	81a3      	strh	r3, [r4, #12]
 801f728:	2300      	movs	r3, #0
 801f72a:	6063      	str	r3, [r4, #4]
 801f72c:	6923      	ldr	r3, [r4, #16]
 801f72e:	6023      	str	r3, [r4, #0]
 801f730:	2308      	movs	r3, #8
 801f732:	89a2      	ldrh	r2, [r4, #12]
 801f734:	4313      	orrs	r3, r2
 801f736:	81a3      	strh	r3, [r4, #12]
 801f738:	6923      	ldr	r3, [r4, #16]
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	d10b      	bne.n	801f756 <__swsetup_r+0x86>
 801f73e:	21a0      	movs	r1, #160	@ 0xa0
 801f740:	2280      	movs	r2, #128	@ 0x80
 801f742:	89a3      	ldrh	r3, [r4, #12]
 801f744:	0089      	lsls	r1, r1, #2
 801f746:	0092      	lsls	r2, r2, #2
 801f748:	400b      	ands	r3, r1
 801f74a:	4293      	cmp	r3, r2
 801f74c:	d003      	beq.n	801f756 <__swsetup_r+0x86>
 801f74e:	0021      	movs	r1, r4
 801f750:	0028      	movs	r0, r5
 801f752:	f002 fc51 	bl	8021ff8 <__smakebuf_r>
 801f756:	230c      	movs	r3, #12
 801f758:	5ee2      	ldrsh	r2, [r4, r3]
 801f75a:	2101      	movs	r1, #1
 801f75c:	0013      	movs	r3, r2
 801f75e:	400b      	ands	r3, r1
 801f760:	420a      	tst	r2, r1
 801f762:	d00b      	beq.n	801f77c <__swsetup_r+0xac>
 801f764:	2300      	movs	r3, #0
 801f766:	60a3      	str	r3, [r4, #8]
 801f768:	6963      	ldr	r3, [r4, #20]
 801f76a:	425b      	negs	r3, r3
 801f76c:	61a3      	str	r3, [r4, #24]
 801f76e:	2000      	movs	r0, #0
 801f770:	6923      	ldr	r3, [r4, #16]
 801f772:	4283      	cmp	r3, r0
 801f774:	d101      	bne.n	801f77a <__swsetup_r+0xaa>
 801f776:	0613      	lsls	r3, r2, #24
 801f778:	d4be      	bmi.n	801f6f8 <__swsetup_r+0x28>
 801f77a:	bd70      	pop	{r4, r5, r6, pc}
 801f77c:	0791      	lsls	r1, r2, #30
 801f77e:	d400      	bmi.n	801f782 <__swsetup_r+0xb2>
 801f780:	6963      	ldr	r3, [r4, #20]
 801f782:	60a3      	str	r3, [r4, #8]
 801f784:	e7f3      	b.n	801f76e <__swsetup_r+0x9e>
 801f786:	46c0      	nop			@ (mov r8, r8)
 801f788:	200003c8 	.word	0x200003c8

0801f78c <memset>:
 801f78c:	0003      	movs	r3, r0
 801f78e:	1882      	adds	r2, r0, r2
 801f790:	4293      	cmp	r3, r2
 801f792:	d100      	bne.n	801f796 <memset+0xa>
 801f794:	4770      	bx	lr
 801f796:	7019      	strb	r1, [r3, #0]
 801f798:	3301      	adds	r3, #1
 801f79a:	e7f9      	b.n	801f790 <memset+0x4>

0801f79c <strchr>:
 801f79c:	b2c9      	uxtb	r1, r1
 801f79e:	7803      	ldrb	r3, [r0, #0]
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d004      	beq.n	801f7ae <strchr+0x12>
 801f7a4:	428b      	cmp	r3, r1
 801f7a6:	d100      	bne.n	801f7aa <strchr+0xe>
 801f7a8:	4770      	bx	lr
 801f7aa:	3001      	adds	r0, #1
 801f7ac:	e7f7      	b.n	801f79e <strchr+0x2>
 801f7ae:	424b      	negs	r3, r1
 801f7b0:	4159      	adcs	r1, r3
 801f7b2:	4249      	negs	r1, r1
 801f7b4:	4008      	ands	r0, r1
 801f7b6:	e7f7      	b.n	801f7a8 <strchr+0xc>

0801f7b8 <strncmp>:
 801f7b8:	b530      	push	{r4, r5, lr}
 801f7ba:	0005      	movs	r5, r0
 801f7bc:	1e10      	subs	r0, r2, #0
 801f7be:	d00b      	beq.n	801f7d8 <strncmp+0x20>
 801f7c0:	2400      	movs	r4, #0
 801f7c2:	3a01      	subs	r2, #1
 801f7c4:	5d2b      	ldrb	r3, [r5, r4]
 801f7c6:	5d08      	ldrb	r0, [r1, r4]
 801f7c8:	4283      	cmp	r3, r0
 801f7ca:	d104      	bne.n	801f7d6 <strncmp+0x1e>
 801f7cc:	42a2      	cmp	r2, r4
 801f7ce:	d002      	beq.n	801f7d6 <strncmp+0x1e>
 801f7d0:	3401      	adds	r4, #1
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d1f6      	bne.n	801f7c4 <strncmp+0xc>
 801f7d6:	1a18      	subs	r0, r3, r0
 801f7d8:	bd30      	pop	{r4, r5, pc}

0801f7da <strncpy>:
 801f7da:	0003      	movs	r3, r0
 801f7dc:	b530      	push	{r4, r5, lr}
 801f7de:	001d      	movs	r5, r3
 801f7e0:	2a00      	cmp	r2, #0
 801f7e2:	d006      	beq.n	801f7f2 <strncpy+0x18>
 801f7e4:	780c      	ldrb	r4, [r1, #0]
 801f7e6:	3a01      	subs	r2, #1
 801f7e8:	3301      	adds	r3, #1
 801f7ea:	702c      	strb	r4, [r5, #0]
 801f7ec:	3101      	adds	r1, #1
 801f7ee:	2c00      	cmp	r4, #0
 801f7f0:	d1f5      	bne.n	801f7de <strncpy+0x4>
 801f7f2:	2100      	movs	r1, #0
 801f7f4:	189a      	adds	r2, r3, r2
 801f7f6:	4293      	cmp	r3, r2
 801f7f8:	d100      	bne.n	801f7fc <strncpy+0x22>
 801f7fa:	bd30      	pop	{r4, r5, pc}
 801f7fc:	7019      	strb	r1, [r3, #0]
 801f7fe:	3301      	adds	r3, #1
 801f800:	e7f9      	b.n	801f7f6 <strncpy+0x1c>

0801f802 <strstr>:
 801f802:	780a      	ldrb	r2, [r1, #0]
 801f804:	b530      	push	{r4, r5, lr}
 801f806:	2a00      	cmp	r2, #0
 801f808:	d10c      	bne.n	801f824 <strstr+0x22>
 801f80a:	bd30      	pop	{r4, r5, pc}
 801f80c:	429a      	cmp	r2, r3
 801f80e:	d108      	bne.n	801f822 <strstr+0x20>
 801f810:	2301      	movs	r3, #1
 801f812:	5ccc      	ldrb	r4, [r1, r3]
 801f814:	2c00      	cmp	r4, #0
 801f816:	d0f8      	beq.n	801f80a <strstr+0x8>
 801f818:	5cc5      	ldrb	r5, [r0, r3]
 801f81a:	42a5      	cmp	r5, r4
 801f81c:	d101      	bne.n	801f822 <strstr+0x20>
 801f81e:	3301      	adds	r3, #1
 801f820:	e7f7      	b.n	801f812 <strstr+0x10>
 801f822:	3001      	adds	r0, #1
 801f824:	7803      	ldrb	r3, [r0, #0]
 801f826:	2b00      	cmp	r3, #0
 801f828:	d1f0      	bne.n	801f80c <strstr+0xa>
 801f82a:	0018      	movs	r0, r3
 801f82c:	e7ed      	b.n	801f80a <strstr+0x8>
	...

0801f830 <_localeconv_r>:
 801f830:	4800      	ldr	r0, [pc, #0]	@ (801f834 <_localeconv_r+0x4>)
 801f832:	4770      	bx	lr
 801f834:	2000034c 	.word	0x2000034c

0801f838 <_close_r>:
 801f838:	2300      	movs	r3, #0
 801f83a:	b570      	push	{r4, r5, r6, lr}
 801f83c:	4d06      	ldr	r5, [pc, #24]	@ (801f858 <_close_r+0x20>)
 801f83e:	0004      	movs	r4, r0
 801f840:	0008      	movs	r0, r1
 801f842:	602b      	str	r3, [r5, #0]
 801f844:	f7ed fcb2 	bl	800d1ac <_close>
 801f848:	1c43      	adds	r3, r0, #1
 801f84a:	d103      	bne.n	801f854 <_close_r+0x1c>
 801f84c:	682b      	ldr	r3, [r5, #0]
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d000      	beq.n	801f854 <_close_r+0x1c>
 801f852:	6023      	str	r3, [r4, #0]
 801f854:	bd70      	pop	{r4, r5, r6, pc}
 801f856:	46c0      	nop			@ (mov r8, r8)
 801f858:	200038f0 	.word	0x200038f0

0801f85c <_lseek_r>:
 801f85c:	b570      	push	{r4, r5, r6, lr}
 801f85e:	0004      	movs	r4, r0
 801f860:	0008      	movs	r0, r1
 801f862:	0011      	movs	r1, r2
 801f864:	001a      	movs	r2, r3
 801f866:	2300      	movs	r3, #0
 801f868:	4d05      	ldr	r5, [pc, #20]	@ (801f880 <_lseek_r+0x24>)
 801f86a:	602b      	str	r3, [r5, #0]
 801f86c:	f7ed fcbf 	bl	800d1ee <_lseek>
 801f870:	1c43      	adds	r3, r0, #1
 801f872:	d103      	bne.n	801f87c <_lseek_r+0x20>
 801f874:	682b      	ldr	r3, [r5, #0]
 801f876:	2b00      	cmp	r3, #0
 801f878:	d000      	beq.n	801f87c <_lseek_r+0x20>
 801f87a:	6023      	str	r3, [r4, #0]
 801f87c:	bd70      	pop	{r4, r5, r6, pc}
 801f87e:	46c0      	nop			@ (mov r8, r8)
 801f880:	200038f0 	.word	0x200038f0

0801f884 <_read_r>:
 801f884:	b570      	push	{r4, r5, r6, lr}
 801f886:	0004      	movs	r4, r0
 801f888:	0008      	movs	r0, r1
 801f88a:	0011      	movs	r1, r2
 801f88c:	001a      	movs	r2, r3
 801f88e:	2300      	movs	r3, #0
 801f890:	4d05      	ldr	r5, [pc, #20]	@ (801f8a8 <_read_r+0x24>)
 801f892:	602b      	str	r3, [r5, #0]
 801f894:	f7ed fc6d 	bl	800d172 <_read>
 801f898:	1c43      	adds	r3, r0, #1
 801f89a:	d103      	bne.n	801f8a4 <_read_r+0x20>
 801f89c:	682b      	ldr	r3, [r5, #0]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d000      	beq.n	801f8a4 <_read_r+0x20>
 801f8a2:	6023      	str	r3, [r4, #0]
 801f8a4:	bd70      	pop	{r4, r5, r6, pc}
 801f8a6:	46c0      	nop			@ (mov r8, r8)
 801f8a8:	200038f0 	.word	0x200038f0

0801f8ac <_write_r>:
 801f8ac:	b570      	push	{r4, r5, r6, lr}
 801f8ae:	0004      	movs	r4, r0
 801f8b0:	0008      	movs	r0, r1
 801f8b2:	0011      	movs	r1, r2
 801f8b4:	001a      	movs	r2, r3
 801f8b6:	2300      	movs	r3, #0
 801f8b8:	4d05      	ldr	r5, [pc, #20]	@ (801f8d0 <_write_r+0x24>)
 801f8ba:	602b      	str	r3, [r5, #0]
 801f8bc:	f7ee f92e 	bl	800db1c <_write>
 801f8c0:	1c43      	adds	r3, r0, #1
 801f8c2:	d103      	bne.n	801f8cc <_write_r+0x20>
 801f8c4:	682b      	ldr	r3, [r5, #0]
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	d000      	beq.n	801f8cc <_write_r+0x20>
 801f8ca:	6023      	str	r3, [r4, #0]
 801f8cc:	bd70      	pop	{r4, r5, r6, pc}
 801f8ce:	46c0      	nop			@ (mov r8, r8)
 801f8d0:	200038f0 	.word	0x200038f0

0801f8d4 <__errno>:
 801f8d4:	4b01      	ldr	r3, [pc, #4]	@ (801f8dc <__errno+0x8>)
 801f8d6:	6818      	ldr	r0, [r3, #0]
 801f8d8:	4770      	bx	lr
 801f8da:	46c0      	nop			@ (mov r8, r8)
 801f8dc:	200003c8 	.word	0x200003c8

0801f8e0 <__libc_init_array>:
 801f8e0:	b570      	push	{r4, r5, r6, lr}
 801f8e2:	2600      	movs	r6, #0
 801f8e4:	4c0c      	ldr	r4, [pc, #48]	@ (801f918 <__libc_init_array+0x38>)
 801f8e6:	4d0d      	ldr	r5, [pc, #52]	@ (801f91c <__libc_init_array+0x3c>)
 801f8e8:	1b64      	subs	r4, r4, r5
 801f8ea:	10a4      	asrs	r4, r4, #2
 801f8ec:	42a6      	cmp	r6, r4
 801f8ee:	d109      	bne.n	801f904 <__libc_init_array+0x24>
 801f8f0:	2600      	movs	r6, #0
 801f8f2:	f002 fee9 	bl	80226c8 <_init>
 801f8f6:	4c0a      	ldr	r4, [pc, #40]	@ (801f920 <__libc_init_array+0x40>)
 801f8f8:	4d0a      	ldr	r5, [pc, #40]	@ (801f924 <__libc_init_array+0x44>)
 801f8fa:	1b64      	subs	r4, r4, r5
 801f8fc:	10a4      	asrs	r4, r4, #2
 801f8fe:	42a6      	cmp	r6, r4
 801f900:	d105      	bne.n	801f90e <__libc_init_array+0x2e>
 801f902:	bd70      	pop	{r4, r5, r6, pc}
 801f904:	00b3      	lsls	r3, r6, #2
 801f906:	58eb      	ldr	r3, [r5, r3]
 801f908:	4798      	blx	r3
 801f90a:	3601      	adds	r6, #1
 801f90c:	e7ee      	b.n	801f8ec <__libc_init_array+0xc>
 801f90e:	00b3      	lsls	r3, r6, #2
 801f910:	58eb      	ldr	r3, [r5, r3]
 801f912:	4798      	blx	r3
 801f914:	3601      	adds	r6, #1
 801f916:	e7f2      	b.n	801f8fe <__libc_init_array+0x1e>
 801f918:	08025260 	.word	0x08025260
 801f91c:	08025260 	.word	0x08025260
 801f920:	08025264 	.word	0x08025264
 801f924:	08025260 	.word	0x08025260

0801f928 <__retarget_lock_init_recursive>:
 801f928:	4770      	bx	lr

0801f92a <__retarget_lock_acquire_recursive>:
 801f92a:	4770      	bx	lr

0801f92c <__retarget_lock_release_recursive>:
 801f92c:	4770      	bx	lr

0801f92e <memchr>:
 801f92e:	b2c9      	uxtb	r1, r1
 801f930:	1882      	adds	r2, r0, r2
 801f932:	4290      	cmp	r0, r2
 801f934:	d101      	bne.n	801f93a <memchr+0xc>
 801f936:	2000      	movs	r0, #0
 801f938:	4770      	bx	lr
 801f93a:	7803      	ldrb	r3, [r0, #0]
 801f93c:	428b      	cmp	r3, r1
 801f93e:	d0fb      	beq.n	801f938 <memchr+0xa>
 801f940:	3001      	adds	r0, #1
 801f942:	e7f6      	b.n	801f932 <memchr+0x4>

0801f944 <memcpy>:
 801f944:	2300      	movs	r3, #0
 801f946:	b510      	push	{r4, lr}
 801f948:	429a      	cmp	r2, r3
 801f94a:	d100      	bne.n	801f94e <memcpy+0xa>
 801f94c:	bd10      	pop	{r4, pc}
 801f94e:	5ccc      	ldrb	r4, [r1, r3]
 801f950:	54c4      	strb	r4, [r0, r3]
 801f952:	3301      	adds	r3, #1
 801f954:	e7f8      	b.n	801f948 <memcpy+0x4>
	...

0801f958 <nan>:
 801f958:	2000      	movs	r0, #0
 801f95a:	4901      	ldr	r1, [pc, #4]	@ (801f960 <nan+0x8>)
 801f95c:	4770      	bx	lr
 801f95e:	46c0      	nop			@ (mov r8, r8)
 801f960:	7ff80000 	.word	0x7ff80000

0801f964 <quorem>:
 801f964:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f966:	6902      	ldr	r2, [r0, #16]
 801f968:	690f      	ldr	r7, [r1, #16]
 801f96a:	b087      	sub	sp, #28
 801f96c:	0006      	movs	r6, r0
 801f96e:	000b      	movs	r3, r1
 801f970:	2000      	movs	r0, #0
 801f972:	9102      	str	r1, [sp, #8]
 801f974:	42ba      	cmp	r2, r7
 801f976:	db6d      	blt.n	801fa54 <quorem+0xf0>
 801f978:	3f01      	subs	r7, #1
 801f97a:	00bc      	lsls	r4, r7, #2
 801f97c:	3314      	adds	r3, #20
 801f97e:	9305      	str	r3, [sp, #20]
 801f980:	191b      	adds	r3, r3, r4
 801f982:	9303      	str	r3, [sp, #12]
 801f984:	0033      	movs	r3, r6
 801f986:	3314      	adds	r3, #20
 801f988:	191c      	adds	r4, r3, r4
 801f98a:	9301      	str	r3, [sp, #4]
 801f98c:	6823      	ldr	r3, [r4, #0]
 801f98e:	9304      	str	r3, [sp, #16]
 801f990:	9b03      	ldr	r3, [sp, #12]
 801f992:	9804      	ldr	r0, [sp, #16]
 801f994:	681d      	ldr	r5, [r3, #0]
 801f996:	3501      	adds	r5, #1
 801f998:	0029      	movs	r1, r5
 801f99a:	f7e0 fc03 	bl	80001a4 <__udivsi3>
 801f99e:	9b04      	ldr	r3, [sp, #16]
 801f9a0:	9000      	str	r0, [sp, #0]
 801f9a2:	42ab      	cmp	r3, r5
 801f9a4:	d32b      	bcc.n	801f9fe <quorem+0x9a>
 801f9a6:	9b05      	ldr	r3, [sp, #20]
 801f9a8:	9d01      	ldr	r5, [sp, #4]
 801f9aa:	469c      	mov	ip, r3
 801f9ac:	2300      	movs	r3, #0
 801f9ae:	9305      	str	r3, [sp, #20]
 801f9b0:	9304      	str	r3, [sp, #16]
 801f9b2:	4662      	mov	r2, ip
 801f9b4:	ca08      	ldmia	r2!, {r3}
 801f9b6:	6828      	ldr	r0, [r5, #0]
 801f9b8:	4694      	mov	ip, r2
 801f9ba:	9a00      	ldr	r2, [sp, #0]
 801f9bc:	b299      	uxth	r1, r3
 801f9be:	4351      	muls	r1, r2
 801f9c0:	9a05      	ldr	r2, [sp, #20]
 801f9c2:	0c1b      	lsrs	r3, r3, #16
 801f9c4:	1889      	adds	r1, r1, r2
 801f9c6:	9a00      	ldr	r2, [sp, #0]
 801f9c8:	4353      	muls	r3, r2
 801f9ca:	0c0a      	lsrs	r2, r1, #16
 801f9cc:	189b      	adds	r3, r3, r2
 801f9ce:	0c1a      	lsrs	r2, r3, #16
 801f9d0:	b289      	uxth	r1, r1
 801f9d2:	9205      	str	r2, [sp, #20]
 801f9d4:	b282      	uxth	r2, r0
 801f9d6:	1a52      	subs	r2, r2, r1
 801f9d8:	9904      	ldr	r1, [sp, #16]
 801f9da:	0c00      	lsrs	r0, r0, #16
 801f9dc:	1852      	adds	r2, r2, r1
 801f9de:	b29b      	uxth	r3, r3
 801f9e0:	1411      	asrs	r1, r2, #16
 801f9e2:	1ac3      	subs	r3, r0, r3
 801f9e4:	185b      	adds	r3, r3, r1
 801f9e6:	1419      	asrs	r1, r3, #16
 801f9e8:	b292      	uxth	r2, r2
 801f9ea:	041b      	lsls	r3, r3, #16
 801f9ec:	431a      	orrs	r2, r3
 801f9ee:	9b03      	ldr	r3, [sp, #12]
 801f9f0:	9104      	str	r1, [sp, #16]
 801f9f2:	c504      	stmia	r5!, {r2}
 801f9f4:	4563      	cmp	r3, ip
 801f9f6:	d2dc      	bcs.n	801f9b2 <quorem+0x4e>
 801f9f8:	6823      	ldr	r3, [r4, #0]
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	d030      	beq.n	801fa60 <quorem+0xfc>
 801f9fe:	0030      	movs	r0, r6
 801fa00:	9902      	ldr	r1, [sp, #8]
 801fa02:	f001 fd7d 	bl	8021500 <__mcmp>
 801fa06:	2800      	cmp	r0, #0
 801fa08:	db23      	blt.n	801fa52 <quorem+0xee>
 801fa0a:	0034      	movs	r4, r6
 801fa0c:	2500      	movs	r5, #0
 801fa0e:	9902      	ldr	r1, [sp, #8]
 801fa10:	3414      	adds	r4, #20
 801fa12:	3114      	adds	r1, #20
 801fa14:	6823      	ldr	r3, [r4, #0]
 801fa16:	c901      	ldmia	r1!, {r0}
 801fa18:	9302      	str	r3, [sp, #8]
 801fa1a:	466b      	mov	r3, sp
 801fa1c:	891b      	ldrh	r3, [r3, #8]
 801fa1e:	b282      	uxth	r2, r0
 801fa20:	1a9a      	subs	r2, r3, r2
 801fa22:	9b02      	ldr	r3, [sp, #8]
 801fa24:	1952      	adds	r2, r2, r5
 801fa26:	0c00      	lsrs	r0, r0, #16
 801fa28:	0c1b      	lsrs	r3, r3, #16
 801fa2a:	1a1b      	subs	r3, r3, r0
 801fa2c:	1410      	asrs	r0, r2, #16
 801fa2e:	181b      	adds	r3, r3, r0
 801fa30:	141d      	asrs	r5, r3, #16
 801fa32:	b292      	uxth	r2, r2
 801fa34:	041b      	lsls	r3, r3, #16
 801fa36:	431a      	orrs	r2, r3
 801fa38:	9b03      	ldr	r3, [sp, #12]
 801fa3a:	c404      	stmia	r4!, {r2}
 801fa3c:	428b      	cmp	r3, r1
 801fa3e:	d2e9      	bcs.n	801fa14 <quorem+0xb0>
 801fa40:	9a01      	ldr	r2, [sp, #4]
 801fa42:	00bb      	lsls	r3, r7, #2
 801fa44:	18d3      	adds	r3, r2, r3
 801fa46:	681a      	ldr	r2, [r3, #0]
 801fa48:	2a00      	cmp	r2, #0
 801fa4a:	d013      	beq.n	801fa74 <quorem+0x110>
 801fa4c:	9b00      	ldr	r3, [sp, #0]
 801fa4e:	3301      	adds	r3, #1
 801fa50:	9300      	str	r3, [sp, #0]
 801fa52:	9800      	ldr	r0, [sp, #0]
 801fa54:	b007      	add	sp, #28
 801fa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa58:	6823      	ldr	r3, [r4, #0]
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d104      	bne.n	801fa68 <quorem+0x104>
 801fa5e:	3f01      	subs	r7, #1
 801fa60:	9b01      	ldr	r3, [sp, #4]
 801fa62:	3c04      	subs	r4, #4
 801fa64:	42a3      	cmp	r3, r4
 801fa66:	d3f7      	bcc.n	801fa58 <quorem+0xf4>
 801fa68:	6137      	str	r7, [r6, #16]
 801fa6a:	e7c8      	b.n	801f9fe <quorem+0x9a>
 801fa6c:	681a      	ldr	r2, [r3, #0]
 801fa6e:	2a00      	cmp	r2, #0
 801fa70:	d104      	bne.n	801fa7c <quorem+0x118>
 801fa72:	3f01      	subs	r7, #1
 801fa74:	9a01      	ldr	r2, [sp, #4]
 801fa76:	3b04      	subs	r3, #4
 801fa78:	429a      	cmp	r2, r3
 801fa7a:	d3f7      	bcc.n	801fa6c <quorem+0x108>
 801fa7c:	6137      	str	r7, [r6, #16]
 801fa7e:	e7e5      	b.n	801fa4c <quorem+0xe8>

0801fa80 <_dtoa_r>:
 801fa80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa82:	0014      	movs	r4, r2
 801fa84:	001d      	movs	r5, r3
 801fa86:	69c6      	ldr	r6, [r0, #28]
 801fa88:	b09d      	sub	sp, #116	@ 0x74
 801fa8a:	940a      	str	r4, [sp, #40]	@ 0x28
 801fa8c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801fa8e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801fa90:	9003      	str	r0, [sp, #12]
 801fa92:	2e00      	cmp	r6, #0
 801fa94:	d10f      	bne.n	801fab6 <_dtoa_r+0x36>
 801fa96:	2010      	movs	r0, #16
 801fa98:	f001 f98a 	bl	8020db0 <malloc>
 801fa9c:	9b03      	ldr	r3, [sp, #12]
 801fa9e:	1e02      	subs	r2, r0, #0
 801faa0:	61d8      	str	r0, [r3, #28]
 801faa2:	d104      	bne.n	801faae <_dtoa_r+0x2e>
 801faa4:	21ef      	movs	r1, #239	@ 0xef
 801faa6:	4bc7      	ldr	r3, [pc, #796]	@ (801fdc4 <_dtoa_r+0x344>)
 801faa8:	48c7      	ldr	r0, [pc, #796]	@ (801fdc8 <_dtoa_r+0x348>)
 801faaa:	f002 fb2f 	bl	802210c <__assert_func>
 801faae:	6046      	str	r6, [r0, #4]
 801fab0:	6086      	str	r6, [r0, #8]
 801fab2:	6006      	str	r6, [r0, #0]
 801fab4:	60c6      	str	r6, [r0, #12]
 801fab6:	9b03      	ldr	r3, [sp, #12]
 801fab8:	69db      	ldr	r3, [r3, #28]
 801faba:	6819      	ldr	r1, [r3, #0]
 801fabc:	2900      	cmp	r1, #0
 801fabe:	d00b      	beq.n	801fad8 <_dtoa_r+0x58>
 801fac0:	685a      	ldr	r2, [r3, #4]
 801fac2:	2301      	movs	r3, #1
 801fac4:	4093      	lsls	r3, r2
 801fac6:	604a      	str	r2, [r1, #4]
 801fac8:	608b      	str	r3, [r1, #8]
 801faca:	9803      	ldr	r0, [sp, #12]
 801facc:	f001 fa82 	bl	8020fd4 <_Bfree>
 801fad0:	2200      	movs	r2, #0
 801fad2:	9b03      	ldr	r3, [sp, #12]
 801fad4:	69db      	ldr	r3, [r3, #28]
 801fad6:	601a      	str	r2, [r3, #0]
 801fad8:	2d00      	cmp	r5, #0
 801fada:	da1e      	bge.n	801fb1a <_dtoa_r+0x9a>
 801fadc:	2301      	movs	r3, #1
 801fade:	603b      	str	r3, [r7, #0]
 801fae0:	006b      	lsls	r3, r5, #1
 801fae2:	085b      	lsrs	r3, r3, #1
 801fae4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fae6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fae8:	4bb8      	ldr	r3, [pc, #736]	@ (801fdcc <_dtoa_r+0x34c>)
 801faea:	4ab8      	ldr	r2, [pc, #736]	@ (801fdcc <_dtoa_r+0x34c>)
 801faec:	403b      	ands	r3, r7
 801faee:	4293      	cmp	r3, r2
 801faf0:	d116      	bne.n	801fb20 <_dtoa_r+0xa0>
 801faf2:	4bb7      	ldr	r3, [pc, #732]	@ (801fdd0 <_dtoa_r+0x350>)
 801faf4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801faf6:	6013      	str	r3, [r2, #0]
 801faf8:	033b      	lsls	r3, r7, #12
 801fafa:	0b1b      	lsrs	r3, r3, #12
 801fafc:	4323      	orrs	r3, r4
 801fafe:	d101      	bne.n	801fb04 <_dtoa_r+0x84>
 801fb00:	f000 fd83 	bl	802060a <_dtoa_r+0xb8a>
 801fb04:	4bb3      	ldr	r3, [pc, #716]	@ (801fdd4 <_dtoa_r+0x354>)
 801fb06:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fb08:	9308      	str	r3, [sp, #32]
 801fb0a:	2a00      	cmp	r2, #0
 801fb0c:	d002      	beq.n	801fb14 <_dtoa_r+0x94>
 801fb0e:	4bb2      	ldr	r3, [pc, #712]	@ (801fdd8 <_dtoa_r+0x358>)
 801fb10:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fb12:	6013      	str	r3, [r2, #0]
 801fb14:	9808      	ldr	r0, [sp, #32]
 801fb16:	b01d      	add	sp, #116	@ 0x74
 801fb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb1a:	2300      	movs	r3, #0
 801fb1c:	603b      	str	r3, [r7, #0]
 801fb1e:	e7e2      	b.n	801fae6 <_dtoa_r+0x66>
 801fb20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fb22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb24:	9212      	str	r2, [sp, #72]	@ 0x48
 801fb26:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fb28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fb2a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb2c:	2200      	movs	r2, #0
 801fb2e:	2300      	movs	r3, #0
 801fb30:	f7e0 fcbe 	bl	80004b0 <__aeabi_dcmpeq>
 801fb34:	1e06      	subs	r6, r0, #0
 801fb36:	d00b      	beq.n	801fb50 <_dtoa_r+0xd0>
 801fb38:	2301      	movs	r3, #1
 801fb3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fb3c:	6013      	str	r3, [r2, #0]
 801fb3e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d002      	beq.n	801fb4a <_dtoa_r+0xca>
 801fb44:	4ba5      	ldr	r3, [pc, #660]	@ (801fddc <_dtoa_r+0x35c>)
 801fb46:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fb48:	6013      	str	r3, [r2, #0]
 801fb4a:	4ba5      	ldr	r3, [pc, #660]	@ (801fde0 <_dtoa_r+0x360>)
 801fb4c:	9308      	str	r3, [sp, #32]
 801fb4e:	e7e1      	b.n	801fb14 <_dtoa_r+0x94>
 801fb50:	ab1a      	add	r3, sp, #104	@ 0x68
 801fb52:	9301      	str	r3, [sp, #4]
 801fb54:	ab1b      	add	r3, sp, #108	@ 0x6c
 801fb56:	9300      	str	r3, [sp, #0]
 801fb58:	9803      	ldr	r0, [sp, #12]
 801fb5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fb5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fb5e:	f001 fdf1 	bl	8021744 <__d2b>
 801fb62:	007a      	lsls	r2, r7, #1
 801fb64:	9005      	str	r0, [sp, #20]
 801fb66:	0d52      	lsrs	r2, r2, #21
 801fb68:	d100      	bne.n	801fb6c <_dtoa_r+0xec>
 801fb6a:	e07b      	b.n	801fc64 <_dtoa_r+0x1e4>
 801fb6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fb6e:	9618      	str	r6, [sp, #96]	@ 0x60
 801fb70:	0319      	lsls	r1, r3, #12
 801fb72:	4b9c      	ldr	r3, [pc, #624]	@ (801fde4 <_dtoa_r+0x364>)
 801fb74:	0b09      	lsrs	r1, r1, #12
 801fb76:	430b      	orrs	r3, r1
 801fb78:	499b      	ldr	r1, [pc, #620]	@ (801fde8 <_dtoa_r+0x368>)
 801fb7a:	1857      	adds	r7, r2, r1
 801fb7c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fb7e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb80:	0019      	movs	r1, r3
 801fb82:	2200      	movs	r2, #0
 801fb84:	4b99      	ldr	r3, [pc, #612]	@ (801fdec <_dtoa_r+0x36c>)
 801fb86:	f7e3 f821 	bl	8002bcc <__aeabi_dsub>
 801fb8a:	4a99      	ldr	r2, [pc, #612]	@ (801fdf0 <_dtoa_r+0x370>)
 801fb8c:	4b99      	ldr	r3, [pc, #612]	@ (801fdf4 <_dtoa_r+0x374>)
 801fb8e:	f7e2 fd55 	bl	800263c <__aeabi_dmul>
 801fb92:	4a99      	ldr	r2, [pc, #612]	@ (801fdf8 <_dtoa_r+0x378>)
 801fb94:	4b99      	ldr	r3, [pc, #612]	@ (801fdfc <_dtoa_r+0x37c>)
 801fb96:	f7e1 fda9 	bl	80016ec <__aeabi_dadd>
 801fb9a:	0004      	movs	r4, r0
 801fb9c:	0038      	movs	r0, r7
 801fb9e:	000d      	movs	r5, r1
 801fba0:	f7e3 fc0e 	bl	80033c0 <__aeabi_i2d>
 801fba4:	4a96      	ldr	r2, [pc, #600]	@ (801fe00 <_dtoa_r+0x380>)
 801fba6:	4b97      	ldr	r3, [pc, #604]	@ (801fe04 <_dtoa_r+0x384>)
 801fba8:	f7e2 fd48 	bl	800263c <__aeabi_dmul>
 801fbac:	0002      	movs	r2, r0
 801fbae:	000b      	movs	r3, r1
 801fbb0:	0020      	movs	r0, r4
 801fbb2:	0029      	movs	r1, r5
 801fbb4:	f7e1 fd9a 	bl	80016ec <__aeabi_dadd>
 801fbb8:	0004      	movs	r4, r0
 801fbba:	000d      	movs	r5, r1
 801fbbc:	f7e3 fbc4 	bl	8003348 <__aeabi_d2iz>
 801fbc0:	2200      	movs	r2, #0
 801fbc2:	9004      	str	r0, [sp, #16]
 801fbc4:	2300      	movs	r3, #0
 801fbc6:	0020      	movs	r0, r4
 801fbc8:	0029      	movs	r1, r5
 801fbca:	f7e0 fc77 	bl	80004bc <__aeabi_dcmplt>
 801fbce:	2800      	cmp	r0, #0
 801fbd0:	d00b      	beq.n	801fbea <_dtoa_r+0x16a>
 801fbd2:	9804      	ldr	r0, [sp, #16]
 801fbd4:	f7e3 fbf4 	bl	80033c0 <__aeabi_i2d>
 801fbd8:	002b      	movs	r3, r5
 801fbda:	0022      	movs	r2, r4
 801fbdc:	f7e0 fc68 	bl	80004b0 <__aeabi_dcmpeq>
 801fbe0:	4243      	negs	r3, r0
 801fbe2:	4158      	adcs	r0, r3
 801fbe4:	9b04      	ldr	r3, [sp, #16]
 801fbe6:	1a1b      	subs	r3, r3, r0
 801fbe8:	9304      	str	r3, [sp, #16]
 801fbea:	2301      	movs	r3, #1
 801fbec:	9315      	str	r3, [sp, #84]	@ 0x54
 801fbee:	9b04      	ldr	r3, [sp, #16]
 801fbf0:	2b16      	cmp	r3, #22
 801fbf2:	d810      	bhi.n	801fc16 <_dtoa_r+0x196>
 801fbf4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fbf6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fbf8:	9a04      	ldr	r2, [sp, #16]
 801fbfa:	4b83      	ldr	r3, [pc, #524]	@ (801fe08 <_dtoa_r+0x388>)
 801fbfc:	00d2      	lsls	r2, r2, #3
 801fbfe:	189b      	adds	r3, r3, r2
 801fc00:	681a      	ldr	r2, [r3, #0]
 801fc02:	685b      	ldr	r3, [r3, #4]
 801fc04:	f7e0 fc5a 	bl	80004bc <__aeabi_dcmplt>
 801fc08:	2800      	cmp	r0, #0
 801fc0a:	d047      	beq.n	801fc9c <_dtoa_r+0x21c>
 801fc0c:	9b04      	ldr	r3, [sp, #16]
 801fc0e:	3b01      	subs	r3, #1
 801fc10:	9304      	str	r3, [sp, #16]
 801fc12:	2300      	movs	r3, #0
 801fc14:	9315      	str	r3, [sp, #84]	@ 0x54
 801fc16:	2200      	movs	r2, #0
 801fc18:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fc1a:	9206      	str	r2, [sp, #24]
 801fc1c:	1bdb      	subs	r3, r3, r7
 801fc1e:	1e5a      	subs	r2, r3, #1
 801fc20:	d53e      	bpl.n	801fca0 <_dtoa_r+0x220>
 801fc22:	2201      	movs	r2, #1
 801fc24:	1ad3      	subs	r3, r2, r3
 801fc26:	9306      	str	r3, [sp, #24]
 801fc28:	2300      	movs	r3, #0
 801fc2a:	930d      	str	r3, [sp, #52]	@ 0x34
 801fc2c:	9b04      	ldr	r3, [sp, #16]
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	db38      	blt.n	801fca4 <_dtoa_r+0x224>
 801fc32:	9a04      	ldr	r2, [sp, #16]
 801fc34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fc36:	4694      	mov	ip, r2
 801fc38:	4463      	add	r3, ip
 801fc3a:	930d      	str	r3, [sp, #52]	@ 0x34
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	9214      	str	r2, [sp, #80]	@ 0x50
 801fc40:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fc42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fc44:	2401      	movs	r4, #1
 801fc46:	2b09      	cmp	r3, #9
 801fc48:	d867      	bhi.n	801fd1a <_dtoa_r+0x29a>
 801fc4a:	2b05      	cmp	r3, #5
 801fc4c:	dd02      	ble.n	801fc54 <_dtoa_r+0x1d4>
 801fc4e:	2400      	movs	r4, #0
 801fc50:	3b04      	subs	r3, #4
 801fc52:	9322      	str	r3, [sp, #136]	@ 0x88
 801fc54:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fc56:	1e98      	subs	r0, r3, #2
 801fc58:	2803      	cmp	r0, #3
 801fc5a:	d867      	bhi.n	801fd2c <_dtoa_r+0x2ac>
 801fc5c:	f7e0 fa8e 	bl	800017c <__gnu_thumb1_case_uqi>
 801fc60:	5b383a2b 	.word	0x5b383a2b
 801fc64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fc66:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801fc68:	18f6      	adds	r6, r6, r3
 801fc6a:	4b68      	ldr	r3, [pc, #416]	@ (801fe0c <_dtoa_r+0x38c>)
 801fc6c:	18f2      	adds	r2, r6, r3
 801fc6e:	2a20      	cmp	r2, #32
 801fc70:	dd0f      	ble.n	801fc92 <_dtoa_r+0x212>
 801fc72:	2340      	movs	r3, #64	@ 0x40
 801fc74:	1a9b      	subs	r3, r3, r2
 801fc76:	409f      	lsls	r7, r3
 801fc78:	4b65      	ldr	r3, [pc, #404]	@ (801fe10 <_dtoa_r+0x390>)
 801fc7a:	0038      	movs	r0, r7
 801fc7c:	18f3      	adds	r3, r6, r3
 801fc7e:	40dc      	lsrs	r4, r3
 801fc80:	4320      	orrs	r0, r4
 801fc82:	f7e3 fbcb 	bl	800341c <__aeabi_ui2d>
 801fc86:	2201      	movs	r2, #1
 801fc88:	4b62      	ldr	r3, [pc, #392]	@ (801fe14 <_dtoa_r+0x394>)
 801fc8a:	1e77      	subs	r7, r6, #1
 801fc8c:	18cb      	adds	r3, r1, r3
 801fc8e:	9218      	str	r2, [sp, #96]	@ 0x60
 801fc90:	e776      	b.n	801fb80 <_dtoa_r+0x100>
 801fc92:	2320      	movs	r3, #32
 801fc94:	0020      	movs	r0, r4
 801fc96:	1a9b      	subs	r3, r3, r2
 801fc98:	4098      	lsls	r0, r3
 801fc9a:	e7f2      	b.n	801fc82 <_dtoa_r+0x202>
 801fc9c:	9015      	str	r0, [sp, #84]	@ 0x54
 801fc9e:	e7ba      	b.n	801fc16 <_dtoa_r+0x196>
 801fca0:	920d      	str	r2, [sp, #52]	@ 0x34
 801fca2:	e7c3      	b.n	801fc2c <_dtoa_r+0x1ac>
 801fca4:	9b06      	ldr	r3, [sp, #24]
 801fca6:	9a04      	ldr	r2, [sp, #16]
 801fca8:	1a9b      	subs	r3, r3, r2
 801fcaa:	9306      	str	r3, [sp, #24]
 801fcac:	4253      	negs	r3, r2
 801fcae:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	9314      	str	r3, [sp, #80]	@ 0x50
 801fcb4:	e7c5      	b.n	801fc42 <_dtoa_r+0x1c2>
 801fcb6:	2300      	movs	r3, #0
 801fcb8:	9310      	str	r3, [sp, #64]	@ 0x40
 801fcba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fcbc:	930e      	str	r3, [sp, #56]	@ 0x38
 801fcbe:	9309      	str	r3, [sp, #36]	@ 0x24
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	dc13      	bgt.n	801fcec <_dtoa_r+0x26c>
 801fcc4:	2301      	movs	r3, #1
 801fcc6:	001a      	movs	r2, r3
 801fcc8:	930e      	str	r3, [sp, #56]	@ 0x38
 801fcca:	9309      	str	r3, [sp, #36]	@ 0x24
 801fccc:	9223      	str	r2, [sp, #140]	@ 0x8c
 801fcce:	e00d      	b.n	801fcec <_dtoa_r+0x26c>
 801fcd0:	2301      	movs	r3, #1
 801fcd2:	e7f1      	b.n	801fcb8 <_dtoa_r+0x238>
 801fcd4:	2300      	movs	r3, #0
 801fcd6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fcd8:	9310      	str	r3, [sp, #64]	@ 0x40
 801fcda:	4694      	mov	ip, r2
 801fcdc:	9b04      	ldr	r3, [sp, #16]
 801fcde:	4463      	add	r3, ip
 801fce0:	930e      	str	r3, [sp, #56]	@ 0x38
 801fce2:	3301      	adds	r3, #1
 801fce4:	9309      	str	r3, [sp, #36]	@ 0x24
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	dc00      	bgt.n	801fcec <_dtoa_r+0x26c>
 801fcea:	2301      	movs	r3, #1
 801fcec:	9a03      	ldr	r2, [sp, #12]
 801fcee:	2100      	movs	r1, #0
 801fcf0:	69d0      	ldr	r0, [r2, #28]
 801fcf2:	2204      	movs	r2, #4
 801fcf4:	0015      	movs	r5, r2
 801fcf6:	3514      	adds	r5, #20
 801fcf8:	429d      	cmp	r5, r3
 801fcfa:	d91b      	bls.n	801fd34 <_dtoa_r+0x2b4>
 801fcfc:	6041      	str	r1, [r0, #4]
 801fcfe:	9803      	ldr	r0, [sp, #12]
 801fd00:	f001 f924 	bl	8020f4c <_Balloc>
 801fd04:	9008      	str	r0, [sp, #32]
 801fd06:	2800      	cmp	r0, #0
 801fd08:	d117      	bne.n	801fd3a <_dtoa_r+0x2ba>
 801fd0a:	21b0      	movs	r1, #176	@ 0xb0
 801fd0c:	4b42      	ldr	r3, [pc, #264]	@ (801fe18 <_dtoa_r+0x398>)
 801fd0e:	482e      	ldr	r0, [pc, #184]	@ (801fdc8 <_dtoa_r+0x348>)
 801fd10:	9a08      	ldr	r2, [sp, #32]
 801fd12:	31ff      	adds	r1, #255	@ 0xff
 801fd14:	e6c9      	b.n	801faaa <_dtoa_r+0x2a>
 801fd16:	2301      	movs	r3, #1
 801fd18:	e7dd      	b.n	801fcd6 <_dtoa_r+0x256>
 801fd1a:	2300      	movs	r3, #0
 801fd1c:	9410      	str	r4, [sp, #64]	@ 0x40
 801fd1e:	9322      	str	r3, [sp, #136]	@ 0x88
 801fd20:	3b01      	subs	r3, #1
 801fd22:	930e      	str	r3, [sp, #56]	@ 0x38
 801fd24:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd26:	2200      	movs	r2, #0
 801fd28:	3313      	adds	r3, #19
 801fd2a:	e7cf      	b.n	801fccc <_dtoa_r+0x24c>
 801fd2c:	2301      	movs	r3, #1
 801fd2e:	9310      	str	r3, [sp, #64]	@ 0x40
 801fd30:	3b02      	subs	r3, #2
 801fd32:	e7f6      	b.n	801fd22 <_dtoa_r+0x2a2>
 801fd34:	3101      	adds	r1, #1
 801fd36:	0052      	lsls	r2, r2, #1
 801fd38:	e7dc      	b.n	801fcf4 <_dtoa_r+0x274>
 801fd3a:	9b03      	ldr	r3, [sp, #12]
 801fd3c:	9a08      	ldr	r2, [sp, #32]
 801fd3e:	69db      	ldr	r3, [r3, #28]
 801fd40:	601a      	str	r2, [r3, #0]
 801fd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd44:	2b0e      	cmp	r3, #14
 801fd46:	d900      	bls.n	801fd4a <_dtoa_r+0x2ca>
 801fd48:	e0d9      	b.n	801fefe <_dtoa_r+0x47e>
 801fd4a:	2c00      	cmp	r4, #0
 801fd4c:	d100      	bne.n	801fd50 <_dtoa_r+0x2d0>
 801fd4e:	e0d6      	b.n	801fefe <_dtoa_r+0x47e>
 801fd50:	9b04      	ldr	r3, [sp, #16]
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	dd64      	ble.n	801fe20 <_dtoa_r+0x3a0>
 801fd56:	210f      	movs	r1, #15
 801fd58:	9a04      	ldr	r2, [sp, #16]
 801fd5a:	4b2b      	ldr	r3, [pc, #172]	@ (801fe08 <_dtoa_r+0x388>)
 801fd5c:	400a      	ands	r2, r1
 801fd5e:	00d2      	lsls	r2, r2, #3
 801fd60:	189b      	adds	r3, r3, r2
 801fd62:	681e      	ldr	r6, [r3, #0]
 801fd64:	685f      	ldr	r7, [r3, #4]
 801fd66:	9b04      	ldr	r3, [sp, #16]
 801fd68:	2402      	movs	r4, #2
 801fd6a:	111d      	asrs	r5, r3, #4
 801fd6c:	05db      	lsls	r3, r3, #23
 801fd6e:	d50a      	bpl.n	801fd86 <_dtoa_r+0x306>
 801fd70:	4b2a      	ldr	r3, [pc, #168]	@ (801fe1c <_dtoa_r+0x39c>)
 801fd72:	400d      	ands	r5, r1
 801fd74:	6a1a      	ldr	r2, [r3, #32]
 801fd76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fd78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fd7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fd7c:	f7e2 f81a 	bl	8001db4 <__aeabi_ddiv>
 801fd80:	900a      	str	r0, [sp, #40]	@ 0x28
 801fd82:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fd84:	3401      	adds	r4, #1
 801fd86:	4b25      	ldr	r3, [pc, #148]	@ (801fe1c <_dtoa_r+0x39c>)
 801fd88:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd8a:	2d00      	cmp	r5, #0
 801fd8c:	d108      	bne.n	801fda0 <_dtoa_r+0x320>
 801fd8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fd90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fd92:	0032      	movs	r2, r6
 801fd94:	003b      	movs	r3, r7
 801fd96:	f7e2 f80d 	bl	8001db4 <__aeabi_ddiv>
 801fd9a:	900a      	str	r0, [sp, #40]	@ 0x28
 801fd9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fd9e:	e05a      	b.n	801fe56 <_dtoa_r+0x3d6>
 801fda0:	2301      	movs	r3, #1
 801fda2:	421d      	tst	r5, r3
 801fda4:	d009      	beq.n	801fdba <_dtoa_r+0x33a>
 801fda6:	18e4      	adds	r4, r4, r3
 801fda8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdaa:	0030      	movs	r0, r6
 801fdac:	681a      	ldr	r2, [r3, #0]
 801fdae:	685b      	ldr	r3, [r3, #4]
 801fdb0:	0039      	movs	r1, r7
 801fdb2:	f7e2 fc43 	bl	800263c <__aeabi_dmul>
 801fdb6:	0006      	movs	r6, r0
 801fdb8:	000f      	movs	r7, r1
 801fdba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdbc:	106d      	asrs	r5, r5, #1
 801fdbe:	3308      	adds	r3, #8
 801fdc0:	e7e2      	b.n	801fd88 <_dtoa_r+0x308>
 801fdc2:	46c0      	nop			@ (mov r8, r8)
 801fdc4:	08024fba 	.word	0x08024fba
 801fdc8:	08024fd1 	.word	0x08024fd1
 801fdcc:	7ff00000 	.word	0x7ff00000
 801fdd0:	0000270f 	.word	0x0000270f
 801fdd4:	08024fb6 	.word	0x08024fb6
 801fdd8:	08024fb9 	.word	0x08024fb9
 801fddc:	08024f82 	.word	0x08024f82
 801fde0:	08024f81 	.word	0x08024f81
 801fde4:	3ff00000 	.word	0x3ff00000
 801fde8:	fffffc01 	.word	0xfffffc01
 801fdec:	3ff80000 	.word	0x3ff80000
 801fdf0:	636f4361 	.word	0x636f4361
 801fdf4:	3fd287a7 	.word	0x3fd287a7
 801fdf8:	8b60c8b3 	.word	0x8b60c8b3
 801fdfc:	3fc68a28 	.word	0x3fc68a28
 801fe00:	509f79fb 	.word	0x509f79fb
 801fe04:	3fd34413 	.word	0x3fd34413
 801fe08:	08025128 	.word	0x08025128
 801fe0c:	00000432 	.word	0x00000432
 801fe10:	00000412 	.word	0x00000412
 801fe14:	fe100000 	.word	0xfe100000
 801fe18:	08025029 	.word	0x08025029
 801fe1c:	08025100 	.word	0x08025100
 801fe20:	9b04      	ldr	r3, [sp, #16]
 801fe22:	2402      	movs	r4, #2
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	d016      	beq.n	801fe56 <_dtoa_r+0x3d6>
 801fe28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fe2a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fe2c:	220f      	movs	r2, #15
 801fe2e:	425d      	negs	r5, r3
 801fe30:	402a      	ands	r2, r5
 801fe32:	4bd7      	ldr	r3, [pc, #860]	@ (8020190 <_dtoa_r+0x710>)
 801fe34:	00d2      	lsls	r2, r2, #3
 801fe36:	189b      	adds	r3, r3, r2
 801fe38:	681a      	ldr	r2, [r3, #0]
 801fe3a:	685b      	ldr	r3, [r3, #4]
 801fe3c:	f7e2 fbfe 	bl	800263c <__aeabi_dmul>
 801fe40:	2701      	movs	r7, #1
 801fe42:	2300      	movs	r3, #0
 801fe44:	900a      	str	r0, [sp, #40]	@ 0x28
 801fe46:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe48:	4ed2      	ldr	r6, [pc, #840]	@ (8020194 <_dtoa_r+0x714>)
 801fe4a:	112d      	asrs	r5, r5, #4
 801fe4c:	2d00      	cmp	r5, #0
 801fe4e:	d000      	beq.n	801fe52 <_dtoa_r+0x3d2>
 801fe50:	e0ba      	b.n	801ffc8 <_dtoa_r+0x548>
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d1a1      	bne.n	801fd9a <_dtoa_r+0x31a>
 801fe56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fe58:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fe5a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d100      	bne.n	801fe62 <_dtoa_r+0x3e2>
 801fe60:	e0bd      	b.n	801ffde <_dtoa_r+0x55e>
 801fe62:	2200      	movs	r2, #0
 801fe64:	0030      	movs	r0, r6
 801fe66:	0039      	movs	r1, r7
 801fe68:	4bcb      	ldr	r3, [pc, #812]	@ (8020198 <_dtoa_r+0x718>)
 801fe6a:	f7e0 fb27 	bl	80004bc <__aeabi_dcmplt>
 801fe6e:	2800      	cmp	r0, #0
 801fe70:	d100      	bne.n	801fe74 <_dtoa_r+0x3f4>
 801fe72:	e0b4      	b.n	801ffde <_dtoa_r+0x55e>
 801fe74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	d100      	bne.n	801fe7c <_dtoa_r+0x3fc>
 801fe7a:	e0b0      	b.n	801ffde <_dtoa_r+0x55e>
 801fe7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	dd39      	ble.n	801fef6 <_dtoa_r+0x476>
 801fe82:	9b04      	ldr	r3, [sp, #16]
 801fe84:	2200      	movs	r2, #0
 801fe86:	3b01      	subs	r3, #1
 801fe88:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe8a:	0030      	movs	r0, r6
 801fe8c:	4bc3      	ldr	r3, [pc, #780]	@ (802019c <_dtoa_r+0x71c>)
 801fe8e:	0039      	movs	r1, r7
 801fe90:	f7e2 fbd4 	bl	800263c <__aeabi_dmul>
 801fe94:	900a      	str	r0, [sp, #40]	@ 0x28
 801fe96:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe9a:	3401      	adds	r4, #1
 801fe9c:	0020      	movs	r0, r4
 801fe9e:	9311      	str	r3, [sp, #68]	@ 0x44
 801fea0:	f7e3 fa8e 	bl	80033c0 <__aeabi_i2d>
 801fea4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fea8:	f7e2 fbc8 	bl	800263c <__aeabi_dmul>
 801feac:	4bbc      	ldr	r3, [pc, #752]	@ (80201a0 <_dtoa_r+0x720>)
 801feae:	2200      	movs	r2, #0
 801feb0:	f7e1 fc1c 	bl	80016ec <__aeabi_dadd>
 801feb4:	4bbb      	ldr	r3, [pc, #748]	@ (80201a4 <_dtoa_r+0x724>)
 801feb6:	0006      	movs	r6, r0
 801feb8:	18cf      	adds	r7, r1, r3
 801feba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801febc:	2b00      	cmp	r3, #0
 801febe:	d000      	beq.n	801fec2 <_dtoa_r+0x442>
 801fec0:	e091      	b.n	801ffe6 <_dtoa_r+0x566>
 801fec2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fec4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fec6:	2200      	movs	r2, #0
 801fec8:	4bb7      	ldr	r3, [pc, #732]	@ (80201a8 <_dtoa_r+0x728>)
 801feca:	f7e2 fe7f 	bl	8002bcc <__aeabi_dsub>
 801fece:	0032      	movs	r2, r6
 801fed0:	003b      	movs	r3, r7
 801fed2:	0004      	movs	r4, r0
 801fed4:	000d      	movs	r5, r1
 801fed6:	f7e0 fb05 	bl	80004e4 <__aeabi_dcmpgt>
 801feda:	2800      	cmp	r0, #0
 801fedc:	d000      	beq.n	801fee0 <_dtoa_r+0x460>
 801fede:	e29d      	b.n	802041c <_dtoa_r+0x99c>
 801fee0:	2180      	movs	r1, #128	@ 0x80
 801fee2:	0609      	lsls	r1, r1, #24
 801fee4:	187b      	adds	r3, r7, r1
 801fee6:	0032      	movs	r2, r6
 801fee8:	0020      	movs	r0, r4
 801feea:	0029      	movs	r1, r5
 801feec:	f7e0 fae6 	bl	80004bc <__aeabi_dcmplt>
 801fef0:	2800      	cmp	r0, #0
 801fef2:	d000      	beq.n	801fef6 <_dtoa_r+0x476>
 801fef4:	e130      	b.n	8020158 <_dtoa_r+0x6d8>
 801fef6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fef8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fefa:	930a      	str	r3, [sp, #40]	@ 0x28
 801fefc:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fefe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	da00      	bge.n	801ff06 <_dtoa_r+0x486>
 801ff04:	e177      	b.n	80201f6 <_dtoa_r+0x776>
 801ff06:	9a04      	ldr	r2, [sp, #16]
 801ff08:	2a0e      	cmp	r2, #14
 801ff0a:	dd00      	ble.n	801ff0e <_dtoa_r+0x48e>
 801ff0c:	e173      	b.n	80201f6 <_dtoa_r+0x776>
 801ff0e:	4ba0      	ldr	r3, [pc, #640]	@ (8020190 <_dtoa_r+0x710>)
 801ff10:	00d2      	lsls	r2, r2, #3
 801ff12:	189b      	adds	r3, r3, r2
 801ff14:	685c      	ldr	r4, [r3, #4]
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	9306      	str	r3, [sp, #24]
 801ff1a:	9407      	str	r4, [sp, #28]
 801ff1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	da03      	bge.n	801ff2a <_dtoa_r+0x4aa>
 801ff22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	dc00      	bgt.n	801ff2a <_dtoa_r+0x4aa>
 801ff28:	e106      	b.n	8020138 <_dtoa_r+0x6b8>
 801ff2a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ff2c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ff2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff30:	9d08      	ldr	r5, [sp, #32]
 801ff32:	3b01      	subs	r3, #1
 801ff34:	195b      	adds	r3, r3, r5
 801ff36:	930a      	str	r3, [sp, #40]	@ 0x28
 801ff38:	9a06      	ldr	r2, [sp, #24]
 801ff3a:	9b07      	ldr	r3, [sp, #28]
 801ff3c:	0030      	movs	r0, r6
 801ff3e:	0039      	movs	r1, r7
 801ff40:	f7e1 ff38 	bl	8001db4 <__aeabi_ddiv>
 801ff44:	f7e3 fa00 	bl	8003348 <__aeabi_d2iz>
 801ff48:	9009      	str	r0, [sp, #36]	@ 0x24
 801ff4a:	f7e3 fa39 	bl	80033c0 <__aeabi_i2d>
 801ff4e:	9a06      	ldr	r2, [sp, #24]
 801ff50:	9b07      	ldr	r3, [sp, #28]
 801ff52:	f7e2 fb73 	bl	800263c <__aeabi_dmul>
 801ff56:	0002      	movs	r2, r0
 801ff58:	000b      	movs	r3, r1
 801ff5a:	0030      	movs	r0, r6
 801ff5c:	0039      	movs	r1, r7
 801ff5e:	f7e2 fe35 	bl	8002bcc <__aeabi_dsub>
 801ff62:	002b      	movs	r3, r5
 801ff64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff66:	3501      	adds	r5, #1
 801ff68:	3230      	adds	r2, #48	@ 0x30
 801ff6a:	701a      	strb	r2, [r3, #0]
 801ff6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ff6e:	002c      	movs	r4, r5
 801ff70:	429a      	cmp	r2, r3
 801ff72:	d000      	beq.n	801ff76 <_dtoa_r+0x4f6>
 801ff74:	e131      	b.n	80201da <_dtoa_r+0x75a>
 801ff76:	0002      	movs	r2, r0
 801ff78:	000b      	movs	r3, r1
 801ff7a:	f7e1 fbb7 	bl	80016ec <__aeabi_dadd>
 801ff7e:	9a06      	ldr	r2, [sp, #24]
 801ff80:	9b07      	ldr	r3, [sp, #28]
 801ff82:	0006      	movs	r6, r0
 801ff84:	000f      	movs	r7, r1
 801ff86:	f7e0 faad 	bl	80004e4 <__aeabi_dcmpgt>
 801ff8a:	2800      	cmp	r0, #0
 801ff8c:	d000      	beq.n	801ff90 <_dtoa_r+0x510>
 801ff8e:	e10f      	b.n	80201b0 <_dtoa_r+0x730>
 801ff90:	9a06      	ldr	r2, [sp, #24]
 801ff92:	9b07      	ldr	r3, [sp, #28]
 801ff94:	0030      	movs	r0, r6
 801ff96:	0039      	movs	r1, r7
 801ff98:	f7e0 fa8a 	bl	80004b0 <__aeabi_dcmpeq>
 801ff9c:	2800      	cmp	r0, #0
 801ff9e:	d003      	beq.n	801ffa8 <_dtoa_r+0x528>
 801ffa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffa2:	07dd      	lsls	r5, r3, #31
 801ffa4:	d500      	bpl.n	801ffa8 <_dtoa_r+0x528>
 801ffa6:	e103      	b.n	80201b0 <_dtoa_r+0x730>
 801ffa8:	9905      	ldr	r1, [sp, #20]
 801ffaa:	9803      	ldr	r0, [sp, #12]
 801ffac:	f001 f812 	bl	8020fd4 <_Bfree>
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	7023      	strb	r3, [r4, #0]
 801ffb4:	9b04      	ldr	r3, [sp, #16]
 801ffb6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ffb8:	3301      	adds	r3, #1
 801ffba:	6013      	str	r3, [r2, #0]
 801ffbc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d100      	bne.n	801ffc4 <_dtoa_r+0x544>
 801ffc2:	e5a7      	b.n	801fb14 <_dtoa_r+0x94>
 801ffc4:	601c      	str	r4, [r3, #0]
 801ffc6:	e5a5      	b.n	801fb14 <_dtoa_r+0x94>
 801ffc8:	423d      	tst	r5, r7
 801ffca:	d005      	beq.n	801ffd8 <_dtoa_r+0x558>
 801ffcc:	6832      	ldr	r2, [r6, #0]
 801ffce:	6873      	ldr	r3, [r6, #4]
 801ffd0:	f7e2 fb34 	bl	800263c <__aeabi_dmul>
 801ffd4:	003b      	movs	r3, r7
 801ffd6:	3401      	adds	r4, #1
 801ffd8:	106d      	asrs	r5, r5, #1
 801ffda:	3608      	adds	r6, #8
 801ffdc:	e736      	b.n	801fe4c <_dtoa_r+0x3cc>
 801ffde:	9b04      	ldr	r3, [sp, #16]
 801ffe0:	930c      	str	r3, [sp, #48]	@ 0x30
 801ffe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffe4:	e75a      	b.n	801fe9c <_dtoa_r+0x41c>
 801ffe6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ffe8:	4b69      	ldr	r3, [pc, #420]	@ (8020190 <_dtoa_r+0x710>)
 801ffea:	3a01      	subs	r2, #1
 801ffec:	00d2      	lsls	r2, r2, #3
 801ffee:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801fff0:	189b      	adds	r3, r3, r2
 801fff2:	681a      	ldr	r2, [r3, #0]
 801fff4:	685b      	ldr	r3, [r3, #4]
 801fff6:	2900      	cmp	r1, #0
 801fff8:	d04c      	beq.n	8020094 <_dtoa_r+0x614>
 801fffa:	2000      	movs	r0, #0
 801fffc:	496b      	ldr	r1, [pc, #428]	@ (80201ac <_dtoa_r+0x72c>)
 801fffe:	f7e1 fed9 	bl	8001db4 <__aeabi_ddiv>
 8020002:	0032      	movs	r2, r6
 8020004:	003b      	movs	r3, r7
 8020006:	f7e2 fde1 	bl	8002bcc <__aeabi_dsub>
 802000a:	9a08      	ldr	r2, [sp, #32]
 802000c:	0006      	movs	r6, r0
 802000e:	4694      	mov	ip, r2
 8020010:	000f      	movs	r7, r1
 8020012:	9b08      	ldr	r3, [sp, #32]
 8020014:	9316      	str	r3, [sp, #88]	@ 0x58
 8020016:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020018:	4463      	add	r3, ip
 802001a:	9311      	str	r3, [sp, #68]	@ 0x44
 802001c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802001e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020020:	f7e3 f992 	bl	8003348 <__aeabi_d2iz>
 8020024:	0005      	movs	r5, r0
 8020026:	f7e3 f9cb 	bl	80033c0 <__aeabi_i2d>
 802002a:	0002      	movs	r2, r0
 802002c:	000b      	movs	r3, r1
 802002e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020032:	f7e2 fdcb 	bl	8002bcc <__aeabi_dsub>
 8020036:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020038:	3530      	adds	r5, #48	@ 0x30
 802003a:	1c5c      	adds	r4, r3, #1
 802003c:	701d      	strb	r5, [r3, #0]
 802003e:	0032      	movs	r2, r6
 8020040:	003b      	movs	r3, r7
 8020042:	900a      	str	r0, [sp, #40]	@ 0x28
 8020044:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020046:	f7e0 fa39 	bl	80004bc <__aeabi_dcmplt>
 802004a:	2800      	cmp	r0, #0
 802004c:	d16a      	bne.n	8020124 <_dtoa_r+0x6a4>
 802004e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020052:	2000      	movs	r0, #0
 8020054:	4950      	ldr	r1, [pc, #320]	@ (8020198 <_dtoa_r+0x718>)
 8020056:	f7e2 fdb9 	bl	8002bcc <__aeabi_dsub>
 802005a:	0032      	movs	r2, r6
 802005c:	003b      	movs	r3, r7
 802005e:	f7e0 fa2d 	bl	80004bc <__aeabi_dcmplt>
 8020062:	2800      	cmp	r0, #0
 8020064:	d000      	beq.n	8020068 <_dtoa_r+0x5e8>
 8020066:	e0a5      	b.n	80201b4 <_dtoa_r+0x734>
 8020068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802006a:	42a3      	cmp	r3, r4
 802006c:	d100      	bne.n	8020070 <_dtoa_r+0x5f0>
 802006e:	e742      	b.n	801fef6 <_dtoa_r+0x476>
 8020070:	2200      	movs	r2, #0
 8020072:	0030      	movs	r0, r6
 8020074:	0039      	movs	r1, r7
 8020076:	4b49      	ldr	r3, [pc, #292]	@ (802019c <_dtoa_r+0x71c>)
 8020078:	f7e2 fae0 	bl	800263c <__aeabi_dmul>
 802007c:	2200      	movs	r2, #0
 802007e:	0006      	movs	r6, r0
 8020080:	000f      	movs	r7, r1
 8020082:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020084:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020086:	4b45      	ldr	r3, [pc, #276]	@ (802019c <_dtoa_r+0x71c>)
 8020088:	f7e2 fad8 	bl	800263c <__aeabi_dmul>
 802008c:	9416      	str	r4, [sp, #88]	@ 0x58
 802008e:	900a      	str	r0, [sp, #40]	@ 0x28
 8020090:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020092:	e7c3      	b.n	802001c <_dtoa_r+0x59c>
 8020094:	0030      	movs	r0, r6
 8020096:	0039      	movs	r1, r7
 8020098:	f7e2 fad0 	bl	800263c <__aeabi_dmul>
 802009c:	9d08      	ldr	r5, [sp, #32]
 802009e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80200a0:	002b      	movs	r3, r5
 80200a2:	4694      	mov	ip, r2
 80200a4:	9016      	str	r0, [sp, #88]	@ 0x58
 80200a6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80200a8:	4463      	add	r3, ip
 80200aa:	9319      	str	r3, [sp, #100]	@ 0x64
 80200ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80200ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80200b0:	f7e3 f94a 	bl	8003348 <__aeabi_d2iz>
 80200b4:	0004      	movs	r4, r0
 80200b6:	f7e3 f983 	bl	80033c0 <__aeabi_i2d>
 80200ba:	000b      	movs	r3, r1
 80200bc:	0002      	movs	r2, r0
 80200be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80200c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80200c2:	f7e2 fd83 	bl	8002bcc <__aeabi_dsub>
 80200c6:	3430      	adds	r4, #48	@ 0x30
 80200c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80200ca:	702c      	strb	r4, [r5, #0]
 80200cc:	3501      	adds	r5, #1
 80200ce:	0006      	movs	r6, r0
 80200d0:	000f      	movs	r7, r1
 80200d2:	42ab      	cmp	r3, r5
 80200d4:	d129      	bne.n	802012a <_dtoa_r+0x6aa>
 80200d6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80200d8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80200da:	9b08      	ldr	r3, [sp, #32]
 80200dc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80200de:	469c      	mov	ip, r3
 80200e0:	2200      	movs	r2, #0
 80200e2:	4b32      	ldr	r3, [pc, #200]	@ (80201ac <_dtoa_r+0x72c>)
 80200e4:	4464      	add	r4, ip
 80200e6:	f7e1 fb01 	bl	80016ec <__aeabi_dadd>
 80200ea:	0002      	movs	r2, r0
 80200ec:	000b      	movs	r3, r1
 80200ee:	0030      	movs	r0, r6
 80200f0:	0039      	movs	r1, r7
 80200f2:	f7e0 f9f7 	bl	80004e4 <__aeabi_dcmpgt>
 80200f6:	2800      	cmp	r0, #0
 80200f8:	d15c      	bne.n	80201b4 <_dtoa_r+0x734>
 80200fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80200fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80200fe:	2000      	movs	r0, #0
 8020100:	492a      	ldr	r1, [pc, #168]	@ (80201ac <_dtoa_r+0x72c>)
 8020102:	f7e2 fd63 	bl	8002bcc <__aeabi_dsub>
 8020106:	0002      	movs	r2, r0
 8020108:	000b      	movs	r3, r1
 802010a:	0030      	movs	r0, r6
 802010c:	0039      	movs	r1, r7
 802010e:	f7e0 f9d5 	bl	80004bc <__aeabi_dcmplt>
 8020112:	2800      	cmp	r0, #0
 8020114:	d100      	bne.n	8020118 <_dtoa_r+0x698>
 8020116:	e6ee      	b.n	801fef6 <_dtoa_r+0x476>
 8020118:	0023      	movs	r3, r4
 802011a:	3c01      	subs	r4, #1
 802011c:	7822      	ldrb	r2, [r4, #0]
 802011e:	2a30      	cmp	r2, #48	@ 0x30
 8020120:	d0fa      	beq.n	8020118 <_dtoa_r+0x698>
 8020122:	001c      	movs	r4, r3
 8020124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020126:	9304      	str	r3, [sp, #16]
 8020128:	e73e      	b.n	801ffa8 <_dtoa_r+0x528>
 802012a:	2200      	movs	r2, #0
 802012c:	4b1b      	ldr	r3, [pc, #108]	@ (802019c <_dtoa_r+0x71c>)
 802012e:	f7e2 fa85 	bl	800263c <__aeabi_dmul>
 8020132:	900a      	str	r0, [sp, #40]	@ 0x28
 8020134:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020136:	e7b9      	b.n	80200ac <_dtoa_r+0x62c>
 8020138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802013a:	2b00      	cmp	r3, #0
 802013c:	d10c      	bne.n	8020158 <_dtoa_r+0x6d8>
 802013e:	9806      	ldr	r0, [sp, #24]
 8020140:	9907      	ldr	r1, [sp, #28]
 8020142:	2200      	movs	r2, #0
 8020144:	4b18      	ldr	r3, [pc, #96]	@ (80201a8 <_dtoa_r+0x728>)
 8020146:	f7e2 fa79 	bl	800263c <__aeabi_dmul>
 802014a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802014c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802014e:	f7e0 f9d3 	bl	80004f8 <__aeabi_dcmpge>
 8020152:	2800      	cmp	r0, #0
 8020154:	d100      	bne.n	8020158 <_dtoa_r+0x6d8>
 8020156:	e164      	b.n	8020422 <_dtoa_r+0x9a2>
 8020158:	2600      	movs	r6, #0
 802015a:	0037      	movs	r7, r6
 802015c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802015e:	9c08      	ldr	r4, [sp, #32]
 8020160:	43db      	mvns	r3, r3
 8020162:	930c      	str	r3, [sp, #48]	@ 0x30
 8020164:	2300      	movs	r3, #0
 8020166:	9304      	str	r3, [sp, #16]
 8020168:	0031      	movs	r1, r6
 802016a:	9803      	ldr	r0, [sp, #12]
 802016c:	f000 ff32 	bl	8020fd4 <_Bfree>
 8020170:	2f00      	cmp	r7, #0
 8020172:	d0d7      	beq.n	8020124 <_dtoa_r+0x6a4>
 8020174:	9b04      	ldr	r3, [sp, #16]
 8020176:	2b00      	cmp	r3, #0
 8020178:	d005      	beq.n	8020186 <_dtoa_r+0x706>
 802017a:	42bb      	cmp	r3, r7
 802017c:	d003      	beq.n	8020186 <_dtoa_r+0x706>
 802017e:	0019      	movs	r1, r3
 8020180:	9803      	ldr	r0, [sp, #12]
 8020182:	f000 ff27 	bl	8020fd4 <_Bfree>
 8020186:	0039      	movs	r1, r7
 8020188:	9803      	ldr	r0, [sp, #12]
 802018a:	f000 ff23 	bl	8020fd4 <_Bfree>
 802018e:	e7c9      	b.n	8020124 <_dtoa_r+0x6a4>
 8020190:	08025128 	.word	0x08025128
 8020194:	08025100 	.word	0x08025100
 8020198:	3ff00000 	.word	0x3ff00000
 802019c:	40240000 	.word	0x40240000
 80201a0:	401c0000 	.word	0x401c0000
 80201a4:	fcc00000 	.word	0xfcc00000
 80201a8:	40140000 	.word	0x40140000
 80201ac:	3fe00000 	.word	0x3fe00000
 80201b0:	9b04      	ldr	r3, [sp, #16]
 80201b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80201b4:	0023      	movs	r3, r4
 80201b6:	001c      	movs	r4, r3
 80201b8:	3b01      	subs	r3, #1
 80201ba:	781a      	ldrb	r2, [r3, #0]
 80201bc:	2a39      	cmp	r2, #57	@ 0x39
 80201be:	d108      	bne.n	80201d2 <_dtoa_r+0x752>
 80201c0:	9a08      	ldr	r2, [sp, #32]
 80201c2:	429a      	cmp	r2, r3
 80201c4:	d1f7      	bne.n	80201b6 <_dtoa_r+0x736>
 80201c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80201c8:	9908      	ldr	r1, [sp, #32]
 80201ca:	3201      	adds	r2, #1
 80201cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80201ce:	2230      	movs	r2, #48	@ 0x30
 80201d0:	700a      	strb	r2, [r1, #0]
 80201d2:	781a      	ldrb	r2, [r3, #0]
 80201d4:	3201      	adds	r2, #1
 80201d6:	701a      	strb	r2, [r3, #0]
 80201d8:	e7a4      	b.n	8020124 <_dtoa_r+0x6a4>
 80201da:	2200      	movs	r2, #0
 80201dc:	4bc6      	ldr	r3, [pc, #792]	@ (80204f8 <_dtoa_r+0xa78>)
 80201de:	f7e2 fa2d 	bl	800263c <__aeabi_dmul>
 80201e2:	2200      	movs	r2, #0
 80201e4:	2300      	movs	r3, #0
 80201e6:	0006      	movs	r6, r0
 80201e8:	000f      	movs	r7, r1
 80201ea:	f7e0 f961 	bl	80004b0 <__aeabi_dcmpeq>
 80201ee:	2800      	cmp	r0, #0
 80201f0:	d100      	bne.n	80201f4 <_dtoa_r+0x774>
 80201f2:	e6a1      	b.n	801ff38 <_dtoa_r+0x4b8>
 80201f4:	e6d8      	b.n	801ffa8 <_dtoa_r+0x528>
 80201f6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80201f8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80201fa:	9c06      	ldr	r4, [sp, #24]
 80201fc:	2f00      	cmp	r7, #0
 80201fe:	d014      	beq.n	802022a <_dtoa_r+0x7aa>
 8020200:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020202:	2a01      	cmp	r2, #1
 8020204:	dd00      	ble.n	8020208 <_dtoa_r+0x788>
 8020206:	e0c8      	b.n	802039a <_dtoa_r+0x91a>
 8020208:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802020a:	2a00      	cmp	r2, #0
 802020c:	d100      	bne.n	8020210 <_dtoa_r+0x790>
 802020e:	e0be      	b.n	802038e <_dtoa_r+0x90e>
 8020210:	4aba      	ldr	r2, [pc, #744]	@ (80204fc <_dtoa_r+0xa7c>)
 8020212:	189b      	adds	r3, r3, r2
 8020214:	9a06      	ldr	r2, [sp, #24]
 8020216:	2101      	movs	r1, #1
 8020218:	18d2      	adds	r2, r2, r3
 802021a:	9206      	str	r2, [sp, #24]
 802021c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802021e:	9803      	ldr	r0, [sp, #12]
 8020220:	18d3      	adds	r3, r2, r3
 8020222:	930d      	str	r3, [sp, #52]	@ 0x34
 8020224:	f000 ffda 	bl	80211dc <__i2b>
 8020228:	0007      	movs	r7, r0
 802022a:	2c00      	cmp	r4, #0
 802022c:	d00e      	beq.n	802024c <_dtoa_r+0x7cc>
 802022e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020230:	2b00      	cmp	r3, #0
 8020232:	dd0b      	ble.n	802024c <_dtoa_r+0x7cc>
 8020234:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020236:	0023      	movs	r3, r4
 8020238:	4294      	cmp	r4, r2
 802023a:	dd00      	ble.n	802023e <_dtoa_r+0x7be>
 802023c:	0013      	movs	r3, r2
 802023e:	9a06      	ldr	r2, [sp, #24]
 8020240:	1ae4      	subs	r4, r4, r3
 8020242:	1ad2      	subs	r2, r2, r3
 8020244:	9206      	str	r2, [sp, #24]
 8020246:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020248:	1ad3      	subs	r3, r2, r3
 802024a:	930d      	str	r3, [sp, #52]	@ 0x34
 802024c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802024e:	2b00      	cmp	r3, #0
 8020250:	d01f      	beq.n	8020292 <_dtoa_r+0x812>
 8020252:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020254:	2b00      	cmp	r3, #0
 8020256:	d100      	bne.n	802025a <_dtoa_r+0x7da>
 8020258:	e0b5      	b.n	80203c6 <_dtoa_r+0x946>
 802025a:	2d00      	cmp	r5, #0
 802025c:	d010      	beq.n	8020280 <_dtoa_r+0x800>
 802025e:	0039      	movs	r1, r7
 8020260:	002a      	movs	r2, r5
 8020262:	9803      	ldr	r0, [sp, #12]
 8020264:	f001 f884 	bl	8021370 <__pow5mult>
 8020268:	9a05      	ldr	r2, [sp, #20]
 802026a:	0001      	movs	r1, r0
 802026c:	0007      	movs	r7, r0
 802026e:	9803      	ldr	r0, [sp, #12]
 8020270:	f000 ffcc 	bl	802120c <__multiply>
 8020274:	0006      	movs	r6, r0
 8020276:	9905      	ldr	r1, [sp, #20]
 8020278:	9803      	ldr	r0, [sp, #12]
 802027a:	f000 feab 	bl	8020fd4 <_Bfree>
 802027e:	9605      	str	r6, [sp, #20]
 8020280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020282:	1b5a      	subs	r2, r3, r5
 8020284:	42ab      	cmp	r3, r5
 8020286:	d004      	beq.n	8020292 <_dtoa_r+0x812>
 8020288:	9905      	ldr	r1, [sp, #20]
 802028a:	9803      	ldr	r0, [sp, #12]
 802028c:	f001 f870 	bl	8021370 <__pow5mult>
 8020290:	9005      	str	r0, [sp, #20]
 8020292:	2101      	movs	r1, #1
 8020294:	9803      	ldr	r0, [sp, #12]
 8020296:	f000 ffa1 	bl	80211dc <__i2b>
 802029a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802029c:	0006      	movs	r6, r0
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d100      	bne.n	80202a4 <_dtoa_r+0x824>
 80202a2:	e1bc      	b.n	802061e <_dtoa_r+0xb9e>
 80202a4:	001a      	movs	r2, r3
 80202a6:	0001      	movs	r1, r0
 80202a8:	9803      	ldr	r0, [sp, #12]
 80202aa:	f001 f861 	bl	8021370 <__pow5mult>
 80202ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80202b0:	0006      	movs	r6, r0
 80202b2:	2500      	movs	r5, #0
 80202b4:	2b01      	cmp	r3, #1
 80202b6:	dc16      	bgt.n	80202e6 <_dtoa_r+0x866>
 80202b8:	2500      	movs	r5, #0
 80202ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80202bc:	42ab      	cmp	r3, r5
 80202be:	d10e      	bne.n	80202de <_dtoa_r+0x85e>
 80202c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80202c2:	031b      	lsls	r3, r3, #12
 80202c4:	42ab      	cmp	r3, r5
 80202c6:	d10a      	bne.n	80202de <_dtoa_r+0x85e>
 80202c8:	4b8d      	ldr	r3, [pc, #564]	@ (8020500 <_dtoa_r+0xa80>)
 80202ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80202cc:	4213      	tst	r3, r2
 80202ce:	d006      	beq.n	80202de <_dtoa_r+0x85e>
 80202d0:	9b06      	ldr	r3, [sp, #24]
 80202d2:	3501      	adds	r5, #1
 80202d4:	3301      	adds	r3, #1
 80202d6:	9306      	str	r3, [sp, #24]
 80202d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80202da:	3301      	adds	r3, #1
 80202dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80202de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80202e0:	2001      	movs	r0, #1
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	d008      	beq.n	80202f8 <_dtoa_r+0x878>
 80202e6:	6933      	ldr	r3, [r6, #16]
 80202e8:	3303      	adds	r3, #3
 80202ea:	009b      	lsls	r3, r3, #2
 80202ec:	18f3      	adds	r3, r6, r3
 80202ee:	6858      	ldr	r0, [r3, #4]
 80202f0:	f000 ff24 	bl	802113c <__hi0bits>
 80202f4:	2320      	movs	r3, #32
 80202f6:	1a18      	subs	r0, r3, r0
 80202f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80202fa:	1818      	adds	r0, r3, r0
 80202fc:	0002      	movs	r2, r0
 80202fe:	231f      	movs	r3, #31
 8020300:	401a      	ands	r2, r3
 8020302:	4218      	tst	r0, r3
 8020304:	d065      	beq.n	80203d2 <_dtoa_r+0x952>
 8020306:	3301      	adds	r3, #1
 8020308:	1a9b      	subs	r3, r3, r2
 802030a:	2b04      	cmp	r3, #4
 802030c:	dd5d      	ble.n	80203ca <_dtoa_r+0x94a>
 802030e:	231c      	movs	r3, #28
 8020310:	1a9b      	subs	r3, r3, r2
 8020312:	9a06      	ldr	r2, [sp, #24]
 8020314:	18e4      	adds	r4, r4, r3
 8020316:	18d2      	adds	r2, r2, r3
 8020318:	9206      	str	r2, [sp, #24]
 802031a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802031c:	18d3      	adds	r3, r2, r3
 802031e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020320:	9b06      	ldr	r3, [sp, #24]
 8020322:	2b00      	cmp	r3, #0
 8020324:	dd05      	ble.n	8020332 <_dtoa_r+0x8b2>
 8020326:	001a      	movs	r2, r3
 8020328:	9905      	ldr	r1, [sp, #20]
 802032a:	9803      	ldr	r0, [sp, #12]
 802032c:	f001 f87c 	bl	8021428 <__lshift>
 8020330:	9005      	str	r0, [sp, #20]
 8020332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020334:	2b00      	cmp	r3, #0
 8020336:	dd05      	ble.n	8020344 <_dtoa_r+0x8c4>
 8020338:	0031      	movs	r1, r6
 802033a:	001a      	movs	r2, r3
 802033c:	9803      	ldr	r0, [sp, #12]
 802033e:	f001 f873 	bl	8021428 <__lshift>
 8020342:	0006      	movs	r6, r0
 8020344:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020346:	2b00      	cmp	r3, #0
 8020348:	d045      	beq.n	80203d6 <_dtoa_r+0x956>
 802034a:	0031      	movs	r1, r6
 802034c:	9805      	ldr	r0, [sp, #20]
 802034e:	f001 f8d7 	bl	8021500 <__mcmp>
 8020352:	2800      	cmp	r0, #0
 8020354:	da3f      	bge.n	80203d6 <_dtoa_r+0x956>
 8020356:	9b04      	ldr	r3, [sp, #16]
 8020358:	220a      	movs	r2, #10
 802035a:	3b01      	subs	r3, #1
 802035c:	930c      	str	r3, [sp, #48]	@ 0x30
 802035e:	9905      	ldr	r1, [sp, #20]
 8020360:	2300      	movs	r3, #0
 8020362:	9803      	ldr	r0, [sp, #12]
 8020364:	f000 fe5a 	bl	802101c <__multadd>
 8020368:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802036a:	9005      	str	r0, [sp, #20]
 802036c:	2b00      	cmp	r3, #0
 802036e:	d100      	bne.n	8020372 <_dtoa_r+0x8f2>
 8020370:	e15c      	b.n	802062c <_dtoa_r+0xbac>
 8020372:	2300      	movs	r3, #0
 8020374:	0039      	movs	r1, r7
 8020376:	220a      	movs	r2, #10
 8020378:	9803      	ldr	r0, [sp, #12]
 802037a:	f000 fe4f 	bl	802101c <__multadd>
 802037e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020380:	0007      	movs	r7, r0
 8020382:	2b00      	cmp	r3, #0
 8020384:	dc55      	bgt.n	8020432 <_dtoa_r+0x9b2>
 8020386:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020388:	2b02      	cmp	r3, #2
 802038a:	dc2d      	bgt.n	80203e8 <_dtoa_r+0x968>
 802038c:	e051      	b.n	8020432 <_dtoa_r+0x9b2>
 802038e:	2336      	movs	r3, #54	@ 0x36
 8020390:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020392:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020394:	9c06      	ldr	r4, [sp, #24]
 8020396:	1a9b      	subs	r3, r3, r2
 8020398:	e73c      	b.n	8020214 <_dtoa_r+0x794>
 802039a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802039c:	1e5d      	subs	r5, r3, #1
 802039e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203a0:	42ab      	cmp	r3, r5
 80203a2:	db08      	blt.n	80203b6 <_dtoa_r+0x936>
 80203a4:	1b5d      	subs	r5, r3, r5
 80203a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203a8:	9c06      	ldr	r4, [sp, #24]
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	db00      	blt.n	80203b0 <_dtoa_r+0x930>
 80203ae:	e731      	b.n	8020214 <_dtoa_r+0x794>
 80203b0:	1ae4      	subs	r4, r4, r3
 80203b2:	2300      	movs	r3, #0
 80203b4:	e72e      	b.n	8020214 <_dtoa_r+0x794>
 80203b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80203ba:	1aeb      	subs	r3, r5, r3
 80203bc:	18d3      	adds	r3, r2, r3
 80203be:	950f      	str	r5, [sp, #60]	@ 0x3c
 80203c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80203c2:	2500      	movs	r5, #0
 80203c4:	e7ef      	b.n	80203a6 <_dtoa_r+0x926>
 80203c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80203c8:	e75e      	b.n	8020288 <_dtoa_r+0x808>
 80203ca:	2b04      	cmp	r3, #4
 80203cc:	d0a8      	beq.n	8020320 <_dtoa_r+0x8a0>
 80203ce:	331c      	adds	r3, #28
 80203d0:	e79f      	b.n	8020312 <_dtoa_r+0x892>
 80203d2:	0013      	movs	r3, r2
 80203d4:	e7fb      	b.n	80203ce <_dtoa_r+0x94e>
 80203d6:	9b04      	ldr	r3, [sp, #16]
 80203d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80203da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80203de:	2b00      	cmp	r3, #0
 80203e0:	dc23      	bgt.n	802042a <_dtoa_r+0x9aa>
 80203e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80203e4:	2b02      	cmp	r3, #2
 80203e6:	dd20      	ble.n	802042a <_dtoa_r+0x9aa>
 80203e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	d000      	beq.n	80203f0 <_dtoa_r+0x970>
 80203ee:	e6b5      	b.n	802015c <_dtoa_r+0x6dc>
 80203f0:	0031      	movs	r1, r6
 80203f2:	2205      	movs	r2, #5
 80203f4:	9803      	ldr	r0, [sp, #12]
 80203f6:	f000 fe11 	bl	802101c <__multadd>
 80203fa:	0006      	movs	r6, r0
 80203fc:	0001      	movs	r1, r0
 80203fe:	9805      	ldr	r0, [sp, #20]
 8020400:	f001 f87e 	bl	8021500 <__mcmp>
 8020404:	2800      	cmp	r0, #0
 8020406:	dc00      	bgt.n	802040a <_dtoa_r+0x98a>
 8020408:	e6a8      	b.n	802015c <_dtoa_r+0x6dc>
 802040a:	9b08      	ldr	r3, [sp, #32]
 802040c:	9a08      	ldr	r2, [sp, #32]
 802040e:	1c5c      	adds	r4, r3, #1
 8020410:	2331      	movs	r3, #49	@ 0x31
 8020412:	7013      	strb	r3, [r2, #0]
 8020414:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020416:	3301      	adds	r3, #1
 8020418:	930c      	str	r3, [sp, #48]	@ 0x30
 802041a:	e6a3      	b.n	8020164 <_dtoa_r+0x6e4>
 802041c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802041e:	0037      	movs	r7, r6
 8020420:	e7f3      	b.n	802040a <_dtoa_r+0x98a>
 8020422:	9b04      	ldr	r3, [sp, #16]
 8020424:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020426:	930c      	str	r3, [sp, #48]	@ 0x30
 8020428:	e7f9      	b.n	802041e <_dtoa_r+0x99e>
 802042a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802042c:	2b00      	cmp	r3, #0
 802042e:	d100      	bne.n	8020432 <_dtoa_r+0x9b2>
 8020430:	e100      	b.n	8020634 <_dtoa_r+0xbb4>
 8020432:	2c00      	cmp	r4, #0
 8020434:	dd05      	ble.n	8020442 <_dtoa_r+0x9c2>
 8020436:	0039      	movs	r1, r7
 8020438:	0022      	movs	r2, r4
 802043a:	9803      	ldr	r0, [sp, #12]
 802043c:	f000 fff4 	bl	8021428 <__lshift>
 8020440:	0007      	movs	r7, r0
 8020442:	0038      	movs	r0, r7
 8020444:	2d00      	cmp	r5, #0
 8020446:	d018      	beq.n	802047a <_dtoa_r+0x9fa>
 8020448:	6879      	ldr	r1, [r7, #4]
 802044a:	9803      	ldr	r0, [sp, #12]
 802044c:	f000 fd7e 	bl	8020f4c <_Balloc>
 8020450:	1e04      	subs	r4, r0, #0
 8020452:	d105      	bne.n	8020460 <_dtoa_r+0x9e0>
 8020454:	0022      	movs	r2, r4
 8020456:	4b2b      	ldr	r3, [pc, #172]	@ (8020504 <_dtoa_r+0xa84>)
 8020458:	482b      	ldr	r0, [pc, #172]	@ (8020508 <_dtoa_r+0xa88>)
 802045a:	492c      	ldr	r1, [pc, #176]	@ (802050c <_dtoa_r+0xa8c>)
 802045c:	f7ff fb25 	bl	801faaa <_dtoa_r+0x2a>
 8020460:	0039      	movs	r1, r7
 8020462:	693a      	ldr	r2, [r7, #16]
 8020464:	310c      	adds	r1, #12
 8020466:	3202      	adds	r2, #2
 8020468:	0092      	lsls	r2, r2, #2
 802046a:	300c      	adds	r0, #12
 802046c:	f7ff fa6a 	bl	801f944 <memcpy>
 8020470:	2201      	movs	r2, #1
 8020472:	0021      	movs	r1, r4
 8020474:	9803      	ldr	r0, [sp, #12]
 8020476:	f000 ffd7 	bl	8021428 <__lshift>
 802047a:	9b08      	ldr	r3, [sp, #32]
 802047c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802047e:	9306      	str	r3, [sp, #24]
 8020480:	3b01      	subs	r3, #1
 8020482:	189b      	adds	r3, r3, r2
 8020484:	2201      	movs	r2, #1
 8020486:	9704      	str	r7, [sp, #16]
 8020488:	0007      	movs	r7, r0
 802048a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802048c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802048e:	4013      	ands	r3, r2
 8020490:	930e      	str	r3, [sp, #56]	@ 0x38
 8020492:	0031      	movs	r1, r6
 8020494:	9805      	ldr	r0, [sp, #20]
 8020496:	f7ff fa65 	bl	801f964 <quorem>
 802049a:	9904      	ldr	r1, [sp, #16]
 802049c:	0005      	movs	r5, r0
 802049e:	900a      	str	r0, [sp, #40]	@ 0x28
 80204a0:	9805      	ldr	r0, [sp, #20]
 80204a2:	f001 f82d 	bl	8021500 <__mcmp>
 80204a6:	003a      	movs	r2, r7
 80204a8:	900d      	str	r0, [sp, #52]	@ 0x34
 80204aa:	0031      	movs	r1, r6
 80204ac:	9803      	ldr	r0, [sp, #12]
 80204ae:	f001 f843 	bl	8021538 <__mdiff>
 80204b2:	2201      	movs	r2, #1
 80204b4:	68c3      	ldr	r3, [r0, #12]
 80204b6:	0004      	movs	r4, r0
 80204b8:	3530      	adds	r5, #48	@ 0x30
 80204ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80204bc:	2b00      	cmp	r3, #0
 80204be:	d104      	bne.n	80204ca <_dtoa_r+0xa4a>
 80204c0:	0001      	movs	r1, r0
 80204c2:	9805      	ldr	r0, [sp, #20]
 80204c4:	f001 f81c 	bl	8021500 <__mcmp>
 80204c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80204ca:	0021      	movs	r1, r4
 80204cc:	9803      	ldr	r0, [sp, #12]
 80204ce:	f000 fd81 	bl	8020fd4 <_Bfree>
 80204d2:	9b06      	ldr	r3, [sp, #24]
 80204d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80204d6:	1c5c      	adds	r4, r3, #1
 80204d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80204da:	4313      	orrs	r3, r2
 80204dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80204de:	4313      	orrs	r3, r2
 80204e0:	d116      	bne.n	8020510 <_dtoa_r+0xa90>
 80204e2:	2d39      	cmp	r5, #57	@ 0x39
 80204e4:	d02f      	beq.n	8020546 <_dtoa_r+0xac6>
 80204e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	dd01      	ble.n	80204f0 <_dtoa_r+0xa70>
 80204ec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80204ee:	3531      	adds	r5, #49	@ 0x31
 80204f0:	9b06      	ldr	r3, [sp, #24]
 80204f2:	701d      	strb	r5, [r3, #0]
 80204f4:	e638      	b.n	8020168 <_dtoa_r+0x6e8>
 80204f6:	46c0      	nop			@ (mov r8, r8)
 80204f8:	40240000 	.word	0x40240000
 80204fc:	00000433 	.word	0x00000433
 8020500:	7ff00000 	.word	0x7ff00000
 8020504:	08025029 	.word	0x08025029
 8020508:	08024fd1 	.word	0x08024fd1
 802050c:	000002ef 	.word	0x000002ef
 8020510:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020512:	2b00      	cmp	r3, #0
 8020514:	db04      	blt.n	8020520 <_dtoa_r+0xaa0>
 8020516:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020518:	4313      	orrs	r3, r2
 802051a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802051c:	4313      	orrs	r3, r2
 802051e:	d11e      	bne.n	802055e <_dtoa_r+0xade>
 8020520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020522:	2b00      	cmp	r3, #0
 8020524:	dde4      	ble.n	80204f0 <_dtoa_r+0xa70>
 8020526:	9905      	ldr	r1, [sp, #20]
 8020528:	2201      	movs	r2, #1
 802052a:	9803      	ldr	r0, [sp, #12]
 802052c:	f000 ff7c 	bl	8021428 <__lshift>
 8020530:	0031      	movs	r1, r6
 8020532:	9005      	str	r0, [sp, #20]
 8020534:	f000 ffe4 	bl	8021500 <__mcmp>
 8020538:	2800      	cmp	r0, #0
 802053a:	dc02      	bgt.n	8020542 <_dtoa_r+0xac2>
 802053c:	d1d8      	bne.n	80204f0 <_dtoa_r+0xa70>
 802053e:	07eb      	lsls	r3, r5, #31
 8020540:	d5d6      	bpl.n	80204f0 <_dtoa_r+0xa70>
 8020542:	2d39      	cmp	r5, #57	@ 0x39
 8020544:	d1d2      	bne.n	80204ec <_dtoa_r+0xa6c>
 8020546:	2339      	movs	r3, #57	@ 0x39
 8020548:	9a06      	ldr	r2, [sp, #24]
 802054a:	7013      	strb	r3, [r2, #0]
 802054c:	0023      	movs	r3, r4
 802054e:	001c      	movs	r4, r3
 8020550:	3b01      	subs	r3, #1
 8020552:	781a      	ldrb	r2, [r3, #0]
 8020554:	2a39      	cmp	r2, #57	@ 0x39
 8020556:	d04f      	beq.n	80205f8 <_dtoa_r+0xb78>
 8020558:	3201      	adds	r2, #1
 802055a:	701a      	strb	r2, [r3, #0]
 802055c:	e604      	b.n	8020168 <_dtoa_r+0x6e8>
 802055e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020560:	2b00      	cmp	r3, #0
 8020562:	dd03      	ble.n	802056c <_dtoa_r+0xaec>
 8020564:	2d39      	cmp	r5, #57	@ 0x39
 8020566:	d0ee      	beq.n	8020546 <_dtoa_r+0xac6>
 8020568:	3501      	adds	r5, #1
 802056a:	e7c1      	b.n	80204f0 <_dtoa_r+0xa70>
 802056c:	9b06      	ldr	r3, [sp, #24]
 802056e:	9a06      	ldr	r2, [sp, #24]
 8020570:	701d      	strb	r5, [r3, #0]
 8020572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020574:	4293      	cmp	r3, r2
 8020576:	d02a      	beq.n	80205ce <_dtoa_r+0xb4e>
 8020578:	2300      	movs	r3, #0
 802057a:	220a      	movs	r2, #10
 802057c:	9905      	ldr	r1, [sp, #20]
 802057e:	9803      	ldr	r0, [sp, #12]
 8020580:	f000 fd4c 	bl	802101c <__multadd>
 8020584:	9b04      	ldr	r3, [sp, #16]
 8020586:	9005      	str	r0, [sp, #20]
 8020588:	42bb      	cmp	r3, r7
 802058a:	d109      	bne.n	80205a0 <_dtoa_r+0xb20>
 802058c:	2300      	movs	r3, #0
 802058e:	220a      	movs	r2, #10
 8020590:	9904      	ldr	r1, [sp, #16]
 8020592:	9803      	ldr	r0, [sp, #12]
 8020594:	f000 fd42 	bl	802101c <__multadd>
 8020598:	9004      	str	r0, [sp, #16]
 802059a:	0007      	movs	r7, r0
 802059c:	9406      	str	r4, [sp, #24]
 802059e:	e778      	b.n	8020492 <_dtoa_r+0xa12>
 80205a0:	9904      	ldr	r1, [sp, #16]
 80205a2:	2300      	movs	r3, #0
 80205a4:	220a      	movs	r2, #10
 80205a6:	9803      	ldr	r0, [sp, #12]
 80205a8:	f000 fd38 	bl	802101c <__multadd>
 80205ac:	2300      	movs	r3, #0
 80205ae:	9004      	str	r0, [sp, #16]
 80205b0:	220a      	movs	r2, #10
 80205b2:	0039      	movs	r1, r7
 80205b4:	9803      	ldr	r0, [sp, #12]
 80205b6:	f000 fd31 	bl	802101c <__multadd>
 80205ba:	e7ee      	b.n	802059a <_dtoa_r+0xb1a>
 80205bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80205be:	2401      	movs	r4, #1
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	dd00      	ble.n	80205c6 <_dtoa_r+0xb46>
 80205c4:	001c      	movs	r4, r3
 80205c6:	9b08      	ldr	r3, [sp, #32]
 80205c8:	191c      	adds	r4, r3, r4
 80205ca:	2300      	movs	r3, #0
 80205cc:	9304      	str	r3, [sp, #16]
 80205ce:	9905      	ldr	r1, [sp, #20]
 80205d0:	2201      	movs	r2, #1
 80205d2:	9803      	ldr	r0, [sp, #12]
 80205d4:	f000 ff28 	bl	8021428 <__lshift>
 80205d8:	0031      	movs	r1, r6
 80205da:	9005      	str	r0, [sp, #20]
 80205dc:	f000 ff90 	bl	8021500 <__mcmp>
 80205e0:	2800      	cmp	r0, #0
 80205e2:	dcb3      	bgt.n	802054c <_dtoa_r+0xacc>
 80205e4:	d101      	bne.n	80205ea <_dtoa_r+0xb6a>
 80205e6:	07ed      	lsls	r5, r5, #31
 80205e8:	d4b0      	bmi.n	802054c <_dtoa_r+0xacc>
 80205ea:	0023      	movs	r3, r4
 80205ec:	001c      	movs	r4, r3
 80205ee:	3b01      	subs	r3, #1
 80205f0:	781a      	ldrb	r2, [r3, #0]
 80205f2:	2a30      	cmp	r2, #48	@ 0x30
 80205f4:	d0fa      	beq.n	80205ec <_dtoa_r+0xb6c>
 80205f6:	e5b7      	b.n	8020168 <_dtoa_r+0x6e8>
 80205f8:	9a08      	ldr	r2, [sp, #32]
 80205fa:	429a      	cmp	r2, r3
 80205fc:	d1a7      	bne.n	802054e <_dtoa_r+0xace>
 80205fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020600:	3301      	adds	r3, #1
 8020602:	930c      	str	r3, [sp, #48]	@ 0x30
 8020604:	2331      	movs	r3, #49	@ 0x31
 8020606:	7013      	strb	r3, [r2, #0]
 8020608:	e5ae      	b.n	8020168 <_dtoa_r+0x6e8>
 802060a:	4b15      	ldr	r3, [pc, #84]	@ (8020660 <_dtoa_r+0xbe0>)
 802060c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802060e:	9308      	str	r3, [sp, #32]
 8020610:	4b14      	ldr	r3, [pc, #80]	@ (8020664 <_dtoa_r+0xbe4>)
 8020612:	2a00      	cmp	r2, #0
 8020614:	d001      	beq.n	802061a <_dtoa_r+0xb9a>
 8020616:	f7ff fa7b 	bl	801fb10 <_dtoa_r+0x90>
 802061a:	f7ff fa7b 	bl	801fb14 <_dtoa_r+0x94>
 802061e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020620:	2b01      	cmp	r3, #1
 8020622:	dc00      	bgt.n	8020626 <_dtoa_r+0xba6>
 8020624:	e648      	b.n	80202b8 <_dtoa_r+0x838>
 8020626:	2001      	movs	r0, #1
 8020628:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802062a:	e665      	b.n	80202f8 <_dtoa_r+0x878>
 802062c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802062e:	2b00      	cmp	r3, #0
 8020630:	dc00      	bgt.n	8020634 <_dtoa_r+0xbb4>
 8020632:	e6d6      	b.n	80203e2 <_dtoa_r+0x962>
 8020634:	2400      	movs	r4, #0
 8020636:	0031      	movs	r1, r6
 8020638:	9805      	ldr	r0, [sp, #20]
 802063a:	f7ff f993 	bl	801f964 <quorem>
 802063e:	9b08      	ldr	r3, [sp, #32]
 8020640:	3030      	adds	r0, #48	@ 0x30
 8020642:	5518      	strb	r0, [r3, r4]
 8020644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020646:	3401      	adds	r4, #1
 8020648:	0005      	movs	r5, r0
 802064a:	429c      	cmp	r4, r3
 802064c:	dab6      	bge.n	80205bc <_dtoa_r+0xb3c>
 802064e:	2300      	movs	r3, #0
 8020650:	220a      	movs	r2, #10
 8020652:	9905      	ldr	r1, [sp, #20]
 8020654:	9803      	ldr	r0, [sp, #12]
 8020656:	f000 fce1 	bl	802101c <__multadd>
 802065a:	9005      	str	r0, [sp, #20]
 802065c:	e7eb      	b.n	8020636 <_dtoa_r+0xbb6>
 802065e:	46c0      	nop			@ (mov r8, r8)
 8020660:	08024fad 	.word	0x08024fad
 8020664:	08024fb5 	.word	0x08024fb5

08020668 <_free_r>:
 8020668:	b570      	push	{r4, r5, r6, lr}
 802066a:	0005      	movs	r5, r0
 802066c:	1e0c      	subs	r4, r1, #0
 802066e:	d010      	beq.n	8020692 <_free_r+0x2a>
 8020670:	3c04      	subs	r4, #4
 8020672:	6823      	ldr	r3, [r4, #0]
 8020674:	2b00      	cmp	r3, #0
 8020676:	da00      	bge.n	802067a <_free_r+0x12>
 8020678:	18e4      	adds	r4, r4, r3
 802067a:	0028      	movs	r0, r5
 802067c:	f000 fc56 	bl	8020f2c <__malloc_lock>
 8020680:	4a1d      	ldr	r2, [pc, #116]	@ (80206f8 <_free_r+0x90>)
 8020682:	6813      	ldr	r3, [r2, #0]
 8020684:	2b00      	cmp	r3, #0
 8020686:	d105      	bne.n	8020694 <_free_r+0x2c>
 8020688:	6063      	str	r3, [r4, #4]
 802068a:	6014      	str	r4, [r2, #0]
 802068c:	0028      	movs	r0, r5
 802068e:	f000 fc55 	bl	8020f3c <__malloc_unlock>
 8020692:	bd70      	pop	{r4, r5, r6, pc}
 8020694:	42a3      	cmp	r3, r4
 8020696:	d908      	bls.n	80206aa <_free_r+0x42>
 8020698:	6820      	ldr	r0, [r4, #0]
 802069a:	1821      	adds	r1, r4, r0
 802069c:	428b      	cmp	r3, r1
 802069e:	d1f3      	bne.n	8020688 <_free_r+0x20>
 80206a0:	6819      	ldr	r1, [r3, #0]
 80206a2:	685b      	ldr	r3, [r3, #4]
 80206a4:	1809      	adds	r1, r1, r0
 80206a6:	6021      	str	r1, [r4, #0]
 80206a8:	e7ee      	b.n	8020688 <_free_r+0x20>
 80206aa:	001a      	movs	r2, r3
 80206ac:	685b      	ldr	r3, [r3, #4]
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	d001      	beq.n	80206b6 <_free_r+0x4e>
 80206b2:	42a3      	cmp	r3, r4
 80206b4:	d9f9      	bls.n	80206aa <_free_r+0x42>
 80206b6:	6811      	ldr	r1, [r2, #0]
 80206b8:	1850      	adds	r0, r2, r1
 80206ba:	42a0      	cmp	r0, r4
 80206bc:	d10b      	bne.n	80206d6 <_free_r+0x6e>
 80206be:	6820      	ldr	r0, [r4, #0]
 80206c0:	1809      	adds	r1, r1, r0
 80206c2:	1850      	adds	r0, r2, r1
 80206c4:	6011      	str	r1, [r2, #0]
 80206c6:	4283      	cmp	r3, r0
 80206c8:	d1e0      	bne.n	802068c <_free_r+0x24>
 80206ca:	6818      	ldr	r0, [r3, #0]
 80206cc:	685b      	ldr	r3, [r3, #4]
 80206ce:	1841      	adds	r1, r0, r1
 80206d0:	6011      	str	r1, [r2, #0]
 80206d2:	6053      	str	r3, [r2, #4]
 80206d4:	e7da      	b.n	802068c <_free_r+0x24>
 80206d6:	42a0      	cmp	r0, r4
 80206d8:	d902      	bls.n	80206e0 <_free_r+0x78>
 80206da:	230c      	movs	r3, #12
 80206dc:	602b      	str	r3, [r5, #0]
 80206de:	e7d5      	b.n	802068c <_free_r+0x24>
 80206e0:	6820      	ldr	r0, [r4, #0]
 80206e2:	1821      	adds	r1, r4, r0
 80206e4:	428b      	cmp	r3, r1
 80206e6:	d103      	bne.n	80206f0 <_free_r+0x88>
 80206e8:	6819      	ldr	r1, [r3, #0]
 80206ea:	685b      	ldr	r3, [r3, #4]
 80206ec:	1809      	adds	r1, r1, r0
 80206ee:	6021      	str	r1, [r4, #0]
 80206f0:	6063      	str	r3, [r4, #4]
 80206f2:	6054      	str	r4, [r2, #4]
 80206f4:	e7ca      	b.n	802068c <_free_r+0x24>
 80206f6:	46c0      	nop			@ (mov r8, r8)
 80206f8:	200038fc 	.word	0x200038fc

080206fc <rshift>:
 80206fc:	0002      	movs	r2, r0
 80206fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020700:	6904      	ldr	r4, [r0, #16]
 8020702:	b085      	sub	sp, #20
 8020704:	3214      	adds	r2, #20
 8020706:	114b      	asrs	r3, r1, #5
 8020708:	0016      	movs	r6, r2
 802070a:	9302      	str	r3, [sp, #8]
 802070c:	429c      	cmp	r4, r3
 802070e:	dd31      	ble.n	8020774 <rshift+0x78>
 8020710:	261f      	movs	r6, #31
 8020712:	000f      	movs	r7, r1
 8020714:	009b      	lsls	r3, r3, #2
 8020716:	00a5      	lsls	r5, r4, #2
 8020718:	18d3      	adds	r3, r2, r3
 802071a:	4037      	ands	r7, r6
 802071c:	1955      	adds	r5, r2, r5
 802071e:	9300      	str	r3, [sp, #0]
 8020720:	9701      	str	r7, [sp, #4]
 8020722:	4231      	tst	r1, r6
 8020724:	d10d      	bne.n	8020742 <rshift+0x46>
 8020726:	0016      	movs	r6, r2
 8020728:	0019      	movs	r1, r3
 802072a:	428d      	cmp	r5, r1
 802072c:	d836      	bhi.n	802079c <rshift+0xa0>
 802072e:	9b00      	ldr	r3, [sp, #0]
 8020730:	2600      	movs	r6, #0
 8020732:	3b03      	subs	r3, #3
 8020734:	429d      	cmp	r5, r3
 8020736:	d302      	bcc.n	802073e <rshift+0x42>
 8020738:	9b02      	ldr	r3, [sp, #8]
 802073a:	1ae4      	subs	r4, r4, r3
 802073c:	00a6      	lsls	r6, r4, #2
 802073e:	1996      	adds	r6, r2, r6
 8020740:	e018      	b.n	8020774 <rshift+0x78>
 8020742:	2120      	movs	r1, #32
 8020744:	9e01      	ldr	r6, [sp, #4]
 8020746:	9f01      	ldr	r7, [sp, #4]
 8020748:	1b89      	subs	r1, r1, r6
 802074a:	9e00      	ldr	r6, [sp, #0]
 802074c:	9103      	str	r1, [sp, #12]
 802074e:	ce02      	ldmia	r6!, {r1}
 8020750:	4694      	mov	ip, r2
 8020752:	40f9      	lsrs	r1, r7
 8020754:	42b5      	cmp	r5, r6
 8020756:	d816      	bhi.n	8020786 <rshift+0x8a>
 8020758:	9b00      	ldr	r3, [sp, #0]
 802075a:	2600      	movs	r6, #0
 802075c:	3301      	adds	r3, #1
 802075e:	429d      	cmp	r5, r3
 8020760:	d303      	bcc.n	802076a <rshift+0x6e>
 8020762:	9b02      	ldr	r3, [sp, #8]
 8020764:	1ae4      	subs	r4, r4, r3
 8020766:	00a6      	lsls	r6, r4, #2
 8020768:	3e04      	subs	r6, #4
 802076a:	1996      	adds	r6, r2, r6
 802076c:	6031      	str	r1, [r6, #0]
 802076e:	2900      	cmp	r1, #0
 8020770:	d000      	beq.n	8020774 <rshift+0x78>
 8020772:	3604      	adds	r6, #4
 8020774:	1ab1      	subs	r1, r6, r2
 8020776:	1089      	asrs	r1, r1, #2
 8020778:	6101      	str	r1, [r0, #16]
 802077a:	4296      	cmp	r6, r2
 802077c:	d101      	bne.n	8020782 <rshift+0x86>
 802077e:	2300      	movs	r3, #0
 8020780:	6143      	str	r3, [r0, #20]
 8020782:	b005      	add	sp, #20
 8020784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020786:	6837      	ldr	r7, [r6, #0]
 8020788:	9b03      	ldr	r3, [sp, #12]
 802078a:	409f      	lsls	r7, r3
 802078c:	430f      	orrs	r7, r1
 802078e:	4661      	mov	r1, ip
 8020790:	c180      	stmia	r1!, {r7}
 8020792:	468c      	mov	ip, r1
 8020794:	9b01      	ldr	r3, [sp, #4]
 8020796:	ce02      	ldmia	r6!, {r1}
 8020798:	40d9      	lsrs	r1, r3
 802079a:	e7db      	b.n	8020754 <rshift+0x58>
 802079c:	c980      	ldmia	r1!, {r7}
 802079e:	c680      	stmia	r6!, {r7}
 80207a0:	e7c3      	b.n	802072a <rshift+0x2e>

080207a2 <__hexdig_fun>:
 80207a2:	0002      	movs	r2, r0
 80207a4:	3a30      	subs	r2, #48	@ 0x30
 80207a6:	0003      	movs	r3, r0
 80207a8:	2a09      	cmp	r2, #9
 80207aa:	d802      	bhi.n	80207b2 <__hexdig_fun+0x10>
 80207ac:	3b20      	subs	r3, #32
 80207ae:	b2d8      	uxtb	r0, r3
 80207b0:	4770      	bx	lr
 80207b2:	0002      	movs	r2, r0
 80207b4:	3a61      	subs	r2, #97	@ 0x61
 80207b6:	2a05      	cmp	r2, #5
 80207b8:	d801      	bhi.n	80207be <__hexdig_fun+0x1c>
 80207ba:	3b47      	subs	r3, #71	@ 0x47
 80207bc:	e7f7      	b.n	80207ae <__hexdig_fun+0xc>
 80207be:	001a      	movs	r2, r3
 80207c0:	3a41      	subs	r2, #65	@ 0x41
 80207c2:	2000      	movs	r0, #0
 80207c4:	2a05      	cmp	r2, #5
 80207c6:	d8f3      	bhi.n	80207b0 <__hexdig_fun+0xe>
 80207c8:	3b27      	subs	r3, #39	@ 0x27
 80207ca:	e7f0      	b.n	80207ae <__hexdig_fun+0xc>

080207cc <__gethex>:
 80207cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80207ce:	b089      	sub	sp, #36	@ 0x24
 80207d0:	9307      	str	r3, [sp, #28]
 80207d2:	680b      	ldr	r3, [r1, #0]
 80207d4:	9201      	str	r2, [sp, #4]
 80207d6:	9003      	str	r0, [sp, #12]
 80207d8:	9106      	str	r1, [sp, #24]
 80207da:	1c9a      	adds	r2, r3, #2
 80207dc:	0011      	movs	r1, r2
 80207de:	3201      	adds	r2, #1
 80207e0:	1e50      	subs	r0, r2, #1
 80207e2:	7800      	ldrb	r0, [r0, #0]
 80207e4:	2830      	cmp	r0, #48	@ 0x30
 80207e6:	d0f9      	beq.n	80207dc <__gethex+0x10>
 80207e8:	1acb      	subs	r3, r1, r3
 80207ea:	3b02      	subs	r3, #2
 80207ec:	9305      	str	r3, [sp, #20]
 80207ee:	9100      	str	r1, [sp, #0]
 80207f0:	f7ff ffd7 	bl	80207a2 <__hexdig_fun>
 80207f4:	2300      	movs	r3, #0
 80207f6:	001d      	movs	r5, r3
 80207f8:	9302      	str	r3, [sp, #8]
 80207fa:	4298      	cmp	r0, r3
 80207fc:	d11e      	bne.n	802083c <__gethex+0x70>
 80207fe:	2201      	movs	r2, #1
 8020800:	49a6      	ldr	r1, [pc, #664]	@ (8020a9c <__gethex+0x2d0>)
 8020802:	9800      	ldr	r0, [sp, #0]
 8020804:	f7fe ffd8 	bl	801f7b8 <strncmp>
 8020808:	0007      	movs	r7, r0
 802080a:	42a8      	cmp	r0, r5
 802080c:	d000      	beq.n	8020810 <__gethex+0x44>
 802080e:	e06a      	b.n	80208e6 <__gethex+0x11a>
 8020810:	9b00      	ldr	r3, [sp, #0]
 8020812:	7858      	ldrb	r0, [r3, #1]
 8020814:	1c5c      	adds	r4, r3, #1
 8020816:	f7ff ffc4 	bl	80207a2 <__hexdig_fun>
 802081a:	2301      	movs	r3, #1
 802081c:	9302      	str	r3, [sp, #8]
 802081e:	42a8      	cmp	r0, r5
 8020820:	d02f      	beq.n	8020882 <__gethex+0xb6>
 8020822:	9400      	str	r4, [sp, #0]
 8020824:	9b00      	ldr	r3, [sp, #0]
 8020826:	7818      	ldrb	r0, [r3, #0]
 8020828:	2830      	cmp	r0, #48	@ 0x30
 802082a:	d009      	beq.n	8020840 <__gethex+0x74>
 802082c:	f7ff ffb9 	bl	80207a2 <__hexdig_fun>
 8020830:	4242      	negs	r2, r0
 8020832:	4142      	adcs	r2, r0
 8020834:	2301      	movs	r3, #1
 8020836:	0025      	movs	r5, r4
 8020838:	9202      	str	r2, [sp, #8]
 802083a:	9305      	str	r3, [sp, #20]
 802083c:	9c00      	ldr	r4, [sp, #0]
 802083e:	e004      	b.n	802084a <__gethex+0x7e>
 8020840:	9b00      	ldr	r3, [sp, #0]
 8020842:	3301      	adds	r3, #1
 8020844:	9300      	str	r3, [sp, #0]
 8020846:	e7ed      	b.n	8020824 <__gethex+0x58>
 8020848:	3401      	adds	r4, #1
 802084a:	7820      	ldrb	r0, [r4, #0]
 802084c:	f7ff ffa9 	bl	80207a2 <__hexdig_fun>
 8020850:	1e07      	subs	r7, r0, #0
 8020852:	d1f9      	bne.n	8020848 <__gethex+0x7c>
 8020854:	2201      	movs	r2, #1
 8020856:	0020      	movs	r0, r4
 8020858:	4990      	ldr	r1, [pc, #576]	@ (8020a9c <__gethex+0x2d0>)
 802085a:	f7fe ffad 	bl	801f7b8 <strncmp>
 802085e:	2800      	cmp	r0, #0
 8020860:	d10d      	bne.n	802087e <__gethex+0xb2>
 8020862:	2d00      	cmp	r5, #0
 8020864:	d106      	bne.n	8020874 <__gethex+0xa8>
 8020866:	3401      	adds	r4, #1
 8020868:	0025      	movs	r5, r4
 802086a:	7820      	ldrb	r0, [r4, #0]
 802086c:	f7ff ff99 	bl	80207a2 <__hexdig_fun>
 8020870:	2800      	cmp	r0, #0
 8020872:	d102      	bne.n	802087a <__gethex+0xae>
 8020874:	1b2d      	subs	r5, r5, r4
 8020876:	00af      	lsls	r7, r5, #2
 8020878:	e003      	b.n	8020882 <__gethex+0xb6>
 802087a:	3401      	adds	r4, #1
 802087c:	e7f5      	b.n	802086a <__gethex+0x9e>
 802087e:	2d00      	cmp	r5, #0
 8020880:	d1f8      	bne.n	8020874 <__gethex+0xa8>
 8020882:	2220      	movs	r2, #32
 8020884:	7823      	ldrb	r3, [r4, #0]
 8020886:	0026      	movs	r6, r4
 8020888:	4393      	bics	r3, r2
 802088a:	2b50      	cmp	r3, #80	@ 0x50
 802088c:	d11d      	bne.n	80208ca <__gethex+0xfe>
 802088e:	7863      	ldrb	r3, [r4, #1]
 8020890:	2b2b      	cmp	r3, #43	@ 0x2b
 8020892:	d02d      	beq.n	80208f0 <__gethex+0x124>
 8020894:	2b2d      	cmp	r3, #45	@ 0x2d
 8020896:	d02f      	beq.n	80208f8 <__gethex+0x12c>
 8020898:	2300      	movs	r3, #0
 802089a:	1c66      	adds	r6, r4, #1
 802089c:	9304      	str	r3, [sp, #16]
 802089e:	7830      	ldrb	r0, [r6, #0]
 80208a0:	f7ff ff7f 	bl	80207a2 <__hexdig_fun>
 80208a4:	1e43      	subs	r3, r0, #1
 80208a6:	b2db      	uxtb	r3, r3
 80208a8:	0005      	movs	r5, r0
 80208aa:	2b18      	cmp	r3, #24
 80208ac:	d82a      	bhi.n	8020904 <__gethex+0x138>
 80208ae:	7870      	ldrb	r0, [r6, #1]
 80208b0:	f7ff ff77 	bl	80207a2 <__hexdig_fun>
 80208b4:	1e43      	subs	r3, r0, #1
 80208b6:	b2db      	uxtb	r3, r3
 80208b8:	3601      	adds	r6, #1
 80208ba:	3d10      	subs	r5, #16
 80208bc:	2b18      	cmp	r3, #24
 80208be:	d91d      	bls.n	80208fc <__gethex+0x130>
 80208c0:	9b04      	ldr	r3, [sp, #16]
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d000      	beq.n	80208c8 <__gethex+0xfc>
 80208c6:	426d      	negs	r5, r5
 80208c8:	197f      	adds	r7, r7, r5
 80208ca:	9b06      	ldr	r3, [sp, #24]
 80208cc:	601e      	str	r6, [r3, #0]
 80208ce:	9b02      	ldr	r3, [sp, #8]
 80208d0:	2b00      	cmp	r3, #0
 80208d2:	d019      	beq.n	8020908 <__gethex+0x13c>
 80208d4:	9b05      	ldr	r3, [sp, #20]
 80208d6:	2606      	movs	r6, #6
 80208d8:	425a      	negs	r2, r3
 80208da:	4153      	adcs	r3, r2
 80208dc:	425b      	negs	r3, r3
 80208de:	401e      	ands	r6, r3
 80208e0:	0030      	movs	r0, r6
 80208e2:	b009      	add	sp, #36	@ 0x24
 80208e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208e6:	2301      	movs	r3, #1
 80208e8:	2700      	movs	r7, #0
 80208ea:	9c00      	ldr	r4, [sp, #0]
 80208ec:	9302      	str	r3, [sp, #8]
 80208ee:	e7c8      	b.n	8020882 <__gethex+0xb6>
 80208f0:	2300      	movs	r3, #0
 80208f2:	9304      	str	r3, [sp, #16]
 80208f4:	1ca6      	adds	r6, r4, #2
 80208f6:	e7d2      	b.n	802089e <__gethex+0xd2>
 80208f8:	2301      	movs	r3, #1
 80208fa:	e7fa      	b.n	80208f2 <__gethex+0x126>
 80208fc:	230a      	movs	r3, #10
 80208fe:	435d      	muls	r5, r3
 8020900:	182d      	adds	r5, r5, r0
 8020902:	e7d4      	b.n	80208ae <__gethex+0xe2>
 8020904:	0026      	movs	r6, r4
 8020906:	e7e0      	b.n	80208ca <__gethex+0xfe>
 8020908:	9b00      	ldr	r3, [sp, #0]
 802090a:	9902      	ldr	r1, [sp, #8]
 802090c:	1ae3      	subs	r3, r4, r3
 802090e:	3b01      	subs	r3, #1
 8020910:	2b07      	cmp	r3, #7
 8020912:	dc0a      	bgt.n	802092a <__gethex+0x15e>
 8020914:	9803      	ldr	r0, [sp, #12]
 8020916:	f000 fb19 	bl	8020f4c <_Balloc>
 802091a:	1e05      	subs	r5, r0, #0
 802091c:	d108      	bne.n	8020930 <__gethex+0x164>
 802091e:	002a      	movs	r2, r5
 8020920:	21e4      	movs	r1, #228	@ 0xe4
 8020922:	4b5f      	ldr	r3, [pc, #380]	@ (8020aa0 <__gethex+0x2d4>)
 8020924:	485f      	ldr	r0, [pc, #380]	@ (8020aa4 <__gethex+0x2d8>)
 8020926:	f001 fbf1 	bl	802210c <__assert_func>
 802092a:	3101      	adds	r1, #1
 802092c:	105b      	asrs	r3, r3, #1
 802092e:	e7ef      	b.n	8020910 <__gethex+0x144>
 8020930:	0003      	movs	r3, r0
 8020932:	3314      	adds	r3, #20
 8020934:	9302      	str	r3, [sp, #8]
 8020936:	9305      	str	r3, [sp, #20]
 8020938:	2300      	movs	r3, #0
 802093a:	001e      	movs	r6, r3
 802093c:	9304      	str	r3, [sp, #16]
 802093e:	9b00      	ldr	r3, [sp, #0]
 8020940:	42a3      	cmp	r3, r4
 8020942:	d338      	bcc.n	80209b6 <__gethex+0x1ea>
 8020944:	9c05      	ldr	r4, [sp, #20]
 8020946:	9b02      	ldr	r3, [sp, #8]
 8020948:	c440      	stmia	r4!, {r6}
 802094a:	1ae4      	subs	r4, r4, r3
 802094c:	10a4      	asrs	r4, r4, #2
 802094e:	0030      	movs	r0, r6
 8020950:	612c      	str	r4, [r5, #16]
 8020952:	f000 fbf3 	bl	802113c <__hi0bits>
 8020956:	9b01      	ldr	r3, [sp, #4]
 8020958:	0164      	lsls	r4, r4, #5
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	1a26      	subs	r6, r4, r0
 802095e:	9300      	str	r3, [sp, #0]
 8020960:	429e      	cmp	r6, r3
 8020962:	dd52      	ble.n	8020a0a <__gethex+0x23e>
 8020964:	1af6      	subs	r6, r6, r3
 8020966:	0031      	movs	r1, r6
 8020968:	0028      	movs	r0, r5
 802096a:	f000 ff96 	bl	802189a <__any_on>
 802096e:	1e04      	subs	r4, r0, #0
 8020970:	d00f      	beq.n	8020992 <__gethex+0x1c6>
 8020972:	2401      	movs	r4, #1
 8020974:	231f      	movs	r3, #31
 8020976:	0020      	movs	r0, r4
 8020978:	1e72      	subs	r2, r6, #1
 802097a:	4013      	ands	r3, r2
 802097c:	4098      	lsls	r0, r3
 802097e:	0003      	movs	r3, r0
 8020980:	1151      	asrs	r1, r2, #5
 8020982:	9802      	ldr	r0, [sp, #8]
 8020984:	0089      	lsls	r1, r1, #2
 8020986:	5809      	ldr	r1, [r1, r0]
 8020988:	4219      	tst	r1, r3
 802098a:	d002      	beq.n	8020992 <__gethex+0x1c6>
 802098c:	42a2      	cmp	r2, r4
 802098e:	dc34      	bgt.n	80209fa <__gethex+0x22e>
 8020990:	2402      	movs	r4, #2
 8020992:	0031      	movs	r1, r6
 8020994:	0028      	movs	r0, r5
 8020996:	f7ff feb1 	bl	80206fc <rshift>
 802099a:	19bf      	adds	r7, r7, r6
 802099c:	9b01      	ldr	r3, [sp, #4]
 802099e:	689b      	ldr	r3, [r3, #8]
 80209a0:	42bb      	cmp	r3, r7
 80209a2:	da42      	bge.n	8020a2a <__gethex+0x25e>
 80209a4:	0029      	movs	r1, r5
 80209a6:	9803      	ldr	r0, [sp, #12]
 80209a8:	f000 fb14 	bl	8020fd4 <_Bfree>
 80209ac:	2300      	movs	r3, #0
 80209ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80209b0:	26a3      	movs	r6, #163	@ 0xa3
 80209b2:	6013      	str	r3, [r2, #0]
 80209b4:	e794      	b.n	80208e0 <__gethex+0x114>
 80209b6:	3c01      	subs	r4, #1
 80209b8:	7823      	ldrb	r3, [r4, #0]
 80209ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80209bc:	d012      	beq.n	80209e4 <__gethex+0x218>
 80209be:	9b04      	ldr	r3, [sp, #16]
 80209c0:	2b20      	cmp	r3, #32
 80209c2:	d104      	bne.n	80209ce <__gethex+0x202>
 80209c4:	9b05      	ldr	r3, [sp, #20]
 80209c6:	c340      	stmia	r3!, {r6}
 80209c8:	2600      	movs	r6, #0
 80209ca:	9305      	str	r3, [sp, #20]
 80209cc:	9604      	str	r6, [sp, #16]
 80209ce:	7820      	ldrb	r0, [r4, #0]
 80209d0:	f7ff fee7 	bl	80207a2 <__hexdig_fun>
 80209d4:	230f      	movs	r3, #15
 80209d6:	4018      	ands	r0, r3
 80209d8:	9b04      	ldr	r3, [sp, #16]
 80209da:	4098      	lsls	r0, r3
 80209dc:	3304      	adds	r3, #4
 80209de:	4306      	orrs	r6, r0
 80209e0:	9304      	str	r3, [sp, #16]
 80209e2:	e7ac      	b.n	802093e <__gethex+0x172>
 80209e4:	9b00      	ldr	r3, [sp, #0]
 80209e6:	42a3      	cmp	r3, r4
 80209e8:	d8e9      	bhi.n	80209be <__gethex+0x1f2>
 80209ea:	2201      	movs	r2, #1
 80209ec:	0020      	movs	r0, r4
 80209ee:	492b      	ldr	r1, [pc, #172]	@ (8020a9c <__gethex+0x2d0>)
 80209f0:	f7fe fee2 	bl	801f7b8 <strncmp>
 80209f4:	2800      	cmp	r0, #0
 80209f6:	d1e2      	bne.n	80209be <__gethex+0x1f2>
 80209f8:	e7a1      	b.n	802093e <__gethex+0x172>
 80209fa:	0028      	movs	r0, r5
 80209fc:	1eb1      	subs	r1, r6, #2
 80209fe:	f000 ff4c 	bl	802189a <__any_on>
 8020a02:	2800      	cmp	r0, #0
 8020a04:	d0c4      	beq.n	8020990 <__gethex+0x1c4>
 8020a06:	2403      	movs	r4, #3
 8020a08:	e7c3      	b.n	8020992 <__gethex+0x1c6>
 8020a0a:	9b00      	ldr	r3, [sp, #0]
 8020a0c:	2400      	movs	r4, #0
 8020a0e:	429e      	cmp	r6, r3
 8020a10:	dac4      	bge.n	802099c <__gethex+0x1d0>
 8020a12:	1b9e      	subs	r6, r3, r6
 8020a14:	0029      	movs	r1, r5
 8020a16:	0032      	movs	r2, r6
 8020a18:	9803      	ldr	r0, [sp, #12]
 8020a1a:	f000 fd05 	bl	8021428 <__lshift>
 8020a1e:	0003      	movs	r3, r0
 8020a20:	3314      	adds	r3, #20
 8020a22:	0005      	movs	r5, r0
 8020a24:	1bbf      	subs	r7, r7, r6
 8020a26:	9302      	str	r3, [sp, #8]
 8020a28:	e7b8      	b.n	802099c <__gethex+0x1d0>
 8020a2a:	9b01      	ldr	r3, [sp, #4]
 8020a2c:	685e      	ldr	r6, [r3, #4]
 8020a2e:	42be      	cmp	r6, r7
 8020a30:	dd6f      	ble.n	8020b12 <__gethex+0x346>
 8020a32:	9b00      	ldr	r3, [sp, #0]
 8020a34:	1bf6      	subs	r6, r6, r7
 8020a36:	42b3      	cmp	r3, r6
 8020a38:	dc36      	bgt.n	8020aa8 <__gethex+0x2dc>
 8020a3a:	9b01      	ldr	r3, [sp, #4]
 8020a3c:	68db      	ldr	r3, [r3, #12]
 8020a3e:	2b02      	cmp	r3, #2
 8020a40:	d024      	beq.n	8020a8c <__gethex+0x2c0>
 8020a42:	2b03      	cmp	r3, #3
 8020a44:	d026      	beq.n	8020a94 <__gethex+0x2c8>
 8020a46:	2b01      	cmp	r3, #1
 8020a48:	d117      	bne.n	8020a7a <__gethex+0x2ae>
 8020a4a:	9b00      	ldr	r3, [sp, #0]
 8020a4c:	42b3      	cmp	r3, r6
 8020a4e:	d114      	bne.n	8020a7a <__gethex+0x2ae>
 8020a50:	2b01      	cmp	r3, #1
 8020a52:	d10b      	bne.n	8020a6c <__gethex+0x2a0>
 8020a54:	9b01      	ldr	r3, [sp, #4]
 8020a56:	9a07      	ldr	r2, [sp, #28]
 8020a58:	685b      	ldr	r3, [r3, #4]
 8020a5a:	2662      	movs	r6, #98	@ 0x62
 8020a5c:	6013      	str	r3, [r2, #0]
 8020a5e:	2301      	movs	r3, #1
 8020a60:	9a02      	ldr	r2, [sp, #8]
 8020a62:	612b      	str	r3, [r5, #16]
 8020a64:	6013      	str	r3, [r2, #0]
 8020a66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a68:	601d      	str	r5, [r3, #0]
 8020a6a:	e739      	b.n	80208e0 <__gethex+0x114>
 8020a6c:	9900      	ldr	r1, [sp, #0]
 8020a6e:	0028      	movs	r0, r5
 8020a70:	3901      	subs	r1, #1
 8020a72:	f000 ff12 	bl	802189a <__any_on>
 8020a76:	2800      	cmp	r0, #0
 8020a78:	d1ec      	bne.n	8020a54 <__gethex+0x288>
 8020a7a:	0029      	movs	r1, r5
 8020a7c:	9803      	ldr	r0, [sp, #12]
 8020a7e:	f000 faa9 	bl	8020fd4 <_Bfree>
 8020a82:	2300      	movs	r3, #0
 8020a84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a86:	2650      	movs	r6, #80	@ 0x50
 8020a88:	6013      	str	r3, [r2, #0]
 8020a8a:	e729      	b.n	80208e0 <__gethex+0x114>
 8020a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020a8e:	2b00      	cmp	r3, #0
 8020a90:	d1f3      	bne.n	8020a7a <__gethex+0x2ae>
 8020a92:	e7df      	b.n	8020a54 <__gethex+0x288>
 8020a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	d1dc      	bne.n	8020a54 <__gethex+0x288>
 8020a9a:	e7ee      	b.n	8020a7a <__gethex+0x2ae>
 8020a9c:	08024e1c 	.word	0x08024e1c
 8020aa0:	08025029 	.word	0x08025029
 8020aa4:	0802503a 	.word	0x0802503a
 8020aa8:	1e77      	subs	r7, r6, #1
 8020aaa:	2c00      	cmp	r4, #0
 8020aac:	d12f      	bne.n	8020b0e <__gethex+0x342>
 8020aae:	2f00      	cmp	r7, #0
 8020ab0:	d004      	beq.n	8020abc <__gethex+0x2f0>
 8020ab2:	0039      	movs	r1, r7
 8020ab4:	0028      	movs	r0, r5
 8020ab6:	f000 fef0 	bl	802189a <__any_on>
 8020aba:	0004      	movs	r4, r0
 8020abc:	231f      	movs	r3, #31
 8020abe:	117a      	asrs	r2, r7, #5
 8020ac0:	401f      	ands	r7, r3
 8020ac2:	3b1e      	subs	r3, #30
 8020ac4:	40bb      	lsls	r3, r7
 8020ac6:	9902      	ldr	r1, [sp, #8]
 8020ac8:	0092      	lsls	r2, r2, #2
 8020aca:	5852      	ldr	r2, [r2, r1]
 8020acc:	421a      	tst	r2, r3
 8020ace:	d001      	beq.n	8020ad4 <__gethex+0x308>
 8020ad0:	2302      	movs	r3, #2
 8020ad2:	431c      	orrs	r4, r3
 8020ad4:	9b00      	ldr	r3, [sp, #0]
 8020ad6:	0031      	movs	r1, r6
 8020ad8:	1b9b      	subs	r3, r3, r6
 8020ada:	2602      	movs	r6, #2
 8020adc:	0028      	movs	r0, r5
 8020ade:	9300      	str	r3, [sp, #0]
 8020ae0:	f7ff fe0c 	bl	80206fc <rshift>
 8020ae4:	9b01      	ldr	r3, [sp, #4]
 8020ae6:	685f      	ldr	r7, [r3, #4]
 8020ae8:	2c00      	cmp	r4, #0
 8020aea:	d03f      	beq.n	8020b6c <__gethex+0x3a0>
 8020aec:	9b01      	ldr	r3, [sp, #4]
 8020aee:	68db      	ldr	r3, [r3, #12]
 8020af0:	2b02      	cmp	r3, #2
 8020af2:	d010      	beq.n	8020b16 <__gethex+0x34a>
 8020af4:	2b03      	cmp	r3, #3
 8020af6:	d012      	beq.n	8020b1e <__gethex+0x352>
 8020af8:	2b01      	cmp	r3, #1
 8020afa:	d106      	bne.n	8020b0a <__gethex+0x33e>
 8020afc:	07a2      	lsls	r2, r4, #30
 8020afe:	d504      	bpl.n	8020b0a <__gethex+0x33e>
 8020b00:	9a02      	ldr	r2, [sp, #8]
 8020b02:	6812      	ldr	r2, [r2, #0]
 8020b04:	4314      	orrs	r4, r2
 8020b06:	421c      	tst	r4, r3
 8020b08:	d10c      	bne.n	8020b24 <__gethex+0x358>
 8020b0a:	2310      	movs	r3, #16
 8020b0c:	e02d      	b.n	8020b6a <__gethex+0x39e>
 8020b0e:	2401      	movs	r4, #1
 8020b10:	e7d4      	b.n	8020abc <__gethex+0x2f0>
 8020b12:	2601      	movs	r6, #1
 8020b14:	e7e8      	b.n	8020ae8 <__gethex+0x31c>
 8020b16:	2301      	movs	r3, #1
 8020b18:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020b1a:	1a9b      	subs	r3, r3, r2
 8020b1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b20:	2b00      	cmp	r3, #0
 8020b22:	d0f2      	beq.n	8020b0a <__gethex+0x33e>
 8020b24:	692b      	ldr	r3, [r5, #16]
 8020b26:	2000      	movs	r0, #0
 8020b28:	9302      	str	r3, [sp, #8]
 8020b2a:	009b      	lsls	r3, r3, #2
 8020b2c:	9304      	str	r3, [sp, #16]
 8020b2e:	002b      	movs	r3, r5
 8020b30:	9a04      	ldr	r2, [sp, #16]
 8020b32:	3314      	adds	r3, #20
 8020b34:	1899      	adds	r1, r3, r2
 8020b36:	681a      	ldr	r2, [r3, #0]
 8020b38:	1c54      	adds	r4, r2, #1
 8020b3a:	d01c      	beq.n	8020b76 <__gethex+0x3aa>
 8020b3c:	3201      	adds	r2, #1
 8020b3e:	601a      	str	r2, [r3, #0]
 8020b40:	002b      	movs	r3, r5
 8020b42:	3314      	adds	r3, #20
 8020b44:	2e02      	cmp	r6, #2
 8020b46:	d13f      	bne.n	8020bc8 <__gethex+0x3fc>
 8020b48:	9a01      	ldr	r2, [sp, #4]
 8020b4a:	9900      	ldr	r1, [sp, #0]
 8020b4c:	6812      	ldr	r2, [r2, #0]
 8020b4e:	3a01      	subs	r2, #1
 8020b50:	428a      	cmp	r2, r1
 8020b52:	d109      	bne.n	8020b68 <__gethex+0x39c>
 8020b54:	000a      	movs	r2, r1
 8020b56:	201f      	movs	r0, #31
 8020b58:	4010      	ands	r0, r2
 8020b5a:	2201      	movs	r2, #1
 8020b5c:	4082      	lsls	r2, r0
 8020b5e:	1149      	asrs	r1, r1, #5
 8020b60:	0089      	lsls	r1, r1, #2
 8020b62:	58cb      	ldr	r3, [r1, r3]
 8020b64:	4213      	tst	r3, r2
 8020b66:	d13d      	bne.n	8020be4 <__gethex+0x418>
 8020b68:	2320      	movs	r3, #32
 8020b6a:	431e      	orrs	r6, r3
 8020b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020b6e:	601d      	str	r5, [r3, #0]
 8020b70:	9b07      	ldr	r3, [sp, #28]
 8020b72:	601f      	str	r7, [r3, #0]
 8020b74:	e6b4      	b.n	80208e0 <__gethex+0x114>
 8020b76:	c301      	stmia	r3!, {r0}
 8020b78:	4299      	cmp	r1, r3
 8020b7a:	d8dc      	bhi.n	8020b36 <__gethex+0x36a>
 8020b7c:	68ab      	ldr	r3, [r5, #8]
 8020b7e:	9a02      	ldr	r2, [sp, #8]
 8020b80:	429a      	cmp	r2, r3
 8020b82:	db18      	blt.n	8020bb6 <__gethex+0x3ea>
 8020b84:	6869      	ldr	r1, [r5, #4]
 8020b86:	9803      	ldr	r0, [sp, #12]
 8020b88:	3101      	adds	r1, #1
 8020b8a:	f000 f9df 	bl	8020f4c <_Balloc>
 8020b8e:	1e04      	subs	r4, r0, #0
 8020b90:	d104      	bne.n	8020b9c <__gethex+0x3d0>
 8020b92:	0022      	movs	r2, r4
 8020b94:	2184      	movs	r1, #132	@ 0x84
 8020b96:	4b1d      	ldr	r3, [pc, #116]	@ (8020c0c <__gethex+0x440>)
 8020b98:	481d      	ldr	r0, [pc, #116]	@ (8020c10 <__gethex+0x444>)
 8020b9a:	e6c4      	b.n	8020926 <__gethex+0x15a>
 8020b9c:	0029      	movs	r1, r5
 8020b9e:	692a      	ldr	r2, [r5, #16]
 8020ba0:	310c      	adds	r1, #12
 8020ba2:	3202      	adds	r2, #2
 8020ba4:	0092      	lsls	r2, r2, #2
 8020ba6:	300c      	adds	r0, #12
 8020ba8:	f7fe fecc 	bl	801f944 <memcpy>
 8020bac:	0029      	movs	r1, r5
 8020bae:	9803      	ldr	r0, [sp, #12]
 8020bb0:	f000 fa10 	bl	8020fd4 <_Bfree>
 8020bb4:	0025      	movs	r5, r4
 8020bb6:	692b      	ldr	r3, [r5, #16]
 8020bb8:	1c5a      	adds	r2, r3, #1
 8020bba:	612a      	str	r2, [r5, #16]
 8020bbc:	2201      	movs	r2, #1
 8020bbe:	3304      	adds	r3, #4
 8020bc0:	009b      	lsls	r3, r3, #2
 8020bc2:	18eb      	adds	r3, r5, r3
 8020bc4:	605a      	str	r2, [r3, #4]
 8020bc6:	e7bb      	b.n	8020b40 <__gethex+0x374>
 8020bc8:	692a      	ldr	r2, [r5, #16]
 8020bca:	9902      	ldr	r1, [sp, #8]
 8020bcc:	428a      	cmp	r2, r1
 8020bce:	dd0b      	ble.n	8020be8 <__gethex+0x41c>
 8020bd0:	2101      	movs	r1, #1
 8020bd2:	0028      	movs	r0, r5
 8020bd4:	f7ff fd92 	bl	80206fc <rshift>
 8020bd8:	9b01      	ldr	r3, [sp, #4]
 8020bda:	3701      	adds	r7, #1
 8020bdc:	689b      	ldr	r3, [r3, #8]
 8020bde:	42bb      	cmp	r3, r7
 8020be0:	da00      	bge.n	8020be4 <__gethex+0x418>
 8020be2:	e6df      	b.n	80209a4 <__gethex+0x1d8>
 8020be4:	2601      	movs	r6, #1
 8020be6:	e7bf      	b.n	8020b68 <__gethex+0x39c>
 8020be8:	221f      	movs	r2, #31
 8020bea:	9c00      	ldr	r4, [sp, #0]
 8020bec:	9900      	ldr	r1, [sp, #0]
 8020bee:	4014      	ands	r4, r2
 8020bf0:	4211      	tst	r1, r2
 8020bf2:	d0f7      	beq.n	8020be4 <__gethex+0x418>
 8020bf4:	9a04      	ldr	r2, [sp, #16]
 8020bf6:	189b      	adds	r3, r3, r2
 8020bf8:	3b04      	subs	r3, #4
 8020bfa:	6818      	ldr	r0, [r3, #0]
 8020bfc:	f000 fa9e 	bl	802113c <__hi0bits>
 8020c00:	2320      	movs	r3, #32
 8020c02:	1b1b      	subs	r3, r3, r4
 8020c04:	4298      	cmp	r0, r3
 8020c06:	dbe3      	blt.n	8020bd0 <__gethex+0x404>
 8020c08:	e7ec      	b.n	8020be4 <__gethex+0x418>
 8020c0a:	46c0      	nop			@ (mov r8, r8)
 8020c0c:	08025029 	.word	0x08025029
 8020c10:	0802503a 	.word	0x0802503a

08020c14 <L_shift>:
 8020c14:	2308      	movs	r3, #8
 8020c16:	b570      	push	{r4, r5, r6, lr}
 8020c18:	2520      	movs	r5, #32
 8020c1a:	1a9a      	subs	r2, r3, r2
 8020c1c:	0092      	lsls	r2, r2, #2
 8020c1e:	1aad      	subs	r5, r5, r2
 8020c20:	6843      	ldr	r3, [r0, #4]
 8020c22:	6804      	ldr	r4, [r0, #0]
 8020c24:	001e      	movs	r6, r3
 8020c26:	40ae      	lsls	r6, r5
 8020c28:	40d3      	lsrs	r3, r2
 8020c2a:	4334      	orrs	r4, r6
 8020c2c:	6004      	str	r4, [r0, #0]
 8020c2e:	6043      	str	r3, [r0, #4]
 8020c30:	3004      	adds	r0, #4
 8020c32:	4288      	cmp	r0, r1
 8020c34:	d3f4      	bcc.n	8020c20 <L_shift+0xc>
 8020c36:	bd70      	pop	{r4, r5, r6, pc}

08020c38 <__match>:
 8020c38:	b530      	push	{r4, r5, lr}
 8020c3a:	6803      	ldr	r3, [r0, #0]
 8020c3c:	780c      	ldrb	r4, [r1, #0]
 8020c3e:	3301      	adds	r3, #1
 8020c40:	2c00      	cmp	r4, #0
 8020c42:	d102      	bne.n	8020c4a <__match+0x12>
 8020c44:	6003      	str	r3, [r0, #0]
 8020c46:	2001      	movs	r0, #1
 8020c48:	bd30      	pop	{r4, r5, pc}
 8020c4a:	781a      	ldrb	r2, [r3, #0]
 8020c4c:	0015      	movs	r5, r2
 8020c4e:	3d41      	subs	r5, #65	@ 0x41
 8020c50:	2d19      	cmp	r5, #25
 8020c52:	d800      	bhi.n	8020c56 <__match+0x1e>
 8020c54:	3220      	adds	r2, #32
 8020c56:	3101      	adds	r1, #1
 8020c58:	42a2      	cmp	r2, r4
 8020c5a:	d0ef      	beq.n	8020c3c <__match+0x4>
 8020c5c:	2000      	movs	r0, #0
 8020c5e:	e7f3      	b.n	8020c48 <__match+0x10>

08020c60 <__hexnan>:
 8020c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c62:	680b      	ldr	r3, [r1, #0]
 8020c64:	b08b      	sub	sp, #44	@ 0x2c
 8020c66:	9201      	str	r2, [sp, #4]
 8020c68:	9901      	ldr	r1, [sp, #4]
 8020c6a:	115a      	asrs	r2, r3, #5
 8020c6c:	0092      	lsls	r2, r2, #2
 8020c6e:	188a      	adds	r2, r1, r2
 8020c70:	9202      	str	r2, [sp, #8]
 8020c72:	0019      	movs	r1, r3
 8020c74:	221f      	movs	r2, #31
 8020c76:	4011      	ands	r1, r2
 8020c78:	9008      	str	r0, [sp, #32]
 8020c7a:	9106      	str	r1, [sp, #24]
 8020c7c:	4213      	tst	r3, r2
 8020c7e:	d002      	beq.n	8020c86 <__hexnan+0x26>
 8020c80:	9b02      	ldr	r3, [sp, #8]
 8020c82:	3304      	adds	r3, #4
 8020c84:	9302      	str	r3, [sp, #8]
 8020c86:	9b02      	ldr	r3, [sp, #8]
 8020c88:	2500      	movs	r5, #0
 8020c8a:	1f1f      	subs	r7, r3, #4
 8020c8c:	003e      	movs	r6, r7
 8020c8e:	003c      	movs	r4, r7
 8020c90:	9b08      	ldr	r3, [sp, #32]
 8020c92:	603d      	str	r5, [r7, #0]
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	9507      	str	r5, [sp, #28]
 8020c98:	9305      	str	r3, [sp, #20]
 8020c9a:	9503      	str	r5, [sp, #12]
 8020c9c:	9b05      	ldr	r3, [sp, #20]
 8020c9e:	3301      	adds	r3, #1
 8020ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ca2:	9b05      	ldr	r3, [sp, #20]
 8020ca4:	785b      	ldrb	r3, [r3, #1]
 8020ca6:	9304      	str	r3, [sp, #16]
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d028      	beq.n	8020cfe <__hexnan+0x9e>
 8020cac:	9804      	ldr	r0, [sp, #16]
 8020cae:	f7ff fd78 	bl	80207a2 <__hexdig_fun>
 8020cb2:	2800      	cmp	r0, #0
 8020cb4:	d155      	bne.n	8020d62 <__hexnan+0x102>
 8020cb6:	9b04      	ldr	r3, [sp, #16]
 8020cb8:	2b20      	cmp	r3, #32
 8020cba:	d819      	bhi.n	8020cf0 <__hexnan+0x90>
 8020cbc:	9b03      	ldr	r3, [sp, #12]
 8020cbe:	9a07      	ldr	r2, [sp, #28]
 8020cc0:	4293      	cmp	r3, r2
 8020cc2:	dd12      	ble.n	8020cea <__hexnan+0x8a>
 8020cc4:	42b4      	cmp	r4, r6
 8020cc6:	d206      	bcs.n	8020cd6 <__hexnan+0x76>
 8020cc8:	2d07      	cmp	r5, #7
 8020cca:	dc04      	bgt.n	8020cd6 <__hexnan+0x76>
 8020ccc:	002a      	movs	r2, r5
 8020cce:	0031      	movs	r1, r6
 8020cd0:	0020      	movs	r0, r4
 8020cd2:	f7ff ff9f 	bl	8020c14 <L_shift>
 8020cd6:	9b01      	ldr	r3, [sp, #4]
 8020cd8:	2508      	movs	r5, #8
 8020cda:	429c      	cmp	r4, r3
 8020cdc:	d905      	bls.n	8020cea <__hexnan+0x8a>
 8020cde:	1f26      	subs	r6, r4, #4
 8020ce0:	2500      	movs	r5, #0
 8020ce2:	0034      	movs	r4, r6
 8020ce4:	9b03      	ldr	r3, [sp, #12]
 8020ce6:	6035      	str	r5, [r6, #0]
 8020ce8:	9307      	str	r3, [sp, #28]
 8020cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cec:	9305      	str	r3, [sp, #20]
 8020cee:	e7d5      	b.n	8020c9c <__hexnan+0x3c>
 8020cf0:	9b04      	ldr	r3, [sp, #16]
 8020cf2:	2b29      	cmp	r3, #41	@ 0x29
 8020cf4:	d15a      	bne.n	8020dac <__hexnan+0x14c>
 8020cf6:	9b05      	ldr	r3, [sp, #20]
 8020cf8:	9a08      	ldr	r2, [sp, #32]
 8020cfa:	3302      	adds	r3, #2
 8020cfc:	6013      	str	r3, [r2, #0]
 8020cfe:	9b03      	ldr	r3, [sp, #12]
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	d053      	beq.n	8020dac <__hexnan+0x14c>
 8020d04:	42b4      	cmp	r4, r6
 8020d06:	d206      	bcs.n	8020d16 <__hexnan+0xb6>
 8020d08:	2d07      	cmp	r5, #7
 8020d0a:	dc04      	bgt.n	8020d16 <__hexnan+0xb6>
 8020d0c:	002a      	movs	r2, r5
 8020d0e:	0031      	movs	r1, r6
 8020d10:	0020      	movs	r0, r4
 8020d12:	f7ff ff7f 	bl	8020c14 <L_shift>
 8020d16:	9b01      	ldr	r3, [sp, #4]
 8020d18:	429c      	cmp	r4, r3
 8020d1a:	d936      	bls.n	8020d8a <__hexnan+0x12a>
 8020d1c:	001a      	movs	r2, r3
 8020d1e:	0023      	movs	r3, r4
 8020d20:	cb02      	ldmia	r3!, {r1}
 8020d22:	c202      	stmia	r2!, {r1}
 8020d24:	429f      	cmp	r7, r3
 8020d26:	d2fb      	bcs.n	8020d20 <__hexnan+0xc0>
 8020d28:	9b02      	ldr	r3, [sp, #8]
 8020d2a:	1c61      	adds	r1, r4, #1
 8020d2c:	1eda      	subs	r2, r3, #3
 8020d2e:	2304      	movs	r3, #4
 8020d30:	4291      	cmp	r1, r2
 8020d32:	d805      	bhi.n	8020d40 <__hexnan+0xe0>
 8020d34:	9b02      	ldr	r3, [sp, #8]
 8020d36:	3b04      	subs	r3, #4
 8020d38:	1b1b      	subs	r3, r3, r4
 8020d3a:	089b      	lsrs	r3, r3, #2
 8020d3c:	3301      	adds	r3, #1
 8020d3e:	009b      	lsls	r3, r3, #2
 8020d40:	9a01      	ldr	r2, [sp, #4]
 8020d42:	18d3      	adds	r3, r2, r3
 8020d44:	2200      	movs	r2, #0
 8020d46:	c304      	stmia	r3!, {r2}
 8020d48:	429f      	cmp	r7, r3
 8020d4a:	d2fc      	bcs.n	8020d46 <__hexnan+0xe6>
 8020d4c:	683b      	ldr	r3, [r7, #0]
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	d104      	bne.n	8020d5c <__hexnan+0xfc>
 8020d52:	9b01      	ldr	r3, [sp, #4]
 8020d54:	429f      	cmp	r7, r3
 8020d56:	d127      	bne.n	8020da8 <__hexnan+0x148>
 8020d58:	2301      	movs	r3, #1
 8020d5a:	603b      	str	r3, [r7, #0]
 8020d5c:	2005      	movs	r0, #5
 8020d5e:	b00b      	add	sp, #44	@ 0x2c
 8020d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d62:	9b03      	ldr	r3, [sp, #12]
 8020d64:	3501      	adds	r5, #1
 8020d66:	3301      	adds	r3, #1
 8020d68:	9303      	str	r3, [sp, #12]
 8020d6a:	2d08      	cmp	r5, #8
 8020d6c:	dd06      	ble.n	8020d7c <__hexnan+0x11c>
 8020d6e:	9b01      	ldr	r3, [sp, #4]
 8020d70:	429c      	cmp	r4, r3
 8020d72:	d9ba      	bls.n	8020cea <__hexnan+0x8a>
 8020d74:	2300      	movs	r3, #0
 8020d76:	2501      	movs	r5, #1
 8020d78:	3c04      	subs	r4, #4
 8020d7a:	6023      	str	r3, [r4, #0]
 8020d7c:	220f      	movs	r2, #15
 8020d7e:	6823      	ldr	r3, [r4, #0]
 8020d80:	4010      	ands	r0, r2
 8020d82:	011b      	lsls	r3, r3, #4
 8020d84:	4303      	orrs	r3, r0
 8020d86:	6023      	str	r3, [r4, #0]
 8020d88:	e7af      	b.n	8020cea <__hexnan+0x8a>
 8020d8a:	9b06      	ldr	r3, [sp, #24]
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d0dd      	beq.n	8020d4c <__hexnan+0xec>
 8020d90:	2320      	movs	r3, #32
 8020d92:	9a06      	ldr	r2, [sp, #24]
 8020d94:	9902      	ldr	r1, [sp, #8]
 8020d96:	1a9b      	subs	r3, r3, r2
 8020d98:	2201      	movs	r2, #1
 8020d9a:	4252      	negs	r2, r2
 8020d9c:	40da      	lsrs	r2, r3
 8020d9e:	3904      	subs	r1, #4
 8020da0:	680b      	ldr	r3, [r1, #0]
 8020da2:	4013      	ands	r3, r2
 8020da4:	600b      	str	r3, [r1, #0]
 8020da6:	e7d1      	b.n	8020d4c <__hexnan+0xec>
 8020da8:	3f04      	subs	r7, #4
 8020daa:	e7cf      	b.n	8020d4c <__hexnan+0xec>
 8020dac:	2004      	movs	r0, #4
 8020dae:	e7d6      	b.n	8020d5e <__hexnan+0xfe>

08020db0 <malloc>:
 8020db0:	b510      	push	{r4, lr}
 8020db2:	4b03      	ldr	r3, [pc, #12]	@ (8020dc0 <malloc+0x10>)
 8020db4:	0001      	movs	r1, r0
 8020db6:	6818      	ldr	r0, [r3, #0]
 8020db8:	f000 f826 	bl	8020e08 <_malloc_r>
 8020dbc:	bd10      	pop	{r4, pc}
 8020dbe:	46c0      	nop			@ (mov r8, r8)
 8020dc0:	200003c8 	.word	0x200003c8

08020dc4 <sbrk_aligned>:
 8020dc4:	b570      	push	{r4, r5, r6, lr}
 8020dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8020e04 <sbrk_aligned+0x40>)
 8020dc8:	000d      	movs	r5, r1
 8020dca:	6831      	ldr	r1, [r6, #0]
 8020dcc:	0004      	movs	r4, r0
 8020dce:	2900      	cmp	r1, #0
 8020dd0:	d102      	bne.n	8020dd8 <sbrk_aligned+0x14>
 8020dd2:	f001 f989 	bl	80220e8 <_sbrk_r>
 8020dd6:	6030      	str	r0, [r6, #0]
 8020dd8:	0029      	movs	r1, r5
 8020dda:	0020      	movs	r0, r4
 8020ddc:	f001 f984 	bl	80220e8 <_sbrk_r>
 8020de0:	1c43      	adds	r3, r0, #1
 8020de2:	d103      	bne.n	8020dec <sbrk_aligned+0x28>
 8020de4:	2501      	movs	r5, #1
 8020de6:	426d      	negs	r5, r5
 8020de8:	0028      	movs	r0, r5
 8020dea:	bd70      	pop	{r4, r5, r6, pc}
 8020dec:	2303      	movs	r3, #3
 8020dee:	1cc5      	adds	r5, r0, #3
 8020df0:	439d      	bics	r5, r3
 8020df2:	42a8      	cmp	r0, r5
 8020df4:	d0f8      	beq.n	8020de8 <sbrk_aligned+0x24>
 8020df6:	1a29      	subs	r1, r5, r0
 8020df8:	0020      	movs	r0, r4
 8020dfa:	f001 f975 	bl	80220e8 <_sbrk_r>
 8020dfe:	3001      	adds	r0, #1
 8020e00:	d1f2      	bne.n	8020de8 <sbrk_aligned+0x24>
 8020e02:	e7ef      	b.n	8020de4 <sbrk_aligned+0x20>
 8020e04:	200038f8 	.word	0x200038f8

08020e08 <_malloc_r>:
 8020e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020e0a:	2203      	movs	r2, #3
 8020e0c:	1ccb      	adds	r3, r1, #3
 8020e0e:	4393      	bics	r3, r2
 8020e10:	3308      	adds	r3, #8
 8020e12:	0005      	movs	r5, r0
 8020e14:	001f      	movs	r7, r3
 8020e16:	2b0c      	cmp	r3, #12
 8020e18:	d234      	bcs.n	8020e84 <_malloc_r+0x7c>
 8020e1a:	270c      	movs	r7, #12
 8020e1c:	42b9      	cmp	r1, r7
 8020e1e:	d833      	bhi.n	8020e88 <_malloc_r+0x80>
 8020e20:	0028      	movs	r0, r5
 8020e22:	f000 f883 	bl	8020f2c <__malloc_lock>
 8020e26:	4e37      	ldr	r6, [pc, #220]	@ (8020f04 <_malloc_r+0xfc>)
 8020e28:	6833      	ldr	r3, [r6, #0]
 8020e2a:	001c      	movs	r4, r3
 8020e2c:	2c00      	cmp	r4, #0
 8020e2e:	d12f      	bne.n	8020e90 <_malloc_r+0x88>
 8020e30:	0039      	movs	r1, r7
 8020e32:	0028      	movs	r0, r5
 8020e34:	f7ff ffc6 	bl	8020dc4 <sbrk_aligned>
 8020e38:	0004      	movs	r4, r0
 8020e3a:	1c43      	adds	r3, r0, #1
 8020e3c:	d15f      	bne.n	8020efe <_malloc_r+0xf6>
 8020e3e:	6834      	ldr	r4, [r6, #0]
 8020e40:	9400      	str	r4, [sp, #0]
 8020e42:	9b00      	ldr	r3, [sp, #0]
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d14a      	bne.n	8020ede <_malloc_r+0xd6>
 8020e48:	2c00      	cmp	r4, #0
 8020e4a:	d052      	beq.n	8020ef2 <_malloc_r+0xea>
 8020e4c:	6823      	ldr	r3, [r4, #0]
 8020e4e:	0028      	movs	r0, r5
 8020e50:	18e3      	adds	r3, r4, r3
 8020e52:	9900      	ldr	r1, [sp, #0]
 8020e54:	9301      	str	r3, [sp, #4]
 8020e56:	f001 f947 	bl	80220e8 <_sbrk_r>
 8020e5a:	9b01      	ldr	r3, [sp, #4]
 8020e5c:	4283      	cmp	r3, r0
 8020e5e:	d148      	bne.n	8020ef2 <_malloc_r+0xea>
 8020e60:	6823      	ldr	r3, [r4, #0]
 8020e62:	0028      	movs	r0, r5
 8020e64:	1aff      	subs	r7, r7, r3
 8020e66:	0039      	movs	r1, r7
 8020e68:	f7ff ffac 	bl	8020dc4 <sbrk_aligned>
 8020e6c:	3001      	adds	r0, #1
 8020e6e:	d040      	beq.n	8020ef2 <_malloc_r+0xea>
 8020e70:	6823      	ldr	r3, [r4, #0]
 8020e72:	19db      	adds	r3, r3, r7
 8020e74:	6023      	str	r3, [r4, #0]
 8020e76:	6833      	ldr	r3, [r6, #0]
 8020e78:	685a      	ldr	r2, [r3, #4]
 8020e7a:	2a00      	cmp	r2, #0
 8020e7c:	d133      	bne.n	8020ee6 <_malloc_r+0xde>
 8020e7e:	9b00      	ldr	r3, [sp, #0]
 8020e80:	6033      	str	r3, [r6, #0]
 8020e82:	e019      	b.n	8020eb8 <_malloc_r+0xb0>
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	dac9      	bge.n	8020e1c <_malloc_r+0x14>
 8020e88:	230c      	movs	r3, #12
 8020e8a:	602b      	str	r3, [r5, #0]
 8020e8c:	2000      	movs	r0, #0
 8020e8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020e90:	6821      	ldr	r1, [r4, #0]
 8020e92:	1bc9      	subs	r1, r1, r7
 8020e94:	d420      	bmi.n	8020ed8 <_malloc_r+0xd0>
 8020e96:	290b      	cmp	r1, #11
 8020e98:	d90a      	bls.n	8020eb0 <_malloc_r+0xa8>
 8020e9a:	19e2      	adds	r2, r4, r7
 8020e9c:	6027      	str	r7, [r4, #0]
 8020e9e:	42a3      	cmp	r3, r4
 8020ea0:	d104      	bne.n	8020eac <_malloc_r+0xa4>
 8020ea2:	6032      	str	r2, [r6, #0]
 8020ea4:	6863      	ldr	r3, [r4, #4]
 8020ea6:	6011      	str	r1, [r2, #0]
 8020ea8:	6053      	str	r3, [r2, #4]
 8020eaa:	e005      	b.n	8020eb8 <_malloc_r+0xb0>
 8020eac:	605a      	str	r2, [r3, #4]
 8020eae:	e7f9      	b.n	8020ea4 <_malloc_r+0x9c>
 8020eb0:	6862      	ldr	r2, [r4, #4]
 8020eb2:	42a3      	cmp	r3, r4
 8020eb4:	d10e      	bne.n	8020ed4 <_malloc_r+0xcc>
 8020eb6:	6032      	str	r2, [r6, #0]
 8020eb8:	0028      	movs	r0, r5
 8020eba:	f000 f83f 	bl	8020f3c <__malloc_unlock>
 8020ebe:	0020      	movs	r0, r4
 8020ec0:	2207      	movs	r2, #7
 8020ec2:	300b      	adds	r0, #11
 8020ec4:	1d23      	adds	r3, r4, #4
 8020ec6:	4390      	bics	r0, r2
 8020ec8:	1ac2      	subs	r2, r0, r3
 8020eca:	4298      	cmp	r0, r3
 8020ecc:	d0df      	beq.n	8020e8e <_malloc_r+0x86>
 8020ece:	1a1b      	subs	r3, r3, r0
 8020ed0:	50a3      	str	r3, [r4, r2]
 8020ed2:	e7dc      	b.n	8020e8e <_malloc_r+0x86>
 8020ed4:	605a      	str	r2, [r3, #4]
 8020ed6:	e7ef      	b.n	8020eb8 <_malloc_r+0xb0>
 8020ed8:	0023      	movs	r3, r4
 8020eda:	6864      	ldr	r4, [r4, #4]
 8020edc:	e7a6      	b.n	8020e2c <_malloc_r+0x24>
 8020ede:	9c00      	ldr	r4, [sp, #0]
 8020ee0:	6863      	ldr	r3, [r4, #4]
 8020ee2:	9300      	str	r3, [sp, #0]
 8020ee4:	e7ad      	b.n	8020e42 <_malloc_r+0x3a>
 8020ee6:	001a      	movs	r2, r3
 8020ee8:	685b      	ldr	r3, [r3, #4]
 8020eea:	42a3      	cmp	r3, r4
 8020eec:	d1fb      	bne.n	8020ee6 <_malloc_r+0xde>
 8020eee:	2300      	movs	r3, #0
 8020ef0:	e7da      	b.n	8020ea8 <_malloc_r+0xa0>
 8020ef2:	230c      	movs	r3, #12
 8020ef4:	0028      	movs	r0, r5
 8020ef6:	602b      	str	r3, [r5, #0]
 8020ef8:	f000 f820 	bl	8020f3c <__malloc_unlock>
 8020efc:	e7c6      	b.n	8020e8c <_malloc_r+0x84>
 8020efe:	6007      	str	r7, [r0, #0]
 8020f00:	e7da      	b.n	8020eb8 <_malloc_r+0xb0>
 8020f02:	46c0      	nop			@ (mov r8, r8)
 8020f04:	200038fc 	.word	0x200038fc

08020f08 <__ascii_mbtowc>:
 8020f08:	b082      	sub	sp, #8
 8020f0a:	2900      	cmp	r1, #0
 8020f0c:	d100      	bne.n	8020f10 <__ascii_mbtowc+0x8>
 8020f0e:	a901      	add	r1, sp, #4
 8020f10:	1e10      	subs	r0, r2, #0
 8020f12:	d006      	beq.n	8020f22 <__ascii_mbtowc+0x1a>
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d006      	beq.n	8020f26 <__ascii_mbtowc+0x1e>
 8020f18:	7813      	ldrb	r3, [r2, #0]
 8020f1a:	600b      	str	r3, [r1, #0]
 8020f1c:	7810      	ldrb	r0, [r2, #0]
 8020f1e:	1e43      	subs	r3, r0, #1
 8020f20:	4198      	sbcs	r0, r3
 8020f22:	b002      	add	sp, #8
 8020f24:	4770      	bx	lr
 8020f26:	2002      	movs	r0, #2
 8020f28:	4240      	negs	r0, r0
 8020f2a:	e7fa      	b.n	8020f22 <__ascii_mbtowc+0x1a>

08020f2c <__malloc_lock>:
 8020f2c:	b510      	push	{r4, lr}
 8020f2e:	4802      	ldr	r0, [pc, #8]	@ (8020f38 <__malloc_lock+0xc>)
 8020f30:	f7fe fcfb 	bl	801f92a <__retarget_lock_acquire_recursive>
 8020f34:	bd10      	pop	{r4, pc}
 8020f36:	46c0      	nop			@ (mov r8, r8)
 8020f38:	200038f4 	.word	0x200038f4

08020f3c <__malloc_unlock>:
 8020f3c:	b510      	push	{r4, lr}
 8020f3e:	4802      	ldr	r0, [pc, #8]	@ (8020f48 <__malloc_unlock+0xc>)
 8020f40:	f7fe fcf4 	bl	801f92c <__retarget_lock_release_recursive>
 8020f44:	bd10      	pop	{r4, pc}
 8020f46:	46c0      	nop			@ (mov r8, r8)
 8020f48:	200038f4 	.word	0x200038f4

08020f4c <_Balloc>:
 8020f4c:	b570      	push	{r4, r5, r6, lr}
 8020f4e:	69c5      	ldr	r5, [r0, #28]
 8020f50:	0006      	movs	r6, r0
 8020f52:	000c      	movs	r4, r1
 8020f54:	2d00      	cmp	r5, #0
 8020f56:	d10e      	bne.n	8020f76 <_Balloc+0x2a>
 8020f58:	2010      	movs	r0, #16
 8020f5a:	f7ff ff29 	bl	8020db0 <malloc>
 8020f5e:	1e02      	subs	r2, r0, #0
 8020f60:	61f0      	str	r0, [r6, #28]
 8020f62:	d104      	bne.n	8020f6e <_Balloc+0x22>
 8020f64:	216b      	movs	r1, #107	@ 0x6b
 8020f66:	4b19      	ldr	r3, [pc, #100]	@ (8020fcc <_Balloc+0x80>)
 8020f68:	4819      	ldr	r0, [pc, #100]	@ (8020fd0 <_Balloc+0x84>)
 8020f6a:	f001 f8cf 	bl	802210c <__assert_func>
 8020f6e:	6045      	str	r5, [r0, #4]
 8020f70:	6085      	str	r5, [r0, #8]
 8020f72:	6005      	str	r5, [r0, #0]
 8020f74:	60c5      	str	r5, [r0, #12]
 8020f76:	69f5      	ldr	r5, [r6, #28]
 8020f78:	68eb      	ldr	r3, [r5, #12]
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	d013      	beq.n	8020fa6 <_Balloc+0x5a>
 8020f7e:	69f3      	ldr	r3, [r6, #28]
 8020f80:	00a2      	lsls	r2, r4, #2
 8020f82:	68db      	ldr	r3, [r3, #12]
 8020f84:	189b      	adds	r3, r3, r2
 8020f86:	6818      	ldr	r0, [r3, #0]
 8020f88:	2800      	cmp	r0, #0
 8020f8a:	d118      	bne.n	8020fbe <_Balloc+0x72>
 8020f8c:	2101      	movs	r1, #1
 8020f8e:	000d      	movs	r5, r1
 8020f90:	40a5      	lsls	r5, r4
 8020f92:	1d6a      	adds	r2, r5, #5
 8020f94:	0030      	movs	r0, r6
 8020f96:	0092      	lsls	r2, r2, #2
 8020f98:	f001 f8d6 	bl	8022148 <_calloc_r>
 8020f9c:	2800      	cmp	r0, #0
 8020f9e:	d00c      	beq.n	8020fba <_Balloc+0x6e>
 8020fa0:	6044      	str	r4, [r0, #4]
 8020fa2:	6085      	str	r5, [r0, #8]
 8020fa4:	e00d      	b.n	8020fc2 <_Balloc+0x76>
 8020fa6:	2221      	movs	r2, #33	@ 0x21
 8020fa8:	2104      	movs	r1, #4
 8020faa:	0030      	movs	r0, r6
 8020fac:	f001 f8cc 	bl	8022148 <_calloc_r>
 8020fb0:	69f3      	ldr	r3, [r6, #28]
 8020fb2:	60e8      	str	r0, [r5, #12]
 8020fb4:	68db      	ldr	r3, [r3, #12]
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d1e1      	bne.n	8020f7e <_Balloc+0x32>
 8020fba:	2000      	movs	r0, #0
 8020fbc:	bd70      	pop	{r4, r5, r6, pc}
 8020fbe:	6802      	ldr	r2, [r0, #0]
 8020fc0:	601a      	str	r2, [r3, #0]
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	6103      	str	r3, [r0, #16]
 8020fc6:	60c3      	str	r3, [r0, #12]
 8020fc8:	e7f8      	b.n	8020fbc <_Balloc+0x70>
 8020fca:	46c0      	nop			@ (mov r8, r8)
 8020fcc:	08024fba 	.word	0x08024fba
 8020fd0:	0802509a 	.word	0x0802509a

08020fd4 <_Bfree>:
 8020fd4:	b570      	push	{r4, r5, r6, lr}
 8020fd6:	69c6      	ldr	r6, [r0, #28]
 8020fd8:	0005      	movs	r5, r0
 8020fda:	000c      	movs	r4, r1
 8020fdc:	2e00      	cmp	r6, #0
 8020fde:	d10e      	bne.n	8020ffe <_Bfree+0x2a>
 8020fe0:	2010      	movs	r0, #16
 8020fe2:	f7ff fee5 	bl	8020db0 <malloc>
 8020fe6:	1e02      	subs	r2, r0, #0
 8020fe8:	61e8      	str	r0, [r5, #28]
 8020fea:	d104      	bne.n	8020ff6 <_Bfree+0x22>
 8020fec:	218f      	movs	r1, #143	@ 0x8f
 8020fee:	4b09      	ldr	r3, [pc, #36]	@ (8021014 <_Bfree+0x40>)
 8020ff0:	4809      	ldr	r0, [pc, #36]	@ (8021018 <_Bfree+0x44>)
 8020ff2:	f001 f88b 	bl	802210c <__assert_func>
 8020ff6:	6046      	str	r6, [r0, #4]
 8020ff8:	6086      	str	r6, [r0, #8]
 8020ffa:	6006      	str	r6, [r0, #0]
 8020ffc:	60c6      	str	r6, [r0, #12]
 8020ffe:	2c00      	cmp	r4, #0
 8021000:	d007      	beq.n	8021012 <_Bfree+0x3e>
 8021002:	69eb      	ldr	r3, [r5, #28]
 8021004:	6862      	ldr	r2, [r4, #4]
 8021006:	68db      	ldr	r3, [r3, #12]
 8021008:	0092      	lsls	r2, r2, #2
 802100a:	189b      	adds	r3, r3, r2
 802100c:	681a      	ldr	r2, [r3, #0]
 802100e:	6022      	str	r2, [r4, #0]
 8021010:	601c      	str	r4, [r3, #0]
 8021012:	bd70      	pop	{r4, r5, r6, pc}
 8021014:	08024fba 	.word	0x08024fba
 8021018:	0802509a 	.word	0x0802509a

0802101c <__multadd>:
 802101c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802101e:	000f      	movs	r7, r1
 8021020:	9001      	str	r0, [sp, #4]
 8021022:	000c      	movs	r4, r1
 8021024:	001e      	movs	r6, r3
 8021026:	2000      	movs	r0, #0
 8021028:	690d      	ldr	r5, [r1, #16]
 802102a:	3714      	adds	r7, #20
 802102c:	683b      	ldr	r3, [r7, #0]
 802102e:	3001      	adds	r0, #1
 8021030:	b299      	uxth	r1, r3
 8021032:	4351      	muls	r1, r2
 8021034:	0c1b      	lsrs	r3, r3, #16
 8021036:	4353      	muls	r3, r2
 8021038:	1989      	adds	r1, r1, r6
 802103a:	0c0e      	lsrs	r6, r1, #16
 802103c:	199b      	adds	r3, r3, r6
 802103e:	0c1e      	lsrs	r6, r3, #16
 8021040:	b289      	uxth	r1, r1
 8021042:	041b      	lsls	r3, r3, #16
 8021044:	185b      	adds	r3, r3, r1
 8021046:	c708      	stmia	r7!, {r3}
 8021048:	4285      	cmp	r5, r0
 802104a:	dcef      	bgt.n	802102c <__multadd+0x10>
 802104c:	2e00      	cmp	r6, #0
 802104e:	d022      	beq.n	8021096 <__multadd+0x7a>
 8021050:	68a3      	ldr	r3, [r4, #8]
 8021052:	42ab      	cmp	r3, r5
 8021054:	dc19      	bgt.n	802108a <__multadd+0x6e>
 8021056:	6861      	ldr	r1, [r4, #4]
 8021058:	9801      	ldr	r0, [sp, #4]
 802105a:	3101      	adds	r1, #1
 802105c:	f7ff ff76 	bl	8020f4c <_Balloc>
 8021060:	1e07      	subs	r7, r0, #0
 8021062:	d105      	bne.n	8021070 <__multadd+0x54>
 8021064:	003a      	movs	r2, r7
 8021066:	21ba      	movs	r1, #186	@ 0xba
 8021068:	4b0c      	ldr	r3, [pc, #48]	@ (802109c <__multadd+0x80>)
 802106a:	480d      	ldr	r0, [pc, #52]	@ (80210a0 <__multadd+0x84>)
 802106c:	f001 f84e 	bl	802210c <__assert_func>
 8021070:	0021      	movs	r1, r4
 8021072:	6922      	ldr	r2, [r4, #16]
 8021074:	310c      	adds	r1, #12
 8021076:	3202      	adds	r2, #2
 8021078:	0092      	lsls	r2, r2, #2
 802107a:	300c      	adds	r0, #12
 802107c:	f7fe fc62 	bl	801f944 <memcpy>
 8021080:	0021      	movs	r1, r4
 8021082:	9801      	ldr	r0, [sp, #4]
 8021084:	f7ff ffa6 	bl	8020fd4 <_Bfree>
 8021088:	003c      	movs	r4, r7
 802108a:	1d2b      	adds	r3, r5, #4
 802108c:	009b      	lsls	r3, r3, #2
 802108e:	18e3      	adds	r3, r4, r3
 8021090:	3501      	adds	r5, #1
 8021092:	605e      	str	r6, [r3, #4]
 8021094:	6125      	str	r5, [r4, #16]
 8021096:	0020      	movs	r0, r4
 8021098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802109a:	46c0      	nop			@ (mov r8, r8)
 802109c:	08025029 	.word	0x08025029
 80210a0:	0802509a 	.word	0x0802509a

080210a4 <__s2b>:
 80210a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80210a6:	0007      	movs	r7, r0
 80210a8:	0018      	movs	r0, r3
 80210aa:	000c      	movs	r4, r1
 80210ac:	3008      	adds	r0, #8
 80210ae:	2109      	movs	r1, #9
 80210b0:	9301      	str	r3, [sp, #4]
 80210b2:	0015      	movs	r5, r2
 80210b4:	f7df f900 	bl	80002b8 <__divsi3>
 80210b8:	2301      	movs	r3, #1
 80210ba:	2100      	movs	r1, #0
 80210bc:	4283      	cmp	r3, r0
 80210be:	db0a      	blt.n	80210d6 <__s2b+0x32>
 80210c0:	0038      	movs	r0, r7
 80210c2:	f7ff ff43 	bl	8020f4c <_Balloc>
 80210c6:	1e01      	subs	r1, r0, #0
 80210c8:	d108      	bne.n	80210dc <__s2b+0x38>
 80210ca:	000a      	movs	r2, r1
 80210cc:	4b19      	ldr	r3, [pc, #100]	@ (8021134 <__s2b+0x90>)
 80210ce:	481a      	ldr	r0, [pc, #104]	@ (8021138 <__s2b+0x94>)
 80210d0:	31d3      	adds	r1, #211	@ 0xd3
 80210d2:	f001 f81b 	bl	802210c <__assert_func>
 80210d6:	005b      	lsls	r3, r3, #1
 80210d8:	3101      	adds	r1, #1
 80210da:	e7ef      	b.n	80210bc <__s2b+0x18>
 80210dc:	9b08      	ldr	r3, [sp, #32]
 80210de:	6143      	str	r3, [r0, #20]
 80210e0:	2301      	movs	r3, #1
 80210e2:	6103      	str	r3, [r0, #16]
 80210e4:	2d09      	cmp	r5, #9
 80210e6:	dd18      	ble.n	802111a <__s2b+0x76>
 80210e8:	0023      	movs	r3, r4
 80210ea:	3309      	adds	r3, #9
 80210ec:	001e      	movs	r6, r3
 80210ee:	9300      	str	r3, [sp, #0]
 80210f0:	1964      	adds	r4, r4, r5
 80210f2:	7833      	ldrb	r3, [r6, #0]
 80210f4:	220a      	movs	r2, #10
 80210f6:	0038      	movs	r0, r7
 80210f8:	3b30      	subs	r3, #48	@ 0x30
 80210fa:	f7ff ff8f 	bl	802101c <__multadd>
 80210fe:	3601      	adds	r6, #1
 8021100:	0001      	movs	r1, r0
 8021102:	42a6      	cmp	r6, r4
 8021104:	d1f5      	bne.n	80210f2 <__s2b+0x4e>
 8021106:	002c      	movs	r4, r5
 8021108:	9b00      	ldr	r3, [sp, #0]
 802110a:	3c08      	subs	r4, #8
 802110c:	191c      	adds	r4, r3, r4
 802110e:	002e      	movs	r6, r5
 8021110:	9b01      	ldr	r3, [sp, #4]
 8021112:	429e      	cmp	r6, r3
 8021114:	db04      	blt.n	8021120 <__s2b+0x7c>
 8021116:	0008      	movs	r0, r1
 8021118:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802111a:	2509      	movs	r5, #9
 802111c:	340a      	adds	r4, #10
 802111e:	e7f6      	b.n	802110e <__s2b+0x6a>
 8021120:	1b63      	subs	r3, r4, r5
 8021122:	5d9b      	ldrb	r3, [r3, r6]
 8021124:	220a      	movs	r2, #10
 8021126:	0038      	movs	r0, r7
 8021128:	3b30      	subs	r3, #48	@ 0x30
 802112a:	f7ff ff77 	bl	802101c <__multadd>
 802112e:	3601      	adds	r6, #1
 8021130:	0001      	movs	r1, r0
 8021132:	e7ed      	b.n	8021110 <__s2b+0x6c>
 8021134:	08025029 	.word	0x08025029
 8021138:	0802509a 	.word	0x0802509a

0802113c <__hi0bits>:
 802113c:	2280      	movs	r2, #128	@ 0x80
 802113e:	0003      	movs	r3, r0
 8021140:	0252      	lsls	r2, r2, #9
 8021142:	2000      	movs	r0, #0
 8021144:	4293      	cmp	r3, r2
 8021146:	d201      	bcs.n	802114c <__hi0bits+0x10>
 8021148:	041b      	lsls	r3, r3, #16
 802114a:	3010      	adds	r0, #16
 802114c:	2280      	movs	r2, #128	@ 0x80
 802114e:	0452      	lsls	r2, r2, #17
 8021150:	4293      	cmp	r3, r2
 8021152:	d201      	bcs.n	8021158 <__hi0bits+0x1c>
 8021154:	3008      	adds	r0, #8
 8021156:	021b      	lsls	r3, r3, #8
 8021158:	2280      	movs	r2, #128	@ 0x80
 802115a:	0552      	lsls	r2, r2, #21
 802115c:	4293      	cmp	r3, r2
 802115e:	d201      	bcs.n	8021164 <__hi0bits+0x28>
 8021160:	3004      	adds	r0, #4
 8021162:	011b      	lsls	r3, r3, #4
 8021164:	2280      	movs	r2, #128	@ 0x80
 8021166:	05d2      	lsls	r2, r2, #23
 8021168:	4293      	cmp	r3, r2
 802116a:	d201      	bcs.n	8021170 <__hi0bits+0x34>
 802116c:	3002      	adds	r0, #2
 802116e:	009b      	lsls	r3, r3, #2
 8021170:	2b00      	cmp	r3, #0
 8021172:	db03      	blt.n	802117c <__hi0bits+0x40>
 8021174:	3001      	adds	r0, #1
 8021176:	4213      	tst	r3, r2
 8021178:	d100      	bne.n	802117c <__hi0bits+0x40>
 802117a:	2020      	movs	r0, #32
 802117c:	4770      	bx	lr

0802117e <__lo0bits>:
 802117e:	6803      	ldr	r3, [r0, #0]
 8021180:	0001      	movs	r1, r0
 8021182:	2207      	movs	r2, #7
 8021184:	0018      	movs	r0, r3
 8021186:	4010      	ands	r0, r2
 8021188:	4213      	tst	r3, r2
 802118a:	d00d      	beq.n	80211a8 <__lo0bits+0x2a>
 802118c:	3a06      	subs	r2, #6
 802118e:	2000      	movs	r0, #0
 8021190:	4213      	tst	r3, r2
 8021192:	d105      	bne.n	80211a0 <__lo0bits+0x22>
 8021194:	3002      	adds	r0, #2
 8021196:	4203      	tst	r3, r0
 8021198:	d003      	beq.n	80211a2 <__lo0bits+0x24>
 802119a:	40d3      	lsrs	r3, r2
 802119c:	0010      	movs	r0, r2
 802119e:	600b      	str	r3, [r1, #0]
 80211a0:	4770      	bx	lr
 80211a2:	089b      	lsrs	r3, r3, #2
 80211a4:	600b      	str	r3, [r1, #0]
 80211a6:	e7fb      	b.n	80211a0 <__lo0bits+0x22>
 80211a8:	b29a      	uxth	r2, r3
 80211aa:	2a00      	cmp	r2, #0
 80211ac:	d101      	bne.n	80211b2 <__lo0bits+0x34>
 80211ae:	2010      	movs	r0, #16
 80211b0:	0c1b      	lsrs	r3, r3, #16
 80211b2:	b2da      	uxtb	r2, r3
 80211b4:	2a00      	cmp	r2, #0
 80211b6:	d101      	bne.n	80211bc <__lo0bits+0x3e>
 80211b8:	3008      	adds	r0, #8
 80211ba:	0a1b      	lsrs	r3, r3, #8
 80211bc:	071a      	lsls	r2, r3, #28
 80211be:	d101      	bne.n	80211c4 <__lo0bits+0x46>
 80211c0:	3004      	adds	r0, #4
 80211c2:	091b      	lsrs	r3, r3, #4
 80211c4:	079a      	lsls	r2, r3, #30
 80211c6:	d101      	bne.n	80211cc <__lo0bits+0x4e>
 80211c8:	3002      	adds	r0, #2
 80211ca:	089b      	lsrs	r3, r3, #2
 80211cc:	07da      	lsls	r2, r3, #31
 80211ce:	d4e9      	bmi.n	80211a4 <__lo0bits+0x26>
 80211d0:	3001      	adds	r0, #1
 80211d2:	085b      	lsrs	r3, r3, #1
 80211d4:	d1e6      	bne.n	80211a4 <__lo0bits+0x26>
 80211d6:	2020      	movs	r0, #32
 80211d8:	e7e2      	b.n	80211a0 <__lo0bits+0x22>
	...

080211dc <__i2b>:
 80211dc:	b510      	push	{r4, lr}
 80211de:	000c      	movs	r4, r1
 80211e0:	2101      	movs	r1, #1
 80211e2:	f7ff feb3 	bl	8020f4c <_Balloc>
 80211e6:	2800      	cmp	r0, #0
 80211e8:	d107      	bne.n	80211fa <__i2b+0x1e>
 80211ea:	2146      	movs	r1, #70	@ 0x46
 80211ec:	4c05      	ldr	r4, [pc, #20]	@ (8021204 <__i2b+0x28>)
 80211ee:	0002      	movs	r2, r0
 80211f0:	4b05      	ldr	r3, [pc, #20]	@ (8021208 <__i2b+0x2c>)
 80211f2:	0020      	movs	r0, r4
 80211f4:	31ff      	adds	r1, #255	@ 0xff
 80211f6:	f000 ff89 	bl	802210c <__assert_func>
 80211fa:	2301      	movs	r3, #1
 80211fc:	6144      	str	r4, [r0, #20]
 80211fe:	6103      	str	r3, [r0, #16]
 8021200:	bd10      	pop	{r4, pc}
 8021202:	46c0      	nop			@ (mov r8, r8)
 8021204:	0802509a 	.word	0x0802509a
 8021208:	08025029 	.word	0x08025029

0802120c <__multiply>:
 802120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802120e:	0014      	movs	r4, r2
 8021210:	690a      	ldr	r2, [r1, #16]
 8021212:	6923      	ldr	r3, [r4, #16]
 8021214:	000d      	movs	r5, r1
 8021216:	b08b      	sub	sp, #44	@ 0x2c
 8021218:	429a      	cmp	r2, r3
 802121a:	db02      	blt.n	8021222 <__multiply+0x16>
 802121c:	0023      	movs	r3, r4
 802121e:	000c      	movs	r4, r1
 8021220:	001d      	movs	r5, r3
 8021222:	6927      	ldr	r7, [r4, #16]
 8021224:	692e      	ldr	r6, [r5, #16]
 8021226:	6861      	ldr	r1, [r4, #4]
 8021228:	19bb      	adds	r3, r7, r6
 802122a:	9303      	str	r3, [sp, #12]
 802122c:	68a3      	ldr	r3, [r4, #8]
 802122e:	19ba      	adds	r2, r7, r6
 8021230:	4293      	cmp	r3, r2
 8021232:	da00      	bge.n	8021236 <__multiply+0x2a>
 8021234:	3101      	adds	r1, #1
 8021236:	f7ff fe89 	bl	8020f4c <_Balloc>
 802123a:	9002      	str	r0, [sp, #8]
 802123c:	2800      	cmp	r0, #0
 802123e:	d106      	bne.n	802124e <__multiply+0x42>
 8021240:	21b1      	movs	r1, #177	@ 0xb1
 8021242:	4b49      	ldr	r3, [pc, #292]	@ (8021368 <__multiply+0x15c>)
 8021244:	4849      	ldr	r0, [pc, #292]	@ (802136c <__multiply+0x160>)
 8021246:	9a02      	ldr	r2, [sp, #8]
 8021248:	0049      	lsls	r1, r1, #1
 802124a:	f000 ff5f 	bl	802210c <__assert_func>
 802124e:	9b02      	ldr	r3, [sp, #8]
 8021250:	2200      	movs	r2, #0
 8021252:	3314      	adds	r3, #20
 8021254:	469c      	mov	ip, r3
 8021256:	19bb      	adds	r3, r7, r6
 8021258:	009b      	lsls	r3, r3, #2
 802125a:	4463      	add	r3, ip
 802125c:	9304      	str	r3, [sp, #16]
 802125e:	4663      	mov	r3, ip
 8021260:	9904      	ldr	r1, [sp, #16]
 8021262:	428b      	cmp	r3, r1
 8021264:	d32a      	bcc.n	80212bc <__multiply+0xb0>
 8021266:	0023      	movs	r3, r4
 8021268:	00bf      	lsls	r7, r7, #2
 802126a:	3314      	adds	r3, #20
 802126c:	3514      	adds	r5, #20
 802126e:	9308      	str	r3, [sp, #32]
 8021270:	00b6      	lsls	r6, r6, #2
 8021272:	19db      	adds	r3, r3, r7
 8021274:	9305      	str	r3, [sp, #20]
 8021276:	19ab      	adds	r3, r5, r6
 8021278:	9309      	str	r3, [sp, #36]	@ 0x24
 802127a:	2304      	movs	r3, #4
 802127c:	9306      	str	r3, [sp, #24]
 802127e:	0023      	movs	r3, r4
 8021280:	9a05      	ldr	r2, [sp, #20]
 8021282:	3315      	adds	r3, #21
 8021284:	9501      	str	r5, [sp, #4]
 8021286:	429a      	cmp	r2, r3
 8021288:	d305      	bcc.n	8021296 <__multiply+0x8a>
 802128a:	1b13      	subs	r3, r2, r4
 802128c:	3b15      	subs	r3, #21
 802128e:	089b      	lsrs	r3, r3, #2
 8021290:	3301      	adds	r3, #1
 8021292:	009b      	lsls	r3, r3, #2
 8021294:	9306      	str	r3, [sp, #24]
 8021296:	9b01      	ldr	r3, [sp, #4]
 8021298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802129a:	4293      	cmp	r3, r2
 802129c:	d310      	bcc.n	80212c0 <__multiply+0xb4>
 802129e:	9b03      	ldr	r3, [sp, #12]
 80212a0:	2b00      	cmp	r3, #0
 80212a2:	dd05      	ble.n	80212b0 <__multiply+0xa4>
 80212a4:	9b04      	ldr	r3, [sp, #16]
 80212a6:	3b04      	subs	r3, #4
 80212a8:	9304      	str	r3, [sp, #16]
 80212aa:	681b      	ldr	r3, [r3, #0]
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d056      	beq.n	802135e <__multiply+0x152>
 80212b0:	9b02      	ldr	r3, [sp, #8]
 80212b2:	9a03      	ldr	r2, [sp, #12]
 80212b4:	0018      	movs	r0, r3
 80212b6:	611a      	str	r2, [r3, #16]
 80212b8:	b00b      	add	sp, #44	@ 0x2c
 80212ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212bc:	c304      	stmia	r3!, {r2}
 80212be:	e7cf      	b.n	8021260 <__multiply+0x54>
 80212c0:	9b01      	ldr	r3, [sp, #4]
 80212c2:	6818      	ldr	r0, [r3, #0]
 80212c4:	b280      	uxth	r0, r0
 80212c6:	2800      	cmp	r0, #0
 80212c8:	d01e      	beq.n	8021308 <__multiply+0xfc>
 80212ca:	4667      	mov	r7, ip
 80212cc:	2500      	movs	r5, #0
 80212ce:	9e08      	ldr	r6, [sp, #32]
 80212d0:	ce02      	ldmia	r6!, {r1}
 80212d2:	683b      	ldr	r3, [r7, #0]
 80212d4:	9307      	str	r3, [sp, #28]
 80212d6:	b28b      	uxth	r3, r1
 80212d8:	4343      	muls	r3, r0
 80212da:	001a      	movs	r2, r3
 80212dc:	466b      	mov	r3, sp
 80212de:	0c09      	lsrs	r1, r1, #16
 80212e0:	8b9b      	ldrh	r3, [r3, #28]
 80212e2:	4341      	muls	r1, r0
 80212e4:	18d3      	adds	r3, r2, r3
 80212e6:	9a07      	ldr	r2, [sp, #28]
 80212e8:	195b      	adds	r3, r3, r5
 80212ea:	0c12      	lsrs	r2, r2, #16
 80212ec:	1889      	adds	r1, r1, r2
 80212ee:	0c1a      	lsrs	r2, r3, #16
 80212f0:	188a      	adds	r2, r1, r2
 80212f2:	b29b      	uxth	r3, r3
 80212f4:	0c15      	lsrs	r5, r2, #16
 80212f6:	0412      	lsls	r2, r2, #16
 80212f8:	431a      	orrs	r2, r3
 80212fa:	9b05      	ldr	r3, [sp, #20]
 80212fc:	c704      	stmia	r7!, {r2}
 80212fe:	42b3      	cmp	r3, r6
 8021300:	d8e6      	bhi.n	80212d0 <__multiply+0xc4>
 8021302:	4663      	mov	r3, ip
 8021304:	9a06      	ldr	r2, [sp, #24]
 8021306:	509d      	str	r5, [r3, r2]
 8021308:	9b01      	ldr	r3, [sp, #4]
 802130a:	6818      	ldr	r0, [r3, #0]
 802130c:	0c00      	lsrs	r0, r0, #16
 802130e:	d020      	beq.n	8021352 <__multiply+0x146>
 8021310:	4663      	mov	r3, ip
 8021312:	0025      	movs	r5, r4
 8021314:	4661      	mov	r1, ip
 8021316:	2700      	movs	r7, #0
 8021318:	681b      	ldr	r3, [r3, #0]
 802131a:	3514      	adds	r5, #20
 802131c:	682a      	ldr	r2, [r5, #0]
 802131e:	680e      	ldr	r6, [r1, #0]
 8021320:	b292      	uxth	r2, r2
 8021322:	4342      	muls	r2, r0
 8021324:	0c36      	lsrs	r6, r6, #16
 8021326:	1992      	adds	r2, r2, r6
 8021328:	19d2      	adds	r2, r2, r7
 802132a:	0416      	lsls	r6, r2, #16
 802132c:	b29b      	uxth	r3, r3
 802132e:	431e      	orrs	r6, r3
 8021330:	600e      	str	r6, [r1, #0]
 8021332:	cd40      	ldmia	r5!, {r6}
 8021334:	684b      	ldr	r3, [r1, #4]
 8021336:	0c36      	lsrs	r6, r6, #16
 8021338:	4346      	muls	r6, r0
 802133a:	b29b      	uxth	r3, r3
 802133c:	0c12      	lsrs	r2, r2, #16
 802133e:	18f3      	adds	r3, r6, r3
 8021340:	189b      	adds	r3, r3, r2
 8021342:	9a05      	ldr	r2, [sp, #20]
 8021344:	0c1f      	lsrs	r7, r3, #16
 8021346:	3104      	adds	r1, #4
 8021348:	42aa      	cmp	r2, r5
 802134a:	d8e7      	bhi.n	802131c <__multiply+0x110>
 802134c:	4662      	mov	r2, ip
 802134e:	9906      	ldr	r1, [sp, #24]
 8021350:	5053      	str	r3, [r2, r1]
 8021352:	9b01      	ldr	r3, [sp, #4]
 8021354:	3304      	adds	r3, #4
 8021356:	9301      	str	r3, [sp, #4]
 8021358:	2304      	movs	r3, #4
 802135a:	449c      	add	ip, r3
 802135c:	e79b      	b.n	8021296 <__multiply+0x8a>
 802135e:	9b03      	ldr	r3, [sp, #12]
 8021360:	3b01      	subs	r3, #1
 8021362:	9303      	str	r3, [sp, #12]
 8021364:	e79b      	b.n	802129e <__multiply+0x92>
 8021366:	46c0      	nop			@ (mov r8, r8)
 8021368:	08025029 	.word	0x08025029
 802136c:	0802509a 	.word	0x0802509a

08021370 <__pow5mult>:
 8021370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021372:	2303      	movs	r3, #3
 8021374:	0015      	movs	r5, r2
 8021376:	0007      	movs	r7, r0
 8021378:	000e      	movs	r6, r1
 802137a:	401a      	ands	r2, r3
 802137c:	421d      	tst	r5, r3
 802137e:	d008      	beq.n	8021392 <__pow5mult+0x22>
 8021380:	4925      	ldr	r1, [pc, #148]	@ (8021418 <__pow5mult+0xa8>)
 8021382:	3a01      	subs	r2, #1
 8021384:	0092      	lsls	r2, r2, #2
 8021386:	5852      	ldr	r2, [r2, r1]
 8021388:	2300      	movs	r3, #0
 802138a:	0031      	movs	r1, r6
 802138c:	f7ff fe46 	bl	802101c <__multadd>
 8021390:	0006      	movs	r6, r0
 8021392:	10ad      	asrs	r5, r5, #2
 8021394:	d03d      	beq.n	8021412 <__pow5mult+0xa2>
 8021396:	69fc      	ldr	r4, [r7, #28]
 8021398:	2c00      	cmp	r4, #0
 802139a:	d10f      	bne.n	80213bc <__pow5mult+0x4c>
 802139c:	2010      	movs	r0, #16
 802139e:	f7ff fd07 	bl	8020db0 <malloc>
 80213a2:	1e02      	subs	r2, r0, #0
 80213a4:	61f8      	str	r0, [r7, #28]
 80213a6:	d105      	bne.n	80213b4 <__pow5mult+0x44>
 80213a8:	21b4      	movs	r1, #180	@ 0xb4
 80213aa:	4b1c      	ldr	r3, [pc, #112]	@ (802141c <__pow5mult+0xac>)
 80213ac:	481c      	ldr	r0, [pc, #112]	@ (8021420 <__pow5mult+0xb0>)
 80213ae:	31ff      	adds	r1, #255	@ 0xff
 80213b0:	f000 feac 	bl	802210c <__assert_func>
 80213b4:	6044      	str	r4, [r0, #4]
 80213b6:	6084      	str	r4, [r0, #8]
 80213b8:	6004      	str	r4, [r0, #0]
 80213ba:	60c4      	str	r4, [r0, #12]
 80213bc:	69fb      	ldr	r3, [r7, #28]
 80213be:	689c      	ldr	r4, [r3, #8]
 80213c0:	9301      	str	r3, [sp, #4]
 80213c2:	2c00      	cmp	r4, #0
 80213c4:	d108      	bne.n	80213d8 <__pow5mult+0x68>
 80213c6:	0038      	movs	r0, r7
 80213c8:	4916      	ldr	r1, [pc, #88]	@ (8021424 <__pow5mult+0xb4>)
 80213ca:	f7ff ff07 	bl	80211dc <__i2b>
 80213ce:	9b01      	ldr	r3, [sp, #4]
 80213d0:	0004      	movs	r4, r0
 80213d2:	6098      	str	r0, [r3, #8]
 80213d4:	2300      	movs	r3, #0
 80213d6:	6003      	str	r3, [r0, #0]
 80213d8:	2301      	movs	r3, #1
 80213da:	421d      	tst	r5, r3
 80213dc:	d00a      	beq.n	80213f4 <__pow5mult+0x84>
 80213de:	0031      	movs	r1, r6
 80213e0:	0022      	movs	r2, r4
 80213e2:	0038      	movs	r0, r7
 80213e4:	f7ff ff12 	bl	802120c <__multiply>
 80213e8:	0031      	movs	r1, r6
 80213ea:	9001      	str	r0, [sp, #4]
 80213ec:	0038      	movs	r0, r7
 80213ee:	f7ff fdf1 	bl	8020fd4 <_Bfree>
 80213f2:	9e01      	ldr	r6, [sp, #4]
 80213f4:	106d      	asrs	r5, r5, #1
 80213f6:	d00c      	beq.n	8021412 <__pow5mult+0xa2>
 80213f8:	6820      	ldr	r0, [r4, #0]
 80213fa:	2800      	cmp	r0, #0
 80213fc:	d107      	bne.n	802140e <__pow5mult+0x9e>
 80213fe:	0022      	movs	r2, r4
 8021400:	0021      	movs	r1, r4
 8021402:	0038      	movs	r0, r7
 8021404:	f7ff ff02 	bl	802120c <__multiply>
 8021408:	2300      	movs	r3, #0
 802140a:	6020      	str	r0, [r4, #0]
 802140c:	6003      	str	r3, [r0, #0]
 802140e:	0004      	movs	r4, r0
 8021410:	e7e2      	b.n	80213d8 <__pow5mult+0x68>
 8021412:	0030      	movs	r0, r6
 8021414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021416:	46c0      	nop			@ (mov r8, r8)
 8021418:	080250f4 	.word	0x080250f4
 802141c:	08024fba 	.word	0x08024fba
 8021420:	0802509a 	.word	0x0802509a
 8021424:	00000271 	.word	0x00000271

08021428 <__lshift>:
 8021428:	b5f0      	push	{r4, r5, r6, r7, lr}
 802142a:	000c      	movs	r4, r1
 802142c:	0016      	movs	r6, r2
 802142e:	6923      	ldr	r3, [r4, #16]
 8021430:	1157      	asrs	r7, r2, #5
 8021432:	b085      	sub	sp, #20
 8021434:	18fb      	adds	r3, r7, r3
 8021436:	9301      	str	r3, [sp, #4]
 8021438:	3301      	adds	r3, #1
 802143a:	9300      	str	r3, [sp, #0]
 802143c:	6849      	ldr	r1, [r1, #4]
 802143e:	68a3      	ldr	r3, [r4, #8]
 8021440:	9002      	str	r0, [sp, #8]
 8021442:	9a00      	ldr	r2, [sp, #0]
 8021444:	4293      	cmp	r3, r2
 8021446:	db10      	blt.n	802146a <__lshift+0x42>
 8021448:	9802      	ldr	r0, [sp, #8]
 802144a:	f7ff fd7f 	bl	8020f4c <_Balloc>
 802144e:	2300      	movs	r3, #0
 8021450:	0001      	movs	r1, r0
 8021452:	0005      	movs	r5, r0
 8021454:	001a      	movs	r2, r3
 8021456:	3114      	adds	r1, #20
 8021458:	4298      	cmp	r0, r3
 802145a:	d10c      	bne.n	8021476 <__lshift+0x4e>
 802145c:	21ef      	movs	r1, #239	@ 0xef
 802145e:	002a      	movs	r2, r5
 8021460:	4b25      	ldr	r3, [pc, #148]	@ (80214f8 <__lshift+0xd0>)
 8021462:	4826      	ldr	r0, [pc, #152]	@ (80214fc <__lshift+0xd4>)
 8021464:	0049      	lsls	r1, r1, #1
 8021466:	f000 fe51 	bl	802210c <__assert_func>
 802146a:	3101      	adds	r1, #1
 802146c:	005b      	lsls	r3, r3, #1
 802146e:	e7e8      	b.n	8021442 <__lshift+0x1a>
 8021470:	0098      	lsls	r0, r3, #2
 8021472:	500a      	str	r2, [r1, r0]
 8021474:	3301      	adds	r3, #1
 8021476:	42bb      	cmp	r3, r7
 8021478:	dbfa      	blt.n	8021470 <__lshift+0x48>
 802147a:	43fb      	mvns	r3, r7
 802147c:	17db      	asrs	r3, r3, #31
 802147e:	401f      	ands	r7, r3
 8021480:	00bf      	lsls	r7, r7, #2
 8021482:	0023      	movs	r3, r4
 8021484:	201f      	movs	r0, #31
 8021486:	19c9      	adds	r1, r1, r7
 8021488:	0037      	movs	r7, r6
 802148a:	6922      	ldr	r2, [r4, #16]
 802148c:	3314      	adds	r3, #20
 802148e:	0092      	lsls	r2, r2, #2
 8021490:	189a      	adds	r2, r3, r2
 8021492:	4007      	ands	r7, r0
 8021494:	4206      	tst	r6, r0
 8021496:	d029      	beq.n	80214ec <__lshift+0xc4>
 8021498:	3001      	adds	r0, #1
 802149a:	1bc0      	subs	r0, r0, r7
 802149c:	9003      	str	r0, [sp, #12]
 802149e:	468c      	mov	ip, r1
 80214a0:	2000      	movs	r0, #0
 80214a2:	681e      	ldr	r6, [r3, #0]
 80214a4:	40be      	lsls	r6, r7
 80214a6:	4306      	orrs	r6, r0
 80214a8:	4660      	mov	r0, ip
 80214aa:	c040      	stmia	r0!, {r6}
 80214ac:	4684      	mov	ip, r0
 80214ae:	9e03      	ldr	r6, [sp, #12]
 80214b0:	cb01      	ldmia	r3!, {r0}
 80214b2:	40f0      	lsrs	r0, r6
 80214b4:	429a      	cmp	r2, r3
 80214b6:	d8f4      	bhi.n	80214a2 <__lshift+0x7a>
 80214b8:	0026      	movs	r6, r4
 80214ba:	3615      	adds	r6, #21
 80214bc:	2304      	movs	r3, #4
 80214be:	42b2      	cmp	r2, r6
 80214c0:	d304      	bcc.n	80214cc <__lshift+0xa4>
 80214c2:	1b13      	subs	r3, r2, r4
 80214c4:	3b15      	subs	r3, #21
 80214c6:	089b      	lsrs	r3, r3, #2
 80214c8:	3301      	adds	r3, #1
 80214ca:	009b      	lsls	r3, r3, #2
 80214cc:	50c8      	str	r0, [r1, r3]
 80214ce:	2800      	cmp	r0, #0
 80214d0:	d002      	beq.n	80214d8 <__lshift+0xb0>
 80214d2:	9b01      	ldr	r3, [sp, #4]
 80214d4:	3302      	adds	r3, #2
 80214d6:	9300      	str	r3, [sp, #0]
 80214d8:	9b00      	ldr	r3, [sp, #0]
 80214da:	9802      	ldr	r0, [sp, #8]
 80214dc:	3b01      	subs	r3, #1
 80214de:	0021      	movs	r1, r4
 80214e0:	612b      	str	r3, [r5, #16]
 80214e2:	f7ff fd77 	bl	8020fd4 <_Bfree>
 80214e6:	0028      	movs	r0, r5
 80214e8:	b005      	add	sp, #20
 80214ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214ec:	cb01      	ldmia	r3!, {r0}
 80214ee:	c101      	stmia	r1!, {r0}
 80214f0:	429a      	cmp	r2, r3
 80214f2:	d8fb      	bhi.n	80214ec <__lshift+0xc4>
 80214f4:	e7f0      	b.n	80214d8 <__lshift+0xb0>
 80214f6:	46c0      	nop			@ (mov r8, r8)
 80214f8:	08025029 	.word	0x08025029
 80214fc:	0802509a 	.word	0x0802509a

08021500 <__mcmp>:
 8021500:	b530      	push	{r4, r5, lr}
 8021502:	690b      	ldr	r3, [r1, #16]
 8021504:	6904      	ldr	r4, [r0, #16]
 8021506:	0002      	movs	r2, r0
 8021508:	1ae0      	subs	r0, r4, r3
 802150a:	429c      	cmp	r4, r3
 802150c:	d10f      	bne.n	802152e <__mcmp+0x2e>
 802150e:	3214      	adds	r2, #20
 8021510:	009b      	lsls	r3, r3, #2
 8021512:	3114      	adds	r1, #20
 8021514:	0014      	movs	r4, r2
 8021516:	18c9      	adds	r1, r1, r3
 8021518:	18d2      	adds	r2, r2, r3
 802151a:	3a04      	subs	r2, #4
 802151c:	3904      	subs	r1, #4
 802151e:	6815      	ldr	r5, [r2, #0]
 8021520:	680b      	ldr	r3, [r1, #0]
 8021522:	429d      	cmp	r5, r3
 8021524:	d004      	beq.n	8021530 <__mcmp+0x30>
 8021526:	2001      	movs	r0, #1
 8021528:	429d      	cmp	r5, r3
 802152a:	d200      	bcs.n	802152e <__mcmp+0x2e>
 802152c:	3802      	subs	r0, #2
 802152e:	bd30      	pop	{r4, r5, pc}
 8021530:	4294      	cmp	r4, r2
 8021532:	d3f2      	bcc.n	802151a <__mcmp+0x1a>
 8021534:	e7fb      	b.n	802152e <__mcmp+0x2e>
	...

08021538 <__mdiff>:
 8021538:	b5f0      	push	{r4, r5, r6, r7, lr}
 802153a:	000c      	movs	r4, r1
 802153c:	b087      	sub	sp, #28
 802153e:	9000      	str	r0, [sp, #0]
 8021540:	0011      	movs	r1, r2
 8021542:	0020      	movs	r0, r4
 8021544:	0017      	movs	r7, r2
 8021546:	f7ff ffdb 	bl	8021500 <__mcmp>
 802154a:	1e05      	subs	r5, r0, #0
 802154c:	d110      	bne.n	8021570 <__mdiff+0x38>
 802154e:	0001      	movs	r1, r0
 8021550:	9800      	ldr	r0, [sp, #0]
 8021552:	f7ff fcfb 	bl	8020f4c <_Balloc>
 8021556:	1e02      	subs	r2, r0, #0
 8021558:	d104      	bne.n	8021564 <__mdiff+0x2c>
 802155a:	4b40      	ldr	r3, [pc, #256]	@ (802165c <__mdiff+0x124>)
 802155c:	4840      	ldr	r0, [pc, #256]	@ (8021660 <__mdiff+0x128>)
 802155e:	4941      	ldr	r1, [pc, #260]	@ (8021664 <__mdiff+0x12c>)
 8021560:	f000 fdd4 	bl	802210c <__assert_func>
 8021564:	2301      	movs	r3, #1
 8021566:	6145      	str	r5, [r0, #20]
 8021568:	6103      	str	r3, [r0, #16]
 802156a:	0010      	movs	r0, r2
 802156c:	b007      	add	sp, #28
 802156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021570:	2600      	movs	r6, #0
 8021572:	42b0      	cmp	r0, r6
 8021574:	da03      	bge.n	802157e <__mdiff+0x46>
 8021576:	0023      	movs	r3, r4
 8021578:	003c      	movs	r4, r7
 802157a:	001f      	movs	r7, r3
 802157c:	3601      	adds	r6, #1
 802157e:	6861      	ldr	r1, [r4, #4]
 8021580:	9800      	ldr	r0, [sp, #0]
 8021582:	f7ff fce3 	bl	8020f4c <_Balloc>
 8021586:	1e02      	subs	r2, r0, #0
 8021588:	d103      	bne.n	8021592 <__mdiff+0x5a>
 802158a:	4b34      	ldr	r3, [pc, #208]	@ (802165c <__mdiff+0x124>)
 802158c:	4834      	ldr	r0, [pc, #208]	@ (8021660 <__mdiff+0x128>)
 802158e:	4936      	ldr	r1, [pc, #216]	@ (8021668 <__mdiff+0x130>)
 8021590:	e7e6      	b.n	8021560 <__mdiff+0x28>
 8021592:	6923      	ldr	r3, [r4, #16]
 8021594:	3414      	adds	r4, #20
 8021596:	9300      	str	r3, [sp, #0]
 8021598:	009b      	lsls	r3, r3, #2
 802159a:	18e3      	adds	r3, r4, r3
 802159c:	0021      	movs	r1, r4
 802159e:	9401      	str	r4, [sp, #4]
 80215a0:	003c      	movs	r4, r7
 80215a2:	9302      	str	r3, [sp, #8]
 80215a4:	693b      	ldr	r3, [r7, #16]
 80215a6:	3414      	adds	r4, #20
 80215a8:	009b      	lsls	r3, r3, #2
 80215aa:	18e3      	adds	r3, r4, r3
 80215ac:	9303      	str	r3, [sp, #12]
 80215ae:	0003      	movs	r3, r0
 80215b0:	60c6      	str	r6, [r0, #12]
 80215b2:	468c      	mov	ip, r1
 80215b4:	2000      	movs	r0, #0
 80215b6:	3314      	adds	r3, #20
 80215b8:	9304      	str	r3, [sp, #16]
 80215ba:	9305      	str	r3, [sp, #20]
 80215bc:	4663      	mov	r3, ip
 80215be:	cb20      	ldmia	r3!, {r5}
 80215c0:	b2a9      	uxth	r1, r5
 80215c2:	000e      	movs	r6, r1
 80215c4:	469c      	mov	ip, r3
 80215c6:	cc08      	ldmia	r4!, {r3}
 80215c8:	0c2d      	lsrs	r5, r5, #16
 80215ca:	b299      	uxth	r1, r3
 80215cc:	1a71      	subs	r1, r6, r1
 80215ce:	1809      	adds	r1, r1, r0
 80215d0:	0c1b      	lsrs	r3, r3, #16
 80215d2:	1408      	asrs	r0, r1, #16
 80215d4:	1aeb      	subs	r3, r5, r3
 80215d6:	181b      	adds	r3, r3, r0
 80215d8:	1418      	asrs	r0, r3, #16
 80215da:	b289      	uxth	r1, r1
 80215dc:	041b      	lsls	r3, r3, #16
 80215de:	4319      	orrs	r1, r3
 80215e0:	9b05      	ldr	r3, [sp, #20]
 80215e2:	c302      	stmia	r3!, {r1}
 80215e4:	9305      	str	r3, [sp, #20]
 80215e6:	9b03      	ldr	r3, [sp, #12]
 80215e8:	42a3      	cmp	r3, r4
 80215ea:	d8e7      	bhi.n	80215bc <__mdiff+0x84>
 80215ec:	0039      	movs	r1, r7
 80215ee:	9c03      	ldr	r4, [sp, #12]
 80215f0:	3115      	adds	r1, #21
 80215f2:	2304      	movs	r3, #4
 80215f4:	428c      	cmp	r4, r1
 80215f6:	d304      	bcc.n	8021602 <__mdiff+0xca>
 80215f8:	1be3      	subs	r3, r4, r7
 80215fa:	3b15      	subs	r3, #21
 80215fc:	089b      	lsrs	r3, r3, #2
 80215fe:	3301      	adds	r3, #1
 8021600:	009b      	lsls	r3, r3, #2
 8021602:	9901      	ldr	r1, [sp, #4]
 8021604:	18cd      	adds	r5, r1, r3
 8021606:	9904      	ldr	r1, [sp, #16]
 8021608:	002e      	movs	r6, r5
 802160a:	18cb      	adds	r3, r1, r3
 802160c:	001f      	movs	r7, r3
 802160e:	9902      	ldr	r1, [sp, #8]
 8021610:	428e      	cmp	r6, r1
 8021612:	d311      	bcc.n	8021638 <__mdiff+0x100>
 8021614:	9c02      	ldr	r4, [sp, #8]
 8021616:	1ee9      	subs	r1, r5, #3
 8021618:	2000      	movs	r0, #0
 802161a:	428c      	cmp	r4, r1
 802161c:	d304      	bcc.n	8021628 <__mdiff+0xf0>
 802161e:	0021      	movs	r1, r4
 8021620:	3103      	adds	r1, #3
 8021622:	1b49      	subs	r1, r1, r5
 8021624:	0889      	lsrs	r1, r1, #2
 8021626:	0088      	lsls	r0, r1, #2
 8021628:	181b      	adds	r3, r3, r0
 802162a:	3b04      	subs	r3, #4
 802162c:	6819      	ldr	r1, [r3, #0]
 802162e:	2900      	cmp	r1, #0
 8021630:	d010      	beq.n	8021654 <__mdiff+0x11c>
 8021632:	9b00      	ldr	r3, [sp, #0]
 8021634:	6113      	str	r3, [r2, #16]
 8021636:	e798      	b.n	802156a <__mdiff+0x32>
 8021638:	4684      	mov	ip, r0
 802163a:	ce02      	ldmia	r6!, {r1}
 802163c:	b288      	uxth	r0, r1
 802163e:	4460      	add	r0, ip
 8021640:	1400      	asrs	r0, r0, #16
 8021642:	0c0c      	lsrs	r4, r1, #16
 8021644:	1904      	adds	r4, r0, r4
 8021646:	4461      	add	r1, ip
 8021648:	1420      	asrs	r0, r4, #16
 802164a:	b289      	uxth	r1, r1
 802164c:	0424      	lsls	r4, r4, #16
 802164e:	4321      	orrs	r1, r4
 8021650:	c702      	stmia	r7!, {r1}
 8021652:	e7dc      	b.n	802160e <__mdiff+0xd6>
 8021654:	9900      	ldr	r1, [sp, #0]
 8021656:	3901      	subs	r1, #1
 8021658:	9100      	str	r1, [sp, #0]
 802165a:	e7e6      	b.n	802162a <__mdiff+0xf2>
 802165c:	08025029 	.word	0x08025029
 8021660:	0802509a 	.word	0x0802509a
 8021664:	00000237 	.word	0x00000237
 8021668:	00000245 	.word	0x00000245

0802166c <__ulp>:
 802166c:	b510      	push	{r4, lr}
 802166e:	2400      	movs	r4, #0
 8021670:	4b0c      	ldr	r3, [pc, #48]	@ (80216a4 <__ulp+0x38>)
 8021672:	4a0d      	ldr	r2, [pc, #52]	@ (80216a8 <__ulp+0x3c>)
 8021674:	400b      	ands	r3, r1
 8021676:	189b      	adds	r3, r3, r2
 8021678:	42a3      	cmp	r3, r4
 802167a:	dc06      	bgt.n	802168a <__ulp+0x1e>
 802167c:	425b      	negs	r3, r3
 802167e:	151a      	asrs	r2, r3, #20
 8021680:	2a13      	cmp	r2, #19
 8021682:	dc05      	bgt.n	8021690 <__ulp+0x24>
 8021684:	2380      	movs	r3, #128	@ 0x80
 8021686:	031b      	lsls	r3, r3, #12
 8021688:	4113      	asrs	r3, r2
 802168a:	0019      	movs	r1, r3
 802168c:	0020      	movs	r0, r4
 802168e:	bd10      	pop	{r4, pc}
 8021690:	3a14      	subs	r2, #20
 8021692:	2401      	movs	r4, #1
 8021694:	2a1e      	cmp	r2, #30
 8021696:	dc02      	bgt.n	802169e <__ulp+0x32>
 8021698:	2480      	movs	r4, #128	@ 0x80
 802169a:	0624      	lsls	r4, r4, #24
 802169c:	40d4      	lsrs	r4, r2
 802169e:	2300      	movs	r3, #0
 80216a0:	e7f3      	b.n	802168a <__ulp+0x1e>
 80216a2:	46c0      	nop			@ (mov r8, r8)
 80216a4:	7ff00000 	.word	0x7ff00000
 80216a8:	fcc00000 	.word	0xfcc00000

080216ac <__b2d>:
 80216ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80216ae:	0006      	movs	r6, r0
 80216b0:	6903      	ldr	r3, [r0, #16]
 80216b2:	3614      	adds	r6, #20
 80216b4:	009b      	lsls	r3, r3, #2
 80216b6:	18f3      	adds	r3, r6, r3
 80216b8:	1f1d      	subs	r5, r3, #4
 80216ba:	682c      	ldr	r4, [r5, #0]
 80216bc:	000f      	movs	r7, r1
 80216be:	0020      	movs	r0, r4
 80216c0:	9301      	str	r3, [sp, #4]
 80216c2:	f7ff fd3b 	bl	802113c <__hi0bits>
 80216c6:	2220      	movs	r2, #32
 80216c8:	1a12      	subs	r2, r2, r0
 80216ca:	603a      	str	r2, [r7, #0]
 80216cc:	0003      	movs	r3, r0
 80216ce:	4a1c      	ldr	r2, [pc, #112]	@ (8021740 <__b2d+0x94>)
 80216d0:	280a      	cmp	r0, #10
 80216d2:	dc15      	bgt.n	8021700 <__b2d+0x54>
 80216d4:	210b      	movs	r1, #11
 80216d6:	0027      	movs	r7, r4
 80216d8:	1a09      	subs	r1, r1, r0
 80216da:	40cf      	lsrs	r7, r1
 80216dc:	433a      	orrs	r2, r7
 80216de:	468c      	mov	ip, r1
 80216e0:	0011      	movs	r1, r2
 80216e2:	2200      	movs	r2, #0
 80216e4:	42ae      	cmp	r6, r5
 80216e6:	d202      	bcs.n	80216ee <__b2d+0x42>
 80216e8:	9a01      	ldr	r2, [sp, #4]
 80216ea:	3a08      	subs	r2, #8
 80216ec:	6812      	ldr	r2, [r2, #0]
 80216ee:	3315      	adds	r3, #21
 80216f0:	409c      	lsls	r4, r3
 80216f2:	4663      	mov	r3, ip
 80216f4:	0027      	movs	r7, r4
 80216f6:	40da      	lsrs	r2, r3
 80216f8:	4317      	orrs	r7, r2
 80216fa:	0038      	movs	r0, r7
 80216fc:	b003      	add	sp, #12
 80216fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021700:	2700      	movs	r7, #0
 8021702:	42ae      	cmp	r6, r5
 8021704:	d202      	bcs.n	802170c <__b2d+0x60>
 8021706:	9d01      	ldr	r5, [sp, #4]
 8021708:	3d08      	subs	r5, #8
 802170a:	682f      	ldr	r7, [r5, #0]
 802170c:	210b      	movs	r1, #11
 802170e:	4249      	negs	r1, r1
 8021710:	468c      	mov	ip, r1
 8021712:	449c      	add	ip, r3
 8021714:	2b0b      	cmp	r3, #11
 8021716:	d010      	beq.n	802173a <__b2d+0x8e>
 8021718:	4661      	mov	r1, ip
 802171a:	2320      	movs	r3, #32
 802171c:	408c      	lsls	r4, r1
 802171e:	1a5b      	subs	r3, r3, r1
 8021720:	0039      	movs	r1, r7
 8021722:	40d9      	lsrs	r1, r3
 8021724:	430c      	orrs	r4, r1
 8021726:	4322      	orrs	r2, r4
 8021728:	0011      	movs	r1, r2
 802172a:	2200      	movs	r2, #0
 802172c:	42b5      	cmp	r5, r6
 802172e:	d901      	bls.n	8021734 <__b2d+0x88>
 8021730:	3d04      	subs	r5, #4
 8021732:	682a      	ldr	r2, [r5, #0]
 8021734:	4664      	mov	r4, ip
 8021736:	40a7      	lsls	r7, r4
 8021738:	e7dd      	b.n	80216f6 <__b2d+0x4a>
 802173a:	4322      	orrs	r2, r4
 802173c:	0011      	movs	r1, r2
 802173e:	e7dc      	b.n	80216fa <__b2d+0x4e>
 8021740:	3ff00000 	.word	0x3ff00000

08021744 <__d2b>:
 8021744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021746:	2101      	movs	r1, #1
 8021748:	0016      	movs	r6, r2
 802174a:	001f      	movs	r7, r3
 802174c:	f7ff fbfe 	bl	8020f4c <_Balloc>
 8021750:	1e04      	subs	r4, r0, #0
 8021752:	d105      	bne.n	8021760 <__d2b+0x1c>
 8021754:	0022      	movs	r2, r4
 8021756:	4b25      	ldr	r3, [pc, #148]	@ (80217ec <__d2b+0xa8>)
 8021758:	4825      	ldr	r0, [pc, #148]	@ (80217f0 <__d2b+0xac>)
 802175a:	4926      	ldr	r1, [pc, #152]	@ (80217f4 <__d2b+0xb0>)
 802175c:	f000 fcd6 	bl	802210c <__assert_func>
 8021760:	033b      	lsls	r3, r7, #12
 8021762:	007d      	lsls	r5, r7, #1
 8021764:	0b1b      	lsrs	r3, r3, #12
 8021766:	0d6d      	lsrs	r5, r5, #21
 8021768:	d002      	beq.n	8021770 <__d2b+0x2c>
 802176a:	2280      	movs	r2, #128	@ 0x80
 802176c:	0352      	lsls	r2, r2, #13
 802176e:	4313      	orrs	r3, r2
 8021770:	9301      	str	r3, [sp, #4]
 8021772:	2e00      	cmp	r6, #0
 8021774:	d025      	beq.n	80217c2 <__d2b+0x7e>
 8021776:	4668      	mov	r0, sp
 8021778:	9600      	str	r6, [sp, #0]
 802177a:	f7ff fd00 	bl	802117e <__lo0bits>
 802177e:	9b01      	ldr	r3, [sp, #4]
 8021780:	9900      	ldr	r1, [sp, #0]
 8021782:	2800      	cmp	r0, #0
 8021784:	d01b      	beq.n	80217be <__d2b+0x7a>
 8021786:	2220      	movs	r2, #32
 8021788:	001e      	movs	r6, r3
 802178a:	1a12      	subs	r2, r2, r0
 802178c:	4096      	lsls	r6, r2
 802178e:	0032      	movs	r2, r6
 8021790:	40c3      	lsrs	r3, r0
 8021792:	430a      	orrs	r2, r1
 8021794:	6162      	str	r2, [r4, #20]
 8021796:	9301      	str	r3, [sp, #4]
 8021798:	9e01      	ldr	r6, [sp, #4]
 802179a:	61a6      	str	r6, [r4, #24]
 802179c:	1e73      	subs	r3, r6, #1
 802179e:	419e      	sbcs	r6, r3
 80217a0:	3601      	adds	r6, #1
 80217a2:	6126      	str	r6, [r4, #16]
 80217a4:	2d00      	cmp	r5, #0
 80217a6:	d014      	beq.n	80217d2 <__d2b+0x8e>
 80217a8:	2635      	movs	r6, #53	@ 0x35
 80217aa:	4b13      	ldr	r3, [pc, #76]	@ (80217f8 <__d2b+0xb4>)
 80217ac:	18ed      	adds	r5, r5, r3
 80217ae:	9b08      	ldr	r3, [sp, #32]
 80217b0:	182d      	adds	r5, r5, r0
 80217b2:	601d      	str	r5, [r3, #0]
 80217b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217b6:	1a36      	subs	r6, r6, r0
 80217b8:	601e      	str	r6, [r3, #0]
 80217ba:	0020      	movs	r0, r4
 80217bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80217be:	6161      	str	r1, [r4, #20]
 80217c0:	e7ea      	b.n	8021798 <__d2b+0x54>
 80217c2:	a801      	add	r0, sp, #4
 80217c4:	f7ff fcdb 	bl	802117e <__lo0bits>
 80217c8:	9b01      	ldr	r3, [sp, #4]
 80217ca:	2601      	movs	r6, #1
 80217cc:	6163      	str	r3, [r4, #20]
 80217ce:	3020      	adds	r0, #32
 80217d0:	e7e7      	b.n	80217a2 <__d2b+0x5e>
 80217d2:	4b0a      	ldr	r3, [pc, #40]	@ (80217fc <__d2b+0xb8>)
 80217d4:	18c0      	adds	r0, r0, r3
 80217d6:	9b08      	ldr	r3, [sp, #32]
 80217d8:	6018      	str	r0, [r3, #0]
 80217da:	4b09      	ldr	r3, [pc, #36]	@ (8021800 <__d2b+0xbc>)
 80217dc:	18f3      	adds	r3, r6, r3
 80217de:	009b      	lsls	r3, r3, #2
 80217e0:	18e3      	adds	r3, r4, r3
 80217e2:	6958      	ldr	r0, [r3, #20]
 80217e4:	f7ff fcaa 	bl	802113c <__hi0bits>
 80217e8:	0176      	lsls	r6, r6, #5
 80217ea:	e7e3      	b.n	80217b4 <__d2b+0x70>
 80217ec:	08025029 	.word	0x08025029
 80217f0:	0802509a 	.word	0x0802509a
 80217f4:	0000030f 	.word	0x0000030f
 80217f8:	fffffbcd 	.word	0xfffffbcd
 80217fc:	fffffbce 	.word	0xfffffbce
 8021800:	3fffffff 	.word	0x3fffffff

08021804 <__ratio>:
 8021804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021806:	b087      	sub	sp, #28
 8021808:	000f      	movs	r7, r1
 802180a:	a904      	add	r1, sp, #16
 802180c:	0006      	movs	r6, r0
 802180e:	f7ff ff4d 	bl	80216ac <__b2d>
 8021812:	9000      	str	r0, [sp, #0]
 8021814:	9101      	str	r1, [sp, #4]
 8021816:	9b00      	ldr	r3, [sp, #0]
 8021818:	9c01      	ldr	r4, [sp, #4]
 802181a:	0038      	movs	r0, r7
 802181c:	a905      	add	r1, sp, #20
 802181e:	9302      	str	r3, [sp, #8]
 8021820:	9403      	str	r4, [sp, #12]
 8021822:	f7ff ff43 	bl	80216ac <__b2d>
 8021826:	000d      	movs	r5, r1
 8021828:	0002      	movs	r2, r0
 802182a:	000b      	movs	r3, r1
 802182c:	6930      	ldr	r0, [r6, #16]
 802182e:	6939      	ldr	r1, [r7, #16]
 8021830:	9e04      	ldr	r6, [sp, #16]
 8021832:	1a40      	subs	r0, r0, r1
 8021834:	9905      	ldr	r1, [sp, #20]
 8021836:	0140      	lsls	r0, r0, #5
 8021838:	1a71      	subs	r1, r6, r1
 802183a:	1841      	adds	r1, r0, r1
 802183c:	0508      	lsls	r0, r1, #20
 802183e:	2900      	cmp	r1, #0
 8021840:	dd08      	ble.n	8021854 <__ratio+0x50>
 8021842:	9901      	ldr	r1, [sp, #4]
 8021844:	1841      	adds	r1, r0, r1
 8021846:	9103      	str	r1, [sp, #12]
 8021848:	9802      	ldr	r0, [sp, #8]
 802184a:	9903      	ldr	r1, [sp, #12]
 802184c:	f7e0 fab2 	bl	8001db4 <__aeabi_ddiv>
 8021850:	b007      	add	sp, #28
 8021852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021854:	1a2b      	subs	r3, r5, r0
 8021856:	e7f7      	b.n	8021848 <__ratio+0x44>

08021858 <__copybits>:
 8021858:	b570      	push	{r4, r5, r6, lr}
 802185a:	0014      	movs	r4, r2
 802185c:	0005      	movs	r5, r0
 802185e:	3901      	subs	r1, #1
 8021860:	6913      	ldr	r3, [r2, #16]
 8021862:	1149      	asrs	r1, r1, #5
 8021864:	3101      	adds	r1, #1
 8021866:	0089      	lsls	r1, r1, #2
 8021868:	3414      	adds	r4, #20
 802186a:	009b      	lsls	r3, r3, #2
 802186c:	1841      	adds	r1, r0, r1
 802186e:	18e3      	adds	r3, r4, r3
 8021870:	42a3      	cmp	r3, r4
 8021872:	d80d      	bhi.n	8021890 <__copybits+0x38>
 8021874:	0014      	movs	r4, r2
 8021876:	3411      	adds	r4, #17
 8021878:	2500      	movs	r5, #0
 802187a:	429c      	cmp	r4, r3
 802187c:	d803      	bhi.n	8021886 <__copybits+0x2e>
 802187e:	1a9b      	subs	r3, r3, r2
 8021880:	3b11      	subs	r3, #17
 8021882:	089b      	lsrs	r3, r3, #2
 8021884:	009d      	lsls	r5, r3, #2
 8021886:	2300      	movs	r3, #0
 8021888:	1940      	adds	r0, r0, r5
 802188a:	4281      	cmp	r1, r0
 802188c:	d803      	bhi.n	8021896 <__copybits+0x3e>
 802188e:	bd70      	pop	{r4, r5, r6, pc}
 8021890:	cc40      	ldmia	r4!, {r6}
 8021892:	c540      	stmia	r5!, {r6}
 8021894:	e7ec      	b.n	8021870 <__copybits+0x18>
 8021896:	c008      	stmia	r0!, {r3}
 8021898:	e7f7      	b.n	802188a <__copybits+0x32>

0802189a <__any_on>:
 802189a:	0002      	movs	r2, r0
 802189c:	6900      	ldr	r0, [r0, #16]
 802189e:	b510      	push	{r4, lr}
 80218a0:	3214      	adds	r2, #20
 80218a2:	114b      	asrs	r3, r1, #5
 80218a4:	4298      	cmp	r0, r3
 80218a6:	db13      	blt.n	80218d0 <__any_on+0x36>
 80218a8:	dd0c      	ble.n	80218c4 <__any_on+0x2a>
 80218aa:	241f      	movs	r4, #31
 80218ac:	0008      	movs	r0, r1
 80218ae:	4020      	ands	r0, r4
 80218b0:	4221      	tst	r1, r4
 80218b2:	d007      	beq.n	80218c4 <__any_on+0x2a>
 80218b4:	0099      	lsls	r1, r3, #2
 80218b6:	588c      	ldr	r4, [r1, r2]
 80218b8:	0021      	movs	r1, r4
 80218ba:	40c1      	lsrs	r1, r0
 80218bc:	4081      	lsls	r1, r0
 80218be:	2001      	movs	r0, #1
 80218c0:	428c      	cmp	r4, r1
 80218c2:	d104      	bne.n	80218ce <__any_on+0x34>
 80218c4:	009b      	lsls	r3, r3, #2
 80218c6:	18d3      	adds	r3, r2, r3
 80218c8:	4293      	cmp	r3, r2
 80218ca:	d803      	bhi.n	80218d4 <__any_on+0x3a>
 80218cc:	2000      	movs	r0, #0
 80218ce:	bd10      	pop	{r4, pc}
 80218d0:	0003      	movs	r3, r0
 80218d2:	e7f7      	b.n	80218c4 <__any_on+0x2a>
 80218d4:	3b04      	subs	r3, #4
 80218d6:	6819      	ldr	r1, [r3, #0]
 80218d8:	2900      	cmp	r1, #0
 80218da:	d0f5      	beq.n	80218c8 <__any_on+0x2e>
 80218dc:	2001      	movs	r0, #1
 80218de:	e7f6      	b.n	80218ce <__any_on+0x34>

080218e0 <__ascii_wctomb>:
 80218e0:	0003      	movs	r3, r0
 80218e2:	1e08      	subs	r0, r1, #0
 80218e4:	d005      	beq.n	80218f2 <__ascii_wctomb+0x12>
 80218e6:	2aff      	cmp	r2, #255	@ 0xff
 80218e8:	d904      	bls.n	80218f4 <__ascii_wctomb+0x14>
 80218ea:	228a      	movs	r2, #138	@ 0x8a
 80218ec:	2001      	movs	r0, #1
 80218ee:	601a      	str	r2, [r3, #0]
 80218f0:	4240      	negs	r0, r0
 80218f2:	4770      	bx	lr
 80218f4:	2001      	movs	r0, #1
 80218f6:	700a      	strb	r2, [r1, #0]
 80218f8:	e7fb      	b.n	80218f2 <__ascii_wctomb+0x12>
	...

080218fc <__ssputs_r>:
 80218fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218fe:	688e      	ldr	r6, [r1, #8]
 8021900:	b085      	sub	sp, #20
 8021902:	001f      	movs	r7, r3
 8021904:	000c      	movs	r4, r1
 8021906:	680b      	ldr	r3, [r1, #0]
 8021908:	9002      	str	r0, [sp, #8]
 802190a:	9203      	str	r2, [sp, #12]
 802190c:	42be      	cmp	r6, r7
 802190e:	d830      	bhi.n	8021972 <__ssputs_r+0x76>
 8021910:	210c      	movs	r1, #12
 8021912:	5e62      	ldrsh	r2, [r4, r1]
 8021914:	2190      	movs	r1, #144	@ 0x90
 8021916:	00c9      	lsls	r1, r1, #3
 8021918:	420a      	tst	r2, r1
 802191a:	d028      	beq.n	802196e <__ssputs_r+0x72>
 802191c:	2003      	movs	r0, #3
 802191e:	6921      	ldr	r1, [r4, #16]
 8021920:	1a5b      	subs	r3, r3, r1
 8021922:	9301      	str	r3, [sp, #4]
 8021924:	6963      	ldr	r3, [r4, #20]
 8021926:	4343      	muls	r3, r0
 8021928:	9801      	ldr	r0, [sp, #4]
 802192a:	0fdd      	lsrs	r5, r3, #31
 802192c:	18ed      	adds	r5, r5, r3
 802192e:	1c7b      	adds	r3, r7, #1
 8021930:	181b      	adds	r3, r3, r0
 8021932:	106d      	asrs	r5, r5, #1
 8021934:	42ab      	cmp	r3, r5
 8021936:	d900      	bls.n	802193a <__ssputs_r+0x3e>
 8021938:	001d      	movs	r5, r3
 802193a:	0552      	lsls	r2, r2, #21
 802193c:	d528      	bpl.n	8021990 <__ssputs_r+0x94>
 802193e:	0029      	movs	r1, r5
 8021940:	9802      	ldr	r0, [sp, #8]
 8021942:	f7ff fa61 	bl	8020e08 <_malloc_r>
 8021946:	1e06      	subs	r6, r0, #0
 8021948:	d02c      	beq.n	80219a4 <__ssputs_r+0xa8>
 802194a:	9a01      	ldr	r2, [sp, #4]
 802194c:	6921      	ldr	r1, [r4, #16]
 802194e:	f7fd fff9 	bl	801f944 <memcpy>
 8021952:	89a2      	ldrh	r2, [r4, #12]
 8021954:	4b18      	ldr	r3, [pc, #96]	@ (80219b8 <__ssputs_r+0xbc>)
 8021956:	401a      	ands	r2, r3
 8021958:	2380      	movs	r3, #128	@ 0x80
 802195a:	4313      	orrs	r3, r2
 802195c:	81a3      	strh	r3, [r4, #12]
 802195e:	9b01      	ldr	r3, [sp, #4]
 8021960:	6126      	str	r6, [r4, #16]
 8021962:	18f6      	adds	r6, r6, r3
 8021964:	6026      	str	r6, [r4, #0]
 8021966:	003e      	movs	r6, r7
 8021968:	6165      	str	r5, [r4, #20]
 802196a:	1aed      	subs	r5, r5, r3
 802196c:	60a5      	str	r5, [r4, #8]
 802196e:	42be      	cmp	r6, r7
 8021970:	d900      	bls.n	8021974 <__ssputs_r+0x78>
 8021972:	003e      	movs	r6, r7
 8021974:	0032      	movs	r2, r6
 8021976:	9903      	ldr	r1, [sp, #12]
 8021978:	6820      	ldr	r0, [r4, #0]
 802197a:	f000 fb7e 	bl	802207a <memmove>
 802197e:	2000      	movs	r0, #0
 8021980:	68a3      	ldr	r3, [r4, #8]
 8021982:	1b9b      	subs	r3, r3, r6
 8021984:	60a3      	str	r3, [r4, #8]
 8021986:	6823      	ldr	r3, [r4, #0]
 8021988:	199b      	adds	r3, r3, r6
 802198a:	6023      	str	r3, [r4, #0]
 802198c:	b005      	add	sp, #20
 802198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021990:	002a      	movs	r2, r5
 8021992:	9802      	ldr	r0, [sp, #8]
 8021994:	f000 fc05 	bl	80221a2 <_realloc_r>
 8021998:	1e06      	subs	r6, r0, #0
 802199a:	d1e0      	bne.n	802195e <__ssputs_r+0x62>
 802199c:	6921      	ldr	r1, [r4, #16]
 802199e:	9802      	ldr	r0, [sp, #8]
 80219a0:	f7fe fe62 	bl	8020668 <_free_r>
 80219a4:	230c      	movs	r3, #12
 80219a6:	2001      	movs	r0, #1
 80219a8:	9a02      	ldr	r2, [sp, #8]
 80219aa:	4240      	negs	r0, r0
 80219ac:	6013      	str	r3, [r2, #0]
 80219ae:	89a2      	ldrh	r2, [r4, #12]
 80219b0:	3334      	adds	r3, #52	@ 0x34
 80219b2:	4313      	orrs	r3, r2
 80219b4:	81a3      	strh	r3, [r4, #12]
 80219b6:	e7e9      	b.n	802198c <__ssputs_r+0x90>
 80219b8:	fffffb7f 	.word	0xfffffb7f

080219bc <_svfiprintf_r>:
 80219bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80219be:	b0a1      	sub	sp, #132	@ 0x84
 80219c0:	9003      	str	r0, [sp, #12]
 80219c2:	001d      	movs	r5, r3
 80219c4:	898b      	ldrh	r3, [r1, #12]
 80219c6:	000f      	movs	r7, r1
 80219c8:	0016      	movs	r6, r2
 80219ca:	061b      	lsls	r3, r3, #24
 80219cc:	d511      	bpl.n	80219f2 <_svfiprintf_r+0x36>
 80219ce:	690b      	ldr	r3, [r1, #16]
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d10e      	bne.n	80219f2 <_svfiprintf_r+0x36>
 80219d4:	2140      	movs	r1, #64	@ 0x40
 80219d6:	f7ff fa17 	bl	8020e08 <_malloc_r>
 80219da:	6038      	str	r0, [r7, #0]
 80219dc:	6138      	str	r0, [r7, #16]
 80219de:	2800      	cmp	r0, #0
 80219e0:	d105      	bne.n	80219ee <_svfiprintf_r+0x32>
 80219e2:	230c      	movs	r3, #12
 80219e4:	9a03      	ldr	r2, [sp, #12]
 80219e6:	6013      	str	r3, [r2, #0]
 80219e8:	2001      	movs	r0, #1
 80219ea:	4240      	negs	r0, r0
 80219ec:	e0cf      	b.n	8021b8e <_svfiprintf_r+0x1d2>
 80219ee:	2340      	movs	r3, #64	@ 0x40
 80219f0:	617b      	str	r3, [r7, #20]
 80219f2:	2300      	movs	r3, #0
 80219f4:	ac08      	add	r4, sp, #32
 80219f6:	6163      	str	r3, [r4, #20]
 80219f8:	3320      	adds	r3, #32
 80219fa:	7663      	strb	r3, [r4, #25]
 80219fc:	3310      	adds	r3, #16
 80219fe:	76a3      	strb	r3, [r4, #26]
 8021a00:	9507      	str	r5, [sp, #28]
 8021a02:	0035      	movs	r5, r6
 8021a04:	782b      	ldrb	r3, [r5, #0]
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	d001      	beq.n	8021a0e <_svfiprintf_r+0x52>
 8021a0a:	2b25      	cmp	r3, #37	@ 0x25
 8021a0c:	d148      	bne.n	8021aa0 <_svfiprintf_r+0xe4>
 8021a0e:	1bab      	subs	r3, r5, r6
 8021a10:	9305      	str	r3, [sp, #20]
 8021a12:	42b5      	cmp	r5, r6
 8021a14:	d00b      	beq.n	8021a2e <_svfiprintf_r+0x72>
 8021a16:	0032      	movs	r2, r6
 8021a18:	0039      	movs	r1, r7
 8021a1a:	9803      	ldr	r0, [sp, #12]
 8021a1c:	f7ff ff6e 	bl	80218fc <__ssputs_r>
 8021a20:	3001      	adds	r0, #1
 8021a22:	d100      	bne.n	8021a26 <_svfiprintf_r+0x6a>
 8021a24:	e0ae      	b.n	8021b84 <_svfiprintf_r+0x1c8>
 8021a26:	6963      	ldr	r3, [r4, #20]
 8021a28:	9a05      	ldr	r2, [sp, #20]
 8021a2a:	189b      	adds	r3, r3, r2
 8021a2c:	6163      	str	r3, [r4, #20]
 8021a2e:	782b      	ldrb	r3, [r5, #0]
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d100      	bne.n	8021a36 <_svfiprintf_r+0x7a>
 8021a34:	e0a6      	b.n	8021b84 <_svfiprintf_r+0x1c8>
 8021a36:	2201      	movs	r2, #1
 8021a38:	2300      	movs	r3, #0
 8021a3a:	4252      	negs	r2, r2
 8021a3c:	6062      	str	r2, [r4, #4]
 8021a3e:	a904      	add	r1, sp, #16
 8021a40:	3254      	adds	r2, #84	@ 0x54
 8021a42:	1852      	adds	r2, r2, r1
 8021a44:	1c6e      	adds	r6, r5, #1
 8021a46:	6023      	str	r3, [r4, #0]
 8021a48:	60e3      	str	r3, [r4, #12]
 8021a4a:	60a3      	str	r3, [r4, #8]
 8021a4c:	7013      	strb	r3, [r2, #0]
 8021a4e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021a50:	4b54      	ldr	r3, [pc, #336]	@ (8021ba4 <_svfiprintf_r+0x1e8>)
 8021a52:	2205      	movs	r2, #5
 8021a54:	0018      	movs	r0, r3
 8021a56:	7831      	ldrb	r1, [r6, #0]
 8021a58:	9305      	str	r3, [sp, #20]
 8021a5a:	f7fd ff68 	bl	801f92e <memchr>
 8021a5e:	1c75      	adds	r5, r6, #1
 8021a60:	2800      	cmp	r0, #0
 8021a62:	d11f      	bne.n	8021aa4 <_svfiprintf_r+0xe8>
 8021a64:	6822      	ldr	r2, [r4, #0]
 8021a66:	06d3      	lsls	r3, r2, #27
 8021a68:	d504      	bpl.n	8021a74 <_svfiprintf_r+0xb8>
 8021a6a:	2353      	movs	r3, #83	@ 0x53
 8021a6c:	a904      	add	r1, sp, #16
 8021a6e:	185b      	adds	r3, r3, r1
 8021a70:	2120      	movs	r1, #32
 8021a72:	7019      	strb	r1, [r3, #0]
 8021a74:	0713      	lsls	r3, r2, #28
 8021a76:	d504      	bpl.n	8021a82 <_svfiprintf_r+0xc6>
 8021a78:	2353      	movs	r3, #83	@ 0x53
 8021a7a:	a904      	add	r1, sp, #16
 8021a7c:	185b      	adds	r3, r3, r1
 8021a7e:	212b      	movs	r1, #43	@ 0x2b
 8021a80:	7019      	strb	r1, [r3, #0]
 8021a82:	7833      	ldrb	r3, [r6, #0]
 8021a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a86:	d016      	beq.n	8021ab6 <_svfiprintf_r+0xfa>
 8021a88:	0035      	movs	r5, r6
 8021a8a:	2100      	movs	r1, #0
 8021a8c:	200a      	movs	r0, #10
 8021a8e:	68e3      	ldr	r3, [r4, #12]
 8021a90:	782a      	ldrb	r2, [r5, #0]
 8021a92:	1c6e      	adds	r6, r5, #1
 8021a94:	3a30      	subs	r2, #48	@ 0x30
 8021a96:	2a09      	cmp	r2, #9
 8021a98:	d950      	bls.n	8021b3c <_svfiprintf_r+0x180>
 8021a9a:	2900      	cmp	r1, #0
 8021a9c:	d111      	bne.n	8021ac2 <_svfiprintf_r+0x106>
 8021a9e:	e017      	b.n	8021ad0 <_svfiprintf_r+0x114>
 8021aa0:	3501      	adds	r5, #1
 8021aa2:	e7af      	b.n	8021a04 <_svfiprintf_r+0x48>
 8021aa4:	9b05      	ldr	r3, [sp, #20]
 8021aa6:	6822      	ldr	r2, [r4, #0]
 8021aa8:	1ac0      	subs	r0, r0, r3
 8021aaa:	2301      	movs	r3, #1
 8021aac:	4083      	lsls	r3, r0
 8021aae:	4313      	orrs	r3, r2
 8021ab0:	002e      	movs	r6, r5
 8021ab2:	6023      	str	r3, [r4, #0]
 8021ab4:	e7cc      	b.n	8021a50 <_svfiprintf_r+0x94>
 8021ab6:	9b07      	ldr	r3, [sp, #28]
 8021ab8:	1d19      	adds	r1, r3, #4
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	9107      	str	r1, [sp, #28]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	db01      	blt.n	8021ac6 <_svfiprintf_r+0x10a>
 8021ac2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021ac4:	e004      	b.n	8021ad0 <_svfiprintf_r+0x114>
 8021ac6:	425b      	negs	r3, r3
 8021ac8:	60e3      	str	r3, [r4, #12]
 8021aca:	2302      	movs	r3, #2
 8021acc:	4313      	orrs	r3, r2
 8021ace:	6023      	str	r3, [r4, #0]
 8021ad0:	782b      	ldrb	r3, [r5, #0]
 8021ad2:	2b2e      	cmp	r3, #46	@ 0x2e
 8021ad4:	d10c      	bne.n	8021af0 <_svfiprintf_r+0x134>
 8021ad6:	786b      	ldrb	r3, [r5, #1]
 8021ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8021ada:	d134      	bne.n	8021b46 <_svfiprintf_r+0x18a>
 8021adc:	9b07      	ldr	r3, [sp, #28]
 8021ade:	3502      	adds	r5, #2
 8021ae0:	1d1a      	adds	r2, r3, #4
 8021ae2:	681b      	ldr	r3, [r3, #0]
 8021ae4:	9207      	str	r2, [sp, #28]
 8021ae6:	2b00      	cmp	r3, #0
 8021ae8:	da01      	bge.n	8021aee <_svfiprintf_r+0x132>
 8021aea:	2301      	movs	r3, #1
 8021aec:	425b      	negs	r3, r3
 8021aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8021af0:	4e2d      	ldr	r6, [pc, #180]	@ (8021ba8 <_svfiprintf_r+0x1ec>)
 8021af2:	2203      	movs	r2, #3
 8021af4:	0030      	movs	r0, r6
 8021af6:	7829      	ldrb	r1, [r5, #0]
 8021af8:	f7fd ff19 	bl	801f92e <memchr>
 8021afc:	2800      	cmp	r0, #0
 8021afe:	d006      	beq.n	8021b0e <_svfiprintf_r+0x152>
 8021b00:	2340      	movs	r3, #64	@ 0x40
 8021b02:	1b80      	subs	r0, r0, r6
 8021b04:	4083      	lsls	r3, r0
 8021b06:	6822      	ldr	r2, [r4, #0]
 8021b08:	3501      	adds	r5, #1
 8021b0a:	4313      	orrs	r3, r2
 8021b0c:	6023      	str	r3, [r4, #0]
 8021b0e:	7829      	ldrb	r1, [r5, #0]
 8021b10:	2206      	movs	r2, #6
 8021b12:	4826      	ldr	r0, [pc, #152]	@ (8021bac <_svfiprintf_r+0x1f0>)
 8021b14:	1c6e      	adds	r6, r5, #1
 8021b16:	7621      	strb	r1, [r4, #24]
 8021b18:	f7fd ff09 	bl	801f92e <memchr>
 8021b1c:	2800      	cmp	r0, #0
 8021b1e:	d038      	beq.n	8021b92 <_svfiprintf_r+0x1d6>
 8021b20:	4b23      	ldr	r3, [pc, #140]	@ (8021bb0 <_svfiprintf_r+0x1f4>)
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	d122      	bne.n	8021b6c <_svfiprintf_r+0x1b0>
 8021b26:	2207      	movs	r2, #7
 8021b28:	9b07      	ldr	r3, [sp, #28]
 8021b2a:	3307      	adds	r3, #7
 8021b2c:	4393      	bics	r3, r2
 8021b2e:	3308      	adds	r3, #8
 8021b30:	9307      	str	r3, [sp, #28]
 8021b32:	6963      	ldr	r3, [r4, #20]
 8021b34:	9a04      	ldr	r2, [sp, #16]
 8021b36:	189b      	adds	r3, r3, r2
 8021b38:	6163      	str	r3, [r4, #20]
 8021b3a:	e762      	b.n	8021a02 <_svfiprintf_r+0x46>
 8021b3c:	4343      	muls	r3, r0
 8021b3e:	0035      	movs	r5, r6
 8021b40:	2101      	movs	r1, #1
 8021b42:	189b      	adds	r3, r3, r2
 8021b44:	e7a4      	b.n	8021a90 <_svfiprintf_r+0xd4>
 8021b46:	2300      	movs	r3, #0
 8021b48:	200a      	movs	r0, #10
 8021b4a:	0019      	movs	r1, r3
 8021b4c:	3501      	adds	r5, #1
 8021b4e:	6063      	str	r3, [r4, #4]
 8021b50:	782a      	ldrb	r2, [r5, #0]
 8021b52:	1c6e      	adds	r6, r5, #1
 8021b54:	3a30      	subs	r2, #48	@ 0x30
 8021b56:	2a09      	cmp	r2, #9
 8021b58:	d903      	bls.n	8021b62 <_svfiprintf_r+0x1a6>
 8021b5a:	2b00      	cmp	r3, #0
 8021b5c:	d0c8      	beq.n	8021af0 <_svfiprintf_r+0x134>
 8021b5e:	9109      	str	r1, [sp, #36]	@ 0x24
 8021b60:	e7c6      	b.n	8021af0 <_svfiprintf_r+0x134>
 8021b62:	4341      	muls	r1, r0
 8021b64:	0035      	movs	r5, r6
 8021b66:	2301      	movs	r3, #1
 8021b68:	1889      	adds	r1, r1, r2
 8021b6a:	e7f1      	b.n	8021b50 <_svfiprintf_r+0x194>
 8021b6c:	aa07      	add	r2, sp, #28
 8021b6e:	9200      	str	r2, [sp, #0]
 8021b70:	0021      	movs	r1, r4
 8021b72:	003a      	movs	r2, r7
 8021b74:	4b0f      	ldr	r3, [pc, #60]	@ (8021bb4 <_svfiprintf_r+0x1f8>)
 8021b76:	9803      	ldr	r0, [sp, #12]
 8021b78:	f7fc ffd4 	bl	801eb24 <_printf_float>
 8021b7c:	9004      	str	r0, [sp, #16]
 8021b7e:	9b04      	ldr	r3, [sp, #16]
 8021b80:	3301      	adds	r3, #1
 8021b82:	d1d6      	bne.n	8021b32 <_svfiprintf_r+0x176>
 8021b84:	89bb      	ldrh	r3, [r7, #12]
 8021b86:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021b88:	065b      	lsls	r3, r3, #25
 8021b8a:	d500      	bpl.n	8021b8e <_svfiprintf_r+0x1d2>
 8021b8c:	e72c      	b.n	80219e8 <_svfiprintf_r+0x2c>
 8021b8e:	b021      	add	sp, #132	@ 0x84
 8021b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b92:	aa07      	add	r2, sp, #28
 8021b94:	9200      	str	r2, [sp, #0]
 8021b96:	0021      	movs	r1, r4
 8021b98:	003a      	movs	r2, r7
 8021b9a:	4b06      	ldr	r3, [pc, #24]	@ (8021bb4 <_svfiprintf_r+0x1f8>)
 8021b9c:	9803      	ldr	r0, [sp, #12]
 8021b9e:	f7fd fa6f 	bl	801f080 <_printf_i>
 8021ba2:	e7eb      	b.n	8021b7c <_svfiprintf_r+0x1c0>
 8021ba4:	080251f0 	.word	0x080251f0
 8021ba8:	080251f6 	.word	0x080251f6
 8021bac:	080251fa 	.word	0x080251fa
 8021bb0:	0801eb25 	.word	0x0801eb25
 8021bb4:	080218fd 	.word	0x080218fd

08021bb8 <__sfputc_r>:
 8021bb8:	6893      	ldr	r3, [r2, #8]
 8021bba:	b510      	push	{r4, lr}
 8021bbc:	3b01      	subs	r3, #1
 8021bbe:	6093      	str	r3, [r2, #8]
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	da04      	bge.n	8021bce <__sfputc_r+0x16>
 8021bc4:	6994      	ldr	r4, [r2, #24]
 8021bc6:	42a3      	cmp	r3, r4
 8021bc8:	db07      	blt.n	8021bda <__sfputc_r+0x22>
 8021bca:	290a      	cmp	r1, #10
 8021bcc:	d005      	beq.n	8021bda <__sfputc_r+0x22>
 8021bce:	6813      	ldr	r3, [r2, #0]
 8021bd0:	1c58      	adds	r0, r3, #1
 8021bd2:	6010      	str	r0, [r2, #0]
 8021bd4:	7019      	strb	r1, [r3, #0]
 8021bd6:	0008      	movs	r0, r1
 8021bd8:	bd10      	pop	{r4, pc}
 8021bda:	f7fd fd37 	bl	801f64c <__swbuf_r>
 8021bde:	0001      	movs	r1, r0
 8021be0:	e7f9      	b.n	8021bd6 <__sfputc_r+0x1e>

08021be2 <__sfputs_r>:
 8021be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021be4:	0006      	movs	r6, r0
 8021be6:	000f      	movs	r7, r1
 8021be8:	0014      	movs	r4, r2
 8021bea:	18d5      	adds	r5, r2, r3
 8021bec:	42ac      	cmp	r4, r5
 8021bee:	d101      	bne.n	8021bf4 <__sfputs_r+0x12>
 8021bf0:	2000      	movs	r0, #0
 8021bf2:	e007      	b.n	8021c04 <__sfputs_r+0x22>
 8021bf4:	7821      	ldrb	r1, [r4, #0]
 8021bf6:	003a      	movs	r2, r7
 8021bf8:	0030      	movs	r0, r6
 8021bfa:	f7ff ffdd 	bl	8021bb8 <__sfputc_r>
 8021bfe:	3401      	adds	r4, #1
 8021c00:	1c43      	adds	r3, r0, #1
 8021c02:	d1f3      	bne.n	8021bec <__sfputs_r+0xa>
 8021c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021c08 <_vfiprintf_r>:
 8021c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c0a:	b0a1      	sub	sp, #132	@ 0x84
 8021c0c:	000f      	movs	r7, r1
 8021c0e:	0015      	movs	r5, r2
 8021c10:	001e      	movs	r6, r3
 8021c12:	9003      	str	r0, [sp, #12]
 8021c14:	2800      	cmp	r0, #0
 8021c16:	d004      	beq.n	8021c22 <_vfiprintf_r+0x1a>
 8021c18:	6a03      	ldr	r3, [r0, #32]
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d101      	bne.n	8021c22 <_vfiprintf_r+0x1a>
 8021c1e:	f7fd fbcd 	bl	801f3bc <__sinit>
 8021c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021c24:	07db      	lsls	r3, r3, #31
 8021c26:	d405      	bmi.n	8021c34 <_vfiprintf_r+0x2c>
 8021c28:	89bb      	ldrh	r3, [r7, #12]
 8021c2a:	059b      	lsls	r3, r3, #22
 8021c2c:	d402      	bmi.n	8021c34 <_vfiprintf_r+0x2c>
 8021c2e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021c30:	f7fd fe7b 	bl	801f92a <__retarget_lock_acquire_recursive>
 8021c34:	89bb      	ldrh	r3, [r7, #12]
 8021c36:	071b      	lsls	r3, r3, #28
 8021c38:	d502      	bpl.n	8021c40 <_vfiprintf_r+0x38>
 8021c3a:	693b      	ldr	r3, [r7, #16]
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	d113      	bne.n	8021c68 <_vfiprintf_r+0x60>
 8021c40:	0039      	movs	r1, r7
 8021c42:	9803      	ldr	r0, [sp, #12]
 8021c44:	f7fd fd44 	bl	801f6d0 <__swsetup_r>
 8021c48:	2800      	cmp	r0, #0
 8021c4a:	d00d      	beq.n	8021c68 <_vfiprintf_r+0x60>
 8021c4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021c4e:	07db      	lsls	r3, r3, #31
 8021c50:	d503      	bpl.n	8021c5a <_vfiprintf_r+0x52>
 8021c52:	2001      	movs	r0, #1
 8021c54:	4240      	negs	r0, r0
 8021c56:	b021      	add	sp, #132	@ 0x84
 8021c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c5a:	89bb      	ldrh	r3, [r7, #12]
 8021c5c:	059b      	lsls	r3, r3, #22
 8021c5e:	d4f8      	bmi.n	8021c52 <_vfiprintf_r+0x4a>
 8021c60:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021c62:	f7fd fe63 	bl	801f92c <__retarget_lock_release_recursive>
 8021c66:	e7f4      	b.n	8021c52 <_vfiprintf_r+0x4a>
 8021c68:	2300      	movs	r3, #0
 8021c6a:	ac08      	add	r4, sp, #32
 8021c6c:	6163      	str	r3, [r4, #20]
 8021c6e:	3320      	adds	r3, #32
 8021c70:	7663      	strb	r3, [r4, #25]
 8021c72:	3310      	adds	r3, #16
 8021c74:	76a3      	strb	r3, [r4, #26]
 8021c76:	9607      	str	r6, [sp, #28]
 8021c78:	002e      	movs	r6, r5
 8021c7a:	7833      	ldrb	r3, [r6, #0]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d001      	beq.n	8021c84 <_vfiprintf_r+0x7c>
 8021c80:	2b25      	cmp	r3, #37	@ 0x25
 8021c82:	d148      	bne.n	8021d16 <_vfiprintf_r+0x10e>
 8021c84:	1b73      	subs	r3, r6, r5
 8021c86:	9305      	str	r3, [sp, #20]
 8021c88:	42ae      	cmp	r6, r5
 8021c8a:	d00b      	beq.n	8021ca4 <_vfiprintf_r+0x9c>
 8021c8c:	002a      	movs	r2, r5
 8021c8e:	0039      	movs	r1, r7
 8021c90:	9803      	ldr	r0, [sp, #12]
 8021c92:	f7ff ffa6 	bl	8021be2 <__sfputs_r>
 8021c96:	3001      	adds	r0, #1
 8021c98:	d100      	bne.n	8021c9c <_vfiprintf_r+0x94>
 8021c9a:	e0ae      	b.n	8021dfa <_vfiprintf_r+0x1f2>
 8021c9c:	6963      	ldr	r3, [r4, #20]
 8021c9e:	9a05      	ldr	r2, [sp, #20]
 8021ca0:	189b      	adds	r3, r3, r2
 8021ca2:	6163      	str	r3, [r4, #20]
 8021ca4:	7833      	ldrb	r3, [r6, #0]
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	d100      	bne.n	8021cac <_vfiprintf_r+0xa4>
 8021caa:	e0a6      	b.n	8021dfa <_vfiprintf_r+0x1f2>
 8021cac:	2201      	movs	r2, #1
 8021cae:	2300      	movs	r3, #0
 8021cb0:	4252      	negs	r2, r2
 8021cb2:	6062      	str	r2, [r4, #4]
 8021cb4:	a904      	add	r1, sp, #16
 8021cb6:	3254      	adds	r2, #84	@ 0x54
 8021cb8:	1852      	adds	r2, r2, r1
 8021cba:	1c75      	adds	r5, r6, #1
 8021cbc:	6023      	str	r3, [r4, #0]
 8021cbe:	60e3      	str	r3, [r4, #12]
 8021cc0:	60a3      	str	r3, [r4, #8]
 8021cc2:	7013      	strb	r3, [r2, #0]
 8021cc4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021cc6:	4b59      	ldr	r3, [pc, #356]	@ (8021e2c <_vfiprintf_r+0x224>)
 8021cc8:	2205      	movs	r2, #5
 8021cca:	0018      	movs	r0, r3
 8021ccc:	7829      	ldrb	r1, [r5, #0]
 8021cce:	9305      	str	r3, [sp, #20]
 8021cd0:	f7fd fe2d 	bl	801f92e <memchr>
 8021cd4:	1c6e      	adds	r6, r5, #1
 8021cd6:	2800      	cmp	r0, #0
 8021cd8:	d11f      	bne.n	8021d1a <_vfiprintf_r+0x112>
 8021cda:	6822      	ldr	r2, [r4, #0]
 8021cdc:	06d3      	lsls	r3, r2, #27
 8021cde:	d504      	bpl.n	8021cea <_vfiprintf_r+0xe2>
 8021ce0:	2353      	movs	r3, #83	@ 0x53
 8021ce2:	a904      	add	r1, sp, #16
 8021ce4:	185b      	adds	r3, r3, r1
 8021ce6:	2120      	movs	r1, #32
 8021ce8:	7019      	strb	r1, [r3, #0]
 8021cea:	0713      	lsls	r3, r2, #28
 8021cec:	d504      	bpl.n	8021cf8 <_vfiprintf_r+0xf0>
 8021cee:	2353      	movs	r3, #83	@ 0x53
 8021cf0:	a904      	add	r1, sp, #16
 8021cf2:	185b      	adds	r3, r3, r1
 8021cf4:	212b      	movs	r1, #43	@ 0x2b
 8021cf6:	7019      	strb	r1, [r3, #0]
 8021cf8:	782b      	ldrb	r3, [r5, #0]
 8021cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8021cfc:	d016      	beq.n	8021d2c <_vfiprintf_r+0x124>
 8021cfe:	002e      	movs	r6, r5
 8021d00:	2100      	movs	r1, #0
 8021d02:	200a      	movs	r0, #10
 8021d04:	68e3      	ldr	r3, [r4, #12]
 8021d06:	7832      	ldrb	r2, [r6, #0]
 8021d08:	1c75      	adds	r5, r6, #1
 8021d0a:	3a30      	subs	r2, #48	@ 0x30
 8021d0c:	2a09      	cmp	r2, #9
 8021d0e:	d950      	bls.n	8021db2 <_vfiprintf_r+0x1aa>
 8021d10:	2900      	cmp	r1, #0
 8021d12:	d111      	bne.n	8021d38 <_vfiprintf_r+0x130>
 8021d14:	e017      	b.n	8021d46 <_vfiprintf_r+0x13e>
 8021d16:	3601      	adds	r6, #1
 8021d18:	e7af      	b.n	8021c7a <_vfiprintf_r+0x72>
 8021d1a:	9b05      	ldr	r3, [sp, #20]
 8021d1c:	6822      	ldr	r2, [r4, #0]
 8021d1e:	1ac0      	subs	r0, r0, r3
 8021d20:	2301      	movs	r3, #1
 8021d22:	4083      	lsls	r3, r0
 8021d24:	4313      	orrs	r3, r2
 8021d26:	0035      	movs	r5, r6
 8021d28:	6023      	str	r3, [r4, #0]
 8021d2a:	e7cc      	b.n	8021cc6 <_vfiprintf_r+0xbe>
 8021d2c:	9b07      	ldr	r3, [sp, #28]
 8021d2e:	1d19      	adds	r1, r3, #4
 8021d30:	681b      	ldr	r3, [r3, #0]
 8021d32:	9107      	str	r1, [sp, #28]
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	db01      	blt.n	8021d3c <_vfiprintf_r+0x134>
 8021d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021d3a:	e004      	b.n	8021d46 <_vfiprintf_r+0x13e>
 8021d3c:	425b      	negs	r3, r3
 8021d3e:	60e3      	str	r3, [r4, #12]
 8021d40:	2302      	movs	r3, #2
 8021d42:	4313      	orrs	r3, r2
 8021d44:	6023      	str	r3, [r4, #0]
 8021d46:	7833      	ldrb	r3, [r6, #0]
 8021d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d4a:	d10c      	bne.n	8021d66 <_vfiprintf_r+0x15e>
 8021d4c:	7873      	ldrb	r3, [r6, #1]
 8021d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021d50:	d134      	bne.n	8021dbc <_vfiprintf_r+0x1b4>
 8021d52:	9b07      	ldr	r3, [sp, #28]
 8021d54:	3602      	adds	r6, #2
 8021d56:	1d1a      	adds	r2, r3, #4
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	9207      	str	r2, [sp, #28]
 8021d5c:	2b00      	cmp	r3, #0
 8021d5e:	da01      	bge.n	8021d64 <_vfiprintf_r+0x15c>
 8021d60:	2301      	movs	r3, #1
 8021d62:	425b      	negs	r3, r3
 8021d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d66:	4d32      	ldr	r5, [pc, #200]	@ (8021e30 <_vfiprintf_r+0x228>)
 8021d68:	2203      	movs	r2, #3
 8021d6a:	0028      	movs	r0, r5
 8021d6c:	7831      	ldrb	r1, [r6, #0]
 8021d6e:	f7fd fdde 	bl	801f92e <memchr>
 8021d72:	2800      	cmp	r0, #0
 8021d74:	d006      	beq.n	8021d84 <_vfiprintf_r+0x17c>
 8021d76:	2340      	movs	r3, #64	@ 0x40
 8021d78:	1b40      	subs	r0, r0, r5
 8021d7a:	4083      	lsls	r3, r0
 8021d7c:	6822      	ldr	r2, [r4, #0]
 8021d7e:	3601      	adds	r6, #1
 8021d80:	4313      	orrs	r3, r2
 8021d82:	6023      	str	r3, [r4, #0]
 8021d84:	7831      	ldrb	r1, [r6, #0]
 8021d86:	2206      	movs	r2, #6
 8021d88:	482a      	ldr	r0, [pc, #168]	@ (8021e34 <_vfiprintf_r+0x22c>)
 8021d8a:	1c75      	adds	r5, r6, #1
 8021d8c:	7621      	strb	r1, [r4, #24]
 8021d8e:	f7fd fdce 	bl	801f92e <memchr>
 8021d92:	2800      	cmp	r0, #0
 8021d94:	d040      	beq.n	8021e18 <_vfiprintf_r+0x210>
 8021d96:	4b28      	ldr	r3, [pc, #160]	@ (8021e38 <_vfiprintf_r+0x230>)
 8021d98:	2b00      	cmp	r3, #0
 8021d9a:	d122      	bne.n	8021de2 <_vfiprintf_r+0x1da>
 8021d9c:	2207      	movs	r2, #7
 8021d9e:	9b07      	ldr	r3, [sp, #28]
 8021da0:	3307      	adds	r3, #7
 8021da2:	4393      	bics	r3, r2
 8021da4:	3308      	adds	r3, #8
 8021da6:	9307      	str	r3, [sp, #28]
 8021da8:	6963      	ldr	r3, [r4, #20]
 8021daa:	9a04      	ldr	r2, [sp, #16]
 8021dac:	189b      	adds	r3, r3, r2
 8021dae:	6163      	str	r3, [r4, #20]
 8021db0:	e762      	b.n	8021c78 <_vfiprintf_r+0x70>
 8021db2:	4343      	muls	r3, r0
 8021db4:	002e      	movs	r6, r5
 8021db6:	2101      	movs	r1, #1
 8021db8:	189b      	adds	r3, r3, r2
 8021dba:	e7a4      	b.n	8021d06 <_vfiprintf_r+0xfe>
 8021dbc:	2300      	movs	r3, #0
 8021dbe:	200a      	movs	r0, #10
 8021dc0:	0019      	movs	r1, r3
 8021dc2:	3601      	adds	r6, #1
 8021dc4:	6063      	str	r3, [r4, #4]
 8021dc6:	7832      	ldrb	r2, [r6, #0]
 8021dc8:	1c75      	adds	r5, r6, #1
 8021dca:	3a30      	subs	r2, #48	@ 0x30
 8021dcc:	2a09      	cmp	r2, #9
 8021dce:	d903      	bls.n	8021dd8 <_vfiprintf_r+0x1d0>
 8021dd0:	2b00      	cmp	r3, #0
 8021dd2:	d0c8      	beq.n	8021d66 <_vfiprintf_r+0x15e>
 8021dd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8021dd6:	e7c6      	b.n	8021d66 <_vfiprintf_r+0x15e>
 8021dd8:	4341      	muls	r1, r0
 8021dda:	002e      	movs	r6, r5
 8021ddc:	2301      	movs	r3, #1
 8021dde:	1889      	adds	r1, r1, r2
 8021de0:	e7f1      	b.n	8021dc6 <_vfiprintf_r+0x1be>
 8021de2:	aa07      	add	r2, sp, #28
 8021de4:	9200      	str	r2, [sp, #0]
 8021de6:	0021      	movs	r1, r4
 8021de8:	003a      	movs	r2, r7
 8021dea:	4b14      	ldr	r3, [pc, #80]	@ (8021e3c <_vfiprintf_r+0x234>)
 8021dec:	9803      	ldr	r0, [sp, #12]
 8021dee:	f7fc fe99 	bl	801eb24 <_printf_float>
 8021df2:	9004      	str	r0, [sp, #16]
 8021df4:	9b04      	ldr	r3, [sp, #16]
 8021df6:	3301      	adds	r3, #1
 8021df8:	d1d6      	bne.n	8021da8 <_vfiprintf_r+0x1a0>
 8021dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021dfc:	07db      	lsls	r3, r3, #31
 8021dfe:	d405      	bmi.n	8021e0c <_vfiprintf_r+0x204>
 8021e00:	89bb      	ldrh	r3, [r7, #12]
 8021e02:	059b      	lsls	r3, r3, #22
 8021e04:	d402      	bmi.n	8021e0c <_vfiprintf_r+0x204>
 8021e06:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021e08:	f7fd fd90 	bl	801f92c <__retarget_lock_release_recursive>
 8021e0c:	89bb      	ldrh	r3, [r7, #12]
 8021e0e:	065b      	lsls	r3, r3, #25
 8021e10:	d500      	bpl.n	8021e14 <_vfiprintf_r+0x20c>
 8021e12:	e71e      	b.n	8021c52 <_vfiprintf_r+0x4a>
 8021e14:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021e16:	e71e      	b.n	8021c56 <_vfiprintf_r+0x4e>
 8021e18:	aa07      	add	r2, sp, #28
 8021e1a:	9200      	str	r2, [sp, #0]
 8021e1c:	0021      	movs	r1, r4
 8021e1e:	003a      	movs	r2, r7
 8021e20:	4b06      	ldr	r3, [pc, #24]	@ (8021e3c <_vfiprintf_r+0x234>)
 8021e22:	9803      	ldr	r0, [sp, #12]
 8021e24:	f7fd f92c 	bl	801f080 <_printf_i>
 8021e28:	e7e3      	b.n	8021df2 <_vfiprintf_r+0x1ea>
 8021e2a:	46c0      	nop			@ (mov r8, r8)
 8021e2c:	080251f0 	.word	0x080251f0
 8021e30:	080251f6 	.word	0x080251f6
 8021e34:	080251fa 	.word	0x080251fa
 8021e38:	0801eb25 	.word	0x0801eb25
 8021e3c:	08021be3 	.word	0x08021be3

08021e40 <__sflush_r>:
 8021e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021e42:	220c      	movs	r2, #12
 8021e44:	5e8b      	ldrsh	r3, [r1, r2]
 8021e46:	0005      	movs	r5, r0
 8021e48:	000c      	movs	r4, r1
 8021e4a:	071a      	lsls	r2, r3, #28
 8021e4c:	d456      	bmi.n	8021efc <__sflush_r+0xbc>
 8021e4e:	684a      	ldr	r2, [r1, #4]
 8021e50:	2a00      	cmp	r2, #0
 8021e52:	dc02      	bgt.n	8021e5a <__sflush_r+0x1a>
 8021e54:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8021e56:	2a00      	cmp	r2, #0
 8021e58:	dd4e      	ble.n	8021ef8 <__sflush_r+0xb8>
 8021e5a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021e5c:	2f00      	cmp	r7, #0
 8021e5e:	d04b      	beq.n	8021ef8 <__sflush_r+0xb8>
 8021e60:	2200      	movs	r2, #0
 8021e62:	2080      	movs	r0, #128	@ 0x80
 8021e64:	682e      	ldr	r6, [r5, #0]
 8021e66:	602a      	str	r2, [r5, #0]
 8021e68:	001a      	movs	r2, r3
 8021e6a:	0140      	lsls	r0, r0, #5
 8021e6c:	6a21      	ldr	r1, [r4, #32]
 8021e6e:	4002      	ands	r2, r0
 8021e70:	4203      	tst	r3, r0
 8021e72:	d033      	beq.n	8021edc <__sflush_r+0x9c>
 8021e74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021e76:	89a3      	ldrh	r3, [r4, #12]
 8021e78:	075b      	lsls	r3, r3, #29
 8021e7a:	d506      	bpl.n	8021e8a <__sflush_r+0x4a>
 8021e7c:	6863      	ldr	r3, [r4, #4]
 8021e7e:	1ad2      	subs	r2, r2, r3
 8021e80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d001      	beq.n	8021e8a <__sflush_r+0x4a>
 8021e86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021e88:	1ad2      	subs	r2, r2, r3
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	0028      	movs	r0, r5
 8021e8e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021e90:	6a21      	ldr	r1, [r4, #32]
 8021e92:	47b8      	blx	r7
 8021e94:	89a2      	ldrh	r2, [r4, #12]
 8021e96:	1c43      	adds	r3, r0, #1
 8021e98:	d106      	bne.n	8021ea8 <__sflush_r+0x68>
 8021e9a:	6829      	ldr	r1, [r5, #0]
 8021e9c:	291d      	cmp	r1, #29
 8021e9e:	d846      	bhi.n	8021f2e <__sflush_r+0xee>
 8021ea0:	4b29      	ldr	r3, [pc, #164]	@ (8021f48 <__sflush_r+0x108>)
 8021ea2:	410b      	asrs	r3, r1
 8021ea4:	07db      	lsls	r3, r3, #31
 8021ea6:	d442      	bmi.n	8021f2e <__sflush_r+0xee>
 8021ea8:	2300      	movs	r3, #0
 8021eaa:	6063      	str	r3, [r4, #4]
 8021eac:	6923      	ldr	r3, [r4, #16]
 8021eae:	6023      	str	r3, [r4, #0]
 8021eb0:	04d2      	lsls	r2, r2, #19
 8021eb2:	d505      	bpl.n	8021ec0 <__sflush_r+0x80>
 8021eb4:	1c43      	adds	r3, r0, #1
 8021eb6:	d102      	bne.n	8021ebe <__sflush_r+0x7e>
 8021eb8:	682b      	ldr	r3, [r5, #0]
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d100      	bne.n	8021ec0 <__sflush_r+0x80>
 8021ebe:	6560      	str	r0, [r4, #84]	@ 0x54
 8021ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021ec2:	602e      	str	r6, [r5, #0]
 8021ec4:	2900      	cmp	r1, #0
 8021ec6:	d017      	beq.n	8021ef8 <__sflush_r+0xb8>
 8021ec8:	0023      	movs	r3, r4
 8021eca:	3344      	adds	r3, #68	@ 0x44
 8021ecc:	4299      	cmp	r1, r3
 8021ece:	d002      	beq.n	8021ed6 <__sflush_r+0x96>
 8021ed0:	0028      	movs	r0, r5
 8021ed2:	f7fe fbc9 	bl	8020668 <_free_r>
 8021ed6:	2300      	movs	r3, #0
 8021ed8:	6363      	str	r3, [r4, #52]	@ 0x34
 8021eda:	e00d      	b.n	8021ef8 <__sflush_r+0xb8>
 8021edc:	2301      	movs	r3, #1
 8021ede:	0028      	movs	r0, r5
 8021ee0:	47b8      	blx	r7
 8021ee2:	0002      	movs	r2, r0
 8021ee4:	1c43      	adds	r3, r0, #1
 8021ee6:	d1c6      	bne.n	8021e76 <__sflush_r+0x36>
 8021ee8:	682b      	ldr	r3, [r5, #0]
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	d0c3      	beq.n	8021e76 <__sflush_r+0x36>
 8021eee:	2b1d      	cmp	r3, #29
 8021ef0:	d001      	beq.n	8021ef6 <__sflush_r+0xb6>
 8021ef2:	2b16      	cmp	r3, #22
 8021ef4:	d11a      	bne.n	8021f2c <__sflush_r+0xec>
 8021ef6:	602e      	str	r6, [r5, #0]
 8021ef8:	2000      	movs	r0, #0
 8021efa:	e01e      	b.n	8021f3a <__sflush_r+0xfa>
 8021efc:	690e      	ldr	r6, [r1, #16]
 8021efe:	2e00      	cmp	r6, #0
 8021f00:	d0fa      	beq.n	8021ef8 <__sflush_r+0xb8>
 8021f02:	680f      	ldr	r7, [r1, #0]
 8021f04:	600e      	str	r6, [r1, #0]
 8021f06:	1bba      	subs	r2, r7, r6
 8021f08:	9201      	str	r2, [sp, #4]
 8021f0a:	2200      	movs	r2, #0
 8021f0c:	079b      	lsls	r3, r3, #30
 8021f0e:	d100      	bne.n	8021f12 <__sflush_r+0xd2>
 8021f10:	694a      	ldr	r2, [r1, #20]
 8021f12:	60a2      	str	r2, [r4, #8]
 8021f14:	9b01      	ldr	r3, [sp, #4]
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	ddee      	ble.n	8021ef8 <__sflush_r+0xb8>
 8021f1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8021f1c:	0032      	movs	r2, r6
 8021f1e:	001f      	movs	r7, r3
 8021f20:	0028      	movs	r0, r5
 8021f22:	9b01      	ldr	r3, [sp, #4]
 8021f24:	6a21      	ldr	r1, [r4, #32]
 8021f26:	47b8      	blx	r7
 8021f28:	2800      	cmp	r0, #0
 8021f2a:	dc07      	bgt.n	8021f3c <__sflush_r+0xfc>
 8021f2c:	89a2      	ldrh	r2, [r4, #12]
 8021f2e:	2340      	movs	r3, #64	@ 0x40
 8021f30:	2001      	movs	r0, #1
 8021f32:	4313      	orrs	r3, r2
 8021f34:	b21b      	sxth	r3, r3
 8021f36:	81a3      	strh	r3, [r4, #12]
 8021f38:	4240      	negs	r0, r0
 8021f3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021f3c:	9b01      	ldr	r3, [sp, #4]
 8021f3e:	1836      	adds	r6, r6, r0
 8021f40:	1a1b      	subs	r3, r3, r0
 8021f42:	9301      	str	r3, [sp, #4]
 8021f44:	e7e6      	b.n	8021f14 <__sflush_r+0xd4>
 8021f46:	46c0      	nop			@ (mov r8, r8)
 8021f48:	dfbffffe 	.word	0xdfbffffe

08021f4c <_fflush_r>:
 8021f4c:	690b      	ldr	r3, [r1, #16]
 8021f4e:	b570      	push	{r4, r5, r6, lr}
 8021f50:	0005      	movs	r5, r0
 8021f52:	000c      	movs	r4, r1
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	d102      	bne.n	8021f5e <_fflush_r+0x12>
 8021f58:	2500      	movs	r5, #0
 8021f5a:	0028      	movs	r0, r5
 8021f5c:	bd70      	pop	{r4, r5, r6, pc}
 8021f5e:	2800      	cmp	r0, #0
 8021f60:	d004      	beq.n	8021f6c <_fflush_r+0x20>
 8021f62:	6a03      	ldr	r3, [r0, #32]
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d101      	bne.n	8021f6c <_fflush_r+0x20>
 8021f68:	f7fd fa28 	bl	801f3bc <__sinit>
 8021f6c:	220c      	movs	r2, #12
 8021f6e:	5ea3      	ldrsh	r3, [r4, r2]
 8021f70:	2b00      	cmp	r3, #0
 8021f72:	d0f1      	beq.n	8021f58 <_fflush_r+0xc>
 8021f74:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021f76:	07d2      	lsls	r2, r2, #31
 8021f78:	d404      	bmi.n	8021f84 <_fflush_r+0x38>
 8021f7a:	059b      	lsls	r3, r3, #22
 8021f7c:	d402      	bmi.n	8021f84 <_fflush_r+0x38>
 8021f7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f80:	f7fd fcd3 	bl	801f92a <__retarget_lock_acquire_recursive>
 8021f84:	0028      	movs	r0, r5
 8021f86:	0021      	movs	r1, r4
 8021f88:	f7ff ff5a 	bl	8021e40 <__sflush_r>
 8021f8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021f8e:	0005      	movs	r5, r0
 8021f90:	07db      	lsls	r3, r3, #31
 8021f92:	d4e2      	bmi.n	8021f5a <_fflush_r+0xe>
 8021f94:	89a3      	ldrh	r3, [r4, #12]
 8021f96:	059b      	lsls	r3, r3, #22
 8021f98:	d4df      	bmi.n	8021f5a <_fflush_r+0xe>
 8021f9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f9c:	f7fd fcc6 	bl	801f92c <__retarget_lock_release_recursive>
 8021fa0:	e7db      	b.n	8021f5a <_fflush_r+0xe>
	...

08021fa4 <__swhatbuf_r>:
 8021fa4:	b570      	push	{r4, r5, r6, lr}
 8021fa6:	000e      	movs	r6, r1
 8021fa8:	001d      	movs	r5, r3
 8021faa:	230e      	movs	r3, #14
 8021fac:	5ec9      	ldrsh	r1, [r1, r3]
 8021fae:	0014      	movs	r4, r2
 8021fb0:	b096      	sub	sp, #88	@ 0x58
 8021fb2:	2900      	cmp	r1, #0
 8021fb4:	da0c      	bge.n	8021fd0 <__swhatbuf_r+0x2c>
 8021fb6:	89b2      	ldrh	r2, [r6, #12]
 8021fb8:	2380      	movs	r3, #128	@ 0x80
 8021fba:	0011      	movs	r1, r2
 8021fbc:	4019      	ands	r1, r3
 8021fbe:	421a      	tst	r2, r3
 8021fc0:	d114      	bne.n	8021fec <__swhatbuf_r+0x48>
 8021fc2:	2380      	movs	r3, #128	@ 0x80
 8021fc4:	00db      	lsls	r3, r3, #3
 8021fc6:	2000      	movs	r0, #0
 8021fc8:	6029      	str	r1, [r5, #0]
 8021fca:	6023      	str	r3, [r4, #0]
 8021fcc:	b016      	add	sp, #88	@ 0x58
 8021fce:	bd70      	pop	{r4, r5, r6, pc}
 8021fd0:	466a      	mov	r2, sp
 8021fd2:	f000 f865 	bl	80220a0 <_fstat_r>
 8021fd6:	2800      	cmp	r0, #0
 8021fd8:	dbed      	blt.n	8021fb6 <__swhatbuf_r+0x12>
 8021fda:	23f0      	movs	r3, #240	@ 0xf0
 8021fdc:	9901      	ldr	r1, [sp, #4]
 8021fde:	021b      	lsls	r3, r3, #8
 8021fe0:	4019      	ands	r1, r3
 8021fe2:	4b04      	ldr	r3, [pc, #16]	@ (8021ff4 <__swhatbuf_r+0x50>)
 8021fe4:	18c9      	adds	r1, r1, r3
 8021fe6:	424b      	negs	r3, r1
 8021fe8:	4159      	adcs	r1, r3
 8021fea:	e7ea      	b.n	8021fc2 <__swhatbuf_r+0x1e>
 8021fec:	2100      	movs	r1, #0
 8021fee:	2340      	movs	r3, #64	@ 0x40
 8021ff0:	e7e9      	b.n	8021fc6 <__swhatbuf_r+0x22>
 8021ff2:	46c0      	nop			@ (mov r8, r8)
 8021ff4:	ffffe000 	.word	0xffffe000

08021ff8 <__smakebuf_r>:
 8021ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ffa:	2602      	movs	r6, #2
 8021ffc:	898b      	ldrh	r3, [r1, #12]
 8021ffe:	0005      	movs	r5, r0
 8022000:	000c      	movs	r4, r1
 8022002:	b085      	sub	sp, #20
 8022004:	4233      	tst	r3, r6
 8022006:	d007      	beq.n	8022018 <__smakebuf_r+0x20>
 8022008:	0023      	movs	r3, r4
 802200a:	3347      	adds	r3, #71	@ 0x47
 802200c:	6023      	str	r3, [r4, #0]
 802200e:	6123      	str	r3, [r4, #16]
 8022010:	2301      	movs	r3, #1
 8022012:	6163      	str	r3, [r4, #20]
 8022014:	b005      	add	sp, #20
 8022016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022018:	ab03      	add	r3, sp, #12
 802201a:	aa02      	add	r2, sp, #8
 802201c:	f7ff ffc2 	bl	8021fa4 <__swhatbuf_r>
 8022020:	9f02      	ldr	r7, [sp, #8]
 8022022:	9001      	str	r0, [sp, #4]
 8022024:	0039      	movs	r1, r7
 8022026:	0028      	movs	r0, r5
 8022028:	f7fe feee 	bl	8020e08 <_malloc_r>
 802202c:	2800      	cmp	r0, #0
 802202e:	d108      	bne.n	8022042 <__smakebuf_r+0x4a>
 8022030:	220c      	movs	r2, #12
 8022032:	5ea3      	ldrsh	r3, [r4, r2]
 8022034:	059a      	lsls	r2, r3, #22
 8022036:	d4ed      	bmi.n	8022014 <__smakebuf_r+0x1c>
 8022038:	2203      	movs	r2, #3
 802203a:	4393      	bics	r3, r2
 802203c:	431e      	orrs	r6, r3
 802203e:	81a6      	strh	r6, [r4, #12]
 8022040:	e7e2      	b.n	8022008 <__smakebuf_r+0x10>
 8022042:	2380      	movs	r3, #128	@ 0x80
 8022044:	89a2      	ldrh	r2, [r4, #12]
 8022046:	6020      	str	r0, [r4, #0]
 8022048:	4313      	orrs	r3, r2
 802204a:	81a3      	strh	r3, [r4, #12]
 802204c:	9b03      	ldr	r3, [sp, #12]
 802204e:	6120      	str	r0, [r4, #16]
 8022050:	6167      	str	r7, [r4, #20]
 8022052:	2b00      	cmp	r3, #0
 8022054:	d00c      	beq.n	8022070 <__smakebuf_r+0x78>
 8022056:	0028      	movs	r0, r5
 8022058:	230e      	movs	r3, #14
 802205a:	5ee1      	ldrsh	r1, [r4, r3]
 802205c:	f000 f832 	bl	80220c4 <_isatty_r>
 8022060:	2800      	cmp	r0, #0
 8022062:	d005      	beq.n	8022070 <__smakebuf_r+0x78>
 8022064:	2303      	movs	r3, #3
 8022066:	89a2      	ldrh	r2, [r4, #12]
 8022068:	439a      	bics	r2, r3
 802206a:	3b02      	subs	r3, #2
 802206c:	4313      	orrs	r3, r2
 802206e:	81a3      	strh	r3, [r4, #12]
 8022070:	89a3      	ldrh	r3, [r4, #12]
 8022072:	9a01      	ldr	r2, [sp, #4]
 8022074:	4313      	orrs	r3, r2
 8022076:	81a3      	strh	r3, [r4, #12]
 8022078:	e7cc      	b.n	8022014 <__smakebuf_r+0x1c>

0802207a <memmove>:
 802207a:	b510      	push	{r4, lr}
 802207c:	4288      	cmp	r0, r1
 802207e:	d806      	bhi.n	802208e <memmove+0x14>
 8022080:	2300      	movs	r3, #0
 8022082:	429a      	cmp	r2, r3
 8022084:	d008      	beq.n	8022098 <memmove+0x1e>
 8022086:	5ccc      	ldrb	r4, [r1, r3]
 8022088:	54c4      	strb	r4, [r0, r3]
 802208a:	3301      	adds	r3, #1
 802208c:	e7f9      	b.n	8022082 <memmove+0x8>
 802208e:	188b      	adds	r3, r1, r2
 8022090:	4298      	cmp	r0, r3
 8022092:	d2f5      	bcs.n	8022080 <memmove+0x6>
 8022094:	3a01      	subs	r2, #1
 8022096:	d200      	bcs.n	802209a <memmove+0x20>
 8022098:	bd10      	pop	{r4, pc}
 802209a:	5c8b      	ldrb	r3, [r1, r2]
 802209c:	5483      	strb	r3, [r0, r2]
 802209e:	e7f9      	b.n	8022094 <memmove+0x1a>

080220a0 <_fstat_r>:
 80220a0:	2300      	movs	r3, #0
 80220a2:	b570      	push	{r4, r5, r6, lr}
 80220a4:	4d06      	ldr	r5, [pc, #24]	@ (80220c0 <_fstat_r+0x20>)
 80220a6:	0004      	movs	r4, r0
 80220a8:	0008      	movs	r0, r1
 80220aa:	0011      	movs	r1, r2
 80220ac:	602b      	str	r3, [r5, #0]
 80220ae:	f7eb f887 	bl	800d1c0 <_fstat>
 80220b2:	1c43      	adds	r3, r0, #1
 80220b4:	d103      	bne.n	80220be <_fstat_r+0x1e>
 80220b6:	682b      	ldr	r3, [r5, #0]
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	d000      	beq.n	80220be <_fstat_r+0x1e>
 80220bc:	6023      	str	r3, [r4, #0]
 80220be:	bd70      	pop	{r4, r5, r6, pc}
 80220c0:	200038f0 	.word	0x200038f0

080220c4 <_isatty_r>:
 80220c4:	2300      	movs	r3, #0
 80220c6:	b570      	push	{r4, r5, r6, lr}
 80220c8:	4d06      	ldr	r5, [pc, #24]	@ (80220e4 <_isatty_r+0x20>)
 80220ca:	0004      	movs	r4, r0
 80220cc:	0008      	movs	r0, r1
 80220ce:	602b      	str	r3, [r5, #0]
 80220d0:	f7eb f884 	bl	800d1dc <_isatty>
 80220d4:	1c43      	adds	r3, r0, #1
 80220d6:	d103      	bne.n	80220e0 <_isatty_r+0x1c>
 80220d8:	682b      	ldr	r3, [r5, #0]
 80220da:	2b00      	cmp	r3, #0
 80220dc:	d000      	beq.n	80220e0 <_isatty_r+0x1c>
 80220de:	6023      	str	r3, [r4, #0]
 80220e0:	bd70      	pop	{r4, r5, r6, pc}
 80220e2:	46c0      	nop			@ (mov r8, r8)
 80220e4:	200038f0 	.word	0x200038f0

080220e8 <_sbrk_r>:
 80220e8:	2300      	movs	r3, #0
 80220ea:	b570      	push	{r4, r5, r6, lr}
 80220ec:	4d06      	ldr	r5, [pc, #24]	@ (8022108 <_sbrk_r+0x20>)
 80220ee:	0004      	movs	r4, r0
 80220f0:	0008      	movs	r0, r1
 80220f2:	602b      	str	r3, [r5, #0]
 80220f4:	f7eb f886 	bl	800d204 <_sbrk>
 80220f8:	1c43      	adds	r3, r0, #1
 80220fa:	d103      	bne.n	8022104 <_sbrk_r+0x1c>
 80220fc:	682b      	ldr	r3, [r5, #0]
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d000      	beq.n	8022104 <_sbrk_r+0x1c>
 8022102:	6023      	str	r3, [r4, #0]
 8022104:	bd70      	pop	{r4, r5, r6, pc}
 8022106:	46c0      	nop			@ (mov r8, r8)
 8022108:	200038f0 	.word	0x200038f0

0802210c <__assert_func>:
 802210c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802210e:	0014      	movs	r4, r2
 8022110:	001a      	movs	r2, r3
 8022112:	4b09      	ldr	r3, [pc, #36]	@ (8022138 <__assert_func+0x2c>)
 8022114:	0005      	movs	r5, r0
 8022116:	681b      	ldr	r3, [r3, #0]
 8022118:	000e      	movs	r6, r1
 802211a:	68d8      	ldr	r0, [r3, #12]
 802211c:	4b07      	ldr	r3, [pc, #28]	@ (802213c <__assert_func+0x30>)
 802211e:	2c00      	cmp	r4, #0
 8022120:	d101      	bne.n	8022126 <__assert_func+0x1a>
 8022122:	4b07      	ldr	r3, [pc, #28]	@ (8022140 <__assert_func+0x34>)
 8022124:	001c      	movs	r4, r3
 8022126:	4907      	ldr	r1, [pc, #28]	@ (8022144 <__assert_func+0x38>)
 8022128:	9301      	str	r3, [sp, #4]
 802212a:	9402      	str	r4, [sp, #8]
 802212c:	002b      	movs	r3, r5
 802212e:	9600      	str	r6, [sp, #0]
 8022130:	f000 f866 	bl	8022200 <fiprintf>
 8022134:	f000 f874 	bl	8022220 <abort>
 8022138:	200003c8 	.word	0x200003c8
 802213c:	08025201 	.word	0x08025201
 8022140:	0802523c 	.word	0x0802523c
 8022144:	0802520e 	.word	0x0802520e

08022148 <_calloc_r>:
 8022148:	b570      	push	{r4, r5, r6, lr}
 802214a:	0c0b      	lsrs	r3, r1, #16
 802214c:	0c15      	lsrs	r5, r2, #16
 802214e:	2b00      	cmp	r3, #0
 8022150:	d11e      	bne.n	8022190 <_calloc_r+0x48>
 8022152:	2d00      	cmp	r5, #0
 8022154:	d10c      	bne.n	8022170 <_calloc_r+0x28>
 8022156:	b289      	uxth	r1, r1
 8022158:	b294      	uxth	r4, r2
 802215a:	434c      	muls	r4, r1
 802215c:	0021      	movs	r1, r4
 802215e:	f7fe fe53 	bl	8020e08 <_malloc_r>
 8022162:	1e05      	subs	r5, r0, #0
 8022164:	d01a      	beq.n	802219c <_calloc_r+0x54>
 8022166:	0022      	movs	r2, r4
 8022168:	2100      	movs	r1, #0
 802216a:	f7fd fb0f 	bl	801f78c <memset>
 802216e:	e016      	b.n	802219e <_calloc_r+0x56>
 8022170:	1c2b      	adds	r3, r5, #0
 8022172:	1c0c      	adds	r4, r1, #0
 8022174:	b289      	uxth	r1, r1
 8022176:	b292      	uxth	r2, r2
 8022178:	434a      	muls	r2, r1
 802217a:	b29b      	uxth	r3, r3
 802217c:	b2a1      	uxth	r1, r4
 802217e:	4359      	muls	r1, r3
 8022180:	0c14      	lsrs	r4, r2, #16
 8022182:	190c      	adds	r4, r1, r4
 8022184:	0c23      	lsrs	r3, r4, #16
 8022186:	d107      	bne.n	8022198 <_calloc_r+0x50>
 8022188:	0424      	lsls	r4, r4, #16
 802218a:	b292      	uxth	r2, r2
 802218c:	4314      	orrs	r4, r2
 802218e:	e7e5      	b.n	802215c <_calloc_r+0x14>
 8022190:	2d00      	cmp	r5, #0
 8022192:	d101      	bne.n	8022198 <_calloc_r+0x50>
 8022194:	1c14      	adds	r4, r2, #0
 8022196:	e7ed      	b.n	8022174 <_calloc_r+0x2c>
 8022198:	230c      	movs	r3, #12
 802219a:	6003      	str	r3, [r0, #0]
 802219c:	2500      	movs	r5, #0
 802219e:	0028      	movs	r0, r5
 80221a0:	bd70      	pop	{r4, r5, r6, pc}

080221a2 <_realloc_r>:
 80221a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221a4:	0006      	movs	r6, r0
 80221a6:	000c      	movs	r4, r1
 80221a8:	0015      	movs	r5, r2
 80221aa:	2900      	cmp	r1, #0
 80221ac:	d105      	bne.n	80221ba <_realloc_r+0x18>
 80221ae:	0011      	movs	r1, r2
 80221b0:	f7fe fe2a 	bl	8020e08 <_malloc_r>
 80221b4:	0004      	movs	r4, r0
 80221b6:	0020      	movs	r0, r4
 80221b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80221ba:	2a00      	cmp	r2, #0
 80221bc:	d103      	bne.n	80221c6 <_realloc_r+0x24>
 80221be:	f7fe fa53 	bl	8020668 <_free_r>
 80221c2:	2400      	movs	r4, #0
 80221c4:	e7f7      	b.n	80221b6 <_realloc_r+0x14>
 80221c6:	f000 f832 	bl	802222e <_malloc_usable_size_r>
 80221ca:	0007      	movs	r7, r0
 80221cc:	4285      	cmp	r5, r0
 80221ce:	d802      	bhi.n	80221d6 <_realloc_r+0x34>
 80221d0:	0843      	lsrs	r3, r0, #1
 80221d2:	42ab      	cmp	r3, r5
 80221d4:	d3ef      	bcc.n	80221b6 <_realloc_r+0x14>
 80221d6:	0029      	movs	r1, r5
 80221d8:	0030      	movs	r0, r6
 80221da:	f7fe fe15 	bl	8020e08 <_malloc_r>
 80221de:	9001      	str	r0, [sp, #4]
 80221e0:	2800      	cmp	r0, #0
 80221e2:	d0ee      	beq.n	80221c2 <_realloc_r+0x20>
 80221e4:	002a      	movs	r2, r5
 80221e6:	42bd      	cmp	r5, r7
 80221e8:	d900      	bls.n	80221ec <_realloc_r+0x4a>
 80221ea:	003a      	movs	r2, r7
 80221ec:	0021      	movs	r1, r4
 80221ee:	9801      	ldr	r0, [sp, #4]
 80221f0:	f7fd fba8 	bl	801f944 <memcpy>
 80221f4:	0021      	movs	r1, r4
 80221f6:	0030      	movs	r0, r6
 80221f8:	f7fe fa36 	bl	8020668 <_free_r>
 80221fc:	9c01      	ldr	r4, [sp, #4]
 80221fe:	e7da      	b.n	80221b6 <_realloc_r+0x14>

08022200 <fiprintf>:
 8022200:	b40e      	push	{r1, r2, r3}
 8022202:	b517      	push	{r0, r1, r2, r4, lr}
 8022204:	4c05      	ldr	r4, [pc, #20]	@ (802221c <fiprintf+0x1c>)
 8022206:	ab05      	add	r3, sp, #20
 8022208:	cb04      	ldmia	r3!, {r2}
 802220a:	0001      	movs	r1, r0
 802220c:	6820      	ldr	r0, [r4, #0]
 802220e:	9301      	str	r3, [sp, #4]
 8022210:	f7ff fcfa 	bl	8021c08 <_vfiprintf_r>
 8022214:	bc1e      	pop	{r1, r2, r3, r4}
 8022216:	bc08      	pop	{r3}
 8022218:	b003      	add	sp, #12
 802221a:	4718      	bx	r3
 802221c:	200003c8 	.word	0x200003c8

08022220 <abort>:
 8022220:	2006      	movs	r0, #6
 8022222:	b510      	push	{r4, lr}
 8022224:	f000 f834 	bl	8022290 <raise>
 8022228:	2001      	movs	r0, #1
 802222a:	f7ea ff95 	bl	800d158 <_exit>

0802222e <_malloc_usable_size_r>:
 802222e:	1f0b      	subs	r3, r1, #4
 8022230:	681b      	ldr	r3, [r3, #0]
 8022232:	1f18      	subs	r0, r3, #4
 8022234:	2b00      	cmp	r3, #0
 8022236:	da01      	bge.n	802223c <_malloc_usable_size_r+0xe>
 8022238:	580b      	ldr	r3, [r1, r0]
 802223a:	18c0      	adds	r0, r0, r3
 802223c:	4770      	bx	lr

0802223e <_raise_r>:
 802223e:	b570      	push	{r4, r5, r6, lr}
 8022240:	0004      	movs	r4, r0
 8022242:	000d      	movs	r5, r1
 8022244:	291f      	cmp	r1, #31
 8022246:	d904      	bls.n	8022252 <_raise_r+0x14>
 8022248:	2316      	movs	r3, #22
 802224a:	6003      	str	r3, [r0, #0]
 802224c:	2001      	movs	r0, #1
 802224e:	4240      	negs	r0, r0
 8022250:	bd70      	pop	{r4, r5, r6, pc}
 8022252:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022254:	2b00      	cmp	r3, #0
 8022256:	d004      	beq.n	8022262 <_raise_r+0x24>
 8022258:	008a      	lsls	r2, r1, #2
 802225a:	189b      	adds	r3, r3, r2
 802225c:	681a      	ldr	r2, [r3, #0]
 802225e:	2a00      	cmp	r2, #0
 8022260:	d108      	bne.n	8022274 <_raise_r+0x36>
 8022262:	0020      	movs	r0, r4
 8022264:	f000 f830 	bl	80222c8 <_getpid_r>
 8022268:	002a      	movs	r2, r5
 802226a:	0001      	movs	r1, r0
 802226c:	0020      	movs	r0, r4
 802226e:	f000 f819 	bl	80222a4 <_kill_r>
 8022272:	e7ed      	b.n	8022250 <_raise_r+0x12>
 8022274:	2a01      	cmp	r2, #1
 8022276:	d009      	beq.n	802228c <_raise_r+0x4e>
 8022278:	1c51      	adds	r1, r2, #1
 802227a:	d103      	bne.n	8022284 <_raise_r+0x46>
 802227c:	2316      	movs	r3, #22
 802227e:	6003      	str	r3, [r0, #0]
 8022280:	2001      	movs	r0, #1
 8022282:	e7e5      	b.n	8022250 <_raise_r+0x12>
 8022284:	2100      	movs	r1, #0
 8022286:	0028      	movs	r0, r5
 8022288:	6019      	str	r1, [r3, #0]
 802228a:	4790      	blx	r2
 802228c:	2000      	movs	r0, #0
 802228e:	e7df      	b.n	8022250 <_raise_r+0x12>

08022290 <raise>:
 8022290:	b510      	push	{r4, lr}
 8022292:	4b03      	ldr	r3, [pc, #12]	@ (80222a0 <raise+0x10>)
 8022294:	0001      	movs	r1, r0
 8022296:	6818      	ldr	r0, [r3, #0]
 8022298:	f7ff ffd1 	bl	802223e <_raise_r>
 802229c:	bd10      	pop	{r4, pc}
 802229e:	46c0      	nop			@ (mov r8, r8)
 80222a0:	200003c8 	.word	0x200003c8

080222a4 <_kill_r>:
 80222a4:	2300      	movs	r3, #0
 80222a6:	b570      	push	{r4, r5, r6, lr}
 80222a8:	4d06      	ldr	r5, [pc, #24]	@ (80222c4 <_kill_r+0x20>)
 80222aa:	0004      	movs	r4, r0
 80222ac:	0008      	movs	r0, r1
 80222ae:	0011      	movs	r1, r2
 80222b0:	602b      	str	r3, [r5, #0]
 80222b2:	f7ea ff41 	bl	800d138 <_kill>
 80222b6:	1c43      	adds	r3, r0, #1
 80222b8:	d103      	bne.n	80222c2 <_kill_r+0x1e>
 80222ba:	682b      	ldr	r3, [r5, #0]
 80222bc:	2b00      	cmp	r3, #0
 80222be:	d000      	beq.n	80222c2 <_kill_r+0x1e>
 80222c0:	6023      	str	r3, [r4, #0]
 80222c2:	bd70      	pop	{r4, r5, r6, pc}
 80222c4:	200038f0 	.word	0x200038f0

080222c8 <_getpid_r>:
 80222c8:	b510      	push	{r4, lr}
 80222ca:	f7ea ff2f 	bl	800d12c <_getpid>
 80222ce:	bd10      	pop	{r4, pc}

080222d0 <expf>:
 80222d0:	b570      	push	{r4, r5, r6, lr}
 80222d2:	1c04      	adds	r4, r0, #0
 80222d4:	f000 f8e6 	bl	80224a4 <__ieee754_expf>
 80222d8:	1c05      	adds	r5, r0, #0
 80222da:	1c20      	adds	r0, r4, #0
 80222dc:	f000 f83c 	bl	8022358 <finitef>
 80222e0:	2800      	cmp	r0, #0
 80222e2:	d00b      	beq.n	80222fc <expf+0x2c>
 80222e4:	490c      	ldr	r1, [pc, #48]	@ (8022318 <expf+0x48>)
 80222e6:	1c20      	adds	r0, r4, #0
 80222e8:	f7de f936 	bl	8000558 <__aeabi_fcmpgt>
 80222ec:	2800      	cmp	r0, #0
 80222ee:	d007      	beq.n	8022300 <expf+0x30>
 80222f0:	f7fd faf0 	bl	801f8d4 <__errno>
 80222f4:	25ff      	movs	r5, #255	@ 0xff
 80222f6:	2322      	movs	r3, #34	@ 0x22
 80222f8:	05ed      	lsls	r5, r5, #23
 80222fa:	6003      	str	r3, [r0, #0]
 80222fc:	1c28      	adds	r0, r5, #0
 80222fe:	bd70      	pop	{r4, r5, r6, pc}
 8022300:	4906      	ldr	r1, [pc, #24]	@ (802231c <expf+0x4c>)
 8022302:	1c20      	adds	r0, r4, #0
 8022304:	f7de f914 	bl	8000530 <__aeabi_fcmplt>
 8022308:	2800      	cmp	r0, #0
 802230a:	d0f7      	beq.n	80222fc <expf+0x2c>
 802230c:	f7fd fae2 	bl	801f8d4 <__errno>
 8022310:	2322      	movs	r3, #34	@ 0x22
 8022312:	2500      	movs	r5, #0
 8022314:	6003      	str	r3, [r0, #0]
 8022316:	e7f1      	b.n	80222fc <expf+0x2c>
 8022318:	42b17217 	.word	0x42b17217
 802231c:	c2cff1b5 	.word	0xc2cff1b5

08022320 <sqrtf>:
 8022320:	b570      	push	{r4, r5, r6, lr}
 8022322:	1c05      	adds	r5, r0, #0
 8022324:	f000 f822 	bl	802236c <__ieee754_sqrtf>
 8022328:	1c29      	adds	r1, r5, #0
 802232a:	1c04      	adds	r4, r0, #0
 802232c:	1c28      	adds	r0, r5, #0
 802232e:	f7df f919 	bl	8001564 <__aeabi_fcmpun>
 8022332:	2800      	cmp	r0, #0
 8022334:	d10e      	bne.n	8022354 <sqrtf+0x34>
 8022336:	2100      	movs	r1, #0
 8022338:	1c28      	adds	r0, r5, #0
 802233a:	f7de f8f9 	bl	8000530 <__aeabi_fcmplt>
 802233e:	2800      	cmp	r0, #0
 8022340:	d008      	beq.n	8022354 <sqrtf+0x34>
 8022342:	f7fd fac7 	bl	801f8d4 <__errno>
 8022346:	2321      	movs	r3, #33	@ 0x21
 8022348:	2100      	movs	r1, #0
 802234a:	6003      	str	r3, [r0, #0]
 802234c:	1c08      	adds	r0, r1, #0
 802234e:	f7de fc41 	bl	8000bd4 <__aeabi_fdiv>
 8022352:	1c04      	adds	r4, r0, #0
 8022354:	1c20      	adds	r0, r4, #0
 8022356:	bd70      	pop	{r4, r5, r6, pc}

08022358 <finitef>:
 8022358:	22ff      	movs	r2, #255	@ 0xff
 802235a:	0043      	lsls	r3, r0, #1
 802235c:	085b      	lsrs	r3, r3, #1
 802235e:	2001      	movs	r0, #1
 8022360:	05d2      	lsls	r2, r2, #23
 8022362:	4293      	cmp	r3, r2
 8022364:	db00      	blt.n	8022368 <finitef+0x10>
 8022366:	2000      	movs	r0, #0
 8022368:	4770      	bx	lr
	...

0802236c <__ieee754_sqrtf>:
 802236c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802236e:	0003      	movs	r3, r0
 8022370:	0042      	lsls	r2, r0, #1
 8022372:	1c04      	adds	r4, r0, #0
 8022374:	20ff      	movs	r0, #255	@ 0xff
 8022376:	0852      	lsrs	r2, r2, #1
 8022378:	05c0      	lsls	r0, r0, #23
 802237a:	4282      	cmp	r2, r0
 802237c:	d30a      	bcc.n	8022394 <__ieee754_sqrtf+0x28>
 802237e:	1c21      	adds	r1, r4, #0
 8022380:	1c20      	adds	r0, r4, #0
 8022382:	f7de fe0d 	bl	8000fa0 <__aeabi_fmul>
 8022386:	1c01      	adds	r1, r0, #0
 8022388:	1c20      	adds	r0, r4, #0
 802238a:	f7de fa99 	bl	80008c0 <__aeabi_fadd>
 802238e:	1c04      	adds	r4, r0, #0
 8022390:	1c20      	adds	r0, r4, #0
 8022392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022394:	2a00      	cmp	r2, #0
 8022396:	d0fb      	beq.n	8022390 <__ieee754_sqrtf+0x24>
 8022398:	2c00      	cmp	r4, #0
 802239a:	da07      	bge.n	80223ac <__ieee754_sqrtf+0x40>
 802239c:	1c21      	adds	r1, r4, #0
 802239e:	1c20      	adds	r0, r4, #0
 80223a0:	f7de ff3c 	bl	800121c <__aeabi_fsub>
 80223a4:	1c01      	adds	r1, r0, #0
 80223a6:	f7de fc15 	bl	8000bd4 <__aeabi_fdiv>
 80223aa:	e7f0      	b.n	802238e <__ieee754_sqrtf+0x22>
 80223ac:	0022      	movs	r2, r4
 80223ae:	15e1      	asrs	r1, r4, #23
 80223b0:	4002      	ands	r2, r0
 80223b2:	4204      	tst	r4, r0
 80223b4:	d046      	beq.n	8022444 <__ieee754_sqrtf+0xd8>
 80223b6:	2280      	movs	r2, #128	@ 0x80
 80223b8:	000f      	movs	r7, r1
 80223ba:	025b      	lsls	r3, r3, #9
 80223bc:	0a5b      	lsrs	r3, r3, #9
 80223be:	0412      	lsls	r2, r2, #16
 80223c0:	3f7f      	subs	r7, #127	@ 0x7f
 80223c2:	4313      	orrs	r3, r2
 80223c4:	07c9      	lsls	r1, r1, #31
 80223c6:	d400      	bmi.n	80223ca <__ieee754_sqrtf+0x5e>
 80223c8:	005b      	lsls	r3, r3, #1
 80223ca:	2400      	movs	r4, #0
 80223cc:	2180      	movs	r1, #128	@ 0x80
 80223ce:	2019      	movs	r0, #25
 80223d0:	0026      	movs	r6, r4
 80223d2:	107f      	asrs	r7, r7, #1
 80223d4:	005b      	lsls	r3, r3, #1
 80223d6:	0449      	lsls	r1, r1, #17
 80223d8:	1875      	adds	r5, r6, r1
 80223da:	001a      	movs	r2, r3
 80223dc:	429d      	cmp	r5, r3
 80223de:	dc02      	bgt.n	80223e6 <__ieee754_sqrtf+0x7a>
 80223e0:	186e      	adds	r6, r5, r1
 80223e2:	1b5a      	subs	r2, r3, r5
 80223e4:	1864      	adds	r4, r4, r1
 80223e6:	3801      	subs	r0, #1
 80223e8:	0053      	lsls	r3, r2, #1
 80223ea:	0849      	lsrs	r1, r1, #1
 80223ec:	2800      	cmp	r0, #0
 80223ee:	d1f3      	bne.n	80223d8 <__ieee754_sqrtf+0x6c>
 80223f0:	2a00      	cmp	r2, #0
 80223f2:	d019      	beq.n	8022428 <__ieee754_sqrtf+0xbc>
 80223f4:	4d17      	ldr	r5, [pc, #92]	@ (8022454 <__ieee754_sqrtf+0xe8>)
 80223f6:	4e18      	ldr	r6, [pc, #96]	@ (8022458 <__ieee754_sqrtf+0xec>)
 80223f8:	6828      	ldr	r0, [r5, #0]
 80223fa:	6831      	ldr	r1, [r6, #0]
 80223fc:	682b      	ldr	r3, [r5, #0]
 80223fe:	9301      	str	r3, [sp, #4]
 8022400:	f7de ff0c 	bl	800121c <__aeabi_fsub>
 8022404:	1c01      	adds	r1, r0, #0
 8022406:	9801      	ldr	r0, [sp, #4]
 8022408:	f7de f89c 	bl	8000544 <__aeabi_fcmple>
 802240c:	2800      	cmp	r0, #0
 802240e:	d00b      	beq.n	8022428 <__ieee754_sqrtf+0xbc>
 8022410:	6828      	ldr	r0, [r5, #0]
 8022412:	6831      	ldr	r1, [r6, #0]
 8022414:	f7de fa54 	bl	80008c0 <__aeabi_fadd>
 8022418:	682d      	ldr	r5, [r5, #0]
 802241a:	1c01      	adds	r1, r0, #0
 802241c:	1c28      	adds	r0, r5, #0
 802241e:	f7de f887 	bl	8000530 <__aeabi_fcmplt>
 8022422:	2800      	cmp	r0, #0
 8022424:	d011      	beq.n	802244a <__ieee754_sqrtf+0xde>
 8022426:	3402      	adds	r4, #2
 8022428:	23fc      	movs	r3, #252	@ 0xfc
 802242a:	1064      	asrs	r4, r4, #1
 802242c:	059b      	lsls	r3, r3, #22
 802242e:	18e3      	adds	r3, r4, r3
 8022430:	05fc      	lsls	r4, r7, #23
 8022432:	18e4      	adds	r4, r4, r3
 8022434:	e7ac      	b.n	8022390 <__ieee754_sqrtf+0x24>
 8022436:	005b      	lsls	r3, r3, #1
 8022438:	3201      	adds	r2, #1
 802243a:	4203      	tst	r3, r0
 802243c:	d0fb      	beq.n	8022436 <__ieee754_sqrtf+0xca>
 802243e:	3a01      	subs	r2, #1
 8022440:	1a89      	subs	r1, r1, r2
 8022442:	e7b8      	b.n	80223b6 <__ieee754_sqrtf+0x4a>
 8022444:	2080      	movs	r0, #128	@ 0x80
 8022446:	0400      	lsls	r0, r0, #16
 8022448:	e7f7      	b.n	802243a <__ieee754_sqrtf+0xce>
 802244a:	2301      	movs	r3, #1
 802244c:	3401      	adds	r4, #1
 802244e:	439c      	bics	r4, r3
 8022450:	e7ea      	b.n	8022428 <__ieee754_sqrtf+0xbc>
 8022452:	46c0      	nop			@ (mov r8, r8)
 8022454:	2000041c 	.word	0x2000041c
 8022458:	20000418 	.word	0x20000418

0802245c <roundf>:
 802245c:	0dc3      	lsrs	r3, r0, #23
 802245e:	b2db      	uxtb	r3, r3
 8022460:	3b7f      	subs	r3, #127	@ 0x7f
 8022462:	0002      	movs	r2, r0
 8022464:	b510      	push	{r4, lr}
 8022466:	2b16      	cmp	r3, #22
 8022468:	dc13      	bgt.n	8022492 <roundf+0x36>
 802246a:	2b00      	cmp	r3, #0
 802246c:	da07      	bge.n	802247e <roundf+0x22>
 802246e:	0fc2      	lsrs	r2, r0, #31
 8022470:	07d0      	lsls	r0, r2, #31
 8022472:	3301      	adds	r3, #1
 8022474:	d102      	bne.n	802247c <roundf+0x20>
 8022476:	23fe      	movs	r3, #254	@ 0xfe
 8022478:	059b      	lsls	r3, r3, #22
 802247a:	4318      	orrs	r0, r3
 802247c:	bd10      	pop	{r4, pc}
 802247e:	4908      	ldr	r1, [pc, #32]	@ (80224a0 <roundf+0x44>)
 8022480:	4119      	asrs	r1, r3
 8022482:	4208      	tst	r0, r1
 8022484:	d0fa      	beq.n	802247c <roundf+0x20>
 8022486:	2080      	movs	r0, #128	@ 0x80
 8022488:	03c0      	lsls	r0, r0, #15
 802248a:	4118      	asrs	r0, r3
 802248c:	1880      	adds	r0, r0, r2
 802248e:	4388      	bics	r0, r1
 8022490:	e7f4      	b.n	802247c <roundf+0x20>
 8022492:	2b80      	cmp	r3, #128	@ 0x80
 8022494:	d1f2      	bne.n	802247c <roundf+0x20>
 8022496:	1c01      	adds	r1, r0, #0
 8022498:	f7de fa12 	bl	80008c0 <__aeabi_fadd>
 802249c:	e7ee      	b.n	802247c <roundf+0x20>
 802249e:	46c0      	nop			@ (mov r8, r8)
 80224a0:	007fffff 	.word	0x007fffff

080224a4 <__ieee754_expf>:
 80224a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80224a6:	21ff      	movs	r1, #255	@ 0xff
 80224a8:	0043      	lsls	r3, r0, #1
 80224aa:	1c04      	adds	r4, r0, #0
 80224ac:	085b      	lsrs	r3, r3, #1
 80224ae:	05c9      	lsls	r1, r1, #23
 80224b0:	428b      	cmp	r3, r1
 80224b2:	d904      	bls.n	80224be <__ieee754_expf+0x1a>
 80224b4:	1c01      	adds	r1, r0, #0
 80224b6:	1c20      	adds	r0, r4, #0
 80224b8:	f7de fa02 	bl	80008c0 <__aeabi_fadd>
 80224bc:	e00d      	b.n	80224da <__ieee754_expf+0x36>
 80224be:	0fc6      	lsrs	r6, r0, #31
 80224c0:	428b      	cmp	r3, r1
 80224c2:	d104      	bne.n	80224ce <__ieee754_expf+0x2a>
 80224c4:	2e00      	cmp	r6, #0
 80224c6:	d000      	beq.n	80224ca <__ieee754_expf+0x26>
 80224c8:	e0ba      	b.n	8022640 <__ieee754_expf+0x19c>
 80224ca:	1c20      	adds	r0, r4, #0
 80224cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80224ce:	495d      	ldr	r1, [pc, #372]	@ (8022644 <__ieee754_expf+0x1a0>)
 80224d0:	4288      	cmp	r0, r1
 80224d2:	dd04      	ble.n	80224de <__ieee754_expf+0x3a>
 80224d4:	2000      	movs	r0, #0
 80224d6:	f000 f8f1 	bl	80226bc <__math_oflowf>
 80224da:	1c04      	adds	r4, r0, #0
 80224dc:	e7f5      	b.n	80224ca <__ieee754_expf+0x26>
 80224de:	2800      	cmp	r0, #0
 80224e0:	da06      	bge.n	80224f0 <__ieee754_expf+0x4c>
 80224e2:	4a59      	ldr	r2, [pc, #356]	@ (8022648 <__ieee754_expf+0x1a4>)
 80224e4:	4293      	cmp	r3, r2
 80224e6:	d903      	bls.n	80224f0 <__ieee754_expf+0x4c>
 80224e8:	2000      	movs	r0, #0
 80224ea:	f000 f8e1 	bl	80226b0 <__math_uflowf>
 80224ee:	e7f4      	b.n	80224da <__ieee754_expf+0x36>
 80224f0:	4a56      	ldr	r2, [pc, #344]	@ (802264c <__ieee754_expf+0x1a8>)
 80224f2:	4293      	cmp	r3, r2
 80224f4:	d96e      	bls.n	80225d4 <__ieee754_expf+0x130>
 80224f6:	4a56      	ldr	r2, [pc, #344]	@ (8022650 <__ieee754_expf+0x1ac>)
 80224f8:	00b5      	lsls	r5, r6, #2
 80224fa:	4293      	cmp	r3, r2
 80224fc:	d84e      	bhi.n	802259c <__ieee754_expf+0xf8>
 80224fe:	4b55      	ldr	r3, [pc, #340]	@ (8022654 <__ieee754_expf+0x1b0>)
 8022500:	1c20      	adds	r0, r4, #0
 8022502:	5959      	ldr	r1, [r3, r5]
 8022504:	f7de fe8a 	bl	800121c <__aeabi_fsub>
 8022508:	4b53      	ldr	r3, [pc, #332]	@ (8022658 <__ieee754_expf+0x1b4>)
 802250a:	1c07      	adds	r7, r0, #0
 802250c:	595b      	ldr	r3, [r3, r5]
 802250e:	2501      	movs	r5, #1
 8022510:	1bad      	subs	r5, r5, r6
 8022512:	9300      	str	r3, [sp, #0]
 8022514:	1bad      	subs	r5, r5, r6
 8022516:	9900      	ldr	r1, [sp, #0]
 8022518:	1c38      	adds	r0, r7, #0
 802251a:	f7de fe7f 	bl	800121c <__aeabi_fsub>
 802251e:	1c04      	adds	r4, r0, #0
 8022520:	1c21      	adds	r1, r4, #0
 8022522:	1c20      	adds	r0, r4, #0
 8022524:	f7de fd3c 	bl	8000fa0 <__aeabi_fmul>
 8022528:	494c      	ldr	r1, [pc, #304]	@ (802265c <__ieee754_expf+0x1b8>)
 802252a:	1c06      	adds	r6, r0, #0
 802252c:	f7de fd38 	bl	8000fa0 <__aeabi_fmul>
 8022530:	494b      	ldr	r1, [pc, #300]	@ (8022660 <__ieee754_expf+0x1bc>)
 8022532:	f7de fe73 	bl	800121c <__aeabi_fsub>
 8022536:	1c31      	adds	r1, r6, #0
 8022538:	f7de fd32 	bl	8000fa0 <__aeabi_fmul>
 802253c:	4949      	ldr	r1, [pc, #292]	@ (8022664 <__ieee754_expf+0x1c0>)
 802253e:	f7de f9bf 	bl	80008c0 <__aeabi_fadd>
 8022542:	1c31      	adds	r1, r6, #0
 8022544:	f7de fd2c 	bl	8000fa0 <__aeabi_fmul>
 8022548:	4947      	ldr	r1, [pc, #284]	@ (8022668 <__ieee754_expf+0x1c4>)
 802254a:	f7de fe67 	bl	800121c <__aeabi_fsub>
 802254e:	1c31      	adds	r1, r6, #0
 8022550:	f7de fd26 	bl	8000fa0 <__aeabi_fmul>
 8022554:	4945      	ldr	r1, [pc, #276]	@ (802266c <__ieee754_expf+0x1c8>)
 8022556:	f7de f9b3 	bl	80008c0 <__aeabi_fadd>
 802255a:	1c31      	adds	r1, r6, #0
 802255c:	f7de fd20 	bl	8000fa0 <__aeabi_fmul>
 8022560:	1c01      	adds	r1, r0, #0
 8022562:	1c20      	adds	r0, r4, #0
 8022564:	f7de fe5a 	bl	800121c <__aeabi_fsub>
 8022568:	1c01      	adds	r1, r0, #0
 802256a:	1c06      	adds	r6, r0, #0
 802256c:	1c20      	adds	r0, r4, #0
 802256e:	f7de fd17 	bl	8000fa0 <__aeabi_fmul>
 8022572:	9001      	str	r0, [sp, #4]
 8022574:	2d00      	cmp	r5, #0
 8022576:	d140      	bne.n	80225fa <__ieee754_expf+0x156>
 8022578:	2180      	movs	r1, #128	@ 0x80
 802257a:	1c30      	adds	r0, r6, #0
 802257c:	05c9      	lsls	r1, r1, #23
 802257e:	f7de fe4d 	bl	800121c <__aeabi_fsub>
 8022582:	1c01      	adds	r1, r0, #0
 8022584:	9801      	ldr	r0, [sp, #4]
 8022586:	f7de fb25 	bl	8000bd4 <__aeabi_fdiv>
 802258a:	1c21      	adds	r1, r4, #0
 802258c:	f7de fe46 	bl	800121c <__aeabi_fsub>
 8022590:	1c01      	adds	r1, r0, #0
 8022592:	20fe      	movs	r0, #254	@ 0xfe
 8022594:	0580      	lsls	r0, r0, #22
 8022596:	f7de fe41 	bl	800121c <__aeabi_fsub>
 802259a:	e79e      	b.n	80224da <__ieee754_expf+0x36>
 802259c:	4934      	ldr	r1, [pc, #208]	@ (8022670 <__ieee754_expf+0x1cc>)
 802259e:	1c20      	adds	r0, r4, #0
 80225a0:	f7de fcfe 	bl	8000fa0 <__aeabi_fmul>
 80225a4:	4b33      	ldr	r3, [pc, #204]	@ (8022674 <__ieee754_expf+0x1d0>)
 80225a6:	5959      	ldr	r1, [r3, r5]
 80225a8:	f7de f98a 	bl	80008c0 <__aeabi_fadd>
 80225ac:	f7de fff0 	bl	8001590 <__aeabi_f2iz>
 80225b0:	0005      	movs	r5, r0
 80225b2:	f7df f80d 	bl	80015d0 <__aeabi_i2f>
 80225b6:	4930      	ldr	r1, [pc, #192]	@ (8022678 <__ieee754_expf+0x1d4>)
 80225b8:	1c06      	adds	r6, r0, #0
 80225ba:	f7de fcf1 	bl	8000fa0 <__aeabi_fmul>
 80225be:	1c01      	adds	r1, r0, #0
 80225c0:	1c20      	adds	r0, r4, #0
 80225c2:	f7de fe2b 	bl	800121c <__aeabi_fsub>
 80225c6:	492d      	ldr	r1, [pc, #180]	@ (802267c <__ieee754_expf+0x1d8>)
 80225c8:	1c07      	adds	r7, r0, #0
 80225ca:	1c30      	adds	r0, r6, #0
 80225cc:	f7de fce8 	bl	8000fa0 <__aeabi_fmul>
 80225d0:	9000      	str	r0, [sp, #0]
 80225d2:	e7a0      	b.n	8022516 <__ieee754_expf+0x72>
 80225d4:	22d0      	movs	r2, #208	@ 0xd0
 80225d6:	0592      	lsls	r2, r2, #22
 80225d8:	4293      	cmp	r3, r2
 80225da:	d20c      	bcs.n	80225f6 <__ieee754_expf+0x152>
 80225dc:	4928      	ldr	r1, [pc, #160]	@ (8022680 <__ieee754_expf+0x1dc>)
 80225de:	1c20      	adds	r0, r4, #0
 80225e0:	f7de f96e 	bl	80008c0 <__aeabi_fadd>
 80225e4:	21fe      	movs	r1, #254	@ 0xfe
 80225e6:	0589      	lsls	r1, r1, #22
 80225e8:	f7dd ffb6 	bl	8000558 <__aeabi_fcmpgt>
 80225ec:	1e05      	subs	r5, r0, #0
 80225ee:	d097      	beq.n	8022520 <__ieee754_expf+0x7c>
 80225f0:	21fe      	movs	r1, #254	@ 0xfe
 80225f2:	0589      	lsls	r1, r1, #22
 80225f4:	e75f      	b.n	80224b6 <__ieee754_expf+0x12>
 80225f6:	2500      	movs	r5, #0
 80225f8:	e792      	b.n	8022520 <__ieee754_expf+0x7c>
 80225fa:	2080      	movs	r0, #128	@ 0x80
 80225fc:	1c31      	adds	r1, r6, #0
 80225fe:	05c0      	lsls	r0, r0, #23
 8022600:	f7de fe0c 	bl	800121c <__aeabi_fsub>
 8022604:	1c01      	adds	r1, r0, #0
 8022606:	9801      	ldr	r0, [sp, #4]
 8022608:	f7de fae4 	bl	8000bd4 <__aeabi_fdiv>
 802260c:	1c01      	adds	r1, r0, #0
 802260e:	9800      	ldr	r0, [sp, #0]
 8022610:	f7de fe04 	bl	800121c <__aeabi_fsub>
 8022614:	1c39      	adds	r1, r7, #0
 8022616:	f7de fe01 	bl	800121c <__aeabi_fsub>
 802261a:	1c01      	adds	r1, r0, #0
 802261c:	20fe      	movs	r0, #254	@ 0xfe
 802261e:	0580      	lsls	r0, r0, #22
 8022620:	f7de fdfc 	bl	800121c <__aeabi_fsub>
 8022624:	002b      	movs	r3, r5
 8022626:	337d      	adds	r3, #125	@ 0x7d
 8022628:	db02      	blt.n	8022630 <__ieee754_expf+0x18c>
 802262a:	05ec      	lsls	r4, r5, #23
 802262c:	1824      	adds	r4, r4, r0
 802262e:	e74c      	b.n	80224ca <__ieee754_expf+0x26>
 8022630:	21d8      	movs	r1, #216	@ 0xd8
 8022632:	3564      	adds	r5, #100	@ 0x64
 8022634:	05ed      	lsls	r5, r5, #23
 8022636:	1828      	adds	r0, r5, r0
 8022638:	0509      	lsls	r1, r1, #20
 802263a:	f7de fcb1 	bl	8000fa0 <__aeabi_fmul>
 802263e:	e74c      	b.n	80224da <__ieee754_expf+0x36>
 8022640:	2400      	movs	r4, #0
 8022642:	e742      	b.n	80224ca <__ieee754_expf+0x26>
 8022644:	42b17217 	.word	0x42b17217
 8022648:	42cff1b5 	.word	0x42cff1b5
 802264c:	3eb17218 	.word	0x3eb17218
 8022650:	3f851591 	.word	0x3f851591
 8022654:	08025248 	.word	0x08025248
 8022658:	08025240 	.word	0x08025240
 802265c:	3331bb4c 	.word	0x3331bb4c
 8022660:	35ddea0e 	.word	0x35ddea0e
 8022664:	388ab355 	.word	0x388ab355
 8022668:	3b360b61 	.word	0x3b360b61
 802266c:	3e2aaaab 	.word	0x3e2aaaab
 8022670:	3fb8aa3b 	.word	0x3fb8aa3b
 8022674:	08025250 	.word	0x08025250
 8022678:	3f317180 	.word	0x3f317180
 802267c:	3717f7d1 	.word	0x3717f7d1
 8022680:	7149f2ca 	.word	0x7149f2ca

08022684 <with_errnof>:
 8022684:	b570      	push	{r4, r5, r6, lr}
 8022686:	000d      	movs	r5, r1
 8022688:	1c04      	adds	r4, r0, #0
 802268a:	f7fd f923 	bl	801f8d4 <__errno>
 802268e:	6005      	str	r5, [r0, #0]
 8022690:	1c20      	adds	r0, r4, #0
 8022692:	bd70      	pop	{r4, r5, r6, pc}

08022694 <xflowf>:
 8022694:	b510      	push	{r4, lr}
 8022696:	1c0b      	adds	r3, r1, #0
 8022698:	2800      	cmp	r0, #0
 802269a:	d002      	beq.n	80226a2 <xflowf+0xe>
 802269c:	2380      	movs	r3, #128	@ 0x80
 802269e:	061b      	lsls	r3, r3, #24
 80226a0:	18cb      	adds	r3, r1, r3
 80226a2:	1c18      	adds	r0, r3, #0
 80226a4:	f7de fc7c 	bl	8000fa0 <__aeabi_fmul>
 80226a8:	2122      	movs	r1, #34	@ 0x22
 80226aa:	f7ff ffeb 	bl	8022684 <with_errnof>
 80226ae:	bd10      	pop	{r4, pc}

080226b0 <__math_uflowf>:
 80226b0:	2180      	movs	r1, #128	@ 0x80
 80226b2:	b510      	push	{r4, lr}
 80226b4:	0549      	lsls	r1, r1, #21
 80226b6:	f7ff ffed 	bl	8022694 <xflowf>
 80226ba:	bd10      	pop	{r4, pc}

080226bc <__math_oflowf>:
 80226bc:	21e0      	movs	r1, #224	@ 0xe0
 80226be:	b510      	push	{r4, lr}
 80226c0:	05c9      	lsls	r1, r1, #23
 80226c2:	f7ff ffe7 	bl	8022694 <xflowf>
 80226c6:	bd10      	pop	{r4, pc}

080226c8 <_init>:
 80226c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226ca:	46c0      	nop			@ (mov r8, r8)
 80226cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226ce:	bc08      	pop	{r3}
 80226d0:	469e      	mov	lr, r3
 80226d2:	4770      	bx	lr

080226d4 <_fini>:
 80226d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226d6:	46c0      	nop			@ (mov r8, r8)
 80226d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226da:	bc08      	pop	{r3}
 80226dc:	469e      	mov	lr, r3
 80226de:	4770      	bx	lr
